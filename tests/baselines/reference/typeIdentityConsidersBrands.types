=== tests/cases/compiler/typeIdentityConsidersBrands.ts ===
class X{
>X : X

      name: string;
>name : 文字
>类型别名 :=> 文字
}

class Y{
>Y : Y

      name: string;
>name : 文字
>类型别名 :=> 文字
}

class X_1 {
>X_1 : X_1

    private name: string;
>name : 文字
>类型别名 :=> 文字
}

class Y_1 {
>Y_1 : Y_1

    private name: string;
>name : 文字
>类型别名 :=> 文字
}

function foo(arg: X){}
>foo : (arg: X) => 无值
>arg : X
>X : X
 
var a = new Y();
>a : Y
>new Y() : Y
>Y : 类为 Y

var b = new X();
>b : X
>new X() : X
>X : 类为 X
 
a = b; // ok
>a = b : X
>a : Y
>b : X

foo(a); // ok
>foo(a) : 无值
>类型别名 :=> 无值
>foo : (arg: X) => 无值
>a : Y

var a2 = new Y_1();
>a2 : Y_1
>new Y_1() : Y_1
>Y_1 : 类为 Y_1

var b2 = new X_1();
>b2 : X_1
>new X_1() : X_1
>X_1 : 类为 X_1

function foo2(arg: X_1) { }
>foo2 : (arg: X_1) => 无值
>arg : X_1
>X_1 : X_1

a2 = b2; // should error
>a2 = b2 : X_1
>a2 : Y_1
>b2 : X_1

foo2(a2); // should error
>foo2(a2) : 无值
>类型别名 :=> 无值
>foo2 : (arg: X_1) => 无值
>a2 : Y_1

