=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormFunctionEquality.ts ===
declare function isString1(a: number, b: Object): b is string;
>isString1 : (a: number, b: Object) => b is string
>a : number
>类型别名 :=> 数字
>b : Object
>Object : Object
>b : any
>类型别名 :=> 任意

declare function isString2(a: Object): a is string;
>isString2 : (a: Object) => a is string
>a : Object
>Object : Object
>a : any
>类型别名 :=> 任意

switch (isString1(0, "")) {
>isString1(0, "") : boolean
>类型别名 :=> 真假
>isString1 : (a: number, b: Object) => b is string
>0 : 0
>"" : ""

    case isString2(""):
>isString2("") : boolean
>类型别名 :=> 真假
>isString2 : (a: Object) => a is string
>"" : ""

    default:
}

var x = isString1(0, "") === isString2("");
>x : boolean
>类型别名 :=> 真假
>isString1(0, "") === isString2("") : boolean
>类型别名 :=> 真假
>isString1(0, "") : boolean
>类型别名 :=> 真假
>isString1 : (a: number, b: Object) => b is string
>0 : 0
>"" : ""
>isString2("") : boolean
>类型别名 :=> 真假
>isString2 : (a: Object) => a is string
>"" : ""

function isString3(a: number, b: number, c: Object): c is string {
>isString3 : (a: number, b: number, c: Object) => c is string
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>c : Object
>Object : Object
>c : any
>类型别名 :=> 任意

    return isString1(0, c);
>isString1(0, c) : boolean
>类型别名 :=> 真假
>isString1 : (a: number, b: Object) => b is string
>0 : 0
>c : Object
}

