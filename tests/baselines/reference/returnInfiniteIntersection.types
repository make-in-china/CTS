=== tests/cases/compiler/returnInfiniteIntersection.ts ===
function recursive() {
>recursive : () => (<T>(subkey: T) => 任意 & { p: 任意; }) & { p: 任意; }

    let x = <T>(subkey: T) => recursive();
>x : <T>(subkey: T) => 任意 & { p: 任意; }
><T>(subkey: T) => recursive() : <T>(subkey: T) => 任意 & { p: 任意; }
>T : T
>subkey : T
>T : T
>recursive() : (<T>(subkey: T) => 任意 & { p: 任意; }) & { p: 任意; }
>recursive : () => (<T>(subkey: T) => 任意 & { p: 任意; }) & { p: 任意; }

    return x as typeof x & { p };
>x as typeof x & { p } : (<T>(subkey: T) => 任意 & { p: 任意; }) & { p: 任意; }
>x : <T>(subkey: T) => 任意 & { p: 任意; }
>x : <T>(subkey: T) => 任意 & { p: 任意; }
>p : 任意
>类型别名 :=> 任意
}

let result = recursive()(1)
>result : (<T>(subkey: T) => 任意 & { p: 任意; }) & { p: 任意; }
>recursive()(1) : (<T>(subkey: T) => 任意 & { p: 任意; }) & { p: 任意; }
>recursive() : (<T>(subkey: T) => 任意 & { p: 任意; }) & { p: 任意; }
>recursive : () => (<T>(subkey: T) => 任意 & { p: 任意; }) & { p: 任意; }
>1 : 1

