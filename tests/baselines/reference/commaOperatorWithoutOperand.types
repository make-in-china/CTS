=== tests/cases/conformance/expressions/commaOperator/commaOperatorWithoutOperand.ts ===
var ANY: any;
>ANY : any
>类型别名 :=> 任意

var BOOLEAN: boolean;
>BOOLEAN : boolean
>类型别名 :=> 真假

var NUMBER: number;
>NUMBER : number
>类型别名 :=> 数字

var STRING: string;
>STRING : string
>类型别名 :=> 文字

var OBJECT: Object;
>OBJECT : Object
>Object : Object

// Expect to have compiler errors
// Missing the second operand
(ANY, );
>(ANY, ) : any
>类型别名 :=> 任意
>ANY, : any
>类型别名 :=> 任意
>ANY : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意

(BOOLEAN, );
>(BOOLEAN, ) : any
>类型别名 :=> 任意
>BOOLEAN, : any
>类型别名 :=> 任意
>BOOLEAN : boolean
>类型别名 :=> 真假
> : any
>类型别名 :=> 任意

(NUMBER, );
>(NUMBER, ) : any
>类型别名 :=> 任意
>NUMBER, : any
>类型别名 :=> 任意
>NUMBER : number
>类型别名 :=> 数字
> : any
>类型别名 :=> 任意

(STRING, );
>(STRING, ) : any
>类型别名 :=> 任意
>STRING, : any
>类型别名 :=> 任意
>STRING : string
>类型别名 :=> 文字
> : any
>类型别名 :=> 任意

(OBJECT, );
>(OBJECT, ) : any
>类型别名 :=> 任意
>OBJECT, : any
>类型别名 :=> 任意
>OBJECT : Object
> : any
>类型别名 :=> 任意

// Missing the first operand
(, ANY);
>(, ANY) : any
>类型别名 :=> 任意
>, ANY : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
>ANY : any
>类型别名 :=> 任意

(, BOOLEAN);
>(, BOOLEAN) : boolean
>类型别名 :=> 真假
>, BOOLEAN : boolean
>类型别名 :=> 真假
> : any
>类型别名 :=> 任意
>BOOLEAN : boolean
>类型别名 :=> 真假

(, NUMBER);
>(, NUMBER) : number
>类型别名 :=> 数字
>, NUMBER : number
>类型别名 :=> 数字
> : any
>类型别名 :=> 任意
>NUMBER : number
>类型别名 :=> 数字

(, STRING);
>(, STRING) : string
>类型别名 :=> 文字
>, STRING : string
>类型别名 :=> 文字
> : any
>类型别名 :=> 任意
>STRING : string
>类型别名 :=> 文字

(, OBJECT);
>(, OBJECT) : Object
>, OBJECT : Object
> : any
>类型别名 :=> 任意
>OBJECT : Object

// Missing all operands
( , );
>( , ) : any
>类型别名 :=> 任意
>, : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意

