=== tests/cases/conformance/expressions/commaOperator/commaOperatorWithoutOperand.ts ===
var ANY: any;
>ANY : 任意
>类型别名 :=> 任意

var BOOLEAN: boolean;
>BOOLEAN : 真假
>类型别名 :=> 真假

var NUMBER: number;
>NUMBER : 数字
>类型别名 :=> 数字

var STRING: string;
>STRING : 文字
>类型别名 :=> 文字

var OBJECT: Object;
>OBJECT : Object
>Object : Object

// Expect to have compiler errors
// Missing the second operand
(ANY, );
>(ANY, ) : 任意
>类型别名 :=> 任意
>ANY, : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

(BOOLEAN, );
>(BOOLEAN, ) : 任意
>类型别名 :=> 任意
>BOOLEAN, : 任意
>类型别名 :=> 任意
>BOOLEAN : 真假
>类型别名 :=> 真假
> : 任意
>类型别名 :=> 任意

(NUMBER, );
>(NUMBER, ) : 任意
>类型别名 :=> 任意
>NUMBER, : 任意
>类型别名 :=> 任意
>NUMBER : 数字
>类型别名 :=> 数字
> : 任意
>类型别名 :=> 任意

(STRING, );
>(STRING, ) : 任意
>类型别名 :=> 任意
>STRING, : 任意
>类型别名 :=> 任意
>STRING : 文字
>类型别名 :=> 文字
> : 任意
>类型别名 :=> 任意

(OBJECT, );
>(OBJECT, ) : 任意
>类型别名 :=> 任意
>OBJECT, : 任意
>类型别名 :=> 任意
>OBJECT : Object
> : 任意
>类型别名 :=> 任意

// Missing the first operand
(, ANY);
>(, ANY) : 任意
>类型别名 :=> 任意
>, ANY : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意

(, BOOLEAN);
>(, BOOLEAN) : 真假
>类型别名 :=> 真假
>, BOOLEAN : 真假
>类型别名 :=> 真假
> : 任意
>类型别名 :=> 任意
>BOOLEAN : 真假
>类型别名 :=> 真假

(, NUMBER);
>(, NUMBER) : 数字
>类型别名 :=> 数字
>, NUMBER : 数字
>类型别名 :=> 数字
> : 任意
>类型别名 :=> 任意
>NUMBER : 数字
>类型别名 :=> 数字

(, STRING);
>(, STRING) : 文字
>类型别名 :=> 文字
>, STRING : 文字
>类型别名 :=> 文字
> : 任意
>类型别名 :=> 任意
>STRING : 文字
>类型别名 :=> 文字

(, OBJECT);
>(, OBJECT) : Object
>, OBJECT : Object
> : 任意
>类型别名 :=> 任意
>OBJECT : Object

// Missing all operands
( , );
>( , ) : 任意
>类型别名 :=> 任意
>, : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

