=== tests/cases/conformance/dynamicImport/0.ts ===
export class B {
>B : B

    print() { return "I am B"}
>print : () => 文字
>"I am B" : "I am B"
}

export function foo() { return "foo" }
>foo : () => 文字
>"foo" : "foo"

=== tests/cases/conformance/dynamicImport/1.ts ===
export function backup() { return "backup"; }
>backup : () => 文字
>"backup" : "backup"

=== tests/cases/conformance/dynamicImport/2.ts ===
declare var console: any;
>console : 任意
>类型别名 :=> 任意

class C {
>C : C

    private myModule = import("./0");
>myModule : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>import("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>"./0" : "./0"

    method() {
>method : () => 无值

        const loadAsync = import ("./0");
>loadAsync : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>import ("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>"./0" : "./0"

        this.myModule.then(Zero => {
>this.myModule.then(Zero => {            console.log(Zero.foo());        }, async err => {            console.log(err);            let one = await import("./1");            console.log(one.backup());        }) : Promise<无值>
>this.myModule.then : <TResult1 = 类为 "tests/cases/conformance/dynamicImport/0", TResult2 = 不及>(onfulfilled?: (value: 类为 "tests/cases/conformance/dynamicImport/0") => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>this.myModule : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>this : 本体
>myModule : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>then : <TResult1 = 类为 "tests/cases/conformance/dynamicImport/0", TResult2 = 不及>(onfulfilled?: (value: 类为 "tests/cases/conformance/dynamicImport/0") => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>Zero => {            console.log(Zero.foo());        } : (Zero: 类为 "tests/cases/conformance/dynamicImport/0") => 无值
>Zero : 类为 "tests/cases/conformance/dynamicImport/0"

            console.log(Zero.foo());
>console.log(Zero.foo()) : 任意
>类型别名 :=> 任意
>console.log : 任意
>类型别名 :=> 任意
>console : 任意
>类型别名 :=> 任意
>log : 任意
>类型别名 :=> 任意
>Zero.foo() : 文字
>类型别名 :=> 文字
>Zero.foo : () => 文字
>Zero : 类为 "tests/cases/conformance/dynamicImport/0"
>foo : () => 文字

        }, async err => {
>async err => {            console.log(err);            let one = await import("./1");            console.log(one.backup());        } : (err: 任意) => Promise<无值>
>err : 任意
>类型别名 :=> 任意

            console.log(err);
>console.log(err) : 任意
>类型别名 :=> 任意
>console.log : 任意
>类型别名 :=> 任意
>console : 任意
>类型别名 :=> 任意
>log : 任意
>类型别名 :=> 任意
>err : 任意
>类型别名 :=> 任意

            let one = await import("./1");
>one : 类为 "tests/cases/conformance/dynamicImport/1"
>await import("./1") : 类为 "tests/cases/conformance/dynamicImport/1"
>import("./1") : Promise<类为 "tests/cases/conformance/dynamicImport/1">
>"./1" : "./1"

            console.log(one.backup());
>console.log(one.backup()) : 任意
>类型别名 :=> 任意
>console.log : 任意
>类型别名 :=> 任意
>console : 任意
>类型别名 :=> 任意
>log : 任意
>类型别名 :=> 任意
>one.backup() : 文字
>类型别名 :=> 文字
>one.backup : () => 文字
>one : 类为 "tests/cases/conformance/dynamicImport/1"
>backup : () => 文字

        });
    }
}

export class D {
>D : D

    private myModule = import("./0");
>myModule : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>import("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>"./0" : "./0"

    method() {
>method : () => 无值

        const loadAsync = import("./0");
>loadAsync : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>import("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>"./0" : "./0"

        this.myModule.then(Zero => {
>this.myModule.then(Zero => {            console.log(Zero.foo());        }, async err => {            console.log(err);            let one = await import("./1");            console.log(one.backup());        }) : Promise<无值>
>this.myModule.then : <TResult1 = 类为 "tests/cases/conformance/dynamicImport/0", TResult2 = 不及>(onfulfilled?: (value: 类为 "tests/cases/conformance/dynamicImport/0") => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>this.myModule : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>this : 本体
>myModule : Promise<类为 "tests/cases/conformance/dynamicImport/0">
>then : <TResult1 = 类为 "tests/cases/conformance/dynamicImport/0", TResult2 = 不及>(onfulfilled?: (value: 类为 "tests/cases/conformance/dynamicImport/0") => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>Zero => {            console.log(Zero.foo());        } : (Zero: 类为 "tests/cases/conformance/dynamicImport/0") => 无值
>Zero : 类为 "tests/cases/conformance/dynamicImport/0"

            console.log(Zero.foo());
>console.log(Zero.foo()) : 任意
>类型别名 :=> 任意
>console.log : 任意
>类型别名 :=> 任意
>console : 任意
>类型别名 :=> 任意
>log : 任意
>类型别名 :=> 任意
>Zero.foo() : 文字
>类型别名 :=> 文字
>Zero.foo : () => 文字
>Zero : 类为 "tests/cases/conformance/dynamicImport/0"
>foo : () => 文字

        }, async err => {
>async err => {            console.log(err);            let one = await import("./1");            console.log(one.backup());        } : (err: 任意) => Promise<无值>
>err : 任意
>类型别名 :=> 任意

            console.log(err);
>console.log(err) : 任意
>类型别名 :=> 任意
>console.log : 任意
>类型别名 :=> 任意
>console : 任意
>类型别名 :=> 任意
>log : 任意
>类型别名 :=> 任意
>err : 任意
>类型别名 :=> 任意

            let one = await import("./1");
>one : 类为 "tests/cases/conformance/dynamicImport/1"
>await import("./1") : 类为 "tests/cases/conformance/dynamicImport/1"
>import("./1") : Promise<类为 "tests/cases/conformance/dynamicImport/1">
>"./1" : "./1"

            console.log(one.backup());
>console.log(one.backup()) : 任意
>类型别名 :=> 任意
>console.log : 任意
>类型别名 :=> 任意
>console : 任意
>类型别名 :=> 任意
>log : 任意
>类型别名 :=> 任意
>one.backup() : 文字
>类型别名 :=> 文字
>one.backup : () => 文字
>one : 类为 "tests/cases/conformance/dynamicImport/1"
>backup : () => 文字

        });
    }
}
