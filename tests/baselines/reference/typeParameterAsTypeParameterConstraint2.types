=== tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraint2.ts ===
// using a type parameter as a constraint for a type parameter is invalid
// these should be errors unless otherwise noted

function foo<T, U extends T>(x: T, y: U): U { return y; } // this is now an error
>foo : <T, U extends T>(x: T, y: U) => U
>T : T
>U : U
>T : T
>x : T
>T : T
>y : U
>U : U
>U : U
>y : U

foo(1, '');
>foo(1, '') : any
>类型别名 :=> 任意
>foo : <T, U extends T>(x: T, y: U) => U
>1 : 1
>'' : ""

foo(1, {});
>foo(1, {}) : any
>类型别名 :=> 任意
>foo : <T, U extends T>(x: T, y: U) => U
>1 : 1
>{} : {}

interface NumberVariant extends Number {
>NumberVariant : NumberVariant
>Number : Number

    x: number;
>x : number
>类型别名 :=> 数字
}
var n: NumberVariant;
>n : NumberVariant
>NumberVariant : NumberVariant

var r3 = foo(1, n);
>r3 : any
>类型别名 :=> 任意
>foo(1, n) : any
>类型别名 :=> 任意
>foo : <T, U extends T>(x: T, y: U) => U
>1 : 1
>n : NumberVariant

function foo2<T, U extends { length: T }>(x: T, y: U) { return y; } // this is now an error
>foo2 : <T, U extends { length: T; }>(x: T, y: U) => U
>T : T
>U : U
>length : T
>T : T
>x : T
>T : T
>y : U
>U : U
>y : U

foo2(1, { length: '' });
>foo2(1, { length: '' }) : any
>类型别名 :=> 任意
>foo2 : <T, U extends { length: T; }>(x: T, y: U) => U
>1 : 1
>{ length: '' } : { length: string; }
>length : string
>类型别名 :=> 文字
>'' : ""

foo2(1, { length: {} });
>foo2(1, { length: {} }) : any
>类型别名 :=> 任意
>foo2 : <T, U extends { length: T; }>(x: T, y: U) => U
>1 : 1
>{ length: {} } : { length: {}; }
>length : {}
>{} : {}

foo2([], ['']);
>foo2([], ['']) : any
>类型别名 :=> 任意
>foo2 : <T, U extends { length: T; }>(x: T, y: U) => U
>[] : undefined[]
>[''] : string[]
>'' : ""

