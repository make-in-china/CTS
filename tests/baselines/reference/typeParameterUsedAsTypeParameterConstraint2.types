=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/typeParameterUsedAsTypeParameterConstraint2.ts ===
// Type parameters are in scope in their own and other type parameter lists
// Nested local functions

function foo<T, U extends T>(x: T, y: U) {
>foo : <T, U 扩展 T>(x: T, y: U) => 无值
>T : T
>U : U
>T : T
>x : T
>T : T
>y : U
>U : U

    function bar<V extends T, W extends U>() {
>bar : <V 扩展 T, W 扩展 U>() => 无值
>V : V
>T : T
>W : W
>U : U

        function baz<X extends W, Y extends V>(a: X, b: Y): T {
>baz : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>X : X
>W : W
>Y : Y
>V : V
>a : X
>X : X
>b : Y
>Y : Y
>T : T

            x = y;
>x = y : U
>x : T
>y : U

            return y;
>y : U
        }
    }
}

function foo2<U extends T, T>(x: T, y: U) {
>foo2 : <U 扩展 T, T>(x: T, y: U) => 无值
>U : U
>T : T
>T : T
>x : T
>T : T
>y : U
>U : U

    function bar<V extends T, W extends U>() {
>bar : <V 扩展 T, W 扩展 U>() => 无值
>V : V
>T : T
>W : W
>U : U

        function baz<X extends W, Y extends V>(a: X, b: Y): T {
>baz : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>X : X
>W : W
>Y : Y
>V : V
>a : X
>X : X
>b : Y
>Y : Y
>T : T

            x = y;
>x = y : U
>x : T
>y : U

            return y;
>y : U
        }
    }
}

var f = function <T, U extends T>(x: T, y: U) {
>f : <T, U 扩展 T>(x: T, y: U) => 无值
>function <T, U extends T>(x: T, y: U) {    function bar<V extends T, W extends U>() {        var g = function <X extends W, Y extends V>(a: X, b: Y): T {            x = y;            return y;        }    }} : <T, U 扩展 T>(x: T, y: U) => 无值
>T : T
>U : U
>T : T
>x : T
>T : T
>y : U
>U : U

    function bar<V extends T, W extends U>() {
>bar : <V 扩展 T, W 扩展 U>() => 无值
>V : V
>T : T
>W : W
>U : U

        var g = function <X extends W, Y extends V>(a: X, b: Y): T {
>g : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>function <X extends W, Y extends V>(a: X, b: Y): T {            x = y;            return y;        } : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>X : X
>W : W
>Y : Y
>V : V
>a : X
>X : X
>b : Y
>Y : Y
>T : T

            x = y;
>x = y : U
>x : T
>y : U

            return y;
>y : U
        }
    }
}

var f2 = function <U extends T, T>(x: T, y: U) {
>f2 : <U 扩展 T, T>(x: T, y: U) => 无值
>function <U extends T, T>(x: T, y: U) {    function bar<V extends T, W extends U>() {        var g = function baz<X extends W, Y extends V>(a: X, b: Y): T {            x = y;            return y;        }    }} : <U 扩展 T, T>(x: T, y: U) => 无值
>U : U
>T : T
>T : T
>x : T
>T : T
>y : U
>U : U

    function bar<V extends T, W extends U>() {
>bar : <V 扩展 T, W 扩展 U>() => 无值
>V : V
>T : T
>W : W
>U : U

        var g = function baz<X extends W, Y extends V>(a: X, b: Y): T {
>g : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>function baz<X extends W, Y extends V>(a: X, b: Y): T {            x = y;            return y;        } : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>baz : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>X : X
>W : W
>Y : Y
>V : V
>a : X
>X : X
>b : Y
>Y : Y
>T : T

            x = y;
>x = y : U
>x : T
>y : U

            return y;
>y : U
        }
    }
}

var f3 = <T, U extends T>(x: T, y: U) => {
>f3 : <T, U 扩展 T>(x: T, y: U) => 无值
><T, U extends T>(x: T, y: U) => {    function bar<V extends T, W extends U>() {        var g = <X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        }    }} : <T, U 扩展 T>(x: T, y: U) => 无值
>T : T
>U : U
>T : T
>x : T
>T : T
>y : U
>U : U

    function bar<V extends T, W extends U>() {
>bar : <V 扩展 T, W 扩展 U>() => 无值
>V : V
>T : T
>W : W
>U : U

        var g = <X extends W, Y extends V>(a: X, b: Y): T => {
>g : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
><X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        } : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>X : X
>W : W
>Y : Y
>V : V
>a : X
>X : X
>b : Y
>Y : Y
>T : T

            x = y;
>x = y : U
>x : T
>y : U

            return y;
>y : U
        }
    }
}

var f4 = <U extends T, T>(x: T, y: U) => {
>f4 : <U 扩展 T, T>(x: T, y: U) => 无值
><U extends T, T>(x: T, y: U) => {    function bar<V extends T, W extends U>() {        var g = <X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        }    }} : <U 扩展 T, T>(x: T, y: U) => 无值
>U : U
>T : T
>T : T
>x : T
>T : T
>y : U
>U : U

    function bar<V extends T, W extends U>() {
>bar : <V 扩展 T, W 扩展 U>() => 无值
>V : V
>T : T
>W : W
>U : U

        var g = <X extends W, Y extends V>(a: X, b: Y): T => {
>g : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
><X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        } : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>X : X
>W : W
>Y : Y
>V : V
>a : X
>X : X
>b : Y
>Y : Y
>T : T

            x = y;
>x = y : U
>x : T
>y : U

            return y;
>y : U
        }
    }
}
