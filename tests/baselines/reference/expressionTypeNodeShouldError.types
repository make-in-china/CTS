=== tests/cases/compiler/base.d.ts ===
declare const x: "foo".charCodeAt(0);
>x : "foo"
>charCodeAt : 0
>(0) : 0
>0 : 0

=== tests/cases/compiler/string.ts ===
interface String {
>String : String

    typeof<T>(x: T): T;
>typeof : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
}

class C {
>C : C

    foo() {
>foo : () => void

        const x: "".typeof(this.foo);
>x : ""
>typeof(this.foo) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>(this.foo) : () => void
>this.foo : () => void
>this : this
>foo : () => void
    }
}

const nodes = document.getElementsByTagName("li");
>nodes : any
>类型别名 :=> 任意
>document.getElementsByTagName("li") : any
>类型别名 :=> 任意
>document.getElementsByTagName : any
>类型别名 :=> 任意
>document : any
>类型别名 :=> 任意
>getElementsByTagName : any
>类型别名 :=> 任意
>"li" : "li"

type ItemType = "".typeof(nodes.item(0));
>ItemType : ""
>typeof(nodes.item(0)) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>(nodes.item(0)) : any
>类型别名 :=> 任意
>nodes.item(0) : any
>类型别名 :=> 任意
>nodes.item : any
>类型别名 :=> 任意
>nodes : any
>类型别名 :=> 任意
>item : any
>类型别名 :=> 任意
>0 : 0

=== tests/cases/compiler/number.ts ===
interface Number {
>Number : Number

    typeof<T>(x: T): T;
>typeof : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
}

class C2 {
>C2 : C2

    foo() {
>foo : () => void

        const x: 3.141592.typeof(this.foo);
>x : 3.141592
>typeof(this.foo) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>(this.foo) : () => void
>this.foo : () => void
>this : this
>foo : () => void
    }
}

const nodes2 = document.getElementsByTagName("li");
>nodes2 : any
>类型别名 :=> 任意
>document.getElementsByTagName("li") : any
>类型别名 :=> 任意
>document.getElementsByTagName : any
>类型别名 :=> 任意
>document : any
>类型别名 :=> 任意
>getElementsByTagName : any
>类型别名 :=> 任意
>"li" : "li"

type ItemType2 = 4..typeof(nodes.item(0));
>ItemType2 : 4
>typeof(nodes.item(0)) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>(nodes.item(0)) : any
>类型别名 :=> 任意
>nodes.item(0) : any
>类型别名 :=> 任意
>nodes.item : any
>类型别名 :=> 任意
>nodes : any
>类型别名 :=> 任意
>item : any
>类型别名 :=> 任意
>0 : 0

=== tests/cases/compiler/boolean.ts ===
interface Boolean {
>Boolean : Boolean

    typeof<T>(x: T): T;
>typeof : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
}

class C3 {
>C3 : C3

    foo() {
>foo : () => void

        const x: false.typeof(this.foo);
>x : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假
>typeof(this.foo) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>(this.foo) : () => void
>this.foo : () => void
>this : this
>foo : () => void
    }
}

const nodes3 = document.getElementsByTagName("li");
>nodes3 : any
>类型别名 :=> 任意
>document.getElementsByTagName("li") : any
>类型别名 :=> 任意
>document.getElementsByTagName : any
>类型别名 :=> 任意
>document : any
>类型别名 :=> 任意
>getElementsByTagName : any
>类型别名 :=> 任意
>"li" : "li"

type ItemType3 = true.typeof(nodes.item(0));
>ItemType3 : true
>类型别名 :=> 为真
>true : true
>类型别名 :=> 为真
>typeof(nodes.item(0)) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>(nodes.item(0)) : any
>类型别名 :=> 任意
>nodes.item(0) : any
>类型别名 :=> 任意
>nodes.item : any
>类型别名 :=> 任意
>nodes : any
>类型别名 :=> 任意
>item : any
>类型别名 :=> 任意
>0 : 0


