=== tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithUnsupportedStringType.ts ===
// ++ operator on string type
var STRING: string;
>STRING : 文字
>类型别名 :=> 文字

var STRING1: string[] = ["", ""];
>STRING1 : 文字[]
>["", ""] : 文字[]
>"" : ""
>"" : ""

function foo(): string { return ""; }
>foo : () => 文字
>"" : ""

class A {
>A : A

    public a: string;
>a : 文字
>类型别名 :=> 文字

    static foo() { return ""; }
>foo : () => 文字
>"" : ""
}
module M {
>M : 类为 M

    export var n: string;
>n : 文字
>类型别名 :=> 文字
}

var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// string type var
var ResultIsNumber1 = ++STRING;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>++STRING : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字

var ResultIsNumber2 = ++STRING1;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>++STRING1 : 数字
>类型别名 :=> 数字
>STRING1 : 文字[]

var ResultIsNumber3 = STRING++;
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>STRING++ : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字

var ResultIsNumber4 = STRING1++;
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>STRING1++ : 数字
>类型别名 :=> 数字
>STRING1 : 文字[]

// string type literal
var ResultIsNumber5 = ++"";
>ResultIsNumber5 : 数字
>类型别名 :=> 数字
>++"" : 数字
>类型别名 :=> 数字
>"" : ""

var ResultIsNumber6 = ++{ x: "", y: "" };
>ResultIsNumber6 : 数字
>类型别名 :=> 数字
>++{ x: "", y: "" } : 数字
>类型别名 :=> 数字
>{ x: "", y: "" } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : 文字
>类型别名 :=> 文字
>"" : ""

var ResultIsNumber7 = ++{ x: "", y: (s: string) => { return s; } };
>ResultIsNumber7 : 数字
>类型别名 :=> 数字
>++{ x: "", y: (s: string) => { return s; } } : 数字
>类型别名 :=> 数字
>{ x: "", y: (s: string) => { return s; } } : { x: 文字; y: (s: 文字) => 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : (s: 文字) => 文字
>(s: string) => { return s; } : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

var ResultIsNumber8 = ""++;
>ResultIsNumber8 : 数字
>类型别名 :=> 数字
>""++ : 数字
>类型别名 :=> 数字
>"" : ""

var ResultIsNumber9 = { x: "", y: "" }++;
>ResultIsNumber9 : 数字
>类型别名 :=> 数字
>{ x: "", y: "" }++ : 数字
>类型别名 :=> 数字
>{ x: "", y: "" } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : 文字
>类型别名 :=> 文字
>"" : ""

var ResultIsNumber10 = { x: "", y: (s: string) => { return s; } }++;
>ResultIsNumber10 : 数字
>类型别名 :=> 数字
>{ x: "", y: (s: string) => { return s; } }++ : 数字
>类型别名 :=> 数字
>{ x: "", y: (s: string) => { return s; } } : { x: 文字; y: (s: 文字) => 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : (s: 文字) => 文字
>(s: string) => { return s; } : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

// string type expressions
var ResultIsNumber11 = ++objA.a;
>ResultIsNumber11 : 数字
>类型别名 :=> 数字
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字

var ResultIsNumber12 = ++M.n;
>ResultIsNumber12 : 数字
>类型别名 :=> 数字
>++M.n : 数字
>类型别名 :=> 数字
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

var ResultIsNumber13 = ++STRING1[0];
>ResultIsNumber13 : 数字
>类型别名 :=> 数字
>++STRING1[0] : 数字
>类型别名 :=> 数字
>STRING1[0] : 文字
>类型别名 :=> 文字
>STRING1 : 文字[]
>0 : 0

var ResultIsNumber14 = ++foo();
>ResultIsNumber14 : 数字
>类型别名 :=> 数字
>++foo() : 数字
>类型别名 :=> 数字
>foo() : 文字
>类型别名 :=> 文字
>foo : () => 文字

var ResultIsNumber15 = ++A.foo();
>ResultIsNumber15 : 数字
>类型别名 :=> 数字
>++A.foo() : 数字
>类型别名 :=> 数字
>A.foo() : 文字
>类型别名 :=> 文字
>A.foo : () => 文字
>A : 类为 A
>foo : () => 文字

var ResultIsNumber16 = ++(STRING + STRING);
>ResultIsNumber16 : 数字
>类型别名 :=> 数字
>++(STRING + STRING) : 数字
>类型别名 :=> 数字
>(STRING + STRING) : 文字
>类型别名 :=> 文字
>STRING + STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字

var ResultIsNumber17 = objA.a++;
>ResultIsNumber17 : 数字
>类型别名 :=> 数字
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字

var ResultIsNumber18 = M.n++;
>ResultIsNumber18 : 数字
>类型别名 :=> 数字
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

var ResultIsNumber19 = STRING1[0]++;
>ResultIsNumber19 : 数字
>类型别名 :=> 数字
>STRING1[0]++ : 数字
>类型别名 :=> 数字
>STRING1[0] : 文字
>类型别名 :=> 文字
>STRING1 : 文字[]
>0 : 0

var ResultIsNumber20 = foo()++;
>ResultIsNumber20 : 数字
>类型别名 :=> 数字
>foo()++ : 数字
>类型别名 :=> 数字
>foo() : 文字
>类型别名 :=> 文字
>foo : () => 文字

var ResultIsNumber21 = A.foo()++;
>ResultIsNumber21 : 数字
>类型别名 :=> 数字
>A.foo()++ : 数字
>类型别名 :=> 数字
>A.foo() : 文字
>类型别名 :=> 文字
>A.foo : () => 文字
>A : 类为 A
>foo : () => 文字

var ResultIsNumber22 = (STRING + STRING)++;
>ResultIsNumber22 : 数字
>类型别名 :=> 数字
>(STRING + STRING)++ : 数字
>类型别名 :=> 数字
>(STRING + STRING) : 文字
>类型别名 :=> 文字
>STRING + STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字

// miss assignment operators
++"";
>++"" : 数字
>类型别名 :=> 数字
>"" : ""

++STRING;
>++STRING : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字

++STRING1;
>++STRING1 : 数字
>类型别名 :=> 数字
>STRING1 : 文字[]

++STRING1[0];
>++STRING1[0] : 数字
>类型别名 :=> 数字
>STRING1[0] : 文字
>类型别名 :=> 文字
>STRING1 : 文字[]
>0 : 0

++foo();
>++foo() : 数字
>类型别名 :=> 数字
>foo() : 文字
>类型别名 :=> 文字
>foo : () => 文字

++objA.a;
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字

++M.n;
>++M.n : 数字
>类型别名 :=> 数字
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

++objA.a, M.n;
>++objA.a, M.n : 文字
>类型别名 :=> 文字
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

""++;
>""++ : 数字
>类型别名 :=> 数字
>"" : ""

STRING++;
>STRING++ : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字

STRING1++;
>STRING1++ : 数字
>类型别名 :=> 数字
>STRING1 : 文字[]

STRING1[0]++;
>STRING1[0]++ : 数字
>类型别名 :=> 数字
>STRING1[0] : 文字
>类型别名 :=> 文字
>STRING1 : 文字[]
>0 : 0

foo()++;
>foo()++ : 数字
>类型别名 :=> 数字
>foo() : 文字
>类型别名 :=> 文字
>foo : () => 文字

objA.a++;
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字

M.n++;
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

objA.a++, M.n++;
>objA.a++, M.n++ : 数字
>类型别名 :=> 数字
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

