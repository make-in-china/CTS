=== tests/cases/conformance/controlFlow/controlFlowIterationErrors.ts ===
let cond: boolean;
>cond : boolean
>类型别名 :=> 真假

function len(s: string) {
>len : (s: string) => number
>s : string
>类型别名 :=> 文字

    return s.length;
>s.length : number
>类型别名 :=> 数字
>s : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
}

function f1() {
>f1 : () => void

    let x: string | number | boolean;
>x : string | number | boolean

    x = "";
>x = "" : ""
>x : string | number | boolean
>"" : ""

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        x = len(x);
>x = len(x) : any
>类型别名 :=> 任意
>x : string | number | boolean
>len(x) : number
>类型别名 :=> 数字
>len : (s: string) => number
>x : string | number

        x;
>x : number
>类型别名 :=> 数字
    }
    x;
>x : string | number
}

function f2() {
>f2 : () => void

    let x: string | number | boolean;
>x : string | number | boolean

    x = "";
>x = "" : ""
>x : string | number | boolean
>"" : ""

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        x;
>x : string | number

        x = len(x);
>x = len(x) : any
>类型别名 :=> 任意
>x : string | number | boolean
>len(x) : number
>类型别名 :=> 数字
>len : (s: string) => number
>x : string | number
    }
    x;
>x : string | number
}

declare function foo(x: string): number;
>foo : { (x: string): number; (x: number): string; }
>x : string
>类型别名 :=> 文字

declare function foo(x: number): string;
>foo : { (x: string): number; (x: number): string; }
>x : number
>类型别名 :=> 数字

function g1() {
>g1 : () => void

    let x: string | number | boolean;
>x : string | number | boolean

    x = "";
>x = "" : ""
>x : string | number | boolean
>"" : ""

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        x = foo(x);
>x = foo(x) : any
>类型别名 :=> 任意
>x : string | number | boolean
>foo(x) : any
>类型别名 :=> 任意
>foo : { (x: string): number; (x: number): string; }
>x : string | number

        x;
>x : string | number | boolean
    }
    x;
>x : string | number
}

function g2() {
>g2 : () => void

    let x: string | number | boolean;
>x : string | number | boolean

    x = "";
>x = "" : ""
>x : string | number | boolean
>"" : ""

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        x;
>x : string | number

        x = foo(x);
>x = foo(x) : any
>类型别名 :=> 任意
>x : string | number | boolean
>foo(x) : any
>类型别名 :=> 任意
>foo : { (x: string): number; (x: number): string; }
>x : string | number
    }
    x;
>x : string | number
}

function asNumber(x: string | number): number {
>asNumber : (x: string | number) => number
>x : string | number

    return +x;
>+x : number
>类型别名 :=> 数字
>x : string | number
}

function h1() {
>h1 : () => void

    let x: string | number | boolean;
>x : string | number | boolean

    x = "0";
>x = "0" : "0"
>x : string | number | boolean
>"0" : "0"

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        x = +x + 1;
>x = +x + 1 : number
>类型别名 :=> 数字
>x : string | number | boolean
>+x + 1 : number
>类型别名 :=> 数字
>+x : number
>类型别名 :=> 数字
>x : string | number
>1 : 1

        x;
>x : number
>类型别名 :=> 数字
    }
}

function h2() {
>h2 : () => void

    let x: string | number | boolean;
>x : string | number | boolean

    x = "0";
>x = "0" : "0"
>x : string | number | boolean
>"0" : "0"

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        x = asNumber(x) + 1;
>x = asNumber(x) + 1 : number
>类型别名 :=> 数字
>x : string | number | boolean
>asNumber(x) + 1 : number
>类型别名 :=> 数字
>asNumber(x) : number
>类型别名 :=> 数字
>asNumber : (x: string | number) => number
>x : string | number
>1 : 1

        x;
>x : number
>类型别名 :=> 数字
    }
}

function h3() {
>h3 : () => void

    let x: string | number | boolean;
>x : string | number | boolean

    x = "0";
>x = "0" : "0"
>x : string | number | boolean
>"0" : "0"

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        let y = asNumber(x);
>y : number
>类型别名 :=> 数字
>asNumber(x) : number
>类型别名 :=> 数字
>asNumber : (x: string | number) => number
>x : string | number

        x = y + 1;
>x = y + 1 : number
>类型别名 :=> 数字
>x : string | number | boolean
>y + 1 : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>1 : 1

        x;
>x : number
>类型别名 :=> 数字
    }
}

function h4() {
>h4 : () => void

    let x: string | number | boolean;
>x : string | number | boolean

    x = "0";
>x = "0" : "0"
>x : string | number | boolean
>"0" : "0"

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        x;
>x : string | number

        let y = asNumber(x);
>y : number
>类型别名 :=> 数字
>asNumber(x) : number
>类型别名 :=> 数字
>asNumber : (x: string | number) => number
>x : string | number

        x = y + 1;
>x = y + 1 : number
>类型别名 :=> 数字
>x : string | number | boolean
>y + 1 : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>1 : 1

        x;
>x : number
>类型别名 :=> 数字
    }
}

