=== tests/cases/conformance/controlFlow/controlFlowIterationErrors.ts ===
let cond: boolean;
>cond : 真假
>类型别名 :=> 真假

function len(s: string) {
>len : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字

    return s.length;
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
}

function f1() {
>f1 : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    x = "";
>x = "" : ""
>x : 文字 | 数字 | 真假
>"" : ""

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = len(x);
>x = len(x) : 任意
>类型别名 :=> 任意
>x : 文字 | 数字 | 真假
>len(x) : 数字
>类型别名 :=> 数字
>len : (s: 文字) => 数字
>x : 文字 | 数字

        x;
>x : 数字
>类型别名 :=> 数字
    }
    x;
>x : 文字 | 数字
}

function f2() {
>f2 : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    x = "";
>x = "" : ""
>x : 文字 | 数字 | 真假
>"" : ""

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        x;
>x : 文字 | 数字

        x = len(x);
>x = len(x) : 任意
>类型别名 :=> 任意
>x : 文字 | 数字 | 真假
>len(x) : 数字
>类型别名 :=> 数字
>len : (s: 文字) => 数字
>x : 文字 | 数字
    }
    x;
>x : 文字 | 数字
}

declare function foo(x: string): number;
>foo : { (x: 文字): 数字; (x: 数字): 文字; }
>x : 文字
>类型别名 :=> 文字

declare function foo(x: number): string;
>foo : { (x: 文字): 数字; (x: 数字): 文字; }
>x : 数字
>类型别名 :=> 数字

function g1() {
>g1 : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    x = "";
>x = "" : ""
>x : 文字 | 数字 | 真假
>"" : ""

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = foo(x);
>x = foo(x) : 任意
>类型别名 :=> 任意
>x : 文字 | 数字 | 真假
>foo(x) : 任意
>类型别名 :=> 任意
>foo : { (x: 文字): 数字; (x: 数字): 文字; }
>x : 文字 | 数字

        x;
>x : 文字 | 数字 | 真假
    }
    x;
>x : 文字 | 数字
}

function g2() {
>g2 : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    x = "";
>x = "" : ""
>x : 文字 | 数字 | 真假
>"" : ""

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        x;
>x : 文字 | 数字

        x = foo(x);
>x = foo(x) : 任意
>类型别名 :=> 任意
>x : 文字 | 数字 | 真假
>foo(x) : 任意
>类型别名 :=> 任意
>foo : { (x: 文字): 数字; (x: 数字): 文字; }
>x : 文字 | 数字
    }
    x;
>x : 文字 | 数字
}

function asNumber(x: string | number): number {
>asNumber : (x: 文字 | 数字) => 数字
>x : 文字 | 数字

    return +x;
>+x : 数字
>类型别名 :=> 数字
>x : 文字 | 数字
}

function h1() {
>h1 : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    x = "0";
>x = "0" : "0"
>x : 文字 | 数字 | 真假
>"0" : "0"

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = +x + 1;
>x = +x + 1 : 数字
>类型别名 :=> 数字
>x : 文字 | 数字 | 真假
>+x + 1 : 数字
>类型别名 :=> 数字
>+x : 数字
>类型别名 :=> 数字
>x : 文字 | 数字
>1 : 1

        x;
>x : 数字
>类型别名 :=> 数字
    }
}

function h2() {
>h2 : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    x = "0";
>x = "0" : "0"
>x : 文字 | 数字 | 真假
>"0" : "0"

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = asNumber(x) + 1;
>x = asNumber(x) + 1 : 数字
>类型别名 :=> 数字
>x : 文字 | 数字 | 真假
>asNumber(x) + 1 : 数字
>类型别名 :=> 数字
>asNumber(x) : 数字
>类型别名 :=> 数字
>asNumber : (x: 文字 | 数字) => 数字
>x : 文字 | 数字
>1 : 1

        x;
>x : 数字
>类型别名 :=> 数字
    }
}

function h3() {
>h3 : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    x = "0";
>x = "0" : "0"
>x : 文字 | 数字 | 真假
>"0" : "0"

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        let y = asNumber(x);
>y : 数字
>类型别名 :=> 数字
>asNumber(x) : 数字
>类型别名 :=> 数字
>asNumber : (x: 文字 | 数字) => 数字
>x : 文字 | 数字

        x = y + 1;
>x = y + 1 : 数字
>类型别名 :=> 数字
>x : 文字 | 数字 | 真假
>y + 1 : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

        x;
>x : 数字
>类型别名 :=> 数字
    }
}

function h4() {
>h4 : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    x = "0";
>x = "0" : "0"
>x : 文字 | 数字 | 真假
>"0" : "0"

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        x;
>x : 文字 | 数字

        let y = asNumber(x);
>y : 数字
>类型别名 :=> 数字
>asNumber(x) : 数字
>类型别名 :=> 数字
>asNumber : (x: 文字 | 数字) => 数字
>x : 文字 | 数字

        x = y + 1;
>x = y + 1 : 数字
>类型别名 :=> 数字
>x : 文字 | 数字 | 真假
>y + 1 : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

        x;
>x : 数字
>类型别名 :=> 数字
    }
}

