=== tests/cases/conformance/types/rest/objectRestParameter.ts ===
function cloneAgain({ a, ...clone }: { a: number, b: string }): void {
>cloneAgain : ({ a, ...clone }: { a: 数字; b: 文字; }) => 无值
>a : 数字
>类型别名 :=> 数字
>clone : { b: 文字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
}

declare function suddenly(f: (a: { x: { z, ka }, y: string }) => void);
>suddenly : (f: (a: { x: { z: 任意; ka: 任意; }; y: 文字; }) => 无值) => 任意
>f : (a: { x: { z: 任意; ka: 任意; }; y: 文字; }) => 无值
>a : { x: { z: 任意; ka: 任意; }; y: 文字; }
>x : { z: 任意; ka: 任意; }
>z : 任意
>类型别名 :=> 任意
>ka : 任意
>类型别名 :=> 任意
>y : 文字
>类型别名 :=> 文字

suddenly(({ x: a, ...rest }) => rest.y);
>suddenly(({ x: a, ...rest }) => rest.y) : 任意
>类型别名 :=> 任意
>suddenly : (f: (a: { x: { z: 任意; ka: 任意; }; y: 文字; }) => 无值) => 任意
>({ x: a, ...rest }) => rest.y : ({ x: a, ...rest }: { x: { z: 任意; ka: 任意; }; y: 文字; }) => 文字
>x : 任意
>类型别名 :=> 任意
>a : { z: 任意; ka: 任意; }
>rest : { y: 文字; }
>rest.y : 文字
>类型别名 :=> 文字
>rest : { y: 文字; }
>y : 文字
>类型别名 :=> 文字

suddenly(({ x: { z = 12, ...nested }, ...rest } = { x: { z: 1, ka: 1 }, y: 'noo' }) => rest.y + nested.ka);
>suddenly(({ x: { z = 12, ...nested }, ...rest } = { x: { z: 1, ka: 1 }, y: 'noo' }) => rest.y + nested.ka) : 任意
>类型别名 :=> 任意
>suddenly : (f: (a: { x: { z: 任意; ka: 任意; }; y: 文字; }) => 无值) => 任意
>({ x: { z = 12, ...nested }, ...rest } = { x: { z: 1, ka: 1 }, y: 'noo' }) => rest.y + nested.ka : ({ x: { z, ...nested }, ...rest }?: { x: { z: 任意; ka: 任意; }; y: 文字; }) => 文字
>x : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>12 : 12
>nested : { ka: 任意; }
>rest : { y: 文字; }
>{ x: { z: 1, ka: 1 }, y: 'noo' } : { x: { z: 数字; ka: 数字; }; y: 文字; }
>x : { z: 数字; ka: 数字; }
>{ z: 1, ka: 1 } : { z: 数字; ka: 数字; }
>z : 数字
>类型别名 :=> 数字
>1 : 1
>ka : 数字
>类型别名 :=> 数字
>1 : 1
>y : 文字
>类型别名 :=> 文字
>'noo' : "noo"
>rest.y + nested.ka : 文字
>类型别名 :=> 文字
>rest.y : 文字
>类型别名 :=> 文字
>rest : { y: 文字; }
>y : 文字
>类型别名 :=> 文字
>nested.ka : 任意
>类型别名 :=> 任意
>nested : { ka: 任意; }
>ka : 任意
>类型别名 :=> 任意

class C {
>C : C

    m({ a, ...clone }: { a: number, b: string}): void {
>m : ({ a, ...clone }: { a: 数字; b: 文字; }) => 无值
>a : 数字
>类型别名 :=> 数字
>clone : { b: 文字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

        // actually, never mind, don't clone
    }
    set p({ a, ...clone }: { a: number, b: string}) {
>p : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>clone : { b: 文字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

        // actually, never mind, don't clone
    }
}
function foobar({ bar={}, ...opts }: any = {}) {
>foobar : ({ bar, ...opts }?: 任意) => 无值
>bar : 任意
>类型别名 :=> 任意
>{} : {}
>opts : 任意
>类型别名 :=> 任意
>{} : {}
}
foobar();
>foobar() : 无值
>类型别名 :=> 无值
>foobar : ({ bar, ...opts }?: 任意) => 无值

foobar({ baz: 'hello' });
>foobar({ baz: 'hello' }) : 无值
>类型别名 :=> 无值
>foobar : ({ bar, ...opts }?: 任意) => 无值
>{ baz: 'hello' } : { baz: 文字; }
>baz : 文字
>类型别名 :=> 文字
>'hello' : "hello"

foobar({ bar: { greeting: 'hello' } });
>foobar({ bar: { greeting: 'hello' } }) : 无值
>类型别名 :=> 无值
>foobar : ({ bar, ...opts }?: 任意) => 无值
>{ bar: { greeting: 'hello' } } : { bar: { greeting: 文字; }; }
>bar : { greeting: 文字; }
>{ greeting: 'hello' } : { greeting: 文字; }
>greeting : 文字
>类型别名 :=> 文字
>'hello' : "hello"

