=== tests/cases/compiler/downlevelLetConst16.ts ===
'use strict'
>'use strict' : "use strict"

declare function use(a: any);
>use : (a: any) => any
>a : any
>类型别名 :=> 任意

var x = 10;
>x : number
>类型别名 :=> 数字
>10 : 10

var y;
>y : any
>类型别名 :=> 任意

var z;
>z : any
>类型别名 :=> 任意

use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字

use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : any
>类型别名 :=> 任意

use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : any
>类型别名 :=> 任意

function foo1() {
>foo1 : () => void

    let x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字

    let [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

    use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

    let {a: z} = {a: 1};
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{a: 1} : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

    use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字
}

function foo2() {
>foo2 : () => void
    {
        let x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字

        let [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

        use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

        let {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

        use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

class A {
>A : A

    m1() {
>m1 : () => void

        let x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字

        let [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

        use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

        let {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

        use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字
    }
    m2() {
>m2 : () => void
        {
            let x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

            use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字

            let [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

            use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

            let {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

            use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字
        }
        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
    }

}

class B {
>B : B

    m1() {
>m1 : () => void

        const x = 1;
>x : 1
>1 : 1

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : 1

        const [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

        use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

        const {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

        use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字

    }
    m2() {
>m2 : () => void
        {
            const x = 1;
>x : 1
>1 : 1

            use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : 1

            const [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

            use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

            const {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

            use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字

        }
        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
    }
}

function bar1() {
>bar1 : () => void

    const x = 1;
>x : 1
>1 : 1

    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : 1

    const [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

    use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

    const {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

    use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字
}

function bar2() {
>bar2 : () => void
    {
        const x = 1;
>x : 1
>1 : 1

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : 1

        const [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

        use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

        const {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

        use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字

    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

module M1 {
>M1 : typeof M1

    let x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字

    let [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

    use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

    let {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

    use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字
}

module M2 {
>M2 : typeof M2
    {
        let x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字

        let [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

        use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

        let {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

        use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

module M3 {
>M3 : typeof M3

    const x = 1;
>x : 1
>1 : 1

    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : 1

    const [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

    use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

    const {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

    use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字

}

module M4 {
>M4 : typeof M4
    {
        const x = 1;
>x : 1
>1 : 1

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : 1

        const [y] = [1];
>y : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

        use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : number
>类型别名 :=> 数字

        const {a: z} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

        use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字

    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字

    use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : any
>类型别名 :=> 任意

    use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : any
>类型别名 :=> 任意
}

function foo3() {
>foo3 : () => void

    for (let x; ;) {
>x : any
>类型别名 :=> 任意

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : any
>类型别名 :=> 任意
    }
    for (let [y] = []; ;) {
>y : any
>类型别名 :=> 任意
>[] : [any]

        use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : any
>类型别名 :=> 任意
    }
    for (let {a: z} = {a: 1}; ;) {
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{a: 1} : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

        use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

function foo4() {
>foo4 : () => void

    for (const x = 1; ;) {
>x : 1
>1 : 1

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : 1
    }
    for (const [y] = []; ;) {
>y : any
>类型别名 :=> 任意
>[] : [any]

        use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : any
>类型别名 :=> 任意
    }
    for (const {a: z} = { a: 1 }; ;) {
>a : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

        use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : number
>类型别名 :=> 数字
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

function foo5() {
>foo5 : () => void

    for (let x in []) {
>x : string
>类型别名 :=> 文字
>[] : undefined[]

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : string
>类型别名 :=> 文字
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

function foo6() {
>foo6 : () => void

    for (const x in []) {
>x : string
>类型别名 :=> 文字
>[] : undefined[]

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : string
>类型别名 :=> 文字
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

function foo7() {
>foo7 : () => void

    for (let x of []) {
>x : any
>类型别名 :=> 任意
>[] : undefined[]

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : any
>类型别名 :=> 任意
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

function foo8() {
>foo8 : () => void

    for (let [x] of []) {
>x : any
>类型别名 :=> 任意
>[] : undefined[]

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : any
>类型别名 :=> 任意
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

function foo9() {
>foo9 : () => void

    for (let {a: x} of []) {
>a : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>[] : undefined[]

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : any
>类型别名 :=> 任意
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

function foo10() {
>foo10 : () => void

    for (const x of []) {
>x : any
>类型别名 :=> 任意
>[] : undefined[]

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : any
>类型别名 :=> 任意
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

function foo11() {
>foo11 : () => void

    for (const [x] of []) {
>x : any
>类型别名 :=> 任意
>[] : undefined[]

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : any
>类型别名 :=> 任意
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}

function foo12() {
>foo12 : () => void

    for (const {a: x} of []) {
>a : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>[] : undefined[]

        use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : any
>类型别名 :=> 任意
    }
    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字
}
