=== tests/cases/compiler/assignmentNestedInLiterals.ts ===
var target, x, y;
>target : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

target = [x = 1, y = x];
>target = [x = 1, y = x] : 数字[]
>target : 任意
>类型别名 :=> 任意
>[x = 1, y = x] : 数字[]
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
>y = x : 数字
>类型别名 :=> 数字
>y : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字

var aegis, a, b;
>aegis : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

aegis = { x: a = 1, y: b = a };
>aegis = { x: a = 1, y: b = a } : { x: 数字; y: 数字; }
>aegis : 任意
>类型别名 :=> 任意
>{ x: a = 1, y: b = a } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>a = 1 : 1
>a : 任意
>类型别名 :=> 任意
>1 : 1
>y : 数字
>类型别名 :=> 数字
>b = a : 数字
>类型别名 :=> 数字
>b : 任意
>类型别名 :=> 任意
>a : 数字
>类型别名 :=> 数字

var kowloona, c, d;
>kowloona : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意

for (kowloona of [c = 1, d = c]) {
>kowloona : 任意
>类型别名 :=> 任意
>[c = 1, d = c] : 数字[]
>c = 1 : 1
>c : 任意
>类型别名 :=> 任意
>1 : 1
>d = c : 数字
>类型别名 :=> 数字
>d : 任意
>类型别名 :=> 任意
>c : 数字
>类型别名 :=> 数字
}

