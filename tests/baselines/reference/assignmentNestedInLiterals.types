=== tests/cases/compiler/assignmentNestedInLiterals.ts ===
var target, x, y;
>target : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

target = [x = 1, y = x];
>target = [x = 1, y = x] : number[]
>target : any
>类型别名 :=> 任意
>[x = 1, y = x] : number[]
>x = 1 : 1
>x : any
>类型别名 :=> 任意
>1 : 1
>y = x : number
>类型别名 :=> 数字
>y : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字

var aegis, a, b;
>aegis : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

aegis = { x: a = 1, y: b = a };
>aegis = { x: a = 1, y: b = a } : { x: number; y: number; }
>aegis : any
>类型别名 :=> 任意
>{ x: a = 1, y: b = a } : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>a = 1 : 1
>a : any
>类型别名 :=> 任意
>1 : 1
>y : number
>类型别名 :=> 数字
>b = a : number
>类型别名 :=> 数字
>b : any
>类型别名 :=> 任意
>a : number
>类型别名 :=> 数字

var kowloona, c, d;
>kowloona : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>d : any
>类型别名 :=> 任意

for (kowloona of [c = 1, d = c]) {
>kowloona : any
>类型别名 :=> 任意
>[c = 1, d = c] : number[]
>c = 1 : 1
>c : any
>类型别名 :=> 任意
>1 : 1
>d = c : number
>类型别名 :=> 数字
>d : any
>类型别名 :=> 任意
>c : number
>类型别名 :=> 数字
}

