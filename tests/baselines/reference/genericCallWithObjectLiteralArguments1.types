=== tests/cases/compiler/genericCallWithObjectLiteralArguments1.ts ===
function foo<T>(n: { x: T; y: T }, m: T) { return m; }
>foo : <T>(n: { x: T; y: T; }, m: T) => T
>T : T
>n : { x: T; y: T; }
>x : T
>T : T
>y : T
>T : T
>m : T
>T : T
>m : T

// these are all errors
var x = foo({ x: 3, y: "" }, 4);
>x : 任意
>类型别名 :=> 任意
>foo({ x: 3, y: "" }, 4) : 任意
>类型别名 :=> 任意
>foo : <T>(n: { x: T; y: T; }, m: T) => T
>{ x: 3, y: "" } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>3 : 3
>y : 文字
>类型别名 :=> 文字
>"" : ""
>4 : 4

var x2 = foo<number>({ x: 3, y: "" }, 4); 
>x2 : 任意
>类型别名 :=> 任意
>foo<number>({ x: 3, y: "" }, 4) : 任意
>类型别名 :=> 任意
>foo : <T>(n: { x: T; y: T; }, m: T) => T
>{ x: 3, y: "" } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>3 : 3
>y : 文字
>类型别名 :=> 文字
>"" : ""
>4 : 4

var x3 = foo<string>({ x: 3, y: "" }, 4); 
>x3 : 任意
>类型别名 :=> 任意
>foo<string>({ x: 3, y: "" }, 4) : 任意
>类型别名 :=> 任意
>foo : <T>(n: { x: T; y: T; }, m: T) => T
>{ x: 3, y: "" } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>3 : 3
>y : 文字
>类型别名 :=> 文字
>"" : ""
>4 : 4

var x4 = foo<number>({ x: "", y: 4 }, "");
>x4 : 任意
>类型别名 :=> 任意
>foo<number>({ x: "", y: 4 }, "") : 任意
>类型别名 :=> 任意
>foo : <T>(n: { x: T; y: T; }, m: T) => T
>{ x: "", y: 4 } : { x: 文字; y: 数字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : 数字
>类型别名 :=> 数字
>4 : 4
>"" : ""

var x5 = foo<string>({ x: "", y: 4 }, "");
>x5 : 任意
>类型别名 :=> 任意
>foo<string>({ x: "", y: 4 }, "") : 任意
>类型别名 :=> 任意
>foo : <T>(n: { x: T; y: T; }, m: T) => T
>{ x: "", y: 4 } : { x: 文字; y: 数字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : 数字
>类型别名 :=> 数字
>4 : 4
>"" : ""

