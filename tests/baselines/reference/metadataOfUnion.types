=== tests/cases/compiler/metadataOfUnion.ts ===
function PropDeco(target: Object, propKey: string | symbol) { }
>PropDeco : (target: Object, propKey: string | symbol) => void
>target : Object
>Object : Object
>propKey : string | symbol

class A {
>A : A
}

class B {
>B : B

    @PropDeco
>PropDeco : (target: Object, propKey: string | symbol) => void

    x: "foo" | A;
>x : A | "foo"
>A : A

    @PropDeco
>PropDeco : (target: Object, propKey: string | symbol) => void

    y: true | boolean;
>y : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

    @PropDeco
>PropDeco : (target: Object, propKey: string | symbol) => void

    z: "foo" | boolean;
>z : boolean | "foo"
}

enum E {
>E : E

    A,
>A : E.A

    B,
>B : E.B

    C,
>C : E.C

    D
>D : E.D
}

class D {
>D : D

    @PropDeco
>PropDeco : (target: Object, propKey: string | symbol) => void

    a: E.A;
>a : E.A
>E : any
>类型别名 :=> 任意
>A : E.A

    @PropDeco
>PropDeco : (target: Object, propKey: string | symbol) => void

    b: E.B | E.C;
>b : E.B | E.C
>E : any
>类型别名 :=> 任意
>B : E.B
>E : any
>类型别名 :=> 任意
>C : E.C

    @PropDeco
>PropDeco : (target: Object, propKey: string | symbol) => void

    c: E;
>c : E
>E : E

    @PropDeco
>PropDeco : (target: Object, propKey: string | symbol) => void

    d: E | number;
>d : number
>类型别名 :=> 数字
>E : E
}
