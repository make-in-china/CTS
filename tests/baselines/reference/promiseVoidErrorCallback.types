=== tests/cases/compiler/promiseVoidErrorCallback.ts ===
interface T1 {
>T1 : T1

    __t1: string;
>__t1 : 文字
>类型别名 :=> 文字
}

interface T2 {
>T2 : T2

    __t2: string;
>__t2 : 文字
>类型别名 :=> 文字
}

interface T3 {
>T3 : T3

    __t3: string;
>__t3 : 文字
>类型别名 :=> 文字
}

function f1(): Promise<T1> {
>f1 : () => Promise<T1>
>Promise : Promise<T>
>T1 : T1

    return Promise.resolve({ __t1: "foo_t1" });
>Promise.resolve({ __t1: "foo_t1" }) : Promise<{ __t1: 文字; }>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>{ __t1: "foo_t1" } : { __t1: 文字; }
>__t1 : 文字
>类型别名 :=> 文字
>"foo_t1" : "foo_t1"
}

function f2(x: T1): T2 {
>f2 : (x: T1) => T2
>x : T1
>T1 : T1
>T2 : T2

    return { __t2: x.__t1 + ":foo_21" };
>{ __t2: x.__t1 + ":foo_21" } : { __t2: 文字; }
>__t2 : 文字
>类型别名 :=> 文字
>x.__t1 + ":foo_21" : 文字
>类型别名 :=> 文字
>x.__t1 : 文字
>类型别名 :=> 文字
>x : T1
>__t1 : 文字
>类型别名 :=> 文字
>":foo_21" : ":foo_21"
}

var x3 = f1()
>x3 : Promise<{ __t3: 文字; }>
>f1()    .then(f2, (e: Error) => {    throw e;})    .then((x: T2) => {    return { __t3: x.__t2 + "bar" };}) : Promise<{ __t3: 文字; }>
>f1()    .then(f2, (e: Error) => {    throw e;})    .then : <TResult1 = T2, TResult2 = 不及>(onfulfilled?: (value: T2) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>f1()    .then(f2, (e: Error) => {    throw e;}) : Promise<T2>
>f1()    .then : <TResult1 = T1, TResult2 = 不及>(onfulfilled?: (value: T1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>f1() : Promise<T1>
>f1 : () => Promise<T1>

    .then(f2, (e: Error) => {
>then : <TResult1 = T1, TResult2 = 不及>(onfulfilled?: (value: T1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>f2 : (x: T1) => T2
>(e: Error) => {    throw e;} : (e: Error) => 不及
>e : Error
>Error : Error

    throw e;
>e : Error

})
    .then((x: T2) => {
>then : <TResult1 = T2, TResult2 = 不及>(onfulfilled?: (value: T2) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>(x: T2) => {    return { __t3: x.__t2 + "bar" };} : (x: T2) => { __t3: 文字; }
>x : T2
>T2 : T2

    return { __t3: x.__t2 + "bar" };
>{ __t3: x.__t2 + "bar" } : { __t3: 文字; }
>__t3 : 文字
>类型别名 :=> 文字
>x.__t2 + "bar" : 文字
>类型别名 :=> 文字
>x.__t2 : 文字
>类型别名 :=> 文字
>x : T2
>__t2 : 文字
>类型别名 :=> 文字
>"bar" : "bar"

});
