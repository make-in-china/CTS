=== tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassConstructorWithoutSuperCall.ts ===
// derived class constructors must contain a super call

class Base {
>Base : Base

    x: string;
>x : 文字
>类型别名 :=> 文字
}

class Derived extends Base {
>Derived : Derived
>Base : Base

    constructor() { // error
    }
}

class Base2<T> {
>Base2 : Base2<T>
>T : T

    x: T;
>x : T
>T : T
}

class Derived2<T> extends Base2<T> {
>Derived2 : Derived2<T>
>T : T
>Base2 : Base2<T>
>T : T

    constructor() { // error for no super call (nested scopes don't count)
        var r2 = () => super(); // error for misplaced super call (nested function)
>r2 : () => 无值
>() => super() : () => 无值
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }
}

class Derived3<T> extends Base2<T> {
>Derived3 : Derived3<T>
>T : T
>Base2 : Base2<T>
>T : T

    constructor() { // error
        var r = function () { super() } // error
>r : () => 无值
>function () { super() } : () => 无值
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }
}

class Derived4<T> extends Base2<T> {
>Derived4 : Derived4<T>
>T : T
>Base2 : Base2<T>
>T : T

    constructor() {
        var r = super(); // ok
>r : 无值
>类型别名 :=> 无值
>super() : 无值
>类型别名 :=> 无值
>super : 类为 Base2
    }
}
