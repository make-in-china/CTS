=== tests/cases/compiler/taggedTemplatesInDifferentScopes.ts ===
export function tag(parts: TemplateStringsArray, ...values: any[]) {
>tag : (parts: TemplateStringsArray, ...values: any[]) => string
>parts : TemplateStringsArray
>TemplateStringsArray : TemplateStringsArray
>values : any[]

    return parts[0];
>parts[0] : string
>类型别名 :=> 文字
>parts : TemplateStringsArray
>0 : 0
}
function foo() {
>foo : () => void

    tag `foo`;
>tag `foo` : string
>类型别名 :=> 文字
>tag : (parts: TemplateStringsArray, ...values: any[]) => string
>`foo` : "foo"

    tag `foo2`;
>tag `foo2` : string
>类型别名 :=> 文字
>tag : (parts: TemplateStringsArray, ...values: any[]) => string
>`foo2` : "foo2"
}

function bar() {
>bar : () => void

    tag `bar`;
>tag `bar` : string
>类型别名 :=> 文字
>tag : (parts: TemplateStringsArray, ...values: any[]) => string
>`bar` : "bar"

    tag `bar2`;
>tag `bar2` : string
>类型别名 :=> 文字
>tag : (parts: TemplateStringsArray, ...values: any[]) => string
>`bar2` : "bar2"
}

foo();
>foo() : void
>类型别名 :=> 无值
>foo : () => void

bar();
>bar() : void
>类型别名 :=> 无值
>bar : () => void

