=== tests/cases/compiler/aux.ts ===
export class SomeClass {
>SomeClass : SomeClass

    field: string;
>field : 文字
>类型别名 :=> 文字
}

=== tests/cases/compiler/aux1.ts ===
export class SomeClass1 {
>SomeClass1 : SomeClass1

    field: string;
>field : 文字
>类型别名 :=> 文字
}

=== tests/cases/compiler/aux2.ts ===
export class SomeClass2 {
>SomeClass2 : SomeClass2

    field: string;
>field : 文字
>类型别名 :=> 文字
}
=== tests/cases/compiler/main.ts ===
import { SomeClass } from './aux';
>SomeClass : 类为 SomeClass

import { SomeClass1 } from './aux1';
>SomeClass1 : 类为 SomeClass1

function annotation(): ClassDecorator {
>annotation : () => ClassDecorator
>ClassDecorator : ClassDecorator

    return (target: any): void => { };
>(target: any): void => { } : (target: 任意) => 无值
>target : 任意
>类型别名 :=> 任意
}

function annotation1(): MethodDecorator {
>annotation1 : () => MethodDecorator
>MethodDecorator : MethodDecorator

    return (target: any): void => { };
>(target: any): void => { } : (target: 任意) => 无值
>target : 任意
>类型别名 :=> 任意
}

@annotation()
>annotation() : ClassDecorator
>annotation : () => ClassDecorator

export class ClassA {
>ClassA : ClassA

    array: SomeClass[];
>array : SomeClass[]
>SomeClass : SomeClass

    constructor(...init: SomeClass[]) {
>init : SomeClass[]
>SomeClass : SomeClass

        this.array = init;
>this.array = init : SomeClass[]
>this.array : SomeClass[]
>this : 本体
>array : SomeClass[]
>init : SomeClass[]
    }

    @annotation1()
>annotation1() : MethodDecorator
>annotation1 : () => MethodDecorator

    foo(... args: SomeClass1[]) {
>foo : (...args: SomeClass1[]) => 无值
>args : SomeClass1[]
>SomeClass1 : SomeClass1
    }
}
