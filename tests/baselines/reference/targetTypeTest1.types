=== tests/cases/compiler/targetTypeTest1.ts ===
declare class Point
>Point : Point
{
      constructor(x: number, y: number);
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

      public x: number;
>x : number
>类型别名 :=> 数字

      public y: number;
>y : number
>类型别名 :=> 数字

      public add(dx: number, dy: number): Point;
>add : (dx: number, dy: number) => Point
>dx : number
>类型别名 :=> 数字
>dy : number
>类型别名 :=> 数字
>Point : Point

      static origin: Point;
>origin : Point
>Point : Point

}

// Type provided by extern declaration
// Because Point is a constructor function, this is inferred
// to be Point and return type is inferred to be void
function Point(x, y) {
>Point : (x: any, y: any) => void
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    this.x = x;
>this.x = x : any
>类型别名 :=> 任意
>this.x : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

    this.y = y;
>this.y = y : any
>类型别名 :=> 任意
>this.y : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
}

declare function EF1(a:number, b:number):number;
>EF1 : (a: number, b: number) => number
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字

function EF1(a,b) { return a+b; }
>EF1 : (a: number, b: number) => number
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>a+b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

var x = EF1(1,2);
>x : number
>类型别名 :=> 数字
>EF1(1,2) : number
>类型别名 :=> 数字
>EF1 : (a: number, b: number) => number
>1 : 1
>2 : 2

// Point.origin declared as type Point
Point.origin = new Point(0, 0);
>Point.origin = new Point(0, 0) : Point
>Point.origin : Point
>Point : typeof Point
>origin : Point
>new Point(0, 0) : Point
>Point : typeof Point
>0 : 0
>0 : 0

// Point.prototype declared as type Point
// this inferred as Point because of obj.prop assignment
// dx, dy, and return type inferred using target typing
Point.prototype.add = function(dx, dy) {
>Point.prototype.add = function(dx, dy) {    return new Point(this.x + dx, this.y + dy);} : (dx: number, dy: number) => Point
>Point.prototype.add : (dx: number, dy: number) => Point
>Point.prototype : Point
>Point : typeof Point
>prototype : Point
>add : (dx: number, dy: number) => Point
>function(dx, dy) {    return new Point(this.x + dx, this.y + dy);} : (dx: number, dy: number) => Point
>dx : number
>类型别名 :=> 数字
>dy : number
>类型别名 :=> 数字

    return new Point(this.x + dx, this.y + dy);
>new Point(this.x + dx, this.y + dy) : Point
>Point : typeof Point
>this.x + dx : any
>类型别名 :=> 任意
>this.x : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>dx : number
>类型别名 :=> 数字
>this.y + dy : any
>类型别名 :=> 任意
>this.y : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>dy : number
>类型别名 :=> 数字

};

var f : number = 5;
>f : number
>类型别名 :=> 数字
>5 : 5

// Object literal type inferred using target typing
// this in function add inferred to be type of object literal (i.e. Point)
// dx, dy, and return type of add inferred using target typing
Point.prototype = {
>Point.prototype = {    x: 0,    y: 0,    add: function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    }} : { x: number; y: number; add: (dx: number, dy: number) => Point; }
>Point.prototype : Point
>Point : typeof Point
>prototype : Point
>{    x: 0,    y: 0,    add: function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    }} : { x: number; y: number; add: (dx: number, dy: number) => Point; }

    x: 0,
>x : number
>类型别名 :=> 数字
>0 : 0

    y: 0,
>y : number
>类型别名 :=> 数字
>0 : 0

    add: function(dx, dy) {
>add : (dx: number, dy: number) => Point
>function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    } : (dx: number, dy: number) => Point
>dx : number
>类型别名 :=> 数字
>dy : number
>类型别名 :=> 数字

        return new Point(this.x + dx, this.y + dy);
>new Point(this.x + dx, this.y + dy) : Point
>Point : typeof Point
>this.x + dx : any
>类型别名 :=> 任意
>this.x : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>dx : number
>类型别名 :=> 数字
>this.y + dy : any
>类型别名 :=> 任意
>this.y : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>dy : number
>类型别名 :=> 数字
    }
};

declare var z;
>z : any
>类型别名 :=> 任意

z = function(a: number) {
>z = function(a: number) {    a} : (a: number) => void
>z : any
>类型别名 :=> 任意
>function(a: number) {    a} : (a: number) => void
>a : number
>类型别名 :=> 数字

    a
>a : number
>类型别名 :=> 数字
}

declare class C {
>C : C

    constructor(a:number, b:number);
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字

	public a : number;
>a : number
>类型别名 :=> 数字

	public b: number;    
>b : number
>类型别名 :=> 数字

	C1M1(c:number,d:number):number;
>C1M1 : (c: number, d: number) => number
>c : number
>类型别名 :=> 数字
>d : number
>类型别名 :=> 数字
} 

function C(a,b) {
>C : (a: any, b: any) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

	this.a=a;
>this.a=a : any
>类型别名 :=> 任意
>this.a : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

	this.b=b;
>this.b=b : any
>类型别名 :=> 任意
>this.b : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
}

C.prototype = 
>C.prototype = 	{	a:0,		b:0, 		C1M1: function(c,d) {     				return (this.a + c) + (this.b + d);			}	} : { a: number; b: number; C1M1: (c: number, d: number) => any; }
>C.prototype : C
>C : typeof C
>prototype : C

	{	a:0,
>{	a:0,		b:0, 		C1M1: function(c,d) {     				return (this.a + c) + (this.b + d);			}	} : { a: number; b: number; C1M1: (c: number, d: number) => any; }
>a : number
>类型别名 :=> 数字
>0 : 0

		b:0, 
>b : number
>类型别名 :=> 数字
>0 : 0

		C1M1: function(c,d) {     
>C1M1 : (c: number, d: number) => any
>function(c,d) {     				return (this.a + c) + (this.b + d);			} : (c: number, d: number) => any
>c : number
>类型别名 :=> 数字
>d : number
>类型别名 :=> 数字

				return (this.a + c) + (this.b + d);
>(this.a + c) + (this.b + d) : any
>类型别名 :=> 任意
>(this.a + c) : any
>类型别名 :=> 任意
>this.a + c : any
>类型别名 :=> 任意
>this.a : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>c : number
>类型别名 :=> 数字
>(this.b + d) : any
>类型别名 :=> 任意
>this.b + d : any
>类型别名 :=> 任意
>this.b : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>d : number
>类型别名 :=> 数字
			}
	};

