=== /a/node_modules/@types/testCh/index.d.cts ===
//@@{ 测试:foo, 属性1:bar, 属性2:baz, 合成属性:nested, 甲:a, 乙:b }
导出 类型 测试 = {
>测试 : Symbol(测试, Decl(index.d.cts, 0, 0))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo

  属性1: 数字 | 空值;
>属性1 : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

  属性2: 文字;
>属性2 : Symbol(属性2, Decl(index.d.cts, 2, 15))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz

  合成属性: {
>合成属性 : Symbol(合成属性, Decl(index.d.cts, 3, 10))
>节点别名 : #合成属性 => nested
>符号别名 : #合成属性 => nested

    甲: 数字;
>甲 : Symbol(甲, Decl(index.d.cts, 4, 9))
>节点别名 : #甲 => a
>符号别名 : #甲 => a

    乙: 文字 | 空值;
>乙 : Symbol(乙, Decl(index.d.cts, 5, 10))
>节点别名 : #乙 => b
>符号别名 : #乙 => b
  }
}

//@@{ 元素1:elem1, 元素2:elem2 }
导出 类型 属性1 = {
>属性1 : Symbol(属性1, Decl(index.d.cts, 8, 1))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

  元素1: 数字 | 空值;
>元素1 : Symbol(元素1, Decl(index.d.cts, 11, 13))
>节点别名 : #元素1 => elem1
>符号别名 : #元素1 => elem1

  元素2: 测试 | 空值;
>元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>节点别名 : #元素2 => elem2
>符号别名 : #元素2 => elem2
>测试 : Symbol(测试, Decl(index.d.cts, 0, 0))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo
}

=== /a/测试_2_ch.cts ===
导入 { 测试, 属性1 } 来自 "testCh"
>测试 : Symbol(测试, Decl(测试_2_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo
>属性1 : Symbol(属性1, Decl(测试_2_ch.cts, 0, 8))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

常量 aFoo: 测试 = { bar: 3, 属性2: "b", 合成属性: { 甲: 1, 乙: "y" } };
>aFoo : Symbol(aFoo, Decl(测试_2_ch.cts, 2, 2))
>测试 : Symbol(测试, Decl(测试_2_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo
>bar : Symbol(bar, Decl(测试_2_ch.cts, 2, 15))
>节点别名 : #bar => 属性1
>符号别名 : #bar => 属性1
>属性2 : Symbol(属性2, Decl(测试_2_ch.cts, 2, 23))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz
>合成属性 : Symbol(合成属性, Decl(测试_2_ch.cts, 2, 33))
>节点别名 : #合成属性 => nested
>符号别名 : #合成属性 => nested
>甲 : Symbol(甲, Decl(测试_2_ch.cts, 2, 41))
>节点别名 : #甲 => a
>符号别名 : #甲 => a
>乙 : Symbol(乙, Decl(测试_2_ch.cts, 2, 47))
>节点别名 : #乙 => b
>符号别名 : #乙 => b

如果 (aFoo.bar && aFoo.合成属性.乙) {
>aFoo.bar : Symbol(属性1, Decl(index.d.cts, 1, 12))
>符号别名 : #属性1 => bar
>aFoo : Symbol(aFoo, Decl(测试_2_ch.cts, 2, 2))
>bar : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => 属性1
>符号别名 : #属性1 => bar
>aFoo.合成属性.乙 : Symbol(乙, Decl(index.d.cts, 5, 10))
>符号别名 : #乙 => b
>aFoo.合成属性 : Symbol(合成属性, Decl(index.d.cts, 3, 10))
>符号别名 : #合成属性 => nested
>aFoo : Symbol(aFoo, Decl(测试_2_ch.cts, 2, 2))
>合成属性 : Symbol(合成属性, Decl(index.d.cts, 3, 10))
>节点别名 : #合成属性 => nested
>符号别名 : #合成属性 => nested
>乙 : Symbol(乙, Decl(index.d.cts, 5, 10))
>节点别名 : #乙 => b
>符号别名 : #乙 => b

  常量 { 属性1, 属性2, 合成属性: { 甲, 乙: text } } = aFoo;
>属性1 : Symbol(属性1, Decl(测试_2_ch.cts, 5, 6))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar
>属性2 : Symbol(属性2, Decl(测试_2_ch.cts, 5, 11))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz
>合成属性 : Symbol(合成属性, Decl(index.d.cts, 3, 10))
>节点别名 : #合成属性 => nested
>符号别名 : #合成属性 => nested
>甲 : Symbol(甲, Decl(测试_2_ch.cts, 5, 24))
>节点别名 : #甲 => a
>符号别名 : #甲 => a
>乙 : Symbol(乙, Decl(index.d.cts, 5, 10))
>节点别名 : #乙 => b
>符号别名 : #乙 => b
>text : Symbol(text, Decl(测试_2_ch.cts, 5, 27))
>aFoo : Symbol(aFoo, Decl(测试_2_ch.cts, 2, 2))

  常量 A: 数字 = aFoo.bar;
>A : Symbol(A, Decl(测试_2_ch.cts, 6, 4))
>aFoo.bar : Symbol(属性1, Decl(index.d.cts, 1, 12))
>符号别名 : #属性1 => bar
>aFoo : Symbol(aFoo, Decl(测试_2_ch.cts, 2, 2))
>bar : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => 属性1
>符号别名 : #属性1 => bar

  常量 B: 数字 = 属性1;
>B : Symbol(B, Decl(测试_2_ch.cts, 7, 4))
>属性1 : Symbol(属性1, Decl(测试_2_ch.cts, 5, 6))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

  常量 C: 文字 = 属性2;
>C : Symbol(C, Decl(测试_2_ch.cts, 8, 4))
>属性2 : Symbol(属性2, Decl(测试_2_ch.cts, 5, 11))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz

  常量 D: 数字 = 甲;
>D : Symbol(D, Decl(测试_2_ch.cts, 9, 4))
>甲 : Symbol(甲, Decl(测试_2_ch.cts, 5, 24))
>节点别名 : #甲 => a
>符号别名 : #甲 => a

  常量 E: 文字 = text;
>E : Symbol(E, Decl(测试_2_ch.cts, 10, 4))
>text : Symbol(text, Decl(测试_2_ch.cts, 5, 27))
}

常量 bBar:属性1 = { 元素1: 7, 元素2: aFoo };
>bBar : Symbol(bBar, Decl(测试_2_ch.cts, 13, 2))
>属性1 : Symbol(属性1, Decl(测试_2_ch.cts, 0, 8))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar
>元素1 : Symbol(元素1, Decl(测试_2_ch.cts, 13, 15))
>节点别名 : #元素1 => elem1
>符号别名 : #元素1 => elem1
>元素2 : Symbol(元素2, Decl(测试_2_ch.cts, 13, 23))
>节点别名 : #元素2 => elem2
>符号别名 : #元素2 => elem2
>aFoo : Symbol(aFoo, Decl(测试_2_ch.cts, 2, 2))

如果(bBar.元素2 && bBar.元素2.属性1 && bBar.元素2.合成属性.乙) {
>bBar.元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>符号别名 : #元素2 => elem2
>bBar : Symbol(bBar, Decl(测试_2_ch.cts, 13, 2))
>元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>节点别名 : #元素2 => elem2
>符号别名 : #元素2 => elem2
>bBar.元素2.属性1 : Symbol(属性1, Decl(index.d.cts, 1, 12))
>符号别名 : #属性1 => bar
>bBar.元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>符号别名 : #元素2 => elem2
>bBar : Symbol(bBar, Decl(测试_2_ch.cts, 13, 2))
>元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>节点别名 : #元素2 => elem2
>符号别名 : #元素2 => elem2
>属性1 : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar
>bBar.元素2.合成属性.乙 : Symbol(乙, Decl(index.d.cts, 5, 10))
>符号别名 : #乙 => b
>bBar.元素2.合成属性 : Symbol(合成属性, Decl(index.d.cts, 3, 10))
>符号别名 : #合成属性 => nested
>bBar.元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>符号别名 : #元素2 => elem2
>bBar : Symbol(bBar, Decl(测试_2_ch.cts, 13, 2))
>元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>节点别名 : #元素2 => elem2
>符号别名 : #元素2 => elem2
>合成属性 : Symbol(合成属性, Decl(index.d.cts, 3, 10))
>节点别名 : #合成属性 => nested
>符号别名 : #合成属性 => nested
>乙 : Symbol(乙, Decl(index.d.cts, 5, 10))
>节点别名 : #乙 => b
>符号别名 : #乙 => b

  常量 { 属性1, 属性2, 合成属性: { 甲, 乙: text } } = bBar.元素2;
>属性1 : Symbol(属性1, Decl(测试_2_ch.cts, 16, 6))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar
>属性2 : Symbol(属性2, Decl(测试_2_ch.cts, 16, 11))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz
>合成属性 : Symbol(合成属性, Decl(index.d.cts, 3, 10))
>节点别名 : #合成属性 => nested
>符号别名 : #合成属性 => nested
>甲 : Symbol(甲, Decl(测试_2_ch.cts, 16, 24))
>节点别名 : #甲 => a
>符号别名 : #甲 => a
>乙 : Symbol(乙, Decl(index.d.cts, 5, 10))
>节点别名 : #乙 => b
>符号别名 : #乙 => b
>text : Symbol(text, Decl(测试_2_ch.cts, 16, 27))
>bBar.元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>符号别名 : #元素2 => elem2
>bBar : Symbol(bBar, Decl(测试_2_ch.cts, 13, 2))
>元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>节点别名 : #元素2 => elem2
>符号别名 : #元素2 => elem2

  常量 A: 数字 = bBar.元素2.属性1;
>A : Symbol(A, Decl(测试_2_ch.cts, 17, 4))
>bBar.元素2.属性1 : Symbol(属性1, Decl(index.d.cts, 1, 12))
>符号别名 : #属性1 => bar
>bBar.元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>符号别名 : #元素2 => elem2
>bBar : Symbol(bBar, Decl(测试_2_ch.cts, 13, 2))
>元素2 : Symbol(元素2, Decl(index.d.cts, 12, 15))
>节点别名 : #元素2 => elem2
>符号别名 : #元素2 => elem2
>属性1 : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

  常量 B: 数字 = 属性1;
>B : Symbol(B, Decl(测试_2_ch.cts, 18, 4))
>属性1 : Symbol(属性1, Decl(测试_2_ch.cts, 16, 6))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

  常量 C: 文字 = 属性2;
>C : Symbol(C, Decl(测试_2_ch.cts, 19, 4))
>属性2 : Symbol(属性2, Decl(测试_2_ch.cts, 16, 11))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz

  常量 D: 数字 = 甲;
>D : Symbol(D, Decl(测试_2_ch.cts, 20, 4))
>甲 : Symbol(甲, Decl(测试_2_ch.cts, 16, 24))
>节点别名 : #甲 => a
>符号别名 : #甲 => a

  常量 E: 文字 = text;
>E : Symbol(E, Decl(测试_2_ch.cts, 21, 4))
>text : Symbol(text, Decl(测试_2_ch.cts, 16, 27))
}

