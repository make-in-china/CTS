=== tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithAnyOtherType.ts ===
// delete  operator on any type

var ANY: any;
>ANY : 任意
>类型别名 :=> 任意

var ANY1;
>ANY1 : 任意
>类型别名 :=> 任意

var ANY2: any[] = ["", ""];
>ANY2 : 任意[]
>["", ""] : 文字[]
>"" : ""
>"" : ""

var obj: () => {};
>obj : () => {}

var obj1 = { x: "", y: () => { }};
>obj1 : { x: 文字; y: () => 无值; }
>{ x: "", y: () => { }} : { x: 文字; y: () => 无值; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : () => 无值
>() => { } : () => 无值

function foo(): any {
>foo : () => 任意

    var a;
>a : 任意
>类型别名 :=> 任意

    return a;
>a : 任意
>类型别名 :=> 任意
}
class A {
>A : A

    public a: any;
>a : 任意
>类型别名 :=> 任意

    static foo() {
>foo : () => 任意

        var a;
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }
}
module M {
>M : 类为 M

    export var n: any;
>n : 任意
>类型别名 :=> 任意
}
var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// any type var
var ResultIsBoolean1 = delete ANY1;
>ResultIsBoolean1 : 真假
>类型别名 :=> 真假
>delete ANY1 : 真假
>类型别名 :=> 真假
>ANY1 : 任意
>类型别名 :=> 任意

var ResultIsBoolean2 = delete ANY2;
>ResultIsBoolean2 : 真假
>类型别名 :=> 真假
>delete ANY2 : 真假
>类型别名 :=> 真假
>ANY2 : 任意[]

var ResultIsBoolean3 = delete A;
>ResultIsBoolean3 : 真假
>类型别名 :=> 真假
>delete A : 真假
>类型别名 :=> 真假
>A : 类为 A

var ResultIsBoolean4 = delete M;
>ResultIsBoolean4 : 真假
>类型别名 :=> 真假
>delete M : 真假
>类型别名 :=> 真假
>M : 类为 M

var ResultIsBoolean5 = delete obj;
>ResultIsBoolean5 : 真假
>类型别名 :=> 真假
>delete obj : 真假
>类型别名 :=> 真假
>obj : () => {}

var ResultIsBoolean6 = delete obj1;
>ResultIsBoolean6 : 真假
>类型别名 :=> 真假
>delete obj1 : 真假
>类型别名 :=> 真假
>obj1 : { x: 文字; y: () => 无值; }

// any type literal
var ResultIsBoolean7 = delete undefined;
>ResultIsBoolean7 : 真假
>类型别名 :=> 真假
>delete undefined : 真假
>类型别名 :=> 真假
>undefined : 未定
>类型别名 :=> 未定

var ResultIsBoolean8 = delete null;
>ResultIsBoolean8 : 真假
>类型别名 :=> 真假
>delete null : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值

// any type expressions
var ResultIsBoolean9 = delete ANY2[0];
>ResultIsBoolean9 : 真假
>类型别名 :=> 真假
>delete ANY2[0] : 真假
>类型别名 :=> 真假
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0

var ResultIsBoolean10 = delete obj1.x;
>ResultIsBoolean10 : 真假
>类型别名 :=> 真假
>delete obj1.x : 真假
>类型别名 :=> 真假
>obj1.x : 文字
>类型别名 :=> 文字
>obj1 : { x: 文字; y: () => 无值; }
>x : 文字
>类型别名 :=> 文字

var ResultIsBoolean11 = delete obj1.y;
>ResultIsBoolean11 : 真假
>类型别名 :=> 真假
>delete obj1.y : 真假
>类型别名 :=> 真假
>obj1.y : () => 无值
>obj1 : { x: 文字; y: () => 无值; }
>y : () => 无值

var ResultIsBoolean12 = delete objA.a;
>ResultIsBoolean12 : 真假
>类型别名 :=> 真假
>delete objA.a : 真假
>类型别名 :=> 真假
>objA.a : 任意
>类型别名 :=> 任意
>objA : A
>a : 任意
>类型别名 :=> 任意

var ResultIsBoolean13 = delete M.n;
>ResultIsBoolean13 : 真假
>类型别名 :=> 真假
>delete M.n : 真假
>类型别名 :=> 真假
>M.n : 任意
>类型别名 :=> 任意
>M : 类为 M
>n : 任意
>类型别名 :=> 任意

var ResultIsBoolean14 = delete foo();
>ResultIsBoolean14 : 真假
>类型别名 :=> 真假
>delete foo() : 真假
>类型别名 :=> 真假
>foo() : 任意
>类型别名 :=> 任意
>foo : () => 任意

var ResultIsBoolean15 = delete A.foo();
>ResultIsBoolean15 : 真假
>类型别名 :=> 真假
>delete A.foo() : 真假
>类型别名 :=> 真假
>A.foo() : 任意
>类型别名 :=> 任意
>A.foo : () => 任意
>A : 类为 A
>foo : () => 任意

var ResultIsBoolean16 = delete (ANY + ANY1);
>ResultIsBoolean16 : 真假
>类型别名 :=> 真假
>delete (ANY + ANY1) : 真假
>类型别名 :=> 真假
>(ANY + ANY1) : 任意
>类型别名 :=> 任意
>ANY + ANY1 : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意
>ANY1 : 任意
>类型别名 :=> 任意

var ResultIsBoolean17 = delete (null + undefined);
>ResultIsBoolean17 : 真假
>类型别名 :=> 真假
>delete (null + undefined) : 真假
>类型别名 :=> 真假
>(null + undefined) : 任意
>类型别名 :=> 任意
>null + undefined : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

var ResultIsBoolean18 = delete (null + null);
>ResultIsBoolean18 : 真假
>类型别名 :=> 真假
>delete (null + null) : 真假
>类型别名 :=> 真假
>(null + null) : 任意
>类型别名 :=> 任意
>null + null : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

var ResultIsBoolean19 = delete (undefined + undefined);
>ResultIsBoolean19 : 真假
>类型别名 :=> 真假
>delete (undefined + undefined) : 真假
>类型别名 :=> 真假
>(undefined + undefined) : 任意
>类型别名 :=> 任意
>undefined + undefined : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

// multiple delete  operators
var ResultIsBoolean20 = delete delete ANY;
>ResultIsBoolean20 : 真假
>类型别名 :=> 真假
>delete delete ANY : 真假
>类型别名 :=> 真假
>delete ANY : 真假
>类型别名 :=> 真假
>ANY : 任意
>类型别名 :=> 任意

var ResultIsBoolean21 = delete delete delete (ANY + ANY1);
>ResultIsBoolean21 : 真假
>类型别名 :=> 真假
>delete delete delete (ANY + ANY1) : 真假
>类型别名 :=> 真假
>delete delete (ANY + ANY1) : 真假
>类型别名 :=> 真假
>delete (ANY + ANY1) : 真假
>类型别名 :=> 真假
>(ANY + ANY1) : 任意
>类型别名 :=> 任意
>ANY + ANY1 : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意
>ANY1 : 任意
>类型别名 :=> 任意

// miss assignment operators
delete ANY;
>delete ANY : 真假
>类型别名 :=> 真假
>ANY : 任意
>类型别名 :=> 任意

delete ANY1;
>delete ANY1 : 真假
>类型别名 :=> 真假
>ANY1 : 任意
>类型别名 :=> 任意

delete ANY2[0];
>delete ANY2[0] : 真假
>类型别名 :=> 真假
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0

delete ANY, ANY1;
>delete ANY, ANY1 : 任意
>类型别名 :=> 任意
>delete ANY : 真假
>类型别名 :=> 真假
>ANY : 任意
>类型别名 :=> 任意
>ANY1 : 任意
>类型别名 :=> 任意

delete obj1.x;
>delete obj1.x : 真假
>类型别名 :=> 真假
>obj1.x : 文字
>类型别名 :=> 文字
>obj1 : { x: 文字; y: () => 无值; }
>x : 文字
>类型别名 :=> 文字

delete obj1.y;
>delete obj1.y : 真假
>类型别名 :=> 真假
>obj1.y : () => 无值
>obj1 : { x: 文字; y: () => 无值; }
>y : () => 无值

delete objA.a;
>delete objA.a : 真假
>类型别名 :=> 真假
>objA.a : 任意
>类型别名 :=> 任意
>objA : A
>a : 任意
>类型别名 :=> 任意

delete M.n;
>delete M.n : 真假
>类型别名 :=> 真假
>M.n : 任意
>类型别名 :=> 任意
>M : 类为 M
>n : 任意
>类型别名 :=> 任意

