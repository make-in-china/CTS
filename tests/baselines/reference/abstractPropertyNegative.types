=== tests/cases/compiler/abstractPropertyNegative.ts ===
interface A {
>A : A

    prop: string;
>prop : string
>类型别名 :=> 文字

    m(): string;
>m : () => string
}
abstract class B implements A {
>B : B
>A : A

    abstract prop: string;
>prop : string
>类型别名 :=> 文字

    public abstract readonly ro: string;
>ro : string
>类型别名 :=> 文字

    abstract get readonlyProp(): string;
>readonlyProp : string
>类型别名 :=> 文字

    abstract m(): string;
>m : () => string

    abstract get mismatch(): string;
>mismatch : string
>类型别名 :=> 文字

    abstract set mismatch(val: number); // error, not same type
>mismatch : string
>类型别名 :=> 文字
>val : number
>类型别名 :=> 数字
}
class C extends B {
>C : C
>B : B

    readonly ro = "readonly please";
>ro : "readonly please"
>"readonly please" : "readonly please"

    abstract notAllowed: string;
>notAllowed : string
>类型别名 :=> 文字

    get concreteWithNoBody(): string;
>concreteWithNoBody : string
>类型别名 :=> 文字
}
let c = new C();
>c : C
>new C() : C
>C : typeof C

c.ro = "error: lhs of assignment can't be readonly";
>c.ro = "error: lhs of assignment can't be readonly" : "error: lhs of assignment can't be readonly"
>c.ro : any
>类型别名 :=> 任意
>c : C
>ro : any
>类型别名 :=> 任意
>"error: lhs of assignment can't be readonly" : "error: lhs of assignment can't be readonly"

abstract class WrongTypeProperty {
>WrongTypeProperty : WrongTypeProperty

    abstract num: number;
>num : number
>类型别名 :=> 数字
}
class WrongTypePropertyImpl extends WrongTypeProperty {
>WrongTypePropertyImpl : WrongTypePropertyImpl
>WrongTypeProperty : WrongTypeProperty

    num = "nope, wrong";
>num : string
>类型别名 :=> 文字
>"nope, wrong" : "nope, wrong"
}
abstract class WrongTypeAccessor {
>WrongTypeAccessor : WrongTypeAccessor

    abstract get num(): number;
>num : number
>类型别名 :=> 数字
}
class WrongTypeAccessorImpl extends WrongTypeAccessor {
>WrongTypeAccessorImpl : WrongTypeAccessorImpl
>WrongTypeAccessor : WrongTypeAccessor

    get num() { return "nope, wrong"; }
>num : string
>类型别名 :=> 文字
>"nope, wrong" : "nope, wrong"
}
class WrongTypeAccessorImpl2 extends WrongTypeAccessor {
>WrongTypeAccessorImpl2 : WrongTypeAccessorImpl2
>WrongTypeAccessor : WrongTypeAccessor

    num = "nope, wrong";
>num : string
>类型别名 :=> 文字
>"nope, wrong" : "nope, wrong"
}

abstract class AbstractAccessorMismatch {
>AbstractAccessorMismatch : AbstractAccessorMismatch

    abstract get p1(): string;
>p1 : string
>类型别名 :=> 文字

    set p1(val: string) { };
>p1 : string
>类型别名 :=> 文字
>val : string
>类型别名 :=> 文字

    get p2(): string { return "should work"; }
>p2 : string
>类型别名 :=> 文字
>"should work" : "should work"

    abstract set p2(val: string);
>p2 : string
>类型别名 :=> 文字
>val : string
>类型别名 :=> 文字
}

