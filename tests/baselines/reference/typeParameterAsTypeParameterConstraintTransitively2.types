=== tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraintTransitively2.ts ===
// using a type parameter as a constraint for a type parameter is invalid
// these should be errors at the type parameter constraint declarations, and have no downstream errors

interface A { foo: number }
>A : A
>foo : 数字
>类型别名 :=> 数字

interface B extends A { bar: string; }
>B : B
>A : A
>bar : 文字
>类型别名 :=> 文字

interface C extends B { baz: boolean; }
>C : C
>B : B
>baz : 真假
>类型别名 :=> 真假

var a: A;
>a : A
>A : A

var b: B;
>b : B
>B : B

var c: C;
>c : C
>C : C

function foo<T, U, V>(x: T, y: U, z: V): V { return z; }
>foo : <T, U, V>(x: T, y: U, z: V) => V
>T : T
>U : U
>V : V
>x : T
>T : T
>y : U
>U : U
>z : V
>V : V
>V : V
>z : V

//function foo<T, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }

foo(1, 2, '');
>foo(1, 2, '') : ""
>foo : <T, U, V>(x: T, y: U, z: V) => V
>1 : 1
>2 : 2
>'' : ""

foo({ x: 1 }, { x: 1, y: '' }, { x: 2, y: 2, z: true });
>foo({ x: 1 }, { x: 1, y: '' }, { x: 2, y: 2, z: true }) : { x: 数字; y: 数字; z: 真假; }
>foo : <T, U, V>(x: T, y: U, z: V) => V
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>{ x: 1, y: '' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 文字
>类型别名 :=> 文字
>'' : ""
>{ x: 2, y: 2, z: true } : { x: 数字; y: 数字; z: 为真; }
>x : 数字
>类型别名 :=> 数字
>2 : 2
>y : 数字
>类型别名 :=> 数字
>2 : 2
>z : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

foo(a, b, a);
>foo(a, b, a) : A
>foo : <T, U, V>(x: T, y: U, z: V) => V
>a : A
>b : B
>a : A

foo(a, { foo: 1, bar: '', hm: true }, b);
>foo(a, { foo: 1, bar: '', hm: true }, b) : B
>foo : <T, U, V>(x: T, y: U, z: V) => V
>a : A
>{ foo: 1, bar: '', hm: true } : { foo: 数字; bar: 文字; hm: 为真; }
>foo : 数字
>类型别名 :=> 数字
>1 : 1
>bar : 文字
>类型别名 :=> 文字
>'' : ""
>hm : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>b : B

foo((x: number, y: string) => { }, (x, y: boolean) => { }, () => { });
>foo((x: number, y: string) => { }, (x, y: boolean) => { }, () => { }) : () => 无值
>foo : <T, U, V>(x: T, y: U, z: V) => V
>(x: number, y: string) => { } : (x: 数字, y: 文字) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>(x, y: boolean) => { } : (x: 任意, y: 真假) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 真假
>类型别名 :=> 真假
>() => { } : () => 无值

function foo2<T extends A, U extends A, V extends A>(x: T, y: U, z: V): V { return z; }
>foo2 : <T 扩展 A, U 扩展 A, V 扩展 A>(x: T, y: U, z: V) => V
>T : T
>A : A
>U : U
>A : A
>V : V
>A : A
>x : T
>T : T
>y : U
>U : U
>z : V
>V : V
>V : V
>z : V

//function foo2<T extends A, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }
foo(b, a, c);
>foo(b, a, c) : C
>foo : <T, U, V>(x: T, y: U, z: V) => V
>b : B
>a : A
>c : C

foo(c, c, a);
>foo(c, c, a) : A
>foo : <T, U, V>(x: T, y: U, z: V) => V
>c : C
>c : C
>a : A

