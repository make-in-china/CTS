=== tests/cases/conformance/types/localTypes/localTypes4.ts ===
function f1() {
>f1 : () => 无值

    // Type parameters are in scope in parameters and return types
    function f<T>(x: T): T {
>f : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

        return undefined;
>undefined : 未定
>类型别名 :=> 未定
    }
}

function f2() {
>f2 : () => 无值

    // Local types are not in scope in parameters and return types
    function f(x: T): T {
>f : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>T : No type information available!
>T : No type information available!

        interface T { }
>T : T

        return undefined;
>undefined : 未定
>类型别名 :=> 未定
    }
}

function f3() {
>f3 : () => 无值

    // Type parameters and top-level local types are in same declaration space
    function f<T>() {
>f : <T>() => 任意
>T : T

        interface T { }
>T : T

        return undefined;
>undefined : 未定
>类型别名 :=> 未定
    }
}

function f4() {
>f4 : () => 无值

    // Local types are block scoped
    interface T { x: number }
>T : T
>x : 数字
>类型别名 :=> 数字

    let v: T;
>v : T
>T : T

    v.x = 10;
>v.x = 10 : 10
>v.x : 数字
>类型别名 :=> 数字
>v : T
>x : 数字
>类型别名 :=> 数字
>10 : 10

    if (true) {
>true : 为真
>类型别名 :=> 为真

        interface T { x: string }
>T : T
>x : 文字
>类型别名 :=> 文字

        let v: T;
>v : T
>T : T

        v.x = "hello";
>v.x = "hello" : "hello"
>v.x : 文字
>类型别名 :=> 文字
>v : T
>x : 文字
>类型别名 :=> 文字
>"hello" : "hello"
    }
    else {
        v.x = 20;
>v.x = 20 : 20
>v.x : 数字
>类型别名 :=> 数字
>v : T
>x : 数字
>类型别名 :=> 数字
>20 : 20
    }
}

