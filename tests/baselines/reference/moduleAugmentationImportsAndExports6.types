=== tests/cases/compiler/f1.ts ===
export class A {}
>A : A

=== tests/cases/compiler/f2.ts ===
export class B {
>B : B

    n: number;
>n : 数字
>类型别名 :=> 数字
}

=== tests/cases/compiler/f3.ts ===
import {A} from "./f1";
>A : 类为 A

import {B} from "./f2";
>B : 类为 B

A.prototype.foo = function () { return undefined; }
>A.prototype.foo = function () { return undefined; } : () => 任意
>A.prototype.foo : () => B
>A.prototype : A
>A : 类为 A
>prototype : A
>foo : () => B
>function () { return undefined; } : () => 任意
>undefined : 未定
>类型别名 :=> 未定

export namespace N {
>N : 任意
>类型别名 :=> 任意

    export interface Ifc { a: number; }
>Ifc : Ifc
>a : 数字
>类型别名 :=> 数字

    export interface Cls { b: number; }
>Cls : Cls
>b : 数字
>类型别名 :=> 数字
}
import I = N.Ifc;
>I : 任意
>类型别名 :=> 任意
>N : 任意
>类型别名 :=> 任意
>Ifc : I

import C = N.Cls;
>C : 任意
>类型别名 :=> 任意
>N : 任意
>类型别名 :=> 任意
>Cls : C

declare module "./f1" {
    interface A {
>A : A

        foo(): B;
>foo : () => B
>B : B

        bar(): I;
>bar : () => I
>I : I

        baz(): C;
>baz : () => C
>C : C
    }
}

=== tests/cases/compiler/f4.ts ===
import {A} from "./f1";
>A : 类为 A

import "./f3";

let a: A;
>a : A
>A : A

let b = a.foo().n;
>b : 数字
>类型别名 :=> 数字
>a.foo().n : 数字
>类型别名 :=> 数字
>a.foo() : B
>a.foo : () => B
>a : A
>foo : () => B
>n : 数字
>类型别名 :=> 数字

let c = a.bar().a;
>c : 数字
>类型别名 :=> 数字
>a.bar().a : 数字
>类型别名 :=> 数字
>a.bar() : N.Ifc
>a.bar : () => N.Ifc
>a : A
>bar : () => N.Ifc
>a : 数字
>类型别名 :=> 数字

let d = a.baz().b;
>d : 数字
>类型别名 :=> 数字
>a.baz().b : 数字
>类型别名 :=> 数字
>a.baz() : N.Cls
>a.baz : () => N.Cls
>a : A
>baz : () => N.Cls
>b : 数字
>类型别名 :=> 数字

