=== tests/cases/compiler/emitClassExpressionInDeclarationFile2.ts ===
export var noPrivates = class {
>noPrivates : 类为 noPrivates
>class {    static getTags() { }    tags() { }    private static ps = -1    private p = 12} : 类为 noPrivates

    static getTags() { }
>getTags : () => 无值

    tags() { }
>tags : () => 无值

    private static ps = -1
>ps : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1

    private p = 12
>p : 数字
>类型别名 :=> 数字
>12 : 12
}

// altered repro from #15066 to add private property
export class FooItem {
>FooItem : FooItem

    foo(): void { }
>foo : () => 无值

    name?: string;
>name : 文字
>类型别名 :=> 文字

    private property = "capitalism"
>property : 文字
>类型别名 :=> 文字
>"capitalism" : "capitalism"
}

export type Constructor<T> = new(...args: any[]) => T;
>Constructor : Constructor<T>
>T : T
>args : 任意[]
>T : T

export function WithTags<T extends Constructor<FooItem>>(Base: T) {
>WithTags : <T 扩展 Constructor<FooItem>>(Base: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: WithTags<任意>.(Anonymous class); getTags(): 无值; } & T
>T : T
>Constructor : Constructor<T>
>FooItem : FooItem
>Base : T
>T : T

    return class extends Base {
>class extends Base {        static getTags(): void { }        tags(): void { }    } : { 新建 (...args: 任意[]): (Anonymous class); prototype: WithTags<任意>.(Anonymous class); getTags(): 无值; } & T
>Base : FooItem

        static getTags(): void { }
>getTags : () => 无值

        tags(): void { }
>tags : () => 无值
    }
}

export class Test extends WithTags(FooItem) {}
>Test : Test
>WithTags(FooItem) : WithTags<类为 FooItem>.(Anonymous class) & FooItem
>WithTags : <T 扩展 Constructor<FooItem>>(Base: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: WithTags<任意>.(Anonymous class); getTags(): 无值; } & T
>FooItem : 类为 FooItem

const test = new Test();
>test : Test
>new Test() : Test
>Test : 类为 Test

Test.getTags()
>Test.getTags() : 无值
>类型别名 :=> 无值
>Test.getTags : () => 无值
>Test : 类为 Test
>getTags : () => 无值

test.tags();
>test.tags() : 无值
>类型别名 :=> 无值
>test.tags : () => 无值
>test : Test
>tags : () => 无值

