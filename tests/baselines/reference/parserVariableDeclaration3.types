=== tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration3.ts ===
function runTests() {
>runTests : () => void

    var outfile = new Harness.Compiler.WriterAggregator()
>outfile : any
>类型别名 :=> 任意
>new Harness.Compiler.WriterAggregator() : any
>类型别名 :=> 任意
>Harness.Compiler.WriterAggregator : any
>类型别名 :=> 任意
>Harness.Compiler : any
>类型别名 :=> 任意
>Harness : any
>类型别名 :=> 任意
>Compiler : any
>类型别名 :=> 任意
>WriterAggregator : any
>类型别名 :=> 任意

      , outerr = new Harness.Compiler.WriterAggregator()
>outerr : any
>类型别名 :=> 任意
>new Harness.Compiler.WriterAggregator() : any
>类型别名 :=> 任意
>Harness.Compiler.WriterAggregator : any
>类型别名 :=> 任意
>Harness.Compiler : any
>类型别名 :=> 任意
>Harness : any
>类型别名 :=> 任意
>Compiler : any
>类型别名 :=> 任意
>WriterAggregator : any
>类型别名 :=> 任意

      , compiler = <TypeScript.TypeScriptCompiler>new TypeScript.TypeScriptCompiler(outerr)
>compiler : any
>类型别名 :=> 任意
><TypeScript.TypeScriptCompiler>new TypeScript.TypeScriptCompiler(outerr) : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>TypeScriptCompiler : No type information available!
>new TypeScript.TypeScriptCompiler(outerr) : any
>类型别名 :=> 任意
>TypeScript.TypeScriptCompiler : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>TypeScriptCompiler : any
>类型别名 :=> 任意
>outerr : any
>类型别名 :=> 任意

      , code;
>code : any
>类型别名 :=> 任意
}
