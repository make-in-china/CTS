=== tests/cases/conformance/expressions/superPropertyAccess/errorSuperPropertyAccess.ts ===
//super property access in constructor of class with no base type
//super property access in instance member function of class with no base type
//super property access in instance member accessor(get and set) of class with no base type
class NoBase {
>NoBase : NoBase

    constructor() {
        var a = super.prototype;
>a : any
>类型别名 :=> 任意
>super.prototype : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>prototype : any
>类型别名 :=> 任意

        var b = super.hasOwnProperty('');
>b : any
>类型别名 :=> 任意
>super.hasOwnProperty('') : any
>类型别名 :=> 任意
>super.hasOwnProperty : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>hasOwnProperty : any
>类型别名 :=> 任意
>'' : ""
    }

    fn() {
>fn : () => void

        var a = super.prototype;
>a : any
>类型别名 :=> 任意
>super.prototype : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>prototype : any
>类型别名 :=> 任意

        var b = super.hasOwnProperty('');
>b : any
>类型别名 :=> 任意
>super.hasOwnProperty('') : any
>类型别名 :=> 任意
>super.hasOwnProperty : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>hasOwnProperty : any
>类型别名 :=> 任意
>'' : ""
    }

    m = super.prototype;
>m : any
>类型别名 :=> 任意
>super.prototype : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>prototype : any
>类型别名 :=> 任意

    n = super.hasOwnProperty('');
>n : any
>类型别名 :=> 任意
>super.hasOwnProperty('') : any
>类型别名 :=> 任意
>super.hasOwnProperty : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>hasOwnProperty : any
>类型别名 :=> 任意
>'' : ""

    //super static property access in static member function of class with no base type
    //super static property access in static member accessor(get and set) of class with no base type
    public static static1() {
>static1 : () => void

        super.hasOwnProperty('');
>super.hasOwnProperty('') : any
>类型别名 :=> 任意
>super.hasOwnProperty : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>hasOwnProperty : any
>类型别名 :=> 任意
>'' : ""
    }

    public static get static2() {
>static2 : string
>类型别名 :=> 文字

        super.hasOwnProperty('');
>super.hasOwnProperty('') : any
>类型别名 :=> 任意
>super.hasOwnProperty : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>hasOwnProperty : any
>类型别名 :=> 任意
>'' : ""

        return '';
>'' : ""
    }

    public static set static2(n) {
>static2 : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字

        super.hasOwnProperty('');
>super.hasOwnProperty('') : any
>类型别名 :=> 任意
>super.hasOwnProperty : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>hasOwnProperty : any
>类型别名 :=> 任意
>'' : ""
    }
}

class SomeBase {
>SomeBase : SomeBase

    private privateFunc() { }
>privateFunc : () => void

    private privateMember = 0;
>privateMember : number
>类型别名 :=> 数字
>0 : 0

    public publicFunc() { }
>publicFunc : () => void

    public publicMember = 0;
>publicMember : number
>类型别名 :=> 数字
>0 : 0

    private static privateStaticFunc() { }
>privateStaticFunc : () => void

    private static privateStaticMember = 0;
>privateStaticMember : number
>类型别名 :=> 数字
>0 : 0

    public static publicStaticFunc() { }
>publicStaticFunc : () => void

    public static publicStaticMember = 0;
>publicStaticMember : number
>类型别名 :=> 数字
>0 : 0

}


//super.publicInstanceMemberNotFunction in constructor of derived class
//super.publicInstanceMemberNotFunction in instance member function of derived class
//super.publicInstanceMemberNotFunction in instance member accessor(get and set) of derived class
//super property access only available with typed this
class SomeDerived1 extends SomeBase {
>SomeDerived1 : SomeDerived1
>SomeBase : SomeBase

    constructor() {
        super();
>super() : void
>类型别名 :=> 无值
>super : typeof SomeBase

        super.publicMember = 1;
>super.publicMember = 1 : 1
>super.publicMember : number
>类型别名 :=> 数字
>super : SomeBase
>publicMember : number
>类型别名 :=> 数字
>1 : 1
    }

    fn() {
>fn : () => void

        var x = super.publicMember;
>x : number
>类型别名 :=> 数字
>super.publicMember : number
>类型别名 :=> 数字
>super : SomeBase
>publicMember : number
>类型别名 :=> 数字
    }

    get a() {
>a : any
>类型别名 :=> 任意

        var x = super.publicMember;
>x : number
>类型别名 :=> 数字
>super.publicMember : number
>类型别名 :=> 数字
>super : SomeBase
>publicMember : number
>类型别名 :=> 数字

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
    set a(n) {
>a : any
>类型别名 :=> 任意
>n : any
>类型别名 :=> 任意

        n = super.publicMember;
>n = super.publicMember : number
>类型别名 :=> 数字
>n : any
>类型别名 :=> 任意
>super.publicMember : number
>类型别名 :=> 数字
>super : SomeBase
>publicMember : number
>类型别名 :=> 数字
    }
    fn2() {
>fn2 : () => void

        function inner() {
>inner : () => void

            super.publicFunc();
>super.publicFunc() : any
>类型别名 :=> 任意
>super.publicFunc : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>publicFunc : any
>类型别名 :=> 任意
        }
        var x = {
>x : { test: () => any; }
>{            test: function () { return super.publicFunc(); }        } : { test: () => any; }

            test: function () { return super.publicFunc(); }
>test : () => any
>function () { return super.publicFunc(); } : () => any
>super.publicFunc() : any
>类型别名 :=> 任意
>super.publicFunc : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>publicFunc : any
>类型别名 :=> 任意
        }
    }
}

//super.privateProperty in constructor of derived class
//super.privateProperty in instance member function of derived class
//super.privateProperty in instance member accessor(get and set) of derived class
class SomeDerived2 extends SomeBase {
>SomeDerived2 : SomeDerived2
>SomeBase : SomeBase

    constructor() {
        super();
>super() : void
>类型别名 :=> 无值
>super : typeof SomeBase

        super.privateMember = 1;
>super.privateMember = 1 : 1
>super.privateMember : number
>类型别名 :=> 数字
>super : SomeBase
>privateMember : number
>类型别名 :=> 数字
>1 : 1
    }

    fn() {
>fn : () => void

        var x = super.privateMember;
>x : number
>类型别名 :=> 数字
>super.privateMember : number
>类型别名 :=> 数字
>super : SomeBase
>privateMember : number
>类型别名 :=> 数字
    }

    get a() {
>a : any
>类型别名 :=> 任意

        var x = super.privateMember;
>x : number
>类型别名 :=> 数字
>super.privateMember : number
>类型别名 :=> 数字
>super : SomeBase
>privateMember : number
>类型别名 :=> 数字

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
    set a(n) {
>a : any
>类型别名 :=> 任意
>n : any
>类型别名 :=> 任意

        n = super.privateMember;
>n = super.privateMember : number
>类型别名 :=> 数字
>n : any
>类型别名 :=> 任意
>super.privateMember : number
>类型别名 :=> 数字
>super : SomeBase
>privateMember : number
>类型别名 :=> 数字
    }
}

//super.publicStaticMemberNotFunction in static member function of derived class
//super.publicStaticMemberNotFunction in static member accessor(get and set) of derived class
//super.privateStaticProperty in static member function of derived class
//super.privateStaticProperty in static member accessor(get and set) of derived class
class SomeDerived3 extends SomeBase {
>SomeDerived3 : SomeDerived3
>SomeBase : SomeBase

    static fn() {
>fn : () => void

        super.publicStaticMember = 3;
>super.publicStaticMember = 3 : 3
>super.publicStaticMember : number
>类型别名 :=> 数字
>super : typeof SomeBase
>publicStaticMember : number
>类型别名 :=> 数字
>3 : 3

        super.privateStaticMember = 3;
>super.privateStaticMember = 3 : 3
>super.privateStaticMember : number
>类型别名 :=> 数字
>super : typeof SomeBase
>privateStaticMember : number
>类型别名 :=> 数字
>3 : 3

        super.privateStaticFunc();
>super.privateStaticFunc() : void
>类型别名 :=> 无值
>super.privateStaticFunc : () => void
>super : typeof SomeBase
>privateStaticFunc : () => void
    }
    static get a() {
>a : string
>类型别名 :=> 文字

        super.publicStaticMember = 3;
>super.publicStaticMember = 3 : 3
>super.publicStaticMember : number
>类型别名 :=> 数字
>super : typeof SomeBase
>publicStaticMember : number
>类型别名 :=> 数字
>3 : 3

        super.privateStaticMember = 3;
>super.privateStaticMember = 3 : 3
>super.privateStaticMember : number
>类型别名 :=> 数字
>super : typeof SomeBase
>privateStaticMember : number
>类型别名 :=> 数字
>3 : 3

        super.privateStaticFunc();
>super.privateStaticFunc() : void
>类型别名 :=> 无值
>super.privateStaticFunc : () => void
>super : typeof SomeBase
>privateStaticFunc : () => void

        return '';
>'' : ""
    }
    static set a(n) {
>a : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字

        super.publicStaticMember = 3;
>super.publicStaticMember = 3 : 3
>super.publicStaticMember : number
>类型别名 :=> 数字
>super : typeof SomeBase
>publicStaticMember : number
>类型别名 :=> 数字
>3 : 3

        super.privateStaticMember = 3;
>super.privateStaticMember = 3 : 3
>super.privateStaticMember : number
>类型别名 :=> 数字
>super : typeof SomeBase
>privateStaticMember : number
>类型别名 :=> 数字
>3 : 3

        super.privateStaticFunc();
>super.privateStaticFunc() : void
>类型别名 :=> 无值
>super.privateStaticFunc : () => void
>super : typeof SomeBase
>privateStaticFunc : () => void
    }
}

// In object literal
var obj = { n: super.wat, p: super.foo() };
>obj : { n: any; p: any; }
>{ n: super.wat, p: super.foo() } : { n: any; p: any; }
>n : any
>类型别名 :=> 任意
>super.wat : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>wat : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
>super.foo() : any
>类型别名 :=> 任意
>super.foo : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>foo : any
>类型别名 :=> 任意

