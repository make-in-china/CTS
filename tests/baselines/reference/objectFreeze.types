=== tests/cases/compiler/objectFreeze.ts ===
const f = Object.freeze(function foo(a: number, b: string) { return false; });
>f : (a: 数字, b: 文字) => 为假
>Object.freeze(function foo(a: number, b: string) { return false; }) : (a: 数字, b: 文字) => 为假
>Object.freeze : { <T>(a: T[]): ReadonlyArray<T>; <T 扩展 Function>(f: T): T; <T>(o: T): Readonly<T>; }
>Object : ObjectConstructor
>freeze : { <T>(a: T[]): ReadonlyArray<T>; <T 扩展 Function>(f: T): T; <T>(o: T): Readonly<T>; }
>function foo(a: number, b: string) { return false; } : (a: 数字, b: 文字) => 为假
>foo : (a: 数字, b: 文字) => 为假
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
>false : 为假
>类型别名 :=> 为假

f(1, "") === false;
>f(1, "") === false : 真假
>类型别名 :=> 真假
>f(1, "") : 为假
>类型别名 :=> 为假
>f : (a: 数字, b: 文字) => 为假
>1 : 1
>"" : ""
>false : 为假
>类型别名 :=> 为假

class C { constructor(a: number) { } }
>C : C
>a : 数字
>类型别名 :=> 数字

const c = Object.freeze(C);
>c : 类为 C
>Object.freeze(C) : 类为 C
>Object.freeze : { <T>(a: T[]): ReadonlyArray<T>; <T 扩展 Function>(f: T): T; <T>(o: T): Readonly<T>; }
>Object : ObjectConstructor
>freeze : { <T>(a: T[]): ReadonlyArray<T>; <T 扩展 Function>(f: T): T; <T>(o: T): Readonly<T>; }
>C : 类为 C

new c(1);
>new c(1) : C
>c : 类为 C
>1 : 1

const a = Object.freeze([1, 2, 3]);
>a : ReadonlyArray<数字>
>Object.freeze([1, 2, 3]) : ReadonlyArray<数字>
>Object.freeze : { <T>(a: T[]): ReadonlyArray<T>; <T 扩展 Function>(f: T): T; <T>(o: T): Readonly<T>; }
>Object : ObjectConstructor
>freeze : { <T>(a: T[]): ReadonlyArray<T>; <T 扩展 Function>(f: T): T; <T>(o: T): Readonly<T>; }
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

a[0] = a[2].toString();
>a[0] = a[2].toString() : 文字
>类型别名 :=> 文字
>a[0] : 数字
>类型别名 :=> 数字
>a : ReadonlyArray<数字>
>0 : 0
>a[2].toString() : 文字
>类型别名 :=> 文字
>a[2].toString : (radix?: 数字) => 文字
>a[2] : 数字
>类型别名 :=> 数字
>a : ReadonlyArray<数字>
>2 : 2
>toString : (radix?: 数字) => 文字

const o = Object.freeze({ a: 1, b: "string" });
>o : Readonly<{ a: 数字; b: 文字; }>
>Object.freeze({ a: 1, b: "string" }) : Readonly<{ a: 数字; b: 文字; }>
>Object.freeze : { <T>(a: T[]): ReadonlyArray<T>; <T 扩展 Function>(f: T): T; <T>(o: T): Readonly<T>; }
>Object : ObjectConstructor
>freeze : { <T>(a: T[]): ReadonlyArray<T>; <T 扩展 Function>(f: T): T; <T>(o: T): Readonly<T>; }
>{ a: 1, b: "string" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>"string" : "string"

o.b = o.a.toString();
>o.b = o.a.toString() : 文字
>类型别名 :=> 文字
>o.b : 任意
>类型别名 :=> 任意
>o : Readonly<{ a: 数字; b: 文字; }>
>b : 任意
>类型别名 :=> 任意
>o.a.toString() : 文字
>类型别名 :=> 文字
>o.a.toString : (radix?: 数字) => 文字
>o.a : 数字
>类型别名 :=> 数字
>o : Readonly<{ a: 数字; b: 文字; }>
>a : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

