=== tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithStringType.ts ===
// + operator on string type
var STRING: string;
>STRING : string
>类型别名 :=> 文字

var STRING1: string[] = ["", "abc"];
>STRING1 : string[]
>["", "abc"] : string[]
>"" : ""
>"abc" : "abc"

function foo(): string { return "abc"; }
>foo : () => string
>"abc" : "abc"

class A {
>A : A

    public a: string;
>a : string
>类型别名 :=> 文字

    static foo() { return ""; }
>foo : () => string
>"" : ""
}
module M {
>M : typeof M

    export var n: string;
>n : string
>类型别名 :=> 文字
}

var objA = new A();
>objA : A
>new A() : A
>A : typeof A

// string type var
var ResultIsNumber1 = +STRING;
>ResultIsNumber1 : number
>类型别名 :=> 数字
>+STRING : number
>类型别名 :=> 数字
>STRING : string
>类型别名 :=> 文字

var ResultIsNumber2 = +STRING1;
>ResultIsNumber2 : number
>类型别名 :=> 数字
>+STRING1 : number
>类型别名 :=> 数字
>STRING1 : string[]

// string type literal
var ResultIsNumber3 = +"";
>ResultIsNumber3 : number
>类型别名 :=> 数字
>+"" : number
>类型别名 :=> 数字
>"" : ""

var ResultIsNumber4 = +{ x: "", y: "" };
>ResultIsNumber4 : number
>类型别名 :=> 数字
>+{ x: "", y: "" } : number
>类型别名 :=> 数字
>{ x: "", y: "" } : { x: string; y: string; }
>x : string
>类型别名 :=> 文字
>"" : ""
>y : string
>类型别名 :=> 文字
>"" : ""

var ResultIsNumber5 = +{ x: "", y: (s: string) => { return s; } };
>ResultIsNumber5 : number
>类型别名 :=> 数字
>+{ x: "", y: (s: string) => { return s; } } : number
>类型别名 :=> 数字
>{ x: "", y: (s: string) => { return s; } } : { x: string; y: (s: string) => string; }
>x : string
>类型别名 :=> 文字
>"" : ""
>y : (s: string) => string
>(s: string) => { return s; } : (s: string) => string
>s : string
>类型别名 :=> 文字
>s : string
>类型别名 :=> 文字

// string type expressions
var ResultIsNumber6 = +objA.a;
>ResultIsNumber6 : number
>类型别名 :=> 数字
>+objA.a : number
>类型别名 :=> 数字
>objA.a : string
>类型别名 :=> 文字
>objA : A
>a : string
>类型别名 :=> 文字

var ResultIsNumber7 = +M.n;
>ResultIsNumber7 : number
>类型别名 :=> 数字
>+M.n : number
>类型别名 :=> 数字
>M.n : string
>类型别名 :=> 文字
>M : typeof M
>n : string
>类型别名 :=> 文字

var ResultIsNumber8 = +STRING1[0];
>ResultIsNumber8 : number
>类型别名 :=> 数字
>+STRING1[0] : number
>类型别名 :=> 数字
>STRING1[0] : string
>类型别名 :=> 文字
>STRING1 : string[]
>0 : 0

var ResultIsNumber9 = +foo();
>ResultIsNumber9 : number
>类型别名 :=> 数字
>+foo() : number
>类型别名 :=> 数字
>foo() : string
>类型别名 :=> 文字
>foo : () => string

var ResultIsNumber10 = +A.foo();
>ResultIsNumber10 : number
>类型别名 :=> 数字
>+A.foo() : number
>类型别名 :=> 数字
>A.foo() : string
>类型别名 :=> 文字
>A.foo : () => string
>A : typeof A
>foo : () => string

var ResultIsNumber11 = +(STRING + STRING);
>ResultIsNumber11 : number
>类型别名 :=> 数字
>+(STRING + STRING) : number
>类型别名 :=> 数字
>(STRING + STRING) : string
>类型别名 :=> 文字
>STRING + STRING : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字

var ResultIsNumber12 = +STRING.charAt(0);
>ResultIsNumber12 : number
>类型别名 :=> 数字
>+STRING.charAt(0) : number
>类型别名 :=> 数字
>STRING.charAt(0) : string
>类型别名 :=> 文字
>STRING.charAt : (pos: number) => string
>STRING : string
>类型别名 :=> 文字
>charAt : (pos: number) => string
>0 : 0

// miss assignment operators
+"";
>+"" : number
>类型别名 :=> 数字
>"" : ""

+STRING;
>+STRING : number
>类型别名 :=> 数字
>STRING : string
>类型别名 :=> 文字

+STRING1;
>+STRING1 : number
>类型别名 :=> 数字
>STRING1 : string[]

+foo();
>+foo() : number
>类型别名 :=> 数字
>foo() : string
>类型别名 :=> 文字
>foo : () => string

+objA.a,M.n;
>+objA.a,M.n : string
>类型别名 :=> 文字
>+objA.a : number
>类型别名 :=> 数字
>objA.a : string
>类型别名 :=> 文字
>objA : A
>a : string
>类型别名 :=> 文字
>M.n : string
>类型别名 :=> 文字
>M : typeof M
>n : string
>类型别名 :=> 文字

