=== tests/cases/compiler/declFileMethods_0.ts ===
export class c1 {
>c1 : c1

    /** This comment should appear for foo*/
    public foo() {
>foo : () => 无值
    }
    /** This is comment for function signature*/
    public fooWithParameters(/** this is comment about a*/a: string,
>fooWithParameters : (a: 文字, b: 数字) => 无值
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number) {
>b : 数字
>类型别名 :=> 数字

        var d = a;
>d : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
    }
    public fooWithRestParameters(a: string, ...rests: string[]) {
>fooWithRestParameters : (a: 文字, ...rests: 文字[]) => 文字
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

        return a + rests.join("");
>a + rests.join("") : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>rests.join("") : 文字
>类型别名 :=> 文字
>rests.join : (separator?: 文字) => 文字
>rests : 文字[]
>join : (separator?: 文字) => 文字
>"" : ""
    }

    public fooWithOverloads(a: string): string;
>fooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 文字
>类型别名 :=> 文字

    public fooWithOverloads(a: number): number;
>fooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字

    public fooWithOverloads(a: any): any {
>fooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }


    /** This comment should appear for privateFoo*/
    private privateFoo() {
>privateFoo : () => 无值
    }
    /** This is comment for function signature*/
    private privateFooWithParameters(/** this is comment about a*/a: string,
>privateFooWithParameters : (a: 文字, b: 数字) => 无值
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number) {
>b : 数字
>类型别名 :=> 数字

        var d = a;
>d : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
    }
    private privateFooWithRestParameters(a: string, ...rests: string[]) {
>privateFooWithRestParameters : (a: 文字, ...rests: 文字[]) => 文字
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

        return a + rests.join("");
>a + rests.join("") : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>rests.join("") : 文字
>类型别名 :=> 文字
>rests.join : (separator?: 文字) => 文字
>rests : 文字[]
>join : (separator?: 文字) => 文字
>"" : ""
    }
    private privateFooWithOverloads(a: string): string;
>privateFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 文字
>类型别名 :=> 文字

    private privateFooWithOverloads(a: number): number;
>privateFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字

    private privateFooWithOverloads(a: any): any {
>privateFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }


    /** This comment should appear for static foo*/
    static staticFoo() {
>staticFoo : () => 无值
    }
    /** This is comment for function signature*/
    static staticFooWithParameters(/** this is comment about a*/a: string,
>staticFooWithParameters : (a: 文字, b: 数字) => 无值
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number) {
>b : 数字
>类型别名 :=> 数字

        var d = a;
>d : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
    }
    static staticFooWithRestParameters(a: string, ...rests: string[]) {
>staticFooWithRestParameters : (a: 文字, ...rests: 文字[]) => 文字
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

        return a + rests.join("");
>a + rests.join("") : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>rests.join("") : 文字
>类型别名 :=> 文字
>rests.join : (separator?: 文字) => 文字
>rests : 文字[]
>join : (separator?: 文字) => 文字
>"" : ""
    }
    static staticFooWithOverloads(a: string): string;
>staticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 文字
>类型别名 :=> 文字

    static staticFooWithOverloads(a: number): number;
>staticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字

    static staticFooWithOverloads(a: any): any {
>staticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }


    /** This comment should appear for privateStaticFoo*/
    private static privateStaticFoo() {
>privateStaticFoo : () => 无值
    }
    /** This is comment for function signature*/
    private static privateStaticFooWithParameters(/** this is comment about a*/a: string,
>privateStaticFooWithParameters : (a: 文字, b: 数字) => 无值
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number) {
>b : 数字
>类型别名 :=> 数字

        var d = a;
>d : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
    }
    private static privateStaticFooWithRestParameters(a: string, ...rests: string[]) {
>privateStaticFooWithRestParameters : (a: 文字, ...rests: 文字[]) => 文字
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

        return a + rests.join("");
>a + rests.join("") : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>rests.join("") : 文字
>类型别名 :=> 文字
>rests.join : (separator?: 文字) => 文字
>rests : 文字[]
>join : (separator?: 文字) => 文字
>"" : ""
    }
    private static privateStaticFooWithOverloads(a: string): string;
>privateStaticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 文字
>类型别名 :=> 文字

    private static privateStaticFooWithOverloads(a: number): number;
>privateStaticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字

    private static privateStaticFooWithOverloads(a: any): any {
>privateStaticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }
}

export interface I1 {
>I1 : I1

    /** This comment should appear for foo*/
    foo(): string;
>foo : () => 文字

    /** This is comment for function signature*/
    fooWithParameters(/** this is comment about a*/a: string,
>fooWithParameters : (a: 文字, b: 数字) => 无值
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number): void;
>b : 数字
>类型别名 :=> 数字

    fooWithRestParameters(a: string, ...rests: string[]): string;
>fooWithRestParameters : (a: 文字, ...rests: 文字[]) => 文字
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

    fooWithOverloads(a: string): string;
>fooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 文字
>类型别名 :=> 文字

    fooWithOverloads(a: number): number;
>fooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字
}

=== tests/cases/compiler/declFileMethods_1.ts ===
class c2 {
>c2 : c2

    /** This comment should appear for foo*/
    public foo() {
>foo : () => 无值
    }
    /** This is comment for function signature*/
    public fooWithParameters(/** this is comment about a*/a: string,
>fooWithParameters : (a: 文字, b: 数字) => 无值
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number) {
>b : 数字
>类型别名 :=> 数字

        var d = a;
>d : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
    }
    public fooWithRestParameters(a: string, ...rests: string[]) {
>fooWithRestParameters : (a: 文字, ...rests: 文字[]) => 文字
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

        return a + rests.join("");
>a + rests.join("") : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>rests.join("") : 文字
>类型别名 :=> 文字
>rests.join : (separator?: 文字) => 文字
>rests : 文字[]
>join : (separator?: 文字) => 文字
>"" : ""
    }

    public fooWithOverloads(a: string): string;
>fooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 文字
>类型别名 :=> 文字

    public fooWithOverloads(a: number): number;
>fooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字

    public fooWithOverloads(a: any): any {
>fooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }


    /** This comment should appear for privateFoo*/
    private privateFoo() {
>privateFoo : () => 无值
    }
    /** This is comment for function signature*/
    private privateFooWithParameters(/** this is comment about a*/a: string,
>privateFooWithParameters : (a: 文字, b: 数字) => 无值
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number) {
>b : 数字
>类型别名 :=> 数字

        var d = a;
>d : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
    }
    private privateFooWithRestParameters(a: string, ...rests: string[]) {
>privateFooWithRestParameters : (a: 文字, ...rests: 文字[]) => 文字
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

        return a + rests.join("");
>a + rests.join("") : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>rests.join("") : 文字
>类型别名 :=> 文字
>rests.join : (separator?: 文字) => 文字
>rests : 文字[]
>join : (separator?: 文字) => 文字
>"" : ""
    }
    private privateFooWithOverloads(a: string): string;
>privateFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 文字
>类型别名 :=> 文字

    private privateFooWithOverloads(a: number): number;
>privateFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字

    private privateFooWithOverloads(a: any): any {
>privateFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }


    /** This comment should appear for static foo*/
    static staticFoo() {
>staticFoo : () => 无值
    }
    /** This is comment for function signature*/
    static staticFooWithParameters(/** this is comment about a*/a: string,
>staticFooWithParameters : (a: 文字, b: 数字) => 无值
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number) {
>b : 数字
>类型别名 :=> 数字

        var d = a;
>d : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
    }
    static staticFooWithRestParameters(a: string, ...rests: string[]) {
>staticFooWithRestParameters : (a: 文字, ...rests: 文字[]) => 文字
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

        return a + rests.join("");
>a + rests.join("") : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>rests.join("") : 文字
>类型别名 :=> 文字
>rests.join : (separator?: 文字) => 文字
>rests : 文字[]
>join : (separator?: 文字) => 文字
>"" : ""
    }
    static staticFooWithOverloads(a: string): string;
>staticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 文字
>类型别名 :=> 文字

    static staticFooWithOverloads(a: number): number;
>staticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字

    static staticFooWithOverloads(a: any): any {
>staticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }


    /** This comment should appear for privateStaticFoo*/
    private static privateStaticFoo() {
>privateStaticFoo : () => 无值
    }
    /** This is comment for function signature*/
    private static privateStaticFooWithParameters(/** this is comment about a*/a: string,
>privateStaticFooWithParameters : (a: 文字, b: 数字) => 无值
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number) {
>b : 数字
>类型别名 :=> 数字

        var d = a;
>d : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
    }
    private static privateStaticFooWithRestParameters(a: string, ...rests: string[]) {
>privateStaticFooWithRestParameters : (a: 文字, ...rests: 文字[]) => 文字
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

        return a + rests.join("");
>a + rests.join("") : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>rests.join("") : 文字
>类型别名 :=> 文字
>rests.join : (separator?: 文字) => 文字
>rests : 文字[]
>join : (separator?: 文字) => 文字
>"" : ""
    }
    private static privateStaticFooWithOverloads(a: string): string;
>privateStaticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 文字
>类型别名 :=> 文字

    private static privateStaticFooWithOverloads(a: number): number;
>privateStaticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字

    private static privateStaticFooWithOverloads(a: any): any {
>privateStaticFooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }
}

interface I2 {
>I2 : I2

    /** This comment should appear for foo*/
    foo(): string;
>foo : () => 文字

    /** This is comment for function signature*/
    fooWithParameters(/** this is comment about a*/a: string,
>fooWithParameters : (a: 文字, b: 数字) => 无值
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number): void;
>b : 数字
>类型别名 :=> 数字

    fooWithRestParameters(a: string, ...rests: string[]): string;
>fooWithRestParameters : (a: 文字, ...rests: 文字[]) => 文字
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

    fooWithOverloads(a: string): string;
>fooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 文字
>类型别名 :=> 文字

    fooWithOverloads(a: number): number;
>fooWithOverloads : { (a: 文字): 文字; (a: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字
}

