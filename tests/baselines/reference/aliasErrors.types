=== tests/cases/compiler/aliasErrors.ts ===
module foo {    
>foo : 类为 foo

    export class Provide {
>Provide : Provide
    }
    export module bar { export module baz {export class boo {}}}
>bar : 类为 bar
>baz : 类为 baz
>boo : boo
}

import provide = foo;
>provide : 类为 foo
>foo : 类为 foo

import booz = foo.bar.baz;
>booz : 类为 booz
>foo : 类为 foo
>bar : 类为 provide.bar
>baz : 类为 booz

import beez = foo.bar;
>beez : 类为 provide.bar
>foo : 类为 foo
>bar : 类为 provide.bar

import m = no;
>m : 任意
>类型别名 :=> 任意
>no : No type information available!

import m2 = no.mod;
>m2 : 任意
>类型别名 :=> 任意
>no : No type information available!
>mod : No type information available!

import n = 5;
>n : 任意
>类型别名 :=> 任意
> : No type information available!
>5 : 5

import o = "s";
>o : 任意
>类型别名 :=> 任意
> : No type information available!
>"s" : "s"

import q = null;
>q : 任意
>类型别名 :=> 任意
> : No type information available!
>null : 空值
>类型别名 :=> 空值

import r = undefined;
>r : 任意
>类型别名 :=> 任意
>undefined : No type information available!


var p = new provide.Provide();
>p : provide.Provide
>new provide.Provide() : provide.Provide
>provide.Provide : 类为 provide.Provide
>provide : 类为 foo
>Provide : 类为 provide.Provide

function use() {
>use : () => 无值
    
  beez.baz.boo;
>beez.baz.boo : 类为 booz.boo
>beez.baz : 类为 booz
>beez : 类为 provide.bar
>baz : 类为 booz
>boo : 类为 booz.boo

  var p1: provide.Provide; 
>p1 : provide.Provide
>provide : 任意
>类型别名 :=> 任意
>Provide : provide.Provide

  var p2: foo.Provide;
>p2 : provide.Provide
>foo : 任意
>类型别名 :=> 任意
>Provide : provide.Provide

  var p3:booz.bar;
>p3 : 任意
>类型别名 :=> 任意
>booz : 任意
>类型别名 :=> 任意
>bar : No type information available!

  var p22 = new provide.Provide();
>p22 : provide.Provide
>new provide.Provide() : provide.Provide
>provide.Provide : 类为 provide.Provide
>provide : 类为 foo
>Provide : 类为 provide.Provide
}


