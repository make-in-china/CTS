=== tests/cases/conformance/expressions/binaryOperators/inOperator/inOperatorWithValidOperands.ts ===
var x: any;
>x : 任意
>类型别名 :=> 任意

// valid left operands
// the left operand is required to be of type Any, the String primitive type, or the Number primitive type
var a1: string;
>a1 : 文字
>类型别名 :=> 文字

var a2: number;
>a2 : 数字
>类型别名 :=> 数字

var ra1 = x in x;
>ra1 : 真假
>类型别名 :=> 真假
>x in x : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var ra2 = a1 in x;
>ra2 : 真假
>类型别名 :=> 真假
>a1 in x : 真假
>类型别名 :=> 真假
>a1 : 文字
>类型别名 :=> 文字
>x : 任意
>类型别名 :=> 任意

var ra3 = a2 in x;
>ra3 : 真假
>类型别名 :=> 真假
>a2 in x : 真假
>类型别名 :=> 真假
>a2 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意

var ra4 = '' in x;
>ra4 : 真假
>类型别名 :=> 真假
>'' in x : 真假
>类型别名 :=> 真假
>'' : ""
>x : 任意
>类型别名 :=> 任意

var ra5 = 0 in x;
>ra5 : 真假
>类型别名 :=> 真假
>0 in x : 真假
>类型别名 :=> 真假
>0 : 0
>x : 任意
>类型别名 :=> 任意

// valid right operands
// the right operand is required to be of type Any, an object type, or a type parameter type
var b1: {};
>b1 : {}

var rb1 = x in b1;
>rb1 : 真假
>类型别名 :=> 真假
>x in b1 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>b1 : {}

var rb2 = x in {};
>rb2 : 真假
>类型别名 :=> 真假
>x in {} : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>{} : {}

function foo<T>(t: T) {
>foo : <T>(t: T) => 无值
>T : T
>t : T
>T : T

    var rb3 = x in t;
>rb3 : 真假
>类型别名 :=> 真假
>x in t : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>t : T
}

interface X { x: number }
>X : X
>x : 数字
>类型别名 :=> 数字

interface Y { y: number }
>Y : Y
>y : 数字
>类型别名 :=> 数字

var c1: X | Y;
>c1 : X | Y
>X : X
>Y : Y

var c2: X;
>c2 : X
>X : X

var c3: Y;
>c3 : Y
>Y : Y

var rc1 = x in c1;
>rc1 : 真假
>类型别名 :=> 真假
>x in c1 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>c1 : X | Y

var rc2 = x in (c2 || c3);
>rc2 : 真假
>类型别名 :=> 真假
>x in (c2 || c3) : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>(c2 || c3) : X | Y
>c2 || c3 : X | Y
>c2 : X
>c3 : Y

