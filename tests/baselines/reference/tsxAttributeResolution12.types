=== tests/cases/conformance/jsx/react.d.ts ===
declare module JSX {
>JSX : 任意
>类型别名 :=> 任意

	interface Element { }
>Element : Element

	interface IntrinsicElements {
>IntrinsicElements : IntrinsicElements
	}
	interface ElementAttributesProperty {
>ElementAttributesProperty : ElementAttributesProperty

		props;
>props : 任意
>类型别名 :=> 任意
	}
	interface IntrinsicAttributes {
>IntrinsicAttributes : IntrinsicAttributes

		ref?: string;
>ref : 文字
>类型别名 :=> 文字
	}
}

=== tests/cases/conformance/jsx/file.tsx ===
declare class Component<P, S>  {
>Component : Component<P, S>
>P : P
>S : S

	constructor(props?: P, context?: any);
>props : P
>P : P
>context : 任意
>类型别名 :=> 任意

	setState(f: (prevState: S, props: P) => S, callback?: () => any): void;
>setState : { (f: (prevState: S, props: P) => S, callback?: () => 任意): 无值; (state: S, callback?: () => 任意): 无值; }
>f : (prevState: S, props: P) => S
>prevState : S
>S : S
>props : P
>P : P
>S : S
>callback : () => 任意

	setState(state: S, callback?: () => any): void;
>setState : { (f: (prevState: S, props: P) => S, callback?: () => 任意): 无值; (state: S, callback?: () => 任意): 无值; }
>state : S
>S : S
>callback : () => 任意

	forceUpdate(callBack?: () => any): void;
>forceUpdate : (callBack?: () => 任意) => 无值
>callBack : () => 任意

	render(): JSX.Element;
>render : () => JSX.Element
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

	props: P;
>props : P
>P : P

	state: S;
>state : S
>S : S

	context: {};
>context : {}
}


interface ComponentClass<P> {
>ComponentClass : ComponentClass<P>
>P : P

	new (props?: P, context?: any): Component<P, any>;
>props : P
>P : P
>context : 任意
>类型别名 :=> 任意
>Component : Component<P, S>
>P : P
}

declare module TestMod {
>TestMod : 类为 TestMod

	interface TestClass extends ComponentClass<{reqd: any}> {
>TestClass : TestClass
>ComponentClass : ComponentClass<P>
>reqd : 任意
>类型别名 :=> 任意
	}
	var Test: TestClass;
>Test : TestClass
>TestClass : TestClass
}

// Errors correctly
const T = TestMod.Test;
>T : TestMod.TestClass
>TestMod.Test : TestMod.TestClass
>TestMod : 类为 TestMod
>Test : TestMod.TestClass

var t1 = <T />;
>t1 : JSX.Element
><T /> : JSX.Element
>T : TestMod.TestClass

// Should error
var t2 = <TestMod.Test />;
>t2 : JSX.Element
><TestMod.Test /> : JSX.Element
>TestMod.Test : TestMod.TestClass
>TestMod : 类为 TestMod
>Test : TestMod.TestClass


