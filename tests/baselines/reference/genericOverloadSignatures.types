=== tests/cases/compiler/genericOverloadSignatures.ts ===
interface A {
>A : A

    <T>(x: T): void;
>T : T
>x : T
>T : T

    <T>(x: T): void;
>T : T
>x : T
>T : T
}

function f<T>(a: T);
>f : { <T>(a: T): 任意; <T>(a: T): 任意; }
>T : T
>a : T
>T : T

function f<T>(a: T);
>f : { <T>(a: T): 任意; <T>(a: T): 任意; }
>T : T
>a : T
>T : T

function f(a) { }
>f : { <T>(a: T): 任意; <T>(a: T): 任意; }
>a : 任意
>类型别名 :=> 任意

interface I2 {
>I2 : I2

    f<T>(x: T): number;
>f : { <T>(x: T): 数字; <T>(x: T): 文字; }
>T : T
>x : T
>T : T

    f<T>(x: T): string;
>f : { <T>(x: T): 数字; <T>(x: T): 文字; }
>T : T
>x : T
>T : T
}

interface I3<T> {
>I3 : I3<T>
>T : T

    f(x: T): number;
>f : { (x: T): 数字; (x: T): 文字; }
>x : T
>T : T

    f(x: T): string;
>f : { (x: T): 数字; (x: T): 文字; }
>x : T
>T : T
}

class C2<T> {
>C2 : C2<T>
>T : T
}
var b: {
>b : { 新建 <T>(x: T, y: 文字): C2<T>; 新建 <T>(x: T, y: 文字): C2<T>; }

    new <T>(x: T, y: string): C2<T>;
>T : T
>x : T
>T : T
>y : 文字
>类型别名 :=> 文字
>C2 : C2<T>
>T : T

    new <T>(x: T, y: string): C2<T>;
>T : T
>x : T
>T : T
>y : 文字
>类型别名 :=> 文字
>C2 : C2<T>
>T : T
}

interface D {
>D : D

    <T>(x: T): T;
>T : T
>x : T
>T : T
>T : T

    <T>(x: T): T;
>T : T
>x : T
>T : T
>T : T
}
