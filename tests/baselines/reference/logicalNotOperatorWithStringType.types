=== tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithStringType.ts ===
// ! operator on string type
var STRING: string;
>STRING : 文字
>类型别名 :=> 文字

var STRING1: string[] = ["", "abc"];
>STRING1 : 文字[]
>["", "abc"] : 文字[]
>"" : ""
>"abc" : "abc"

function foo(): string { return "abc"; }
>foo : () => 文字
>"abc" : "abc"

class A {
>A : A

    public a: string;
>a : 文字
>类型别名 :=> 文字

    static foo() { return ""; }
>foo : () => 文字
>"" : ""
}
module M {
>M : 类为 M

    export var n: string;
>n : 文字
>类型别名 :=> 文字
}

var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// string type var
var ResultIsBoolean1 = !STRING;
>ResultIsBoolean1 : 真假
>类型别名 :=> 真假
>!STRING : 真假
>类型别名 :=> 真假
>STRING : 文字
>类型别名 :=> 文字

var ResultIsBoolean2 = !STRING1;
>ResultIsBoolean2 : 真假
>类型别名 :=> 真假
>!STRING1 : 真假
>类型别名 :=> 真假
>STRING1 : 文字[]

// string type literal
var ResultIsBoolean3 = !"";
>ResultIsBoolean3 : 真假
>类型别名 :=> 真假
>!"" : 为真
>类型别名 :=> 为真
>"" : ""

var ResultIsBoolean4 = !{ x: "", y: "" };
>ResultIsBoolean4 : 真假
>类型别名 :=> 真假
>!{ x: "", y: "" } : 真假
>类型别名 :=> 真假
>{ x: "", y: "" } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : 文字
>类型别名 :=> 文字
>"" : ""

var ResultIsBoolean5 = !{ x: "", y: (s: string) => { return s; } };
>ResultIsBoolean5 : 真假
>类型别名 :=> 真假
>!{ x: "", y: (s: string) => { return s; } } : 真假
>类型别名 :=> 真假
>{ x: "", y: (s: string) => { return s; } } : { x: 文字; y: (s: 文字) => 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : (s: 文字) => 文字
>(s: string) => { return s; } : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

// string type expressions
var ResultIsBoolean6 = !objA.a;
>ResultIsBoolean6 : 真假
>类型别名 :=> 真假
>!objA.a : 真假
>类型别名 :=> 真假
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字

var ResultIsBoolean7 = !M.n;
>ResultIsBoolean7 : 真假
>类型别名 :=> 真假
>!M.n : 真假
>类型别名 :=> 真假
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

var ResultIsBoolean8 = !STRING1[0];
>ResultIsBoolean8 : 真假
>类型别名 :=> 真假
>!STRING1[0] : 真假
>类型别名 :=> 真假
>STRING1[0] : 文字
>类型别名 :=> 文字
>STRING1 : 文字[]
>0 : 0

var ResultIsBoolean9 = !foo();
>ResultIsBoolean9 : 真假
>类型别名 :=> 真假
>!foo() : 真假
>类型别名 :=> 真假
>foo() : 文字
>类型别名 :=> 文字
>foo : () => 文字

var ResultIsBoolean10 = !A.foo();
>ResultIsBoolean10 : 真假
>类型别名 :=> 真假
>!A.foo() : 真假
>类型别名 :=> 真假
>A.foo() : 文字
>类型别名 :=> 文字
>A.foo : () => 文字
>A : 类为 A
>foo : () => 文字

var ResultIsBoolean11 = !(STRING + STRING);
>ResultIsBoolean11 : 真假
>类型别名 :=> 真假
>!(STRING + STRING) : 真假
>类型别名 :=> 真假
>(STRING + STRING) : 文字
>类型别名 :=> 文字
>STRING + STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字

var ResultIsBoolean12 = !STRING.charAt(0);
>ResultIsBoolean12 : 真假
>类型别名 :=> 真假
>!STRING.charAt(0) : 真假
>类型别名 :=> 真假
>STRING.charAt(0) : 文字
>类型别名 :=> 文字
>STRING.charAt : (pos: 数字) => 文字
>STRING : 文字
>类型别名 :=> 文字
>charAt : (pos: 数字) => 文字
>0 : 0

// multiple ! operator
var ResultIsBoolean13 = !!STRING;
>ResultIsBoolean13 : 真假
>类型别名 :=> 真假
>!!STRING : 真假
>类型别名 :=> 真假
>!STRING : 真假
>类型别名 :=> 真假
>STRING : 文字
>类型别名 :=> 文字

var ResultIsBoolean14 = !!!(STRING + STRING);
>ResultIsBoolean14 : 真假
>类型别名 :=> 真假
>!!!(STRING + STRING) : 真假
>类型别名 :=> 真假
>!!(STRING + STRING) : 真假
>类型别名 :=> 真假
>!(STRING + STRING) : 真假
>类型别名 :=> 真假
>(STRING + STRING) : 文字
>类型别名 :=> 文字
>STRING + STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字

// miss assignment operators
!"";
>!"" : 为真
>类型别名 :=> 为真
>"" : ""

!STRING;
>!STRING : 真假
>类型别名 :=> 真假
>STRING : 文字
>类型别名 :=> 文字

!STRING1;
>!STRING1 : 真假
>类型别名 :=> 真假
>STRING1 : 文字[]

!foo();
>!foo() : 真假
>类型别名 :=> 真假
>foo() : 文字
>类型别名 :=> 文字
>foo : () => 文字

!objA.a,M.n;
>!objA.a,M.n : 文字
>类型别名 :=> 文字
>!objA.a : 真假
>类型别名 :=> 真假
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

