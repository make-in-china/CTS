=== tests/cases/conformance/expressions/typeGuards/nullOrUndefinedTypeGuardIsOrderIndependent.ts ===
function test(strOrNull: string | null, strOrUndefined: string | undefined) {
>test : (strOrNull: 文字 | 空值, strOrUndefined: 文字 | 未定) => 无值
>strOrNull : 文字 | 空值
>null : 空值
>类型别名 :=> 空值
>strOrUndefined : 文字 | 未定

    var str: string = "original";
>str : 文字
>类型别名 :=> 文字
>"original" : "original"

    var nil: null;
>nil : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

    if (null === strOrNull) {
>null === strOrNull : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值
>strOrNull : 文字 | 空值

        nil = strOrNull;
>nil = strOrNull : 空值
>类型别名 :=> 空值
>nil : 空值
>类型别名 :=> 空值
>strOrNull : 空值
>类型别名 :=> 空值
    }
    else {
        str = strOrNull;
>str = strOrNull : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>strOrNull : 文字
>类型别名 :=> 文字
    }
    if (undefined !== strOrUndefined) {
>undefined !== strOrUndefined : 真假
>类型别名 :=> 真假
>undefined : 未定
>类型别名 :=> 未定
>strOrUndefined : 文字 | 未定

        str = strOrUndefined;
>str = strOrUndefined : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>strOrUndefined : 文字
>类型别名 :=> 文字
    }
}

