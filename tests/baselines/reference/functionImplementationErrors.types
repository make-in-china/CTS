=== tests/cases/conformance/functions/functionImplementationErrors.ts ===
// FunctionExpression with no return type annotation with multiple return statements with unrelated types
var f1 = function () {
>f1 : () => "" | 3
>function () {    return '';    return 3;} : () => "" | 3

    return '';
>'' : ""

    return 3;
>3 : 3

};
var f2 = function x() {
>f2 : () => "" | 3
>function x() {    return '';    return 3;} : () => "" | 3
>x : () => "" | 3

    return '';
>'' : ""

    return 3;
>3 : 3

};
var f3 = () => {
>f3 : () => "" | 3
>() => {    return '';    return 3;} : () => "" | 3

    return '';
>'' : ""

    return 3;
>3 : 3

};

// FunctionExpression with no return type annotation with return branch of number[] and other of string[]
var f4 = function () {
>f4 : () => 文字[] | 数字[]
>function () {    if (true) {        return [''];    } else {        return [1];    }} : () => 文字[] | 数字[]

    if (true) {
>true : 为真
>类型别名 :=> 为真

        return [''];
>[''] : 文字[]
>'' : ""

    } else {
        return [1];
>[1] : 数字[]
>1 : 1
    }
}

// Function implemetnation with non -void return type annotation with no return
function f5(): number {
>f5 : () => 数字
}

var m;
>m : 任意
>类型别名 :=> 任意

// Function signature with parameter initializer referencing in scope local variable
function f6(n = m) {
>f6 : (n?: 数字) => 无值
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

    var m = 4;
>m : 数字
>类型别名 :=> 数字
>4 : 4
}

// Function signature with initializer referencing other parameter to the right
function f7(n = m, m?) {
>f7 : (n?: 任意, m?: 任意) => 无值
>n : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意
}

// FunctionExpression with non -void return type annotation with a throw, no return, and other code
// Should be error but isn't
undefined === function (): number {
>undefined === function (): number {    throw undefined;    var x = 4;} : 真假
>类型别名 :=> 真假
>undefined : 未定
>类型别名 :=> 未定
>function (): number {    throw undefined;    var x = 4;} : () => 数字

    throw undefined;
>undefined : 未定
>类型别名 :=> 未定

    var x = 4;
>x : 数字
>类型别名 :=> 数字
>4 : 4

};

class Base { private x; }
>Base : Base
>x : 任意
>类型别名 :=> 任意

class AnotherClass { private y; }
>AnotherClass : AnotherClass
>y : 任意
>类型别名 :=> 任意

class Derived1 extends Base { private m; }
>Derived1 : Derived1
>Base : Base
>m : 任意
>类型别名 :=> 任意

class Derived2 extends Base { private n; }
>Derived2 : Derived2
>Base : Base
>n : 任意
>类型别名 :=> 任意

function f8() {
>f8 : () => Derived1 | Derived2

    return new Derived1();
>new Derived1() : Derived1
>Derived1 : 类为 Derived1

    return new Derived2();    
>new Derived2() : Derived2
>Derived2 : 类为 Derived2
}
var f9 = function () {
>f9 : () => Derived1 | Derived2
>function () {    return new Derived1();    return new Derived2();} : () => Derived1 | Derived2

    return new Derived1();
>new Derived1() : Derived1
>Derived1 : 类为 Derived1

    return new Derived2();
>new Derived2() : Derived2
>Derived2 : 类为 Derived2

};
var f10 = () => {
>f10 : () => Derived1 | Derived2
>() => {    return new Derived1();    return new Derived2();} : () => Derived1 | Derived2

    return new Derived1();
>new Derived1() : Derived1
>Derived1 : 类为 Derived1

    return new Derived2();
>new Derived2() : Derived2
>Derived2 : 类为 Derived2

};
function f11() {
>f11 : () => Base | AnotherClass

    return new Base();
>new Base() : Base
>Base : 类为 Base

    return new AnotherClass();
>new AnotherClass() : AnotherClass
>AnotherClass : 类为 AnotherClass
}
var f12 = function () {
>f12 : () => Base | AnotherClass
>function () {    return new Base();    return new AnotherClass();} : () => Base | AnotherClass

    return new Base();
>new Base() : Base
>Base : 类为 Base

    return new AnotherClass();
>new AnotherClass() : AnotherClass
>AnotherClass : 类为 AnotherClass

};
var f13 = () => {
>f13 : () => Base | AnotherClass
>() => {    return new Base();    return new AnotherClass();} : () => Base | AnotherClass

    return new Base();
>new Base() : Base
>Base : 类为 Base

    return new AnotherClass();
>new AnotherClass() : AnotherClass
>AnotherClass : 类为 AnotherClass

};

