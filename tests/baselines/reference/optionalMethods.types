=== tests/cases/conformance/types/namedTypes/optionalMethods.ts ===
interface Foo {
>Foo : Foo

    a: number;
>a : 数字
>类型别名 :=> 数字

    b?: number;
>b : 数字 | 未定

    f(): number;
>f : () => 数字

    g?(): number;
>g : (() => 数字) | 未定
}

function test1(x: Foo) {
>test1 : (x: Foo) => 无值
>x : Foo
>Foo : Foo

    x.a;
>x.a : 数字
>类型别名 :=> 数字
>x : Foo
>a : 数字
>类型别名 :=> 数字

    x.b;
>x.b : 数字 | 未定
>x : Foo
>b : 数字 | 未定

    x.f;
>x.f : () => 数字
>x : Foo
>f : () => 数字

    x.g;
>x.g : (() => 数字) | 未定
>x : Foo
>g : (() => 数字) | 未定

    let f1 = x.f();
>f1 : 数字
>类型别名 :=> 数字
>x.f() : 数字
>类型别名 :=> 数字
>x.f : () => 数字
>x : Foo
>f : () => 数字

    let g1 = x.g && x.g();
>g1 : 数字 | 未定
>x.g && x.g() : 数字 | 未定
>x.g : (() => 数字) | 未定
>x : Foo
>g : (() => 数字) | 未定
>x.g() : 数字
>类型别名 :=> 数字
>x.g : () => 数字
>x : Foo
>g : () => 数字

    let g2 = x.g ? x.g() : 0;
>g2 : 数字
>类型别名 :=> 数字
>x.g ? x.g() : 0 : 数字
>类型别名 :=> 数字
>x.g : (() => 数字) | 未定
>x : Foo
>g : (() => 数字) | 未定
>x.g() : 数字
>类型别名 :=> 数字
>x.g : () => 数字
>x : Foo
>g : () => 数字
>0 : 0
}

class Bar {
>Bar : Bar

    a: number;
>a : 数字
>类型别名 :=> 数字

    b?: number;
>b : 数字 | 未定

    c? = 2;
>c : 数字 | 未定
>2 : 2

    constructor(public d?: number, public e = 10) {}
>d : 数字 | 未定
>e : 数字
>类型别名 :=> 数字
>10 : 10

    f() {
>f : () => 数字

        return 1;
>1 : 1
    }
    g?(): number;  // Body of optional method can be omitted
>g : (() => 数字) | 未定

    h?() {
>h : (() => 数字) | 未定

        return 2;
>2 : 2
    }
}

function test2(x: Bar) {
>test2 : (x: Bar) => 无值
>x : Bar
>Bar : Bar

    x.a;
>x.a : 数字
>类型别名 :=> 数字
>x : Bar
>a : 数字
>类型别名 :=> 数字

    x.b;
>x.b : 数字 | 未定
>x : Bar
>b : 数字 | 未定

    x.c;
>x.c : 数字 | 未定
>x : Bar
>c : 数字 | 未定

    x.d;
>x.d : 数字 | 未定
>x : Bar
>d : 数字 | 未定

    x.e;
>x.e : 数字
>类型别名 :=> 数字
>x : Bar
>e : 数字
>类型别名 :=> 数字

    x.f;
>x.f : () => 数字
>x : Bar
>f : () => 数字

    x.g;
>x.g : (() => 数字) | 未定
>x : Bar
>g : (() => 数字) | 未定

    let f1 = x.f();
>f1 : 数字
>类型别名 :=> 数字
>x.f() : 数字
>类型别名 :=> 数字
>x.f : () => 数字
>x : Bar
>f : () => 数字

    let g1 = x.g && x.g();
>g1 : 数字 | 未定
>x.g && x.g() : 数字 | 未定
>x.g : (() => 数字) | 未定
>x : Bar
>g : (() => 数字) | 未定
>x.g() : 数字
>类型别名 :=> 数字
>x.g : () => 数字
>x : Bar
>g : () => 数字

    let g2 = x.g ? x.g() : 0;
>g2 : 数字
>类型别名 :=> 数字
>x.g ? x.g() : 0 : 数字
>类型别名 :=> 数字
>x.g : (() => 数字) | 未定
>x : Bar
>g : (() => 数字) | 未定
>x.g() : 数字
>类型别名 :=> 数字
>x.g : () => 数字
>x : Bar
>g : () => 数字
>0 : 0

    let h1 = x.h && x.h();
>h1 : 数字 | 未定
>x.h && x.h() : 数字 | 未定
>x.h : (() => 数字) | 未定
>x : Bar
>h : (() => 数字) | 未定
>x.h() : 数字
>类型别名 :=> 数字
>x.h : () => 数字
>x : Bar
>h : () => 数字

    let h2 = x.h ? x.h() : 0;
>h2 : 数字
>类型别名 :=> 数字
>x.h ? x.h() : 0 : 数字
>类型别名 :=> 数字
>x.h : (() => 数字) | 未定
>x : Bar
>h : (() => 数字) | 未定
>x.h() : 数字
>类型别名 :=> 数字
>x.h : () => 数字
>x : Bar
>h : () => 数字
>0 : 0
}

class Base {
>Base : Base

    a?: number;
>a : 数字 | 未定

    f?(): number;
>f : (() => 数字) | 未定
}

class Derived extends Base {
>Derived : Derived
>Base : Base

    a = 1;
>a : 数字
>类型别名 :=> 数字
>1 : 1

    f(): number { return 1; }
>f : () => 数字
>1 : 1
}

