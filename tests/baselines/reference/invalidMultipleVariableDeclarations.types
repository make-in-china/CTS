=== tests/cases/conformance/statements/VariableStatements/invalidMultipleVariableDeclarations.ts ===
interface I {
>I : I

    id: number;
>id : 数字
>类型别名 :=> 数字
}

class C implements I {
>C : C
>I : I

    id: number;
>id : 数字
>类型别名 :=> 数字

    valid: boolean;
>valid : 真假
>类型别名 :=> 真假
}

class C2 extends C {
>C2 : C2
>C : C

    name: string;
>name : 文字
>类型别名 :=> 文字
}

class D<T>{
>D : D<T>
>T : T

    source: T;
>source : T
>T : T

    recurse: D<T>;
>recurse : D<T>
>D : D<T>
>T : T

    wrapped: D<D<T>>
>wrapped : D<D<T>>
>D : D<T>
>D : D<T>
>T : T
}

function F(x: string): number { return 42; }
>F : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>42 : 42

module M {
>M : 类为 M

    export class A {
>A : A

        name: string;
>name : 文字
>类型别名 :=> 文字
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : (radix?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
}

// all of these are errors
var a: any;
>a : 任意
>类型别名 :=> 任意

var a = 1;
>a : 任意
>类型别名 :=> 任意
>1 : 1

var a = 'a string';
>a : 任意
>类型别名 :=> 任意
>'a string' : "a string"

var a = new C();
>a : 任意
>类型别名 :=> 任意
>new C() : C
>C : 类为 C

var a = new D<string>();
>a : 任意
>类型别名 :=> 任意
>new D<string>() : D<文字>
>D : 类为 D

var a = M;
>a : 任意
>类型别名 :=> 任意
>M : 类为 M

var b: I;
>b : I
>I : I

var b = new C();
>b : I
>new C() : C
>C : 类为 C

var b = new C2();
>b : I
>new C2() : C2
>C2 : 类为 C2

var f = F;
>f : (x: 文字) => 数字
>F : (x: 文字) => 数字

var f = (x: number) => '';
>f : (x: 文字) => 数字
>(x: number) => '' : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>'' : ""

var arr: string[];
>arr : 文字[]

var arr = [1, 2, 3, 4];
>arr : 文字[]
>[1, 2, 3, 4] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4

var arr = [new C(), new C2(), new D<string>()];
>arr : 文字[]
>[new C(), new C2(), new D<string>()] : (C | D<文字>)[]
>new C() : C
>C : 类为 C
>new C2() : C2
>C2 : 类为 C2
>new D<string>() : D<文字>
>D : 类为 D

var arr2 = [new D<string>()];
>arr2 : D<文字>[]
>[new D<string>()] : D<文字>[]
>new D<string>() : D<文字>
>D : 类为 D

var arr2 = new Array<D<number>>();
>arr2 : D<文字>[]
>new Array<D<number>>() : D<数字>[]
>Array : ArrayConstructor
>D : D<T>

var m: typeof M;
>m : 类为 M
>M : 类为 M

var m = M.A;
>m : 类为 M
>M.A : 类为 M.A
>M : 类为 M
>A : 类为 M.A

