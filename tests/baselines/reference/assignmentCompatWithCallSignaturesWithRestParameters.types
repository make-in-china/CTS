=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignaturesWithRestParameters.ts ===
// call signatures in derived types must have the same or fewer optional parameters as the target for assignment

interface Base { 
>Base : Base

    a: (...args: number[]) => number;
>a : (...args: 数字[]) => 数字
>args : 数字[]

    a2: (x: number, ...z: number[]) => number;
>a2 : (x: 数字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>z : 数字[]

    a3: (x: number, y?: string, ...z: number[]) => number;
>a3 : (x: 数字, y?: 文字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>z : 数字[]

    a4: (x?: number, y?: string, ...z: number[]) => number;
>a4 : (x?: 数字, y?: 文字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>z : 数字[]
}

var a: (...args: number[]) => number; // ok, same number of required params
>a : (...args: 数字[]) => 数字
>args : 数字[]

    a = () => 1; // ok, same number of required params
>a = () => 1 : () => 数字
>a : (...args: 数字[]) => 数字
>() => 1 : () => 数字
>1 : 1

    a = (...args: number[]) => 1; // ok, same number of required params
>a = (...args: number[]) => 1 : (...args: 数字[]) => 数字
>a : (...args: 数字[]) => 数字
>(...args: number[]) => 1 : (...args: 数字[]) => 数字
>args : 数字[]
>1 : 1

    a = (...args: string[]) => 1; // error, type mismatch
>a = (...args: string[]) => 1 : (...args: 文字[]) => 数字
>a : (...args: 数字[]) => 数字
>(...args: string[]) => 1 : (...args: 文字[]) => 数字
>args : 文字[]
>1 : 1

    a = (x?: number) => 1; // ok, same number of required params
>a = (x?: number) => 1 : (x?: 数字) => 数字
>a : (...args: 数字[]) => 数字
>(x?: number) => 1 : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a = (x?: number, y?: number, z?: number) => 1; // ok, same number of required params
>a = (x?: number, y?: number, z?: number) => 1 : (x?: 数字, y?: 数字, z?: 数字) => 数字
>a : (...args: 数字[]) => 数字
>(x?: number, y?: number, z?: number) => 1 : (x?: 数字, y?: 数字, z?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
>1 : 1

    a = (x: number) => 1; // ok, rest param corresponds to infinite number of params
>a = (x: number) => 1 : (x: 数字) => 数字
>a : (...args: 数字[]) => 数字
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a = (x?: string) => 1; // error, incompatible type
>a = (x?: string) => 1 : (x?: 文字) => 数字
>a : (...args: 数字[]) => 数字
>(x?: string) => 1 : (x?: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>1 : 1


var a2: (x: number, ...z: number[]) => number;
>a2 : (x: 数字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>z : 数字[]

    a2 = () => 1; // ok, fewer required params
>a2 = () => 1 : () => 数字
>a2 : (x: 数字, ...z: 数字[]) => 数字
>() => 1 : () => 数字
>1 : 1

    a2 = (...args: number[]) => 1; // ok, fewer required params
>a2 = (...args: number[]) => 1 : (...args: 数字[]) => 数字
>a2 : (x: 数字, ...z: 数字[]) => 数字
>(...args: number[]) => 1 : (...args: 数字[]) => 数字
>args : 数字[]
>1 : 1

    a2 = (x?: number) => 1; // ok, fewer required params
>a2 = (x?: number) => 1 : (x?: 数字) => 数字
>a2 : (x: 数字, ...z: 数字[]) => 数字
>(x?: number) => 1 : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a2 = (x: number) => 1; // ok, same number of required params
>a2 = (x: number) => 1 : (x: 数字) => 数字
>a2 : (x: 数字, ...z: 数字[]) => 数字
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a2 = (x: number, ...args: number[]) => 1; // ok, same number of required params
>a2 = (x: number, ...args: number[]) => 1 : (x: 数字, ...args: 数字[]) => 数字
>a2 : (x: 数字, ...z: 数字[]) => 数字
>(x: number, ...args: number[]) => 1 : (x: 数字, ...args: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>args : 数字[]
>1 : 1

    a2 = (x: number, ...args: string[]) => 1; // should be type mismatch error
>a2 = (x: number, ...args: string[]) => 1 : (x: 数字, ...args: 文字[]) => 数字
>a2 : (x: 数字, ...z: 数字[]) => 数字
>(x: number, ...args: string[]) => 1 : (x: 数字, ...args: 文字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>args : 文字[]
>1 : 1

    a2 = (x: number, y: number) => 1; // ok, rest param corresponds to infinite number of params
>a2 = (x: number, y: number) => 1 : (x: 数字, y: 数字) => 数字
>a2 : (x: 数字, ...z: 数字[]) => 数字
>(x: number, y: number) => 1 : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

    a2 = (x: number, y?: number) => 1; // ok, same number of required params
>a2 = (x: number, y?: number) => 1 : (x: 数字, y?: 数字) => 数字
>a2 : (x: 数字, ...z: 数字[]) => 数字
>(x: number, y?: number) => 1 : (x: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

var a3: (x: number, y?: string, ...z: number[]) => number;
>a3 : (x: 数字, y?: 文字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>z : 数字[]

    a3 = () => 1; // ok, fewer required params
>a3 = () => 1 : () => 数字
>a3 : (x: 数字, y?: 文字, ...z: 数字[]) => 数字
>() => 1 : () => 数字
>1 : 1

    a3 = (x?: number) => 1; // ok, fewer required params
>a3 = (x?: number) => 1 : (x?: 数字) => 数字
>a3 : (x: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x?: number) => 1 : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a3 = (x: number) => 1; // ok, same number of required params
>a3 = (x: number) => 1 : (x: 数字) => 数字
>a3 : (x: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a3 = (x: number, y: string) => 1;  // ok, all present params match
>a3 = (x: number, y: string) => 1 : (x: 数字, y: 文字) => 数字
>a3 : (x: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x: number, y: string) => 1 : (x: 数字, y: 文字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>1 : 1

    a3 = (x: number, y?: number, z?: number) => 1;  // error
>a3 = (x: number, y?: number, z?: number) => 1 : (x: 数字, y?: 数字, z?: 数字) => 数字
>a3 : (x: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x: number, y?: number, z?: number) => 1 : (x: 数字, y?: 数字, z?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
>1 : 1

    a3 = (x: number, ...z: number[]) => 1;  // error
>a3 = (x: number, ...z: number[]) => 1 : (x: 数字, ...z: 数字[]) => 数字
>a3 : (x: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x: number, ...z: number[]) => 1 : (x: 数字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>z : 数字[]
>1 : 1

    a3 = (x: string, y?: string, z?: string) => 1;  // error
>a3 = (x: string, y?: string, z?: string) => 1 : (x: 文字, y?: 文字, z?: 文字) => 数字
>a3 : (x: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x: string, y?: string, z?: string) => 1 : (x: 文字, y?: 文字, z?: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>y : 文字
>类型别名 :=> 文字
>z : 文字
>类型别名 :=> 文字
>1 : 1

var a4: (x?: number, y?: string, ...z: number[]) => number;
>a4 : (x?: 数字, y?: 文字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>z : 数字[]

    a4 = () => 1; // ok, fewer required params
>a4 = () => 1 : () => 数字
>a4 : (x?: 数字, y?: 文字, ...z: 数字[]) => 数字
>() => 1 : () => 数字
>1 : 1

    a4 = (x?: number, y?: number) => 1; // error, type mismatch
>a4 = (x?: number, y?: number) => 1 : (x?: 数字, y?: 数字) => 数字
>a4 : (x?: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x?: number, y?: number) => 1 : (x?: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

    a4 = (x: number) => 1; // ok, all present params match
>a4 = (x: number) => 1 : (x: 数字) => 数字
>a4 : (x?: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a4 = (x: number, y?: number) => 1;  // error, second param has type mismatch
>a4 = (x: number, y?: number) => 1 : (x: 数字, y?: 数字) => 数字
>a4 : (x?: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x: number, y?: number) => 1 : (x: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

    a4 = (x?: number, y?: string) => 1;  // ok, same number of required params with matching types
>a4 = (x?: number, y?: string) => 1 : (x?: 数字, y?: 文字) => 数字
>a4 : (x?: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x?: number, y?: string) => 1 : (x?: 数字, y?: 文字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>1 : 1

    a4 = (x: number, ...args: string[]) => 1;  // error, rest params have type mismatch
>a4 = (x: number, ...args: string[]) => 1 : (x: 数字, ...args: 文字[]) => 数字
>a4 : (x?: 数字, y?: 文字, ...z: 数字[]) => 数字
>(x: number, ...args: string[]) => 1 : (x: 数字, ...args: 文字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>args : 文字[]
>1 : 1

