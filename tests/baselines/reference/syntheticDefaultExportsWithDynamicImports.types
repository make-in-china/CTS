=== tests/cases/compiler/node_modules/package/index.d.ts ===
declare function packageExport(x: number): string;
>packageExport : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字

export = packageExport;
>packageExport : (x: 数字) => 文字

=== tests/cases/compiler/index.ts ===
import("package").then(({default: foo}) => foo(42));
>import("package").then(({default: foo}) => foo(42)) : Promise<文字>
>import("package").then : <TResult1 = ((x: 数字) => 文字) & { default: (x: 数字) => 文字; }, TResult2 = 不及>(onfulfilled?: (value: ((x: 数字) => 文字) & { default: (x: 数字) => 文字; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>import("package") : Promise<((x: 数字) => 文字) & { default: (x: 数字) => 文字; }>
>"package" : "package"
>then : <TResult1 = ((x: 数字) => 文字) & { default: (x: 数字) => 文字; }, TResult2 = 不及>(onfulfilled?: (value: ((x: 数字) => 文字) & { default: (x: 数字) => 文字; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>({default: foo}) => foo(42) : ({ default: foo }: ((x: 数字) => 文字) & { default: (x: 数字) => 文字; }) => 文字
>default : 任意
>类型别名 :=> 任意
>foo : (x: 数字) => 文字
>foo(42) : 文字
>类型别名 :=> 文字
>foo : (x: 数字) => 文字
>42 : 42

