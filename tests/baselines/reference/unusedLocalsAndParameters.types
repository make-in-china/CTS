=== tests/cases/compiler/unusedLocalsAndParameters.ts ===
export { };

// function declaration paramter
function f(a) {
>f : (a: any) => void
>a : any
>类型别名 :=> 任意
}
f(0);
>f(0) : void
>类型别名 :=> 无值
>f : (a: any) => void
>0 : 0

// function expression paramter
var fexp = function (a) {
>fexp : (a: any) => void
>function (a) {} : (a: any) => void
>a : any
>类型别名 :=> 任意

};

fexp(0);
>fexp(0) : void
>类型别名 :=> 无值
>fexp : (a: any) => void
>0 : 0

// arrow function paramter
var farrow = (a) => {
>farrow : (a: any) => void
>(a) => {} : (a: any) => void
>a : any
>类型别名 :=> 任意

};

class C {
>C : C

    // Method declaration paramter
    method(a) {
>method : (a: any) => void
>a : any
>类型别名 :=> 任意
    }
    // Accessor declaration paramter
    set x(v: number) {
>x : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字
    }
}

var E = class {
>E : typeof E
>class {    // Method declaration paramter    method(a) {    }    // Accessor declaration paramter    set x(v: number) {    }} : typeof E

    // Method declaration paramter
    method(a) {
>method : (a: any) => void
>a : any
>类型别名 :=> 任意
    }
    // Accessor declaration paramter
    set x(v: number) {
>x : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字
    }
}

var o = {
>o : { method(a: any): void; x: number; }
>{    // Object literal method declaration paramter    method(a) {    },    // Accessor declaration paramter    set x(v: number) {    }} : { method(a: any): void; x: number; }

    // Object literal method declaration paramter
    method(a) {
>method : (a: any) => void
>a : any
>类型别名 :=> 任意

    },
    // Accessor declaration paramter
    set x(v: number) {
>x : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字
    }
};

o;
>o : { method(a: any): void; x: number; }

// in a for..in statment
for (let i in o) {
>i : string
>类型别名 :=> 文字
>o : { method(a: any): void; x: number; }
}

// in a for..of statment
for (let i of [1, 2, 3]) {
>i : number
>类型别名 :=> 数字
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3
}

// in a for. statment
for (let i = 0, n; i < 10; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>n : any
>类型别名 :=> 任意
>i < 10 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>10 : 10
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
}

// in a block

const condition = false;
>condition : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假

if (condition) {
>condition : false
>类型别名 :=> 为假

    const c = 0;
>c : 0
>0 : 0
}

// in try/catch/finally
try {
    const a = 0;
>a : 0
>0 : 0
}
catch (e) {
>e : any
>类型别名 :=> 任意

    const c = 1;
>c : 1
>1 : 1
}
finally {
    const c = 0;
>c : 0
>0 : 0
}


// in a namespace
namespace N {
>N : typeof N

    var x;
>x : any
>类型别名 :=> 任意
}

    
