=== tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithEnumType.ts ===
// - operator on enum type

enum ENUM { };
>ENUM : ENUM

enum ENUM1 { A, B, "" };
>ENUM1 : ENUM1
>A : ENUM1.A
>B : ENUM1.B

// enum type var
var ResultIsNumber1 = -ENUM;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>-ENUM : 数字
>类型别名 :=> 数字
>ENUM : 类为 ENUM

// expressions
var ResultIsNumber2 = -ENUM1["B"];
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>-ENUM1["B"] : 数字
>类型别名 :=> 数字
>ENUM1["B"] : ENUM1.B
>ENUM1 : 类为 ENUM1
>"B" : "B"

var ResultIsNumber3 = -(ENUM1.B + ENUM1[""]);
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>-(ENUM1.B + ENUM1[""]) : 数字
>类型别名 :=> 数字
>(ENUM1.B + ENUM1[""]) : 数字
>类型别名 :=> 数字
>ENUM1.B + ENUM1[""] : 数字
>类型别名 :=> 数字
>ENUM1.B : ENUM1.B
>ENUM1 : 类为 ENUM1
>B : ENUM1.B
>ENUM1[""] : ENUM1.""
>ENUM1 : 类为 ENUM1
>"" : ""

// miss assignment operators
-ENUM;
>-ENUM : 数字
>类型别名 :=> 数字
>ENUM : 类为 ENUM

-ENUM1;
>-ENUM1 : 数字
>类型别名 :=> 数字
>ENUM1 : 类为 ENUM1

-ENUM1["B"];
>-ENUM1["B"] : 数字
>类型别名 :=> 数字
>ENUM1["B"] : ENUM1.B
>ENUM1 : 类为 ENUM1
>"B" : "B"

-ENUM, ENUM1;
>-ENUM, ENUM1 : 类为 ENUM1
>-ENUM : 数字
>类型别名 :=> 数字
>ENUM : 类为 ENUM
>ENUM1 : 类为 ENUM1

