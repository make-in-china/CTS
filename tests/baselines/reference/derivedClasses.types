=== tests/cases/compiler/derivedClasses.ts ===
class Red extends Color {
>Red : Red
>Color : Color

    public shade() { 
>shade : () => string

    	var getHue = () => { return this.hue(); };
>getHue : () => string
>() => { return this.hue(); } : () => string
>this.hue() : string
>类型别名 :=> 文字
>this.hue : () => string
>this : this
>hue : () => string

    	return getHue() + " red"; 
>getHue() + " red" : string
>类型别名 :=> 文字
>getHue() : string
>类型别名 :=> 文字
>getHue : () => string
>" red" : " red"
    }
}

class Color {
>Color : Color

    public shade() { return "some shade"; }
>shade : () => string
>"some shade" : "some shade"

    public hue() { return "some hue"; }
>hue : () => string
>"some hue" : "some hue"
}

class Blue extends Color {
>Blue : Blue
>Color : Color
    
    public shade() { 
>shade : () => string

    	var getHue = () => { return this.hue(); };
>getHue : () => string
>() => { return this.hue(); } : () => string
>this.hue() : string
>类型别名 :=> 文字
>this.hue : () => string
>this : this
>hue : () => string

    	return getHue() + " blue"; 
>getHue() + " blue" : string
>类型别名 :=> 文字
>getHue() : string
>类型别名 :=> 文字
>getHue : () => string
>" blue" : " blue"
    }
}

var r = new Red();
>r : Red
>new Red() : Red
>Red : typeof Red

var b = new Blue();
>b : Blue
>new Blue() : Blue
>Blue : typeof Blue

r.shade();
>r.shade() : string
>类型别名 :=> 文字
>r.shade : () => string
>r : Red
>shade : () => string

r.hue();
>r.hue() : string
>类型别名 :=> 文字
>r.hue : () => string
>r : Red
>hue : () => string

b.shade();
>b.shade() : string
>类型别名 :=> 文字
>b.shade : () => string
>b : Blue
>shade : () => string

b.hue();
>b.hue() : string
>类型别名 :=> 文字
>b.hue : () => string
>b : Blue
>hue : () => string



