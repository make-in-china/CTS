=== tests/cases/compiler/nestedLoopTypeGuards.ts ===
// Repros from #10378

function f1() {
>f1 : () => void

    var a: boolean | number | string;
>a : string | number | boolean

    if (typeof a !== 'boolean') {
>typeof a !== 'boolean' : boolean
>类型别名 :=> 真假
>typeof a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>a : string | number | boolean
>'boolean' : "boolean"

        // a is narrowed to "number | string"
        for (var i = 0; i < 1; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            for (var j = 0; j < 1; j++) {}
>j : number
>类型别名 :=> 数字
>0 : 0
>j < 1 : boolean
>类型别名 :=> 真假
>j : number
>类型别名 :=> 数字
>1 : 1
>j++ : number
>类型别名 :=> 数字
>j : number
>类型别名 :=> 数字

            if (typeof a === 'string') {
>typeof a === 'string' : boolean
>类型别名 :=> 真假
>typeof a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>a : string | number
>'string' : "string"

                // a is narrowed to "string'
                for (var j = 0; j < 1; j++) {
>j : number
>类型别名 :=> 数字
>0 : 0
>j < 1 : boolean
>类型别名 :=> 真假
>j : number
>类型别名 :=> 数字
>1 : 1
>j++ : number
>类型别名 :=> 数字
>j : number
>类型别名 :=> 数字

                    a.length; // Should not error here
>a.length : number
>类型别名 :=> 数字
>a : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
                }
            }
        }
    }
}

function f2() {
>f2 : () => void

    var a: string | number;
>a : string | number

    if (typeof a === 'string') {
>typeof a === 'string' : boolean
>类型别名 :=> 真假
>typeof a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>a : string | number
>'string' : "string"

        while (1) {
>1 : 1

            while (1) {}
>1 : 1

            if (typeof a === 'string') {
>typeof a === 'string' : boolean
>类型别名 :=> 真假
>typeof a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>a : string
>类型别名 :=> 文字
>'string' : "string"

                while (1) {
>1 : 1

                    a.length; // Should not error here
>a.length : number
>类型别名 :=> 数字
>a : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
                }
            }
        }
    }
}
