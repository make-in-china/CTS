=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgs.ts ===
class C {
>C : C

    private x: string;
>x : string
>类型别名 :=> 文字
}

class D {
>D : D

    private x: string;
>x : string
>类型别名 :=> 文字
}

class X<T> {
>X : X<T>
>T : T

    x: T;
>x : T
>T : T
}

function foo<T>(t: X<T>, t2: X<T>) {
>foo : <T>(t: X<T>, t2: X<T>) => T
>T : T
>t : X<T>
>X : X<T>
>T : T
>t2 : X<T>
>X : X<T>
>T : T

    var x: T;
>x : T
>T : T

    return x;
>x : T
}

var c1 = new X<C>();
>c1 : X<C>
>new X<C>() : X<C>
>X : typeof X
>C : C

var d1 = new X<D>();
>d1 : X<D>
>new X<D>() : X<D>
>X : typeof X
>D : D

var r = foo(c1, d1); // error
>r : any
>类型别名 :=> 任意
>foo(c1, d1) : any
>类型别名 :=> 任意
>foo : <T>(t: X<T>, t2: X<T>) => T
>c1 : X<C>
>d1 : X<D>

var r2 = foo(c1, c1); // ok
>r2 : C
>foo(c1, c1) : C
>foo : <T>(t: X<T>, t2: X<T>) => T
>c1 : X<C>
>c1 : X<C>

