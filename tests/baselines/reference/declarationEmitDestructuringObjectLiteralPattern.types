=== tests/cases/compiler/declarationEmitDestructuringObjectLiteralPattern.ts ===
var { } = { x: 5, y: "hello" };
>{ x: 5, y: "hello" } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>5 : 5
>y : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var { x4 } = { x4: 5, y4: "hello" };
>x4 : 数字
>类型别名 :=> 数字
>{ x4: 5, y4: "hello" } : { x4: 数字; y4: 文字; }
>x4 : 数字
>类型别名 :=> 数字
>5 : 5
>y4 : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var { y5 } = { x5: 5, y5: "hello" };
>y5 : 文字
>类型别名 :=> 文字
>{ x5: 5, y5: "hello" } : { x5: 数字; y5: 文字; }
>x5 : 数字
>类型别名 :=> 数字
>5 : 5
>y5 : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var { x6, y6 } = { x6: 5, y6: "hello" };
>x6 : 数字
>类型别名 :=> 数字
>y6 : 文字
>类型别名 :=> 文字
>{ x6: 5, y6: "hello" } : { x6: 数字; y6: 文字; }
>x6 : 数字
>类型别名 :=> 数字
>5 : 5
>y6 : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var { x7: a1 } = { x7: 5, y7: "hello" };
>x7 : 任意
>类型别名 :=> 任意
>a1 : 数字
>类型别名 :=> 数字
>{ x7: 5, y7: "hello" } : { x7: 数字; y7: 文字; }
>x7 : 数字
>类型别名 :=> 数字
>5 : 5
>y7 : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var { y8: b1 } = { x8: 5, y8: "hello" };
>y8 : 任意
>类型别名 :=> 任意
>b1 : 文字
>类型别名 :=> 文字
>{ x8: 5, y8: "hello" } : { x8: 数字; y8: 文字; }
>x8 : 数字
>类型别名 :=> 数字
>5 : 5
>y8 : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var { x9: a2, y9: b2 } = { x9: 5, y9: "hello" };
>x9 : 任意
>类型别名 :=> 任意
>a2 : 数字
>类型别名 :=> 数字
>y9 : 任意
>类型别名 :=> 任意
>b2 : 文字
>类型别名 :=> 文字
>{ x9: 5, y9: "hello" } : { x9: 数字; y9: 文字; }
>x9 : 数字
>类型别名 :=> 数字
>5 : 5
>y9 : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var { a: x11, b: { a: y11, b: { a: z11 }}} = { a: 1, b: { a: "hello", b: { a: true } } };
>a : 任意
>类型别名 :=> 任意
>x11 : 数字
>类型别名 :=> 数字
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y11 : 文字
>类型别名 :=> 文字
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>z11 : 真假
>类型别名 :=> 真假
>{ a: 1, b: { a: "hello", b: { a: true } } } : { a: 数字; b: { a: 文字; b: { a: 真假; }; }; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : { a: 文字; b: { a: 真假; }; }
>{ a: "hello", b: { a: true } } : { a: 文字; b: { a: 真假; }; }
>a : 文字
>类型别名 :=> 文字
>"hello" : "hello"
>b : { a: 真假; }
>{ a: true } : { a: 真假; }
>a : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

function f15() {
>f15 : () => { a4: 文字; b4: 数字; c4: 真假; }

    var a4 = "hello";
>a4 : 文字
>类型别名 :=> 文字
>"hello" : "hello"

    var b4 = 1;
>b4 : 数字
>类型别名 :=> 数字
>1 : 1

    var c4 = true;
>c4 : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

    return { a4, b4, c4 };
>{ a4, b4, c4 } : { a4: 文字; b4: 数字; c4: 真假; }
>a4 : 文字
>类型别名 :=> 文字
>b4 : 数字
>类型别名 :=> 数字
>c4 : 为真
>类型别名 :=> 为真
}
var { a4, b4, c4 } = f15();
>a4 : 文字
>类型别名 :=> 文字
>b4 : 数字
>类型别名 :=> 数字
>c4 : 真假
>类型别名 :=> 真假
>f15() : { a4: 文字; b4: 数字; c4: 真假; }
>f15 : () => { a4: 文字; b4: 数字; c4: 真假; }

module m {
>m : 类为 m

    export var { a4, b4, c4 } = f15();
>a4 : 文字
>类型别名 :=> 文字
>b4 : 数字
>类型别名 :=> 数字
>c4 : 真假
>类型别名 :=> 真假
>f15() : { a4: 文字; b4: 数字; c4: 真假; }
>f15 : () => { a4: 文字; b4: 数字; c4: 真假; }
}
