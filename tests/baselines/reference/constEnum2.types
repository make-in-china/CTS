=== tests/cases/conformance/constEnums/constEnum2.ts ===
// An enum declaration that specifies a const modifier is a constant enum declaration.
// In a constant enum declaration, all members must have constant values and
// it is an error for a member declaration to specify an expression that isn't classified as a constant enum expression.

// Error : not a constant enum expression

const CONST = 9000 % 2;
>CONST : 数字
>类型别名 :=> 数字
>9000 % 2 : 数字
>类型别名 :=> 数字
>9000 : 9000
>2 : 2

const enum D {
>D : D

    d = 10,
>d : D
>10 : 10

    e = 199 * Math.floor(Math.random() * 1000),
>e : D
>199 * Math.floor(Math.random() * 1000) : 数字
>类型别名 :=> 数字
>199 : 199
>Math.floor(Math.random() * 1000) : 数字
>类型别名 :=> 数字
>Math.floor : (x: 数字) => 数字
>Math : Math
>floor : (x: 数字) => 数字
>Math.random() * 1000 : 数字
>类型别名 :=> 数字
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字
>1000 : 1000

    f = d - (100 * Math.floor(Math.random() % 8))
>f : D
>d - (100 * Math.floor(Math.random() % 8)) : 数字
>类型别名 :=> 数字
>d : D
>(100 * Math.floor(Math.random() % 8)) : 数字
>类型别名 :=> 数字
>100 * Math.floor(Math.random() % 8) : 数字
>类型别名 :=> 数字
>100 : 100
>Math.floor(Math.random() % 8) : 数字
>类型别名 :=> 数字
>Math.floor : (x: 数字) => 数字
>Math : Math
>floor : (x: 数字) => 数字
>Math.random() % 8 : 数字
>类型别名 :=> 数字
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字
>8 : 8

    g = CONST,
>g : D
>CONST : 数字
>类型别名 :=> 数字
}
