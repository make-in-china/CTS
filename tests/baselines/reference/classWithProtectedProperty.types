=== tests/cases/conformance/types/members/classWithProtectedProperty.ts ===
// accessing any protected outside the class is an error

class C {
>C : C

    protected x;
>x : 任意
>类型别名 :=> 任意

    protected a = '';
>a : 文字
>类型别名 :=> 文字
>'' : ""

    protected b: string = '';
>b : 文字
>类型别名 :=> 文字
>'' : ""

    protected c() { return '' }
>c : () => 文字
>'' : ""

    protected d = () => '';
>d : () => 文字
>() => '' : () => 文字
>'' : ""

    protected static e;
>e : 任意
>类型别名 :=> 任意

    protected static f() { return '' }
>f : () => 文字
>'' : ""

    protected static g = () => '';
>g : () => 文字
>() => '' : () => 文字
>'' : ""
}

class D extends C {
>D : D
>C : C

    method() {
>method : () => 无值

        // No errors
        var d = new D();
>d : D
>new D() : D
>D : 类为 D

        var r1: string = d.x;
>r1 : 文字
>类型别名 :=> 文字
>d.x : 任意
>类型别名 :=> 任意
>d : D
>x : 任意
>类型别名 :=> 任意

        var r2: string = d.a;
>r2 : 文字
>类型别名 :=> 文字
>d.a : 文字
>类型别名 :=> 文字
>d : D
>a : 文字
>类型别名 :=> 文字

        var r3: string = d.b;
>r3 : 文字
>类型别名 :=> 文字
>d.b : 文字
>类型别名 :=> 文字
>d : D
>b : 文字
>类型别名 :=> 文字

        var r4: string = d.c();
>r4 : 文字
>类型别名 :=> 文字
>d.c() : 文字
>类型别名 :=> 文字
>d.c : () => 文字
>d : D
>c : () => 文字

        var r5: string = d.d();
>r5 : 文字
>类型别名 :=> 文字
>d.d() : 文字
>类型别名 :=> 文字
>d.d : () => 文字
>d : D
>d : () => 文字

        var r6: string = C.e;
>r6 : 文字
>类型别名 :=> 文字
>C.e : 任意
>类型别名 :=> 任意
>C : 类为 C
>e : 任意
>类型别名 :=> 任意

        var r7: string = C.f();
>r7 : 文字
>类型别名 :=> 文字
>C.f() : 文字
>类型别名 :=> 文字
>C.f : () => 文字
>C : 类为 C
>f : () => 文字

        var r8: string = C.g();
>r8 : 文字
>类型别名 :=> 文字
>C.g() : 文字
>类型别名 :=> 文字
>C.g : () => 文字
>C : 类为 C
>g : () => 文字
    }
}
