=== tests/cases/compiler/implicitAnyAmbients.ts ===
declare module m {
>m : 类为 m

    var x; // error
>x : 任意
>类型别名 :=> 任意

    var y: any;
>y : 任意
>类型别名 :=> 任意

    function f(x); // error 
>f : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

    function f2(x: any); // error
>f2 : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

    function f3(x: any): any;
>f3 : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

    interface I {
>I : I

        foo(); // error
>foo : () => 任意

        foo2(x: any); // error
>foo2 : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

        foo3(x: any): any;
>foo3 : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
    }

    class C {
>C : C

        foo(); // error
>foo : () => 任意

        foo2(x: any); // error
>foo2 : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

        foo3(x: any): any;
>foo3 : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
    }

    module n {
>n : 类为 m2

        var y; // error
>y : 任意
>类型别名 :=> 任意
    }

    import m2 = n;
>m2 : 类为 m2
>n : 类为 m2
}
