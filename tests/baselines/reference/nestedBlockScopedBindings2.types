=== tests/cases/compiler/nestedBlockScopedBindings2.ts ===
function a0() {
>a0 : () => 无值
    {
        let x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1

        () => x;
>() => x : () => 数字
>x : 数字
>类型别名 :=> 数字
    }
    {
        let x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1
    }
}

function a1() {
>a1 : () => 无值
    {
        let x;
>x : 任意
>类型别名 :=> 任意
    }
    {
        let x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1

        () => x;
>() => x : () => 数字
>x : 数字
>类型别名 :=> 数字
    }
}

function a2() {
>a2 : () => 无值
    {
        let x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1

        () => x;
>() => x : () => 数字
>x : 数字
>类型别名 :=> 数字
    }
    {
        let x;
>x : 任意
>类型别名 :=> 任意

        () => x;
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
    }
}


function a3() {
>a3 : () => 无值
    {
        let x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1

        () => x;
>() => x : () => 数字
>x : 数字
>类型别名 :=> 数字
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            () => x;
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

            break;
    }
}


function a4() {
>a4 : () => 无值
    {
        let x;
>x : 任意
>类型别名 :=> 任意
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            () => x;
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

            break;
    }
}


function a5() {
>a5 : () => 无值
    {
        let x;
>x : 任意
>类型别名 :=> 任意

        () => x;
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            break;
    }
}

function a6() {
>a6 : () => 无值

    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            break;
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            break;
    }
}

function a7() {
>a7 : () => 无值

    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            () => x;
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

            break;
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            break;
    }
}

function a8() {
>a8 : () => 无值

    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            break;
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            () => x;
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

            break;
    }
}

function a9() {
>a9 : () => 无值

    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            () => x;
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

            break;
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : 任意
>类型别名 :=> 任意

            () => x;
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

            break;
    }
}

