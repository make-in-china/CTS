=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithOverloadedFunctionTypedArguments2.ts ===
// Function typed arguments with multiple signatures must be passed an implementation that matches all of them
// Inferences are made quadratic-pairwise to and from these overload sets

module NonGenericParameter {
>NonGenericParameter : 类为 NonGenericParameter

    var a: {
>a : { (x: 真假): 真假; (x: 文字): 文字; }

        (x: boolean): boolean;
>x : 真假
>类型别名 :=> 真假

        (x: string): string;
>x : 文字
>类型别名 :=> 文字
    }

    function foo4(cb: typeof a) {
>foo4 : (cb: { (x: 真假): 真假; (x: 文字): 文字; }) => { (x: 真假): 真假; (x: 文字): 文字; }
>cb : { (x: 真假): 真假; (x: 文字): 文字; }
>a : { (x: 真假): 真假; (x: 文字): 文字; }

        return cb;
>cb : { (x: 真假): 真假; (x: 文字): 文字; }
    }

    var r3 = foo4(<T, U>(x: T) => { var r: U; return r }); // ok
>r3 : { (x: 真假): 真假; (x: 文字): 文字; }
>foo4(<T, U>(x: T) => { var r: U; return r }) : { (x: 真假): 真假; (x: 文字): 文字; }
>foo4 : (cb: { (x: 真假): 真假; (x: 文字): 文字; }) => { (x: 真假): 真假; (x: 文字): 文字; }
><T, U>(x: T) => { var r: U; return r } : <T, U>(x: T) => U
>T : T
>U : U
>x : T
>T : T
>r : U
>U : U
>r : U
}

module GenericParameter {
>GenericParameter : 类为 GenericParameter

    function foo5<T>(cb: { (x: T): string; (x: number): T }) {
>foo5 : <T>(cb: { (x: T): 文字; (x: 数字): T; }) => { (x: T): 文字; (x: 数字): T; }
>T : T
>cb : { (x: T): 文字; (x: 数字): T; }
>x : T
>T : T
>x : 数字
>类型别名 :=> 数字
>T : T

        return cb;
>cb : { (x: T): 文字; (x: 数字): T; }
    }

    var r6 = foo5(<T>(x: T) => x); // ok
>r6 : { (x: 任意): 文字; (x: 数字): 任意; }
>foo5(<T>(x: T) => x) : { (x: 任意): 文字; (x: 数字): 任意; }
>foo5 : <T>(cb: { (x: T): 文字; (x: 数字): T; }) => { (x: T): 文字; (x: 数字): T; }
><T>(x: T) => x : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T

    function foo6<T>(cb: { (x: T): string; (x: T, y?: T): string }) {
>foo6 : <T>(cb: { (x: T): 文字; (x: T, y?: T): 文字; }) => { (x: T): 文字; (x: T, y?: T): 文字; }
>T : T
>cb : { (x: T): 文字; (x: T, y?: T): 文字; }
>x : T
>T : T
>x : T
>T : T
>y : T
>T : T

        return cb;
>cb : { (x: T): 文字; (x: T, y?: T): 文字; }
    }

    var r10 = foo6(<T>(x: T, y: T) => ''); // error
>r10 : 任意
>类型别名 :=> 任意
>foo6(<T>(x: T, y: T) => '') : 任意
>类型别名 :=> 任意
>foo6 : <T>(cb: { (x: T): 文字; (x: T, y?: T): 文字; }) => { (x: T): 文字; (x: T, y?: T): 文字; }
><T>(x: T, y: T) => '' : <T>(x: T, y: T) => 文字
>T : T
>x : T
>T : T
>y : T
>T : T
>'' : ""

    function foo7<T>(x:T, cb: { (x: T): string; (x: T, y?: T): string }) {
>foo7 : <T>(x: T, cb: { (x: T): 文字; (x: T, y?: T): 文字; }) => { (x: T): 文字; (x: T, y?: T): 文字; }
>T : T
>x : T
>T : T
>cb : { (x: T): 文字; (x: T, y?: T): 文字; }
>x : T
>T : T
>x : T
>T : T
>y : T
>T : T

        return cb;
>cb : { (x: T): 文字; (x: T, y?: T): 文字; }
    }

    var r13 = foo7(1, <T>(x: T) => x); // ok
>r13 : { (x: 任意): 文字; (x: 任意, y?: 任意): 文字; }
>foo7(1, <T>(x: T) => x) : { (x: 任意): 文字; (x: 任意, y?: 任意): 文字; }
>foo7 : <T>(x: T, cb: { (x: T): 文字; (x: T, y?: T): 文字; }) => { (x: T): 文字; (x: T, y?: T): 文字; }
>1 : 1
><T>(x: T) => x : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T

    var a: { <T>(x: T): number; <T>(x: number): T; }
>a : { <T>(x: T): 数字; <T>(x: 数字): T; }
>T : T
>x : T
>T : T
>T : T
>x : 数字
>类型别名 :=> 数字
>T : T

    var r14 = foo7(1, a); // ok
>r14 : { (x: 任意): 文字; (x: 任意, y?: 任意): 文字; }
>foo7(1, a) : { (x: 任意): 文字; (x: 任意, y?: 任意): 文字; }
>foo7 : <T>(x: T, cb: { (x: T): 文字; (x: T, y?: T): 文字; }) => { (x: T): 文字; (x: T, y?: T): 文字; }
>1 : 1
>a : { <T>(x: T): 数字; <T>(x: 数字): T; }
}
