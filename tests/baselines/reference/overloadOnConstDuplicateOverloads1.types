=== tests/cases/compiler/overloadOnConstDuplicateOverloads1.ts ===
function foo(a: 'hi', x: string);
>foo : { (a: "hi", x: string): any; (a: "hi", x: string): any; }
>a : "hi"
>x : string
>类型别名 :=> 文字

function foo(a: 'hi', x: string);
>foo : { (a: "hi", x: string): any; (a: "hi", x: string): any; }
>a : "hi"
>x : string
>类型别名 :=> 文字

function foo(a: any, x: any) {
>foo : { (a: "hi", x: string): any; (a: "hi", x: string): any; }
>a : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
}

function foo2(a: 'hi', x: string);
>foo2 : { (a: "hi", x: string): any; (a: "hi", x: string): any; (a: string, x: string): any; }
>a : "hi"
>x : string
>类型别名 :=> 文字

function foo2(a: 'hi', x: string);
>foo2 : { (a: "hi", x: string): any; (a: "hi", x: string): any; (a: string, x: string): any; }
>a : "hi"
>x : string
>类型别名 :=> 文字

function foo2(a: string, x: string);
>foo2 : { (a: "hi", x: string): any; (a: "hi", x: string): any; (a: string, x: string): any; }
>a : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

function foo2(a: any, x: any) {
>foo2 : { (a: "hi", x: string): any; (a: "hi", x: string): any; (a: string, x: string): any; }
>a : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
}
