=== tests/cases/conformance/es6/Symbols/symbolProperty18.ts ===
var i = {
>i : { [Symbol.iterator]: 数字; [Symbol.toStringTag](): 文字; [Symbol.toPrimitive]: 真假; }
>{    [Symbol.iterator]: 0,    [Symbol.toStringTag]() { return "" },    set [Symbol.toPrimitive](p: boolean) { }} : { [Symbol.iterator]: 数字; [Symbol.toStringTag](): 文字; [Symbol.toPrimitive]: 真假; }

    [Symbol.iterator]: 0,
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号
>0 : 0

    [Symbol.toStringTag]() { return "" },
>Symbol.toStringTag : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>toStringTag : 符号
>类型别名 :=> 符号
>"" : ""

    set [Symbol.toPrimitive](p: boolean) { }
>Symbol.toPrimitive : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>toPrimitive : 符号
>类型别名 :=> 符号
>p : 真假
>类型别名 :=> 真假
}

var it = i[Symbol.iterator];
>it : 数字
>类型别名 :=> 数字
>i[Symbol.iterator] : 数字
>类型别名 :=> 数字
>i : { [Symbol.iterator]: 数字; [Symbol.toStringTag](): 文字; [Symbol.toPrimitive]: 真假; }
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号

var str = i[Symbol.toStringTag]();
>str : 文字
>类型别名 :=> 文字
>i[Symbol.toStringTag]() : 文字
>类型别名 :=> 文字
>i[Symbol.toStringTag] : () => 文字
>i : { [Symbol.iterator]: 数字; [Symbol.toStringTag](): 文字; [Symbol.toPrimitive]: 真假; }
>Symbol.toStringTag : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>toStringTag : 符号
>类型别名 :=> 符号

i[Symbol.toPrimitive] = false;
>i[Symbol.toPrimitive] = false : 为假
>类型别名 :=> 为假
>i[Symbol.toPrimitive] : 真假
>类型别名 :=> 真假
>i : { [Symbol.iterator]: 数字; [Symbol.toStringTag](): 文字; [Symbol.toPrimitive]: 真假; }
>Symbol.toPrimitive : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>toPrimitive : 符号
>类型别名 :=> 符号
>false : 为假
>类型别名 :=> 为假

