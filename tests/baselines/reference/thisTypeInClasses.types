=== tests/cases/conformance/types/thisType/thisTypeInClasses.ts ===
class C1 {
>C1 : C1

    x: this;
>x : 本体

    f(x: this): this { return undefined; }
>f : (x: 本体) => 本体
>x : 本体
>undefined : 未定
>类型别名 :=> 未定
}

class C2 {
>C2 : C2

    [x: string]: this;
>x : 文字
>类型别名 :=> 文字
}

interface Foo<T> {
>Foo : Foo<T>
>T : T

    x: T;
>x : T
>T : T

    y: this;
>y : 本体
}

class C3 {
>C3 : C3

    a: this[];
>a : 本体[]

    b: [this, this];
>b : [本体, 本体]

    c: this | Date;
>c : 本体 | Date
>Date : Date

    d: this & Date;
>d : 本体 & Date
>Date : Date

    e: (((this)));
>e : 本体

    f: (x: this) => this;
>f : (x: 本体) => 本体
>x : 本体

    g: new (x: this) => this;
>g : 新建 (x: 本体) => 本体
>x : 本体

    h: Foo<this>;
>h : Foo<本体>
>Foo : Foo<T>

    i: Foo<this | (() => this)>;
>i : Foo<本体 | (() => 本体)>
>Foo : Foo<T>

    j: (x: any) => x is this;
>j : (x: 任意) => x 作为 本体
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
}

declare class C4 {
>C4 : C4

    x: this;
>x : 本体

    f(x: this): this;
>f : (x: 本体) => 本体
>x : 本体
}

class C5 {
>C5 : C5

    foo() {
>foo : () => 无值

        let f1 = (x: this): this => this;
>f1 : (x: 本体) => 本体
>(x: this): this => this : (x: 本体) => 本体
>x : 本体
>this : 本体

        let f2 = (x: this) => this;
>f2 : (x: 本体) => 本体
>(x: this) => this : (x: 本体) => 本体
>x : 本体
>this : 本体

        let f3 = (x: this) => (y: this) => this;
>f3 : (x: 本体) => (y: 本体) => 本体
>(x: this) => (y: this) => this : (x: 本体) => (y: 本体) => 本体
>x : 本体
>(y: this) => this : (y: 本体) => 本体
>y : 本体
>this : 本体

        let f4 = (x: this) => {
>f4 : (x: 本体) => () => 本体
>(x: this) => {            let g = (y: this) => {                return () => this;            }            return g(this);        } : (x: 本体) => () => 本体
>x : 本体

            let g = (y: this) => {
>g : (y: 本体) => () => 本体
>(y: this) => {                return () => this;            } : (y: 本体) => () => 本体
>y : 本体

                return () => this;
>() => this : () => 本体
>this : 本体
            }
            return g(this);
>g(this) : () => 本体
>g : (y: 本体) => () => 本体
>this : 本体
        }
    }
    bar() {
>bar : () => 无值

        let x1 = <this>undefined;
>x1 : 本体
><this>undefined : 本体
>undefined : 未定
>类型别名 :=> 未定

        let x2 = undefined as this;
>x2 : 本体
>undefined as this : 本体
>undefined : 未定
>类型别名 :=> 未定
    }
}

