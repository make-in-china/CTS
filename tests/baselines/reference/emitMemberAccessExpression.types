=== tests/cases/compiler/emitMemberAccessExpression_file3.ts ===
/// <reference path="emitMemberAccessExpression_file2.ts" />
/// <reference path="emitMemberAccessExpression_file1.ts" />
declare var OData: any;
>OData : 任意
>类型别名 :=> 任意

module Microsoft.PeopleAtWork.Model {
>Microsoft : 类为 Microsoft
>PeopleAtWork : 类为 PeopleAtWork
>Model : 类为 Model

    export class KnockoutExtentions {
>KnockoutExtentions : KnockoutExtentions
    }
}
=== tests/cases/compiler/emitMemberAccessExpression_file1.ts ===
/// <reference path="emitMemberAccessExpression_file3.ts" />
"use strict";
>"use strict" : "use strict"

=== tests/cases/compiler/emitMemberAccessExpression_file2.ts ===
/// <reference path="emitMemberAccessExpression_file3.ts" />
"use strict";
>"use strict" : "use strict"

module Microsoft.PeopleAtWork.Model {
>Microsoft : 类为 Microsoft
>PeopleAtWork : 类为 PeopleAtWork
>Model : 类为 Model

    export class _Person {
>_Person : _Person

        public populate(raw: any) {
>populate : (raw: 任意) => 无值
>raw : 任意
>类型别名 :=> 任意

            var res = Model.KnockoutExtentions;
>res : 类为 KnockoutExtentions
>Model.KnockoutExtentions : 类为 KnockoutExtentions
>Model : 类为 Model
>KnockoutExtentions : 类为 KnockoutExtentions
        }
    }
}

