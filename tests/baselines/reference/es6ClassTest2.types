=== tests/cases/compiler/es6ClassTest2.ts ===
class BasicMonster {
>BasicMonster : BasicMonster

    constructor(public name: string, public health: number) {
>name : 文字
>类型别名 :=> 文字
>health : 数字
>类型别名 :=> 数字

    }

    attack(target) {
>attack : (target: 任意) => 无值
>target : 任意
>类型别名 :=> 任意

      // WScript.Echo("Attacks " + target);
    }

    isAlive = true;
>isAlive : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
}

var m1 = new BasicMonster("1", 100);
>m1 : BasicMonster
>new BasicMonster("1", 100) : BasicMonster
>BasicMonster : 类为 BasicMonster
>"1" : "1"
>100 : 100

var m2 = new BasicMonster("2", 100);
>m2 : BasicMonster
>new BasicMonster("2", 100) : BasicMonster
>BasicMonster : 类为 BasicMonster
>"2" : "2"
>100 : 100

m1.attack(m2);
>m1.attack(m2) : 无值
>类型别名 :=> 无值
>m1.attack : (target: 任意) => 无值
>m1 : BasicMonster
>attack : (target: 任意) => 无值
>m2 : BasicMonster

m1.health = 0;
>m1.health = 0 : 0
>m1.health : 数字
>类型别名 :=> 数字
>m1 : BasicMonster
>health : 数字
>类型别名 :=> 数字
>0 : 0

console.log((<any>m5.isAlive).toString());
>console.log((<any>m5.isAlive).toString()) : 任意
>类型别名 :=> 任意
>console.log : 任意
>类型别名 :=> 任意
>console : 任意
>类型别名 :=> 任意
>log : 任意
>类型别名 :=> 任意
>(<any>m5.isAlive).toString() : 任意
>类型别名 :=> 任意
>(<any>m5.isAlive).toString : 任意
>类型别名 :=> 任意
>(<any>m5.isAlive) : 任意
>类型别名 :=> 任意
><any>m5.isAlive : 任意
>类型别名 :=> 任意
>m5.isAlive : 真假
>类型别名 :=> 真假
>m5 : OverloadedMonster
>isAlive : 真假
>类型别名 :=> 真假
>toString : 任意
>类型别名 :=> 任意

class GetSetMonster {
>GetSetMonster : GetSetMonster

    constructor(public name: string, private _health: number) {
>name : 文字
>类型别名 :=> 文字
>_health : 数字
>类型别名 :=> 数字

    }

    attack(target) {
>attack : (target: 任意) => 无值
>target : 任意
>类型别名 :=> 任意

      // WScript.Echo("Attacks " + target);
    }
  // The contextual keyword "get" followed by an identifier and
  // a curly body defines a getter in the same way that "get"
  // defines one in an object literal.
    get isAlive() {
>isAlive : 真假
>类型别名 :=> 真假

        return this._health > 0;
>this._health > 0 : 真假
>类型别名 :=> 真假
>this._health : 数字
>类型别名 :=> 数字
>this : 本体
>_health : 数字
>类型别名 :=> 数字
>0 : 0
    }

  // Likewise, "set" can be used to define setters.
    set health(value: number) {
>health : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字

        if (value < 0) {
>value < 0 : 真假
>类型别名 :=> 真假
>value : 数字
>类型别名 :=> 数字
>0 : 0

            throw new Error('Health must be non-negative.')
>new Error('Health must be non-negative.') : Error
>Error : ErrorConstructor
>'Health must be non-negative.' : "Health must be non-negative."
    }
        this._health = value
>this._health = value : 数字
>类型别名 :=> 数字
>this._health : 数字
>类型别名 :=> 数字
>this : 本体
>_health : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字
  }
}

var m3 = new BasicMonster("1", 100);
>m3 : BasicMonster
>new BasicMonster("1", 100) : BasicMonster
>BasicMonster : 类为 BasicMonster
>"1" : "1"
>100 : 100

var m4 = new BasicMonster("2", 100);
>m4 : BasicMonster
>new BasicMonster("2", 100) : BasicMonster
>BasicMonster : 类为 BasicMonster
>"2" : "2"
>100 : 100

m3.attack(m4);
>m3.attack(m4) : 无值
>类型别名 :=> 无值
>m3.attack : (target: 任意) => 无值
>m3 : BasicMonster
>attack : (target: 任意) => 无值
>m4 : BasicMonster

m3.health = 0;
>m3.health = 0 : 0
>m3.health : 数字
>类型别名 :=> 数字
>m3 : BasicMonster
>health : 数字
>类型别名 :=> 数字
>0 : 0

var x = (<any>m5.isAlive).toString()
>x : 任意
>类型别名 :=> 任意
>(<any>m5.isAlive).toString() : 任意
>类型别名 :=> 任意
>(<any>m5.isAlive).toString : 任意
>类型别名 :=> 任意
>(<any>m5.isAlive) : 任意
>类型别名 :=> 任意
><any>m5.isAlive : 任意
>类型别名 :=> 任意
>m5.isAlive : 真假
>类型别名 :=> 真假
>m5 : OverloadedMonster
>isAlive : 真假
>类型别名 :=> 真假
>toString : 任意
>类型别名 :=> 任意

class OverloadedMonster {
>OverloadedMonster : OverloadedMonster

    constructor(name: string);
>name : 文字
>类型别名 :=> 文字

    constructor(public name: string, public health?: number) {
>name : 文字
>类型别名 :=> 文字
>health : 数字
>类型别名 :=> 数字

    }

    attack();
>attack : { (): 任意; (a: 任意): 任意; }

    attack(a: any);
>attack : { (): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

    attack(target?) {
>attack : { (): 任意; (a: 任意): 任意; }
>target : 任意
>类型别名 :=> 任意

        //WScript.Echo("Attacks " + target);
    }

    isAlive = true;
>isAlive : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
}

var m5 = new OverloadedMonster("1");
>m5 : OverloadedMonster
>new OverloadedMonster("1") : OverloadedMonster
>OverloadedMonster : 类为 OverloadedMonster
>"1" : "1"

var m6 = new OverloadedMonster("2");
>m6 : OverloadedMonster
>new OverloadedMonster("2") : OverloadedMonster
>OverloadedMonster : 类为 OverloadedMonster
>"2" : "2"

m5.attack(m6);
>m5.attack(m6) : 任意
>类型别名 :=> 任意
>m5.attack : { (): 任意; (a: 任意): 任意; }
>m5 : OverloadedMonster
>attack : { (): 任意; (a: 任意): 任意; }
>m6 : OverloadedMonster

m5.health = 0;
>m5.health = 0 : 0
>m5.health : 数字
>类型别名 :=> 数字
>m5 : OverloadedMonster
>health : 数字
>类型别名 :=> 数字
>0 : 0

var y = (<any>m5.isAlive).toString()
>y : 任意
>类型别名 :=> 任意
>(<any>m5.isAlive).toString() : 任意
>类型别名 :=> 任意
>(<any>m5.isAlive).toString : 任意
>类型别名 :=> 任意
>(<any>m5.isAlive) : 任意
>类型别名 :=> 任意
><any>m5.isAlive : 任意
>类型别名 :=> 任意
>m5.isAlive : 真假
>类型别名 :=> 真假
>m5 : OverloadedMonster
>isAlive : 真假
>类型别名 :=> 真假
>toString : 任意
>类型别名 :=> 任意

class SplatMonster {
>SplatMonster : SplatMonster

    constructor(...args: string[]) { }
>args : 文字[]

    roar(name: string, ...args: number[]) { }
>roar : (name: 文字, ...args: 数字[]) => 无值
>name : 文字
>类型别名 :=> 文字
>args : 数字[]
}


function foo() { return true; }
>foo : () => 真假
>true : 为真
>类型别名 :=> 为真

class PrototypeMonster {
>PrototypeMonster : PrototypeMonster

    age: number = 1;
>age : 数字
>类型别名 :=> 数字
>1 : 1

    name: string;
>name : 文字
>类型别名 :=> 文字

    b = foo();
>b : 真假
>类型别名 :=> 真假
>foo() : 真假
>类型别名 :=> 真假
>foo : () => 真假
}

class SuperParent {
>SuperParent : SuperParent

    constructor(a: number) {
>a : 数字
>类型别名 :=> 数字

    }

    b(b: string) {
>b : (b: 文字) => 无值
>b : 文字
>类型别名 :=> 文字

    }

    c() {
>c : () => 无值

    }
}

class SuperChild extends SuperParent {
>SuperChild : SuperChild
>SuperParent : SuperParent

    constructor() {
        super(1);
>super(1) : 无值
>类型别名 :=> 无值
>super : 类为 SuperParent
>1 : 1
    }

    b() {
>b : () => 无值

        super.b('str');
>super.b('str') : 无值
>类型别名 :=> 无值
>super.b : (b: 文字) => 无值
>super : SuperParent
>b : (b: 文字) => 无值
>'str' : "str"
    }

    c() {
>c : () => 无值

        super.c();
>super.c() : 无值
>类型别名 :=> 无值
>super.c : () => 无值
>super : SuperParent
>c : () => 无值
    }
}

class Statics {
>Statics : Statics

    static foo = 1;
>foo : 数字
>类型别名 :=> 数字
>1 : 1

    static bar: string;
>bar : 文字
>类型别名 :=> 文字

    static baz() {
>baz : () => 文字

        return "";
>"" : ""
    }
}

var stat = new Statics();
>stat : Statics
>new Statics() : Statics
>Statics : 类为 Statics

interface IFoo {
>IFoo : IFoo

    x: number;
>x : 数字
>类型别名 :=> 数字

    z: string;
>z : 文字
>类型别名 :=> 文字
}

class ImplementsInterface implements IFoo {
>ImplementsInterface : ImplementsInterface
>IFoo : IFoo

    public x: number;
>x : 数字
>类型别名 :=> 数字

    public z: string;
>z : 文字
>类型别名 :=> 文字

    constructor() {
        this.x = 1;
>this.x = 1 : 1
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>1 : 1

        this.z = "foo";
>this.z = "foo" : "foo"
>this.z : 文字
>类型别名 :=> 文字
>this : 本体
>z : 文字
>类型别名 :=> 文字
>"foo" : "foo"
    }
}

class Visibility {
>Visibility : Visibility

    public foo() { }
>foo : () => 无值

    private bar() { }
>bar : () => 无值

    private x: number;
>x : 数字
>类型别名 :=> 数字

    public y: number;
>y : 数字
>类型别名 :=> 数字

    public z: number;
>z : 数字
>类型别名 :=> 数字

    constructor() {
        this.x = 1;
>this.x = 1 : 1
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>1 : 1

        this.y = 2;
>this.y = 2 : 2
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字
>2 : 2
    }
}

class BaseClassWithConstructor {
>BaseClassWithConstructor : BaseClassWithConstructor

    constructor(public x: number, public s: string) { }
>x : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
}

// used to test codegen
class ChildClassWithoutConstructor extends BaseClassWithConstructor { }
>ChildClassWithoutConstructor : ChildClassWithoutConstructor
>BaseClassWithConstructor : BaseClassWithConstructor


var ccwc = new ChildClassWithoutConstructor(1, "s");
>ccwc : ChildClassWithoutConstructor
>new ChildClassWithoutConstructor(1, "s") : ChildClassWithoutConstructor
>ChildClassWithoutConstructor : 类为 ChildClassWithoutConstructor
>1 : 1
>"s" : "s"


