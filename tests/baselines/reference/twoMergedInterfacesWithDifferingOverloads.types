=== tests/cases/conformance/interfaces/declarationMerging/twoMergedInterfacesWithDifferingOverloads.ts ===
// interfaces that merge must not have members that conflict

interface A {
>A : A

    foo(x: number): number;
>foo : { (x: 数字): 数字; (x: 文字): 文字; (x: Date): Date; }
>x : 数字
>类型别名 :=> 数字

    foo(x: string): string;
>foo : { (x: 数字): 数字; (x: 文字): 文字; (x: Date): Date; }
>x : 文字
>类型别名 :=> 文字
}

interface A {
>A : A

    foo(x: Date): Date;
>foo : { (x: 数字): 数字; (x: 文字): 文字; (x: Date): Date; }
>x : Date
>Date : Date
>Date : Date
}

interface B<T> {
>B : B<T>
>T : T

    foo(x: T): number;
>foo : { (x: T): 数字; (x: 文字): 文字; (x: T): Date; (x: Date): 文字; }
>x : T
>T : T

    foo(x: string): string;
>foo : { (x: T): 数字; (x: 文字): 文字; (x: T): Date; (x: Date): 文字; }
>x : 文字
>类型别名 :=> 文字
}

interface B<T> {
>B : B<T>
>T : T

    foo(x: T): Date;
>foo : { (x: T): 数字; (x: 文字): 文字; (x: T): Date; (x: Date): 文字; }
>x : T
>T : T
>Date : Date

    foo(x: Date): string;
>foo : { (x: T): 数字; (x: 文字): 文字; (x: T): Date; (x: Date): 文字; }
>x : Date
>Date : Date
}

var b: B<boolean>;
>b : B<真假>
>B : B<T>

var r = b.foo(true); // returns Date
>r : Date
>b.foo(true) : Date
>b.foo : { (x: 真假): 数字; (x: 文字): 文字; (x: 真假): Date; (x: Date): 文字; }
>b : B<真假>
>foo : { (x: 真假): 数字; (x: 文字): 文字; (x: 真假): Date; (x: Date): 文字; }
>true : 为真
>类型别名 :=> 为真

// add generic overload
interface C<T, U> {
>C : C<T, U>
>T : T
>U : U

    foo(x: T, y: U): string;
>foo : { (x: T, y: U): 文字; (x: 文字, y: 文字): 数字; <W>(x: W, y: W): W; }
>x : T
>T : T
>y : U
>U : U

    foo(x: string, y: string): number;
>foo : { (x: T, y: U): 文字; (x: 文字, y: 文字): 数字; <W>(x: W, y: W): W; }
>x : 文字
>类型别名 :=> 文字
>y : 文字
>类型别名 :=> 文字
}

interface C<T, U> {
>C : C<T, U>
>T : T
>U : U

    foo<W>(x: W, y: W): W;
>foo : { (x: T, y: U): 文字; (x: 文字, y: 文字): 数字; <W>(x: W, y: W): W; }
>W : W
>x : W
>W : W
>y : W
>W : W
>W : W
}

var c: C<boolean, Date>;
>c : C<真假, Date>
>C : C<T, U>
>Date : Date

var r2 = c.foo(1, 2); // number
>r2 : 数字
>类型别名 :=> 数字
>c.foo(1, 2) : 1 | 2
>c.foo : { (x: 真假, y: Date): 文字; (x: 文字, y: 文字): 数字; <W>(x: W, y: W): W; }
>c : C<真假, Date>
>foo : { (x: 真假, y: Date): 文字; (x: 文字, y: 文字): 数字; <W>(x: W, y: W): W; }
>1 : 1
>2 : 2

// add generic overload that would be ambiguous
interface D<T, U> {
>D : D<T, U>
>T : T
>U : U

    a: T;
>a : T
>T : T

    b: U;
>b : U
>U : U

    foo<A>(x: A, y: A): U;
>foo : { <A>(x: A, y: A): U; <W>(x: W, y: W): T; }
>A : A
>x : A
>A : A
>y : A
>A : A
>U : U
}

interface D<T, U> {
>D : D<T, U>
>T : T
>U : U

    foo<W>(x: W, y: W): T;
>foo : { <A>(x: A, y: A): U; <W>(x: W, y: W): T; }
>W : W
>x : W
>W : W
>y : W
>W : W
>T : T
}

var d: D<boolean, Date>;
>d : D<真假, Date>
>D : D<T, U>
>Date : Date

var r3 = d.foo(1, 1); // boolean, last definition wins
>r3 : 真假
>类型别名 :=> 真假
>d.foo(1, 1) : 真假
>类型别名 :=> 真假
>d.foo : { <A>(x: A, y: A): Date; <W>(x: W, y: W): 真假; }
>d : D<真假, Date>
>foo : { <A>(x: A, y: A): Date; <W>(x: W, y: W): 真假; }
>1 : 1
>1 : 1

