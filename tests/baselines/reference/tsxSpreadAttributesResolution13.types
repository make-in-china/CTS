=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : typeof React

interface ComponentProps {
>ComponentProps : ComponentProps

    property1: string;
>property1 : string
>类型别名 :=> 文字

    property2: number;
>property2 : number
>类型别名 :=> 数字
}

export default function Component(props: ComponentProps) {
>Component : (props: ComponentProps) => JSX.Element
>props : ComponentProps
>ComponentProps : ComponentProps

    let condition1: boolean;
>condition1 : boolean
>类型别名 :=> 真假

    if (condition1) {
>condition1 : boolean
>类型别名 :=> 真假

        return (
>(            <ChildComponent {...props} />        ) : JSX.Element

            <ChildComponent {...props} />
><ChildComponent {...props} /> : JSX.Element
>ChildComponent : ({ property1 }: AnotherComponentProps) => JSX.Element
>props : ComponentProps

        );
    }
    else {
        return (<ChildComponent {...props} property1="NewString" />);
>(<ChildComponent {...props} property1="NewString" />) : JSX.Element
><ChildComponent {...props} property1="NewString" /> : JSX.Element
>ChildComponent : ({ property1 }: AnotherComponentProps) => JSX.Element
>props : ComponentProps
>property1 : string
>类型别名 :=> 文字
    }
}

interface AnotherComponentProps {
>AnotherComponentProps : AnotherComponentProps

    property1: string;
>property1 : string
>类型别名 :=> 文字
}

function ChildComponent({ property1 }: AnotherComponentProps) {
>ChildComponent : ({ property1 }: AnotherComponentProps) => JSX.Element
>property1 : string
>类型别名 :=> 文字
>AnotherComponentProps : AnotherComponentProps

    return (
>(        <span>{property1}</span>    ) : JSX.Element

        <span>{property1}</span>
><span>{property1}</span> : JSX.Element
>span : any
>类型别名 :=> 任意
>property1 : string
>类型别名 :=> 文字
>span : any
>类型别名 :=> 任意

    );
}
