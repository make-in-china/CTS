=== tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithAnyOtherType.ts ===
// ! operator on any type

var ANY: any;
>ANY : any
>类型别名 :=> 任意

var ANY1;
>ANY1 : any
>类型别名 :=> 任意

var ANY2: any[] = ["", ""];
>ANY2 : any[]
>["", ""] : string[]
>"" : ""
>"" : ""

var obj: () => {}
>obj : () => {}

var obj1 = { x: "", y: () => { }};
>obj1 : { x: string; y: () => void; }
>{ x: "", y: () => { }} : { x: string; y: () => void; }
>x : string
>类型别名 :=> 文字
>"" : ""
>y : () => void
>() => { } : () => void

function foo(): any {
>foo : () => any

    var a;
>a : any
>类型别名 :=> 任意

    return a;
>a : any
>类型别名 :=> 任意
}
class A {
>A : A

    public a: any;
>a : any
>类型别名 :=> 任意

    static foo() {
>foo : () => any

        var a;
>a : any
>类型别名 :=> 任意

        return a;
>a : any
>类型别名 :=> 任意
    }
}
module M {
>M : typeof M

    export var n: any;
>n : any
>类型别名 :=> 任意
}
var objA = new A();
>objA : A
>new A() : A
>A : typeof A

// any type var
var ResultIsBoolean1 = !ANY1;
>ResultIsBoolean1 : boolean
>类型别名 :=> 真假
>!ANY1 : boolean
>类型别名 :=> 真假
>ANY1 : any
>类型别名 :=> 任意

var ResultIsBoolean2 = !ANY2;
>ResultIsBoolean2 : boolean
>类型别名 :=> 真假
>!ANY2 : boolean
>类型别名 :=> 真假
>ANY2 : any[]

var ResultIsBoolean3 = !A;
>ResultIsBoolean3 : boolean
>类型别名 :=> 真假
>!A : boolean
>类型别名 :=> 真假
>A : typeof A

var ResultIsBoolean4 = !M;
>ResultIsBoolean4 : boolean
>类型别名 :=> 真假
>!M : boolean
>类型别名 :=> 真假
>M : typeof M

var ResultIsBoolean5 = !obj;
>ResultIsBoolean5 : boolean
>类型别名 :=> 真假
>!obj : boolean
>类型别名 :=> 真假
>obj : () => {}

var ResultIsBoolean6 = !obj1;
>ResultIsBoolean6 : boolean
>类型别名 :=> 真假
>!obj1 : boolean
>类型别名 :=> 真假
>obj1 : { x: string; y: () => void; }

// any type literal
var ResultIsBoolean7 = !undefined;
>ResultIsBoolean7 : boolean
>类型别名 :=> 真假
>!undefined : true
>类型别名 :=> 为真
>undefined : undefined
>类型别名 :=> 未定

var ResultIsBoolean8 = !null;
>ResultIsBoolean8 : boolean
>类型别名 :=> 真假
>!null : true
>类型别名 :=> 为真
>null : null
>类型别名 :=> 空值

// any type expressions
var ResultIsBoolean9 = !ANY2[0];
>ResultIsBoolean9 : boolean
>类型别名 :=> 真假
>!ANY2[0] : boolean
>类型别名 :=> 真假
>ANY2[0] : any
>类型别名 :=> 任意
>ANY2 : any[]
>0 : 0

var ResultIsBoolean10 = !obj1.x;
>ResultIsBoolean10 : boolean
>类型别名 :=> 真假
>!obj1.x : boolean
>类型别名 :=> 真假
>obj1.x : string
>类型别名 :=> 文字
>obj1 : { x: string; y: () => void; }
>x : string
>类型别名 :=> 文字

var ResultIsBoolean11 = !obj1.y;
>ResultIsBoolean11 : boolean
>类型别名 :=> 真假
>!obj1.y : boolean
>类型别名 :=> 真假
>obj1.y : () => void
>obj1 : { x: string; y: () => void; }
>y : () => void

var ResultIsBoolean12 = !objA.a;
>ResultIsBoolean12 : boolean
>类型别名 :=> 真假
>!objA.a : boolean
>类型别名 :=> 真假
>objA.a : any
>类型别名 :=> 任意
>objA : A
>a : any
>类型别名 :=> 任意

var ResultIsBoolean13 = !M.n;
>ResultIsBoolean13 : boolean
>类型别名 :=> 真假
>!M.n : boolean
>类型别名 :=> 真假
>M.n : any
>类型别名 :=> 任意
>M : typeof M
>n : any
>类型别名 :=> 任意

var ResultIsBoolean14 = !foo();
>ResultIsBoolean14 : boolean
>类型别名 :=> 真假
>!foo() : boolean
>类型别名 :=> 真假
>foo() : any
>类型别名 :=> 任意
>foo : () => any

var ResultIsBoolean15 = !A.foo();
>ResultIsBoolean15 : boolean
>类型别名 :=> 真假
>!A.foo() : boolean
>类型别名 :=> 真假
>A.foo() : any
>类型别名 :=> 任意
>A.foo : () => any
>A : typeof A
>foo : () => any

var ResultIsBoolean16 = !(ANY + ANY1);
>ResultIsBoolean16 : boolean
>类型别名 :=> 真假
>!(ANY + ANY1) : boolean
>类型别名 :=> 真假
>(ANY + ANY1) : any
>类型别名 :=> 任意
>ANY + ANY1 : any
>类型别名 :=> 任意
>ANY : any
>类型别名 :=> 任意
>ANY1 : any
>类型别名 :=> 任意

var ResultIsBoolean17 = !(null + undefined);
>ResultIsBoolean17 : boolean
>类型别名 :=> 真假
>!(null + undefined) : boolean
>类型别名 :=> 真假
>(null + undefined) : any
>类型别名 :=> 任意
>null + undefined : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>undefined : undefined
>类型别名 :=> 未定

var ResultIsBoolean18 = !(null + null);
>ResultIsBoolean18 : boolean
>类型别名 :=> 真假
>!(null + null) : boolean
>类型别名 :=> 真假
>(null + null) : any
>类型别名 :=> 任意
>null + null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

var ResultIsBoolean19 = !(undefined + undefined);
>ResultIsBoolean19 : boolean
>类型别名 :=> 真假
>!(undefined + undefined) : boolean
>类型别名 :=> 真假
>(undefined + undefined) : any
>类型别名 :=> 任意
>undefined + undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

// multiple ! operators
var ResultIsBoolean20 = !!ANY;
>ResultIsBoolean20 : boolean
>类型别名 :=> 真假
>!!ANY : boolean
>类型别名 :=> 真假
>!ANY : boolean
>类型别名 :=> 真假
>ANY : any
>类型别名 :=> 任意

var ResultIsBoolean21 = !!!(ANY + ANY1);
>ResultIsBoolean21 : boolean
>类型别名 :=> 真假
>!!!(ANY + ANY1) : boolean
>类型别名 :=> 真假
>!!(ANY + ANY1) : boolean
>类型别名 :=> 真假
>!(ANY + ANY1) : boolean
>类型别名 :=> 真假
>(ANY + ANY1) : any
>类型别名 :=> 任意
>ANY + ANY1 : any
>类型别名 :=> 任意
>ANY : any
>类型别名 :=> 任意
>ANY1 : any
>类型别名 :=> 任意

// miss assignment operators
!ANY;
>!ANY : boolean
>类型别名 :=> 真假
>ANY : any
>类型别名 :=> 任意

!ANY1;
>!ANY1 : boolean
>类型别名 :=> 真假
>ANY1 : any
>类型别名 :=> 任意

!ANY2[0];
>!ANY2[0] : boolean
>类型别名 :=> 真假
>ANY2[0] : any
>类型别名 :=> 任意
>ANY2 : any[]
>0 : 0

!ANY, ANY1;
>!ANY, ANY1 : any
>类型别名 :=> 任意
>!ANY : boolean
>类型别名 :=> 真假
>ANY : any
>类型别名 :=> 任意
>ANY1 : any
>类型别名 :=> 任意

!objA.a;
>!objA.a : boolean
>类型别名 :=> 真假
>objA.a : any
>类型别名 :=> 任意
>objA : A
>a : any
>类型别名 :=> 任意

!M.n;
>!M.n : boolean
>类型别名 :=> 真假
>M.n : any
>类型别名 :=> 任意
>M : typeof M
>n : any
>类型别名 :=> 任意

