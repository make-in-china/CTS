=== tests/cases/compiler/tooFewArgumentsInGenericFunctionTypedArgument.ts ===
interface Collection<T, U> {
>Collection : Collection<T, U>
>T : T
>U : U

    length: number;
>length : 数字
>类型别名 :=> 数字

    add(x: T, y: U): void;
>add : (x: T, y: U) => 无值
>x : T
>T : T
>y : U
>U : U

    remove(x: T, y: U): boolean;
>remove : (x: T, y: U) => 真假
>x : T
>T : T
>y : U
>U : U
}
interface Combinators {
>Combinators : Combinators

    map<T, U, V>(c: Collection<T,U>, f: (x: T, y: U) => V): Collection<T, V>;
>map : { <T, U, V>(c: Collection<T, U>, f: (x: T, y: U) => V): Collection<T, V>; <T, U>(c: Collection<T, U>, f: (x: T, y: U) => 任意): Collection<任意, 任意>; }
>T : T
>U : U
>V : V
>c : Collection<T, U>
>Collection : Collection<T, U>
>T : T
>U : U
>f : (x: T, y: U) => V
>x : T
>T : T
>y : U
>U : U
>V : V
>Collection : Collection<T, U>
>T : T
>V : V

    map<T, U>(c: Collection<T,U>, f: (x: T, y: U) => any): Collection<any, any>;
>map : { <T, U, V>(c: Collection<T, U>, f: (x: T, y: U) => V): Collection<T, V>; <T, U>(c: Collection<T, U>, f: (x: T, y: U) => 任意): Collection<任意, 任意>; }
>T : T
>U : U
>c : Collection<T, U>
>Collection : Collection<T, U>
>T : T
>U : U
>f : (x: T, y: U) => 任意
>x : T
>T : T
>y : U
>U : U
>Collection : Collection<T, U>
}
var c2: Collection<number, string>;
>c2 : Collection<数字, 文字>
>Collection : Collection<T, U>

var _: Combinators;
>_ : Combinators
>Combinators : Combinators

var r1a = _.map(c2, (x) => { return x.toFixed() }); 
>r1a : Collection<数字, 文字>
>_.map(c2, (x) => { return x.toFixed() }) : Collection<数字, 文字>
>_.map : { <T, U, V>(c: Collection<T, U>, f: (x: T, y: U) => V): Collection<T, V>; <T, U>(c: Collection<T, U>, f: (x: T, y: U) => 任意): Collection<任意, 任意>; }
>_ : Combinators
>map : { <T, U, V>(c: Collection<T, U>, f: (x: T, y: U) => V): Collection<T, V>; <T, U>(c: Collection<T, U>, f: (x: T, y: U) => 任意): Collection<任意, 任意>; }
>c2 : Collection<数字, 文字>
>(x) => { return x.toFixed() } : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>x.toFixed() : 文字
>类型别名 :=> 文字
>x.toFixed : (fractionDigits?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

var rf1 = (x: number) => { return x.toFixed() };
>rf1 : (x: 数字) => 文字
>(x: number) => { return x.toFixed() } : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>x.toFixed() : 文字
>类型别名 :=> 文字
>x.toFixed : (fractionDigits?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

var r1b = _.map(c2, rf1); 
>r1b : Collection<数字, 文字>
>_.map(c2, rf1) : Collection<数字, 文字>
>_.map : { <T, U, V>(c: Collection<T, U>, f: (x: T, y: U) => V): Collection<T, V>; <T, U>(c: Collection<T, U>, f: (x: T, y: U) => 任意): Collection<任意, 任意>; }
>_ : Combinators
>map : { <T, U, V>(c: Collection<T, U>, f: (x: T, y: U) => V): Collection<T, V>; <T, U>(c: Collection<T, U>, f: (x: T, y: U) => 任意): Collection<任意, 任意>; }
>c2 : Collection<数字, 文字>
>rf1 : (x: 数字) => 文字


