=== tests/cases/conformance/expressions/propertyAccess/propertyAccess.ts ===
class A {
>A : A

    a: number;
>a : number
>类型别名 :=> 数字
}
class B extends A {
>B : B
>A : A

    b: number;
>b : number
>类型别名 :=> 数字
}
enum Compass {
>Compass : Compass

    North, South, East, West
>North : Compass.North
>South : Compass.South
>East : Compass.East
>West : Compass.West
}

var numIndex: { [n: number]: string } = { 3: 'three', 'three': 'three' };
>numIndex : { [n: number]: string; }
>n : number
>类型别名 :=> 数字
>{ 3: 'three', 'three': 'three' } : { 3: string; 'three': string; }
>'three' : "three"
>'three' : "three"

var strIndex: { [n: string]: Compass } = { 'N': Compass.North, 'E': Compass.East };
>strIndex : { [n: string]: Compass; }
>n : string
>类型别名 :=> 文字
>Compass : Compass
>{ 'N': Compass.North, 'E': Compass.East } : { 'N': Compass.North; 'E': Compass.East; }
>Compass.North : Compass.North
>Compass : typeof Compass
>North : Compass.North
>Compass.East : Compass.East
>Compass : typeof Compass
>East : Compass.East

var bothIndex:
>bothIndex : { [n: string]: A; [m: number]: B; }
    {
        [n: string]: A;
>n : string
>类型别名 :=> 文字
>A : A

        [m: number]: B;
>m : number
>类型别名 :=> 数字
>B : B

    };

function noIndex() { }
>noIndex : () => void

var obj = {
>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
>{    10: 'ten',    x: 'hello',    y: 32,    z: { n: 'world', m: 15, o: () => false },    'literal property': 100} : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }

    10: 'ten',
>'ten' : "ten"

    x: 'hello',
>x : string
>类型别名 :=> 文字
>'hello' : "hello"

    y: 32,
>y : number
>类型别名 :=> 数字
>32 : 32

    z: { n: 'world', m: 15, o: () => false },
>z : { n: string; m: number; o: () => boolean; }
>{ n: 'world', m: 15, o: () => false } : { n: string; m: number; o: () => boolean; }
>n : string
>类型别名 :=> 文字
>'world' : "world"
>m : number
>类型别名 :=> 数字
>15 : 15
>o : () => boolean
>() => false : () => boolean
>false : false
>类型别名 :=> 为假

    'literal property': 100
>100 : 100

};
var anyVar: any = {};
>anyVar : any
>类型别名 :=> 任意
>{} : {}

var stringOrNumber: string | number;
>stringOrNumber : string | number

var someObject: { name: string };
>someObject : { name: string; }
>name : string
>类型别名 :=> 文字

// Assign to a property access
obj.y = 4;
>obj.y = 4 : 4
>obj.y : number
>类型别名 :=> 数字
>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
>y : number
>类型别名 :=> 数字
>4 : 4

// Property access on value of type 'any'
anyVar.x = anyVar.y = obj.x = anyVar.z;
>anyVar.x = anyVar.y = obj.x = anyVar.z : any
>类型别名 :=> 任意
>anyVar.x : any
>类型别名 :=> 任意
>anyVar : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>anyVar.y = obj.x = anyVar.z : any
>类型别名 :=> 任意
>anyVar.y : any
>类型别名 :=> 任意
>anyVar : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>obj.x = anyVar.z : any
>类型别名 :=> 任意
>obj.x : string
>类型别名 :=> 文字
>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
>x : string
>类型别名 :=> 文字
>anyVar.z : any
>类型别名 :=> 任意
>anyVar : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

// Dotted property access of property that exists
var aa = obj.x;
>aa : string
>类型别名 :=> 文字
>obj.x : string
>类型别名 :=> 文字
>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
>x : string
>类型别名 :=> 文字

// Dotted property access of property that exists on value's apparent type
var bb = obj.hasOwnProperty;
>bb : (v: string) => boolean
>obj.hasOwnProperty : (v: string) => boolean
>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
>hasOwnProperty : (v: string) => boolean

// Dotted property access of property that doesn't exist on value's apparent type
var cc = obj.qqq; // error
>cc : any
>类型别名 :=> 任意
>obj.qqq : any
>类型别名 :=> 任意
>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
>qqq : any
>类型别名 :=> 任意

// Bracket notation property access using string literal value on type with property of that literal name
var dd = obj['literal property'];
>dd : number
>类型别名 :=> 数字
>obj['literal property'] : number
>类型别名 :=> 数字
>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
>'literal property' : "literal property"

var dd: number;
>dd : number
>类型别名 :=> 数字

// Bracket notation property access using string literal value on type without property of that literal name
var ee = obj['wa wa wa wa wa'];
>ee : any
>类型别名 :=> 任意
>obj['wa wa wa wa wa'] : any
>类型别名 :=> 任意
>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
>'wa wa wa wa wa' : "wa wa wa wa wa"

var ee: any;
>ee : any
>类型别名 :=> 任意

// Bracket notation property access using numeric string literal value on type with property of that literal name
var ff = obj['10'];
>ff : string
>类型别名 :=> 文字
>obj['10'] : string
>类型别名 :=> 文字
>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
>'10' : "10"

var ff: string;
>ff : string
>类型别名 :=> 文字

// Bracket notation property access using numeric string literal value on type without property of that literal name
var gg = obj['1'];
>gg : any
>类型别名 :=> 任意
>obj['1'] : any
>类型别名 :=> 任意
>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
>'1' : "1"

var gg: any;
>gg : any
>类型别名 :=> 任意

// Bracket notation property access using numeric value on type with numeric index signature
var hh = numIndex[3.0];
>hh : string
>类型别名 :=> 文字
>numIndex[3.0] : string
>类型别名 :=> 文字
>numIndex : { [n: number]: string; }
>3.0 : 3

var hh: string;
>hh : string
>类型别名 :=> 文字

// Bracket notation property access using enum value on type with numeric index signature
var ii = numIndex[Compass.South];
>ii : string
>类型别名 :=> 文字
>numIndex[Compass.South] : string
>类型别名 :=> 文字
>numIndex : { [n: number]: string; }
>Compass.South : Compass.South
>Compass : typeof Compass
>South : Compass.South

var ii: string;
>ii : string
>类型别名 :=> 文字

// Bracket notation property access using value of type 'any' on type with numeric index signature
var jj = numIndex[anyVar];
>jj : string
>类型别名 :=> 文字
>numIndex[anyVar] : string
>类型别名 :=> 文字
>numIndex : { [n: number]: string; }
>anyVar : any
>类型别名 :=> 任意

var jj: string;
>jj : string
>类型别名 :=> 文字

// Bracket notation property access using string value on type with numeric index signature
var kk = numIndex['what'];
>kk : any
>类型别名 :=> 任意
>numIndex['what'] : any
>类型别名 :=> 任意
>numIndex : { [n: number]: string; }
>'what' : "what"

var kk: any;
>kk : any
>类型别名 :=> 任意

// Bracket notation property access using value of other type on type with numeric index signature and no string index signature
var ll = numIndex[someObject]; // Error
>ll : any
>类型别名 :=> 任意
>numIndex[someObject] : any
>类型别名 :=> 任意
>numIndex : { [n: number]: string; }
>someObject : { name: string; }

// Bracket notation property access using string value on type with string index signature and no numeric index signature
var mm = strIndex['N'];
>mm : Compass
>strIndex['N'] : Compass
>strIndex : { [n: string]: Compass; }
>'N' : "N"

var mm: Compass;
>mm : Compass
>Compass : Compass

var mm2 = strIndex['zzz'];
>mm2 : Compass
>strIndex['zzz'] : Compass
>strIndex : { [n: string]: Compass; }
>'zzz' : "zzz"

var mm2: Compass;
>mm2 : Compass
>Compass : Compass

// Bracket notation property access using numeric value on type with string index signature and no numeric index signature
var nn = strIndex[10];
>nn : Compass
>strIndex[10] : Compass
>strIndex : { [n: string]: Compass; }
>10 : 10

var nn: Compass;
>nn : Compass
>Compass : Compass

// Bracket notation property access using enum value on type with string index signature and no numeric index signature
var oo = strIndex[Compass.East];
>oo : Compass
>strIndex[Compass.East] : Compass
>strIndex : { [n: string]: Compass; }
>Compass.East : Compass.East
>Compass : typeof Compass
>East : Compass.East

var oo: Compass;
>oo : Compass
>Compass : Compass

// Bracket notation property access using value of type 'any' on type with string index signature and no numeric index signature
var pp = strIndex[<any>null];
>pp : Compass
>strIndex[<any>null] : Compass
>strIndex : { [n: string]: Compass; }
><any>null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

var pp: Compass;
>pp : Compass
>Compass : Compass

// Bracket notation property access using numeric value on type with no index signatures
var qq = noIndex[123];
>qq : any
>类型别名 :=> 任意
>noIndex[123] : any
>类型别名 :=> 任意
>noIndex : () => void
>123 : 123

var qq: any;
>qq : any
>类型别名 :=> 任意

// Bracket notation property access using string value on type with no index signatures
var rr = noIndex['zzzz'];
>rr : any
>类型别名 :=> 任意
>noIndex['zzzz'] : any
>类型别名 :=> 任意
>noIndex : () => void
>'zzzz' : "zzzz"

var rr: any;
>rr : any
>类型别名 :=> 任意

// Bracket notation property access using enum value on type with no index signatures
var ss = noIndex[Compass.South];
>ss : any
>类型别名 :=> 任意
>noIndex[Compass.South] : any
>类型别名 :=> 任意
>noIndex : () => void
>Compass.South : Compass.South
>Compass : typeof Compass
>South : Compass.South

var ss: any;
>ss : any
>类型别名 :=> 任意

// Bracket notation property access using value of type 'any' on type with no index signatures
var tt = noIndex[<any>null];
>tt : any
>类型别名 :=> 任意
>noIndex[<any>null] : any
>类型别名 :=> 任意
>noIndex : () => void
><any>null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

var tt: any;
>tt : any
>类型别名 :=> 任意

// Bracket notation property access using values of other types on type with no index signatures
var uu = noIndex[someObject]; // Error
>uu : any
>类型别名 :=> 任意
>noIndex[someObject] : any
>类型别名 :=> 任意
>noIndex : () => void
>someObject : { name: string; }

// Bracket notation property access using numeric value on type with numeric index signature and string index signature
var vv = noIndex[32];
>vv : any
>类型别名 :=> 任意
>noIndex[32] : any
>类型别名 :=> 任意
>noIndex : () => void
>32 : 32

var vv: any;
>vv : any
>类型别名 :=> 任意

// Bracket notation property access using enum value on type with numeric index signature and string index signature
var ww = bothIndex[Compass.East];
>ww : B
>bothIndex[Compass.East] : B
>bothIndex : { [n: string]: A; [m: number]: B; }
>Compass.East : Compass.East
>Compass : typeof Compass
>East : Compass.East

var ww: B;
>ww : B
>B : B

// Bracket notation property access using value of type 'any' on type with numeric index signature and string index signature
var xx = bothIndex[<any>null];
>xx : B
>bothIndex[<any>null] : B
>bothIndex : { [n: string]: A; [m: number]: B; }
><any>null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

var xx: B;
>xx : B
>B : B

// Bracket notation property access using string value on type with numeric index signature and string index signature
var yy = bothIndex['foo'];
>yy : A
>bothIndex['foo'] : A
>bothIndex : { [n: string]: A; [m: number]: B; }
>'foo' : "foo"

var yy: A;
>yy : A
>A : A

// Bracket notation property access using numeric string value on type with numeric index signature and string index signature
var zz = bothIndex['1.0'];
>zz : A
>bothIndex['1.0'] : A
>bothIndex : { [n: string]: A; [m: number]: B; }
>'1.0' : "1.0"

var zz: A;
>zz : A
>A : A

// Bracket notation property access using value of other type on type with numeric index signature and no string index signature and string index signature
var zzzz = bothIndex[someObject]; // Error
>zzzz : any
>类型别名 :=> 任意
>bothIndex[someObject] : any
>类型别名 :=> 任意
>bothIndex : { [n: string]: A; [m: number]: B; }
>someObject : { name: string; }

var x1 = numIndex[stringOrNumber];
>x1 : any
>类型别名 :=> 任意
>numIndex[stringOrNumber] : any
>类型别名 :=> 任意
>numIndex : { [n: number]: string; }
>stringOrNumber : string | number

var x1: any;
>x1 : any
>类型别名 :=> 任意

var x2 = strIndex[stringOrNumber];
>x2 : Compass
>strIndex[stringOrNumber] : Compass
>strIndex : { [n: string]: Compass; }
>stringOrNumber : string | number

var x2: Compass;
>x2 : Compass
>Compass : Compass

var x3 = bothIndex[stringOrNumber];
>x3 : A | B
>bothIndex[stringOrNumber] : A | B
>bothIndex : { [n: string]: A; [m: number]: B; }
>stringOrNumber : string | number

var x3: A;
>x3 : A | B
>A : A

