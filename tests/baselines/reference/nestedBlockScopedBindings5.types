=== tests/cases/compiler/nestedBlockScopedBindings5.ts ===
function a0() {
>a0 : () => void

    for (let x in []) {
>x : string
>类型别名 :=> 文字
>[] : undefined[]

        x = x + 1;
>x = x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>1 : 1
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2
    }
}

function a1() {
>a1 : () => void

    for (let x in []) {
>x : string
>类型别名 :=> 文字
>[] : undefined[]

        x = x + 1;
>x = x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>1 : 1

        () => x;
>() => x : () => string
>x : string
>类型别名 :=> 文字
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2
    }
}

function a2() {
>a2 : () => void

    for (let x in []) {
>x : string
>类型别名 :=> 文字
>[] : undefined[]

        x = x + 1;
>x = x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>1 : 1
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2

        () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意
    }
}


function a3() {
>a3 : () => void

    for (let x in []) {
>x : string
>类型别名 :=> 文字
>[] : undefined[]

        x = x + 1;
>x = x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>1 : 1

        () => x;
>() => x : () => string
>x : string
>类型别名 :=> 文字
    }
    for (let x;false;) {
>x : any
>类型别名 :=> 任意
>false : false
>类型别名 :=> 为假

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2

        () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : any
>类型别名 :=> 任意

            () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意

            break;
    }
    
}

function a4() {
>a4 : () => void

    for (let x in []) {
>x : string
>类型别名 :=> 文字
>[] : undefined[]

        x = x + 1;
>x = x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>1 : 1
    }
    for (let x;false;) {
>x : any
>类型别名 :=> 任意
>false : false
>类型别名 :=> 为假

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : any
>类型别名 :=> 任意

            () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意

            break;
    }
    
}

function a5() {
>a5 : () => void

    let y;
>y : any
>类型别名 :=> 任意

    for (let x in []) {
>x : string
>类型别名 :=> 文字
>[] : undefined[]

        x = x + 1;
>x = x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>x + 1 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>1 : 1
    }
    for (let x;false;) {
>x : any
>类型别名 :=> 任意
>false : false
>类型别名 :=> 为假

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2

        () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : any
>类型别名 :=> 任意

            break;
    }
    
}
