=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfNumber.ts ===
class C { private p: string };
>C : C
>p : 文字
>类型别名 :=> 文字

var str: string;
>str : 文字
>类型别名 :=> 文字

var bool: boolean;
>bool : 真假
>类型别名 :=> 真假

var num: number;
>num : 数字
>类型别名 :=> 数字

var strOrNum: string | number;
>strOrNum : 文字 | 数字

var strOrBool: string | boolean;
>strOrBool : 文字 | 真假

var numOrBool: number | boolean
>numOrBool : 数字 | 真假

var strOrNumOrBool: string | number | boolean;
>strOrNumOrBool : 文字 | 数字 | 真假

var strOrC: string | C;
>strOrC : 文字 | C
>C : C

var numOrC: number | C;
>numOrC : 数字 | C
>C : C

var boolOrC: boolean | C;
>boolOrC : 真假 | C
>C : C

var c: C;
>c : C
>C : C

//	A type guard of the form typeof x === s, 
//  where s is a string literal with the value 'string', 'number', or 'boolean',
//  - when true, narrows the type of x to the given primitive type, or
//  - when false, removes the primitive type from the type of x.
if (typeof strOrNum === "number") {
>typeof strOrNum === "number" : 真假
>类型别名 :=> 真假
>typeof strOrNum : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNum : 文字 | 数字
>"number" : "number"

    num = strOrNum; // number
>num = strOrNum : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>strOrNum : 数字
>类型别名 :=> 数字
}
else {
    str === strOrNum; // string
>str === strOrNum : 真假
>类型别名 :=> 真假
>str : 文字
>类型别名 :=> 文字
>strOrNum : 文字
>类型别名 :=> 文字
}
if (typeof numOrBool === "number") {
>typeof numOrBool === "number" : 真假
>类型别名 :=> 真假
>typeof numOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>numOrBool : 数字 | 真假
>"number" : "number"

    num = numOrBool; // number
>num = numOrBool : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>numOrBool : 数字
>类型别名 :=> 数字
}
else {
    var x: number | boolean = numOrBool; // number | boolean
>x : 数字 | 真假
>numOrBool : 真假
>类型别名 :=> 真假
}
if (typeof strOrNumOrBool === "number") {
>typeof strOrNumOrBool === "number" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : 文字 | 数字 | 真假
>"number" : "number"

    num = strOrNumOrBool; // number
>num = strOrNumOrBool : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>strOrNumOrBool : 数字
>类型别名 :=> 数字
}
else {
    strOrBool = strOrNumOrBool; // string | boolean
>strOrBool = strOrNumOrBool : 文字 | 真假
>strOrBool : 文字 | 真假
>strOrNumOrBool : 文字 | 真假
}
if (typeof numOrC === "number") {
>typeof numOrC === "number" : 真假
>类型别名 :=> 真假
>typeof numOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>numOrC : 数字 | C
>"number" : "number"

    num = numOrC; // number
>num = numOrC : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>numOrC : 数字
>类型别名 :=> 数字
}
else {
    c = numOrC; // C
>c = numOrC : C
>c : C
>numOrC : C
}

if (typeof strOrBool === "number") {
>typeof strOrBool === "number" : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>"number" : "number"

    let y1: {} = strOrBool; // {}
>y1 : {}
>strOrBool : 不及
>类型别名 :=> 不及
}
else {
    let y2: string | boolean = strOrBool; // string | boolean
>y2 : 文字 | 真假
>strOrBool : 文字 | 真假
}

// A type guard of the form typeof x !== s, where s is a string literal,
//  - when true, narrows the type of x by typeof x === s when false, or
//  - when false, narrows the type of x by typeof x === s when true.
if (typeof strOrNum !== "number") {
>typeof strOrNum !== "number" : 真假
>类型别名 :=> 真假
>typeof strOrNum : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNum : 文字 | 数字
>"number" : "number"

    str === strOrNum; // string
>str === strOrNum : 真假
>类型别名 :=> 真假
>str : 文字
>类型别名 :=> 文字
>strOrNum : 文字
>类型别名 :=> 文字
}
else {
    num = strOrNum; // number
>num = strOrNum : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>strOrNum : 数字
>类型别名 :=> 数字
}
if (typeof numOrBool !== "number") {
>typeof numOrBool !== "number" : 真假
>类型别名 :=> 真假
>typeof numOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>numOrBool : 数字 | 真假
>"number" : "number"

    var x: number | boolean = numOrBool; // number | boolean
>x : 数字 | 真假
>numOrBool : 真假
>类型别名 :=> 真假
}
else {
    num = numOrBool; // number
>num = numOrBool : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>numOrBool : 数字
>类型别名 :=> 数字
}
if (typeof strOrNumOrBool !== "number") {
>typeof strOrNumOrBool !== "number" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : 文字 | 数字 | 真假
>"number" : "number"

    strOrBool = strOrNumOrBool; // string | boolean
>strOrBool = strOrNumOrBool : 文字 | 真假
>strOrBool : 文字 | 真假
>strOrNumOrBool : 文字 | 真假
}
else {
    num = strOrNumOrBool; // number
>num = strOrNumOrBool : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>strOrNumOrBool : 数字
>类型别名 :=> 数字
}
if (typeof numOrC !== "number") {
>typeof numOrC !== "number" : 真假
>类型别名 :=> 真假
>typeof numOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>numOrC : 数字 | C
>"number" : "number"

    c = numOrC; // C
>c = numOrC : C
>c : C
>numOrC : C
}
else {
    num = numOrC; // number
>num = numOrC : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>numOrC : 数字
>类型别名 :=> 数字
}

if (typeof strOrBool !== "number") {
>typeof strOrBool !== "number" : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>"number" : "number"

    let y1: string | boolean = strOrBool; // string | boolean
>y1 : 文字 | 真假
>strOrBool : 文字 | 真假
}
else {
    let y2: {} = strOrBool; // {}
>y2 : {}
>strOrBool : 不及
>类型别名 :=> 不及
}

