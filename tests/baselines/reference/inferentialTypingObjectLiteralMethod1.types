=== tests/cases/compiler/inferentialTypingObjectLiteralMethod1.ts ===
interface Int<T, U> {
>Int : Int<T, U>
>T : T
>U : U

    method(x: T): U;
>method : (x: T) => U
>x : T
>T : T
>U : U
}
declare function foo<T, U>(x: T, y: Int<T, U>, z: Int<U, T>): T;
>foo : <T, U>(x: T, y: Int<T, U>, z: Int<U, T>) => T
>T : T
>U : U
>x : T
>T : T
>y : Int<T, U>
>Int : Int<T, U>
>T : T
>U : U
>z : Int<U, T>
>Int : Int<T, U>
>U : U
>T : T
>T : T

foo("", { method(p1) { return p1.length } }, { method(p2) { return undefined } });
>foo("", { method(p1) { return p1.length } }, { method(p2) { return undefined } }) : 文字
>类型别名 :=> 文字
>foo : <T, U>(x: T, y: Int<T, U>, z: Int<U, T>) => T
>"" : ""
>{ method(p1) { return p1.length } } : { method(p1: 文字): 数字; }
>method : (p1: 文字) => 数字
>p1 : 文字
>类型别名 :=> 文字
>p1.length : 数字
>类型别名 :=> 数字
>p1 : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>{ method(p2) { return undefined } } : { method(p2: 数字): 任意; }
>method : (p2: 数字) => 任意
>p2 : 数字
>类型别名 :=> 数字
>undefined : 未定
>类型别名 :=> 未定

