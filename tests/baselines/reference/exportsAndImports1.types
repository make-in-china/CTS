=== tests/cases/conformance/es6/modules/t1.ts ===
var v = 1;
>v : 数字
>类型别名 :=> 数字
>1 : 1

function f() { }
>f : () => 无值

class C {
>C : C
}
interface I {
>I : I
}
enum E {
>E : E

    A, B, C
>A : E.A
>B : E.B
>C : E.C
}
const enum D {
>D : D

    A, B, C
>A : D.A
>B : D.B
>C : D.C
}
module M {
>M : 类为 M

    export var x;
>x : 任意
>类型别名 :=> 任意
}
module N {
>N : 任意
>类型别名 :=> 任意

    export interface I {
>I : I
    }
}
type T = number;
>T : 数字
>类型别名 :=> 数字

import a = M.x;
>a : 任意
>类型别名 :=> 任意
>M : 类为 M
>x : 任意
>类型别名 :=> 任意

export { v, f, C, I, E, D, M, N, T, a };
>v : 数字
>类型别名 :=> 数字
>f : () => 无值
>C : 类为 C
>I : 任意
>类型别名 :=> 任意
>E : 类为 E
>D : 类为 D
>M : 类为 M
>N : 任意
>类型别名 :=> 任意
>T : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

=== tests/cases/conformance/es6/modules/t2.ts ===
export { v, f, C, I, E, D, M, N, T, a } from "./t1";
>v : 数字
>类型别名 :=> 数字
>f : () => 无值
>C : 类为 C
>I : 任意
>类型别名 :=> 任意
>E : 类为 E
>D : 类为 D
>M : 类为 M
>N : 任意
>类型别名 :=> 任意
>T : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

=== tests/cases/conformance/es6/modules/t3.ts ===
import { v, f, C, I, E, D, M, N, T, a } from "./t1";
>v : 数字
>类型别名 :=> 数字
>f : () => 无值
>C : 类为 C
>I : 任意
>类型别名 :=> 任意
>E : 类为 E
>D : 类为 D
>M : 类为 M
>N : 任意
>类型别名 :=> 任意
>T : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

export { v, f, C, I, E, D, M, N, T, a };
>v : 数字
>类型别名 :=> 数字
>f : () => 无值
>C : 类为 C
>I : 任意
>类型别名 :=> 任意
>E : 类为 E
>D : 类为 D
>M : 类为 M
>N : 任意
>类型别名 :=> 任意
>T : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

