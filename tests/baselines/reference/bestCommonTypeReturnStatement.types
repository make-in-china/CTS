=== tests/cases/compiler/bestCommonTypeReturnStatement.ts ===
interface IPromise<T> {
>IPromise : IPromise<T>
>T : T

    then(successCallback: (promiseValue: T) => any, errorCallback?: (reason: any) => any): IPromise<any>;
>then : (successCallback: (promiseValue: T) => 任意, errorCallback?: (reason: 任意) => 任意) => IPromise<任意>
>successCallback : (promiseValue: T) => 任意
>promiseValue : T
>T : T
>errorCallback : (reason: 任意) => 任意
>reason : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
}

function f() {
>f : () => IPromise<任意>

    if (true) return b();
>true : 为真
>类型别名 :=> 为真
>b() : IPromise<无值>
>b : () => IPromise<无值>

    return d();
>d() : IPromise<任意>
>d : () => IPromise<任意>
}


function b(): IPromise<void> { return null; }
>b : () => IPromise<无值>
>IPromise : IPromise<T>
>null : 空值
>类型别名 :=> 空值

function d(): IPromise<any> { return null; }
>d : () => IPromise<任意>
>IPromise : IPromise<T>
>null : 空值
>类型别名 :=> 空值

