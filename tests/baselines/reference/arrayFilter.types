=== tests/cases/compiler/arrayFilter.ts ===
var foo = [
>foo : { name: string; }[]
>[    { name: 'bar' },    { name: null },    { name: 'baz' }] : { name: string; }[]

    { name: 'bar' },
>{ name: 'bar' } : { name: string; }
>name : string
>类型别名 :=> 文字
>'bar' : "bar"

    { name: null },
>{ name: null } : { name: null; }
>name : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

    { name: 'baz' }
>{ name: 'baz' } : { name: string; }
>name : string
>类型别名 :=> 文字
>'baz' : "baz"

]

foo.filter(x => x.name); //should accepted all possible types not only boolean! 
>foo.filter(x => x.name) : { name: string; }[]
>foo.filter : { <S extends { name: string; }>(callbackfn: (value: { name: string; }, index: number, array: { name: string; }[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: { name: string; }, index: number, array: { name: string; }[]) => any, thisArg?: any): { name: string; }[]; }
>foo : { name: string; }[]
>filter : { <S extends { name: string; }>(callbackfn: (value: { name: string; }, index: number, array: { name: string; }[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: { name: string; }, index: number, array: { name: string; }[]) => any, thisArg?: any): { name: string; }[]; }
>x => x.name : (x: { name: string; }) => string
>x : { name: string; }
>x.name : string
>类型别名 :=> 文字
>x : { name: string; }
>name : string
>类型别名 :=> 文字

