=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignaturesWithOptionalParameters.ts ===
// call signatures in derived types must have the same or fewer optional parameters as the base type

interface Base { 
>Base : Base

    a: () => number;
>a : () => 数字

    a2: (x?: number) => number;
>a2 : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    a3: (x: number) => number;
>a3 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    a4: (x: number, y?: number) => number;
>a4 : (x: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    a5: (x?: number, y?: number) => number;
>a5 : (x?: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    a6: (x: number, y: number) => number;
>a6 : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
}
var b: Base;
>b : Base
>Base : Base

var a: () => number;
>a : () => 数字

    a = () => 1 // ok, same number of required params
>a = () => 1 : () => 数字
>a : () => 数字
>() => 1 : () => 数字
>1 : 1

    a = (x?: number) => 1; // ok, same number of required params
>a = (x?: number) => 1 : (x?: 数字) => 数字
>a : () => 数字
>(x?: number) => 1 : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a = (x: number) => 1; // error, too many required params
>a = (x: number) => 1 : (x: 数字) => 数字
>a : () => 数字
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a = b.a; // ok
>a = b.a : () => 数字
>a : () => 数字
>b.a : () => 数字
>b : Base
>a : () => 数字

    a = b.a2; // ok
>a = b.a2 : (x?: 数字) => 数字
>a : () => 数字
>b.a2 : (x?: 数字) => 数字
>b : Base
>a2 : (x?: 数字) => 数字

    a = b.a3; // error
>a = b.a3 : (x: 数字) => 数字
>a : () => 数字
>b.a3 : (x: 数字) => 数字
>b : Base
>a3 : (x: 数字) => 数字

    a = b.a4; // error
>a = b.a4 : (x: 数字, y?: 数字) => 数字
>a : () => 数字
>b.a4 : (x: 数字, y?: 数字) => 数字
>b : Base
>a4 : (x: 数字, y?: 数字) => 数字

    a = b.a5; // ok
>a = b.a5 : (x?: 数字, y?: 数字) => 数字
>a : () => 数字
>b.a5 : (x?: 数字, y?: 数字) => 数字
>b : Base
>a5 : (x?: 数字, y?: 数字) => 数字

    a = b.a6; // error
>a = b.a6 : (x: 数字, y: 数字) => 数字
>a : () => 数字
>b.a6 : (x: 数字, y: 数字) => 数字
>b : Base
>a6 : (x: 数字, y: 数字) => 数字

var a2: (x?: number) => number; 
>a2 : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    a2 = () => 1; // ok, same number of required params
>a2 = () => 1 : () => 数字
>a2 : (x?: 数字) => 数字
>() => 1 : () => 数字
>1 : 1

    a2 = (x?: number) => 1; // ok, same number of required params
>a2 = (x?: number) => 1 : (x?: 数字) => 数字
>a2 : (x?: 数字) => 数字
>(x?: number) => 1 : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a2 = (x: number) => 1; // ok, same number of params
>a2 = (x: number) => 1 : (x: 数字) => 数字
>a2 : (x?: 数字) => 数字
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a2 = b.a; // ok
>a2 = b.a : () => 数字
>a2 : (x?: 数字) => 数字
>b.a : () => 数字
>b : Base
>a : () => 数字

    a2 = b.a2; // ok
>a2 = b.a2 : (x?: 数字) => 数字
>a2 : (x?: 数字) => 数字
>b.a2 : (x?: 数字) => 数字
>b : Base
>a2 : (x?: 数字) => 数字

    a2 = b.a3; // ok, same number of params
>a2 = b.a3 : (x: 数字) => 数字
>a2 : (x?: 数字) => 数字
>b.a3 : (x: 数字) => 数字
>b : Base
>a3 : (x: 数字) => 数字

    a2 = b.a4; // ok, excess params are optional in b.a3
>a2 = b.a4 : (x: 数字, y?: 数字) => 数字
>a2 : (x?: 数字) => 数字
>b.a4 : (x: 数字, y?: 数字) => 数字
>b : Base
>a4 : (x: 数字, y?: 数字) => 数字

    a2 = b.a5; // ok
>a2 = b.a5 : (x?: 数字, y?: 数字) => 数字
>a2 : (x?: 数字) => 数字
>b.a5 : (x?: 数字, y?: 数字) => 数字
>b : Base
>a5 : (x?: 数字, y?: 数字) => 数字

    a2 = b.a6; // error
>a2 = b.a6 : (x: 数字, y: 数字) => 数字
>a2 : (x?: 数字) => 数字
>b.a6 : (x: 数字, y: 数字) => 数字
>b : Base
>a6 : (x: 数字, y: 数字) => 数字

var a3: (x: number) => number; 
>a3 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    a3 = () => 1; // ok, fewer required params
>a3 = () => 1 : () => 数字
>a3 : (x: 数字) => 数字
>() => 1 : () => 数字
>1 : 1

    a3 = (x?: number) => 1; // ok, fewer required params
>a3 = (x?: number) => 1 : (x?: 数字) => 数字
>a3 : (x: 数字) => 数字
>(x?: number) => 1 : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a3 = (x: number) => 1; // ok, same number of required params
>a3 = (x: number) => 1 : (x: 数字) => 数字
>a3 : (x: 数字) => 数字
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a3 = (x: number, y: number) => 1;  // error, too many required params
>a3 = (x: number, y: number) => 1 : (x: 数字, y: 数字) => 数字
>a3 : (x: 数字) => 数字
>(x: number, y: number) => 1 : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

    a3 = b.a; // ok
>a3 = b.a : () => 数字
>a3 : (x: 数字) => 数字
>b.a : () => 数字
>b : Base
>a : () => 数字

    a3 = b.a2; // ok
>a3 = b.a2 : (x?: 数字) => 数字
>a3 : (x: 数字) => 数字
>b.a2 : (x?: 数字) => 数字
>b : Base
>a2 : (x?: 数字) => 数字

    a3 = b.a3; // ok
>a3 = b.a3 : (x: 数字) => 数字
>a3 : (x: 数字) => 数字
>b.a3 : (x: 数字) => 数字
>b : Base
>a3 : (x: 数字) => 数字

    a3 = b.a4; // ok
>a3 = b.a4 : (x: 数字, y?: 数字) => 数字
>a3 : (x: 数字) => 数字
>b.a4 : (x: 数字, y?: 数字) => 数字
>b : Base
>a4 : (x: 数字, y?: 数字) => 数字

    a3 = b.a5; // ok
>a3 = b.a5 : (x?: 数字, y?: 数字) => 数字
>a3 : (x: 数字) => 数字
>b.a5 : (x?: 数字, y?: 数字) => 数字
>b : Base
>a5 : (x?: 数字, y?: 数字) => 数字

    a3 = b.a6; // error
>a3 = b.a6 : (x: 数字, y: 数字) => 数字
>a3 : (x: 数字) => 数字
>b.a6 : (x: 数字, y: 数字) => 数字
>b : Base
>a6 : (x: 数字, y: 数字) => 数字

var a4: (x: number, y?: number) => number;
>a4 : (x: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    a4 = () => 1; // ok, fewer required params
>a4 = () => 1 : () => 数字
>a4 : (x: 数字, y?: 数字) => 数字
>() => 1 : () => 数字
>1 : 1

    a4 = (x?: number, y?: number) => 1; // ok, fewer required params
>a4 = (x?: number, y?: number) => 1 : (x?: 数字, y?: 数字) => 数字
>a4 : (x: 数字, y?: 数字) => 数字
>(x?: number, y?: number) => 1 : (x?: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

    a4 = (x: number) => 1; // ok, same number of required params
>a4 = (x: number) => 1 : (x: 数字) => 数字
>a4 : (x: 数字, y?: 数字) => 数字
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a4 = (x: number, y: number) => 1; // ok, same number of params
>a4 = (x: number, y: number) => 1 : (x: 数字, y: 数字) => 数字
>a4 : (x: 数字, y?: 数字) => 数字
>(x: number, y: number) => 1 : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

    a4 = b.a; // ok
>a4 = b.a : () => 数字
>a4 : (x: 数字, y?: 数字) => 数字
>b.a : () => 数字
>b : Base
>a : () => 数字

    a4 = b.a2; // ok
>a4 = b.a2 : (x?: 数字) => 数字
>a4 : (x: 数字, y?: 数字) => 数字
>b.a2 : (x?: 数字) => 数字
>b : Base
>a2 : (x?: 数字) => 数字

    a4 = b.a3; // ok
>a4 = b.a3 : (x: 数字) => 数字
>a4 : (x: 数字, y?: 数字) => 数字
>b.a3 : (x: 数字) => 数字
>b : Base
>a3 : (x: 数字) => 数字

    a4 = b.a4; // ok
>a4 = b.a4 : (x: 数字, y?: 数字) => 数字
>a4 : (x: 数字, y?: 数字) => 数字
>b.a4 : (x: 数字, y?: 数字) => 数字
>b : Base
>a4 : (x: 数字, y?: 数字) => 数字

    a4 = b.a5; // ok
>a4 = b.a5 : (x?: 数字, y?: 数字) => 数字
>a4 : (x: 数字, y?: 数字) => 数字
>b.a5 : (x?: 数字, y?: 数字) => 数字
>b : Base
>a5 : (x?: 数字, y?: 数字) => 数字

    a4 = b.a6; // ok, same number of params
>a4 = b.a6 : (x: 数字, y: 数字) => 数字
>a4 : (x: 数字, y?: 数字) => 数字
>b.a6 : (x: 数字, y: 数字) => 数字
>b : Base
>a6 : (x: 数字, y: 数字) => 数字

var a5: (x?: number, y?: number) => number;
>a5 : (x?: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    a5 = () => 1; // ok, fewer required params
>a5 = () => 1 : () => 数字
>a5 : (x?: 数字, y?: 数字) => 数字
>() => 1 : () => 数字
>1 : 1

    a5 = (x?: number, y?: number) => 1; // ok, fewer required params
>a5 = (x?: number, y?: number) => 1 : (x?: 数字, y?: 数字) => 数字
>a5 : (x?: 数字, y?: 数字) => 数字
>(x?: number, y?: number) => 1 : (x?: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

    a5 = (x: number) => 1; // ok, fewer params in lambda
>a5 = (x: number) => 1 : (x: 数字) => 数字
>a5 : (x?: 数字, y?: 数字) => 数字
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a5 = (x: number, y: number) => 1;  // ok, same number of params
>a5 = (x: number, y: number) => 1 : (x: 数字, y: 数字) => 数字
>a5 : (x?: 数字, y?: 数字) => 数字
>(x: number, y: number) => 1 : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

    a5 = b.a; // ok
>a5 = b.a : () => 数字
>a5 : (x?: 数字, y?: 数字) => 数字
>b.a : () => 数字
>b : Base
>a : () => 数字

    a5 = b.a2; // ok
>a5 = b.a2 : (x?: 数字) => 数字
>a5 : (x?: 数字, y?: 数字) => 数字
>b.a2 : (x?: 数字) => 数字
>b : Base
>a2 : (x?: 数字) => 数字

    a5 = b.a3; // ok, fewer params in b.a3
>a5 = b.a3 : (x: 数字) => 数字
>a5 : (x?: 数字, y?: 数字) => 数字
>b.a3 : (x: 数字) => 数字
>b : Base
>a3 : (x: 数字) => 数字

    a5 = b.a4; // ok, same number of params
>a5 = b.a4 : (x: 数字, y?: 数字) => 数字
>a5 : (x?: 数字, y?: 数字) => 数字
>b.a4 : (x: 数字, y?: 数字) => 数字
>b : Base
>a4 : (x: 数字, y?: 数字) => 数字

    a5 = b.a5; // ok
>a5 = b.a5 : (x?: 数字, y?: 数字) => 数字
>a5 : (x?: 数字, y?: 数字) => 数字
>b.a5 : (x?: 数字, y?: 数字) => 数字
>b : Base
>a5 : (x?: 数字, y?: 数字) => 数字

    a5 = b.a6; // ok, same number of params
>a5 = b.a6 : (x: 数字, y: 数字) => 数字
>a5 : (x?: 数字, y?: 数字) => 数字
>b.a6 : (x: 数字, y: 数字) => 数字
>b : Base
>a6 : (x: 数字, y: 数字) => 数字

