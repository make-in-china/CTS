=== tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithEnum.ts ===
// operands of an enum type are treated as having the primitive type Number.

enum E {
>E : E

    a,
>a : E.a

    b
>b : E.b
}

var a: any;
>a : any
>类型别名 :=> 任意

var b: number;
>b : number
>类型别名 :=> 数字

var c: E;
>c : E
>E : E

// operator **
var r1 = c ** a;
>r1 : number
>类型别名 :=> 数字
>c ** a : number
>类型别名 :=> 数字
>c : E
>a : any
>类型别名 :=> 任意

var r2 = c ** b;
>r2 : number
>类型别名 :=> 数字
>c ** b : number
>类型别名 :=> 数字
>c : E
>b : number
>类型别名 :=> 数字

var r3 = c ** c;
>r3 : number
>类型别名 :=> 数字
>c ** c : number
>类型别名 :=> 数字
>c : E
>c : E

var r4 = a ** c;
>r4 : number
>类型别名 :=> 数字
>a ** c : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>c : E

var r5 = b ** c;
>r5 : number
>类型别名 :=> 数字
>b ** c : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>c : E

var r6 = E.a ** a;
>r6 : number
>类型别名 :=> 数字
>E.a ** a : number
>类型别名 :=> 数字
>E.a : E.a
>E : typeof E
>a : E.a
>a : any
>类型别名 :=> 任意

var r7 = E.a ** b;
>r7 : number
>类型别名 :=> 数字
>E.a ** b : number
>类型别名 :=> 数字
>E.a : E.a
>E : typeof E
>a : E.a
>b : number
>类型别名 :=> 数字

var r8 = E.a ** E.b;
>r8 : number
>类型别名 :=> 数字
>E.a ** E.b : number
>类型别名 :=> 数字
>E.a : E.a
>E : typeof E
>a : E.a
>E.b : E.b
>E : typeof E
>b : E.b

var r9 = E.a ** 1;
>r9 : number
>类型别名 :=> 数字
>E.a ** 1 : number
>类型别名 :=> 数字
>E.a : E.a
>E : typeof E
>a : E.a
>1 : 1

var r10 = a ** E.b;
>r10 : number
>类型别名 :=> 数字
>a ** E.b : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>E.b : E.b
>E : typeof E
>b : E.b

var r11 = b ** E.b;
>r11 : number
>类型别名 :=> 数字
>b ** E.b : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>E.b : E.b
>E : typeof E
>b : E.b

var r12 = 1 ** E.b;
>r12 : number
>类型别名 :=> 数字
>1 ** E.b : number
>类型别名 :=> 数字
>1 : 1
>E.b : E.b
>E : typeof E
>b : E.b

