=== tests/cases/compiler/promisePermutations.ts ===
interface Promise<T> {
>Promise : Promise<T>
>T : T

    then<U>(success?: (value: T) => Promise<U>, error?: (error: any) => Promise<U>, progress?: (progress: any) => void): Promise<U>;
>then : { <TResult1 = T, TResult2 = 不及>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: T) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>U : U
>success : (value: T) => Promise<U>
>value : T
>T : T
>Promise : Promise<T>
>U : U
>error : (error: 任意) => Promise<U>
>error : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U

    then<U>(success?: (value: T) => Promise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>;
>then : { <TResult1 = T, TResult2 = 不及>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: T) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>U : U
>success : (value: T) => Promise<U>
>value : T
>T : T
>Promise : Promise<T>
>U : U
>error : (error: 任意) => U
>error : 任意
>类型别名 :=> 任意
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U

    then<U>(success?: (value: T) => U, error?: (error: any) => Promise<U>, progress?: (progress: any) => void): Promise<U>;
>then : { <TResult1 = T, TResult2 = 不及>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: T) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>U : U
>success : (value: T) => U
>value : T
>T : T
>U : U
>error : (error: 任意) => Promise<U>
>error : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U

    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>;
>then : { <TResult1 = T, TResult2 = 不及>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: T) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>U : U
>success : (value: T) => U
>value : T
>T : T
>U : U
>error : (error: 任意) => U
>error : 任意
>类型别名 :=> 任意
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U

    done<U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
>done : <U>(success?: (value: T) => 任意, error?: (error: 任意) => 任意, progress?: (progress: 任意) => 无值) => 无值
>U : U
>success : (value: T) => 任意
>value : T
>T : T
>error : (error: 任意) => 任意
>error : 任意
>类型别名 :=> 任意
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
}

interface IPromise<T> {
>IPromise : IPromise<T>
>T : T

    then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>U : U
>success : (value: T) => IPromise<U>
>value : T
>T : T
>IPromise : IPromise<T>
>U : U
>error : (error: 任意) => IPromise<U>
>error : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

    then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>U : U
>success : (value: T) => IPromise<U>
>value : T
>T : T
>IPromise : IPromise<T>
>U : U
>error : (error: 任意) => U
>error : 任意
>类型别名 :=> 任意
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

    then<U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>U : U
>success : (value: T) => U
>value : T
>T : T
>U : U
>error : (error: 任意) => IPromise<U>
>error : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>U : U
>success : (value: T) => U
>value : T
>T : T
>U : U
>error : (error: 任意) => U
>error : 任意
>类型别名 :=> 任意
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

    done? <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
>done : <U>(success?: (value: T) => 任意, error?: (error: 任意) => 任意, progress?: (progress: 任意) => 无值) => 无值
>U : U
>success : (value: T) => 任意
>value : T
>T : T
>error : (error: 任意) => 任意
>error : 任意
>类型别名 :=> 任意
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
}

declare function testFunction(): IPromise<number>;
>testFunction : () => IPromise<数字>
>IPromise : IPromise<T>

declare function testFunctionP(): Promise<number>;
>testFunctionP : () => Promise<数字>
>Promise : Promise<T>

declare function testFunction2(): IPromise<{ x: number }>;
>testFunction2 : () => IPromise<{ x: 数字; }>
>IPromise : IPromise<T>
>x : 数字
>类型别名 :=> 数字

declare function testFunction2P(): Promise<{ x: number }>;
>testFunction2P : () => Promise<{ x: 数字; }>
>Promise : Promise<T>
>x : 数字
>类型别名 :=> 数字

declare function testFunction3(x: number): IPromise<number>;
>testFunction3 : (x: 数字) => IPromise<数字>
>x : 数字
>类型别名 :=> 数字
>IPromise : IPromise<T>

declare function testFunction3P(x: number): Promise<number>;
>testFunction3P : (x: 数字) => Promise<数字>
>x : 数字
>类型别名 :=> 数字
>Promise : Promise<T>

declare function testFunction4(x: number, y?: string): IPromise<string>;
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>IPromise : IPromise<T>

declare function testFunction4P(x: number, y?: string): Promise<string>;
>testFunction4P : (x: 数字, y?: 文字) => Promise<文字>
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>Promise : Promise<T>

declare function testFunction5(x: number, cb: (a: string) => string): IPromise<string>;
>testFunction5 : (x: 数字, cb: (a: 文字) => 文字) => IPromise<文字>
>x : 数字
>类型别名 :=> 数字
>cb : (a: 文字) => 文字
>a : 文字
>类型别名 :=> 文字
>IPromise : IPromise<T>

declare function testFunction5P(x: number, cb: (a: string) => string): Promise<string>;
>testFunction5P : (x: 数字, cb: (a: 文字) => 文字) => Promise<文字>
>x : 数字
>类型别名 :=> 数字
>cb : (a: 文字) => 文字
>a : 文字
>类型别名 :=> 文字
>Promise : Promise<T>

declare function testFunction6(x: number, cb: <T>(a: T) => T): IPromise<string>;
>testFunction6 : (x: 数字, cb: <T>(a: T) => T) => IPromise<文字>
>x : 数字
>类型别名 :=> 数字
>cb : <T>(a: T) => T
>T : T
>a : T
>T : T
>T : T
>IPromise : IPromise<T>

declare function testFunction6P(x: number, cb: <T>(a: T) => T): Promise<string>;
>testFunction6P : (x: 数字, cb: <T>(a: T) => T) => Promise<文字>
>x : 数字
>类型别名 :=> 数字
>cb : <T>(a: T) => T
>T : T
>a : T
>T : T
>T : T
>Promise : Promise<T>

declare function testFunction7(cb: <T>(a: T) => T): IPromise<string>;
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<文字>
>cb : <T>(a: T) => T
>T : T
>a : T
>T : T
>T : T
>IPromise : IPromise<T>

declare function testFunction7P(cb: <T>(a: T) => T): Promise<string>;
>testFunction7P : (cb: <T>(a: T) => T) => Promise<文字>
>cb : <T>(a: T) => T
>T : T
>a : T
>T : T
>T : T
>Promise : Promise<T>

declare function testFunction8<T>(x: T, cb: (a: T) => T): IPromise<T>;
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>T : T
>x : T
>T : T
>cb : (a: T) => T
>a : T
>T : T
>T : T
>IPromise : IPromise<T>
>T : T

declare function testFunction8P<T>(x: T, cb: (a: T) => T): Promise<T>;
>testFunction8P : <T>(x: T, cb: (a: T) => T) => Promise<T>
>T : T
>x : T
>T : T
>cb : (a: T) => T
>a : T
>T : T
>T : T
>Promise : Promise<T>
>T : T

declare function testFunction9<T>(x: T, cb: <U>(a: U) => U): IPromise<T>;
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>T : T
>x : T
>T : T
>cb : <U>(a: U) => U
>U : U
>a : U
>U : U
>U : U
>IPromise : IPromise<T>
>T : T

declare function testFunction9P<T>(x: T, cb: <U>(a: U) => U): Promise<T>;
>testFunction9P : <T>(x: T, cb: <U>(a: U) => U) => Promise<T>
>T : T
>x : T
>T : T
>cb : <U>(a: U) => U
>U : U
>a : U
>U : U
>U : U
>Promise : Promise<T>
>T : T

declare function testFunction10<T>(cb: <U>(a: U) => U): IPromise<T>;
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>T : T
>cb : <U>(a: U) => U
>U : U
>a : U
>U : U
>U : U
>IPromise : IPromise<T>
>T : T

declare function testFunction10P<T>(cb: <U>(a: U) => U): Promise<T>;
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>T : T
>cb : <U>(a: U) => U
>U : U
>a : U
>U : U
>U : U
>Promise : Promise<T>
>T : T

declare function testFunction11(x: number): IPromise<number>;
>testFunction11 : { (x: 数字): IPromise<数字>; (x: 文字): IPromise<文字>; }
>x : 数字
>类型别名 :=> 数字
>IPromise : IPromise<T>

declare function testFunction11(x: string): IPromise<string>;
>testFunction11 : { (x: 数字): IPromise<数字>; (x: 文字): IPromise<文字>; }
>x : 文字
>类型别名 :=> 文字
>IPromise : IPromise<T>

declare function testFunction11P(x: number): Promise<number>;
>testFunction11P : { (x: 数字): Promise<数字>; (x: 文字): Promise<文字>; }
>x : 数字
>类型别名 :=> 数字
>Promise : Promise<T>

declare function testFunction11P(x: string): Promise<string>;
>testFunction11P : { (x: 数字): Promise<数字>; (x: 文字): Promise<文字>; }
>x : 文字
>类型别名 :=> 文字
>Promise : Promise<T>

declare function testFunction12<T>(x: T): IPromise<T>;
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>T : T
>x : T
>T : T
>IPromise : IPromise<T>
>T : T

declare function testFunction12<T>(x: T, y: T): IPromise<T>;
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>T : T
>x : T
>T : T
>y : T
>T : T
>IPromise : IPromise<T>
>T : T

declare function testFunction12P<T>(x: T): IPromise<T>;
>testFunction12P : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): Promise<T>; }
>T : T
>x : T
>T : T
>IPromise : IPromise<T>
>T : T

declare function testFunction12P<T>(x: T, y: T): Promise<T>;
>testFunction12P : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): Promise<T>; }
>T : T
>x : T
>T : T
>y : T
>T : T
>Promise : Promise<T>
>T : T

var r1: IPromise<number>;
>r1 : IPromise<数字>
>IPromise : IPromise<T>

var r1a = r1.then(testFunction, testFunction, testFunction);
>r1a : IPromise<数字>
>r1.then(testFunction, testFunction, testFunction) : IPromise<数字>
>r1.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r1 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>

var r1b = r1.then(testFunction, testFunction, testFunction).then(testFunction, testFunction, testFunction);
>r1b : IPromise<数字>
>r1.then(testFunction, testFunction, testFunction).then(testFunction, testFunction, testFunction) : IPromise<数字>
>r1.then(testFunction, testFunction, testFunction).then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r1.then(testFunction, testFunction, testFunction) : IPromise<数字>
>r1.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r1 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>

var r1c = r1.then(testFunctionP, testFunctionP, testFunctionP);
>r1c : IPromise<数字>
>r1.then(testFunctionP, testFunctionP, testFunctionP) : IPromise<数字>
>r1.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r1 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunctionP : () => Promise<数字>
>testFunctionP : () => Promise<数字>
>testFunctionP : () => Promise<数字>

var s1: Promise<number>;
>s1 : Promise<数字>
>Promise : Promise<T>

var s1a = s1.then(testFunction, testFunction, testFunction);
>s1a : Promise<IPromise<数字>>
>s1.then(testFunction, testFunction, testFunction) : Promise<IPromise<数字>>
>s1.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s1 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>

var s1b = s1.then(testFunctionP, testFunctionP, testFunctionP);
>s1b : Promise<数字>
>s1.then(testFunctionP, testFunctionP, testFunctionP) : Promise<数字>
>s1.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s1 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunctionP : () => Promise<数字>
>testFunctionP : () => Promise<数字>
>testFunctionP : () => Promise<数字>

var s1c = s1.then(testFunctionP, testFunction, testFunction);
>s1c : Promise<IPromise<数字>>
>s1.then(testFunctionP, testFunction, testFunction) : Promise<IPromise<数字>>
>s1.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s1 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunctionP : () => Promise<数字>
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>

var s1d = s1.then(testFunctionP, testFunction, testFunction).then(testFunction, testFunction, testFunction);
>s1d : Promise<IPromise<数字>>
>s1.then(testFunctionP, testFunction, testFunction).then(testFunction, testFunction, testFunction) : Promise<IPromise<数字>>
>s1.then(testFunctionP, testFunction, testFunction).then : { <TResult1 = IPromise<数字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<数字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s1.then(testFunctionP, testFunction, testFunction) : Promise<IPromise<数字>>
>s1.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s1 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunctionP : () => Promise<数字>
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>
>then : { <TResult1 = IPromise<数字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<数字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>
>testFunction : () => IPromise<数字>

var r2: IPromise<{ x: number; }>;
>r2 : IPromise<{ x: 数字; }>
>IPromise : IPromise<T>
>x : 数字
>类型别名 :=> 数字

var r2a = r2.then(testFunction2, testFunction2, testFunction2);
>r2a : IPromise<{ x: 数字; }>
>r2.then(testFunction2, testFunction2, testFunction2) : IPromise<{ x: 数字; }>
>r2.then : { <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r2 : IPromise<{ x: 数字; }>
>then : { <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>

var r2b = r2.then(testFunction2, testFunction2, testFunction2).then(testFunction2, testFunction2, testFunction2);
>r2b : IPromise<{ x: 数字; }>
>r2.then(testFunction2, testFunction2, testFunction2).then(testFunction2, testFunction2, testFunction2) : IPromise<{ x: 数字; }>
>r2.then(testFunction2, testFunction2, testFunction2).then : { <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r2.then(testFunction2, testFunction2, testFunction2) : IPromise<{ x: 数字; }>
>r2.then : { <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r2 : IPromise<{ x: 数字; }>
>then : { <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>
>then : { <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>

var s2: Promise<{ x: number; }>;
>s2 : Promise<{ x: 数字; }>
>Promise : Promise<T>
>x : 数字
>类型别名 :=> 数字

var s2a = s2.then(testFunction2, testFunction2, testFunction2);
>s2a : Promise<IPromise<{ x: 数字; }>>
>s2.then(testFunction2, testFunction2, testFunction2) : Promise<IPromise<{ x: 数字; }>>
>s2.then : { <TResult1 = { x: 数字; }, TResult2 = 不及>(onfulfilled?: (value: { x: 数字; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s2 : Promise<{ x: 数字; }>
>then : { <TResult1 = { x: 数字; }, TResult2 = 不及>(onfulfilled?: (value: { x: 数字; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>

var s2b = s2.then(testFunction2P, testFunction2P, testFunction2P);
>s2b : Promise<{ x: 数字; }>
>s2.then(testFunction2P, testFunction2P, testFunction2P) : Promise<{ x: 数字; }>
>s2.then : { <TResult1 = { x: 数字; }, TResult2 = 不及>(onfulfilled?: (value: { x: 数字; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s2 : Promise<{ x: 数字; }>
>then : { <TResult1 = { x: 数字; }, TResult2 = 不及>(onfulfilled?: (value: { x: 数字; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction2P : () => Promise<{ x: 数字; }>
>testFunction2P : () => Promise<{ x: 数字; }>
>testFunction2P : () => Promise<{ x: 数字; }>

var s2c = s2.then(testFunction2P, testFunction2, testFunction2);
>s2c : Promise<IPromise<{ x: 数字; }>>
>s2.then(testFunction2P, testFunction2, testFunction2) : Promise<IPromise<{ x: 数字; }>>
>s2.then : { <TResult1 = { x: 数字; }, TResult2 = 不及>(onfulfilled?: (value: { x: 数字; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s2 : Promise<{ x: 数字; }>
>then : { <TResult1 = { x: 数字; }, TResult2 = 不及>(onfulfilled?: (value: { x: 数字; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction2P : () => Promise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>

var s2d = s2.then(testFunction2P, testFunction2, testFunction2).then(testFunction2, testFunction2, testFunction2);
>s2d : Promise<IPromise<{ x: 数字; }>>
>s2.then(testFunction2P, testFunction2, testFunction2).then(testFunction2, testFunction2, testFunction2) : Promise<IPromise<{ x: 数字; }>>
>s2.then(testFunction2P, testFunction2, testFunction2).then : { <TResult1 = IPromise<{ x: 数字; }>, TResult2 = 不及>(onfulfilled?: (value: IPromise<{ x: 数字; }>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<{ x: 数字; }>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<{ x: 数字; }>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<{ x: 数字; }>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<{ x: 数字; }>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s2.then(testFunction2P, testFunction2, testFunction2) : Promise<IPromise<{ x: 数字; }>>
>s2.then : { <TResult1 = { x: 数字; }, TResult2 = 不及>(onfulfilled?: (value: { x: 数字; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s2 : Promise<{ x: 数字; }>
>then : { <TResult1 = { x: 数字; }, TResult2 = 不及>(onfulfilled?: (value: { x: 数字; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: { x: 数字; }) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction2P : () => Promise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>
>then : { <TResult1 = IPromise<{ x: 数字; }>, TResult2 = 不及>(onfulfilled?: (value: IPromise<{ x: 数字; }>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<{ x: 数字; }>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<{ x: 数字; }>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<{ x: 数字; }>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<{ x: 数字; }>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>
>testFunction2 : () => IPromise<{ x: 数字; }>

var r3: IPromise<number>;
>r3 : IPromise<数字>
>IPromise : IPromise<T>

var r3a = r3.then(testFunction3, testFunction3, testFunction3);
>r3a : IPromise<数字>
>r3.then(testFunction3, testFunction3, testFunction3) : IPromise<数字>
>r3.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r3 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>

var r3b = r3.then(testFunction3, testFunction3, testFunction3).then(testFunction3, testFunction3, testFunction3);
>r3b : IPromise<数字>
>r3.then(testFunction3, testFunction3, testFunction3).then(testFunction3, testFunction3, testFunction3) : IPromise<数字>
>r3.then(testFunction3, testFunction3, testFunction3).then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r3.then(testFunction3, testFunction3, testFunction3) : IPromise<数字>
>r3.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r3 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>

var s3: Promise<number>;
>s3 : Promise<数字>
>Promise : Promise<T>

var s3a = s3.then(testFunction3, testFunction3, testFunction3);
>s3a : Promise<IPromise<数字>>
>s3.then(testFunction3, testFunction3, testFunction3) : Promise<IPromise<数字>>
>s3.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s3 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>

var s3b = s3.then(testFunction3P, testFunction3P, testFunction3P);
>s3b : Promise<数字>
>s3.then(testFunction3P, testFunction3P, testFunction3P) : Promise<数字>
>s3.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s3 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction3P : (x: 数字) => Promise<数字>
>testFunction3P : (x: 数字) => Promise<数字>
>testFunction3P : (x: 数字) => Promise<数字>

var s3c = s3.then(testFunction3P, testFunction3, testFunction3);
>s3c : Promise<IPromise<数字>>
>s3.then(testFunction3P, testFunction3, testFunction3) : Promise<IPromise<数字>>
>s3.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s3 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction3P : (x: 数字) => Promise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>

var s3d = s3.then(testFunction3P, testFunction3, testFunction3).then(testFunction3, testFunction3, testFunction3); // error
>s3d : 任意
>类型别名 :=> 任意
>s3.then(testFunction3P, testFunction3, testFunction3).then(testFunction3, testFunction3, testFunction3) : 任意
>类型别名 :=> 任意
>s3.then(testFunction3P, testFunction3, testFunction3).then : { <TResult1 = IPromise<数字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<数字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s3.then(testFunction3P, testFunction3, testFunction3) : Promise<IPromise<数字>>
>s3.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s3 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction3P : (x: 数字) => Promise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>
>then : { <TResult1 = IPromise<数字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<数字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>
>testFunction3 : (x: 数字) => IPromise<数字>

var r4: IPromise<string>;
>r4 : IPromise<文字>
>IPromise : IPromise<T>

var sIPromise: (x: any) => IPromise<string>;
>sIPromise : (x: 任意) => IPromise<文字>
>x : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>

var sPromise: (x: any) => Promise<string>;
>sPromise : (x: 任意) => Promise<文字>
>x : 任意
>类型别名 :=> 任意
>Promise : Promise<T>

var r4a = r4.then(testFunction4, testFunction4, testFunction4); // error
>r4a : 任意
>类型别名 :=> 任意
>r4.then(testFunction4, testFunction4, testFunction4) : 任意
>类型别名 :=> 任意
>r4.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r4 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>

var r4b = r4.then(sIPromise, testFunction4, testFunction4).then(sIPromise, testFunction4, testFunction4); // ok
>r4b : IPromise<文字>
>r4.then(sIPromise, testFunction4, testFunction4).then(sIPromise, testFunction4, testFunction4) : IPromise<文字>
>r4.then(sIPromise, testFunction4, testFunction4).then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r4.then(sIPromise, testFunction4, testFunction4) : IPromise<文字>
>r4.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r4 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>

var s4: Promise<string>;
>s4 : Promise<文字>
>Promise : Promise<T>

var s4a = s4.then(testFunction4, testFunction4, testFunction4); // error
>s4a : 任意
>类型别名 :=> 任意
>s4.then(testFunction4, testFunction4, testFunction4) : 任意
>类型别名 :=> 任意
>s4.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s4 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>

var s4b = s4.then(testFunction4P, testFunction4P, testFunction4P); // error 
>s4b : 任意
>类型别名 :=> 任意
>s4.then(testFunction4P, testFunction4P, testFunction4P) : 任意
>类型别名 :=> 任意
>s4.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s4 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction4P : (x: 数字, y?: 文字) => Promise<文字>
>testFunction4P : (x: 数字, y?: 文字) => Promise<文字>
>testFunction4P : (x: 数字, y?: 文字) => Promise<文字>

var s4c = s4.then(testFunction4P, testFunction4, testFunction4); // error
>s4c : 任意
>类型别名 :=> 任意
>s4.then(testFunction4P, testFunction4, testFunction4) : 任意
>类型别名 :=> 任意
>s4.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s4 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction4P : (x: 数字, y?: 文字) => Promise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>

var s4d = s4.then(sIPromise, testFunction4P, testFunction4).then(sIPromise, testFunction4P, testFunction4);
>s4d : Promise<IPromise<文字>>
>s4.then(sIPromise, testFunction4P, testFunction4).then(sIPromise, testFunction4P, testFunction4) : Promise<IPromise<文字>>
>s4.then(sIPromise, testFunction4P, testFunction4).then : { <TResult1 = IPromise<文字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<文字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<文字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<文字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<文字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<文字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s4.then(sIPromise, testFunction4P, testFunction4) : Promise<IPromise<文字>>
>s4.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s4 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>testFunction4P : (x: 数字, y?: 文字) => Promise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>
>then : { <TResult1 = IPromise<文字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<文字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<文字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<文字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<文字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<文字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>testFunction4P : (x: 数字, y?: 文字) => Promise<文字>
>testFunction4 : (x: 数字, y?: 文字) => IPromise<文字>

var r5: IPromise<string>;
>r5 : IPromise<文字>
>IPromise : IPromise<T>

var r5a = r5.then(testFunction5, testFunction5, testFunction5); // error
>r5a : 任意
>类型别名 :=> 任意
>r5.then(testFunction5, testFunction5, testFunction5) : 任意
>类型别名 :=> 任意
>r5.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r5 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction5 : (x: 数字, cb: (a: 文字) => 文字) => IPromise<文字>
>testFunction5 : (x: 数字, cb: (a: 文字) => 文字) => IPromise<文字>
>testFunction5 : (x: 数字, cb: (a: 文字) => 文字) => IPromise<文字>

var r5b = r5.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>r5b : IPromise<文字>
>r5.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : IPromise<文字>
>r5.then(sIPromise, sIPromise, sIPromise).then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r5.then(sIPromise, sIPromise, sIPromise) : IPromise<文字>
>r5.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r5 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var s5: Promise<string>;
>s5 : Promise<文字>
>Promise : Promise<T>

var s5a = s5.then(testFunction5, testFunction5, testFunction5); // error
>s5a : 任意
>类型别名 :=> 任意
>s5.then(testFunction5, testFunction5, testFunction5) : 任意
>类型别名 :=> 任意
>s5.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s5 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction5 : (x: 数字, cb: (a: 文字) => 文字) => IPromise<文字>
>testFunction5 : (x: 数字, cb: (a: 文字) => 文字) => IPromise<文字>
>testFunction5 : (x: 数字, cb: (a: 文字) => 文字) => IPromise<文字>

var s5b = s5.then(testFunction5P, testFunction5P, testFunction5P); // error
>s5b : 任意
>类型别名 :=> 任意
>s5.then(testFunction5P, testFunction5P, testFunction5P) : 任意
>类型别名 :=> 任意
>s5.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s5 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction5P : (x: 数字, cb: (a: 文字) => 文字) => Promise<文字>
>testFunction5P : (x: 数字, cb: (a: 文字) => 文字) => Promise<文字>
>testFunction5P : (x: 数字, cb: (a: 文字) => 文字) => Promise<文字>

var s5c = s5.then(testFunction5P, testFunction5, testFunction5); // error
>s5c : 任意
>类型别名 :=> 任意
>s5.then(testFunction5P, testFunction5, testFunction5) : 任意
>类型别名 :=> 任意
>s5.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s5 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction5P : (x: 数字, cb: (a: 文字) => 文字) => Promise<文字>
>testFunction5 : (x: 数字, cb: (a: 文字) => 文字) => IPromise<文字>
>testFunction5 : (x: 数字, cb: (a: 文字) => 文字) => IPromise<文字>

var s5d = s5.then(sPromise, sPromise, sPromise).then(sIPromise, sIPromise, sIPromise); // ok
>s5d : Promise<IPromise<文字>>
>s5.then(sPromise, sPromise, sPromise).then(sIPromise, sIPromise, sIPromise) : Promise<IPromise<文字>>
>s5.then(sPromise, sPromise, sPromise).then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s5.then(sPromise, sPromise, sPromise) : Promise<文字>
>s5.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s5 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var r6: IPromise<string>;
>r6 : IPromise<文字>
>IPromise : IPromise<T>

var r6a = r6.then(testFunction6, testFunction6, testFunction6); // error
>r6a : 任意
>类型别名 :=> 任意
>r6.then(testFunction6, testFunction6, testFunction6) : 任意
>类型别名 :=> 任意
>r6.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r6 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction6 : (x: 数字, cb: <T>(a: T) => T) => IPromise<文字>
>testFunction6 : (x: 数字, cb: <T>(a: T) => T) => IPromise<文字>
>testFunction6 : (x: 数字, cb: <T>(a: T) => T) => IPromise<文字>

var r6b = r6.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>r6b : IPromise<文字>
>r6.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : IPromise<文字>
>r6.then(sIPromise, sIPromise, sIPromise).then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r6.then(sIPromise, sIPromise, sIPromise) : IPromise<文字>
>r6.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r6 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var s6: Promise<string>;
>s6 : Promise<文字>
>Promise : Promise<T>

var s6a = s6.then(testFunction6, testFunction6, testFunction6); // error
>s6a : 任意
>类型别名 :=> 任意
>s6.then(testFunction6, testFunction6, testFunction6) : 任意
>类型别名 :=> 任意
>s6.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s6 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction6 : (x: 数字, cb: <T>(a: T) => T) => IPromise<文字>
>testFunction6 : (x: 数字, cb: <T>(a: T) => T) => IPromise<文字>
>testFunction6 : (x: 数字, cb: <T>(a: T) => T) => IPromise<文字>

var s6b = s6.then(testFunction6P, testFunction6P, testFunction6P); // error
>s6b : 任意
>类型别名 :=> 任意
>s6.then(testFunction6P, testFunction6P, testFunction6P) : 任意
>类型别名 :=> 任意
>s6.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s6 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction6P : (x: 数字, cb: <T>(a: T) => T) => Promise<文字>
>testFunction6P : (x: 数字, cb: <T>(a: T) => T) => Promise<文字>
>testFunction6P : (x: 数字, cb: <T>(a: T) => T) => Promise<文字>

var s6c = s6.then(testFunction6P, testFunction6, testFunction6); // error
>s6c : 任意
>类型别名 :=> 任意
>s6.then(testFunction6P, testFunction6, testFunction6) : 任意
>类型别名 :=> 任意
>s6.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s6 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction6P : (x: 数字, cb: <T>(a: T) => T) => Promise<文字>
>testFunction6 : (x: 数字, cb: <T>(a: T) => T) => IPromise<文字>
>testFunction6 : (x: 数字, cb: <T>(a: T) => T) => IPromise<文字>

var s6d = s6.then(sPromise, sPromise, sPromise).then(sIPromise, sIPromise, sIPromise); // ok
>s6d : Promise<IPromise<文字>>
>s6.then(sPromise, sPromise, sPromise).then(sIPromise, sIPromise, sIPromise) : Promise<IPromise<文字>>
>s6.then(sPromise, sPromise, sPromise).then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s6.then(sPromise, sPromise, sPromise) : Promise<文字>
>s6.then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s6 : Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>
>then : { <TResult1 = 文字, TResult2 = 不及>(onfulfilled?: (value: 文字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var r7: IPromise<string>;
>r7 : IPromise<文字>
>IPromise : IPromise<T>

var r7a = r7.then(testFunction7, testFunction7, testFunction7); // error
>r7a : 任意
>类型别名 :=> 任意
>r7.then(testFunction7, testFunction7, testFunction7) : 任意
>类型别名 :=> 任意
>r7.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r7 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<文字>
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<文字>
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<文字>

var r7b = r7.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>r7b : IPromise<文字>
>r7.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : IPromise<文字>
>r7.then(sIPromise, sIPromise, sIPromise).then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r7.then(sIPromise, sIPromise, sIPromise) : IPromise<文字>
>r7.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r7 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var s7: Promise<string>;
>s7 : Promise<文字>
>Promise : Promise<T>

var s7a = r7.then(testFunction7, testFunction7, testFunction7); // error
>s7a : 任意
>类型别名 :=> 任意
>r7.then(testFunction7, testFunction7, testFunction7) : 任意
>类型别名 :=> 任意
>r7.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r7 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<文字>
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<文字>
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<文字>

var s7b = r7.then(testFunction7P, testFunction7P, testFunction7P); // error
>s7b : 任意
>类型别名 :=> 任意
>r7.then(testFunction7P, testFunction7P, testFunction7P) : 任意
>类型别名 :=> 任意
>r7.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r7 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction7P : (cb: <T>(a: T) => T) => Promise<文字>
>testFunction7P : (cb: <T>(a: T) => T) => Promise<文字>
>testFunction7P : (cb: <T>(a: T) => T) => Promise<文字>

var s7c = r7.then(testFunction7P, testFunction7, testFunction7); // error
>s7c : 任意
>类型别名 :=> 任意
>r7.then(testFunction7P, testFunction7, testFunction7) : 任意
>类型别名 :=> 任意
>r7.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r7 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction7P : (cb: <T>(a: T) => T) => Promise<文字>
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<文字>
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<文字>

var s7d = r7.then(sPromise, sPromise, sPromise).then(sPromise, sPromise, sPromise); // ok?
>s7d : IPromise<文字>
>r7.then(sPromise, sPromise, sPromise).then(sPromise, sPromise, sPromise) : IPromise<文字>
>r7.then(sPromise, sPromise, sPromise).then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r7.then(sPromise, sPromise, sPromise) : IPromise<文字>
>r7.then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r7 : IPromise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>
>then : { <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>

var r8: IPromise<number>;
>r8 : IPromise<数字>
>IPromise : IPromise<T>

var nIPromise: (x: any) => IPromise<number>;
>nIPromise : (x: 任意) => IPromise<数字>
>x : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>

var nPromise: (x: any) => Promise<number>;
>nPromise : (x: 任意) => Promise<数字>
>x : 任意
>类型别名 :=> 任意
>Promise : Promise<T>

var r8a = r8.then(testFunction8, testFunction8, testFunction8); // error
>r8a : 任意
>类型别名 :=> 任意
>r8.then(testFunction8, testFunction8, testFunction8) : 任意
>类型别名 :=> 任意
>r8.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r8 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>

var r8b = r8.then(nIPromise, nIPromise, nIPromise).then(nIPromise, nIPromise, nIPromise); // ok
>r8b : IPromise<数字>
>r8.then(nIPromise, nIPromise, nIPromise).then(nIPromise, nIPromise, nIPromise) : IPromise<数字>
>r8.then(nIPromise, nIPromise, nIPromise).then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r8.then(nIPromise, nIPromise, nIPromise) : IPromise<数字>
>r8.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r8 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>

var s8: Promise<number>;
>s8 : Promise<数字>
>Promise : Promise<T>

var s8a = s8.then(testFunction8, testFunction8, testFunction8); // error
>s8a : 任意
>类型别名 :=> 任意
>s8.then(testFunction8, testFunction8, testFunction8) : 任意
>类型别名 :=> 任意
>s8.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s8 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>

var s8b = s8.then(testFunction8P, testFunction8P, testFunction8P); // error
>s8b : 任意
>类型别名 :=> 任意
>s8.then(testFunction8P, testFunction8P, testFunction8P) : 任意
>类型别名 :=> 任意
>s8.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s8 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction8P : <T>(x: T, cb: (a: T) => T) => Promise<T>
>testFunction8P : <T>(x: T, cb: (a: T) => T) => Promise<T>
>testFunction8P : <T>(x: T, cb: (a: T) => T) => Promise<T>

var s8c = s8.then(testFunction8P, testFunction8, testFunction8); // error
>s8c : 任意
>类型别名 :=> 任意
>s8.then(testFunction8P, testFunction8, testFunction8) : 任意
>类型别名 :=> 任意
>s8.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s8 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction8P : <T>(x: T, cb: (a: T) => T) => Promise<T>
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>

var s8d = s8.then(nIPromise, nIPromise, nIPromise).then(nIPromise, nIPromise, nIPromise); // ok
>s8d : Promise<IPromise<数字>>
>s8.then(nIPromise, nIPromise, nIPromise).then(nIPromise, nIPromise, nIPromise) : Promise<IPromise<数字>>
>s8.then(nIPromise, nIPromise, nIPromise).then : { <TResult1 = IPromise<数字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<数字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s8.then(nIPromise, nIPromise, nIPromise) : Promise<IPromise<数字>>
>s8.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s8 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>then : { <TResult1 = IPromise<数字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<数字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>

var r9: IPromise<number>;
>r9 : IPromise<数字>
>IPromise : IPromise<T>

var r9a = r9.then(testFunction9, testFunction9, testFunction9); // error
>r9a : 任意
>类型别名 :=> 任意
>r9.then(testFunction9, testFunction9, testFunction9) : 任意
>类型别名 :=> 任意
>r9.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r9 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>

var r9b = r9.then(sIPromise, sIPromise, sIPromise); // ok
>r9b : IPromise<文字>
>r9.then(sIPromise, sIPromise, sIPromise) : IPromise<文字>
>r9.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r9 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var r9c = r9.then(nIPromise, nIPromise, nIPromise); // ok
>r9c : IPromise<数字>
>r9.then(nIPromise, nIPromise, nIPromise) : IPromise<数字>
>r9.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r9 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>

var r9d = r9.then(testFunction, sIPromise, nIPromise); // ok
>r9d : 任意
>类型别名 :=> 任意
>r9.then(testFunction, sIPromise, nIPromise) : 任意
>类型别名 :=> 任意
>r9.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r9 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction : () => IPromise<数字>
>sIPromise : (x: 任意) => IPromise<文字>
>nIPromise : (x: 任意) => IPromise<数字>

var r9e = r9.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>r9e : IPromise<文字>
>r9.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : IPromise<文字>
>r9.then(testFunction, nIPromise, sIPromise).then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r9.then(testFunction, nIPromise, sIPromise) : IPromise<数字>
>r9.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r9 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction : () => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>sIPromise : (x: 任意) => IPromise<文字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var s9: Promise<number>;
>s9 : Promise<数字>
>Promise : Promise<T>

var s9a = s9.then(testFunction9, testFunction9, testFunction9); // error
>s9a : 任意
>类型别名 :=> 任意
>s9.then(testFunction9, testFunction9, testFunction9) : 任意
>类型别名 :=> 任意
>s9.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s9 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>

var s9b = s9.then(testFunction9P, testFunction9P, testFunction9P); // error
>s9b : 任意
>类型别名 :=> 任意
>s9.then(testFunction9P, testFunction9P, testFunction9P) : 任意
>类型别名 :=> 任意
>s9.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s9 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction9P : <T>(x: T, cb: <U>(a: U) => U) => Promise<T>
>testFunction9P : <T>(x: T, cb: <U>(a: U) => U) => Promise<T>
>testFunction9P : <T>(x: T, cb: <U>(a: U) => U) => Promise<T>

var s9c = s9.then(testFunction9P, testFunction9, testFunction9); // error
>s9c : 任意
>类型别名 :=> 任意
>s9.then(testFunction9P, testFunction9, testFunction9) : 任意
>类型别名 :=> 任意
>s9.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s9 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction9P : <T>(x: T, cb: <U>(a: U) => U) => Promise<T>
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>

var s9d = s9.then(sPromise, sPromise, sPromise); // ok
>s9d : Promise<文字>
>s9.then(sPromise, sPromise, sPromise) : Promise<文字>
>s9.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s9 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>

var s9e = s9.then(nPromise, nPromise, nPromise); // ok
>s9e : Promise<数字>
>s9.then(nPromise, nPromise, nPromise) : Promise<数字>
>s9.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s9 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>nPromise : (x: 任意) => Promise<数字>
>nPromise : (x: 任意) => Promise<数字>
>nPromise : (x: 任意) => Promise<数字>

var s9f = s9.then(testFunction, sIPromise, nIPromise); // error
>s9f : 任意
>类型别名 :=> 任意
>s9.then(testFunction, sIPromise, nIPromise) : 任意
>类型别名 :=> 任意
>s9.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s9 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction : () => IPromise<数字>
>sIPromise : (x: 任意) => IPromise<文字>
>nIPromise : (x: 任意) => IPromise<数字>

var s9g = s9.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>s9g : Promise<IPromise<文字>>
>s9.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : Promise<IPromise<文字>>
>s9.then(testFunction, nIPromise, sIPromise).then : { <TResult1 = IPromise<数字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<数字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s9.then(testFunction, nIPromise, sIPromise) : Promise<IPromise<数字>>
>s9.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s9 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction : () => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>sIPromise : (x: 任意) => IPromise<文字>
>then : { <TResult1 = IPromise<数字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<数字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var r10 = testFunction10(x => x);
>r10 : IPromise<{}>
>testFunction10(x => x) : IPromise<{}>
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>x => x : <U>(x: U) => U
>x : U
>x : U

var r10a = r10.then(testFunction10, testFunction10, testFunction10); // ok
>r10a : IPromise<{}>
>r10.then(testFunction10, testFunction10, testFunction10) : IPromise<{}>
>r10.then : { <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r10 : IPromise<{}>
>then : { <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>

var r10b = r10.then(sIPromise, sIPromise, sIPromise); // ok
>r10b : IPromise<文字>
>r10.then(sIPromise, sIPromise, sIPromise) : IPromise<文字>
>r10.then : { <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r10 : IPromise<{}>
>then : { <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var r10c = r10.then(nIPromise, nIPromise, nIPromise); // ok
>r10c : IPromise<数字>
>r10.then(nIPromise, nIPromise, nIPromise) : IPromise<数字>
>r10.then : { <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r10 : IPromise<{}>
>then : { <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>

var r10d = r10.then(testFunction, sIPromise, nIPromise); // ok
>r10d : 任意
>类型别名 :=> 任意
>r10.then(testFunction, sIPromise, nIPromise) : 任意
>类型别名 :=> 任意
>r10.then : { <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r10 : IPromise<{}>
>then : { <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction : () => IPromise<数字>
>sIPromise : (x: 任意) => IPromise<文字>
>nIPromise : (x: 任意) => IPromise<数字>

var r10e = r10.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>r10e : IPromise<文字>
>r10.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : IPromise<文字>
>r10.then(testFunction, nIPromise, sIPromise).then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r10.then(testFunction, nIPromise, sIPromise) : IPromise<数字>
>r10.then : { <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r10 : IPromise<{}>
>then : { <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction : () => IPromise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>sIPromise : (x: 任意) => IPromise<文字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var s10 = testFunction10P(x => x);
>s10 : Promise<{}>
>testFunction10P(x => x) : Promise<{}>
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>x => x : <U>(x: U) => U
>x : U
>x : U

var s10a = s10.then(testFunction10, testFunction10, testFunction10); // ok
>s10a : Promise<IPromise<{}>>
>s10.then(testFunction10, testFunction10, testFunction10) : Promise<IPromise<{}>>
>s10.then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s10 : Promise<{}>
>then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>

var s10b = s10.then(testFunction10P, testFunction10P, testFunction10P); // ok
>s10b : Promise<{}>
>s10.then(testFunction10P, testFunction10P, testFunction10P) : Promise<{}>
>s10.then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s10 : Promise<{}>
>then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>

var s10c = s10.then(testFunction10P, testFunction10, testFunction10); // ok
>s10c : Promise<{}>
>s10.then(testFunction10P, testFunction10, testFunction10) : Promise<{}>
>s10.then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s10 : Promise<{}>
>then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>

var s10d = s10.then(sPromise, sPromise, sPromise); // ok
>s10d : Promise<文字>
>s10.then(sPromise, sPromise, sPromise) : Promise<文字>
>s10.then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s10 : Promise<{}>
>then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>
>sPromise : (x: 任意) => Promise<文字>

var s10e = s10.then(nIPromise, nPromise, nIPromise); // ok
>s10e : Promise<IPromise<数字>>
>s10.then(nIPromise, nPromise, nIPromise) : Promise<IPromise<数字>>
>s10.then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s10 : Promise<{}>
>then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>nIPromise : (x: 任意) => IPromise<数字>
>nPromise : (x: 任意) => Promise<数字>
>nIPromise : (x: 任意) => IPromise<数字>

var s10f = s10.then(testFunctionP, sIPromise, nIPromise); // error
>s10f : 任意
>类型别名 :=> 任意
>s10.then(testFunctionP, sIPromise, nIPromise) : 任意
>类型别名 :=> 任意
>s10.then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s10 : Promise<{}>
>then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunctionP : () => Promise<数字>
>sIPromise : (x: 任意) => IPromise<文字>
>nIPromise : (x: 任意) => IPromise<数字>

var s10g = s10.then(testFunctionP, nIPromise, sIPromise).then(sPromise, sIPromise, sIPromise); // ok
>s10g : Promise<IPromise<文字>>
>s10.then(testFunctionP, nIPromise, sIPromise).then(sPromise, sIPromise, sIPromise) : Promise<IPromise<文字>>
>s10.then(testFunctionP, nIPromise, sIPromise).then : { <TResult1 = IPromise<数字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<数字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s10.then(testFunctionP, nIPromise, sIPromise) : Promise<IPromise<数字>>
>s10.then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s10 : Promise<{}>
>then : { <TResult1 = {}, TResult2 = 不及>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: {}) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunctionP : () => Promise<数字>
>nIPromise : (x: 任意) => IPromise<数字>
>sIPromise : (x: 任意) => IPromise<文字>
>then : { <TResult1 = IPromise<数字>, TResult2 = 不及>(onfulfilled?: (value: IPromise<数字>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: IPromise<数字>) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>sPromise : (x: 任意) => Promise<文字>
>sIPromise : (x: 任意) => IPromise<文字>
>sIPromise : (x: 任意) => IPromise<文字>

var r11: IPromise<number>;
>r11 : IPromise<数字>
>IPromise : IPromise<T>

var r11a = r11.then(testFunction11, testFunction11, testFunction11); // error
>r11a : 任意
>类型别名 :=> 任意
>r11.then(testFunction11, testFunction11, testFunction11) : 任意
>类型别名 :=> 任意
>r11.then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r11 : IPromise<数字>
>then : { <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction11 : { (x: 数字): IPromise<数字>; (x: 文字): IPromise<文字>; }
>testFunction11 : { (x: 数字): IPromise<数字>; (x: 文字): IPromise<文字>; }
>testFunction11 : { (x: 数字): IPromise<数字>; (x: 文字): IPromise<文字>; }

var s11: Promise<number>;
>s11 : Promise<数字>
>Promise : Promise<T>

var s11a = s11.then(testFunction11, testFunction11, testFunction11); // ok
>s11a : 任意
>类型别名 :=> 任意
>s11.then(testFunction11, testFunction11, testFunction11) : 任意
>类型别名 :=> 任意
>s11.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s11 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction11 : { (x: 数字): IPromise<数字>; (x: 文字): IPromise<文字>; }
>testFunction11 : { (x: 数字): IPromise<数字>; (x: 文字): IPromise<文字>; }
>testFunction11 : { (x: 数字): IPromise<数字>; (x: 文字): IPromise<文字>; }

var s11b = s11.then(testFunction11P, testFunction11P, testFunction11P); // error
>s11b : 任意
>类型别名 :=> 任意
>s11.then(testFunction11P, testFunction11P, testFunction11P) : 任意
>类型别名 :=> 任意
>s11.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s11 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction11P : { (x: 数字): Promise<数字>; (x: 文字): Promise<文字>; }
>testFunction11P : { (x: 数字): Promise<数字>; (x: 文字): Promise<文字>; }
>testFunction11P : { (x: 数字): Promise<数字>; (x: 文字): Promise<文字>; }

var s11c = s11.then(testFunction11P, testFunction11, testFunction11); // error
>s11c : 任意
>类型别名 :=> 任意
>s11.then(testFunction11P, testFunction11, testFunction11) : 任意
>类型别名 :=> 任意
>s11.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>s11 : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Promise<U>, progress?: (progress: 任意) => 无值): Promise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Promise<U>; }
>testFunction11P : { (x: 数字): Promise<数字>; (x: 文字): Promise<文字>; }
>testFunction11 : { (x: 数字): IPromise<数字>; (x: 文字): IPromise<文字>; }
>testFunction11 : { (x: 数字): IPromise<数字>; (x: 文字): IPromise<文字>; }

var r12 = testFunction12(x => x);
>r12 : IPromise<(x: 任意) => 任意>
>testFunction12(x => x) : IPromise<(x: 任意) => 任意>
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>x => x : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var r12a = r12.then(testFunction12, testFunction12, testFunction12); // ok
>r12a : IPromise<任意>
>r12.then(testFunction12, testFunction12, testFunction12) : IPromise<任意>
>r12.then : { <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>r12 : IPromise<(x: 任意) => 任意>
>then : { <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }

var s12 = testFunction12(x => x);
>s12 : IPromise<(x: 任意) => 任意>
>testFunction12(x => x) : IPromise<(x: 任意) => 任意>
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>x => x : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var s12a = s12.then(testFunction12, testFunction12, testFunction12); // ok
>s12a : IPromise<任意>
>s12.then(testFunction12, testFunction12, testFunction12) : IPromise<任意>
>s12.then : { <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>s12 : IPromise<(x: 任意) => 任意>
>then : { <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }

var s12b = s12.then(testFunction12P, testFunction12P, testFunction12P); // ok
>s12b : IPromise<任意>
>s12.then(testFunction12P, testFunction12P, testFunction12P) : IPromise<任意>
>s12.then : { <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>s12 : IPromise<(x: 任意) => 任意>
>then : { <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction12P : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): Promise<T>; }
>testFunction12P : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): Promise<T>; }
>testFunction12P : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): Promise<T>; }

var s12c = s12.then(testFunction12P, testFunction12, testFunction12); // ok
>s12c : IPromise<任意>
>s12.then(testFunction12P, testFunction12, testFunction12) : IPromise<任意>
>s12.then : { <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>s12 : IPromise<(x: 任意) => 任意>
>then : { <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: (x: 任意) => 任意) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>testFunction12P : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): Promise<T>; }
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }

