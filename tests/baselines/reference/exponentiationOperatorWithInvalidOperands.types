=== tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithInvalidOperands.ts ===
// these operators require their operands to be of type Any, the Number primitive type, or
// an enum type
enum E { a, b, c }
>E : E
>a : E.a
>b : E.b
>c : E.c

var a: any;
>a : any
>类型别名 :=> 任意

var b: boolean;
>b : boolean
>类型别名 :=> 真假

var c: number;
>c : number
>类型别名 :=> 数字

var d: string;
>d : string
>类型别名 :=> 文字

var e: { a: number };
>e : { a: number; }
>a : number
>类型别名 :=> 数字

var f: Number;
>f : Number
>Number : Number

// All of the below should be an error unless otherwise noted
// operator **
var r1a1 = a ** a; //ok
>r1a1 : number
>类型别名 :=> 数字
>a ** a : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

var r1a2 = a ** b;
>r1a2 : number
>类型别名 :=> 数字
>a ** b : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>b : boolean
>类型别名 :=> 真假

var r1a3 = a ** c; //ok
>r1a3 : number
>类型别名 :=> 数字
>a ** c : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>c : number
>类型别名 :=> 数字

var r1a4 = a ** d;
>r1a4 : number
>类型别名 :=> 数字
>a ** d : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>d : string
>类型别名 :=> 文字

var r1a5 = a ** e;
>r1a5 : number
>类型别名 :=> 数字
>a ** e : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>e : { a: number; }

var r1a6 = a ** f;
>r1a6 : number
>类型别名 :=> 数字
>a ** f : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>f : Number

var r1b1 = b ** a;
>r1b1 : number
>类型别名 :=> 数字
>b ** a : number
>类型别名 :=> 数字
>b : boolean
>类型别名 :=> 真假
>a : any
>类型别名 :=> 任意

var r1b2 = b ** b;
>r1b2 : number
>类型别名 :=> 数字
>b ** b : number
>类型别名 :=> 数字
>b : boolean
>类型别名 :=> 真假
>b : boolean
>类型别名 :=> 真假

var r1b3 = b ** c;
>r1b3 : number
>类型别名 :=> 数字
>b ** c : number
>类型别名 :=> 数字
>b : boolean
>类型别名 :=> 真假
>c : number
>类型别名 :=> 数字

var r1b4 = b ** d;
>r1b4 : number
>类型别名 :=> 数字
>b ** d : number
>类型别名 :=> 数字
>b : boolean
>类型别名 :=> 真假
>d : string
>类型别名 :=> 文字

var r1b5 = b ** e;
>r1b5 : number
>类型别名 :=> 数字
>b ** e : number
>类型别名 :=> 数字
>b : boolean
>类型别名 :=> 真假
>e : { a: number; }

var r1b6 = b ** f;
>r1b6 : number
>类型别名 :=> 数字
>b ** f : number
>类型别名 :=> 数字
>b : boolean
>类型别名 :=> 真假
>f : Number

var r1c1 = c ** a; //ok
>r1c1 : number
>类型别名 :=> 数字
>c ** a : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意

var r1c2 = c ** b;
>r1c2 : number
>类型别名 :=> 数字
>c ** b : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>b : boolean
>类型别名 :=> 真假

var r1c3 = c ** c; //ok
>r1c3 : number
>类型别名 :=> 数字
>c ** c : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字

var r1c4 = c ** d;
>r1c4 : number
>类型别名 :=> 数字
>c ** d : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>d : string
>类型别名 :=> 文字

var r1c5 = c ** e;
>r1c5 : number
>类型别名 :=> 数字
>c ** e : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>e : { a: number; }

var r1c6 = c ** f;
>r1c6 : number
>类型别名 :=> 数字
>c ** f : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>f : Number

var r1d1 = d ** a;
>r1d1 : number
>类型别名 :=> 数字
>d ** a : number
>类型别名 :=> 数字
>d : string
>类型别名 :=> 文字
>a : any
>类型别名 :=> 任意

var r1d2 = d ** b;
>r1d2 : number
>类型别名 :=> 数字
>d ** b : number
>类型别名 :=> 数字
>d : string
>类型别名 :=> 文字
>b : boolean
>类型别名 :=> 真假

var r1d3 = d ** c;
>r1d3 : number
>类型别名 :=> 数字
>d ** c : number
>类型别名 :=> 数字
>d : string
>类型别名 :=> 文字
>c : number
>类型别名 :=> 数字

var r1d4 = d ** d;
>r1d4 : number
>类型别名 :=> 数字
>d ** d : number
>类型别名 :=> 数字
>d : string
>类型别名 :=> 文字
>d : string
>类型别名 :=> 文字

var r1d5 = d ** e;
>r1d5 : number
>类型别名 :=> 数字
>d ** e : number
>类型别名 :=> 数字
>d : string
>类型别名 :=> 文字
>e : { a: number; }

var r1d6 = d ** f;
>r1d6 : number
>类型别名 :=> 数字
>d ** f : number
>类型别名 :=> 数字
>d : string
>类型别名 :=> 文字
>f : Number

var r1e1 = e ** a;
>r1e1 : number
>类型别名 :=> 数字
>e ** a : number
>类型别名 :=> 数字
>e : { a: number; }
>a : any
>类型别名 :=> 任意

var r1e2 = e ** b;
>r1e2 : number
>类型别名 :=> 数字
>e ** b : number
>类型别名 :=> 数字
>e : { a: number; }
>b : boolean
>类型别名 :=> 真假

var r1e3 = e ** c;
>r1e3 : number
>类型别名 :=> 数字
>e ** c : number
>类型别名 :=> 数字
>e : { a: number; }
>c : number
>类型别名 :=> 数字

var r1e4 = e ** d;
>r1e4 : number
>类型别名 :=> 数字
>e ** d : number
>类型别名 :=> 数字
>e : { a: number; }
>d : string
>类型别名 :=> 文字

var r1e5 = e ** e;
>r1e5 : number
>类型别名 :=> 数字
>e ** e : number
>类型别名 :=> 数字
>e : { a: number; }
>e : { a: number; }

var r1e6 = e ** f;
>r1e6 : number
>类型别名 :=> 数字
>e ** f : number
>类型别名 :=> 数字
>e : { a: number; }
>f : Number

var r1f1 = f ** a;
>r1f1 : number
>类型别名 :=> 数字
>f ** a : number
>类型别名 :=> 数字
>f : Number
>a : any
>类型别名 :=> 任意

var r1f2 = f ** b;
>r1f2 : number
>类型别名 :=> 数字
>f ** b : number
>类型别名 :=> 数字
>f : Number
>b : boolean
>类型别名 :=> 真假

var r1f3 = f ** c;
>r1f3 : number
>类型别名 :=> 数字
>f ** c : number
>类型别名 :=> 数字
>f : Number
>c : number
>类型别名 :=> 数字

var r1f4 = f ** d;
>r1f4 : number
>类型别名 :=> 数字
>f ** d : number
>类型别名 :=> 数字
>f : Number
>d : string
>类型别名 :=> 文字

var r1f5 = f ** e;
>r1f5 : number
>类型别名 :=> 数字
>f ** e : number
>类型别名 :=> 数字
>f : Number
>e : { a: number; }

var r1f6 = f ** f;
>r1f6 : number
>类型别名 :=> 数字
>f ** f : number
>类型别名 :=> 数字
>f : Number
>f : Number

var r1g1 = E.a ** a; //ok
>r1g1 : number
>类型别名 :=> 数字
>E.a ** a : number
>类型别名 :=> 数字
>E.a : E.a
>E : typeof E
>a : E.a
>a : any
>类型别名 :=> 任意

var r1g2 = E.a ** b;
>r1g2 : number
>类型别名 :=> 数字
>E.a ** b : number
>类型别名 :=> 数字
>E.a : E.a
>E : typeof E
>a : E.a
>b : boolean
>类型别名 :=> 真假

var r1g3 = E.a ** c; //ok
>r1g3 : number
>类型别名 :=> 数字
>E.a ** c : number
>类型别名 :=> 数字
>E.a : E.a
>E : typeof E
>a : E.a
>c : number
>类型别名 :=> 数字

var r1g4 = E.a ** d;
>r1g4 : number
>类型别名 :=> 数字
>E.a ** d : number
>类型别名 :=> 数字
>E.a : E.a
>E : typeof E
>a : E.a
>d : string
>类型别名 :=> 文字

var r1g5 = E.a ** e;
>r1g5 : number
>类型别名 :=> 数字
>E.a ** e : number
>类型别名 :=> 数字
>E.a : E.a
>E : typeof E
>a : E.a
>e : { a: number; }

var r1g6 = E.a ** f;
>r1g6 : number
>类型别名 :=> 数字
>E.a ** f : number
>类型别名 :=> 数字
>E.a : E.a
>E : typeof E
>a : E.a
>f : Number

var r1h1 = a ** E.b; //ok
>r1h1 : number
>类型别名 :=> 数字
>a ** E.b : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>E.b : E.b
>E : typeof E
>b : E.b

var r1h2 = b ** E.b;
>r1h2 : number
>类型别名 :=> 数字
>b ** E.b : number
>类型别名 :=> 数字
>b : boolean
>类型别名 :=> 真假
>E.b : E.b
>E : typeof E
>b : E.b

var r1h3 = c ** E.b; //ok
>r1h3 : number
>类型别名 :=> 数字
>c ** E.b : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>E.b : E.b
>E : typeof E
>b : E.b

var r1h4 = d ** E.b;
>r1h4 : number
>类型别名 :=> 数字
>d ** E.b : number
>类型别名 :=> 数字
>d : string
>类型别名 :=> 文字
>E.b : E.b
>E : typeof E
>b : E.b

var r1h5 = e ** E.b;
>r1h5 : number
>类型别名 :=> 数字
>e ** E.b : number
>类型别名 :=> 数字
>e : { a: number; }
>E.b : E.b
>E : typeof E
>b : E.b

var r1h6 = f ** E.b
>r1h6 : number
>类型别名 :=> 数字
>f ** E.b : number
>类型别名 :=> 数字
>f : Number
>E.b : E.b
>E : typeof E
>b : E.b

