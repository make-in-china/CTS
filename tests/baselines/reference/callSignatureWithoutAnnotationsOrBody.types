=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignatureWithoutAnnotationsOrBody.ts ===
// Call signatures without a return type annotation and function body return 'any'

function foo(x) { }
>foo : (x: any) => void
>x : any
>类型别名 :=> 任意

var r = foo(1); // void since there's a body
>r : void
>类型别名 :=> 无值
>foo(1) : void
>类型别名 :=> 无值
>foo : (x: any) => void
>1 : 1

interface I {
>I : I

    ();
    f();
>f : () => any
}
var i: I;
>i : I
>I : I

var r2 = i();
>r2 : any
>类型别名 :=> 任意
>i() : any
>类型别名 :=> 任意
>i : I

var r3 = i.f();
>r3 : any
>类型别名 :=> 任意
>i.f() : any
>类型别名 :=> 任意
>i.f : () => any
>i : I
>f : () => any

var a: {
>a : { (): any; f(): any; }

    ();
    f();
>f : () => any

};
var r4 = a();
>r4 : any
>类型别名 :=> 任意
>a() : any
>类型别名 :=> 任意
>a : { (): any; f(): any; }

var r5 = a.f();
>r5 : any
>类型别名 :=> 任意
>a.f() : any
>类型别名 :=> 任意
>a.f : () => any
>a : { (): any; f(): any; }
>f : () => any

