=== tests/cases/compiler/aliasUsage1_main.ts ===
import Backbone = require("./aliasUsage1_backbone");
>Backbone : 类为 Backbone

import moduleA = require("./aliasUsage1_moduleA");
>moduleA : 类为 moduleA

interface IHasVisualizationModel {
>IHasVisualizationModel : IHasVisualizationModel

    VisualizationModel: typeof Backbone.Model;
>VisualizationModel : 类为 Backbone.Model
>Backbone.Model : 类为 Backbone.Model
>Backbone : 类为 Backbone
>Model : 类为 Backbone.Model
}
class C2 {
>C2 : C2

    x: IHasVisualizationModel;
>x : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel

    get A() {
>A : IHasVisualizationModel

        return this.x;
>this.x : IHasVisualizationModel
>this : 本体
>x : IHasVisualizationModel
    }
    set A(x) {
>A : IHasVisualizationModel
>x : IHasVisualizationModel

        x = moduleA;
>x = moduleA : 类为 moduleA
>x : IHasVisualizationModel
>moduleA : 类为 moduleA
    }
}
=== tests/cases/compiler/aliasUsage1_backbone.ts ===
export class Model {
>Model : Model

    public someData: string;
>someData : 文字
>类型别名 :=> 文字
}

=== tests/cases/compiler/aliasUsage1_moduleA.ts ===
import Backbone = require("./aliasUsage1_backbone");
>Backbone : 类为 Backbone

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : VisualizationModel
>Backbone.Model : Backbone.Model
>Backbone : 类为 Backbone
>Model : 类为 Backbone.Model

    // interesting stuff here
}

