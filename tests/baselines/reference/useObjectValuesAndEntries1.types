=== tests/cases/conformance/es2017/useObjectValuesAndEntries1.ts ===
var o = { a: 1, b: 2 };
>o : { a: 数字; b: 数字; }
>{ a: 1, b: 2 } : { a: 数字; b: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 数字
>类型别名 :=> 数字
>2 : 2

for (var x of Object.values(o)) {
>x : 数字
>类型别名 :=> 数字
>Object.values(o) : 数字[]
>Object.values : { <T>(o: { [s: 文字]: T; } | { [n: 数字]: T; }): T[]; (o: 任意): 任意[]; }
>Object : ObjectConstructor
>values : { <T>(o: { [s: 文字]: T; } | { [n: 数字]: T; }): T[]; (o: 任意): 任意[]; }
>o : { a: 数字; b: 数字; }

    let y = x;
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
}

var entries = Object.entries(o);  // <-- entries: ['a' | 'b', number][]
>entries : [文字, 数字][]
>Object.entries(o) : [文字, 数字][]
>Object.entries : { <T>(o: { [s: 文字]: T; } | { [n: 数字]: T; }): [文字, T][]; (o: 任意): [文字, 任意][]; }
>Object : ObjectConstructor
>entries : { <T>(o: { [s: 文字]: T; } | { [n: 数字]: T; }): [文字, T][]; (o: 任意): [文字, 任意][]; }
>o : { a: 数字; b: 数字; }

var entries1 = Object.entries(1); // <-- entries: [string, any][]
>entries1 : [文字, 任意][]
>Object.entries(1) : [文字, 任意][]
>Object.entries : { <T>(o: { [s: 文字]: T; } | { [n: 数字]: T; }): [文字, T][]; (o: 任意): [文字, 任意][]; }
>Object : ObjectConstructor
>entries : { <T>(o: { [s: 文字]: T; } | { [n: 数字]: T; }): [文字, T][]; (o: 任意): [文字, 任意][]; }
>1 : 1

var entries2 = Object.entries({a: true, b: 2}) // ['a' | 'b', number | boolean][]
>entries2 : [文字, 数字 | 真假][]
>Object.entries({a: true, b: 2}) : [文字, 数字 | 真假][]
>Object.entries : { <T>(o: { [s: 文字]: T; } | { [n: 数字]: T; }): [文字, T][]; (o: 任意): [文字, 任意][]; }
>Object : ObjectConstructor
>entries : { <T>(o: { [s: 文字]: T; } | { [n: 数字]: T; }): [文字, T][]; (o: 任意): [文字, 任意][]; }
>{a: true, b: 2} : { a: 为真; b: 2; }
>a : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>b : 数字
>类型别名 :=> 数字
>2 : 2

var entries3 = Object.entries({}) // [never, any][]
>entries3 : [文字, {}][]
>Object.entries({}) : [文字, {}][]
>Object.entries : { <T>(o: { [s: 文字]: T; } | { [n: 数字]: T; }): [文字, T][]; (o: 任意): [文字, 任意][]; }
>Object : ObjectConstructor
>entries : { <T>(o: { [s: 文字]: T; } | { [n: 数字]: T; }): [文字, T][]; (o: 任意): [文字, 任意][]; }
>{} : {}

