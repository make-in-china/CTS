=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfUnion.ts ===
enum E { e1, e2 }
>E : E
>e1 : E.e1
>e2 : E.e2

interface I8 { [x: string]: number[]; }
>I8 : I8
>x : 文字
>类型别名 :=> 文字

class A { foo: number; }
>A : A
>foo : 数字
>类型别名 :=> 数字

class A2<T> { foo: T; }
>A2 : A2<T>
>T : T
>foo : T
>T : T

function f() { }
>f : 类为 f

module f { export var bar = 1; }
>f : 类为 f
>bar : 数字
>类型别名 :=> 数字
>1 : 1

class c { baz: string }
>c : c
>baz : 文字
>类型别名 :=> 文字

module c { export var bar = 1; }
>c : 类为 c
>bar : 数字
>类型别名 :=> 数字
>1 : 1

// A type T is a subtype of a union type U if T is a subtype of any type in U.
interface I1<T> {
>I1 : I1<T>
>T : T

    [x: string]: string | number;
>x : 文字
>类型别名 :=> 文字

    foo: any; // ok
>foo : 任意
>类型别名 :=> 任意

    foo2: string; // ok
>foo2 : 文字
>类型别名 :=> 文字

    foo3: number; // ok
>foo3 : 数字
>类型别名 :=> 数字

    foo4: boolean; // error 
>foo4 : 真假
>类型别名 :=> 真假

    foo5: E; // ok - subtype of number 
>foo5 : E
>E : E

    foo6: Date; // error
>foo6 : Date
>Date : Date

    foo7: RegExp; // error
>foo7 : RegExp
>RegExp : RegExp

    foo8: { bar: number }; // error
>foo8 : { bar: 数字; }
>bar : 数字
>类型别名 :=> 数字

    foo9: I8; // error
>foo9 : I8
>I8 : I8

    foo10: A; // error
>foo10 : A
>A : A

    foo11: A2<number>; // error
>foo11 : A2<数字>
>A2 : A2<T>

    foo12: (x) => number; //error
>foo12 : (x: 任意) => 数字
>x : 任意
>类型别名 :=> 任意

    foo13: <T>(x: T) => T; // error
>foo13 : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

    foo14: typeof f; // error
>foo14 : 类为 f
>f : 类为 f

    foo15: typeof c; // error
>foo15 : 类为 c
>c : 类为 c

    foo16: T; // error
>foo16 : T
>T : T

    foo17: Object; // error
>foo17 : Object
>Object : Object

    foo18: {}; // error
>foo18 : {}
}
interface I2<T> {
>I2 : I2<T>
>T : T

    [x: string]: E | number;
>x : 文字
>类型别名 :=> 文字
>E : E

    foo: any; // ok
>foo : 任意
>类型别名 :=> 任意

    foo2: string; // error
>foo2 : 文字
>类型别名 :=> 文字

    foo3: number; // ok
>foo3 : 数字
>类型别名 :=> 数字

    foo4: boolean; // error 
>foo4 : 真假
>类型别名 :=> 真假

    foo5: E; // ok
>foo5 : E
>E : E

    foo6: Date; // error
>foo6 : Date
>Date : Date

    foo7: RegExp; // error
>foo7 : RegExp
>RegExp : RegExp

    foo8: { bar: number }; // error
>foo8 : { bar: 数字; }
>bar : 数字
>类型别名 :=> 数字

    foo9: I8; // error
>foo9 : I8
>I8 : I8

    foo10: A; // error
>foo10 : A
>A : A

    foo11: A2<number>; // error
>foo11 : A2<数字>
>A2 : A2<T>

    foo12: (x) => number; //error
>foo12 : (x: 任意) => 数字
>x : 任意
>类型别名 :=> 任意

    foo13: <T>(x: T) => T; // error
>foo13 : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

    foo14: typeof f; // error
>foo14 : 类为 f
>f : 类为 f

    foo15: typeof c; // error
>foo15 : 类为 c
>c : 类为 c

    foo16: T; // error
>foo16 : T
>T : T

    foo17: Object; // error
>foo17 : Object
>Object : Object

    foo18: {}; // error
>foo18 : {}
}
