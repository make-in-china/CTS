=== tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor8.ts ===
declare function dec<T>(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;
>dec : <T>(target: 任意, propertyKey: 文字, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>
>T : T
>target : 任意
>类型别名 :=> 任意
>propertyKey : 文字
>类型别名 :=> 文字
>descriptor : TypedPropertyDescriptor<T>
>TypedPropertyDescriptor : TypedPropertyDescriptor<T>
>T : T
>TypedPropertyDescriptor : TypedPropertyDescriptor<T>
>T : T

class A {
>A : A

    @dec get x() { return 0; }
>dec : <T>(target: 任意, propertyKey: 文字, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>
>x : 数字
>类型别名 :=> 数字
>0 : 0

    set x(value: number) { }
>x : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字
}

class B {
>B : B

    get x() { return 0; }
>x : 数字
>类型别名 :=> 数字
>0 : 0

    @dec set x(value: number) { }
>dec : <T>(target: 任意, propertyKey: 文字, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>
>x : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字
}

class C {
>C : C

    @dec set x(value: number) { }
>dec : <T>(target: 任意, propertyKey: 文字, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>
>x : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字

    get x() { return 0; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
}

class D {
>D : D

    set x(value: number) { }
>x : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字

    @dec get x() { return 0; }
>dec : <T>(target: 任意, propertyKey: 文字, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>
>x : 数字
>类型别名 :=> 数字
>0 : 0
}

class E {
>E : E

    @dec get x() { return 0; }
>dec : <T>(target: 任意, propertyKey: 文字, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>
>x : 数字
>类型别名 :=> 数字
>0 : 0
}

class F {
>F : F

    @dec set x(value: number) { }
>dec : <T>(target: 任意, propertyKey: 文字, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>
>x : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字
}
