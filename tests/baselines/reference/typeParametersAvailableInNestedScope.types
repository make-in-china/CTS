=== tests/cases/conformance/types/typeParameters/typeParameterLists/typeParametersAvailableInNestedScope.ts ===
class C<T> {
>C : C<T>
>T : T

    data: T;
>data : T
>T : T

    x = <U>(a: U) => {
>x : <U>(a: U) => T
><U>(a: U) => {        var y: T;        return y;    } : <U>(a: U) => T
>U : U
>a : U
>U : U

        var y: T;
>y : T
>T : T

        return y;
>y : T
    }

    foo() {
>foo : () => T

        function temp<U>(a: U) {
>temp : <U>(a: U) => T
>U : U
>a : U
>U : U

            var y: T;
>y : T
>T : T

            return y;
>y : T
        }
        return temp(<T>null);
>temp(<T>null) : T
>temp : <U>(a: U) => T
><T>null : T
>T : T
>null : null
>类型别名 :=> 空值
    }
}

var c = new C<number>();
>c : C<number>
>new C<number>() : C<number>
>C : typeof C

c.data = c.x(null);
>c.data = c.x(null) : number
>类型别名 :=> 数字
>c.data : number
>类型别名 :=> 数字
>c : C<number>
>data : number
>类型别名 :=> 数字
>c.x(null) : number
>类型别名 :=> 数字
>c.x : <U>(a: U) => number
>c : C<number>
>x : <U>(a: U) => number
>null : null
>类型别名 :=> 空值

c.data = c.foo();
>c.data = c.foo() : number
>类型别名 :=> 数字
>c.data : number
>类型别名 :=> 数字
>c : C<number>
>data : number
>类型别名 :=> 数字
>c.foo() : number
>类型别名 :=> 数字
>c.foo : () => number
>c : C<number>
>foo : () => number

