=== tests/cases/conformance/expressions/typeGuards/typeGuardEnums.ts ===
enum E {}
>E : E

enum V {}
>V : V

let x: number|string|E|V;
>x : string | number | E | V
>E : E
>V : V

if (typeof x === "number") {
>typeof x === "number" : boolean
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number | E | V
>"number" : "number"

    x; // number|E|V
>x : number | E | V
}
else {
    x; // string
>x : string
}

if (typeof x !== "number") {
>typeof x !== "number" : boolean
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number | E | V
>"number" : "number"

    x; // string
>x : string
}
else {
    x; // number|E|V
>x : number | E | V
}

