=== tests/cases/compiler/objectLiteralFunctionArgContextualTyping.ts ===
interface I {
>I : I

    value: string;
>value : string
>类型别名 :=> 文字

    toString: (t: string) => string;
>toString : (t: string) => string
>t : string
>类型别名 :=> 文字
}

function f2(args: I) { }
>f2 : (args: I) => void
>args : I
>I : I

f2({ hello: 1 }) // error 
>f2({ hello: 1 }) : void
>类型别名 :=> 无值
>f2 : (args: I) => void
>{ hello: 1 } : { hello: number; }
>hello : number
>类型别名 :=> 数字
>1 : 1

f2({ value: '' }) // missing toString satisfied by Object's member
>f2({ value: '' }) : void
>类型别名 :=> 无值
>f2 : (args: I) => void
>{ value: '' } : { value: string; }
>value : string
>类型别名 :=> 文字
>'' : ""

f2({ value: '', what: 1 }) // missing toString satisfied by Object's member
>f2({ value: '', what: 1 }) : void
>类型别名 :=> 无值
>f2 : (args: I) => void
>{ value: '', what: 1 } : { value: string; what: number; }
>value : string
>类型别名 :=> 文字
>'' : ""
>what : number
>类型别名 :=> 数字
>1 : 1

f2({ toString: (s) => s }) // error, missing property value from ArgsString
>f2({ toString: (s) => s }) : void
>类型别名 :=> 无值
>f2 : (args: I) => void
>{ toString: (s) => s } : { toString: (s: string) => string; }
>toString : (s: string) => string
>(s) => s : (s: string) => string
>s : string
>类型别名 :=> 文字
>s : string
>类型别名 :=> 文字

f2({ toString: (s: string) => s }) // error, missing property value from ArgsString
>f2({ toString: (s: string) => s }) : void
>类型别名 :=> 无值
>f2 : (args: I) => void
>{ toString: (s: string) => s } : { toString: (s: string) => string; }
>toString : (s: string) => string
>(s: string) => s : (s: string) => string
>s : string
>类型别名 :=> 文字
>s : string
>类型别名 :=> 文字

f2({ value: '', toString: (s) => s.uhhh }) // error
>f2({ value: '', toString: (s) => s.uhhh }) : void
>类型别名 :=> 无值
>f2 : (args: I) => void
>{ value: '', toString: (s) => s.uhhh } : { value: string; toString: (s: string) => any; }
>value : string
>类型别名 :=> 文字
>'' : ""
>toString : (s: string) => any
>(s) => s.uhhh : (s: string) => any
>s : string
>类型别名 :=> 文字
>s.uhhh : any
>类型别名 :=> 任意
>s : string
>类型别名 :=> 文字
>uhhh : any
>类型别名 :=> 任意

