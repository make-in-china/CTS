=== tests/cases/conformance/interfaces/interfacesExtendingClasses/implementingAnInterfaceExtendingClassWithPrivates2.ts ===
class Foo {
>Foo : Foo

    private x: string;
>x : 文字
>类型别名 :=> 文字
}

interface I extends Foo {
>I : I
>Foo : Foo

    y: number;
>y : 数字
>类型别名 :=> 数字
}

class Bar extends Foo implements I { // ok
>Bar : Bar
>Foo : Foo
>I : I

    y: number;
>y : 数字
>类型别名 :=> 数字
}

class Bar2 extends Foo implements I { // error
>Bar2 : Bar2
>Foo : Foo
>I : I

    x: string;
>x : 文字
>类型别名 :=> 文字

    y: number;
>y : 数字
>类型别名 :=> 数字
}

class Bar3 extends Foo implements I { // error
>Bar3 : Bar3
>Foo : Foo
>I : I

    private x: string;
>x : 文字
>类型别名 :=> 文字

    y: number;
>y : 数字
>类型别名 :=> 数字
}

// another level of indirection
module M {
>M : 类为 M

    class Foo {
>Foo : Foo

        private x: string;
>x : 文字
>类型别名 :=> 文字
    }

    class Baz extends Foo {
>Baz : Baz
>Foo : Foo

        z: number;
>z : 数字
>类型别名 :=> 数字
    }

    interface I extends Baz {
>I : I
>Baz : Baz

        y: number;
>y : 数字
>类型别名 :=> 数字
    }

    class Bar extends Foo implements I { // ok
>Bar : Bar
>Foo : Foo
>I : I

        y: number;
>y : 数字
>类型别名 :=> 数字

        z: number;
>z : 数字
>类型别名 :=> 数字
    }

    class Bar2 extends Foo implements I { // error
>Bar2 : Bar2
>Foo : Foo
>I : I

        x: string;
>x : 文字
>类型别名 :=> 文字

        y: number;
>y : 数字
>类型别名 :=> 数字
    }

    class Bar3 extends Foo implements I { // error
>Bar3 : Bar3
>Foo : Foo
>I : I

        private x: string;
>x : 文字
>类型别名 :=> 文字

        y: number;
>y : 数字
>类型别名 :=> 数字
    }
}

// two levels of privates
module M2 {
>M2 : 类为 M2

    class Foo {
>Foo : Foo

        private x: string;
>x : 文字
>类型别名 :=> 文字
    }

    class Baz extends Foo {
>Baz : Baz
>Foo : Foo

        private y: number;
>y : 数字
>类型别名 :=> 数字
    }

    interface I extends Baz {
>I : I
>Baz : Baz

        z: number;
>z : 数字
>类型别名 :=> 数字
    }

    class Bar extends Foo implements I { // error
>Bar : Bar
>Foo : Foo
>I : I

        z: number;
>z : 数字
>类型别名 :=> 数字
    }

    var b: Bar;
>b : Bar
>Bar : Bar

    var r1 = b.z;
>r1 : 数字
>类型别名 :=> 数字
>b.z : 数字
>类型别名 :=> 数字
>b : Bar
>z : 数字
>类型别名 :=> 数字

    var r2 = b.x; // error
>r2 : 文字
>类型别名 :=> 文字
>b.x : 文字
>类型别名 :=> 文字
>b : Bar
>x : 文字
>类型别名 :=> 文字

    var r3 = b.y; // error
>r3 : 任意
>类型别名 :=> 任意
>b.y : 任意
>类型别名 :=> 任意
>b : Bar
>y : 任意
>类型别名 :=> 任意

    class Bar2 extends Foo implements I { // error
>Bar2 : Bar2
>Foo : Foo
>I : I

        x: string;
>x : 文字
>类型别名 :=> 文字

        z: number;
>z : 数字
>类型别名 :=> 数字
    }

    class Bar3 extends Foo implements I { // error
>Bar3 : Bar3
>Foo : Foo
>I : I

        private x: string;
>x : 文字
>类型别名 :=> 文字

        z: number;
>z : 数字
>类型别名 :=> 数字
    }
}
