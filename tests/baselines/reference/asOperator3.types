=== tests/cases/conformance/expressions/asOperator/asOperator3.ts ===
declare function tag(...x: any[]): any;
>tag : (...x: any[]) => any
>x : any[]

var a = `${123 + 456 as number}`;
>a : string
>类型别名 :=> 文字
>`${123 + 456 as number}` : string
>类型别名 :=> 文字
>123 + 456 as number : number
>类型别名 :=> 数字
>123 + 456 : number
>类型别名 :=> 数字
>123 : 123
>456 : 456

var b = `leading ${123 + 456 as number}`;
>b : string
>类型别名 :=> 文字
>`leading ${123 + 456 as number}` : string
>类型别名 :=> 文字
>123 + 456 as number : number
>类型别名 :=> 数字
>123 + 456 : number
>类型别名 :=> 数字
>123 : 123
>456 : 456

var c = `${123 + 456 as number} trailing`;
>c : string
>类型别名 :=> 文字
>`${123 + 456 as number} trailing` : string
>类型别名 :=> 文字
>123 + 456 as number : number
>类型别名 :=> 数字
>123 + 456 : number
>类型别名 :=> 数字
>123 : 123
>456 : 456

var d = `Hello ${123} World` as string;
>d : string
>类型别名 :=> 文字
>`Hello ${123} World` as string : string
>类型别名 :=> 文字
>`Hello ${123} World` : string
>类型别名 :=> 文字
>123 : 123

var e = `Hello` as string;
>e : string
>类型别名 :=> 文字
>`Hello` as string : string
>类型别名 :=> 文字
>`Hello` : "Hello"

var f = 1 + `${1} end of string` as string;
>f : string
>类型别名 :=> 文字
>1 + `${1} end of string` as string : string
>类型别名 :=> 文字
>1 + `${1} end of string` : string
>类型别名 :=> 文字
>1 : 1
>`${1} end of string` : string
>类型别名 :=> 文字
>1 : 1

var g = tag `Hello ${123} World` as string;
>g : string
>类型别名 :=> 文字
>tag `Hello ${123} World` as string : string
>类型别名 :=> 文字
>tag `Hello ${123} World` : any
>类型别名 :=> 任意
>tag : (...x: any[]) => any
>`Hello ${123} World` : string
>类型别名 :=> 文字
>123 : 123

var h = tag `Hello` as string;
>h : string
>类型别名 :=> 文字
>tag `Hello` as string : string
>类型别名 :=> 文字
>tag `Hello` : any
>类型别名 :=> 任意
>tag : (...x: any[]) => any
>`Hello` : "Hello"

