=== tests/cases/compiler/privateVisibility.ts ===
class Foo {
>Foo : Foo

	public pubMeth() {this.privMeth();}
>pubMeth : () => 无值
>this.privMeth() : 无值
>类型别名 :=> 无值
>this.privMeth : () => 无值
>this : 本体
>privMeth : () => 无值

	private privMeth() {}
>privMeth : () => 无值

	public pubProp = 0;
>pubProp : 数字
>类型别名 :=> 数字
>0 : 0

	private privProp = 0;
>privProp : 数字
>类型别名 :=> 数字
>0 : 0
}

var f = new Foo();
>f : Foo
>new Foo() : Foo
>Foo : 类为 Foo

f.privMeth(); // should not work
>f.privMeth() : 无值
>类型别名 :=> 无值
>f.privMeth : () => 无值
>f : Foo
>privMeth : () => 无值

f.privProp; // should not work
>f.privProp : 数字
>类型别名 :=> 数字
>f : Foo
>privProp : 数字
>类型别名 :=> 数字

f.pubMeth(); // should work
>f.pubMeth() : 无值
>类型别名 :=> 无值
>f.pubMeth : () => 无值
>f : Foo
>pubMeth : () => 无值

f.pubProp; // should work
>f.pubProp : 数字
>类型别名 :=> 数字
>f : Foo
>pubProp : 数字
>类型别名 :=> 数字

module M {
>M : 类为 M

    export class C { public pub = 0; private priv = 1; }
>C : C
>pub : 数字
>类型别名 :=> 数字
>0 : 0
>priv : 数字
>类型别名 :=> 数字
>1 : 1

    export var V = 0;
>V : 数字
>类型别名 :=> 数字
>0 : 0
}


var c = new M.C();
>c : M.C
>new M.C() : M.C
>M.C : 类为 M.C
>M : 类为 M
>C : 类为 M.C

c.pub; // should work
>c.pub : 数字
>类型别名 :=> 数字
>c : M.C
>pub : 数字
>类型别名 :=> 数字

c.priv; // should not work
>c.priv : 数字
>类型别名 :=> 数字
>c : M.C
>priv : 数字
>类型别名 :=> 数字


