=== tests/cases/conformance/types/any/narrowFromAnyWithTypePredicate.ts ===
declare var x: any;
>x : 任意
>类型别名 :=> 任意

declare function isFunction(x): x is Function;
>isFunction : (x: 任意) => x 作为 Function
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>Function : Function

declare function isObject(x): x is Object;
>isObject : (x: 任意) => x 作为 Object
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>Object : Object

declare function isAnything(x): x is {};
>isAnything : (x: 任意) => x 作为 {}
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

declare function isError(x): x is Error;
>isError : (x: 任意) => x 作为 Error
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>Error : Error

declare function isDate(x): x is Date;
>isDate : (x: 任意) => x 作为 Date
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>Date : Date


if (isFunction(x)) { // 'any' is not narrowed when target type is 'Function'
>isFunction(x) : 真假
>类型别名 :=> 真假
>isFunction : (x: 任意) => x 作为 Function
>x : 任意
>类型别名 :=> 任意

    x();
>x() : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    x(1, 2, 3);
>x(1, 2, 3) : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>1 : 1
>2 : 2
>3 : 3

    x("hello!");
>x("hello!") : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>"hello!" : "hello!"

    x.prop;
>x.prop : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>prop : 任意
>类型别名 :=> 任意
}

if (isObject(x)) { // 'any' is not narrowed when target type is 'Object'
>isObject(x) : 真假
>类型别名 :=> 真假
>isObject : (x: 任意) => x 作为 Object
>x : 任意
>类型别名 :=> 任意

    x.method();
>x.method() : 任意
>类型别名 :=> 任意
>x.method : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

    x();
>x() : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
}

if (isAnything(x)) { // 'any' is narrowed to types other than 'Function'/'Object' (including {})
>isAnything(x) : 真假
>类型别名 :=> 真假
>isAnything : (x: 任意) => x 作为 {}
>x : 任意
>类型别名 :=> 任意

    x.method();
>x.method() : 任意
>类型别名 :=> 任意
>x.method : 任意
>类型别名 :=> 任意
>x : {}
>method : 任意
>类型别名 :=> 任意

    x();
>x() : 任意
>类型别名 :=> 任意
>x : {}
}

if (isError(x)) { 
>isError(x) : 真假
>类型别名 :=> 真假
>isError : (x: 任意) => x 作为 Error
>x : 任意
>类型别名 :=> 任意

    x.message;
>x.message : 文字
>类型别名 :=> 文字
>x : Error
>message : 文字
>类型别名 :=> 文字

    x.mesage;
>x.mesage : 任意
>类型别名 :=> 任意
>x : Error
>mesage : 任意
>类型别名 :=> 任意
}

if (isDate(x)) {
>isDate(x) : 真假
>类型别名 :=> 真假
>isDate : (x: 任意) => x 作为 Date
>x : 任意
>类型别名 :=> 任意

    x.getDate();
>x.getDate() : 数字
>类型别名 :=> 数字
>x.getDate : () => 数字
>x : Date
>getDate : () => 数字

    x.getHuors();
>x.getHuors() : 任意
>类型别名 :=> 任意
>x.getHuors : 任意
>类型别名 :=> 任意
>x : Date
>getHuors : 任意
>类型别名 :=> 任意
}

