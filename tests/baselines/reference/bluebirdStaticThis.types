=== tests/cases/compiler/bluebirdStaticThis.ts ===
// This version is reduced from the full d.ts by removing almost all the tests
// and all the comments.
// Then it adds explicit `this` arguments to the static members.
// Tests by: Bart van der Schoor <https://github.com/Bartvds>
export declare class Promise<R> implements Promise.Thenable<R> {
>Promise : Promise<R>
>R : R
>Promise.Thenable : 任意
>类型别名 :=> 任意
>Promise : 类为 Promise
>Thenable : Promise.Thenable<R>
>R : R

	constructor(callback: (resolve: (thenableOrResult: R | Promise.Thenable<R>) => void, reject: (error: any) => void) => void);
>callback : (resolve: (thenableOrResult: R | Promise.Thenable<R>) => 无值, reject: (error: 任意) => 无值) => 无值
>resolve : (thenableOrResult: R | Promise.Thenable<R>) => 无值
>thenableOrResult : R | Promise.Thenable<R>
>R : R
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>reject : (error: 任意) => 无值
>error : 任意
>类型别名 :=> 任意

    static try<R>(dit: typeof Promise, fn: () => Promise.Thenable<R>, args?: any[], ctx?: any): Promise<R>;
>try : { <R>(dit: 类为 Promise, fn: () => Promise.Thenable<R>, args?: 任意[], ctx?: 任意): Promise<R>; <R>(dit: 类为 Promise, fn: () => R, args?: 任意[], ctx?: 任意): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>fn : () => Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>args : 任意[]
>ctx : 任意
>类型别名 :=> 任意
>Promise : Promise<R>
>R : R

    static try<R>(dit: typeof Promise, fn: () => R, args?: any[], ctx?: any): Promise<R>;
>try : { <R>(dit: 类为 Promise, fn: () => Promise.Thenable<R>, args?: 任意[], ctx?: 任意): Promise<R>; <R>(dit: 类为 Promise, fn: () => R, args?: 任意[], ctx?: 任意): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>fn : () => R
>R : R
>args : 任意[]
>ctx : 任意
>类型别名 :=> 任意
>Promise : Promise<R>
>R : R

    static attempt<R>(dit: typeof Promise, fn: () => Promise.Thenable<R>, args?: any[], ctx?: any): Promise<R>;
>attempt : { <R>(dit: 类为 Promise, fn: () => Promise.Thenable<R>, args?: 任意[], ctx?: 任意): Promise<R>; <R>(dit: 类为 Promise, fn: () => R, args?: 任意[], ctx?: 任意): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>fn : () => Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>args : 任意[]
>ctx : 任意
>类型别名 :=> 任意
>Promise : Promise<R>
>R : R

    static attempt<R>(dit: typeof Promise, fn: () => R, args?: any[], ctx?: any): Promise<R>;
>attempt : { <R>(dit: 类为 Promise, fn: () => Promise.Thenable<R>, args?: 任意[], ctx?: 任意): Promise<R>; <R>(dit: 类为 Promise, fn: () => R, args?: 任意[], ctx?: 任意): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>fn : () => R
>R : R
>args : 任意[]
>ctx : 任意
>类型别名 :=> 任意
>Promise : Promise<R>
>R : R

    static method(dit: typeof Promise, fn: Function): Function;
>method : (dit: 类为 Promise, fn: Function) => Function
>dit : 类为 Promise
>Promise : 类为 Promise
>fn : Function
>Function : Function
>Function : Function

    static resolve(dit: typeof Promise): Promise<void>;
>resolve : { (dit: 类为 Promise): Promise<无值>; <R>(dit: 类为 Promise, value: Promise.Thenable<R>): Promise<R>; <R>(dit: 类为 Promise, value: R): Promise<R>; }
>dit : 类为 Promise
>Promise : 类为 Promise
>Promise : Promise<R>

    static resolve<R>(dit: typeof Promise, value: Promise.Thenable<R>): Promise<R>;
>resolve : { (dit: 类为 Promise): Promise<无值>; <R>(dit: 类为 Promise, value: Promise.Thenable<R>): Promise<R>; <R>(dit: 类为 Promise, value: R): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>value : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static resolve<R>(dit: typeof Promise, value: R): Promise<R>;
>resolve : { (dit: 类为 Promise): Promise<无值>; <R>(dit: 类为 Promise, value: Promise.Thenable<R>): Promise<R>; <R>(dit: 类为 Promise, value: R): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>value : R
>R : R
>Promise : Promise<R>
>R : R

    static reject(dit: typeof Promise, reason: any): Promise<any>;
>reject : { (dit: 类为 Promise, reason: 任意): Promise<任意>; <R>(dit: 类为 Promise, reason: 任意): Promise<R>; }
>dit : 类为 Promise
>Promise : 类为 Promise
>reason : 任意
>类型别名 :=> 任意
>Promise : Promise<R>

    static reject<R>(dit: typeof Promise, reason: any): Promise<R>;
>reject : { (dit: 类为 Promise, reason: 任意): Promise<任意>; <R>(dit: 类为 Promise, reason: 任意): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>reason : 任意
>类型别名 :=> 任意
>Promise : Promise<R>
>R : R

    static defer<R>(dit: typeof Promise): Promise.Resolver<R>;
>defer : <R>(dit: 类为 Promise) => 任意
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>Promise : 任意
>类型别名 :=> 任意
>Resolver : No type information available!
>R : R

    static cast<R>(dit: typeof Promise, value: Promise.Thenable<R>): Promise<R>;
>cast : { <R>(dit: 类为 Promise, value: Promise.Thenable<R>): Promise<R>; <R>(dit: 类为 Promise, value: R): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>value : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static cast<R>(dit: typeof Promise, value: R): Promise<R>;
>cast : { <R>(dit: 类为 Promise, value: Promise.Thenable<R>): Promise<R>; <R>(dit: 类为 Promise, value: R): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>value : R
>R : R
>Promise : Promise<R>
>R : R

    static bind(dit: typeof Promise, thisArg: any): Promise<void>;
>bind : (dit: 类为 Promise, thisArg: 任意) => Promise<无值>
>dit : 类为 Promise
>Promise : 类为 Promise
>thisArg : 任意
>类型别名 :=> 任意
>Promise : Promise<R>

    static is(dit: typeof Promise, value: any): boolean;
>is : (dit: 类为 Promise, value: 任意) => 真假
>dit : 类为 Promise
>Promise : 类为 Promise
>value : 任意
>类型别名 :=> 任意

    static longStackTraces(dit: typeof Promise): void;
>longStackTraces : (dit: 类为 Promise) => 无值
>dit : 类为 Promise
>Promise : 类为 Promise

    static delay<R>(dit: typeof Promise, value: Promise.Thenable<R>, ms: number): Promise<R>;
>delay : { <R>(dit: 类为 Promise, value: Promise.Thenable<R>, ms: 数字): Promise<R>; <R>(dit: 类为 Promise, value: R, ms: 数字): Promise<R>; (dit: 类为 Promise, ms: 数字): Promise<无值>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>value : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>ms : 数字
>类型别名 :=> 数字
>Promise : Promise<R>
>R : R

    static delay<R>(dit: typeof Promise, value: R, ms: number): Promise<R>;
>delay : { <R>(dit: 类为 Promise, value: Promise.Thenable<R>, ms: 数字): Promise<R>; <R>(dit: 类为 Promise, value: R, ms: 数字): Promise<R>; (dit: 类为 Promise, ms: 数字): Promise<无值>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>value : R
>R : R
>ms : 数字
>类型别名 :=> 数字
>Promise : Promise<R>
>R : R

    static delay(dit: typeof Promise, ms: number): Promise<void>;
>delay : { <R>(dit: 类为 Promise, value: Promise.Thenable<R>, ms: 数字): Promise<R>; <R>(dit: 类为 Promise, value: R, ms: 数字): Promise<R>; (dit: 类为 Promise, ms: 数字): Promise<无值>; }
>dit : 类为 Promise
>Promise : 类为 Promise
>ms : 数字
>类型别名 :=> 数字
>Promise : Promise<R>

    static promisify(dit: typeof Promise, nodeFunction: Function, receiver?: any): Function;
>promisify : (dit: 类为 Promise, nodeFunction: Function, receiver?: 任意) => Function
>dit : 类为 Promise
>Promise : 类为 Promise
>nodeFunction : Function
>Function : Function
>receiver : 任意
>类型别名 :=> 任意
>Function : Function

    static promisifyAll(dit: typeof Promise, target: Object): Object;
>promisifyAll : (dit: 类为 Promise, target: Object) => Object
>dit : 类为 Promise
>Promise : 类为 Promise
>target : Object
>Object : Object
>Object : Object

    static coroutine<R>(dit: typeof Promise, generatorFunction: Function): Function;
>coroutine : <R>(dit: 类为 Promise, generatorFunction: Function) => Function
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>generatorFunction : Function
>Function : Function
>Function : Function

    static spawn<R>(dit: typeof Promise, generatorFunction: Function): Promise<R>;
>spawn : <R>(dit: 类为 Promise, generatorFunction: Function) => Promise<R>
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>generatorFunction : Function
>Function : Function
>Promise : Promise<R>
>R : R

    static noConflict(dit: typeof Promise): typeof Promise;
>noConflict : (dit: 类为 Promise) => 类为 Promise
>dit : 类为 Promise
>Promise : 类为 Promise
>Promise : 类为 Promise

    static onPossiblyUnhandledRejection(dit: typeof Promise, handler: (reason: any) => any): void;
>onPossiblyUnhandledRejection : (dit: 类为 Promise, handler: (reason: 任意) => 任意) => 无值
>dit : 类为 Promise
>Promise : 类为 Promise
>handler : (reason: 任意) => 任意
>reason : 任意
>类型别名 :=> 任意

    static all<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R[]>;
>all : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R[]>; <R>(dit: 类为 Promise, values: R[]): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static all<R>(dit: typeof Promise, values: Promise.Thenable<R[]>): Promise<R[]>;
>all : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R[]>; <R>(dit: 类为 Promise, values: R[]): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static all<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<R[]>;
>all : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R[]>; <R>(dit: 类为 Promise, values: R[]): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static all<R>(dit: typeof Promise, values: R[]): Promise<R[]>;
>all : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R[]>; <R>(dit: 类为 Promise, values: R[]): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>Promise : Promise<R>
>R : R

    static props(dit: typeof Promise, object: Promise<Object>): Promise<Object>;
>props : { (dit: 类为 Promise, object: Promise<Object>): Promise<Object>; (dit: 类为 Promise, object: Object): Promise<Object>; }
>dit : 类为 Promise
>Promise : 类为 Promise
>object : Promise<Object>
>Promise : Promise<R>
>Object : Object
>Promise : Promise<R>
>Object : Object

    static props(dit: typeof Promise, object: Object): Promise<Object>;
>props : { (dit: 类为 Promise, object: Promise<Object>): Promise<Object>; (dit: 类为 Promise, object: Object): Promise<Object>; }
>dit : 类为 Promise
>Promise : 类为 Promise
>object : Object
>Object : Object
>Promise : Promise<R>
>Object : Object

    static settle<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<Promise.Inspection<R>[]>;
>settle : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<任意[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<任意[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<任意[]>; <R>(dit: 类为 Promise, values: R[]): Promise<任意[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>Promise : 任意
>类型别名 :=> 任意
>Inspection : No type information available!
>R : R

    static settle<R>(dit: typeof Promise, values: Promise.Thenable<R[]>): Promise<Promise.Inspection<R>[]>;
>settle : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<任意[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<任意[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<任意[]>; <R>(dit: 类为 Promise, values: R[]): Promise<任意[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>Promise : 任意
>类型别名 :=> 任意
>Inspection : No type information available!
>R : R

    static settle<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<Promise.Inspection<R>[]>;
>settle : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<任意[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<任意[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<任意[]>; <R>(dit: 类为 Promise, values: R[]): Promise<任意[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>Promise : 任意
>类型别名 :=> 任意
>Inspection : No type information available!
>R : R

    static settle<R>(dit: typeof Promise, values: R[]): Promise<Promise.Inspection<R>[]>;
>settle : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<任意[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<任意[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<任意[]>; <R>(dit: 类为 Promise, values: R[]): Promise<任意[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>Promise : Promise<R>
>Promise : 任意
>类型别名 :=> 任意
>Inspection : No type information available!
>R : R

    static any<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>;
>any : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R>; <R>(dit: 类为 Promise, values: R[]): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static any<R>(dit: typeof Promise, values: Promise.Thenable<R[]>): Promise<R>;
>any : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R>; <R>(dit: 类为 Promise, values: R[]): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static any<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<R>;
>any : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R>; <R>(dit: 类为 Promise, values: R[]): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static any<R>(dit: typeof Promise, values: R[]): Promise<R>;
>any : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R>; <R>(dit: 类为 Promise, values: R[]): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>Promise : Promise<R>
>R : R

    static race<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>;
>race : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R>; <R>(dit: 类为 Promise, values: R[]): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static race<R>(dit: typeof Promise, values: Promise.Thenable<R[]>): Promise<R>;
>race : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R>; <R>(dit: 类为 Promise, values: R[]): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static race<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<R>;
>race : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R>; <R>(dit: 类为 Promise, values: R[]): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static race<R>(dit: typeof Promise, values: R[]): Promise<R>;
>race : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>): Promise<R>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[]): Promise<R>; <R>(dit: 类为 Promise, values: R[]): Promise<R>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>Promise : Promise<R>
>R : R

    static some<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, count: number): Promise<R[]>;
>some : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], count: 数字): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>count : 数字
>类型别名 :=> 数字
>Promise : Promise<R>
>R : R

    static some<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, count: number): Promise<R[]>;
>some : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], count: 数字): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>count : 数字
>类型别名 :=> 数字
>Promise : Promise<R>
>R : R

    static some<R>(dit: typeof Promise, values: Promise.Thenable<R>[], count: number): Promise<R[]>;
>some : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], count: 数字): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>count : 数字
>类型别名 :=> 数字
>Promise : Promise<R>
>R : R

    static some<R>(dit: typeof Promise, values: R[], count: number): Promise<R[]>;
>some : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], count: 数字): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], count: 数字): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>count : 数字
>类型别名 :=> 数字
>Promise : Promise<R>
>R : R

    static join<R>(dit: typeof Promise, ...values: Promise.Thenable<R>[]): Promise<R[]>;
>join : { <R>(dit: 类为 Promise, ...values: Promise.Thenable<R>[]): Promise<R[]>; <R>(dit: 类为 Promise, ...values: R[]): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>Promise : Promise<R>
>R : R

    static join<R>(dit: typeof Promise, ...values: R[]): Promise<R[]>;
>join : { <R>(dit: 类为 Promise, ...values: Promise.Thenable<R>[]): Promise<R[]>; <R>(dit: 类为 Promise, ...values: R[]): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>Promise : Promise<R>
>R : R

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
>map : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>mapper : (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>U : U
>Promise : Promise<R>
>U : U

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
>map : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>mapper : (item: R, index: 数字, arrayLength: 数字) => U
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>U : U
>Promise : Promise<R>
>U : U

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
>map : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>mapper : (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>U : U
>Promise : Promise<R>
>U : U

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
>map : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>mapper : (item: R, index: 数字, arrayLength: 数字) => U
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>U : U
>Promise : Promise<R>
>U : U

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
>map : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>mapper : (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>U : U
>Promise : Promise<R>
>U : U

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
>map : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>mapper : (item: R, index: 数字, arrayLength: 数字) => U
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>U : U
>Promise : Promise<R>
>U : U

    static map<R, U>(dit: typeof Promise, values: R[], mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
>map : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>mapper : (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>U : U
>Promise : Promise<R>
>U : U

    static map<R, U>(dit: typeof Promise, values: R[], mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
>map : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>): Promise<U[]>; <R, U>(dit: 类为 Promise, values: R[], mapper: (item: R, index: 数字, arrayLength: 数字) => U): Promise<U[]>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>mapper : (item: R, index: 数字, arrayLength: 数字) => U
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>U : U
>Promise : Promise<R>
>U : U

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
>reduce : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>reducer : (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>
>total : U
>U : U
>current : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>U : U
>initialValue : U
>U : U
>Promise : Promise<R>
>U : U

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
>reduce : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>reducer : (total: U, current: R, index: 数字, arrayLength: 数字) => U
>total : U
>U : U
>current : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>U : U
>initialValue : U
>U : U
>Promise : Promise<R>
>U : U

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
>reduce : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>reducer : (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>
>total : U
>U : U
>current : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>U : U
>initialValue : U
>U : U
>Promise : Promise<R>
>U : U

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
>reduce : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>reducer : (total: U, current: R, index: 数字, arrayLength: 数字) => U
>total : U
>U : U
>current : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>U : U
>initialValue : U
>U : U
>Promise : Promise<R>
>U : U

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
>reduce : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>reducer : (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>
>total : U
>U : U
>current : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>U : U
>initialValue : U
>U : U
>Promise : Promise<R>
>U : U

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
>reduce : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>reducer : (total: U, current: R, index: 数字, arrayLength: 数字) => U
>total : U
>U : U
>current : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>U : U
>initialValue : U
>U : U
>Promise : Promise<R>
>U : U

    static reduce<R, U>(dit: typeof Promise, values: R[], reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
>reduce : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>reducer : (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>
>total : U
>U : U
>current : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>U : U
>initialValue : U
>U : U
>Promise : Promise<R>
>U : U

    static reduce<R, U>(dit: typeof Promise, values: R[], reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
>reduce : { <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => Promise.Thenable<U>, initialValue?: U): Promise<U>; <R, U>(dit: 类为 Promise, values: R[], reducer: (total: U, current: R, index: 数字, arrayLength: 数字) => U, initialValue?: U): Promise<U>; }
>R : R
>U : U
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>reducer : (total: U, current: R, index: 数字, arrayLength: 数字) => U
>total : U
>U : U
>current : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>U : U
>initialValue : U
>U : U
>Promise : Promise<R>
>U : U

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
>filter : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>filterer : (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : Promise<R>
>R : R

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
>filter : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<Promise.Thenable<R>[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>filterer : (item: R, index: 数字, arrayLength: 数字) => 真假
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : Promise<R>
>R : R

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
>filter : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>filterer : (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : Promise<R>
>R : R

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
>filter : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R[]>
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>filterer : (item: R, index: 数字, arrayLength: 数字) => 真假
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : Promise<R>
>R : R

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
>filter : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>filterer : (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : Promise<R>
>R : R

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
>filter : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : Promise.Thenable<R>[]
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>R : R
>filterer : (item: R, index: 数字, arrayLength: 数字) => 真假
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : Promise<R>
>R : R

    static filter<R>(dit: typeof Promise, values: R[], filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
>filter : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>filterer : (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : 任意
>类型别名 :=> 任意
>Thenable : Promise.Thenable<R>
>Promise : Promise<R>
>R : R

    static filter<R>(dit: typeof Promise, values: R[], filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
>filter : { <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => Promise.Thenable<真假>): Promise<R[]>; <R>(dit: 类为 Promise, values: R[], filterer: (item: R, index: 数字, arrayLength: 数字) => 真假): Promise<R[]>; }
>R : R
>dit : 类为 Promise
>Promise : 类为 Promise
>values : R[]
>R : R
>filterer : (item: R, index: 数字, arrayLength: 数字) => 真假
>item : R
>R : R
>index : 数字
>类型别名 :=> 数字
>arrayLength : 数字
>类型别名 :=> 数字
>Promise : Promise<R>
>R : R
}

export declare module Promise {
>Promise : 类为 Promise

	export interface Thenable<R> {
>Thenable : Thenable<R>
>R : R

		then<U>(onFulfilled: (value: R) => Thenable<U>, onRejected: (error: any) => Thenable<U>): Thenable<U>;
>then : { <U>(onFulfilled: (value: R) => Thenable<U>, onRejected: (error: 任意) => Thenable<U>): Thenable<U>; <U>(onFulfilled: (value: R) => Thenable<U>, onRejected?: (error: 任意) => U): Thenable<U>; <U>(onFulfilled: (value: R) => U, onRejected: (error: 任意) => Thenable<U>): Thenable<U>; <U>(onFulfilled?: (value: R) => U, onRejected?: (error: 任意) => U): Thenable<U>; }
>U : U
>onFulfilled : (value: R) => Thenable<U>
>value : R
>R : R
>Thenable : Thenable<R>
>U : U
>onRejected : (error: 任意) => Thenable<U>
>error : 任意
>类型别名 :=> 任意
>Thenable : Thenable<R>
>U : U
>Thenable : Thenable<R>
>U : U

		then<U>(onFulfilled: (value: R) => Thenable<U>, onRejected?: (error: any) => U): Thenable<U>;
>then : { <U>(onFulfilled: (value: R) => Thenable<U>, onRejected: (error: 任意) => Thenable<U>): Thenable<U>; <U>(onFulfilled: (value: R) => Thenable<U>, onRejected?: (error: 任意) => U): Thenable<U>; <U>(onFulfilled: (value: R) => U, onRejected: (error: 任意) => Thenable<U>): Thenable<U>; <U>(onFulfilled?: (value: R) => U, onRejected?: (error: 任意) => U): Thenable<U>; }
>U : U
>onFulfilled : (value: R) => Thenable<U>
>value : R
>R : R
>Thenable : Thenable<R>
>U : U
>onRejected : (error: 任意) => U
>error : 任意
>类型别名 :=> 任意
>U : U
>Thenable : Thenable<R>
>U : U

		then<U>(onFulfilled: (value: R) => U, onRejected: (error: any) => Thenable<U>): Thenable<U>;
>then : { <U>(onFulfilled: (value: R) => Thenable<U>, onRejected: (error: 任意) => Thenable<U>): Thenable<U>; <U>(onFulfilled: (value: R) => Thenable<U>, onRejected?: (error: 任意) => U): Thenable<U>; <U>(onFulfilled: (value: R) => U, onRejected: (error: 任意) => Thenable<U>): Thenable<U>; <U>(onFulfilled?: (value: R) => U, onRejected?: (error: 任意) => U): Thenable<U>; }
>U : U
>onFulfilled : (value: R) => U
>value : R
>R : R
>U : U
>onRejected : (error: 任意) => Thenable<U>
>error : 任意
>类型别名 :=> 任意
>Thenable : Thenable<R>
>U : U
>Thenable : Thenable<R>
>U : U

		then<U>(onFulfilled?: (value: R) => U, onRejected?: (error: any) => U): Thenable<U>;
>then : { <U>(onFulfilled: (value: R) => Thenable<U>, onRejected: (error: 任意) => Thenable<U>): Thenable<U>; <U>(onFulfilled: (value: R) => Thenable<U>, onRejected?: (error: 任意) => U): Thenable<U>; <U>(onFulfilled: (value: R) => U, onRejected: (error: 任意) => Thenable<U>): Thenable<U>; <U>(onFulfilled?: (value: R) => U, onRejected?: (error: 任意) => U): Thenable<U>; }
>U : U
>onFulfilled : (value: R) => U
>value : R
>R : R
>U : U
>onRejected : (error: 任意) => U
>error : 任意
>类型别名 :=> 任意
>U : U
>Thenable : Thenable<R>
>U : U
	}

}

interface Foo {
>Foo : Foo

    a: number;
>a : 数字
>类型别名 :=> 数字

    b: string;
>b : 文字
>类型别名 :=> 文字
}
var x: any;
>x : 任意
>类型别名 :=> 任意

var arr: any[];
>arr : 任意[]

var foo: Foo;
>foo : Foo
>Foo : Foo

var fooProm: Promise<Foo>;
>fooProm : Promise<Foo>
>Promise : Promise<R>
>Foo : Foo

fooProm = Promise.try(Promise, () => {
>fooProm = Promise.try(Promise, () => {	return foo;}) : Promise<Foo>
>fooProm : Promise<Foo>
>Promise.try(Promise, () => {	return foo;}) : Promise<Foo>
>Promise.try : { <R>(dit: 类为 Promise, fn: () => Promise.Thenable<R>, args?: 任意[], ctx?: 任意): Promise<R>; <R>(dit: 类为 Promise, fn: () => R, args?: 任意[], ctx?: 任意): Promise<R>; }
>Promise : 类为 Promise
>try : { <R>(dit: 类为 Promise, fn: () => Promise.Thenable<R>, args?: 任意[], ctx?: 任意): Promise<R>; <R>(dit: 类为 Promise, fn: () => R, args?: 任意[], ctx?: 任意): Promise<R>; }
>Promise : 类为 Promise
>() => {	return foo;} : () => Foo

	return foo;
>foo : Foo

});
fooProm = Promise.try(Promise, () => {
>fooProm = Promise.try(Promise, () => {	return foo;}, arr) : Promise<Foo>
>fooProm : Promise<Foo>
>Promise.try(Promise, () => {	return foo;}, arr) : Promise<Foo>
>Promise.try : { <R>(dit: 类为 Promise, fn: () => Promise.Thenable<R>, args?: 任意[], ctx?: 任意): Promise<R>; <R>(dit: 类为 Promise, fn: () => R, args?: 任意[], ctx?: 任意): Promise<R>; }
>Promise : 类为 Promise
>try : { <R>(dit: 类为 Promise, fn: () => Promise.Thenable<R>, args?: 任意[], ctx?: 任意): Promise<R>; <R>(dit: 类为 Promise, fn: () => R, args?: 任意[], ctx?: 任意): Promise<R>; }
>Promise : 类为 Promise
>() => {	return foo;} : () => Foo

	return foo;
>foo : Foo

}, arr);
>arr : 任意[]

fooProm = Promise.try(Promise, () => {
>fooProm = Promise.try(Promise, () => {	return foo;}, arr, x) : Promise<Foo>
>fooProm : Promise<Foo>
>Promise.try(Promise, () => {	return foo;}, arr, x) : Promise<Foo>
>Promise.try : { <R>(dit: 类为 Promise, fn: () => Promise.Thenable<R>, args?: 任意[], ctx?: 任意): Promise<R>; <R>(dit: 类为 Promise, fn: () => R, args?: 任意[], ctx?: 任意): Promise<R>; }
>Promise : 类为 Promise
>try : { <R>(dit: 类为 Promise, fn: () => Promise.Thenable<R>, args?: 任意[], ctx?: 任意): Promise<R>; <R>(dit: 类为 Promise, fn: () => R, args?: 任意[], ctx?: 任意): Promise<R>; }
>Promise : 类为 Promise
>() => {	return foo;} : () => Foo

	return foo;
>foo : Foo

}, arr, x);
>arr : 任意[]
>x : 任意
>类型别名 :=> 任意

