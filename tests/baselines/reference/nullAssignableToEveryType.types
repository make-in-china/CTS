=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/nullAssignableToEveryType.ts ===
class C {
>C : C

    foo: string;
>foo : 文字
>类型别名 :=> 文字
}
var ac: C;
>ac : C
>C : C

interface I {
>I : I

    foo: string;
>foo : 文字
>类型别名 :=> 文字
}
var ai: I;
>ai : I
>I : I

enum E { A }
>E : E
>A : E

var ae: E;
>ae : E
>E : E

var b: number = null;
>b : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

var c: string = null;
>c : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

var d: boolean = null;
>d : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值

var e: Date = null;
>e : Date
>Date : Date
>null : 空值
>类型别名 :=> 空值

var f: any = null;
>f : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

var g: void = null;
>g : 无值
>类型别名 :=> 无值
>null : 空值
>类型别名 :=> 空值

var h: Object = null;
>h : Object
>Object : Object
>null : 空值
>类型别名 :=> 空值

var i: {} = null;
>i : {}
>null : 空值
>类型别名 :=> 空值

var j: () => {} = null;
>j : () => {}
>null : 空值
>类型别名 :=> 空值

var k: Function = null;
>k : Function
>Function : Function
>null : 空值
>类型别名 :=> 空值

var l: (x: number) => string = null;
>l : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

ac = null;
>ac = null : 空值
>类型别名 :=> 空值
>ac : C
>null : 空值
>类型别名 :=> 空值

ai = null;
>ai = null : 空值
>类型别名 :=> 空值
>ai : I
>null : 空值
>类型别名 :=> 空值

ae = null;
>ae = null : 空值
>类型别名 :=> 空值
>ae : E
>null : 空值
>类型别名 :=> 空值

var m: number[] = null;
>m : 数字[]
>null : 空值
>类型别名 :=> 空值

var n: { foo: string } = null;
>n : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

var o: <T>(x: T) => T = null;
>o : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
>null : 空值
>类型别名 :=> 空值

var p: Number = null;
>p : Number
>Number : Number
>null : 空值
>类型别名 :=> 空值

var q: String = null;
>q : String
>String : String
>null : 空值
>类型别名 :=> 空值

function foo<T, U, V extends Date>(x: T, y: U, z: V) {
>foo : <T, U, V 扩展 Date>(x: T, y: U, z: V) => 无值
>T : T
>U : U
>V : V
>Date : Date
>x : T
>T : T
>y : U
>U : U
>z : V
>V : V

    x = null;
>x = null : 空值
>类型别名 :=> 空值
>x : T
>null : 空值
>类型别名 :=> 空值

    y = null;
>y = null : 空值
>类型别名 :=> 空值
>y : U
>null : 空值
>类型别名 :=> 空值

    z = null;
>z = null : 空值
>类型别名 :=> 空值
>z : V
>null : 空值
>类型别名 :=> 空值
}

//function foo<T, U extends T, V extends Date>(x: T, y: U, z: V) {
//    x = null;
//    y = null;
//    z = null;
//}
