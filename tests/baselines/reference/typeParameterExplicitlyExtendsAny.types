=== tests/cases/compiler/typeParameterExplicitlyExtendsAny.ts ===
function fee<T>() {
>fee : <T>() => 无值
>T : T

    var t: T;
>t : T
>T : T

    t.blah; // Error
>t.blah : 任意
>类型别名 :=> 任意
>t : T
>blah : 任意
>类型别名 :=> 任意

    t.toString; // ok
>t.toString : () => 文字
>t : T
>toString : () => 文字
}

function fee2<T extends any>() {
>fee2 : <T 扩展 任意>() => 无值
>T : T

    var t: T;
>t : T
>T : T

    t.blah; // ok
>t.blah : 任意
>类型别名 :=> 任意
>t : T
>blah : 任意
>类型别名 :=> 任意

    t.toString; // ok
>t.toString : 任意
>类型别名 :=> 任意
>t : T
>toString : 任意
>类型别名 :=> 任意
}

function f<T extends any>(x: T) {
>f : <T 扩展 任意>(x: T) => 无值
>T : T
>x : T
>T : T

    x.children;
>x.children : 任意
>类型别名 :=> 任意
>x : T
>children : 任意
>类型别名 :=> 任意

    x();
>x() : 任意
>类型别名 :=> 任意
>x : T

    new x();
>new x() : 任意
>类型别名 :=> 任意
>x : T

    x[100];
>x[100] : 任意
>类型别名 :=> 任意
>x : T
>100 : 100

    x['hello'];
>x['hello'] : 任意
>类型别名 :=> 任意
>x : T
>'hello' : "hello"
}


// Generic Tree structure
type Tree<T> = T & {
>Tree : Tree<T>
>T : T
>T : T

    children?: Tree<T>[];
>children : Tree<T>[]
>Tree : Tree<T>
>T : T
}

class MyClass {
>MyClass : MyClass

    public static displayTree1<T extends Tree<any>>(tree: T) {
>displayTree1 : <T 扩展 任意>(tree: T) => 无值
>T : T
>Tree : Tree<T>
>tree : T
>T : T

        // error "Property 'children' does not exist on type 'T'"
        tree.children;
>tree.children : 任意
>类型别名 :=> 任意
>tree : T
>children : 任意
>类型别名 :=> 任意
    }
}

