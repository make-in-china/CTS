=== tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues.ts ===
declare var console: {
>console : { log(msg: 任意): 无值; }

    log(msg: any): void;
>log : (msg: 任意) => 无值
>msg : 任意
>类型别名 :=> 任意
}
type Robot = [number, string, string];
>Robot : [数字, 文字, 文字]

var robotA: Robot = [1, "mower", "mowing"];
>robotA : [数字, 文字, 文字]
>Robot : [数字, 文字, 文字]
>[1, "mower", "mowing"] : [数字, 文字, 文字]
>1 : 1
>"mower" : "mower"
>"mowing" : "mowing"

function foo1([, nameA = "noName"]: Robot = [-1, "name", "skill"]) {
>foo1 : ([, nameA]?: [数字, 文字, 文字]) => 无值
> : 未定
>类型别名 :=> 未定
>nameA : 文字
>类型别名 :=> 文字
>"noName" : "noName"
>Robot : [数字, 文字, 文字]
>[-1, "name", "skill"] : [数字, 文字, 文字]
>-1 : -1
>1 : 1
>"name" : "name"
>"skill" : "skill"

    console.log(nameA);
>console.log(nameA) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameA : 文字
>类型别名 :=> 文字
}

function foo2([numberB = -1]: Robot = [-1, "name", "skill"]) {
>foo2 : ([numberB]?: [数字, 文字, 文字]) => 无值
>numberB : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1
>Robot : [数字, 文字, 文字]
>[-1, "name", "skill"] : [数字, 文字, 文字]
>-1 : -1
>1 : 1
>"name" : "name"
>"skill" : "skill"

    console.log(numberB);
>console.log(numberB) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>numberB : 数字
>类型别名 :=> 数字
}

function foo3([numberA2 = -1, nameA2 = "name", skillA2 = "skill"]: Robot = [-1, "name", "skill"]) {
>foo3 : ([numberA2, nameA2, skillA2]?: [数字, 文字, 文字]) => 无值
>numberA2 : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1
>nameA2 : 文字
>类型别名 :=> 文字
>"name" : "name"
>skillA2 : 文字
>类型别名 :=> 文字
>"skill" : "skill"
>Robot : [数字, 文字, 文字]
>[-1, "name", "skill"] : [数字, 文字, 文字]
>-1 : -1
>1 : 1
>"name" : "name"
>"skill" : "skill"

    console.log(nameA2);
>console.log(nameA2) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameA2 : 文字
>类型别名 :=> 文字
}

function foo4([numberA3 = -1, ...robotAInfo]: Robot = [-1, "name", "skill"]) {
>foo4 : ([numberA3, ...robotAInfo]?: [数字, 文字, 文字]) => 无值
>numberA3 : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1
>robotAInfo : (文字 | 数字)[]
>Robot : [数字, 文字, 文字]
>[-1, "name", "skill"] : [数字, 文字, 文字]
>-1 : -1
>1 : 1
>"name" : "name"
>"skill" : "skill"

    console.log(robotAInfo);
>console.log(robotAInfo) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>robotAInfo : (文字 | 数字)[]
}

foo1(robotA);
>foo1(robotA) : 无值
>类型别名 :=> 无值
>foo1 : ([, nameA]?: [数字, 文字, 文字]) => 无值
>robotA : [数字, 文字, 文字]

foo1([2, "trimmer", "trimming"]);
>foo1([2, "trimmer", "trimming"]) : 无值
>类型别名 :=> 无值
>foo1 : ([, nameA]?: [数字, 文字, 文字]) => 无值
>[2, "trimmer", "trimming"] : [数字, 文字, 文字]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"

foo2(robotA);
>foo2(robotA) : 无值
>类型别名 :=> 无值
>foo2 : ([numberB]?: [数字, 文字, 文字]) => 无值
>robotA : [数字, 文字, 文字]

foo2([2, "trimmer", "trimming"]);
>foo2([2, "trimmer", "trimming"]) : 无值
>类型别名 :=> 无值
>foo2 : ([numberB]?: [数字, 文字, 文字]) => 无值
>[2, "trimmer", "trimming"] : [数字, 文字, 文字]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"

foo3(robotA);
>foo3(robotA) : 无值
>类型别名 :=> 无值
>foo3 : ([numberA2, nameA2, skillA2]?: [数字, 文字, 文字]) => 无值
>robotA : [数字, 文字, 文字]

foo3([2, "trimmer", "trimming"]);
>foo3([2, "trimmer", "trimming"]) : 无值
>类型别名 :=> 无值
>foo3 : ([numberA2, nameA2, skillA2]?: [数字, 文字, 文字]) => 无值
>[2, "trimmer", "trimming"] : [数字, 文字, 文字]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"

foo4(robotA);
>foo4(robotA) : 无值
>类型别名 :=> 无值
>foo4 : ([numberA3, ...robotAInfo]?: [数字, 文字, 文字]) => 无值
>robotA : [数字, 文字, 文字]

foo4([2, "trimmer", "trimming"]);
>foo4([2, "trimmer", "trimming"]) : 无值
>类型别名 :=> 无值
>foo4 : ([numberA3, ...robotAInfo]?: [数字, 文字, 文字]) => 无值
>[2, "trimmer", "trimming"] : [数字, 文字, 文字]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"

