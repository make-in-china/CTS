=== tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesPublicMembers.ts ===
var x: { foo: string; }
>x : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字

var y: { foo: string; bar: string; }
>y : { foo: 文字; bar: 文字; }
>foo : 文字
>类型别名 :=> 文字
>bar : 文字
>类型别名 :=> 文字

class Base {
>Base : Base

    a: typeof x;
>a : { foo: 文字; }
>x : { foo: 文字; }

    b(a: typeof x) { }
>b : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    get c() { return x; }
>c : { foo: 文字; }
>x : { foo: 文字; }

    set c(v: typeof x) { }
>c : { foo: 文字; }
>v : { foo: 文字; }
>x : { foo: 文字; }

    d: (a: typeof x) => void;
>d : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    static r: typeof x;
>r : { foo: 文字; }
>x : { foo: 文字; }

    static s(a: typeof x) { }
>s : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    static get t() { return x; }
>t : { foo: 文字; }
>x : { foo: 文字; }

    static set t(v: typeof x) { }
>t : { foo: 文字; }
>v : { foo: 文字; }
>x : { foo: 文字; }

    static u: (a: typeof x) => void;
>u : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { }
>a : { foo: 文字; }
>x : { foo: 文字; }
}

class Derived extends Base {
>Derived : Derived
>Base : Base

    a: typeof y;
>a : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

    b(a: typeof y) { }
>b : (a: { foo: 文字; bar: 文字; }) => 无值
>a : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

    get c() { return y; }
>c : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

    set c(v: typeof y) { }
>c : { foo: 文字; bar: 文字; }
>v : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

    d: (a: typeof y) => void;
>d : (a: { foo: 文字; bar: 文字; }) => 无值
>a : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

    static r: typeof y;
>r : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

    static s(a: typeof y) { }
>s : (a: { foo: 文字; bar: 文字; }) => 无值
>a : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

    static get t() { return y; }
>t : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

    static set t(a: typeof y) { }
>t : { foo: 文字; bar: 文字; }
>a : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

    static u: (a: typeof y) => void;
>u : (a: { foo: 文字; bar: 文字; }) => 无值
>a : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

    constructor(a: typeof y) { super(x) }
>a : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }
>super(x) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>x : { foo: 文字; }
}

var d: Derived = new Derived(y);
>d : Derived
>Derived : Derived
>new Derived(y) : Derived
>Derived : 类为 Derived
>y : { foo: 文字; bar: 文字; }

var r1 = d.a;
>r1 : { foo: 文字; bar: 文字; }
>d.a : { foo: 文字; bar: 文字; }
>d : Derived
>a : { foo: 文字; bar: 文字; }

var r2 = d.b(y);
>r2 : 无值
>类型别名 :=> 无值
>d.b(y) : 无值
>类型别名 :=> 无值
>d.b : (a: { foo: 文字; bar: 文字; }) => 无值
>d : Derived
>b : (a: { foo: 文字; bar: 文字; }) => 无值
>y : { foo: 文字; bar: 文字; }

var r3 = d.c;
>r3 : { foo: 文字; bar: 文字; }
>d.c : { foo: 文字; bar: 文字; }
>d : Derived
>c : { foo: 文字; bar: 文字; }

var r3a = d.d;
>r3a : (a: { foo: 文字; bar: 文字; }) => 无值
>d.d : (a: { foo: 文字; bar: 文字; }) => 无值
>d : Derived
>d : (a: { foo: 文字; bar: 文字; }) => 无值

d.c = y;
>d.c = y : { foo: 文字; bar: 文字; }
>d.c : { foo: 文字; bar: 文字; }
>d : Derived
>c : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

var r4 = Derived.r;
>r4 : { foo: 文字; bar: 文字; }
>Derived.r : { foo: 文字; bar: 文字; }
>Derived : 类为 Derived
>r : { foo: 文字; bar: 文字; }

var r5 = Derived.s(y);
>r5 : 无值
>类型别名 :=> 无值
>Derived.s(y) : 无值
>类型别名 :=> 无值
>Derived.s : (a: { foo: 文字; bar: 文字; }) => 无值
>Derived : 类为 Derived
>s : (a: { foo: 文字; bar: 文字; }) => 无值
>y : { foo: 文字; bar: 文字; }

var r6 = Derived.t;
>r6 : { foo: 文字; bar: 文字; }
>Derived.t : { foo: 文字; bar: 文字; }
>Derived : 类为 Derived
>t : { foo: 文字; bar: 文字; }

var r6a = Derived.u;
>r6a : (a: { foo: 文字; bar: 文字; }) => 无值
>Derived.u : (a: { foo: 文字; bar: 文字; }) => 无值
>Derived : 类为 Derived
>u : (a: { foo: 文字; bar: 文字; }) => 无值

Derived.t = y;
>Derived.t = y : { foo: 文字; bar: 文字; }
>Derived.t : { foo: 文字; bar: 文字; }
>Derived : 类为 Derived
>t : { foo: 文字; bar: 文字; }
>y : { foo: 文字; bar: 文字; }

class Base2 {
>Base2 : Base2

    [i: string]: Object;
>i : 文字
>类型别名 :=> 文字
>Object : Object

    [i: number]: typeof x;
>i : 数字
>类型别名 :=> 数字
>x : { foo: 文字; }
}

class Derived2 extends Base2 {
>Derived2 : Derived2
>Base2 : Base2

    [i: string]: typeof x;
>i : 文字
>类型别名 :=> 文字
>x : { foo: 文字; }

    [i: number]: typeof y;
>i : 数字
>类型别名 :=> 数字
>y : { foo: 文字; bar: 文字; }
}

var d2: Derived2;
>d2 : Derived2
>Derived2 : Derived2

var r7 = d2[''];
>r7 : { foo: 文字; }
>d2[''] : { foo: 文字; }
>d2 : Derived2
>'' : ""

var r8 = d2[1];
>r8 : { foo: 文字; bar: 文字; }
>d2[1] : { foo: 文字; bar: 文字; }
>d2 : Derived2
>1 : 1


