=== tests/cases/compiler/implicitAnyWidenToAny.ts ===
// these should be errors
var x = null;                        // error at "x"
>x : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

var x1 = undefined;		             // error at "x1"
>x1 : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定

var widenArray = [null, undefined];  // error at "widenArray"
>widenArray : any[]
>[null, undefined] : null[]
>null : null
>类型别名 :=> 空值
>undefined : undefined
>类型别名 :=> 未定

var emptyArray = [];
>emptyArray : any[]
>[] : undefined[]

// these should not be error
class AnimalObj {
>AnimalObj : AnimalObj

      x:any;
>x : any
>类型别名 :=> 任意
}
var foo = 5;
>foo : number
>类型别名 :=> 数字
>5 : 5

var bar = "Hello World";
>bar : string
>类型别名 :=> 文字
>"Hello World" : "Hello World"

var foo1: any = null;
>foo1 : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

var foo2: any = undefined;
>foo2 : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定

var temp: number = 5;
>temp : number
>类型别名 :=> 数字
>5 : 5

var c: AnimalObj = { x: null }; 
>c : AnimalObj
>AnimalObj : AnimalObj
>{ x: null } : { x: null; }
>x : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

var array1 = ["Bob",2];
>array1 : (string | number)[]
>["Bob",2] : (string | number)[]
>"Bob" : "Bob"
>2 : 2

var array2: any[] = [];
>array2 : any[]
>[] : undefined[]

var array3: any[] = [null, undefined];
>array3 : any[]
>[null, undefined] : null[]
>null : null
>类型别名 :=> 空值
>undefined : undefined
>类型别名 :=> 未定

var array4: number[] = [null, undefined];
>array4 : number[]
>[null, undefined] : null[]
>null : null
>类型别名 :=> 空值
>undefined : undefined
>类型别名 :=> 未定

var array5 = <any[]>[null, undefined];
>array5 : any[]
><any[]>[null, undefined] : any[]
>[null, undefined] : null[]
>null : null
>类型别名 :=> 空值
>undefined : undefined
>类型别名 :=> 未定

var objLit: { new (n: number): any; };
>objLit : new (n: number) => any
>n : number
>类型别名 :=> 数字

function anyReturnFunc(): any { }
>anyReturnFunc : () => any

var obj0 = new objLit(1);
>obj0 : any
>类型别名 :=> 任意
>new objLit(1) : any
>类型别名 :=> 任意
>objLit : new (n: number) => any
>1 : 1

var obj1 = anyReturnFunc();
>obj1 : any
>类型别名 :=> 任意
>anyReturnFunc() : any
>类型别名 :=> 任意
>anyReturnFunc : () => any

