=== tests/cases/compiler/assignmentCompatBug3.ts ===
function makePoint(x: number, y: number) {
>makePoint : (x: 数字, y: 数字) => { 只读 x: 数字; 只读 y: 数字; dist: () => 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    return {
>{        get x() { return x;}, // shouldn't be "void"        get y() { return y;}, // shouldn't be "void"        //x: "yo",        //y: "boo",        dist: function () {			return Math.sqrt(x*x+y*y); // shouldn't be picking up "x" and "y" from the object lit		}	} : { 只读 x: 数字; 只读 y: 数字; dist: () => 数字; }

        get x() { return x;}, // shouldn't be "void"
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

        get y() { return y;}, // shouldn't be "void"
>y : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        //x: "yo",
        //y: "boo",
        dist: function () {
>dist : () => 数字
>function () {			return Math.sqrt(x*x+y*y); // shouldn't be picking up "x" and "y" from the object lit		} : () => 数字

			return Math.sqrt(x*x+y*y); // shouldn't be picking up "x" and "y" from the object lit
>Math.sqrt(x*x+y*y) : 数字
>类型别名 :=> 数字
>Math.sqrt : (x: 数字) => 数字
>Math : Math
>sqrt : (x: 数字) => 数字
>x*x+y*y : 数字
>类型别名 :=> 数字
>x*x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y*y : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
		}
	}
}

class C {
>C : C

    get x() {
>x : 数字
>类型别名 :=> 数字

        return 0;
>0 : 0
    }
}

function foo(test: string) { }
>foo : (test: 文字) => 无值
>test : 文字
>类型别名 :=> 文字

var x: any;
>x : 任意
>类型别名 :=> 任意

var y: any;
>y : 任意
>类型别名 :=> 任意

foo(x);
>foo(x) : 无值
>类型别名 :=> 无值
>foo : (test: 文字) => 无值
>x : 任意
>类型别名 :=> 任意

foo(x + y);
>foo(x + y) : 无值
>类型别名 :=> 无值
>foo : (test: 文字) => 无值
>x + y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

