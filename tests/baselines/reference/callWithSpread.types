=== tests/cases/conformance/expressions/functionCalls/callWithSpread.ts ===
interface X {
>X : X

    foo(x: number, y: number, ...z: string[]): X;
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 文字[]
>X : X
}

function foo(x: number, y: number, ...z: string[]) {
>foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 文字[]
}

var a: string[];
>a : 文字[]

var z: number[];
>z : 数字[]

var obj: X;
>obj : X
>X : X

var xa: X[];
>xa : X[]
>X : X

foo(1, 2, "abc");
>foo(1, 2, "abc") : 无值
>类型别名 :=> 无值
>foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>"abc" : "abc"

foo(1, 2, ...a);
>foo(1, 2, ...a) : 无值
>类型别名 :=> 无值
>foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

foo(1, 2, ...a, "abc");
>foo(1, 2, ...a, "abc") : 无值
>类型别名 :=> 无值
>foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"abc" : "abc"

obj.foo(1, 2, "abc");
>obj.foo(1, 2, "abc") : X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>"abc" : "abc"

obj.foo(1, 2, ...a);
>obj.foo(1, 2, ...a) : X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

obj.foo(1, 2, ...a, "abc");
>obj.foo(1, 2, ...a, "abc") : X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"abc" : "abc"

obj.foo(1, 2, ...a).foo(1, 2, "abc");
>obj.foo(1, 2, ...a).foo(1, 2, "abc") : X
>obj.foo(1, 2, ...a).foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj.foo(1, 2, ...a) : X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>"abc" : "abc"

obj.foo(1, 2, ...a).foo(1, 2, ...a);
>obj.foo(1, 2, ...a).foo(1, 2, ...a) : X
>obj.foo(1, 2, ...a).foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj.foo(1, 2, ...a) : X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

obj.foo(1, 2, ...a).foo(1, 2, ...a, "abc");
>obj.foo(1, 2, ...a).foo(1, 2, ...a, "abc") : X
>obj.foo(1, 2, ...a).foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj.foo(1, 2, ...a) : X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"abc" : "abc"

(obj.foo)(1, 2, "abc");
>(obj.foo)(1, 2, "abc") : X
>(obj.foo) : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>"abc" : "abc"

(obj.foo)(1, 2, ...a);
>(obj.foo)(1, 2, ...a) : X
>(obj.foo) : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

(obj.foo)(1, 2, ...a, "abc");
>(obj.foo)(1, 2, ...a, "abc") : X
>(obj.foo) : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"abc" : "abc"

((obj.foo)(1, 2, ...a).foo)(1, 2, "abc");
>((obj.foo)(1, 2, ...a).foo)(1, 2, "abc") : X
>((obj.foo)(1, 2, ...a).foo) : (x: 数字, y: 数字, ...z: 文字[]) => X
>(obj.foo)(1, 2, ...a).foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>(obj.foo)(1, 2, ...a) : X
>(obj.foo) : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>"abc" : "abc"

((obj.foo)(1, 2, ...a).foo)(1, 2, ...a);
>((obj.foo)(1, 2, ...a).foo)(1, 2, ...a) : X
>((obj.foo)(1, 2, ...a).foo) : (x: 数字, y: 数字, ...z: 文字[]) => X
>(obj.foo)(1, 2, ...a).foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>(obj.foo)(1, 2, ...a) : X
>(obj.foo) : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

((obj.foo)(1, 2, ...a).foo)(1, 2, ...a, "abc");
>((obj.foo)(1, 2, ...a).foo)(1, 2, ...a, "abc") : X
>((obj.foo)(1, 2, ...a).foo) : (x: 数字, y: 数字, ...z: 文字[]) => X
>(obj.foo)(1, 2, ...a).foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>(obj.foo)(1, 2, ...a) : X
>(obj.foo) : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj.foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>obj : X
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"abc" : "abc"

xa[1].foo(1, 2, "abc");
>xa[1].foo(1, 2, "abc") : X
>xa[1].foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>xa[1] : X
>xa : X[]
>1 : 1
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>"abc" : "abc"

xa[1].foo(1, 2, ...a);
>xa[1].foo(1, 2, ...a) : X
>xa[1].foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>xa[1] : X
>xa : X[]
>1 : 1
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

xa[1].foo(1, 2, ...a, "abc");
>xa[1].foo(1, 2, ...a, "abc") : X
>xa[1].foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>xa[1] : X
>xa : X[]
>1 : 1
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"abc" : "abc"

(<Function>xa[1].foo)(...[1, 2, "abc"]);
>(<Function>xa[1].foo)(...[1, 2, "abc"]) : 任意
>类型别名 :=> 任意
>(<Function>xa[1].foo) : Function
><Function>xa[1].foo : Function
>Function : Function
>xa[1].foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>xa[1] : X
>xa : X[]
>1 : 1
>foo : (x: 数字, y: 数字, ...z: 文字[]) => X
>...[1, 2, "abc"] : 文字 | 数字
>[1, 2, "abc"] : (文字 | 数字)[]
>1 : 1
>2 : 2
>"abc" : "abc"

class C {
>C : C

    constructor(x: number, y: number, ...z: string[]) {
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 文字[]

        this.foo(x, y);
>this.foo(x, y) : 无值
>类型别名 :=> 无值
>this.foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>this : 本体
>foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        this.foo(x, y, ...z);
>this.foo(x, y, ...z) : 无值
>类型别名 :=> 无值
>this.foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>this : 本体
>foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>...z : 文字
>类型别名 :=> 文字
>z : 文字[]
    }
    foo(x: number, y: number, ...z: string[]) {
>foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 文字[]
    }
}

class D extends C {
>D : D
>C : C

    constructor() {
        super(1, 2);
>super(1, 2) : 无值
>类型别名 :=> 无值
>super : 类为 C
>1 : 1
>2 : 2

        super(1, 2, ...a);
>super(1, 2, ...a) : 无值
>类型别名 :=> 无值
>super : 类为 C
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
    }
    foo() {
>foo : () => 无值

        super.foo(1, 2);
>super.foo(1, 2) : 无值
>类型别名 :=> 无值
>super.foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>super : C
>foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2

        super.foo(1, 2, ...a);
>super.foo(1, 2, ...a) : 无值
>类型别名 :=> 无值
>super.foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>super : C
>foo : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
    }
}

