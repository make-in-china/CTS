=== tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModule1.ts ===
    export module CompilerDiagnostics {
>CompilerDiagnostics : 类为 CompilerDiagnostics

        export var debug = false;
>debug : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        export interface IDiagnosticWriter {
>IDiagnosticWriter : IDiagnosticWriter

            Alert(output: string): void;
>Alert : (output: 文字) => 无值
>output : 文字
>类型别名 :=> 文字
        }

        export var diagnosticWriter: IDiagnosticWriter = null;
>diagnosticWriter : IDiagnosticWriter
>IDiagnosticWriter : IDiagnosticWriter
>null : 空值
>类型别名 :=> 空值

        export var analysisPass: number = 0;
>analysisPass : 数字
>类型别名 :=> 数字
>0 : 0

        export function Alert(output: string) {
>Alert : (output: 文字) => 无值
>output : 文字
>类型别名 :=> 文字

            if (diagnosticWriter) {
>diagnosticWriter : IDiagnosticWriter

                diagnosticWriter.Alert(output);
>diagnosticWriter.Alert(output) : 无值
>类型别名 :=> 无值
>diagnosticWriter.Alert : (output: 文字) => 无值
>diagnosticWriter : IDiagnosticWriter
>Alert : (output: 文字) => 无值
>output : 文字
>类型别名 :=> 文字
            }
        }

        export function debugPrint(s: string) {
>debugPrint : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字

            if (debug) {
>debug : 真假
>类型别名 :=> 真假

                Alert(s);
>Alert(s) : 无值
>类型别名 :=> 无值
>Alert : (output: 文字) => 无值
>s : 文字
>类型别名 :=> 文字
            }
        }

        export function assert(condition: boolean, s: string) {
>assert : (condition: 真假, s: 文字) => 无值
>condition : 真假
>类型别名 :=> 真假
>s : 文字
>类型别名 :=> 文字

            if (debug) {
>debug : 真假
>类型别名 :=> 真假

                if (!condition) {
>!condition : 真假
>类型别名 :=> 真假
>condition : 真假
>类型别名 :=> 真假

                    Alert(s);
>Alert(s) : 无值
>类型别名 :=> 无值
>Alert : (output: 文字) => 无值
>s : 文字
>类型别名 :=> 文字
                }
            }
        }

    }
