=== tests/cases/conformance/expressions/typeGuards/typeGuardsWithAny.ts ===
var x: any = { p: 0 };
>x : any
>类型别名 :=> 任意
>{ p: 0 } : { p: number; }
>p : number
>类型别名 :=> 数字
>0 : 0

if (x instanceof Object) {
>x instanceof Object : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>Object : ObjectConstructor

    x.p; // No error, type any unaffected by instanceof type guard
>x.p : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
}
else {
    x.p; // No error, type any unaffected by instanceof type guard
>x.p : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
}

if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : any
>类型别名 :=> 任意
>"string" : "string"

    x.p; // Error, type any narrowed by primitive type check
>x.p : any
>类型别名 :=> 任意
>x : string
>类型别名 :=> 文字
>p : any
>类型别名 :=> 任意
}
else {
    x.p; // No error, type unaffected in this branch
>x.p : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
}

if (typeof x === "number") {
>typeof x === "number" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : any
>类型别名 :=> 任意
>"number" : "number"

    x.p; // Error, type any narrowed by primitive type check
>x.p : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字
>p : any
>类型别名 :=> 任意
}
else {
    x.p; // No error, type unaffected in this branch
>x.p : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
}

if (typeof x === "boolean") {
>typeof x === "boolean" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : any
>类型别名 :=> 任意
>"boolean" : "boolean"

    x.p; // Error, type any narrowed by primitive type check
>x.p : any
>类型别名 :=> 任意
>x : boolean
>类型别名 :=> 真假
>p : any
>类型别名 :=> 任意
}
else {
    x.p; // No error, type unaffected in this branch
>x.p : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
}

if (typeof x === "object") {
>typeof x === "object" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : any
>类型别名 :=> 任意
>"object" : "object"

    x.p; // No error, type any only affected by primitive type check
>x.p : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
}
else {
    x.p; // No error, type unaffected in this branch
>x.p : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
}

