=== tests/cases/compiler/file2.ts ===
///<reference path='file1.ts'/>
declare var c: C;
>c : C
>C : C

interface C {
>C : C

    count(countTitle?: string): void;
>count : (countTitle?: 文字) => 无值
>countTitle : 文字
>类型别名 :=> 文字
}
interface C {
>C : C

    log(message?: any, ...optionalParams: any[]): void;
>log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>message : 任意
>类型别名 :=> 任意
>optionalParams : 任意[]
}

=== tests/cases/compiler/file1.ts ===
interface Q<T> {
>Q : Q<T>
>T : T

    each(action: (item: T, index: number) => void): void;
>each : (action: (item: T, index: 数字) => 无值) => 无值
>action : (item: T, index: 数字) => 无值
>item : T
>T : T
>index : 数字
>类型别名 :=> 数字
}
var q1: Q<{ a: number; }>;
>q1 : Q<{ a: 数字; }>
>Q : Q<T>
>a : 数字
>类型别名 :=> 数字

var x = q1.each(x => c.log(x));
>x : 无值
>类型别名 :=> 无值
>q1.each(x => c.log(x)) : 无值
>类型别名 :=> 无值
>q1.each : (action: (item: { a: 数字; }, index: 数字) => 无值) => 无值
>q1 : Q<{ a: 数字; }>
>each : (action: (item: { a: 数字; }, index: 数字) => 无值) => 无值
>x => c.log(x) : (x: { a: 数字; }) => 无值
>x : { a: 数字; }
>c.log(x) : 无值
>类型别名 :=> 无值
>c.log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>c : C
>log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>x : { a: 数字; }

