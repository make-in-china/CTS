=== tests/cases/compiler/objectCreate2.ts ===
declare var union: null | { a: number, b: string };
>union : { a: 数字; b: 文字; }
>null : 空值
>类型别名 :=> 空值
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

var n = Object.create(null);             // any
>n : 任意
>类型别名 :=> 任意
>Object.create(null) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>null : 空值
>类型别名 :=> 空值

var t = Object.create({ a: 1, b: "" });  // {a: number, b: string }
>t : 任意
>类型别名 :=> 任意
>Object.create({ a: 1, b: "" }) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>{ a: 1, b: "" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>"" : ""

var u = Object.create(union);            // {a: number, b: string }
>u : 任意
>类型别名 :=> 任意
>Object.create(union) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>union : { a: 数字; b: 文字; }

var e = Object.create({});               // {}
>e : 任意
>类型别名 :=> 任意
>Object.create({}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>{} : {}

var o = Object.create(<object>{});       // object
>o : 任意
>类型别名 :=> 任意
>Object.create(<object>{}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
><object>{} : 实例
>类型别名 :=> 实例
>{} : {}

var a = Object.create(null, {});           // any
>a : 任意
>类型别名 :=> 任意
>Object.create(null, {}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>null : 空值
>类型别名 :=> 空值
>{} : {}

var a = Object.create({ a: 1, b: "" }, {});
>a : 任意
>类型别名 :=> 任意
>Object.create({ a: 1, b: "" }, {}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>{ a: 1, b: "" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>"" : ""
>{} : {}

var a = Object.create(union, {});
>a : 任意
>类型别名 :=> 任意
>Object.create(union, {}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>union : { a: 数字; b: 文字; }
>{} : {}

var a = Object.create({}, {});
>a : 任意
>类型别名 :=> 任意
>Object.create({}, {}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>{} : {}
>{} : {}

var a = Object.create(<object>{}, {});
>a : 任意
>类型别名 :=> 任意
>Object.create(<object>{}, {}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
><object>{} : 实例
>类型别名 :=> 实例
>{} : {}
>{} : {}

