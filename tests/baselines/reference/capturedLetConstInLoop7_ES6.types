=== tests/cases/compiler/capturedLetConstInLoop7_ES6.ts ===
//===let
l0:
>l0 : any
>类型别名 :=> 任意

for (let x of []) {
>x : any
>类型别名 :=> 任意
>[] : undefined[]

    (function() { return x});
>(function() { return x}) : () => any
>function() { return x} : () => any
>x : any
>类型别名 :=> 任意

    (() => x);
>(() => x) : () => any
>() => x : () => any
>x : any
>类型别名 :=> 任意

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break l0;
>l0 : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue l0;
>l0 : any
>类型别名 :=> 任意
    }
}

l00:
>l00 : any
>类型别名 :=> 任意

for (let x in []) {
>x : string
>类型别名 :=> 文字
>[] : undefined[]

    (function() { return x});
>(function() { return x}) : () => string
>function() { return x} : () => string
>x : string
>类型别名 :=> 文字

    (() => x);
>(() => x) : () => string
>() => x : () => string
>x : string
>类型别名 :=> 文字

    if (x == "1") {
>x == "1" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"1" : "1"

        break;
    }
    if (x == "1") {
>x == "1" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"1" : "1"

        break l00;
>l00 : any
>类型别名 :=> 任意
    }
    if (x == "2") {
>x == "2" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"2" : "2"

        continue;
    }
    if (x == "2") {
>x == "2" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"2" : "2"

        continue l00;
>l00 : any
>类型别名 :=> 任意
    }
}

l1:
>l1 : any
>类型别名 :=> 任意

for (let x = 0; x < 1; ++x) {
>x : number
>类型别名 :=> 数字
>0 : 0
>x < 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1
>++x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : number
>类型别名 :=> 数字

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : number
>类型别名 :=> 数字

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        break l1;
>l1 : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>2 : 2

        continue l1;
>l1 : any
>类型别名 :=> 任意
    }
}

l2:
>l2 : any
>类型别名 :=> 任意

while (1 === 1) {
>1 === 1 : boolean
>类型别名 :=> 真假
>1 : 1
>1 : 1

    let x;
>x : any
>类型别名 :=> 任意

    (function() { return x});
>(function() { return x}) : () => any
>function() { return x} : () => any
>x : any
>类型别名 :=> 任意

    (() => x);
>(() => x) : () => any
>() => x : () => any
>x : any
>类型别名 :=> 任意

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break l2;
>l2 : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue l2;
>l2 : any
>类型别名 :=> 任意
    }
}

l3:
>l3 : any
>类型别名 :=> 任意

do {
    let x;
>x : any
>类型别名 :=> 任意

    (function() { return x});
>(function() { return x}) : () => any
>function() { return x} : () => any
>x : any
>类型别名 :=> 任意

    (() => x);
>(() => x) : () => any
>() => x : () => any
>x : any
>类型别名 :=> 任意

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break l3;
>l3 : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue l3;
>l3 : any
>类型别名 :=> 任意
    }
} while (1 === 1)
>1 === 1 : boolean
>类型别名 :=> 真假
>1 : 1
>1 : 1

l4:
>l4 : any
>类型别名 :=> 任意

for (let y = 0; y < 1; ++y) {
>y : number
>类型别名 :=> 数字
>0 : 0
>y < 1 : boolean
>类型别名 :=> 真假
>y : number
>类型别名 :=> 数字
>1 : 1
>++y : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    let x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : number
>类型别名 :=> 数字

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : number
>类型别名 :=> 数字

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        break l4;
>l4 : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>2 : 2

        continue l4;
>l4 : any
>类型别名 :=> 任意
    }
}

l5:
>l5 : any
>类型别名 :=> 任意

for (let x = 0, y = 1; x < 1; ++x) {
>x : number
>类型别名 :=> 数字
>0 : 0
>y : number
>类型别名 :=> 数字
>1 : 1
>x < 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1
>++x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        break l5;
>l5 : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>2 : 2

        continue l5;
>l5 : any
>类型别名 :=> 任意
    }
}

l6:
>l6 : any
>类型别名 :=> 任意

while (1 === 1) {
>1 === 1 : boolean
>类型别名 :=> 真假
>1 : 1
>1 : 1

    let x, y;
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    (function() { return x + y});
>(function() { return x + y}) : () => any
>function() { return x + y} : () => any
>x + y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    (() => x + y);
>(() => x + y) : () => any
>() => x + y : () => any
>x + y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break l6;
>l6 : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue l6;
>l6 : any
>类型别名 :=> 任意
    }

}

l7:
>l7 : any
>类型别名 :=> 任意

do {
    let x, y;
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    (function() { return x + y});
>(function() { return x + y}) : () => any
>function() { return x + y} : () => any
>x + y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    (() => x + y);
>(() => x + y) : () => any
>() => x + y : () => any
>x + y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break l7;
>l7 : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue l7;
>l7 : any
>类型别名 :=> 任意
    }
} while (1 === 1)
>1 === 1 : boolean
>类型别名 :=> 真假
>1 : 1
>1 : 1

l8:
>l8 : any
>类型别名 :=> 任意

for (let y = 0; y < 1; ++y) {
>y : number
>类型别名 :=> 数字
>0 : 0
>y < 1 : boolean
>类型别名 :=> 真假
>y : number
>类型别名 :=> 数字
>1 : 1
>++y : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    let x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        break l8;
>l8 : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>2 : 2

        continue l8;
>l8 : any
>类型别名 :=> 任意
    }
}

//===const
l0_c:
>l0_c : any
>类型别名 :=> 任意

for (const x of []) {
>x : any
>类型别名 :=> 任意
>[] : undefined[]

    (function() { return x});
>(function() { return x}) : () => any
>function() { return x} : () => any
>x : any
>类型别名 :=> 任意

    (() => x);
>(() => x) : () => any
>() => x : () => any
>x : any
>类型别名 :=> 任意

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        break l0_c;
>l0_c : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>2 : 2

        continue l0_c;
>l0_c : any
>类型别名 :=> 任意
    }
}

l00_c:
>l00_c : any
>类型别名 :=> 任意

for (const x in []) {
>x : string
>类型别名 :=> 文字
>[] : undefined[]

    (function() { return x});
>(function() { return x}) : () => string
>function() { return x} : () => string
>x : string
>类型别名 :=> 文字

    (() => x);
>(() => x) : () => string
>() => x : () => string
>x : string
>类型别名 :=> 文字

    if (x == "1") {
>x == "1" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"1" : "1"

        break;
    }
    if (x == "1") {
>x == "1" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"1" : "1"

        break l00_c;
>l00_c : any
>类型别名 :=> 任意
    }
    if (x == "2") {
>x == "2" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"2" : "2"

        continue;
    }
    if (x == "2") {
>x == "2" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"2" : "2"

        continue l00_c;
>l00_c : any
>类型别名 :=> 任意
    }
}

l1_c:
>l1_c : any
>类型别名 :=> 任意

for (const x = 0; x < 1;) {
>x : 0
>0 : 0
>x < 1 : boolean
>类型别名 :=> 真假
>x : 0
>1 : 1

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : 0

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : 0

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : 0
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : 0
>1 : 1

        break l1_c;
>l1_c : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : 0
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : 0
>2 : 2

        continue l1_c;
>l1_c : any
>类型别名 :=> 任意
    }
}

l2_c:
>l2_c : any
>类型别名 :=> 任意

while (1 === 1) {
>1 === 1 : boolean
>类型别名 :=> 真假
>1 : 1
>1 : 1

    const x = 1;
>x : 1
>1 : 1

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : 1

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : 1

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : 1
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>1 : 1

        break l2_c;
>l2_c : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue l2_c;
>l2_c : any
>类型别名 :=> 任意
    }
}

l3_c:
>l3_c : any
>类型别名 :=> 任意

do {
    const x = 1;
>x : 1
>1 : 1

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : 1

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : 1

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : 1
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>1 : 1

        break l3_c;
>l3_c : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue l3_c;
>l3_c : any
>类型别名 :=> 任意
    }
} while (1 === 1)
>1 === 1 : boolean
>类型别名 :=> 真假
>1 : 1
>1 : 1

l4_c:
>l4_c : any
>类型别名 :=> 任意

for (const y = 0; y < 1;) {
>y : 0
>0 : 0
>y < 1 : boolean
>类型别名 :=> 真假
>y : 0
>1 : 1

    const x = 1;
>x : 1
>1 : 1

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : 1

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : 1

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : 1
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>1 : 1

        break l4_c;
>l4_c : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue l4_c;
>l4_c : any
>类型别名 :=> 任意
    }
}

l5_c:
>l5_c : any
>类型别名 :=> 任意

for (const x = 0, y = 1; x < 1;) {
>x : 0
>0 : 0
>y : 1
>1 : 1
>x < 1 : boolean
>类型别名 :=> 真假
>x : 0
>1 : 1

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>类型别名 :=> 数字
>x : 0
>y : 1

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>类型别名 :=> 数字
>x : 0
>y : 1

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : 0
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : 0
>1 : 1

        break l5_c;
>l5_c : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : 0
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : 0
>2 : 2

        continue l5_c;
>l5_c : any
>类型别名 :=> 任意
    }
}

l6_c:
>l6_c : any
>类型别名 :=> 任意

while (1 === 1) {
>1 === 1 : boolean
>类型别名 :=> 真假
>1 : 1
>1 : 1

    const x = 1, y = 1;
>x : 1
>1 : 1
>y : 1
>1 : 1

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>类型别名 :=> 数字
>x : 1
>y : 1

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>类型别名 :=> 数字
>x : 1
>y : 1

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : 1
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>1 : 1

        break l6_c;
>l6_c : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue l6_c;
>l6_c : any
>类型别名 :=> 任意
    }

}

l7_c:
>l7_c : any
>类型别名 :=> 任意

do {
    const x = 1, y = 1;
>x : 1
>1 : 1
>y : 1
>1 : 1

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>类型别名 :=> 数字
>x : 1
>y : 1

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>类型别名 :=> 数字
>x : 1
>y : 1

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : 1
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>1 : 1

        break l7_c;
>l7_c : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue l7_c;
>l7_c : any
>类型别名 :=> 任意
    }
} while (1 === 1)
>1 === 1 : boolean
>类型别名 :=> 真假
>1 : 1
>1 : 1

l8_c:
>l8_c : any
>类型别名 :=> 任意

for (const y = 0; y < 1;) {
>y : 0
>0 : 0
>y < 1 : boolean
>类型别名 :=> 真假
>y : 0
>1 : 1

    const x = 1;
>x : 1
>1 : 1

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>类型别名 :=> 数字
>x : 1
>y : 0

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>类型别名 :=> 数字
>x : 1
>y : 0

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : 1
>1 : 1

        break;
    }
    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>1 : 1

        break l8_c;
>l8_c : any
>类型别名 :=> 任意
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue;
    }
    if (x == 2) {
>x == 2 : boolean
>类型别名 :=> 真假
>x : never
>类型别名 :=> 不及
>2 : 2

        continue l8_c;
>l8_c : any
>类型别名 :=> 任意
    }
}
