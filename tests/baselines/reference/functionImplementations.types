=== tests/cases/conformance/functions/functionImplementations.ts ===
// FunctionExpression with no return type annotation and no return statement returns void
var v: void = function () { } ();
>v : 无值
>类型别名 :=> 无值
>function () { } () : 无值
>类型别名 :=> 无值
>function () { } : () => 无值

// FunctionExpression f with no return type annotation and directly references f in its body returns any
var a: any = function f() {
>a : 任意
>类型别名 :=> 任意
>function f() {    return f;} : () => 任意
>f : () => 任意

    return f;
>f : () => 任意

};
var a: any = function f() {
>a : 任意
>类型别名 :=> 任意
>function f() {    return f();} : () => 任意
>f : () => 任意

    return f();
>f() : 任意
>类型别名 :=> 任意
>f : () => 任意

};

// FunctionExpression f with no return type annotation and indirectly references f in its body returns any
var a: any = function f() {
>a : 任意
>类型别名 :=> 任意
>function f() {    var x = f;    return x;} : () => 任意
>f : () => 任意

    var x = f;
>x : () => 任意
>f : () => 任意

    return x;
>x : () => 任意

};

// Two mutually recursive function implementations with no return type annotations
function rec1() {
>rec1 : () => 任意

    return rec2();
>rec2() : 任意
>类型别名 :=> 任意
>rec2 : () => 任意
}
function rec2() {
>rec2 : () => 任意

    return rec1();
>rec1() : 任意
>类型别名 :=> 任意
>rec1 : () => 任意
}
var a = rec1();
>a : 任意
>类型别名 :=> 任意
>rec1() : 任意
>类型别名 :=> 任意
>rec1 : () => 任意

var a = rec2();
>a : 任意
>类型别名 :=> 任意
>rec2() : 任意
>类型别名 :=> 任意
>rec2 : () => 任意

// Two mutually recursive function implementations with return type annotation in one
function rec3(): number {
>rec3 : () => 数字

    return rec4();
>rec4() : 数字
>类型别名 :=> 数字
>rec4 : () => 数字
}
function rec4() {
>rec4 : () => 数字

    return rec3();
>rec3() : 数字
>类型别名 :=> 数字
>rec3 : () => 数字
}
var n: number;
>n : 数字
>类型别名 :=> 数字

var n = rec3();
>n : 数字
>类型别名 :=> 数字
>rec3() : 数字
>类型别名 :=> 数字
>rec3 : () => 数字

var n = rec4();
>n : 数字
>类型别名 :=> 数字
>rec4() : 数字
>类型别名 :=> 数字
>rec4 : () => 数字

// FunctionExpression with no return type annotation and returns a number
var n = function () {
>n : 数字
>类型别名 :=> 数字
>function () {    return 3;} () : 数字
>类型别名 :=> 数字
>function () {    return 3;} : () => 数字

    return 3;
>3 : 3

} ();

// FunctionExpression with no return type annotation and returns null
var nu = null;
>nu : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

var nu = function () {
>nu : 任意
>类型别名 :=> 任意
>function () {    return null;} () : 任意
>类型别名 :=> 任意
>function () {    return null;} : () => 任意

    return null;
>null : 空值
>类型别名 :=> 空值

} ();

// FunctionExpression with no return type annotation and returns undefined
var un = undefined;
>un : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

var un = function () {
>un : 任意
>类型别名 :=> 任意
>function () {    return undefined;} () : 任意
>类型别名 :=> 任意
>function () {    return undefined;} : () => 任意

    return undefined;
>undefined : 未定
>类型别名 :=> 未定

} ();

// FunctionExpression with no return type annotation and returns a type parameter type
var n = function <T>(x: T) {
>n : 数字
>类型别名 :=> 数字
>function <T>(x: T) {    return x;} (4) : 4
>function <T>(x: T) {    return x;} : <T>(x: T) => T
>T : T
>x : T
>T : T

    return x;
>x : T

} (4);
>4 : 4

// FunctionExpression with no return type annotation and returns a constrained type parameter type
var n = function <T extends {}>(x: T) {
>n : 数字
>类型别名 :=> 数字
>function <T extends {}>(x: T) {    return x;} (4) : 4
>function <T extends {}>(x: T) {    return x;} : <T 扩展 {}>(x: T) => T
>T : T
>x : T
>T : T

    return x;
>x : T

} (4);
>4 : 4

// FunctionExpression with no return type annotation with multiple return statements with identical types
var n = function () {
>n : 数字
>类型别名 :=> 数字
>function () {    return 3;    return 5;}() : 3 | 5
>function () {    return 3;    return 5;} : () => 3 | 5

    return 3;
>3 : 3

    return 5;
>5 : 5

}();

// Otherwise, the inferred return type is the first of the types of the return statement expressions
// in the function body that is a supertype of each of the others, 
// ignoring return statements with no expressions.
// A compile - time error occurs if no return statement expression has a type that is a supertype of each of the others.
// FunctionExpression with no return type annotation with multiple return statements with subtype relation between returns
class Base { private m; }
>Base : Base
>m : 任意
>类型别名 :=> 任意

class Derived extends Base { private q; }
>Derived : Derived
>Base : Base
>q : 任意
>类型别名 :=> 任意

var b: Base;
>b : Base
>Base : Base

var b = function () {
>b : Base
>function () {    return new Base(); return new Derived();} () : Base
>function () {    return new Base(); return new Derived();} : () => Base

    return new Base(); return new Derived();
>new Base() : Base
>Base : 类为 Base
>new Derived() : Derived
>Derived : 类为 Derived

} ();

// FunctionExpression with no return type annotation with multiple return statements with one a recursive call
var a = function f() {
>a : 任意
>类型别名 :=> 任意
>function f() {    return new Base(); return new Derived(); return f(); // ?} () : 任意
>类型别名 :=> 任意
>function f() {    return new Base(); return new Derived(); return f(); // ?} : () => 任意
>f : () => 任意

    return new Base(); return new Derived(); return f(); // ?
>new Base() : Base
>Base : 类为 Base
>new Derived() : Derived
>Derived : 类为 Derived
>f() : 任意
>类型别名 :=> 任意
>f : () => 任意

} ();

// FunctionExpression with non -void return type annotation with a single throw statement
undefined === function (): number {
>undefined === function (): number {    throw undefined;} : 真假
>类型别名 :=> 真假
>undefined : 未定
>类型别名 :=> 未定
>function (): number {    throw undefined;} : () => 数字

    throw undefined;
>undefined : 未定
>类型别名 :=> 未定

};

// Type of 'this' in function implementation is 'any'
function thisFunc() {
>thisFunc : () => 无值

    var x = this;
>x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意

    var x: any;
>x : 任意
>类型别名 :=> 任意
}

// Function signature with optional parameter, no type annotation and initializer has initializer's type
function opt1(n = 4) {
>opt1 : (n?: 数字) => 无值
>n : 数字
>类型别名 :=> 数字
>4 : 4

    var m = n;
>m : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

    var m: number;
>m : 数字
>类型别名 :=> 数字
}

// Function signature with optional parameter, no type annotation and initializer has initializer's widened type
function opt2(n = { x: null, y: undefined }) {
>opt2 : (n?: { x: 任意; y: 任意; }) => 无值
>n : { x: 任意; y: 任意; }
>{ x: null, y: undefined } : { x: 空值; y: 未定; }
>x : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
>y : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

    var m = n;
>m : { x: 任意; y: 任意; }
>n : { x: 任意; y: 任意; }

    var m: { x: any; y: any };
>m : { x: 任意; y: 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

// Function signature with initializer referencing other parameter to the left
function opt3(n: number, m = n) {
>opt3 : (n: 数字, m?: 数字) => 无值
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

    var y = m;
>y : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

    var y: number;
>y : 数字
>类型别名 :=> 数字
}

// Function signature with optional parameter has correct codegen 
// (tested above)

// FunctionExpression with non -void return type annotation return with no expression
function f6(): number {
>f6 : () => 数字

    return;
}

class Derived2 extends Base { private r: string; }
>Derived2 : Derived2
>Base : Base
>r : 文字
>类型别名 :=> 文字

class AnotherClass { private x }
>AnotherClass : AnotherClass
>x : 任意
>类型别名 :=> 任意

// if f is a contextually typed function expression, the inferred return type is the union type
// of the types of the return statement expressions in the function body, 
// ignoring return statements with no expressions.
var f7: (x: number) => string | number = x => { // should be (x: number) => number | string
>f7 : (x: 数字) => 文字 | 数字
>x : 数字
>类型别名 :=> 数字
>x => { // should be (x: number) => number | string    if (x < 0) { return x; }    return x.toString();} : (x: 数字) => 文字 | 数字
>x : 数字
>类型别名 :=> 数字

    if (x < 0) { return x; }
>x < 0 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>0 : 0
>x : 数字
>类型别名 :=> 数字

    return x.toString();
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : (radix?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
}
var f8: (x: number) => any = x => { // should be (x: number) => Base
>f8 : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>x => { // should be (x: number) => Base    return new Base();    return new Derived2();} : (x: 数字) => Base
>x : 数字
>类型别名 :=> 数字

    return new Base();
>new Base() : Base
>Base : 类为 Base

    return new Derived2();
>new Derived2() : Derived2
>Derived2 : 类为 Derived2
}
var f9: (x: number) => any = x => { // should be (x: number) => Base
>f9 : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>x => { // should be (x: number) => Base    return new Base();    return new Derived();    return new Derived2();} : (x: 数字) => Base
>x : 数字
>类型别名 :=> 数字

    return new Base();
>new Base() : Base
>Base : 类为 Base

    return new Derived();
>new Derived() : Derived
>Derived : 类为 Derived

    return new Derived2();
>new Derived2() : Derived2
>Derived2 : 类为 Derived2
}
var f10: (x: number) => any = x => { // should be (x: number) => Derived | Derived1
>f10 : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>x => { // should be (x: number) => Derived | Derived1    return new Derived();    return new Derived2();} : (x: 数字) => Derived | Derived2
>x : 数字
>类型别名 :=> 数字

    return new Derived();
>new Derived() : Derived
>Derived : 类为 Derived

    return new Derived2();
>new Derived2() : Derived2
>Derived2 : 类为 Derived2
}
var f11: (x: number) => any = x => { // should be (x: number) => Base | AnotherClass
>f11 : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>x => { // should be (x: number) => Base | AnotherClass    return new Base();    return new AnotherClass();} : (x: 数字) => Base | AnotherClass
>x : 数字
>类型别名 :=> 数字

    return new Base();
>new Base() : Base
>Base : 类为 Base

    return new AnotherClass();
>new AnotherClass() : AnotherClass
>AnotherClass : 类为 AnotherClass
}
var f12: (x: number) => any = x => { // should be (x: number) => Base | AnotherClass
>f12 : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>x => { // should be (x: number) => Base | AnotherClass    return new Base();    return; // should be ignored    return new AnotherClass();} : (x: 数字) => Base | AnotherClass
>x : 数字
>类型别名 :=> 数字

    return new Base();
>new Base() : Base
>Base : 类为 Base

    return; // should be ignored
    return new AnotherClass();
>new AnotherClass() : AnotherClass
>AnotherClass : 类为 AnotherClass
}
