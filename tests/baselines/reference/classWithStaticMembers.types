=== tests/cases/conformance/classes/members/constructorFunctionTypes/classWithStaticMembers.ts ===
class C {
>C : C

    static fn() { return this; }
>fn : () => 类为 C
>this : 类为 C

    static get x() { return 1; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

    static set x(v) { }
>x : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

    constructor(public a: number, private b: number) { }
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字

    static foo: string; 
>foo : 文字
>类型别名 :=> 文字
}

var r = C.fn();
>r : 类为 C
>C.fn() : 类为 C
>C.fn : () => 类为 C
>C : 类为 C
>fn : () => 类为 C

var r2 = r.x;
>r2 : 数字
>类型别名 :=> 数字
>r.x : 数字
>类型别名 :=> 数字
>r : 类为 C
>x : 数字
>类型别名 :=> 数字

var r3 = r.foo;
>r3 : 文字
>类型别名 :=> 文字
>r.foo : 文字
>类型别名 :=> 文字
>r : 类为 C
>foo : 文字
>类型别名 :=> 文字

class D extends C {
>D : D
>C : C

    bar: string;
>bar : 文字
>类型别名 :=> 文字
}

var r = D.fn();
>r : 类为 C
>D.fn() : 类为 C
>D.fn : () => 类为 C
>D : 类为 D
>fn : () => 类为 C

var r2 = r.x;
>r2 : 数字
>类型别名 :=> 数字
>r.x : 数字
>类型别名 :=> 数字
>r : 类为 C
>x : 数字
>类型别名 :=> 数字

var r3 = r.foo;
>r3 : 文字
>类型别名 :=> 文字
>r.foo : 文字
>类型别名 :=> 文字
>r : 类为 C
>foo : 文字
>类型别名 :=> 文字

