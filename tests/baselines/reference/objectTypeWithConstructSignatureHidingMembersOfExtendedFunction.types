=== tests/cases/conformance/types/members/objectTypeWithConstructSignatureHidingMembersOfExtendedFunction.ts ===
interface Function {
>Function : Function

    data: number;
>data : number
>类型别名 :=> 数字

    [x: string]: Object;
>x : string
>类型别名 :=> 文字
>Object : Object
}

interface I {
>I : I

    new(): number;
    apply(a: any, b?: any): void;
>apply : (a: any, b?: any) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

    call(thisArg: number, ...argArray: number[]): any;
>call : (thisArg: number, ...argArray: number[]) => any
>thisArg : number
>类型别名 :=> 数字
>argArray : number[]
}

var i: I;
>i : I
>I : I

var r1: (a: any, b?: any) => void = i.apply;
>r1 : (a: any, b?: any) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>i.apply : (a: any, b?: any) => void
>i : I
>apply : (a: any, b?: any) => void

var r1b: (thisArg: number, ...argArray: number[]) => void = i.call;
>r1b : (thisArg: number, ...argArray: number[]) => void
>thisArg : number
>类型别名 :=> 数字
>argArray : number[]
>i.call : (thisArg: number, ...argArray: number[]) => any
>i : I
>call : (thisArg: number, ...argArray: number[]) => any

var r1c = i.arguments;
>r1c : any
>类型别名 :=> 任意
>i.arguments : any
>类型别名 :=> 任意
>i : I
>arguments : any
>类型别名 :=> 任意

var r1d = i.data;
>r1d : number
>类型别名 :=> 数字
>i.data : number
>类型别名 :=> 数字
>i : I
>data : number
>类型别名 :=> 数字

var r1e = i['hm']; // should be Object
>r1e : any
>类型别名 :=> 任意
>i['hm'] : any
>类型别名 :=> 任意
>i : I
>'hm' : "hm"

var x: {
>x : { new (): number; apply(a: any, b?: any): void; call(thisArg: number, ...argArray: number[]): any; }

    new(): number;
    apply(a: any, b?: any): void;
>apply : (a: any, b?: any) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

    call(thisArg: number, ...argArray: number[]): any;
>call : (thisArg: number, ...argArray: number[]) => any
>thisArg : number
>类型别名 :=> 数字
>argArray : number[]
}

var r2: (a: any, b?: any) => void = x.apply;
>r2 : (a: any, b?: any) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>x.apply : (a: any, b?: any) => void
>x : { new (): number; apply(a: any, b?: any): void; call(thisArg: number, ...argArray: number[]): any; }
>apply : (a: any, b?: any) => void

var r2b: (thisArg: number, ...argArray: number[]) => void = x.call;
>r2b : (thisArg: number, ...argArray: number[]) => void
>thisArg : number
>类型别名 :=> 数字
>argArray : number[]
>x.call : (thisArg: number, ...argArray: number[]) => any
>x : { new (): number; apply(a: any, b?: any): void; call(thisArg: number, ...argArray: number[]): any; }
>call : (thisArg: number, ...argArray: number[]) => any

var r2c = x.arguments;
>r2c : any
>类型别名 :=> 任意
>x.arguments : any
>类型别名 :=> 任意
>x : { new (): number; apply(a: any, b?: any): void; call(thisArg: number, ...argArray: number[]): any; }
>arguments : any
>类型别名 :=> 任意

var r2d = x.data;
>r2d : number
>类型别名 :=> 数字
>x.data : number
>类型别名 :=> 数字
>x : { new (): number; apply(a: any, b?: any): void; call(thisArg: number, ...argArray: number[]): any; }
>data : number
>类型别名 :=> 数字

var r2e = x['hm']; // should be Object
>r2e : any
>类型别名 :=> 任意
>x['hm'] : any
>类型别名 :=> 任意
>x : { new (): number; apply(a: any, b?: any): void; call(thisArg: number, ...argArray: number[]): any; }
>'hm' : "hm"

