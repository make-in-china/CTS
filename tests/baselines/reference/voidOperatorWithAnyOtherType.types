=== tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithAnyOtherType.ts ===
// void  operator on any type

var ANY: any;
>ANY : 任意
>类型别名 :=> 任意

var ANY1;
>ANY1 : 任意
>类型别名 :=> 任意

var ANY2: any[] = ["", ""];
>ANY2 : 任意[]
>["", ""] : 文字[]
>"" : ""
>"" : ""

var obj: () => {}
>obj : () => {}

var obj1 = {x:"",y:1};
>obj1 : { x: 文字; y: 数字; }
>{x:"",y:1} : { x: 文字; y: 数字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : 数字
>类型别名 :=> 数字
>1 : 1

function foo(): any {
>foo : () => 任意

    var a;
>a : 任意
>类型别名 :=> 任意

    return a;
>a : 任意
>类型别名 :=> 任意
}
class A {
>A : A

    public a: any;
>a : 任意
>类型别名 :=> 任意

    static foo() {
>foo : () => 任意

        var a;
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }
}
module M {
>M : 类为 M

    export var n: any;
>n : 任意
>类型别名 :=> 任意
}
var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// any type var
var ResultIsAny1 = void ANY1;
>ResultIsAny1 : 任意
>类型别名 :=> 任意
>void ANY1 : 未定
>类型别名 :=> 未定
>ANY1 : 任意
>类型别名 :=> 任意

var ResultIsAny2 = void ANY2;
>ResultIsAny2 : 任意
>类型别名 :=> 任意
>void ANY2 : 未定
>类型别名 :=> 未定
>ANY2 : 任意[]

var ResultIsAny3 = void A;
>ResultIsAny3 : 任意
>类型别名 :=> 任意
>void A : 未定
>类型别名 :=> 未定
>A : 类为 A

var ResultIsAny4 = void M;
>ResultIsAny4 : 任意
>类型别名 :=> 任意
>void M : 未定
>类型别名 :=> 未定
>M : 类为 M

var ResultIsAny5 = void obj;
>ResultIsAny5 : 任意
>类型别名 :=> 任意
>void obj : 未定
>类型别名 :=> 未定
>obj : () => {}

var ResultIsAny6 = void obj1;
>ResultIsAny6 : 任意
>类型别名 :=> 任意
>void obj1 : 未定
>类型别名 :=> 未定
>obj1 : { x: 文字; y: 数字; }

// any type literal
var ResultIsAny7 = void undefined;
>ResultIsAny7 : 任意
>类型别名 :=> 任意
>void undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

var ResultIsAny8 = void null;
>ResultIsAny8 : 任意
>类型别名 :=> 任意
>void null : 未定
>类型别名 :=> 未定
>null : 空值
>类型别名 :=> 空值

// any type expressions
var ResultIsAny9 = void ANY2[0]
>ResultIsAny9 : 任意
>类型别名 :=> 任意
>void ANY2[0] : 未定
>类型别名 :=> 未定
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0

var ResultIsAny10 = void obj1.x;
>ResultIsAny10 : 任意
>类型别名 :=> 任意
>void obj1.x : 未定
>类型别名 :=> 未定
>obj1.x : 文字
>类型别名 :=> 文字
>obj1 : { x: 文字; y: 数字; }
>x : 文字
>类型别名 :=> 文字

var ResultIsAny11 = void obj1.y;
>ResultIsAny11 : 任意
>类型别名 :=> 任意
>void obj1.y : 未定
>类型别名 :=> 未定
>obj1.y : 数字
>类型别名 :=> 数字
>obj1 : { x: 文字; y: 数字; }
>y : 数字
>类型别名 :=> 数字

var ResultIsAny12 = void objA.a;
>ResultIsAny12 : 任意
>类型别名 :=> 任意
>void objA.a : 未定
>类型别名 :=> 未定
>objA.a : 任意
>类型别名 :=> 任意
>objA : A
>a : 任意
>类型别名 :=> 任意

var ResultIsAny13 = void M.n;
>ResultIsAny13 : 任意
>类型别名 :=> 任意
>void M.n : 未定
>类型别名 :=> 未定
>M.n : 任意
>类型别名 :=> 任意
>M : 类为 M
>n : 任意
>类型别名 :=> 任意

var ResultIsAny14 = void foo();
>ResultIsAny14 : 任意
>类型别名 :=> 任意
>void foo() : 未定
>类型别名 :=> 未定
>foo() : 任意
>类型别名 :=> 任意
>foo : () => 任意

var ResultIsAny15 = void A.foo();
>ResultIsAny15 : 任意
>类型别名 :=> 任意
>void A.foo() : 未定
>类型别名 :=> 未定
>A.foo() : 任意
>类型别名 :=> 任意
>A.foo : () => 任意
>A : 类为 A
>foo : () => 任意

var ResultIsAny16 = void (ANY + ANY1);
>ResultIsAny16 : 任意
>类型别名 :=> 任意
>void (ANY + ANY1) : 未定
>类型别名 :=> 未定
>(ANY + ANY1) : 任意
>类型别名 :=> 任意
>ANY + ANY1 : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意
>ANY1 : 任意
>类型别名 :=> 任意

var ResultIsAny17 = void (null + undefined);
>ResultIsAny17 : 任意
>类型别名 :=> 任意
>void (null + undefined) : 未定
>类型别名 :=> 未定
>(null + undefined) : 任意
>类型别名 :=> 任意
>null + undefined : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

var ResultIsAny18 = void (null + null);
>ResultIsAny18 : 任意
>类型别名 :=> 任意
>void (null + null) : 未定
>类型别名 :=> 未定
>(null + null) : 任意
>类型别名 :=> 任意
>null + null : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

var ResultIsAny19 = void (undefined + undefined);
>ResultIsAny19 : 任意
>类型别名 :=> 任意
>void (undefined + undefined) : 未定
>类型别名 :=> 未定
>(undefined + undefined) : 任意
>类型别名 :=> 任意
>undefined + undefined : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

// multiple void  operators
var ResultIsAny20 = void void ANY;
>ResultIsAny20 : 任意
>类型别名 :=> 任意
>void void ANY : 未定
>类型别名 :=> 未定
>void ANY : 未定
>类型别名 :=> 未定
>ANY : 任意
>类型别名 :=> 任意

var ResultIsAny21 = void void void (ANY + ANY1);
>ResultIsAny21 : 任意
>类型别名 :=> 任意
>void void void (ANY + ANY1) : 未定
>类型别名 :=> 未定
>void void (ANY + ANY1) : 未定
>类型别名 :=> 未定
>void (ANY + ANY1) : 未定
>类型别名 :=> 未定
>(ANY + ANY1) : 任意
>类型别名 :=> 任意
>ANY + ANY1 : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意
>ANY1 : 任意
>类型别名 :=> 任意

// miss assignment operators
void ANY;
>void ANY : 未定
>类型别名 :=> 未定
>ANY : 任意
>类型别名 :=> 任意

void ANY1;
>void ANY1 : 未定
>类型别名 :=> 未定
>ANY1 : 任意
>类型别名 :=> 任意

void ANY2[0];
>void ANY2[0] : 未定
>类型别名 :=> 未定
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0

void ANY, ANY1;
>void ANY, ANY1 : 任意
>类型别名 :=> 任意
>void ANY : 未定
>类型别名 :=> 未定
>ANY : 任意
>类型别名 :=> 任意
>ANY1 : 任意
>类型别名 :=> 任意

void objA.a;
>void objA.a : 未定
>类型别名 :=> 未定
>objA.a : 任意
>类型别名 :=> 任意
>objA : A
>a : 任意
>类型别名 :=> 任意

void M.n;
>void M.n : 未定
>类型别名 :=> 未定
>M.n : 任意
>类型别名 :=> 任意
>M : 类为 M
>n : 任意
>类型别名 :=> 任意

