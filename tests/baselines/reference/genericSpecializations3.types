=== tests/cases/compiler/genericSpecializations3.ts ===
interface IFoo<T> {
>IFoo : IFoo<T>
>T : T

    foo(x: T): T;
>foo : (x: T) => T
>x : T
>T : T
>T : T
}

var iFoo: IFoo<number>;
>iFoo : IFoo<数字>
>IFoo : IFoo<T>

iFoo.foo(1);
>iFoo.foo(1) : 数字
>类型别名 :=> 数字
>iFoo.foo : (x: 数字) => 数字
>iFoo : IFoo<数字>
>foo : (x: 数字) => 数字
>1 : 1

class IntFooBad implements IFoo<number> { // error
>IntFooBad : IntFooBad
>IFoo : IFoo<T>

    foo(x: string): string { return null; }
>foo : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值
}

var intFooBad: IntFooBad;
>intFooBad : IntFooBad
>IntFooBad : IntFooBad

class IntFoo implements IFoo<number> {
>IntFoo : IntFoo
>IFoo : IFoo<T>

    foo(x: number): number { return null; }
>foo : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值
}

var intFoo: IntFoo;
>intFoo : IntFoo
>IntFoo : IntFoo

class StringFoo2 implements IFoo<string> {
>StringFoo2 : StringFoo2
>IFoo : IFoo<T>

    foo(x: string): string { return null; }
>foo : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值
}

var stringFoo2: StringFoo2;
>stringFoo2 : StringFoo2
>StringFoo2 : StringFoo2

stringFoo2.foo("hm");
>stringFoo2.foo("hm") : 文字
>类型别名 :=> 文字
>stringFoo2.foo : (x: 文字) => 文字
>stringFoo2 : StringFoo2
>foo : (x: 文字) => 文字
>"hm" : "hm"


intFoo = stringFoo2; // error
>intFoo = stringFoo2 : StringFoo2
>intFoo : IntFoo
>stringFoo2 : StringFoo2

stringFoo2 = intFoo; // error
>stringFoo2 = intFoo : IntFoo
>stringFoo2 : StringFoo2
>intFoo : IntFoo


class StringFoo3 implements IFoo<string> { // error
>StringFoo3 : StringFoo3
>IFoo : IFoo<T>

    foo<T>(x: T): T { return null; }
>foo : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
>null : 空值
>类型别名 :=> 空值
}
var stringFoo3: StringFoo3;
>stringFoo3 : StringFoo3
>StringFoo3 : StringFoo3

