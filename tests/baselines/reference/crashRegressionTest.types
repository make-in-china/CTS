=== tests/cases/compiler/crashRegressionTest.ts ===
module MsPortal.Util.TemplateEngine {
>MsPortal : typeof MsPortal
>Util : typeof Util
>TemplateEngine : typeof TemplateEngine

    "use strict";
>"use strict" : "use strict"
 
    interface TemplateKeyValue {
>TemplateKeyValue : TemplateKeyValue

        [name: string]: string;
>name : string
>类型别名 :=> 文字
    }
 
    class StringTemplate {
>StringTemplate : StringTemplate

        private _templateStorage: TemplateStorage;
>_templateStorage : TemplateStorage
>TemplateStorage : TemplateStorage
 
        constructor(templateStorage: TemplateStorage) {
>templateStorage : TemplateStorage
>TemplateStorage : TemplateStorage

            this._templateStorage = templateStorage;
>this._templateStorage = templateStorage : TemplateStorage
>this._templateStorage : TemplateStorage
>this : this
>_templateStorage : TemplateStorage
>templateStorage : TemplateStorage
        }
 
        public text(value?: string): any {
>text : (value?: string) => any
>value : string
>类型别名 :=> 文字

            this._templateStorage.templateSources[this._name] = value;
>this._templateStorage.templateSources[this._name] = value : string
>类型别名 :=> 文字
>this._templateStorage.templateSources[this._name] : string
>类型别名 :=> 文字
>this._templateStorage.templateSources : TemplateKeyValue
>this._templateStorage : TemplateStorage
>this : this
>_templateStorage : TemplateStorage
>templateSources : TemplateKeyValue
>this._name : any
>类型别名 :=> 任意
>this : this
>_name : any
>类型别名 :=> 任意
>value : string
>类型别名 :=> 文字
        }
    }
 
    export class TemplateStorage {
>TemplateStorage : TemplateStorage

        public templateSources: TemplateKeyValue = {};
>templateSources : TemplateKeyValue
>TemplateKeyValue : TemplateKeyValue
>{} : {}

        public templateData: TemplateKeyValue = {};
>templateData : TemplateKeyValue
>TemplateKeyValue : TemplateKeyValue
>{} : {}
    }
}

