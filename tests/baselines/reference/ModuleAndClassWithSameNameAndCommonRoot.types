=== tests/cases/conformance/internalModules/DeclarationMerging/module.ts ===
module X.Y {
>X : 类为 X
>Y : 类为 Y

    export module Point {
>Point : 类为 Point

        export var Origin = new Point(0, 0);
>Origin : Point
>new Point(0, 0) : Point
>Point : 类为 Point
>0 : 0
>0 : 0
    }
}

=== tests/cases/conformance/internalModules/DeclarationMerging/classPoint.ts ===
module X.Y {
>X : 类为 X
>Y : 类为 Y

    // duplicate identifier
    export class Point {
>Point : Point

        constructor(x: number, y: number) {
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

            this.x = x;
>this.x = x : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

            this.y = y;
>this.y = y : 数字
>类型别名 :=> 数字
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
        }
        x: number;
>x : 数字
>类型别名 :=> 数字

        y: number;
>y : 数字
>类型别名 :=> 数字
    }
}

=== tests/cases/conformance/internalModules/DeclarationMerging/simple.ts ===
module A {
>A : 类为 A

    export var Instance = new A();
>Instance : A
>new A() : A
>A : 类为 A
}

// duplicate identifier
class A {
>A : A

    id: string;
>id : 文字
>类型别名 :=> 文字
}

