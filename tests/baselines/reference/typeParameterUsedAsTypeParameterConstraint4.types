=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/typeParameterUsedAsTypeParameterConstraint4.ts ===
// Type parameters are in scope in their own and other type parameter lists
// Some negative cases

class C<T, U extends T, V extends U> {
>C : C<T, U, V>
>T : T
>U : U
>T : T
>V : V
>U : U

    z: W; // error
>z : 任意
>类型别名 :=> 任意
>W : No type information available!

    foo<W extends V>(x: W): T {
>foo : <W 扩展 V>(x: W) => T
>W : W
>V : V
>x : W
>W : W
>T : T

        var r: T;
>r : T
>T : T

        return x;
>x : W
    }
}

interface I<T, U extends T, V extends U> {
>I : I<T, U, V>
>T : T
>U : U
>T : T
>V : V
>U : U

    x: T;
>x : T
>T : T

    y: U;
>y : U
>U : U

    z: W; // error
>z : 任意
>类型别名 :=> 任意
>W : No type information available!

    foo<W extends V>(x: W): T;
>foo : <W 扩展 V>(x: W) => T
>W : W
>V : V
>x : W
>W : W
>T : T
}

function foo<T, U extends T>(x: T, y: U): V { // error
>foo : <T, U 扩展 T>(x: T, y: U) => 任意
>T : T
>U : U
>T : T
>x : T
>T : T
>y : U
>U : U
>V : No type information available!

    function bar<V extends T, W extends U>(): X { // error
>bar : <V 扩展 T, W 扩展 U>() => 任意
>V : V
>T : T
>W : W
>U : U
>X : No type information available!

        function baz<X extends W, Y extends V>(a: X, b: Y): T {
>baz : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>X : X
>W : W
>Y : Y
>V : V
>a : X
>X : X
>b : Y
>Y : Y
>T : T

            x = y;
>x = y : U
>x : T
>y : U

            return y;
>y : U
        }
    }
}

function foo2<U extends T, T>(x: T, y: U): W { // error
>foo2 : <U 扩展 T, T>(x: T, y: U) => 任意
>U : U
>T : T
>T : T
>x : T
>T : T
>y : U
>U : U
>W : No type information available!

    function bar<V extends T, W extends U>(): Y { // error
>bar : <V 扩展 T, W 扩展 U>() => 任意
>V : V
>T : T
>W : W
>U : U
>Y : No type information available!

        function baz<X extends W, Y extends V>(a: X, b: Y): T {
>baz : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>X : X
>W : W
>Y : Y
>V : V
>a : X
>X : X
>b : Y
>Y : Y
>T : T

            x = y;
>x = y : U
>x : T
>y : U

            return y;
>y : U
        }
    }
}

var f3 = <T, U extends T>(x: T, y: U) => {
>f3 : <T, U 扩展 T>(x: T, y: U) => 无值
><T, U extends T>(x: T, y: U) => {    function bar<V extends T, W extends U>(r: X, s: Y) { // error        var g = <X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        }    }} : <T, U 扩展 T>(x: T, y: U) => 无值
>T : T
>U : U
>T : T
>x : T
>T : T
>y : U
>U : U

    function bar<V extends T, W extends U>(r: X, s: Y) { // error
>bar : <V 扩展 T, W 扩展 U>(r: 任意, s: 任意) => 无值
>V : V
>T : T
>W : W
>U : U
>r : 任意
>类型别名 :=> 任意
>X : No type information available!
>s : 任意
>类型别名 :=> 任意
>Y : No type information available!

        var g = <X extends W, Y extends V>(a: X, b: Y): T => {
>g : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
><X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        } : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>X : X
>W : W
>Y : Y
>V : V
>a : X
>X : X
>b : Y
>Y : Y
>T : T

            x = y;
>x = y : U
>x : T
>y : U

            return y;
>y : U
        }
    }
}

var f4 = <U extends T, T>(x: V, y: X) => { // error
>f4 : <U 扩展 T, T>(x: 任意, y: 任意) => 无值
><U extends T, T>(x: V, y: X) => { // error    function bar<V extends T, W extends U>() {        var g = <X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        }    }} : <U 扩展 T, T>(x: 任意, y: 任意) => 无值
>U : U
>T : T
>T : T
>x : 任意
>类型别名 :=> 任意
>V : No type information available!
>y : 任意
>类型别名 :=> 任意
>X : No type information available!

    function bar<V extends T, W extends U>() {
>bar : <V 扩展 T, W 扩展 U>() => 无值
>V : V
>T : T
>W : W
>U : U

        var g = <X extends W, Y extends V>(a: X, b: Y): T => {
>g : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
><X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        } : <X 扩展 W, Y 扩展 V>(a: X, b: Y) => T
>X : X
>W : W
>Y : Y
>V : V
>a : X
>X : X
>b : Y
>Y : Y
>T : T

            x = y;
>x = y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

            return y;
>y : 任意
>类型别名 :=> 任意
        }
    }
}
