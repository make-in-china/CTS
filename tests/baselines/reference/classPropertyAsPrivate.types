=== tests/cases/conformance/classes/members/accessibility/classPropertyAsPrivate.ts ===
class C {
>C : C

    private x: string;
>x : 文字
>类型别名 :=> 文字

    private get y() { return null; }
>y : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

    private set y(x) { }
>y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    private foo() { }
>foo : () => 无值

    private static a: string;
>a : 文字
>类型别名 :=> 文字

    private static get b() { return null; }
>b : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

    private static set b(x) { }
>b : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    private static foo() { }
>foo : () => 无值
}

var c: C;
>c : C
>C : C

// all errors
c.x;
>c.x : 文字
>类型别名 :=> 文字
>c : C
>x : 文字
>类型别名 :=> 文字

c.y;
>c.y : 任意
>类型别名 :=> 任意
>c : C
>y : 任意
>类型别名 :=> 任意

c.y = 1;
>c.y = 1 : 1
>c.y : 任意
>类型别名 :=> 任意
>c : C
>y : 任意
>类型别名 :=> 任意
>1 : 1

c.foo();
>c.foo() : 无值
>类型别名 :=> 无值
>c.foo : () => 无值
>c : C
>foo : () => 无值

C.a;
>C.a : 文字
>类型别名 :=> 文字
>C : 类为 C
>a : 文字
>类型别名 :=> 文字

C.b();
>C.b() : 任意
>类型别名 :=> 任意
>C.b : 任意
>类型别名 :=> 任意
>C : 类为 C
>b : 任意
>类型别名 :=> 任意

C.b = 1;
>C.b = 1 : 1
>C.b : 任意
>类型别名 :=> 任意
>C : 类为 C
>b : 任意
>类型别名 :=> 任意
>1 : 1

C.foo();
>C.foo() : 无值
>类型别名 :=> 无值
>C.foo : () => 无值
>C : 类为 C
>foo : () => 无值

