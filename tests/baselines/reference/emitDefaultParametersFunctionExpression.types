=== tests/cases/conformance/es6/defaultParameters/emitDefaultParametersFunctionExpression.ts ===
var lambda1 = (y = "hello") => { }
>lambda1 : (y?: 文字) => 无值
>(y = "hello") => { } : (y?: 文字) => 无值
>y : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var lambda2 = (x: number, y = "hello") => { }
>lambda2 : (x: 数字, y?: 文字) => 无值
>(x: number, y = "hello") => { } : (x: 数字, y?: 文字) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var lambda3 = (x: number, y = "hello", ...rest) => { }
>lambda3 : (x: 数字, y?: 文字, ...rest: 任意[]) => 无值
>(x: number, y = "hello", ...rest) => { } : (x: 数字, y?: 文字, ...rest: 任意[]) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>"hello" : "hello"
>rest : 任意[]

var lambda4 = (y = "hello", ...rest) => { }
>lambda4 : (y?: 文字, ...rest: 任意[]) => 无值
>(y = "hello", ...rest) => { } : (y?: 文字, ...rest: 任意[]) => 无值
>y : 文字
>类型别名 :=> 文字
>"hello" : "hello"
>rest : 任意[]

var x = function (str = "hello", ...rest) { }
>x : (str?: 文字, ...rest: 任意[]) => 无值
>function (str = "hello", ...rest) { } : (str?: 文字, ...rest: 任意[]) => 无值
>str : 文字
>类型别名 :=> 文字
>"hello" : "hello"
>rest : 任意[]

var y = (function (num = 10, boo = false, ...rest) { })()
>y : 无值
>类型别名 :=> 无值
>(function (num = 10, boo = false, ...rest) { })() : 无值
>类型别名 :=> 无值
>(function (num = 10, boo = false, ...rest) { }) : (num?: 数字, boo?: 真假, ...rest: 任意[]) => 无值
>function (num = 10, boo = false, ...rest) { } : (num?: 数字, boo?: 真假, ...rest: 任意[]) => 无值
>num : 数字
>类型别名 :=> 数字
>10 : 10
>boo : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>rest : 任意[]

var z = (function (num: number, boo = false, ...rest) { })(10)
>z : 无值
>类型别名 :=> 无值
>(function (num: number, boo = false, ...rest) { })(10) : 无值
>类型别名 :=> 无值
>(function (num: number, boo = false, ...rest) { }) : (num: 数字, boo?: 真假, ...rest: 任意[]) => 无值
>function (num: number, boo = false, ...rest) { } : (num: 数字, boo?: 真假, ...rest: 任意[]) => 无值
>num : 数字
>类型别名 :=> 数字
>boo : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>rest : 任意[]
>10 : 10

