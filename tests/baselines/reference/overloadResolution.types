=== tests/cases/conformance/expressions/functionCalls/overloadResolution.ts ===
class SomeBase {
>SomeBase : SomeBase

    private n;
>n : any
>类型别名 :=> 任意

    public s: string;
>s : string
>类型别名 :=> 文字
}
class SomeDerived1 extends SomeBase {
>SomeDerived1 : SomeDerived1
>SomeBase : SomeBase

    private m;
>m : any
>类型别名 :=> 任意
}
class SomeDerived2 extends SomeBase {
>SomeDerived2 : SomeDerived2
>SomeBase : SomeBase

    private m;
>m : any
>类型别名 :=> 任意
}
class SomeDerived3 extends SomeBase {
>SomeDerived3 : SomeDerived3
>SomeBase : SomeBase

    private m;
>m : any
>类型别名 :=> 任意
}


// Ambiguous call picks the first overload in declaration order
function fn1(s: string): string;
>fn1 : { (s: string): string; (s: number): number; }
>s : string
>类型别名 :=> 文字

function fn1(s: number): number;
>fn1 : { (s: string): string; (s: number): number; }
>s : number
>类型别名 :=> 数字

function fn1() { return null; }
>fn1 : { (s: string): string; (s: number): number; }
>null : null
>类型别名 :=> 空值

var s = fn1(undefined);
>s : string
>类型别名 :=> 文字
>fn1(undefined) : string
>类型别名 :=> 文字
>fn1 : { (s: string): string; (s: number): number; }
>undefined : undefined
>类型别名 :=> 未定

var s: string;
>s : string
>类型别名 :=> 文字


// No candidate overloads found
fn1({}); // Error
>fn1({}) : any
>类型别名 :=> 任意
>fn1 : { (s: string): string; (s: number): number; }
>{} : {}

// Generic and non - generic overload where generic overload is the only candidate when called with type arguments
function fn2(s: string, n: number): number;
>fn2 : { (s: string, n: number): number; <T>(n: number, t: T): T; }
>s : string
>类型别名 :=> 文字
>n : number
>类型别名 :=> 数字

function fn2<T>(n: number, t: T): T;
>fn2 : { (s: string, n: number): number; <T>(n: number, t: T): T; }
>T : T
>n : number
>类型别名 :=> 数字
>t : T
>T : T
>T : T

function fn2() { return undefined; }
>fn2 : { (s: string, n: number): number; <T>(n: number, t: T): T; }
>undefined : undefined
>类型别名 :=> 未定

var d = fn2<Date>(0, undefined);
>d : Date
>fn2<Date>(0, undefined) : Date
>fn2 : { (s: string, n: number): number; <T>(n: number, t: T): T; }
>Date : Date
>0 : 0
>undefined : undefined
>类型别名 :=> 未定

var d: Date;
>d : Date
>Date : Date

// Generic and non - generic overload where generic overload is the only candidate when called without type arguments
var s = fn2(0, '');
>s : string
>类型别名 :=> 文字
>fn2(0, '') : ""
>fn2 : { (s: string, n: number): number; <T>(n: number, t: T): T; }
>0 : 0
>'' : ""

// Generic and non - generic overload where non - generic overload is the only candidate when called with type arguments
fn2<Date>('', 0); // Error
>fn2<Date>('', 0) : any
>类型别名 :=> 任意
>fn2 : { (s: string, n: number): number; <T>(n: number, t: T): T; }
>Date : Date
>'' : ""
>0 : 0

// Generic and non - generic overload where non - generic overload is the only candidate when called without type arguments
fn2('', 0); // OK
>fn2('', 0) : number
>类型别名 :=> 数字
>fn2 : { (s: string, n: number): number; <T>(n: number, t: T): T; }
>'' : ""
>0 : 0

// Generic overloads with differing arity called without type arguments
function fn3<T>(n: T): string;
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }
>T : T
>n : T
>T : T

function fn3<T, U>(s: string, t: T, u: U): U;
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }
>T : T
>U : U
>s : string
>类型别名 :=> 文字
>t : T
>T : T
>u : U
>U : U
>U : U

function fn3<T, U, V>(v: V, u: U, t: T): number;
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }
>T : T
>U : U
>V : V
>v : V
>V : V
>u : U
>U : U
>t : T
>T : T

function fn3() { return null; }
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }
>null : null
>类型别名 :=> 空值

var s = fn3(3);
>s : string
>类型别名 :=> 文字
>fn3(3) : string
>类型别名 :=> 文字
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }
>3 : 3

var s = fn3('', 3, '');
>s : string
>类型别名 :=> 文字
>fn3('', 3, '') : ""
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }
>'' : ""
>3 : 3
>'' : ""

var n = fn3(5, 5, 5);
>n : number
>类型别名 :=> 数字
>fn3(5, 5, 5) : number
>类型别名 :=> 数字
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }
>5 : 5
>5 : 5
>5 : 5

var n: number;
>n : number
>类型别名 :=> 数字

// Generic overloads with differing arity called with type arguments matching each overload type parameter count
var s = fn3<number>(4);
>s : string
>类型别名 :=> 文字
>fn3<number>(4) : string
>类型别名 :=> 文字
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }
>4 : 4

var s = fn3<string, string>('', '', '');
>s : string
>类型别名 :=> 文字
>fn3<string, string>('', '', '') : string
>类型别名 :=> 文字
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }
>'' : ""
>'' : ""
>'' : ""

var n = fn3<number, string, string>('', '', 3);
>n : number
>类型别名 :=> 数字
>fn3<number, string, string>('', '', 3) : number
>类型别名 :=> 数字
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }
>'' : ""
>'' : ""
>3 : 3

// Generic overloads with differing arity called with type argument count that doesn't match any overload
fn3<number, number, number, number>(); // Error
>fn3<number, number, number, number>() : any
>类型别名 :=> 任意
>fn3 : { <T>(n: T): string; <T, U>(s: string, t: T, u: U): U; <T, U, V>(v: V, u: U, t: T): number; }

// Generic overloads with constraints called with type arguments that satisfy the constraints
function fn4<T extends string, U extends number>(n: T, m: U);
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>T : T
>U : U
>n : T
>T : T
>m : U
>U : U

function fn4<T extends number, U extends string>(n: T, m: U);
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>T : T
>U : U
>n : T
>T : T
>m : U
>U : U

function fn4() { }
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }

fn4<string, number>('', 3);
>fn4<string, number>('', 3) : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>'' : ""
>3 : 3

fn4<string, number>(3, ''); // Error
>fn4<string, number>(3, '') : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>3 : 3
>'' : ""

fn4<number, string>('', 3); // Error
>fn4<number, string>('', 3) : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>'' : ""
>3 : 3

fn4<number, string>(3, ''); 
>fn4<number, string>(3, '') : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>3 : 3
>'' : ""

// Generic overloads with constraints called without type arguments but with types that satisfy the constraints
fn4('', 3);
>fn4('', 3) : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>'' : ""
>3 : 3

fn4(3, '');
>fn4(3, '') : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>3 : 3
>'' : ""

fn4(3, undefined);
>fn4(3, undefined) : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>3 : 3
>undefined : undefined
>类型别名 :=> 未定

fn4('', null);
>fn4('', null) : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>'' : ""
>null : null
>类型别名 :=> 空值

// Generic overloads with constraints called with type arguments that do not satisfy the constraints
fn4<boolean, Date>(null, null); // Error
>fn4<boolean, Date>(null, null) : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>Date : Date
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

// Generic overloads with constraints called without type arguments but with types that do not satisfy the constraints
fn4(true, null); // Error
>fn4(true, null) : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>true : true
>类型别名 :=> 为真
>null : null
>类型别名 :=> 空值

fn4(null, true); // Error
>fn4(null, true) : any
>类型别名 :=> 任意
>fn4 : { <T extends string, U extends number>(n: T, m: U): any; <T extends number, U extends string>(n: T, m: U): any; }
>null : null
>类型别名 :=> 空值
>true : true
>类型别名 :=> 为真

// Non - generic overloads where contextual typing of function arguments has errors
function fn5(f: (n: string) => void): string;
>fn5 : { (f: (n: string) => void): string; (f: (n: number) => void): number; }
>f : (n: string) => void
>n : string
>类型别名 :=> 文字

function fn5(f: (n: number) => void): number;
>fn5 : { (f: (n: string) => void): string; (f: (n: number) => void): number; }
>f : (n: number) => void
>n : number
>类型别名 :=> 数字

function fn5() { return undefined; }
>fn5 : { (f: (n: string) => void): string; (f: (n: number) => void): number; }
>undefined : undefined
>类型别名 :=> 未定

var n = fn5((n) => n.toFixed());
>n : number
>类型别名 :=> 数字
>fn5((n) => n.toFixed()) : string
>类型别名 :=> 文字
>fn5 : { (f: (n: string) => void): string; (f: (n: number) => void): number; }
>(n) => n.toFixed() : (n: string) => any
>n : string
>类型别名 :=> 文字
>n.toFixed() : any
>类型别名 :=> 任意
>n.toFixed : any
>类型别名 :=> 任意
>n : string
>类型别名 :=> 文字
>toFixed : any
>类型别名 :=> 任意

var s = fn5((n) => n.substr(0));
>s : string
>类型别名 :=> 文字
>fn5((n) => n.substr(0)) : string
>类型别名 :=> 文字
>fn5 : { (f: (n: string) => void): string; (f: (n: number) => void): number; }
>(n) => n.substr(0) : (n: string) => string
>n : string
>类型别名 :=> 文字
>n.substr(0) : string
>类型别名 :=> 文字
>n.substr : (from: number, length?: number) => string
>n : string
>类型别名 :=> 文字
>substr : (from: number, length?: number) => string
>0 : 0


