=== tests/cases/compiler/instanceOfAssignability.ts ===
interface Base {
>Base : Base

	foo: string|number;
>foo : 文字 | 数字

	optional?: number;
>optional : 数字
>类型别名 :=> 数字
}

// Derived1 is assignable to, but not a subtype of, Base
class Derived1 implements Base {
>Derived1 : Derived1
>Base : Base

	foo: string;
>foo : 文字
>类型别名 :=> 文字
}
// Derived2 is a subtype of Base that is not assignable to Derived1
class Derived2 implements Base {
>Derived2 : Derived2
>Base : Base

	foo: number;
>foo : 数字
>类型别名 :=> 数字

	optional: number;
>optional : 数字
>类型别名 :=> 数字
}

class Animal {
>Animal : Animal

	move;
>move : 任意
>类型别名 :=> 任意
}
class Mammal extends Animal { milk; }
>Mammal : Mammal
>Animal : Animal
>milk : 任意
>类型别名 :=> 任意

class Giraffe extends Mammal { neck; }
>Giraffe : Giraffe
>Mammal : Mammal
>neck : 任意
>类型别名 :=> 任意

function fn1(x: Array<number>|Array<string>|boolean) {
>fn1 : (x: 真假 | 数字[] | 文字[]) => 无值
>x : 真假 | 数字[] | 文字[]
>Array : T[]
>Array : T[]

	if(x instanceof Array) {
>x instanceof Array : 真假
>类型别名 :=> 真假
>x : 真假 | 数字[] | 文字[]
>Array : ArrayConstructor

		// 1.5: y: Array<number>|Array<string>
		// Want: y: Array<number>|Array<string>
		let y = x;
>y : 数字[] | 文字[]
>x : 数字[] | 文字[]
	}
}

function fn2(x: Base) {
>fn2 : (x: Base) => 无值
>x : Base
>Base : Base

	if(x instanceof Derived1) {
>x instanceof Derived1 : 真假
>类型别名 :=> 真假
>x : Base
>Derived1 : 类为 Derived1

		// 1.5: y: Base
		// Want: y: Derived1
		let y = x;
>y : Derived1
>x : Derived1
	}
}

function fn3(x: Base|Derived1) {
>fn3 : (x: Base | Derived1) => 无值
>x : Base | Derived1
>Base : Base
>Derived1 : Derived1

	if(x instanceof Derived2) {
>x instanceof Derived2 : 真假
>类型别名 :=> 真假
>x : Base | Derived1
>Derived2 : 类为 Derived2

		// 1.5: y: Derived2
		// Want: Derived2
		let y = x;
>y : Derived2
>x : Derived2
	}
}

function fn4(x: Base|Derived2) {
>fn4 : (x: Base | Derived2) => 无值
>x : Base | Derived2
>Base : Base
>Derived2 : Derived2

	if(x instanceof Derived1) {
>x instanceof Derived1 : 真假
>类型别名 :=> 真假
>x : Base | Derived2
>Derived1 : 类为 Derived1

		// 1.5: y: {}
		// Want: Derived1
		let y = x;
>y : Derived1
>x : Derived1
	}
}

function fn5(x: Derived1) {
>fn5 : (x: Derived1) => 无值
>x : Derived1
>Derived1 : Derived1

	if(x instanceof Derived2) {
>x instanceof Derived2 : 真假
>类型别名 :=> 真假
>x : Derived1
>Derived2 : 类为 Derived2

		// 1.5: y: Derived1
		// Want: ???
		let y = x;
>y : Derived1 & Derived2
>x : Derived1 & Derived2
	}
}

function fn6(x: Animal|Mammal) {
>fn6 : (x: Animal | Mammal) => 无值
>x : Animal | Mammal
>Animal : Animal
>Mammal : Mammal

	if(x instanceof Giraffe) {
>x instanceof Giraffe : 真假
>类型别名 :=> 真假
>x : Animal | Mammal
>Giraffe : 类为 Giraffe

		// 1.5: y: Derived1
		// Want: ???
		let y = x;
>y : Giraffe
>x : Giraffe
	}
}

function fn7(x: Array<number>|Array<string>) {
>fn7 : (x: 数字[] | 文字[]) => 无值
>x : 数字[] | 文字[]
>Array : T[]
>Array : T[]

	if(x instanceof Array) {
>x instanceof Array : 真假
>类型别名 :=> 真假
>x : 数字[] | 文字[]
>Array : ArrayConstructor

		// 1.5: y: Array<number>|Array<string>
		// Want: y: Array<number>|Array<string>
		let y = x;
>y : 数字[] | 文字[]
>x : 数字[] | 文字[]
	}
}

interface Alpha { a }
>Alpha : Alpha
>a : 任意
>类型别名 :=> 任意

interface Beta { b }
>Beta : Beta
>b : 任意
>类型别名 :=> 任意

interface Gamma { c }
>Gamma : Gamma
>c : 任意
>类型别名 :=> 任意

class ABC { a; b; c; }
>ABC : ABC
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

function fn8(x: Alpha|Beta|Gamma) {
>fn8 : (x: Alpha | Beta | Gamma) => 无值
>x : Alpha | Beta | Gamma
>Alpha : Alpha
>Beta : Beta
>Gamma : Gamma

	if(x instanceof ABC) {
>x instanceof ABC : 真假
>类型别名 :=> 真假
>x : Alpha | Beta | Gamma
>ABC : 类为 ABC

		let y = x;
>y : ABC
>x : ABC
	}
}



