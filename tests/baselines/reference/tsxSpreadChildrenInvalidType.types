=== tests/cases/conformance/jsx/tsxSpreadChildrenInvalidType.tsx ===
declare module JSX {
>JSX : any
>类型别名 :=> 任意

	interface Element { }
>Element : Element

	interface IntrinsicElements {
>IntrinsicElements : IntrinsicElements

		[s: string]: any;
>s : string
>类型别名 :=> 文字
	}
}
declare var React: any;
>React : any
>类型别名 :=> 任意

interface TodoProp {
>TodoProp : TodoProp

    id: number;
>id : number
>类型别名 :=> 数字

    todo: string;
>todo : string
>类型别名 :=> 文字
}
interface TodoListProps {
>TodoListProps : TodoListProps

    todos: TodoProp[];
>todos : TodoProp[]
>TodoProp : TodoProp
}
function Todo(prop: { key: number, todo: string }) {
>Todo : (prop: { key: number; todo: string; }) => JSX.Element
>prop : { key: number; todo: string; }
>key : number
>类型别名 :=> 数字
>todo : string
>类型别名 :=> 文字

    return <div>{prop.key.toString() + prop.todo}</div>;
><div>{prop.key.toString() + prop.todo}</div> : JSX.Element
>div : any
>类型别名 :=> 任意
>prop.key.toString() + prop.todo : string
>类型别名 :=> 文字
>prop.key.toString() : string
>类型别名 :=> 文字
>prop.key.toString : (radix?: number) => string
>prop.key : number
>类型别名 :=> 数字
>prop : { key: number; todo: string; }
>key : number
>类型别名 :=> 数字
>toString : (radix?: number) => string
>prop.todo : string
>类型别名 :=> 文字
>prop : { key: number; todo: string; }
>todo : string
>类型别名 :=> 文字
>div : any
>类型别名 :=> 任意
}
function TodoList({ todos }: TodoListProps) {
>TodoList : ({ todos }: TodoListProps) => JSX.Element
>todos : TodoProp[]
>TodoListProps : TodoListProps

    return <div>
><div>        {...<Todo key={todos[0].id} todo={todos[0].todo} />}    </div> : JSX.Element
>div : any
>类型别名 :=> 任意

        {...<Todo key={todos[0].id} todo={todos[0].todo} />}
><Todo key={todos[0].id} todo={todos[0].todo} /> : JSX.Element
>Todo : (prop: { key: number; todo: string; }) => JSX.Element
>key : number
>类型别名 :=> 数字
>todos[0].id : number
>类型别名 :=> 数字
>todos[0] : TodoProp
>todos : TodoProp[]
>0 : 0
>id : number
>类型别名 :=> 数字
>todo : string
>类型别名 :=> 文字
>todos[0].todo : string
>类型别名 :=> 文字
>todos[0] : TodoProp
>todos : TodoProp[]
>0 : 0
>todo : string
>类型别名 :=> 文字

    </div>;
>div : any
>类型别名 :=> 任意
}
function TodoListNoError({ todos }: TodoListProps) {
>TodoListNoError : ({ todos }: TodoListProps) => JSX.Element
>todos : TodoProp[]
>TodoListProps : TodoListProps

    // any is not checked
    return <div>
><div>        {...(<Todo key={todos[0].id} todo={todos[0].todo} /> as any)}    </div> : JSX.Element
>div : any
>类型别名 :=> 任意

        {...(<Todo key={todos[0].id} todo={todos[0].todo} /> as any)}
>(<Todo key={todos[0].id} todo={todos[0].todo} /> as any) : any
>类型别名 :=> 任意
><Todo key={todos[0].id} todo={todos[0].todo} /> as any : any
>类型别名 :=> 任意
><Todo key={todos[0].id} todo={todos[0].todo} /> : JSX.Element
>Todo : (prop: { key: number; todo: string; }) => JSX.Element
>key : number
>类型别名 :=> 数字
>todos[0].id : number
>类型别名 :=> 数字
>todos[0] : TodoProp
>todos : TodoProp[]
>0 : 0
>id : number
>类型别名 :=> 数字
>todo : string
>类型别名 :=> 文字
>todos[0].todo : string
>类型别名 :=> 文字
>todos[0] : TodoProp
>todos : TodoProp[]
>0 : 0
>todo : string
>类型别名 :=> 文字

    </div>;
>div : any
>类型别名 :=> 任意
}
let x: TodoListProps;
>x : TodoListProps
>TodoListProps : TodoListProps

    <TodoList {...x}/>
><TodoList {...x}/> : JSX.Element
>TodoList : ({ todos }: TodoListProps) => JSX.Element
>x : TodoListProps

