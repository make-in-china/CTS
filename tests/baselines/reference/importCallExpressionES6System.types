=== tests/cases/conformance/dynamicImport/0.ts ===
export function foo() { return "foo"; }
>foo : () => 文字
>"foo" : "foo"

=== tests/cases/conformance/dynamicImport/1.ts ===
import("./0");
>import("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>"./0" : "./0"

var p1 = import("./0");
>p1 : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>import("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>"./0" : "./0"

p1.then(zero => {
>p1.then(zero => {    return zero.foo();}) : Promise<文字>
>p1.then : <TResult1 = 类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }, TResult2 = 不及>(onfulfilled?: (value: 类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p1 : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>then : <TResult1 = 类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }, TResult2 = 不及>(onfulfilled?: (value: 类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>zero => {    return zero.foo();} : (zero: 类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }) => 文字
>zero : 类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }

    return zero.foo();
>zero.foo() : 文字
>类型别名 :=> 文字
>zero.foo : () => 文字
>zero : 类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }
>foo : () => 文字

});

export var p2 = import("./0");
>p2 : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>import("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>"./0" : "./0"

function foo() {
>foo : () => 无值

    const p2 = import("./0");
>p2 : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>import("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>"./0" : "./0"
}

class C {
>C : C

    method() {
>method : () => 无值

        const loadAsync = import ("./0");
>loadAsync : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>import ("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>"./0" : "./0"
    }
}

export class D {
>D : D

    method() {
>method : () => 无值

        const loadAsync = import ("./0");
>loadAsync : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>import ("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>"./0" : "./0"
    }
}
