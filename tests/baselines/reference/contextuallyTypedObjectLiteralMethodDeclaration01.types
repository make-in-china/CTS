=== tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedObjectLiteralMethodDeclaration01.ts ===
interface A {
>A : A

    numProp: number;
>numProp : 数字
>类型别名 :=> 数字
}

interface B  {
>B : B

    strProp: string;
>strProp : 文字
>类型别名 :=> 文字
}

interface Foo {
>Foo : Foo

    method1(arg: A): void;
>method1 : (arg: A) => 无值
>arg : A
>A : A

    method2(arg: B): void;
>method2 : (arg: B) => 无值
>arg : B
>B : B
}

function getFoo1(): Foo {
>getFoo1 : () => Foo
>Foo : Foo

    return {
>{        method1(arg) {            arg.numProp = 10;        },        method2(arg) {            arg.strProp = "hello";        }    } : { method1(arg: A): 无值; method2(arg: B): 无值; }

        method1(arg) {
>method1 : (arg: A) => 无值
>arg : A

            arg.numProp = 10;
>arg.numProp = 10 : 10
>arg.numProp : 数字
>类型别名 :=> 数字
>arg : A
>numProp : 数字
>类型别名 :=> 数字
>10 : 10

        },
        method2(arg) {
>method2 : (arg: B) => 无值
>arg : B

            arg.strProp = "hello";
>arg.strProp = "hello" : "hello"
>arg.strProp : 文字
>类型别名 :=> 文字
>arg : B
>strProp : 文字
>类型别名 :=> 文字
>"hello" : "hello"
        }
    }
}

function getFoo2(): Foo {
>getFoo2 : () => Foo
>Foo : Foo

    return {
>{        method1: (arg) => {            arg.numProp = 10;        },        method2: (arg) => {            arg.strProp = "hello";        }    } : { method1: (arg: A) => 无值; method2: (arg: B) => 无值; }

        method1: (arg) => {
>method1 : (arg: A) => 无值
>(arg) => {            arg.numProp = 10;        } : (arg: A) => 无值
>arg : A

            arg.numProp = 10;
>arg.numProp = 10 : 10
>arg.numProp : 数字
>类型别名 :=> 数字
>arg : A
>numProp : 数字
>类型别名 :=> 数字
>10 : 10

        },
        method2: (arg) => {
>method2 : (arg: B) => 无值
>(arg) => {            arg.strProp = "hello";        } : (arg: B) => 无值
>arg : B

            arg.strProp = "hello";
>arg.strProp = "hello" : "hello"
>arg.strProp : 文字
>类型别名 :=> 文字
>arg : B
>strProp : 文字
>类型别名 :=> 文字
>"hello" : "hello"
        }
    }
}

function getFoo3(): Foo {
>getFoo3 : () => Foo
>Foo : Foo

    return {
>{        method1: function (arg) {            arg.numProp = 10;        },        method2: function (arg) {            arg.strProp = "hello";        }    } : { method1: (arg: A) => 无值; method2: (arg: B) => 无值; }

        method1: function (arg) {
>method1 : (arg: A) => 无值
>function (arg) {            arg.numProp = 10;        } : (arg: A) => 无值
>arg : A

            arg.numProp = 10;
>arg.numProp = 10 : 10
>arg.numProp : 数字
>类型别名 :=> 数字
>arg : A
>numProp : 数字
>类型别名 :=> 数字
>10 : 10

        },
        method2: function (arg) {
>method2 : (arg: B) => 无值
>function (arg) {            arg.strProp = "hello";        } : (arg: B) => 无值
>arg : B

            arg.strProp = "hello";
>arg.strProp = "hello" : "hello"
>arg.strProp : 文字
>类型别名 :=> 文字
>arg : B
>strProp : 文字
>类型别名 :=> 文字
>"hello" : "hello"
        }
    }
}
