=== tests/cases/conformance/parser/ecmascript5/parserRealSource14.ts ===
// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
// See LICENSE.txt in the project root for complete license information.

///<reference path='typescript.ts' />

module TypeScript {
>TypeScript : typeof TypeScript

    export function lastOf(items: any[]): any {
>lastOf : (items: any[]) => any
>items : any[]

        return (items === null || items.length === 0) ? null : items[items.length - 1];
>(items === null || items.length === 0) ? null : items[items.length - 1] : any
>类型别名 :=> 任意
>(items === null || items.length === 0) : boolean
>类型别名 :=> 真假
>items === null || items.length === 0 : boolean
>类型别名 :=> 真假
>items === null : boolean
>类型别名 :=> 真假
>items : any[]
>null : null
>类型别名 :=> 空值
>items.length === 0 : boolean
>类型别名 :=> 真假
>items.length : number
>类型别名 :=> 数字
>items : any[]
>length : number
>类型别名 :=> 数字
>0 : 0
>null : null
>类型别名 :=> 空值
>items[items.length - 1] : any
>类型别名 :=> 任意
>items : any[]
>items.length - 1 : number
>类型别名 :=> 数字
>items.length : number
>类型别名 :=> 数字
>items : any[]
>length : number
>类型别名 :=> 数字
>1 : 1
    }

    export function max(a: number, b: number): number {
>max : (a: number, b: number) => number
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字

        return a >= b ? a : b;
>a >= b ? a : b : number
>类型别名 :=> 数字
>a >= b : boolean
>类型别名 :=> 真假
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
    }

    export function min(a: number, b: number): number {
>min : (a: number, b: number) => number
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字

        return a <= b ? a : b;
>a <= b ? a : b : number
>类型别名 :=> 数字
>a <= b : boolean
>类型别名 :=> 真假
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
    }

    //
    // Helper class representing a path from a root ast node to a (grand)child ast node.
    // This is helpful as our tree don't have parents.
    //
    export class AstPath {
>AstPath : AstPath

        public asts: TypeScript.AST[] = [];
>asts : any[]
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>[] : undefined[]

        public top: number = -1;
>top : number
>类型别名 :=> 数字
>-1 : -1
>1 : 1

        static reverseIndexOf(items: any[], index: number): any {
>reverseIndexOf : (items: any[], index: number) => any
>items : any[]
>index : number
>类型别名 :=> 数字

            return (items === null || items.length <= index) ? null : items[items.length - index - 1];
>(items === null || items.length <= index) ? null : items[items.length - index - 1] : any
>类型别名 :=> 任意
>(items === null || items.length <= index) : boolean
>类型别名 :=> 真假
>items === null || items.length <= index : boolean
>类型别名 :=> 真假
>items === null : boolean
>类型别名 :=> 真假
>items : any[]
>null : null
>类型别名 :=> 空值
>items.length <= index : boolean
>类型别名 :=> 真假
>items.length : number
>类型别名 :=> 数字
>items : any[]
>length : number
>类型别名 :=> 数字
>index : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值
>items[items.length - index - 1] : any
>类型别名 :=> 任意
>items : any[]
>items.length - index - 1 : number
>类型别名 :=> 数字
>items.length - index : number
>类型别名 :=> 数字
>items.length : number
>类型别名 :=> 数字
>items : any[]
>length : number
>类型别名 :=> 数字
>index : number
>类型别名 :=> 数字
>1 : 1
        }

        public clone(): AstPath {
>clone : () => AstPath
>AstPath : AstPath

            var clone = new AstPath();
>clone : AstPath
>new AstPath() : AstPath
>AstPath : typeof AstPath

            clone.asts = this.asts.map((value) => { return value; });
>clone.asts = this.asts.map((value) => { return value; }) : any[]
>clone.asts : any[]
>clone : AstPath
>asts : any[]
>this.asts.map((value) => { return value; }) : any[]
>this.asts.map : <U>(callbackfn: (value: any, index: number, array: any[]) => U, thisArg?: any) => U[]
>this.asts : any[]
>this : this
>asts : any[]
>map : <U>(callbackfn: (value: any, index: number, array: any[]) => U, thisArg?: any) => U[]
>(value) => { return value; } : (value: any) => any
>value : any
>类型别名 :=> 任意
>value : any
>类型别名 :=> 任意

            clone.top = this.top;
>clone.top = this.top : number
>类型别名 :=> 数字
>clone.top : number
>类型别名 :=> 数字
>clone : AstPath
>top : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字

            return clone;
>clone : AstPath
        }

        public pop(): TypeScript.AST {
>pop : () => any
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!

            var head = this.ast();
>head : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any

            this.up();
>this.up() : void
>类型别名 :=> 无值
>this.up : () => void
>this : this
>up : () => void

            while (this.asts.length > this.count()) {
>this.asts.length > this.count() : boolean
>类型别名 :=> 真假
>this.asts.length : number
>类型别名 :=> 数字
>this.asts : any[]
>this : this
>asts : any[]
>length : number
>类型别名 :=> 数字
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number

                this.asts.pop();
>this.asts.pop() : any
>类型别名 :=> 任意
>this.asts.pop : () => any
>this.asts : any[]
>this : this
>asts : any[]
>pop : () => any
            }
            return head;
>head : any
>类型别名 :=> 任意
        }

        public push(ast: TypeScript.AST) {
>push : (ast: any) => void
>ast : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!

            while (this.asts.length > this.count()) {
>this.asts.length > this.count() : boolean
>类型别名 :=> 真假
>this.asts.length : number
>类型别名 :=> 数字
>this.asts : any[]
>this : this
>asts : any[]
>length : number
>类型别名 :=> 数字
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number

                this.asts.pop();
>this.asts.pop() : any
>类型别名 :=> 任意
>this.asts.pop : () => any
>this.asts : any[]
>this : this
>asts : any[]
>pop : () => any
            }
            this.top = this.asts.length;
>this.top = this.asts.length : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>this.asts.length : number
>类型别名 :=> 数字
>this.asts : any[]
>this : this
>asts : any[]
>length : number
>类型别名 :=> 数字

            this.asts.push(ast);
>this.asts.push(ast) : number
>类型别名 :=> 数字
>this.asts.push : (...items: any[]) => number
>this.asts : any[]
>this : this
>asts : any[]
>push : (...items: any[]) => number
>ast : any
>类型别名 :=> 任意
        }

        public up() {
>up : () => void

            if (this.top <= -1)
>this.top <= -1 : boolean
>类型别名 :=> 真假
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>-1 : -1
>1 : 1

                throw new Error("Invalid call to 'up'");
>new Error("Invalid call to 'up'") : Error
>Error : ErrorConstructor
>"Invalid call to 'up'" : "Invalid call to 'up'"

            this.top--;
>this.top-- : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
        }

        public down() {
>down : () => void

            if (this.top == this.ast.length - 1)
>this.top == this.ast.length - 1 : boolean
>类型别名 :=> 真假
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>this.ast.length - 1 : number
>类型别名 :=> 数字
>this.ast.length : number
>类型别名 :=> 数字
>this.ast : () => any
>this : this
>ast : () => any
>length : number
>类型别名 :=> 数字
>1 : 1

                throw new Error("Invalid call to 'down'");
>new Error("Invalid call to 'down'") : Error
>Error : ErrorConstructor
>"Invalid call to 'down'" : "Invalid call to 'down'"

            this.top++;
>this.top++ : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
        }

        public nodeType(): TypeScript.NodeType {
>nodeType : () => any
>TypeScript : any
>类型别名 :=> 任意
>NodeType : No type information available!

            if (this.ast() == null)
>this.ast() == null : boolean
>类型别名 :=> 真假
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>null : null
>类型别名 :=> 空值

                return TypeScript.NodeType.None;
>TypeScript.NodeType.None : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>None : any
>类型别名 :=> 任意

            return this.ast().nodeType;
>this.ast().nodeType : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>nodeType : any
>类型别名 :=> 任意
        }

        public ast() {
>ast : () => any

            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));
><TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1)) : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1)) : any
>类型别名 :=> 任意
>AstPath.reverseIndexOf : (items: any[], index: number) => any
>AstPath : typeof AstPath
>reverseIndexOf : (items: any[], index: number) => any
>this.asts : any[]
>this : this
>asts : any[]
>this.asts.length - (this.top + 1) : number
>类型别名 :=> 数字
>this.asts.length : number
>类型别名 :=> 数字
>this.asts : any[]
>this : this
>asts : any[]
>length : number
>类型别名 :=> 数字
>(this.top + 1) : number
>类型别名 :=> 数字
>this.top + 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
        }

        public parent() {
>parent : () => any

            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top);
><TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top) : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top) : any
>类型别名 :=> 任意
>AstPath.reverseIndexOf : (items: any[], index: number) => any
>AstPath : typeof AstPath
>reverseIndexOf : (items: any[], index: number) => any
>this.asts : any[]
>this : this
>asts : any[]
>this.asts.length - this.top : number
>类型别名 :=> 数字
>this.asts.length : number
>类型别名 :=> 数字
>this.asts : any[]
>this : this
>asts : any[]
>length : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
        }

        public count() {
>count : () => number

            return this.top + 1;
>this.top + 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
        }

        public get(index: number): TypeScript.AST {
>get : (index: number) => any
>index : number
>类型别名 :=> 数字
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!

            return this.asts[index];
>this.asts[index] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>index : number
>类型别名 :=> 数字
        }

        public isNameOfClass(): boolean {
>isNameOfClass : () => boolean

            if (this.ast() === null || this.parent() === null)
>this.ast() === null || this.parent() === null : boolean
>类型别名 :=> 真假
>this.ast() === null : boolean
>类型别名 :=> 真假
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>null : null
>类型别名 :=> 空值
>this.parent() === null : boolean
>类型别名 :=> 真假
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>null : null
>类型别名 :=> 空值

                return false;
>false : false
>类型别名 :=> 为假

            return (this.ast().nodeType === TypeScript.NodeType.Name) &&
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) &&                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast()) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
>类型别名 :=> 真假
>this.ast().nodeType === TypeScript.NodeType.Name : boolean
>类型别名 :=> 真假
>this.ast().nodeType : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Name : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Name : any
>类型别名 :=> 任意

                (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) &&
>(this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) : boolean
>类型别名 :=> 真假
>this.parent().nodeType === TypeScript.NodeType.ClassDeclaration : boolean
>类型别名 :=> 真假
>this.parent().nodeType : any
>类型别名 :=> 任意
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ClassDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ClassDeclaration : any
>类型别名 :=> 任意

                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());
>((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast()) : boolean
>类型别名 :=> 真假
>(<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast() : boolean
>类型别名 :=> 真假
>(<TypeScript.InterfaceDeclaration>this.parent()).name : any
>类型别名 :=> 任意
>(<TypeScript.InterfaceDeclaration>this.parent()) : any
>类型别名 :=> 任意
><TypeScript.InterfaceDeclaration>this.parent() : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>InterfaceDeclaration : No type information available!
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>name : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
        }

        public isNameOfInterface(): boolean {
>isNameOfInterface : () => boolean

            if (this.ast() === null || this.parent() === null)
>this.ast() === null || this.parent() === null : boolean
>类型别名 :=> 真假
>this.ast() === null : boolean
>类型别名 :=> 真假
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>null : null
>类型别名 :=> 空值
>this.parent() === null : boolean
>类型别名 :=> 真假
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>null : null
>类型别名 :=> 空值

                return false;
>false : false
>类型别名 :=> 为假

            return (this.ast().nodeType === TypeScript.NodeType.Name) &&
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) &&                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast()) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
>类型别名 :=> 真假
>this.ast().nodeType === TypeScript.NodeType.Name : boolean
>类型别名 :=> 真假
>this.ast().nodeType : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Name : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Name : any
>类型别名 :=> 任意

                (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) &&
>(this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) : boolean
>类型别名 :=> 真假
>this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration : boolean
>类型别名 :=> 真假
>this.parent().nodeType : any
>类型别名 :=> 任意
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.InterfaceDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>InterfaceDeclaration : any
>类型别名 :=> 任意

                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());
>((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast()) : boolean
>类型别名 :=> 真假
>(<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast() : boolean
>类型别名 :=> 真假
>(<TypeScript.InterfaceDeclaration>this.parent()).name : any
>类型别名 :=> 任意
>(<TypeScript.InterfaceDeclaration>this.parent()) : any
>类型别名 :=> 任意
><TypeScript.InterfaceDeclaration>this.parent() : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>InterfaceDeclaration : No type information available!
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>name : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
        }

        public isNameOfArgument(): boolean {
>isNameOfArgument : () => boolean

            if (this.ast() === null || this.parent() === null)
>this.ast() === null || this.parent() === null : boolean
>类型别名 :=> 真假
>this.ast() === null : boolean
>类型别名 :=> 真假
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>null : null
>类型别名 :=> 空值
>this.parent() === null : boolean
>类型别名 :=> 真假
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>null : null
>类型别名 :=> 空值

                return false;
>false : false
>类型别名 :=> 为假

            return (this.ast().nodeType === TypeScript.NodeType.Name) &&
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.ArgDecl) &&                ((<TypeScript.ArgDecl>this.parent()).id === this.ast()) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.ArgDecl) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
>类型别名 :=> 真假
>this.ast().nodeType === TypeScript.NodeType.Name : boolean
>类型别名 :=> 真假
>this.ast().nodeType : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Name : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Name : any
>类型别名 :=> 任意

                (this.parent().nodeType === TypeScript.NodeType.ArgDecl) &&
>(this.parent().nodeType === TypeScript.NodeType.ArgDecl) : boolean
>类型别名 :=> 真假
>this.parent().nodeType === TypeScript.NodeType.ArgDecl : boolean
>类型别名 :=> 真假
>this.parent().nodeType : any
>类型别名 :=> 任意
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ArgDecl : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ArgDecl : any
>类型别名 :=> 任意

                ((<TypeScript.ArgDecl>this.parent()).id === this.ast());
>((<TypeScript.ArgDecl>this.parent()).id === this.ast()) : boolean
>类型别名 :=> 真假
>(<TypeScript.ArgDecl>this.parent()).id === this.ast() : boolean
>类型别名 :=> 真假
>(<TypeScript.ArgDecl>this.parent()).id : any
>类型别名 :=> 任意
>(<TypeScript.ArgDecl>this.parent()) : any
>类型别名 :=> 任意
><TypeScript.ArgDecl>this.parent() : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ArgDecl : No type information available!
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>id : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
        }

        public isNameOfVariable(): boolean {
>isNameOfVariable : () => boolean

            if (this.ast() === null || this.parent() === null)
>this.ast() === null || this.parent() === null : boolean
>类型别名 :=> 真假
>this.ast() === null : boolean
>类型别名 :=> 真假
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>null : null
>类型别名 :=> 空值
>this.parent() === null : boolean
>类型别名 :=> 真假
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>null : null
>类型别名 :=> 空值

                return false;
>false : false
>类型别名 :=> 为假

            return (this.ast().nodeType === TypeScript.NodeType.Name) &&
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.VarDecl) &&                ((<TypeScript.VarDecl>this.parent()).id === this.ast()) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.VarDecl) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
>类型别名 :=> 真假
>this.ast().nodeType === TypeScript.NodeType.Name : boolean
>类型别名 :=> 真假
>this.ast().nodeType : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Name : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Name : any
>类型别名 :=> 任意

                (this.parent().nodeType === TypeScript.NodeType.VarDecl) &&
>(this.parent().nodeType === TypeScript.NodeType.VarDecl) : boolean
>类型别名 :=> 真假
>this.parent().nodeType === TypeScript.NodeType.VarDecl : boolean
>类型别名 :=> 真假
>this.parent().nodeType : any
>类型别名 :=> 任意
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.VarDecl : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>VarDecl : any
>类型别名 :=> 任意

                ((<TypeScript.VarDecl>this.parent()).id === this.ast());
>((<TypeScript.VarDecl>this.parent()).id === this.ast()) : boolean
>类型别名 :=> 真假
>(<TypeScript.VarDecl>this.parent()).id === this.ast() : boolean
>类型别名 :=> 真假
>(<TypeScript.VarDecl>this.parent()).id : any
>类型别名 :=> 任意
>(<TypeScript.VarDecl>this.parent()) : any
>类型别名 :=> 任意
><TypeScript.VarDecl>this.parent() : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>VarDecl : No type information available!
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>id : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
        }

        public isNameOfModule(): boolean {
>isNameOfModule : () => boolean

            if (this.ast() === null || this.parent() === null)
>this.ast() === null || this.parent() === null : boolean
>类型别名 :=> 真假
>this.ast() === null : boolean
>类型别名 :=> 真假
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>null : null
>类型别名 :=> 空值
>this.parent() === null : boolean
>类型别名 :=> 真假
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>null : null
>类型别名 :=> 空值

                return false;
>false : false
>类型别名 :=> 为假

            return (this.ast().nodeType === TypeScript.NodeType.Name) &&
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) &&                ((<TypeScript.ModuleDeclaration>this.parent()).name === this.ast()) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
>类型别名 :=> 真假
>this.ast().nodeType === TypeScript.NodeType.Name : boolean
>类型别名 :=> 真假
>this.ast().nodeType : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Name : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Name : any
>类型别名 :=> 任意

                (this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) &&
>(this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) : boolean
>类型别名 :=> 真假
>this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
>类型别名 :=> 真假
>this.parent().nodeType : any
>类型别名 :=> 任意
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ModuleDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ModuleDeclaration : any
>类型别名 :=> 任意

                ((<TypeScript.ModuleDeclaration>this.parent()).name === this.ast());
>((<TypeScript.ModuleDeclaration>this.parent()).name === this.ast()) : boolean
>类型别名 :=> 真假
>(<TypeScript.ModuleDeclaration>this.parent()).name === this.ast() : boolean
>类型别名 :=> 真假
>(<TypeScript.ModuleDeclaration>this.parent()).name : any
>类型别名 :=> 任意
>(<TypeScript.ModuleDeclaration>this.parent()) : any
>类型别名 :=> 任意
><TypeScript.ModuleDeclaration>this.parent() : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ModuleDeclaration : No type information available!
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>name : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
        }

        public isNameOfFunction(): boolean {
>isNameOfFunction : () => boolean

            if (this.ast() === null || this.parent() === null)
>this.ast() === null || this.parent() === null : boolean
>类型别名 :=> 真假
>this.ast() === null : boolean
>类型别名 :=> 真假
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>null : null
>类型别名 :=> 空值
>this.parent() === null : boolean
>类型别名 :=> 真假
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>null : null
>类型别名 :=> 空值

                return false;
>false : false
>类型别名 :=> 为假

            return (this.ast().nodeType === TypeScript.NodeType.Name) &&
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.FuncDecl) &&                ((<TypeScript.FuncDecl>this.parent()).name === this.ast()) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) &&                (this.parent().nodeType === TypeScript.NodeType.FuncDecl) : boolean
>类型别名 :=> 真假
>(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
>类型别名 :=> 真假
>this.ast().nodeType === TypeScript.NodeType.Name : boolean
>类型别名 :=> 真假
>this.ast().nodeType : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Name : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Name : any
>类型别名 :=> 任意

                (this.parent().nodeType === TypeScript.NodeType.FuncDecl) &&
>(this.parent().nodeType === TypeScript.NodeType.FuncDecl) : boolean
>类型别名 :=> 真假
>this.parent().nodeType === TypeScript.NodeType.FuncDecl : boolean
>类型别名 :=> 真假
>this.parent().nodeType : any
>类型别名 :=> 任意
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.FuncDecl : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>FuncDecl : any
>类型别名 :=> 任意

                ((<TypeScript.FuncDecl>this.parent()).name === this.ast());
>((<TypeScript.FuncDecl>this.parent()).name === this.ast()) : boolean
>类型别名 :=> 真假
>(<TypeScript.FuncDecl>this.parent()).name === this.ast() : boolean
>类型别名 :=> 真假
>(<TypeScript.FuncDecl>this.parent()).name : any
>类型别名 :=> 任意
>(<TypeScript.FuncDecl>this.parent()) : any
>类型别名 :=> 任意
><TypeScript.FuncDecl>this.parent() : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>FuncDecl : No type information available!
>this.parent() : any
>类型别名 :=> 任意
>this.parent : () => any
>this : this
>parent : () => any
>name : any
>类型别名 :=> 任意
>this.ast() : any
>类型别名 :=> 任意
>this.ast : () => any
>this : this
>ast : () => any
        }

        public isChildOfScript(): boolean {
>isChildOfScript : () => boolean

            var ast = lastOf(this.asts);
>ast : any
>类型别名 :=> 任意
>lastOf(this.asts) : any
>类型别名 :=> 任意
>lastOf : (items: any[]) => any
>this.asts : any[]
>this : this
>asts : any[]

            return this.count() >= 3 &&
>this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top] === ast : boolean
>类型别名 :=> 真假
>this.count() >= 3 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>3 : 3

                this.asts[this.top] === ast &&
>this.asts[this.top] === ast : boolean
>类型别名 :=> 真假
>this.asts[this.top] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>ast : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script;
>this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script : boolean
>类型别名 :=> 真假
>this.asts[this.top - 2].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Script : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Script : any
>类型别名 :=> 任意
        }

        public isChildOfModule(): boolean {
>isChildOfModule : () => boolean

            var ast = lastOf(this.asts);
>ast : any
>类型别名 :=> 任意
>lastOf(this.asts) : any
>类型别名 :=> 任意
>lastOf : (items: any[]) => any
>this.asts : any[]
>this : this
>asts : any[]

            return this.count() >= 3 &&
>this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top] === ast : boolean
>类型别名 :=> 真假
>this.count() >= 3 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>3 : 3

                this.asts[this.top] === ast &&
>this.asts[this.top] === ast : boolean
>类型别名 :=> 真假
>this.asts[this.top] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>ast : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration;
>this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
>类型别名 :=> 真假
>this.asts[this.top - 2].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ModuleDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ModuleDeclaration : any
>类型别名 :=> 任意
        }

        public isChildOfClass(): boolean {
>isChildOfClass : () => boolean

            var ast = lastOf(this.asts);
>ast : any
>类型别名 :=> 任意
>lastOf(this.asts) : any
>类型别名 :=> 任意
>lastOf : (items: any[]) => any
>this.asts : any[]
>this : this
>asts : any[]

            return this.count() >= 3 &&
>this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top] === ast : boolean
>类型别名 :=> 真假
>this.count() >= 3 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>3 : 3

                this.asts[this.top] === ast &&
>this.asts[this.top] === ast : boolean
>类型别名 :=> 真假
>this.asts[this.top] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>ast : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration;
>this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration : boolean
>类型别名 :=> 真假
>this.asts[this.top - 2].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ClassDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ClassDeclaration : any
>类型别名 :=> 任意
        }

        public isArgumentOfClassConstructor(): boolean {
>isArgumentOfClassConstructor : () => boolean

            var ast = lastOf(this.asts);
>ast : any
>类型别名 :=> 任意
>lastOf(this.asts) : any
>类型别名 :=> 任意
>lastOf : (items: any[]) => any
>this.asts : any[]
>this : this
>asts : any[]

            return this.count() >= 5 &&
>this.count() >= 5 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) &&                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) &&                ((<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]) : boolean
>类型别名 :=> 真假
>this.count() >= 5 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) &&                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) : boolean
>类型别名 :=> 真假
>this.count() >= 5 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) : any
>类型别名 :=> 任意
>this.count() >= 5 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration : boolean
>类型别名 :=> 真假
>this.count() >= 5 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 5 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl : boolean
>类型别名 :=> 真假
>this.count() >= 5 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 5 &&                this.asts[this.top] === ast : boolean
>类型别名 :=> 真假
>this.count() >= 5 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>5 : 5

                this.asts[this.top] === ast &&
>this.asts[this.top] === ast : boolean
>类型别名 :=> 真假
>this.asts[this.top] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>ast : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&
>this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl : boolean
>类型别名 :=> 真假
>this.asts[this.top - 2].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.FuncDecl : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>FuncDecl : any
>类型别名 :=> 任意

                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 3].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 3].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 3] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 3 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>3 : 3
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&
>this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration : boolean
>类型别名 :=> 真假
>this.asts[this.top - 4].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 4] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 4 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>4 : 4
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ClassDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ClassDeclaration : any
>类型别名 :=> 任意

                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) &&
>((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) : any
>类型别名 :=> 任意
>(<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor : any
>类型别名 :=> 任意
>(<TypeScript.FuncDecl>this.asts[this.top - 2]) : any
>类型别名 :=> 任意
><TypeScript.FuncDecl>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>FuncDecl : No type information available!
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>isConstructor : any
>类型别名 :=> 任意

                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) &&
>((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) : boolean
>类型别名 :=> 真假
>(<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1] : boolean
>类型别名 :=> 真假
>(<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments : any
>类型别名 :=> 任意
>(<TypeScript.FuncDecl>this.asts[this.top - 2]) : any
>类型别名 :=> 任意
><TypeScript.FuncDecl>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>FuncDecl : No type information available!
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>arguments : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1

                ((<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]);
>((<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]) : boolean
>类型别名 :=> 真假
>(<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2] : boolean
>类型别名 :=> 真假
>(<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl : any
>类型别名 :=> 任意
>(<TypeScript.ClassDeclaration>this.asts[this.top - 4]) : any
>类型别名 :=> 任意
><TypeScript.ClassDeclaration>this.asts[this.top - 4] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ClassDeclaration : No type information available!
>this.asts[this.top - 4] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 4 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>4 : 4
>constructorDecl : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
        }

        public isChildOfInterface(): boolean {
>isChildOfInterface : () => boolean

            var ast = lastOf(this.asts);
>ast : any
>类型别名 :=> 任意
>lastOf(this.asts) : any
>类型别名 :=> 任意
>lastOf : (items: any[]) => any
>this.asts : any[]
>this : this
>asts : any[]

            return this.count() >= 3 &&
>this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top] === ast : boolean
>类型别名 :=> 真假
>this.count() >= 3 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>3 : 3

                this.asts[this.top] === ast &&
>this.asts[this.top] === ast : boolean
>类型别名 :=> 真假
>this.asts[this.top] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>ast : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration;
>this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration : boolean
>类型别名 :=> 真假
>this.asts[this.top - 2].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.InterfaceDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>InterfaceDeclaration : any
>类型别名 :=> 任意
        }

        public isTopLevelImplicitModule() {
>isTopLevelImplicitModule : () => any

            return this.count() >= 1 &&
>this.count() >= 1 &&                this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration &&                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top]).modFlags, TypeScript.ModuleFlags.IsWholeFile) : any
>类型别名 :=> 任意
>this.count() >= 1 &&                this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
>类型别名 :=> 真假
>this.count() >= 1 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>1 : 1

                this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration &&
>this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
>类型别名 :=> 真假
>this.asts[this.top].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ModuleDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ModuleDeclaration : any
>类型别名 :=> 任意

                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top]).modFlags, TypeScript.ModuleFlags.IsWholeFile);
>TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top]).modFlags, TypeScript.ModuleFlags.IsWholeFile) : any
>类型别名 :=> 任意
>TypeScript.hasFlag : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>hasFlag : any
>类型别名 :=> 任意
>(<TypeScript.ModuleDeclaration>this.asts[this.top]).modFlags : any
>类型别名 :=> 任意
>(<TypeScript.ModuleDeclaration>this.asts[this.top]) : any
>类型别名 :=> 任意
><TypeScript.ModuleDeclaration>this.asts[this.top] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ModuleDeclaration : No type information available!
>this.asts[this.top] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>modFlags : any
>类型别名 :=> 任意
>TypeScript.ModuleFlags.IsWholeFile : any
>类型别名 :=> 任意
>TypeScript.ModuleFlags : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>ModuleFlags : any
>类型别名 :=> 任意
>IsWholeFile : any
>类型别名 :=> 任意
        }

        public isBodyOfTopLevelImplicitModule() {
>isBodyOfTopLevelImplicitModule : () => any

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] &&                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).modFlags, TypeScript.ModuleFlags.IsWholeFile) : any
>类型别名 :=> 任意
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 0].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ModuleDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ModuleDeclaration : any
>类型别名 :=> 任意

                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] &&
>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members : any
>类型别名 :=> 任意
>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.ModuleDeclaration>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ModuleDeclaration : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>members : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0

                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).modFlags, TypeScript.ModuleFlags.IsWholeFile);
>TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).modFlags, TypeScript.ModuleFlags.IsWholeFile) : any
>类型别名 :=> 任意
>TypeScript.hasFlag : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>hasFlag : any
>类型别名 :=> 任意
>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).modFlags : any
>类型别名 :=> 任意
>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.ModuleDeclaration>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ModuleDeclaration : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>modFlags : any
>类型别名 :=> 任意
>TypeScript.ModuleFlags.IsWholeFile : any
>类型别名 :=> 任意
>TypeScript.ModuleFlags : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>ModuleFlags : any
>类型别名 :=> 任意
>IsWholeFile : any
>类型别名 :=> 任意
        }

        public isBodyOfScript(): boolean {
>isBodyOfScript : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script &&                 (<TypeScript.Script>this.asts[this.top - 1]).bod == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Script : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Script : any
>类型别名 :=> 任意

                 (<TypeScript.Script>this.asts[this.top - 1]).bod == this.asts[this.top - 0];
>(<TypeScript.Script>this.asts[this.top - 1]).bod == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.Script>this.asts[this.top - 1]).bod : any
>类型别名 :=> 任意
>(<TypeScript.Script>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.Script>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>Script : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>bod : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfSwitch(): boolean {
>isBodyOfSwitch : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Switch &&                 (<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Switch : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Switch &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Switch : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Switch : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Switch : any
>类型别名 :=> 任意

                 (<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList == this.asts[this.top - 0];
>(<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList : any
>类型别名 :=> 任意
>(<TypeScript.SwitchStatement>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.SwitchStatement>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>SwitchStatement : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>caseList : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfModule(): boolean {
>isBodyOfModule : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ModuleDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ModuleDeclaration : any
>类型别名 :=> 任意

                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];
>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members : any
>类型别名 :=> 任意
>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.ModuleDeclaration>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ModuleDeclaration : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>members : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfClass(): boolean {
>isBodyOfClass : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration &&                 (<TypeScript.ClassDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ClassDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ClassDeclaration : any
>类型别名 :=> 任意

                 (<TypeScript.ClassDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];
>(<TypeScript.ClassDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.ClassDeclaration>this.asts[this.top - 1]).members : any
>类型别名 :=> 任意
>(<TypeScript.ClassDeclaration>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.ClassDeclaration>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ClassDeclaration : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>members : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfFunction(): boolean {
>isBodyOfFunction : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&                 (<TypeScript.FuncDecl>this.asts[this.top - 1]).bod == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.FuncDecl : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>FuncDecl : any
>类型别名 :=> 任意

                 (<TypeScript.FuncDecl>this.asts[this.top - 1]).bod == this.asts[this.top - 0];
>(<TypeScript.FuncDecl>this.asts[this.top - 1]).bod == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.FuncDecl>this.asts[this.top - 1]).bod : any
>类型别名 :=> 任意
>(<TypeScript.FuncDecl>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.FuncDecl>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>FuncDecl : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>bod : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfInterface(): boolean {
>isBodyOfInterface : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration &&                 (<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.InterfaceDeclaration : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>InterfaceDeclaration : any
>类型别名 :=> 任意

                 (<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];
>(<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members : any
>类型别名 :=> 任意
>(<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.InterfaceDeclaration>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>InterfaceDeclaration : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>members : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfBlock(): boolean {
>isBodyOfBlock : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block &&                (<TypeScript.Block>this.asts[this.top - 1]).statements == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Block : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Block : any
>类型别名 :=> 任意

                (<TypeScript.Block>this.asts[this.top - 1]).statements == this.asts[this.top - 0];
>(<TypeScript.Block>this.asts[this.top - 1]).statements == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.Block>this.asts[this.top - 1]).statements : any
>类型别名 :=> 任意
>(<TypeScript.Block>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.Block>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>Block : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>statements : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfFor(): boolean {
>isBodyOfFor : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.For &&                (<TypeScript.ForStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.For : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.For &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.For : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.For : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>For : any
>类型别名 :=> 任意

                (<TypeScript.ForStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
>(<TypeScript.ForStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.ForStatement>this.asts[this.top - 1]).body : any
>类型别名 :=> 任意
>(<TypeScript.ForStatement>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.ForStatement>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ForStatement : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>body : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfCase(): boolean {
>isBodyOfCase : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Case &&                (<TypeScript.CaseStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Case : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Case &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Case : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Case : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Case : any
>类型别名 :=> 任意

                (<TypeScript.CaseStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
>(<TypeScript.CaseStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.CaseStatement>this.asts[this.top - 1]).body : any
>类型别名 :=> 任意
>(<TypeScript.CaseStatement>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.CaseStatement>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>CaseStatement : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>body : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfTry(): boolean {
>isBodyOfTry : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Try &&                (<TypeScript.Try>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Try : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Try &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Try : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Try : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Try : any
>类型别名 :=> 任意

                (<TypeScript.Try>this.asts[this.top - 1]).body == this.asts[this.top - 0];
>(<TypeScript.Try>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.Try>this.asts[this.top - 1]).body : any
>类型别名 :=> 任意
>(<TypeScript.Try>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.Try>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>Try : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>body : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfCatch(): boolean {
>isBodyOfCatch : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Catch &&                (<TypeScript.Catch>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Catch : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Catch &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Catch : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Catch : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Catch : any
>类型别名 :=> 任意

                (<TypeScript.Catch>this.asts[this.top - 1]).body == this.asts[this.top - 0];
>(<TypeScript.Catch>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.Catch>this.asts[this.top - 1]).body : any
>类型别名 :=> 任意
>(<TypeScript.Catch>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.Catch>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>Catch : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>body : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfDoWhile(): boolean {
>isBodyOfDoWhile : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoWhile &&                (<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoWhile : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoWhile &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoWhile : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.DoWhile : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>DoWhile : any
>类型别名 :=> 任意

                (<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
>(<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body : any
>类型别名 :=> 任意
>(<TypeScript.DoWhileStatement>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.DoWhileStatement>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>DoWhileStatement : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>body : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfWhile(): boolean {
>isBodyOfWhile : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.While &&                (<TypeScript.WhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.While : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.While &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.While : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.While : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>While : any
>类型别名 :=> 任意

                (<TypeScript.WhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
>(<TypeScript.WhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.WhileStatement>this.asts[this.top - 1]).body : any
>类型别名 :=> 任意
>(<TypeScript.WhileStatement>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.WhileStatement>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>WhileStatement : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>body : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfForIn(): boolean {
>isBodyOfForIn : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForIn &&                (<TypeScript.ForInStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForIn : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForIn &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForIn : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ForIn : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ForIn : any
>类型别名 :=> 任意

                (<TypeScript.ForInStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
>(<TypeScript.ForInStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.ForInStatement>this.asts[this.top - 1]).body : any
>类型别名 :=> 任意
>(<TypeScript.ForInStatement>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.ForInStatement>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ForInStatement : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>body : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfWith(): boolean {
>isBodyOfWith : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.With &&                (<TypeScript.WithStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.With : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.With &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.With : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.With : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>With : any
>类型别名 :=> 任意

                (<TypeScript.WithStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
>(<TypeScript.WithStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.WithStatement>this.asts[this.top - 1]).body : any
>类型别名 :=> 任意
>(<TypeScript.WithStatement>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.WithStatement>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>WithStatement : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>body : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfFinally(): boolean {
>isBodyOfFinally : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Finally &&                (<TypeScript.Finally>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Finally : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Finally &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Finally : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Finally : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Finally : any
>类型别名 :=> 任意

                (<TypeScript.Finally>this.asts[this.top - 1]).body == this.asts[this.top - 0];
>(<TypeScript.Finally>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.Finally>this.asts[this.top - 1]).body : any
>类型别名 :=> 任意
>(<TypeScript.Finally>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.Finally>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>Finally : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>body : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isCaseOfSwitch(): boolean {
>isCaseOfSwitch : () => boolean

            return this.count() >= 3 &&
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch : boolean
>类型别名 :=> 真假
>this.count() >= 3 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>3 : 3

                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&
>this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch : boolean
>类型别名 :=> 真假
>this.asts[this.top - 2].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Switch : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Switch : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1];
>(<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] : boolean
>类型别名 :=> 真假
>(<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList : any
>类型别名 :=> 任意
>(<TypeScript.SwitchStatement>this.asts[this.top - 2]) : any
>类型别名 :=> 任意
><TypeScript.SwitchStatement>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>SwitchStatement : No type information available!
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>caseList : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
        }

        public isDefaultCaseOfSwitch(): boolean {
>isDefaultCaseOfSwitch : () => boolean

            return this.count() >= 3 &&
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] &&                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch : boolean
>类型别名 :=> 真假
>this.count() >= 3 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>3 : 3

                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&
>this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch : boolean
>类型别名 :=> 真假
>this.asts[this.top - 2].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Switch : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Switch : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] &&
>(<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] : boolean
>类型别名 :=> 真假
>(<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList : any
>类型别名 :=> 任意
>(<TypeScript.SwitchStatement>this.asts[this.top - 2]) : any
>类型别名 :=> 任意
><TypeScript.SwitchStatement>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>SwitchStatement : No type information available!
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>caseList : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1

                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase == this.asts[this.top - 0];
>(<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase : any
>类型别名 :=> 任意
>(<TypeScript.SwitchStatement>this.asts[this.top - 2]) : any
>类型别名 :=> 任意
><TypeScript.SwitchStatement>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>SwitchStatement : No type information available!
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>defaultCase : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isListOfObjectLit(): boolean {
>isListOfObjectLit : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ObjectLit : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ObjectLit : any
>类型别名 :=> 任意

                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 0].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];
>(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand : any
>类型别名 :=> 任意
>(<TypeScript.UnaryExpression>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.UnaryExpression>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>UnaryExpression : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>operand : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfObjectLit(): boolean {
>isBodyOfObjectLit : () => boolean

            return this.isListOfObjectLit();
>this.isListOfObjectLit() : boolean
>类型别名 :=> 真假
>this.isListOfObjectLit : () => boolean
>this : this
>isListOfObjectLit : () => boolean
        }

        public isEmptyListOfObjectLit(): boolean {
>isEmptyListOfObjectLit : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] &&                (<TypeScript.ASTList>this.asts[this.top - 0]).members.length == 0 : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ObjectLit : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ObjectLit : any
>类型别名 :=> 任意

                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 0].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] &&
>(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand : any
>类型别名 :=> 任意
>(<TypeScript.UnaryExpression>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.UnaryExpression>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>UnaryExpression : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>operand : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0

                (<TypeScript.ASTList>this.asts[this.top - 0]).members.length == 0;
>(<TypeScript.ASTList>this.asts[this.top - 0]).members.length == 0 : boolean
>类型别名 :=> 真假
>(<TypeScript.ASTList>this.asts[this.top - 0]).members.length : any
>类型别名 :=> 任意
>(<TypeScript.ASTList>this.asts[this.top - 0]).members : any
>类型别名 :=> 任意
>(<TypeScript.ASTList>this.asts[this.top - 0]) : any
>类型别名 :=> 任意
><TypeScript.ASTList>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ASTList : No type information available!
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>members : any
>类型别名 :=> 任意
>length : any
>类型别名 :=> 任意
>0 : 0
        }

        public isMemberOfObjectLit(): boolean {
>isMemberOfObjectLit : () => boolean

            return this.count() >= 3 &&
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member &&                (<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand == this.asts[this.top - 1] : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit : boolean
>类型别名 :=> 真假
>this.count() >= 3 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>3 : 3

                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit &&
>this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit : boolean
>类型别名 :=> 真假
>this.asts[this.top - 2].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ObjectLit : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ObjectLit : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member &&
>this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member : boolean
>类型别名 :=> 真假
>this.asts[this.top - 0].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Member : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Member : any
>类型别名 :=> 任意

                (<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand == this.asts[this.top - 1];
>(<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand == this.asts[this.top - 1] : boolean
>类型别名 :=> 真假
>(<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand : any
>类型别名 :=> 任意
>(<TypeScript.UnaryExpression>this.asts[this.top - 2]) : any
>类型别名 :=> 任意
><TypeScript.UnaryExpression>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>UnaryExpression : No type information available!
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>operand : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
        }

        public isNameOfMemberOfObjectLit(): boolean {
>isNameOfMemberOfObjectLit : () => boolean

            return this.count() >= 4 &&
>this.count() >= 4 &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name &&                (<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand == this.asts[this.top - 2] : boolean
>类型别名 :=> 真假
>this.count() >= 4 &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name : boolean
>类型别名 :=> 真假
>this.count() >= 4 &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member : boolean
>类型别名 :=> 真假
>this.count() >= 4 &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 4 &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit : boolean
>类型别名 :=> 真假
>this.count() >= 4 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>4 : 4

                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&
>this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit : boolean
>类型别名 :=> 真假
>this.asts[this.top - 3].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 3] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 3 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>3 : 3
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ObjectLit : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ObjectLit : any
>类型别名 :=> 任意

                this.asts[this.top - 2].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 2].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 2].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Member : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Member : any
>类型别名 :=> 任意

                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name &&
>this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name : boolean
>类型别名 :=> 真假
>this.asts[this.top - 0].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Name : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Name : any
>类型别名 :=> 任意

                (<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand == this.asts[this.top - 2];
>(<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand == this.asts[this.top - 2] : boolean
>类型别名 :=> 真假
>(<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand : any
>类型别名 :=> 任意
>(<TypeScript.UnaryExpression>this.asts[this.top - 3]) : any
>类型别名 :=> 任意
><TypeScript.UnaryExpression>this.asts[this.top - 3] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>UnaryExpression : No type information available!
>this.asts[this.top - 3] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 3 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>3 : 3
>operand : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
        }

        public isListOfArrayLit(): boolean {
>isListOfArrayLit : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.ArrayLit : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>ArrayLit : any
>类型别名 :=> 任意

                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 0].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];
>(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand : any
>类型别名 :=> 任意
>(<TypeScript.UnaryExpression>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.UnaryExpression>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>UnaryExpression : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>operand : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isTargetOfMember(): boolean {
>isTargetOfMember : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 === this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Member : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Member : any
>类型别名 :=> 任意

                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 === this.asts[this.top - 0];
>(<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 === this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 : any
>类型别名 :=> 任意
>(<TypeScript.BinaryExpression>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.BinaryExpression>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>BinaryExpression : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>operand1 : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isMemberOfMember(): boolean {
>isMemberOfMember : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Member : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Member : any
>类型别名 :=> 任意

                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];
>(<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 : any
>类型别名 :=> 任意
>(<TypeScript.BinaryExpression>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.BinaryExpression>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>BinaryExpression : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>operand2 : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isItemOfList(): boolean {
>isItemOfList : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List;
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

            //(<Tools.ASTList>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];
        }

        public isThenOfIf(): boolean {
>isThenOfIf : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&                (<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.If : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.If : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>If : any
>类型别名 :=> 任意

                (<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod == this.asts[this.top - 0];
>(<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod : any
>类型别名 :=> 任意
>(<TypeScript.IfStatement>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.IfStatement>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>IfStatement : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>thenBod : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isElseOfIf(): boolean {
>isElseOfIf : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&                (<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.If : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.If : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>If : any
>类型别名 :=> 任意

                (<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod == this.asts[this.top - 0];
>(<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod == this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod : any
>类型别名 :=> 任意
>(<TypeScript.IfStatement>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.IfStatement>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>IfStatement : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>elseBod : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isBodyOfDefaultCase(): boolean {
>isBodyOfDefaultCase : () => boolean

            return this.isBodyOfCase();
>this.isBodyOfCase() : boolean
>类型别名 :=> 真假
>this.isBodyOfCase : () => boolean
>this : this
>isBodyOfCase : () => boolean
        }

        public isSingleStatementList(): boolean {
>isSingleStatementList : () => boolean

            return this.count() >= 1 &&
>this.count() >= 1 &&                this.asts[this.top].nodeType === TypeScript.NodeType.List &&                (<TypeScript.ASTList>this.asts[this.top]).members.length === 1 : boolean
>类型别名 :=> 真假
>this.count() >= 1 &&                this.asts[this.top].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 1 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>1 : 1

                this.asts[this.top].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                (<TypeScript.ASTList>this.asts[this.top]).members.length === 1;
>(<TypeScript.ASTList>this.asts[this.top]).members.length === 1 : boolean
>类型别名 :=> 真假
>(<TypeScript.ASTList>this.asts[this.top]).members.length : any
>类型别名 :=> 任意
>(<TypeScript.ASTList>this.asts[this.top]).members : any
>类型别名 :=> 任意
>(<TypeScript.ASTList>this.asts[this.top]) : any
>类型别名 :=> 任意
><TypeScript.ASTList>this.asts[this.top] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ASTList : No type information available!
>this.asts[this.top] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>members : any
>类型别名 :=> 任意
>length : any
>类型别名 :=> 任意
>1 : 1
        }

        public isArgumentListOfFunction(): boolean {
>isArgumentListOfFunction : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&                (<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments === this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 0].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.FuncDecl : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>FuncDecl : any
>类型别名 :=> 任意

                (<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];
>(<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments === this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments : any
>类型别名 :=> 任意
>(<TypeScript.FuncDecl>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.FuncDecl>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>FuncDecl : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>arguments : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isArgumentOfFunction(): boolean {
>isArgumentOfFunction : () => boolean

            return this.count() >= 3 &&
>this.count() >= 3 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&                (<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1] : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl : boolean
>类型别名 :=> 真假
>this.count() >= 3 &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 3 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>3 : 3

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&
>this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl : boolean
>类型别名 :=> 真假
>this.asts[this.top - 2].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.FuncDecl : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>FuncDecl : any
>类型别名 :=> 任意

                (<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1];
>(<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1] : boolean
>类型别名 :=> 真假
>(<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments : any
>类型别名 :=> 任意
>(<TypeScript.FuncDecl>this.asts[this.top - 2]) : any
>类型别名 :=> 任意
><TypeScript.FuncDecl>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>FuncDecl : No type information available!
>this.asts[this.top - 2] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 2 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>2 : 2
>arguments : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
        }

        public isArgumentListOfCall(): boolean {
>isArgumentListOfCall : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call &&                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 0].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Call : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Call : any
>类型别名 :=> 任意

                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];
>(<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.CallExpression>this.asts[this.top - 1]).arguments : any
>类型别名 :=> 任意
>(<TypeScript.CallExpression>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.CallExpression>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>CallExpression : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>arguments : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isArgumentListOfNew(): boolean {
>isArgumentListOfNew : () => boolean

            return this.count() >= 2 &&
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.New &&                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.New : boolean
>类型别名 :=> 真假
>this.count() >= 2 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.count() >= 2 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>2 : 2

                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
>this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
>类型别名 :=> 真假
>this.asts[this.top - 0].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.List : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>List : any
>类型别名 :=> 任意

                this.asts[this.top - 1].nodeType === TypeScript.NodeType.New &&
>this.asts[this.top - 1].nodeType === TypeScript.NodeType.New : boolean
>类型别名 :=> 真假
>this.asts[this.top - 1].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.New : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>New : any
>类型别名 :=> 任意

                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];
>(<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0] : boolean
>类型别名 :=> 真假
>(<TypeScript.CallExpression>this.asts[this.top - 1]).arguments : any
>类型别名 :=> 任意
>(<TypeScript.CallExpression>this.asts[this.top - 1]) : any
>类型别名 :=> 任意
><TypeScript.CallExpression>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>CallExpression : No type information available!
>this.asts[this.top - 1] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 1 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>1 : 1
>arguments : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
        }

        public isSynthesizedBlock(): boolean {
>isSynthesizedBlock : () => boolean

            return this.count() >= 1 &&
>this.count() >= 1 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block &&                (<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock === false : boolean
>类型别名 :=> 真假
>this.count() >= 1 &&                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block : boolean
>类型别名 :=> 真假
>this.count() >= 1 : boolean
>类型别名 :=> 真假
>this.count() : number
>类型别名 :=> 数字
>this.count : () => number
>this : this
>count : () => number
>1 : 1

                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block &&
>this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block : boolean
>类型别名 :=> 真假
>this.asts[this.top - 0].nodeType : any
>类型别名 :=> 任意
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Block : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Block : any
>类型别名 :=> 任意

                (<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock === false;
>(<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock === false : boolean
>类型别名 :=> 真假
>(<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock : any
>类型别名 :=> 任意
>(<TypeScript.Block>this.asts[this.top - 0]) : any
>类型别名 :=> 任意
><TypeScript.Block>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>Block : No type information available!
>this.asts[this.top - 0] : any
>类型别名 :=> 任意
>this.asts : any[]
>this : this
>asts : any[]
>this.top - 0 : number
>类型别名 :=> 数字
>this.top : number
>类型别名 :=> 数字
>this : this
>top : number
>类型别名 :=> 数字
>0 : 0
>isStatementBlock : any
>类型别名 :=> 任意
>false : false
>类型别名 :=> 为假
        }
    }

    export function isValidAstNode(ast: TypeScript.ASTSpan): boolean {
>isValidAstNode : (ast: any) => boolean
>ast : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>ASTSpan : No type information available!

        if (ast === null)
>ast === null : boolean
>类型别名 :=> 真假
>ast : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

            return false;
>false : false
>类型别名 :=> 为假

        if (ast.minChar === -1 || ast.limChar === -1)
>ast.minChar === -1 || ast.limChar === -1 : boolean
>类型别名 :=> 真假
>ast.minChar === -1 : boolean
>类型别名 :=> 真假
>ast.minChar : any
>类型别名 :=> 任意
>ast : any
>类型别名 :=> 任意
>minChar : any
>类型别名 :=> 任意
>-1 : -1
>1 : 1
>ast.limChar === -1 : boolean
>类型别名 :=> 真假
>ast.limChar : any
>类型别名 :=> 任意
>ast : any
>类型别名 :=> 任意
>limChar : any
>类型别名 :=> 任意
>-1 : -1
>1 : 1

            return false;
>false : false
>类型别名 :=> 为假

        return true;
>true : true
>类型别名 :=> 为真
    }

    export class AstPathContext {
>AstPathContext : AstPathContext

        public path = new TypeScript.AstPath();
>path : AstPath
>new TypeScript.AstPath() : AstPath
>TypeScript.AstPath : typeof AstPath
>TypeScript : typeof TypeScript
>AstPath : typeof AstPath
    }

    export enum GetAstPathOptions {
>GetAstPathOptions : GetAstPathOptions

        Default = 0,
>Default : GetAstPathOptions
>0 : 0

        EdgeInclusive = 1,
>EdgeInclusive : GetAstPathOptions
>1 : 1

        //We need this options dealing with an AST coming from an incomplete AST. For example:
        //     class foo { // r
        // If we ask for the AST at the position after the "r" character, we won't see we are 
        // inside a comment, because the "class" AST node has a limChar corresponding to the position of 
        // the "{" character, meaning we don't traverse the tree down to the stmt list of the class, meaning
        // we don't find the "precomment" attached to the errorneous empty stmt.
        //TODO: It would be nice to be able to get rid of this.
        DontPruneSearchBasedOnPosition = 1 << 1,
>DontPruneSearchBasedOnPosition : GetAstPathOptions
>1 << 1 : number
>类型别名 :=> 数字
>1 : 1
>1 : 1
    }

    ///
    /// Return the stack of AST nodes containing "position"
    ///
    export function getAstPathToPosition(script: TypeScript.AST, pos: number, options = GetAstPathOptions.Default): TypeScript.AstPath {
>getAstPathToPosition : (script: any, pos: number, options?: GetAstPathOptions) => AstPath
>script : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>pos : number
>类型别名 :=> 数字
>options : GetAstPathOptions
>GetAstPathOptions.Default : GetAstPathOptions
>GetAstPathOptions : typeof GetAstPathOptions
>Default : GetAstPathOptions
>TypeScript : any
>类型别名 :=> 任意
>AstPath : AstPath

        var lookInComments = (comments: TypeScript.Comment[]) => {
>lookInComments : (comments: any[]) => void
>(comments: TypeScript.Comment[]) => {            if (comments && comments.length > 0) {                for (var i = 0; i < comments.length; i++) {                    var minChar = comments[i].minChar;                    var limChar = comments[i].limChar;                    if (!comments[i].isBlockComment) {                        limChar++; // For single line comments, include 1 more character (for the newline)                    }                    if (pos >= minChar && pos < limChar) {                        ctx.path.push(comments[i]);                    }                }            }        } : (comments: any[]) => void
>comments : any[]
>TypeScript : any
>类型别名 :=> 任意
>Comment : No type information available!

            if (comments && comments.length > 0) {
>comments && comments.length > 0 : boolean
>类型别名 :=> 真假
>comments : any[]
>comments.length > 0 : boolean
>类型别名 :=> 真假
>comments.length : number
>类型别名 :=> 数字
>comments : any[]
>length : number
>类型别名 :=> 数字
>0 : 0

                for (var i = 0; i < comments.length; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < comments.length : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>comments.length : number
>类型别名 :=> 数字
>comments : any[]
>length : number
>类型别名 :=> 数字
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

                    var minChar = comments[i].minChar;
>minChar : any
>类型别名 :=> 任意
>comments[i].minChar : any
>类型别名 :=> 任意
>comments[i] : any
>类型别名 :=> 任意
>comments : any[]
>i : number
>类型别名 :=> 数字
>minChar : any
>类型别名 :=> 任意

                    var limChar = comments[i].limChar;
>limChar : any
>类型别名 :=> 任意
>comments[i].limChar : any
>类型别名 :=> 任意
>comments[i] : any
>类型别名 :=> 任意
>comments : any[]
>i : number
>类型别名 :=> 数字
>limChar : any
>类型别名 :=> 任意

                    if (!comments[i].isBlockComment) {
>!comments[i].isBlockComment : boolean
>类型别名 :=> 真假
>comments[i].isBlockComment : any
>类型别名 :=> 任意
>comments[i] : any
>类型别名 :=> 任意
>comments : any[]
>i : number
>类型别名 :=> 数字
>isBlockComment : any
>类型别名 :=> 任意

                        limChar++; // For single line comments, include 1 more character (for the newline)
>limChar++ : number
>类型别名 :=> 数字
>limChar : any
>类型别名 :=> 任意
                    }
                    if (pos >= minChar && pos < limChar) {
>pos >= minChar && pos < limChar : boolean
>类型别名 :=> 真假
>pos >= minChar : boolean
>类型别名 :=> 真假
>pos : number
>类型别名 :=> 数字
>minChar : any
>类型别名 :=> 任意
>pos < limChar : boolean
>类型别名 :=> 真假
>pos : number
>类型别名 :=> 数字
>limChar : any
>类型别名 :=> 任意

                        ctx.path.push(comments[i]);
>ctx.path.push(comments[i]) : void
>类型别名 :=> 无值
>ctx.path.push : (ast: any) => void
>ctx.path : AstPath
>ctx : AstPathContext
>path : AstPath
>push : (ast: any) => void
>comments[i] : any
>类型别名 :=> 任意
>comments : any[]
>i : number
>类型别名 :=> 数字
                    }
                }
            }
        }

        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {
>pre : (cur: any, parent: any, walker: any) => any
>function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {            if (isValidAstNode(cur)) {                // Add "cur" to the stack if it contains our position                // For "identifier" nodes, we need a special case: A position equal to "limChar" is                // valid, since the position corresponds to a caret position (in between characters)                // For example:                //  bar                //  0123                // If "position == 3", the caret is at the "right" of the "r" character, which should be considered valid                var inclusive =                    hasFlag(options, GetAstPathOptions.EdgeInclusive) ||                    cur.nodeType === TypeScript.NodeType.Name ||                    pos === script.limChar; // Special "EOF" case                var minChar = cur.minChar;                var limChar = cur.limChar + (inclusive ? 1 : 0)                if (pos >= minChar && pos < limChar) {                    // TODO: Since AST is sometimes not correct wrt to position, only add "cur" if it's better                    //       than top of the stack.                    var previous = ctx.path.ast();                    if (previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {                        ctx.path.push(cur);                    }                    else {                        //logger.log("TODO: Ignoring node because minChar, limChar not better than previous node in stack");                    }                }                // The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually                if (pos < limChar) {                    lookInComments(cur.preComments);                }                if (pos >= minChar) {                    lookInComments(cur.postComments);                }                if (!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {                    // Don't go further down the tree if pos is outside of [minChar, limChar]                    walker.options.goChildren = (minChar <= pos && pos <= limChar);                }            }            return cur;        } : (cur: any, parent: any, walker: any) => any
>cur : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>parent : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>walker : any
>类型别名 :=> 任意
>IAstWalker : No type information available!

            if (isValidAstNode(cur)) {
>isValidAstNode(cur) : boolean
>类型别名 :=> 真假
>isValidAstNode : (ast: any) => boolean
>cur : any
>类型别名 :=> 任意

                // Add "cur" to the stack if it contains our position
                // For "identifier" nodes, we need a special case: A position equal to "limChar" is
                // valid, since the position corresponds to a caret position (in between characters)
                // For example:
                //  bar
                //  0123
                // If "position == 3", the caret is at the "right" of the "r" character, which should be considered valid
                var inclusive =
>inclusive : any
>类型别名 :=> 任意

                    hasFlag(options, GetAstPathOptions.EdgeInclusive) ||
>hasFlag(options, GetAstPathOptions.EdgeInclusive) ||                    cur.nodeType === TypeScript.NodeType.Name ||                    pos === script.limChar : any
>类型别名 :=> 任意
>hasFlag(options, GetAstPathOptions.EdgeInclusive) ||                    cur.nodeType === TypeScript.NodeType.Name : any
>类型别名 :=> 任意
>hasFlag(options, GetAstPathOptions.EdgeInclusive) : any
>类型别名 :=> 任意
>hasFlag : any
>类型别名 :=> 任意
>options : GetAstPathOptions
>GetAstPathOptions.EdgeInclusive : GetAstPathOptions
>GetAstPathOptions : typeof GetAstPathOptions
>EdgeInclusive : GetAstPathOptions

                    cur.nodeType === TypeScript.NodeType.Name ||
>cur.nodeType === TypeScript.NodeType.Name : boolean
>类型别名 :=> 真假
>cur.nodeType : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>nodeType : any
>类型别名 :=> 任意
>TypeScript.NodeType.Name : any
>类型别名 :=> 任意
>TypeScript.NodeType : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>NodeType : any
>类型别名 :=> 任意
>Name : any
>类型别名 :=> 任意

                    pos === script.limChar; // Special "EOF" case
>pos === script.limChar : boolean
>类型别名 :=> 真假
>pos : number
>类型别名 :=> 数字
>script.limChar : any
>类型别名 :=> 任意
>script : any
>类型别名 :=> 任意
>limChar : any
>类型别名 :=> 任意

                var minChar = cur.minChar;
>minChar : any
>类型别名 :=> 任意
>cur.minChar : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>minChar : any
>类型别名 :=> 任意

                var limChar = cur.limChar + (inclusive ? 1 : 0)
>limChar : any
>类型别名 :=> 任意
>cur.limChar + (inclusive ? 1 : 0) : any
>类型别名 :=> 任意
>cur.limChar : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>limChar : any
>类型别名 :=> 任意
>(inclusive ? 1 : 0) : 0 | 1
>inclusive ? 1 : 0 : 0 | 1
>inclusive : any
>类型别名 :=> 任意
>1 : 1
>0 : 0

                if (pos >= minChar && pos < limChar) {
>pos >= minChar && pos < limChar : boolean
>类型别名 :=> 真假
>pos >= minChar : boolean
>类型别名 :=> 真假
>pos : number
>类型别名 :=> 数字
>minChar : any
>类型别名 :=> 任意
>pos < limChar : boolean
>类型别名 :=> 真假
>pos : number
>类型别名 :=> 数字
>limChar : any
>类型别名 :=> 任意

                    // TODO: Since AST is sometimes not correct wrt to position, only add "cur" if it's better
                    //       than top of the stack.
                    var previous = ctx.path.ast();
>previous : any
>类型别名 :=> 任意
>ctx.path.ast() : any
>类型别名 :=> 任意
>ctx.path.ast : () => any
>ctx.path : AstPath
>ctx : AstPathContext
>path : AstPath
>ast : () => any

                    if (previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {
>previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar) : boolean
>类型别名 :=> 真假
>previous == null : boolean
>类型别名 :=> 真假
>previous : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>(cur.minChar >= previous.minChar && cur.limChar <= previous.limChar) : boolean
>类型别名 :=> 真假
>cur.minChar >= previous.minChar && cur.limChar <= previous.limChar : boolean
>类型别名 :=> 真假
>cur.minChar >= previous.minChar : boolean
>类型别名 :=> 真假
>cur.minChar : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>minChar : any
>类型别名 :=> 任意
>previous.minChar : any
>类型别名 :=> 任意
>previous : any
>类型别名 :=> 任意
>minChar : any
>类型别名 :=> 任意
>cur.limChar <= previous.limChar : boolean
>类型别名 :=> 真假
>cur.limChar : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>limChar : any
>类型别名 :=> 任意
>previous.limChar : any
>类型别名 :=> 任意
>previous : any
>类型别名 :=> 任意
>limChar : any
>类型别名 :=> 任意

                        ctx.path.push(cur);
>ctx.path.push(cur) : void
>类型别名 :=> 无值
>ctx.path.push : (ast: any) => void
>ctx.path : AstPath
>ctx : AstPathContext
>path : AstPath
>push : (ast: any) => void
>cur : any
>类型别名 :=> 任意
                    }
                    else {
                        //logger.log("TODO: Ignoring node because minChar, limChar not better than previous node in stack");
                    }
                }

                // The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually
                if (pos < limChar) {
>pos < limChar : boolean
>类型别名 :=> 真假
>pos : number
>类型别名 :=> 数字
>limChar : any
>类型别名 :=> 任意

                    lookInComments(cur.preComments);
>lookInComments(cur.preComments) : void
>类型别名 :=> 无值
>lookInComments : (comments: any[]) => void
>cur.preComments : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>preComments : any
>类型别名 :=> 任意
                }
                if (pos >= minChar) {
>pos >= minChar : boolean
>类型别名 :=> 真假
>pos : number
>类型别名 :=> 数字
>minChar : any
>类型别名 :=> 任意

                    lookInComments(cur.postComments);
>lookInComments(cur.postComments) : void
>类型别名 :=> 无值
>lookInComments : (comments: any[]) => void
>cur.postComments : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>postComments : any
>类型别名 :=> 任意
                }

                if (!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {
>!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition) : boolean
>类型别名 :=> 真假
>hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition) : any
>类型别名 :=> 任意
>hasFlag : any
>类型别名 :=> 任意
>options : GetAstPathOptions
>GetAstPathOptions.DontPruneSearchBasedOnPosition : GetAstPathOptions
>GetAstPathOptions : typeof GetAstPathOptions
>DontPruneSearchBasedOnPosition : GetAstPathOptions

                    // Don't go further down the tree if pos is outside of [minChar, limChar]
                    walker.options.goChildren = (minChar <= pos && pos <= limChar);
>walker.options.goChildren = (minChar <= pos && pos <= limChar) : boolean
>类型别名 :=> 真假
>walker.options.goChildren : any
>类型别名 :=> 任意
>walker.options : any
>类型别名 :=> 任意
>walker : any
>类型别名 :=> 任意
>options : any
>类型别名 :=> 任意
>goChildren : any
>类型别名 :=> 任意
>(minChar <= pos && pos <= limChar) : boolean
>类型别名 :=> 真假
>minChar <= pos && pos <= limChar : boolean
>类型别名 :=> 真假
>minChar <= pos : boolean
>类型别名 :=> 真假
>minChar : any
>类型别名 :=> 任意
>pos : number
>类型别名 :=> 数字
>pos <= limChar : boolean
>类型别名 :=> 真假
>pos : number
>类型别名 :=> 数字
>limChar : any
>类型别名 :=> 任意
                }
            }
            return cur;
>cur : any
>类型别名 :=> 任意
        }

        var ctx = new AstPathContext();
>ctx : AstPathContext
>new AstPathContext() : AstPathContext
>AstPathContext : typeof AstPathContext

        TypeScript.getAstWalkerFactory().walk(script, pre, null, null, ctx);
>TypeScript.getAstWalkerFactory().walk(script, pre, null, null, ctx) : any
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory().walk : any
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory() : any
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>getAstWalkerFactory : any
>类型别名 :=> 任意
>walk : any
>类型别名 :=> 任意
>script : any
>类型别名 :=> 任意
>pre : (cur: any, parent: any, walker: any) => any
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值
>ctx : AstPathContext

        return ctx.path;
>ctx.path : AstPath
>ctx : AstPathContext
>path : AstPath
    }

    //
    // Find a source text offset that is safe for lexing tokens at the given position.
    // This is used when "position" might be inside a comment or string, etc.
    //
    export function getTokenizationOffset(script: TypeScript.Script, position: number): number {
>getTokenizationOffset : (script: any, position: number) => number
>script : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>Script : No type information available!
>position : number
>类型别名 :=> 数字

        var bestOffset = 0;
>bestOffset : number
>类型别名 :=> 数字
>0 : 0

        var pre = (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker): TypeScript.AST => {
>pre : (cur: any, parent: any, walker: any) => any
>(cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker): TypeScript.AST => {            if (TypeScript.isValidAstNode(cur)) {                // Did we find a closer offset?                if (cur.minChar <= position) {                    bestOffset = max(bestOffset, cur.minChar);                }                // Stop the walk if this node is not related to "minChar"                if (cur.minChar > position || cur.limChar < bestOffset) {                    walker.options.goChildren = false;                }            }            return cur;        } : (cur: any, parent: any, walker: any) => any
>cur : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>parent : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>walker : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>IAstWalker : No type information available!
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!

            if (TypeScript.isValidAstNode(cur)) {
>TypeScript.isValidAstNode(cur) : boolean
>类型别名 :=> 真假
>TypeScript.isValidAstNode : (ast: any) => boolean
>TypeScript : typeof TypeScript
>isValidAstNode : (ast: any) => boolean
>cur : any
>类型别名 :=> 任意

                // Did we find a closer offset?
                if (cur.minChar <= position) {
>cur.minChar <= position : boolean
>类型别名 :=> 真假
>cur.minChar : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>minChar : any
>类型别名 :=> 任意
>position : number
>类型别名 :=> 数字

                    bestOffset = max(bestOffset, cur.minChar);
>bestOffset = max(bestOffset, cur.minChar) : number
>类型别名 :=> 数字
>bestOffset : number
>类型别名 :=> 数字
>max(bestOffset, cur.minChar) : number
>类型别名 :=> 数字
>max : (a: number, b: number) => number
>bestOffset : number
>类型别名 :=> 数字
>cur.minChar : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>minChar : any
>类型别名 :=> 任意
                }

                // Stop the walk if this node is not related to "minChar"
                if (cur.minChar > position || cur.limChar < bestOffset) {
>cur.minChar > position || cur.limChar < bestOffset : boolean
>类型别名 :=> 真假
>cur.minChar > position : boolean
>类型别名 :=> 真假
>cur.minChar : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>minChar : any
>类型别名 :=> 任意
>position : number
>类型别名 :=> 数字
>cur.limChar < bestOffset : boolean
>类型别名 :=> 真假
>cur.limChar : any
>类型别名 :=> 任意
>cur : any
>类型别名 :=> 任意
>limChar : any
>类型别名 :=> 任意
>bestOffset : number
>类型别名 :=> 数字

                    walker.options.goChildren = false;
>walker.options.goChildren = false : false
>类型别名 :=> 为假
>walker.options.goChildren : any
>类型别名 :=> 任意
>walker.options : any
>类型别名 :=> 任意
>walker : any
>类型别名 :=> 任意
>options : any
>类型别名 :=> 任意
>goChildren : any
>类型别名 :=> 任意
>false : false
>类型别名 :=> 为假
                }
            }

            return cur;
>cur : any
>类型别名 :=> 任意
        }

        TypeScript.getAstWalkerFactory().walk(script, pre);
>TypeScript.getAstWalkerFactory().walk(script, pre) : any
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory().walk : any
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory() : any
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>getAstWalkerFactory : any
>类型别名 :=> 任意
>walk : any
>类型别名 :=> 任意
>script : any
>类型别名 :=> 任意
>pre : (cur: any, parent: any, walker: any) => any

        return bestOffset;
>bestOffset : number
>类型别名 :=> 数字
    }

    ///
    /// Simple function to Walk an AST using a simple callback function.
    ///
    export function walkAST(ast: TypeScript.AST, callback: (path: AstPath, walker: TypeScript.IAstWalker) => void ): void {
>walkAST : (ast: any, callback: (path: AstPath, walker: any) => void) => void
>ast : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>callback : (path: AstPath, walker: any) => void
>path : AstPath
>AstPath : AstPath
>walker : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>IAstWalker : No type information available!

        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {
>pre : (cur: any, parent: any, walker: any) => any
>function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {            var path: TypeScript.AstPath = walker.state;            path.push(cur);            callback(path, walker);            return cur;        } : (cur: any, parent: any, walker: any) => any
>cur : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>parent : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>walker : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>IAstWalker : No type information available!

            var path: TypeScript.AstPath = walker.state;
>path : AstPath
>TypeScript : any
>类型别名 :=> 任意
>AstPath : AstPath
>walker.state : any
>类型别名 :=> 任意
>walker : any
>类型别名 :=> 任意
>state : any
>类型别名 :=> 任意

            path.push(cur);
>path.push(cur) : void
>类型别名 :=> 无值
>path.push : (ast: any) => void
>path : AstPath
>push : (ast: any) => void
>cur : any
>类型别名 :=> 任意

            callback(path, walker);
>callback(path, walker) : void
>类型别名 :=> 无值
>callback : (path: AstPath, walker: any) => void
>path : AstPath
>walker : any
>类型别名 :=> 任意

            return cur;
>cur : any
>类型别名 :=> 任意
        }
        var post = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {
>post : (cur: any, parent: any, walker: any) => any
>function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {            var path: TypeScript.AstPath = walker.state;            path.pop();            return cur;        } : (cur: any, parent: any, walker: any) => any
>cur : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>parent : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>AST : No type information available!
>walker : any
>类型别名 :=> 任意
>TypeScript : any
>类型别名 :=> 任意
>IAstWalker : No type information available!

            var path: TypeScript.AstPath = walker.state;
>path : AstPath
>TypeScript : any
>类型别名 :=> 任意
>AstPath : AstPath
>walker.state : any
>类型别名 :=> 任意
>walker : any
>类型别名 :=> 任意
>state : any
>类型别名 :=> 任意

            path.pop();
>path.pop() : any
>类型别名 :=> 任意
>path.pop : () => any
>path : AstPath
>pop : () => any

            return cur;
>cur : any
>类型别名 :=> 任意
        }

        var path = new AstPath();
>path : AstPath
>new AstPath() : AstPath
>AstPath : typeof AstPath

        TypeScript.getAstWalkerFactory().walk(ast, pre, post, null, path);
>TypeScript.getAstWalkerFactory().walk(ast, pre, post, null, path) : any
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory().walk : any
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory() : any
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory : any
>类型别名 :=> 任意
>TypeScript : typeof TypeScript
>getAstWalkerFactory : any
>类型别名 :=> 任意
>walk : any
>类型别名 :=> 任意
>ast : any
>类型别名 :=> 任意
>pre : (cur: any, parent: any, walker: any) => any
>post : (cur: any, parent: any, walker: any) => any
>null : null
>类型别名 :=> 空值
>path : AstPath
    }
}

