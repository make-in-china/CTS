=== tests/cases/conformance/types/union/unionTypeEquivalence.ts ===
// A | B is equivalent to A if B is a subtype of A
class C { }
>C : C

class D extends C { foo() { } }
>D : D
>C : C
>foo : () => 无值

var x: C;
>x : C
>C : C

var x : C | D;
>x : C
>C : C
>D : D

// A | B is equivalent to B | A.
var y: string | number;
>y : 文字 | 数字

var y : number | string;
>y : 文字 | 数字

// AB | C is equivalent to A | BC, where AB is A | B and BC is B | C.
var z : string | number | boolean;
>z : 文字 | 数字 | 真假

var z : (string | number) | boolean;
>z : 文字 | 数字 | 真假

var z : string | (number | boolean);
>z : 文字 | 数字 | 真假

var AB : string | number;
>AB : 文字 | 数字

var BC : number | boolean;
>BC : 数字 | 真假

var z1: typeof AB | boolean;
>z1 : 文字 | 数字 | 真假
>AB : 文字 | 数字

var z1: string | typeof BC;
>z1 : 文字 | 数字 | 真假
>BC : 数字 | 真假

