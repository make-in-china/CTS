=== tests/cases/compiler/funcdecl.ts ===
function simpleFunc() {
>simpleFunc : () => 文字

    return "this is my simple func";
>"this is my simple func" : "this is my simple func"
}
var simpleFuncVar = simpleFunc;
>simpleFuncVar : () => 文字
>simpleFunc : () => 文字

function anotherFuncNoReturn() {
>anotherFuncNoReturn : () => 无值
}
var anotherFuncNoReturnVar = anotherFuncNoReturn;
>anotherFuncNoReturnVar : () => 无值
>anotherFuncNoReturn : () => 无值

function withReturn() : string{
>withReturn : () => 文字

    return "Hello";
>"Hello" : "Hello"
}
var withReturnVar = withReturn;
>withReturnVar : () => 文字
>withReturn : () => 文字

function withParams(a : string) : string{
>withParams : (a: 文字) => 文字
>a : 文字
>类型别名 :=> 文字

    return a;
>a : 文字
>类型别名 :=> 文字
}
var withparamsVar = withParams;
>withparamsVar : (a: 文字) => 文字
>withParams : (a: 文字) => 文字

function withMultiParams(a : number, b, c: Object) {
>withMultiParams : (a: 数字, b: 任意, c: Object) => 数字
>a : 数字
>类型别名 :=> 数字
>b : 任意
>类型别名 :=> 任意
>c : Object
>Object : Object

    return a;
>a : 数字
>类型别名 :=> 数字
}
var withMultiParamsVar = withMultiParams;
>withMultiParamsVar : (a: 数字, b: 任意, c: Object) => 数字
>withMultiParams : (a: 数字, b: 任意, c: Object) => 数字

function withOptionalParams(a?: string) {
>withOptionalParams : (a?: 文字) => 无值
>a : 文字
>类型别名 :=> 文字
}
var withOptionalParamsVar = withOptionalParams;
>withOptionalParamsVar : (a?: 文字) => 无值
>withOptionalParams : (a?: 文字) => 无值

function withInitializedParams(a: string, b0, b = 30, c = "string value") {
>withInitializedParams : (a: 文字, b0: 任意, b?: 数字, c?: 文字) => 无值
>a : 文字
>类型别名 :=> 文字
>b0 : 任意
>类型别名 :=> 任意
>b : 数字
>类型别名 :=> 数字
>30 : 30
>c : 文字
>类型别名 :=> 文字
>"string value" : "string value"
}
var withInitializedParamsVar = withInitializedParams;
>withInitializedParamsVar : (a: 文字, b0: 任意, b?: 数字, c?: 文字) => 无值
>withInitializedParams : (a: 文字, b0: 任意, b?: 数字, c?: 文字) => 无值

function withOptionalInitializedParams(a: string, c: string = "hello string") {
>withOptionalInitializedParams : (a: 文字, c?: 文字) => 无值
>a : 文字
>类型别名 :=> 文字
>c : 文字
>类型别名 :=> 文字
>"hello string" : "hello string"
}
var withOptionalInitializedParamsVar = withOptionalInitializedParams;
>withOptionalInitializedParamsVar : (a: 文字, c?: 文字) => 无值
>withOptionalInitializedParams : (a: 文字, c?: 文字) => 无值

function withRestParams(a: string, ... myRestParameter : number[]) {
>withRestParams : (a: 文字, ...myRestParameter: 数字[]) => 数字[]
>a : 文字
>类型别名 :=> 文字
>myRestParameter : 数字[]

    return myRestParameter;
>myRestParameter : 数字[]
}
var withRestParamsVar = withRestParams;
>withRestParamsVar : (a: 文字, ...myRestParameter: 数字[]) => 数字[]
>withRestParams : (a: 文字, ...myRestParameter: 数字[]) => 数字[]

function overload1(n: number) : string;
>overload1 : { (n: 数字): 文字; (s: 文字): 文字; }
>n : 数字
>类型别名 :=> 数字

function overload1(s: string) : string;
>overload1 : { (n: 数字): 文字; (s: 文字): 文字; }
>s : 文字
>类型别名 :=> 文字

function overload1(ns: any) {
>overload1 : { (n: 数字): 文字; (s: 文字): 文字; }
>ns : 任意
>类型别名 :=> 任意

    return ns.toString();
>ns.toString() : 任意
>类型别名 :=> 任意
>ns.toString : 任意
>类型别名 :=> 任意
>ns : 任意
>类型别名 :=> 任意
>toString : 任意
>类型别名 :=> 任意
}
var withOverloadSignature = overload1;
>withOverloadSignature : { (n: 数字): 文字; (s: 文字): 文字; }
>overload1 : { (n: 数字): 文字; (s: 文字): 文字; }

function f(n: () => void) { }
>f : (n: () => 无值) => 无值
>n : () => 无值

module m2 {
>m2 : 类为 m2

    export function foo(n: () => void ) {
>foo : (n: () => 无值) => 无值
>n : () => 无值
    }

}

m2.foo(() =>  {
>m2.foo(() =>  {    var b = 30;    return b;}) : 无值
>类型别名 :=> 无值
>m2.foo : (n: () => 无值) => 无值
>m2 : 类为 m2
>foo : (n: () => 无值) => 无值
>() =>  {    var b = 30;    return b;} : () => 数字

    var b = 30;
>b : 数字
>类型别名 :=> 数字
>30 : 30

    return b;
>b : 数字
>类型别名 :=> 数字

});


declare function fooAmbient(n: number): string;
>fooAmbient : (n: 数字) => 文字
>n : 数字
>类型别名 :=> 数字

declare function overloadAmbient(n: number): string;
>overloadAmbient : { (n: 数字): 文字; (s: 文字): 文字; }
>n : 数字
>类型别名 :=> 数字

declare function overloadAmbient(s: string): string;
>overloadAmbient : { (n: 数字): 文字; (s: 文字): 文字; }
>s : 文字
>类型别名 :=> 文字

var f2 = () => {
>f2 : () => 文字
>() => {    return "string";} : () => 文字

    return "string";
>"string" : "string"
}
