=== tests/cases/conformance/types/primitives/void/invalidVoidValues.ts ===
var x: void;
>x : 无值
>类型别名 :=> 无值

x = 1;
>x = 1 : 1
>x : 无值
>类型别名 :=> 无值
>1 : 1

x = '';
>x = '' : ""
>x : 无值
>类型别名 :=> 无值
>'' : ""

x = true;
>x = true : 为真
>类型别名 :=> 为真
>x : 无值
>类型别名 :=> 无值
>true : 为真
>类型别名 :=> 为真

enum E { A }
>E : E
>A : E

x = E;
>x = E : 类为 E
>x : 无值
>类型别名 :=> 无值
>E : 类为 E

x = E.A;
>x = E.A : E
>x : 无值
>类型别名 :=> 无值
>E.A : E
>E : 类为 E
>A : E

class C { foo: string }
>C : C
>foo : 文字
>类型别名 :=> 文字

var a: C;
>a : C
>C : C

x = a;
>x = a : C
>x : 无值
>类型别名 :=> 无值
>a : C

interface I { foo: string }
>I : I
>foo : 文字
>类型别名 :=> 文字

var b: I;
>b : I
>I : I

x = b;
>x = b : I
>x : 无值
>类型别名 :=> 无值
>b : I

x = { f() {} }
>x = { f() {} } : { f(): 无值; }
>x : 无值
>类型别名 :=> 无值
>{ f() {} } : { f(): 无值; }
>f : () => 无值

module M { export var x = 1; }
>M : 类为 M
>x : 数字
>类型别名 :=> 数字
>1 : 1

x = M;
>x = M : 类为 M
>x : 无值
>类型别名 :=> 无值
>M : 类为 M

function f<T>(a: T) {
>f : <T>(a: T) => 无值
>T : T
>a : T
>T : T

    x = a;
>x = a : T
>x : 无值
>类型别名 :=> 无值
>a : T
}
x = f;
>x = f : <T>(a: T) => 无值
>x : 无值
>类型别名 :=> 无值
>f : <T>(a: T) => 无值

