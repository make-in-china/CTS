=== tests/cases/compiler/abstractPropertyInConstructor.ts ===
abstract class AbstractClass {
>AbstractClass : AbstractClass

    constructor(str: string) {
>str : string
>类型别名 :=> 文字

        this.method(parseInt(str));
>this.method(parseInt(str)) : void
>类型别名 :=> 无值
>this.method : (num: number) => void
>this : this
>method : (num: number) => void
>parseInt(str) : number
>类型别名 :=> 数字
>parseInt : (s: string, radix?: number) => number
>str : string
>类型别名 :=> 文字

        let val = this.prop.toLowerCase();
>val : string
>类型别名 :=> 文字
>this.prop.toLowerCase() : string
>类型别名 :=> 文字
>this.prop.toLowerCase : () => string
>this.prop : string
>类型别名 :=> 文字
>this : this
>prop : string
>类型别名 :=> 文字
>toLowerCase : () => string

        if (!str) {
>!str : boolean
>类型别名 :=> 真假
>str : string
>类型别名 :=> 文字

            this.prop = "Hello World";
>this.prop = "Hello World" : "Hello World"
>this.prop : string
>类型别名 :=> 文字
>this : this
>prop : string
>类型别名 :=> 文字
>"Hello World" : "Hello World"
        }
        this.cb(str);
>this.cb(str) : void
>类型别名 :=> 无值
>this.cb : (s: string) => void
>this : this
>cb : (s: string) => void
>str : string
>类型别名 :=> 文字

        const innerFunction = () => {
>innerFunction : () => string
>() => {            return this.prop;        } : () => string

            return this.prop;
>this.prop : string
>类型别名 :=> 文字
>this : this
>prop : string
>类型别名 :=> 文字
        }
    }

    abstract prop: string;
>prop : string
>类型别名 :=> 文字

    abstract cb: (s: string) => void;
>cb : (s: string) => void
>s : string
>类型别名 :=> 文字

    abstract method(num: number): void;
>method : (num: number) => void
>num : number
>类型别名 :=> 数字

    method2() {
>method2 : () => void

        this.prop = this.prop + "!";
>this.prop = this.prop + "!" : string
>类型别名 :=> 文字
>this.prop : string
>类型别名 :=> 文字
>this : this
>prop : string
>类型别名 :=> 文字
>this.prop + "!" : string
>类型别名 :=> 文字
>this.prop : string
>类型别名 :=> 文字
>this : this
>prop : string
>类型别名 :=> 文字
>"!" : "!"
    }
}

