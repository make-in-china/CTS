=== tests/cases/compiler/abstractPropertyInConstructor.ts ===
abstract class AbstractClass {
>AbstractClass : AbstractClass

    constructor(str: string) {
>str : 文字
>类型别名 :=> 文字

        this.method(parseInt(str));
>this.method(parseInt(str)) : 无值
>类型别名 :=> 无值
>this.method : (num: 数字) => 无值
>this : 本体
>method : (num: 数字) => 无值
>parseInt(str) : 数字
>类型别名 :=> 数字
>parseInt : (s: 文字, radix?: 数字) => 数字
>str : 文字
>类型别名 :=> 文字

        let val = this.prop.toLowerCase();
>val : 文字
>类型别名 :=> 文字
>this.prop.toLowerCase() : 文字
>类型别名 :=> 文字
>this.prop.toLowerCase : () => 文字
>this.prop : 文字
>类型别名 :=> 文字
>this : 本体
>prop : 文字
>类型别名 :=> 文字
>toLowerCase : () => 文字

        if (!str) {
>!str : 真假
>类型别名 :=> 真假
>str : 文字
>类型别名 :=> 文字

            this.prop = "Hello World";
>this.prop = "Hello World" : "Hello World"
>this.prop : 文字
>类型别名 :=> 文字
>this : 本体
>prop : 文字
>类型别名 :=> 文字
>"Hello World" : "Hello World"
        }
        this.cb(str);
>this.cb(str) : 无值
>类型别名 :=> 无值
>this.cb : (s: 文字) => 无值
>this : 本体
>cb : (s: 文字) => 无值
>str : 文字
>类型别名 :=> 文字

        const innerFunction = () => {
>innerFunction : () => 文字
>() => {            return this.prop;        } : () => 文字

            return this.prop;
>this.prop : 文字
>类型别名 :=> 文字
>this : 本体
>prop : 文字
>类型别名 :=> 文字
        }
    }

    abstract prop: string;
>prop : 文字
>类型别名 :=> 文字

    abstract cb: (s: string) => void;
>cb : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字

    abstract method(num: number): void;
>method : (num: 数字) => 无值
>num : 数字
>类型别名 :=> 数字

    method2() {
>method2 : () => 无值

        this.prop = this.prop + "!";
>this.prop = this.prop + "!" : 文字
>类型别名 :=> 文字
>this.prop : 文字
>类型别名 :=> 文字
>this : 本体
>prop : 文字
>类型别名 :=> 文字
>this.prop + "!" : 文字
>类型别名 :=> 文字
>this.prop : 文字
>类型别名 :=> 文字
>this : 本体
>prop : 文字
>类型别名 :=> 文字
>"!" : "!"
    }
}

