=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/typeParameterAssignability3.ts ===
// type parameters are not assignable to one another unless directly or indirectly constrained to one another

class Foo { foo: string; }
>Foo : Foo
>foo : 文字
>类型别名 :=> 文字

function foo<T extends Foo, U extends Foo>(t: T, u: U) {
>foo : <T 扩展 Foo, U 扩展 Foo>(t: T, u: U) => 无值
>T : T
>Foo : Foo
>U : U
>Foo : Foo
>t : T
>T : T
>u : U
>U : U

    var a: T;
>a : T
>T : T

    var b: U;
>b : U
>U : U

    t = a; // ok
>t = a : T
>t : T
>a : T

    a = t; // ok
>a = t : T
>a : T
>t : T

    b = u; // ok
>b = u : U
>b : U
>u : U

    u = b; // ok
>u = b : U
>u : U
>b : U

    t = u; // error
>t = u : U
>t : T
>u : U

    u = t; // error
>u = t : T
>u : U
>t : T
}

class C<T extends Foo, U extends Foo> {
>C : C<T, U>
>T : T
>Foo : Foo
>U : U
>Foo : Foo

    t: T;
>t : T
>T : T

    u: U;
>u : U
>U : U

    r = () => {
>r : () => 无值
>() => {        this.t = this.u; // error        this.u = this.t; // error    } : () => 无值

        this.t = this.u; // error
>this.t = this.u : U
>this.t : T
>this : 本体
>t : T
>this.u : U
>this : 本体
>u : U

        this.u = this.t; // error
>this.u = this.t : T
>this.u : U
>this : 本体
>u : U
>this.t : T
>this : 本体
>t : T
    }
}
