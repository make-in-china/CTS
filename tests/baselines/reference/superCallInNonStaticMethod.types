=== tests/cases/compiler/superCallInNonStaticMethod.ts ===
class Doing {
>Doing : Doing

    public instanceMethod() {
>instanceMethod : () => 无值
    }
}

class Other extends Doing {
>Other : Other
>Doing : Doing

    // in instance method
    public instanceMethod() {
>instanceMethod : () => 无值

        super.instanceMethod();
>super.instanceMethod() : 无值
>类型别名 :=> 无值
>super.instanceMethod : () => 无值
>super : Doing
>instanceMethod : () => 无值
    }

    // in a lambda inside a instance method
    public lambdaInsideAnInstanceMethod() {
>lambdaInsideAnInstanceMethod : () => 无值

        () => {
>() => {            super.instanceMethod();        } : () => 无值

            super.instanceMethod();
>super.instanceMethod() : 无值
>类型别名 :=> 无值
>super.instanceMethod : () => 无值
>super : Doing
>instanceMethod : () => 无值
        }
    }

    // in an object literal inside a instance method
    public objectLiteralInsideAnInstanceMethod() {
>objectLiteralInsideAnInstanceMethod : () => { a: () => 无值; b: 无值; }

        return {
>{            a: () => {                super.instanceMethod();            },            b: super.instanceMethod()        } : { a: () => 无值; b: 无值; }

            a: () => {
>a : () => 无值
>() => {                super.instanceMethod();            } : () => 无值

                super.instanceMethod();
>super.instanceMethod() : 无值
>类型别名 :=> 无值
>super.instanceMethod : () => 无值
>super : Doing
>instanceMethod : () => 无值

            },
            b: super.instanceMethod()
>b : 无值
>类型别名 :=> 无值
>super.instanceMethod() : 无值
>类型别名 :=> 无值
>super.instanceMethod : () => 无值
>super : Doing
>instanceMethod : () => 无值

        };
    }

    // in a getter
    public get accessor() {
>accessor : 数字
>类型别名 :=> 数字

        super.instanceMethod();
>super.instanceMethod() : 无值
>类型别名 :=> 无值
>super.instanceMethod : () => 无值
>super : Doing
>instanceMethod : () => 无值

        return 0;
>0 : 0
    }

    // in a setter
    public set accessor(value: number) {
>accessor : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字

        super.instanceMethod();
>super.instanceMethod() : 无值
>类型别名 :=> 无值
>super.instanceMethod : () => 无值
>super : Doing
>instanceMethod : () => 无值
    }
    
    constructor() {
        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 Doing

        super.instanceMethod();
>super.instanceMethod() : 无值
>类型别名 :=> 无值
>super.instanceMethod : () => 无值
>super : Doing
>instanceMethod : () => 无值
    }
    
    public propertyInitializer = super.instanceMethod();
>propertyInitializer : 无值
>类型别名 :=> 无值
>super.instanceMethod() : 无值
>类型别名 :=> 无值
>super.instanceMethod : () => 无值
>super : Doing
>instanceMethod : () => 无值
    
    public functionProperty = () => {super.instanceMethod(); };
>functionProperty : () => 无值
>() => {super.instanceMethod(); } : () => 无值
>super.instanceMethod() : 无值
>类型别名 :=> 无值
>super.instanceMethod : () => 无值
>super : Doing
>instanceMethod : () => 无值
}

