=== tests/cases/compiler/parseErrorIncorrectReturnToken.ts ===
type F1 = {
>F1 : F1

    (n: number) => string; // should be : not =>
>n : 数字
>类型别名 :=> 数字
}
type F2 = (n: number): string; // should be => not :
>F2 : F2
>n : 数字
>类型别名 :=> 数字
> : No type information available!
>string : 任意
>类型别名 :=> 任意

// doesn't work in non-type contexts, where the return type is optional
let f = (n: number) => string => n.toString();
>f : (n: 数字) => (string: 任意) => 文字
>(n: number) => string => n.toString() : (n: 数字) => (string: 任意) => 文字
>n : 数字
>类型别名 :=> 数字
>string => n.toString() : (string: 任意) => 文字
>string : 任意
>类型别名 :=> 任意
>n.toString() : 文字
>类型别名 :=> 文字
>n.toString : (radix?: 数字) => 文字
>n : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

let o = {
>o : { m(n: 数字): 任意; }
>{    m(n: number) : { m(n: 数字): 任意; }

    m(n: number) => string {
>m : (n: 数字) => 任意
>n : 数字
>类型别名 :=> 数字
>string : 任意
>类型别名 :=> 任意

        return n.toString();
>n.toString() : 任意
>类型别名 :=> 任意
>n.toString : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意
>toString : 任意
>类型别名 :=> 任意
    }
};

