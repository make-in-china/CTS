=== tests/cases/compiler/extendArray.ts ===
var a = [1,2];
>a : number[]
>[1,2] : number[]
>1 : 1
>2 : 2

a.forEach(function (v,i,a) {});
>a.forEach(function (v,i,a) {}) : void
>类型别名 :=> 无值
>a.forEach : (callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void
>a : number[]
>forEach : (callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void
>function (v,i,a) {} : (v: number, i: number, a: number[]) => void
>v : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>a : number[]


declare module _Core {
>_Core : any
>类型别名 :=> 任意

  interface Array {
>Array : Array

    collect(fn:(e:_element) => _element[]) : any[];
>collect : (fn: (e: any) => any[]) => any[]
>fn : (e: any) => any[]
>e : any
>类型别名 :=> 任意
>_element : No type information available!
>_element : No type information available!
  }
}


var arr = (<any>Array).prototype;
>arr : any
>类型别名 :=> 任意
>(<any>Array).prototype : any
>类型别名 :=> 任意
>(<any>Array) : any
>类型别名 :=> 任意
><any>Array : any
>类型别名 :=> 任意
>Array : ArrayConstructor
>prototype : any
>类型别名 :=> 任意

arr.collect = function (fn) {
>arr.collect = function (fn) {    var res = [];    for (var i = 0; i < this.length; ++i) {        var tmp = fn(this[i]);        for (var j = 0; j < tmp.length; ++j) {            res.push(tmp[j]);        }    }    return res;} : (fn: any) => any[]
>arr.collect : any
>类型别名 :=> 任意
>arr : any
>类型别名 :=> 任意
>collect : any
>类型别名 :=> 任意
>function (fn) {    var res = [];    for (var i = 0; i < this.length; ++i) {        var tmp = fn(this[i]);        for (var j = 0; j < tmp.length; ++j) {            res.push(tmp[j]);        }    }    return res;} : (fn: any) => any[]
>fn : any
>类型别名 :=> 任意

    var res = [];
>res : any[]
>[] : undefined[]

    for (var i = 0; i < this.length; ++i) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < this.length : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>this.length : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>length : any
>类型别名 :=> 任意
>++i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

        var tmp = fn(this[i]);
>tmp : any
>类型别名 :=> 任意
>fn(this[i]) : any
>类型别名 :=> 任意
>fn : any
>类型别名 :=> 任意
>this[i] : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>i : number
>类型别名 :=> 数字

        for (var j = 0; j < tmp.length; ++j) {
>j : number
>类型别名 :=> 数字
>0 : 0
>j < tmp.length : boolean
>类型别名 :=> 真假
>j : number
>类型别名 :=> 数字
>tmp.length : any
>类型别名 :=> 任意
>tmp : any
>类型别名 :=> 任意
>length : any
>类型别名 :=> 任意
>++j : number
>类型别名 :=> 数字
>j : number
>类型别名 :=> 数字

            res.push(tmp[j]);
>res.push(tmp[j]) : number
>类型别名 :=> 数字
>res.push : (...items: any[]) => number
>res : any[]
>push : (...items: any[]) => number
>tmp[j] : any
>类型别名 :=> 任意
>tmp : any
>类型别名 :=> 任意
>j : number
>类型别名 :=> 数字
        }
    }
    return res;
>res : any[]

};

