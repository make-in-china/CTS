=== tests/cases/compiler/extendArray.ts ===
var a = [1,2];
>a : 数字[]
>[1,2] : 数字[]
>1 : 1
>2 : 2

a.forEach(function (v,i,a) {});
>a.forEach(function (v,i,a) {}) : 无值
>类型别名 :=> 无值
>a.forEach : (callbackfn: (value: 数字, index: 数字, array: 数字[]) => 无值, thisArg?: 任意) => 无值
>a : 数字[]
>forEach : (callbackfn: (value: 数字, index: 数字, array: 数字[]) => 无值, thisArg?: 任意) => 无值
>function (v,i,a) {} : (v: 数字, i: 数字, a: 数字[]) => 无值
>v : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
>a : 数字[]


declare module _Core {
>_Core : 任意
>类型别名 :=> 任意

  interface Array {
>Array : Array

    collect(fn:(e:_element) => _element[]) : any[];
>collect : (fn: (e: 任意) => 任意[]) => 任意[]
>fn : (e: 任意) => 任意[]
>e : 任意
>类型别名 :=> 任意
>_element : No type information available!
>_element : No type information available!
  }
}


var arr = (<any>Array).prototype;
>arr : 任意
>类型别名 :=> 任意
>(<any>Array).prototype : 任意
>类型别名 :=> 任意
>(<any>Array) : 任意
>类型别名 :=> 任意
><any>Array : 任意
>类型别名 :=> 任意
>Array : ArrayConstructor
>prototype : 任意
>类型别名 :=> 任意

arr.collect = function (fn) {
>arr.collect = function (fn) {    var res = [];    for (var i = 0; i < this.length; ++i) {        var tmp = fn(this[i]);        for (var j = 0; j < tmp.length; ++j) {            res.push(tmp[j]);        }    }    return res;} : (fn: 任意) => 任意[]
>arr.collect : 任意
>类型别名 :=> 任意
>arr : 任意
>类型别名 :=> 任意
>collect : 任意
>类型别名 :=> 任意
>function (fn) {    var res = [];    for (var i = 0; i < this.length; ++i) {        var tmp = fn(this[i]);        for (var j = 0; j < tmp.length; ++j) {            res.push(tmp[j]);        }    }    return res;} : (fn: 任意) => 任意[]
>fn : 任意
>类型别名 :=> 任意

    var res = [];
>res : 任意[]
>[] : 未定[]

    for (var i = 0; i < this.length; ++i) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < this.length : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>this.length : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>++i : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

        var tmp = fn(this[i]);
>tmp : 任意
>类型别名 :=> 任意
>fn(this[i]) : 任意
>类型别名 :=> 任意
>fn : 任意
>类型别名 :=> 任意
>this[i] : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字

        for (var j = 0; j < tmp.length; ++j) {
>j : 数字
>类型别名 :=> 数字
>0 : 0
>j < tmp.length : 真假
>类型别名 :=> 真假
>j : 数字
>类型别名 :=> 数字
>tmp.length : 任意
>类型别名 :=> 任意
>tmp : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>++j : 数字
>类型别名 :=> 数字
>j : 数字
>类型别名 :=> 数字

            res.push(tmp[j]);
>res.push(tmp[j]) : 数字
>类型别名 :=> 数字
>res.push : (...items: 任意[]) => 数字
>res : 任意[]
>push : (...items: 任意[]) => 数字
>tmp[j] : 任意
>类型别名 :=> 任意
>tmp : 任意
>类型别名 :=> 任意
>j : 数字
>类型别名 :=> 数字
        }
    }
    return res;
>res : 任意[]

};

