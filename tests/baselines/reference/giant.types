=== tests/cases/compiler/giant.ts ===
/*
    Prefixes
    p -> public
    r -> private
    i -> import
    e -> export
    a -> ambient
    t -> static
    s -> set
    g -> get

    MAX DEPTH 3 LEVELS
*/
var V;
>V : any
>类型别名 :=> 任意

function F() { };
>F : () => void

class C {
>C : C

    constructor () { }
    public pV;
>pV : any
>类型别名 :=> 任意

    private rV;
>rV : any
>类型别名 :=> 任意

    public pF() { }
>pF : () => void

    private rF() { }
>rF : () => void

    public pgF() { }
>pgF : () => void

    public get pgF()
>pgF : any
>类型别名 :=> 任意

    public psF(param:any) { }
>psF : (param: any) => void
>param : any
>类型别名 :=> 任意

    public set psF(param:any)
>psF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

    private rgF() { }
>rgF : () => void

    private get rgF()
>rgF : any
>类型别名 :=> 任意

    private rsF(param:any) { }
>rsF : (param: any) => void
>param : any
>类型别名 :=> 任意

    private set rsF(param:any)
>rsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

    static tV;
>tV : any
>类型别名 :=> 任意

    static tF() { }
>tF : () => void

    static tsF(param:any) { }
>tsF : (param: any) => void
>param : any
>类型别名 :=> 任意

    static set tsF(param:any)
>tsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

    static tgF() { }
>tgF : () => void

    static get tgF()
>tgF : any
>类型别名 :=> 任意
}
interface I {
>I : I

    //Call Signature
    ();
    (): number;
    (p);
>p : any
>类型别名 :=> 任意

    (p1: string);
>p1 : string
>类型别名 :=> 文字

    (p2?: string);
>p2 : string
>类型别名 :=> 文字

    (...p3: any[]);
>p3 : any[]

    (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

    (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

    //(p8?: string, ...p9: any[]);
    //(p10:string, p8?: string, ...p9: any[]);
    
    //Construct Signature
    new ();
    new (): number;
    new (p: string);
>p : string
>类型别名 :=> 文字

    new (p2?: string);
>p2 : string
>类型别名 :=> 文字

    new (...p3: any[]);
>p3 : any[]

    new (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

    new (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

    //Index Signature
    [p];
>p : any
>类型别名 :=> 任意

    [p1: string];
>p1 : string
>类型别名 :=> 文字

    [p2: string, p3: number];
>p2 : string
>类型别名 :=> 文字
>p3 : number
>类型别名 :=> 数字

    //Property Signature
    p;
>p : any
>类型别名 :=> 任意

    p1?;
>p1 : any
>类型别名 :=> 任意

    p2?: string;
>p2 : string
>类型别名 :=> 文字
    
    //Function Signature
    p3();
>p3 : () => any

    p4? ();
>p4 : () => any

    p5? (): void;
>p5 : () => void

    p6(pa1): void;
>p6 : (pa1: any) => void
>pa1 : any
>类型别名 :=> 任意

    p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意

    p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意
}
module M {
>M : typeof M

    var V;
>V : any
>类型别名 :=> 任意

    function F() { };
>F : () => void

    class C {
>C : C

        constructor () { }
        public pV;
>pV : any
>类型别名 :=> 任意

        private rV;
>rV : any
>类型别名 :=> 任意

        public pF() { }
>pF : () => void

        private rF() { }
>rF : () => void

        public pgF() { }
>pgF : () => void

        public get pgF()
>pgF : any
>类型别名 :=> 任意

        public psF(param:any) { }
>psF : (param: any) => void
>param : any
>类型别名 :=> 任意

        public set psF(param:any)
>psF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        private rgF() { }
>rgF : () => void

        private get rgF()
>rgF : any
>类型别名 :=> 任意

        private rsF(param:any) { }
>rsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        private set rsF(param:any)
>rsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tV;
>tV : any
>类型别名 :=> 任意

        static tF() { }
>tF : () => void

        static tsF(param:any) { }
>tsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        static set tsF(param:any)
>tsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tgF() { }
>tgF : () => void

        static get tgF()
>tgF : any
>类型别名 :=> 任意
    }
    interface I {
>I : I

        //Call Signature
        ();
        (): number;
        (p);
>p : any
>类型别名 :=> 任意

        (p1: string);
>p1 : string
>类型别名 :=> 文字

        (p2?: string);
>p2 : string
>类型别名 :=> 文字

        (...p3: any[]);
>p3 : any[]

        (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>类型别名 :=> 文字

        new (p2?: string);
>p2 : string
>类型别名 :=> 文字

        new (...p3: any[]);
>p3 : any[]

        new (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        new (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //Index Signature
        [p];
>p : any
>类型别名 :=> 任意

        [p1: string];
>p1 : string
>类型别名 :=> 文字

        [p2: string, p3: number];
>p2 : string
>类型别名 :=> 文字
>p3 : number
>类型别名 :=> 数字

        //Property Signature
        p;
>p : any
>类型别名 :=> 任意

        p1?;
>p1 : any
>类型别名 :=> 任意

        p2?: string;
>p2 : string
>类型别名 :=> 文字
    
        //Function Signature
        p3();
>p3 : () => any

        p4? ();
>p4 : () => any

        p5? (): void;
>p5 : () => void

        p6(pa1): void;
>p6 : (pa1: any) => void
>pa1 : any
>类型别名 :=> 任意

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意
    }
    module M {
>M : typeof M

        var V;
>V : any
>类型别名 :=> 任意

        function F() { };
>F : () => void

        class C { };
>C : C

        interface I { };
>I : I

        module M { };
>M : any
>类型别名 :=> 任意

        export var eV;
>eV : any
>类型别名 :=> 任意

        export function eF() { };
>eF : () => void

        export class eC { };
>eC : eC

        export interface eI { };
>eI : eI

        export module eM { };
>eM : any
>类型别名 :=> 任意

        export declare var eaV;
>eaV : any
>类型别名 :=> 任意

        export declare function eaF() { };
>eaF : () => void

        export declare class eaC { };
>eaC : eaC

        export declare module eaM { };
>eaM : any
>类型别名 :=> 任意
    }
    export var eV;
>eV : any
>类型别名 :=> 任意

    export function eF() { };
>eF : () => void

    export class eC {
>eC : eC

        constructor () { }
        public pV;
>pV : any
>类型别名 :=> 任意

        private rV;
>rV : any
>类型别名 :=> 任意

        public pF() { }
>pF : () => void

        private rF() { }
>rF : () => void

        public pgF() { }
>pgF : () => void

        public get pgF()
>pgF : any
>类型别名 :=> 任意

        public psF(param:any) { }
>psF : (param: any) => void
>param : any
>类型别名 :=> 任意

        public set psF(param:any)
>psF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        private rgF() { }
>rgF : () => void

        private get rgF()
>rgF : any
>类型别名 :=> 任意

        private rsF(param:any) { }
>rsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        private set rsF(param:any)
>rsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tV;
>tV : any
>类型别名 :=> 任意

        static tF() { }
>tF : () => void

        static tsF(param:any) { }
>tsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        static set tsF(param:any)
>tsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tgF() { }
>tgF : () => void

        static get tgF()
>tgF : any
>类型别名 :=> 任意
    }
    export interface eI {
>eI : eI

        //Call Signature
        ();
        (): number;
        (p);
>p : any
>类型别名 :=> 任意

        (p1: string);
>p1 : string
>类型别名 :=> 文字

        (p2?: string);
>p2 : string
>类型别名 :=> 文字

        (...p3: any[]);
>p3 : any[]

        (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>类型别名 :=> 文字

        new (p2?: string);
>p2 : string
>类型别名 :=> 文字

        new (...p3: any[]);
>p3 : any[]

        new (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        new (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //Index Signature
        [p];
>p : any
>类型别名 :=> 任意

        [p1: string];
>p1 : string
>类型别名 :=> 文字

        [p2: string, p3: number];
>p2 : string
>类型别名 :=> 文字
>p3 : number
>类型别名 :=> 数字

        //Property Signature
        p;
>p : any
>类型别名 :=> 任意

        p1?;
>p1 : any
>类型别名 :=> 任意

        p2?: string;
>p2 : string
>类型别名 :=> 文字
    
        //Function Signature
        p3();
>p3 : () => any

        p4? ();
>p4 : () => any

        p5? (): void;
>p5 : () => void

        p6(pa1): void;
>p6 : (pa1: any) => void
>pa1 : any
>类型别名 :=> 任意

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意
    }
    export module eM {
>eM : typeof eM

        var V;
>V : any
>类型别名 :=> 任意

        function F() { };
>F : () => void

        class C { };
>C : C

        interface I { };
>I : I

        module M { };
>M : any
>类型别名 :=> 任意

        export var eV;
>eV : any
>类型别名 :=> 任意

        export function eF() { };
>eF : () => void

        export class eC { };
>eC : eC

        export interface eI { };
>eI : eI

        export module eM { };
>eM : any
>类型别名 :=> 任意

        export declare var eaV;
>eaV : any
>类型别名 :=> 任意

        export declare function eaF() { };
>eaF : () => void

        export declare class eaC { };
>eaC : eaC

        export declare module eaM { };
>eaM : any
>类型别名 :=> 任意
    }
    export declare var eaV;
>eaV : any
>类型别名 :=> 任意

    export declare function eaF() { };
>eaF : () => void

    export declare class eaC {
>eaC : eaC

        constructor () { }
        public pV;
>pV : any
>类型别名 :=> 任意

        private rV;
>rV : any
>类型别名 :=> 任意

        public pF() { }
>pF : () => void

        private rF() { }
>rF : () => void

        public pgF() { }
>pgF : () => void

        public get pgF()
>pgF : any
>类型别名 :=> 任意

        public psF(param:any) { }
>psF : (param: any) => void
>param : any
>类型别名 :=> 任意

        public set psF(param:any)
>psF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        private rgF() { }
>rgF : () => void

        private get rgF()
>rgF : any
>类型别名 :=> 任意

        private rsF(param:any) { }
>rsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        private set rsF(param:any)
>rsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tV;
>tV : any
>类型别名 :=> 任意

        static tF() { }
>tF : () => void

        static tsF(param:any) { }
>tsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        static set tsF(param:any)
>tsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tgF() { }
>tgF : () => void

        static get tgF()
>tgF : any
>类型别名 :=> 任意
    }
    export declare module eaM {
>eaM : typeof eaM

        var V;
>V : any
>类型别名 :=> 任意

        function F() { };
>F : () => void

        class C { }
>C : C

        interface I { }
>I : I

        module M { }
>M : any
>类型别名 :=> 任意

        export var eV;
>eV : any
>类型别名 :=> 任意

        export function eF() { };
>eF : () => void

        export class eC { }
>eC : eC

        export interface eI { }
>eI : eI

        export module eM { }
>eM : any
>类型别名 :=> 任意
    }
}
export var eV;
>eV : any
>类型别名 :=> 任意

export function eF() { };
>eF : () => void

export class eC {
>eC : eC

    constructor () { }
    public pV;
>pV : any
>类型别名 :=> 任意

    private rV;
>rV : any
>类型别名 :=> 任意

    public pF() { }
>pF : () => void

    private rF() { }
>rF : () => void

    public pgF() { }
>pgF : () => void

    public get pgF()
>pgF : any
>类型别名 :=> 任意

    public psF(param:any) { }
>psF : (param: any) => void
>param : any
>类型别名 :=> 任意

    public set psF(param:any)
>psF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

    private rgF() { }
>rgF : () => void

    private get rgF()
>rgF : any
>类型别名 :=> 任意

    private rsF(param:any) { }
>rsF : (param: any) => void
>param : any
>类型别名 :=> 任意

    private set rsF(param:any)
>rsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

    static tV;
>tV : any
>类型别名 :=> 任意

    static tF() { }
>tF : () => void

    static tsF(param:any) { }
>tsF : (param: any) => void
>param : any
>类型别名 :=> 任意

    static set tsF(param:any)
>tsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

    static tgF() { }
>tgF : () => void

    static get tgF()
>tgF : any
>类型别名 :=> 任意
}
export interface eI {
>eI : eI

    //Call Signature
    ();
    (): number;
    (p);
>p : any
>类型别名 :=> 任意

    (p1: string);
>p1 : string
>类型别名 :=> 文字

    (p2?: string);
>p2 : string
>类型别名 :=> 文字

    (...p3: any[]);
>p3 : any[]

    (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

    (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

    //(p8?: string, ...p9: any[]);
    //(p10:string, p8?: string, ...p9: any[]);
    
    //Construct Signature
    new ();
    new (): number;
    new (p: string);
>p : string
>类型别名 :=> 文字

    new (p2?: string);
>p2 : string
>类型别名 :=> 文字

    new (...p3: any[]);
>p3 : any[]

    new (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

    new (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

    //Index Signature
    [p];
>p : any
>类型别名 :=> 任意

    [p1: string];
>p1 : string
>类型别名 :=> 文字

    [p2: string, p3: number];
>p2 : string
>类型别名 :=> 文字
>p3 : number
>类型别名 :=> 数字

    //Property Signature
    p;
>p : any
>类型别名 :=> 任意

    p1?;
>p1 : any
>类型别名 :=> 任意

    p2?: string;
>p2 : string
>类型别名 :=> 文字
    
    //Function Signature
    p3();
>p3 : () => any

    p4? ();
>p4 : () => any

    p5? (): void;
>p5 : () => void

    p6(pa1): void;
>p6 : (pa1: any) => void
>pa1 : any
>类型别名 :=> 任意

    p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意

    p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意
}
export module eM {
>eM : typeof eM

    var V;
>V : any
>类型别名 :=> 任意

    function F() { };
>F : () => void

    class C {
>C : C

        constructor () { }
        public pV;
>pV : any
>类型别名 :=> 任意

        private rV;
>rV : any
>类型别名 :=> 任意

        public pF() { }
>pF : () => void

        private rF() { }
>rF : () => void

        public pgF() { }
>pgF : () => void

        public get pgF()
>pgF : any
>类型别名 :=> 任意

        public psF(param:any) { }
>psF : (param: any) => void
>param : any
>类型别名 :=> 任意

        public set psF(param:any)
>psF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        private rgF() { }
>rgF : () => void

        private get rgF()
>rgF : any
>类型别名 :=> 任意

        private rsF(param:any) { }
>rsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        private set rsF(param:any)
>rsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tV;
>tV : any
>类型别名 :=> 任意

        static tF() { }
>tF : () => void

        static tsF(param:any) { }
>tsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        static set tsF(param:any)
>tsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tgF() { }
>tgF : () => void

        static get tgF()
>tgF : any
>类型别名 :=> 任意
    }
    interface I {
>I : I

        //Call Signature
        ();
        (): number;
        (p);
>p : any
>类型别名 :=> 任意

        (p1: string);
>p1 : string
>类型别名 :=> 文字

        (p2?: string);
>p2 : string
>类型别名 :=> 文字

        (...p3: any[]);
>p3 : any[]

        (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>类型别名 :=> 文字

        new (p2?: string);
>p2 : string
>类型别名 :=> 文字

        new (...p3: any[]);
>p3 : any[]

        new (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        new (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //Index Signature
        [p];
>p : any
>类型别名 :=> 任意

        [p1: string];
>p1 : string
>类型别名 :=> 文字

        [p2: string, p3: number];
>p2 : string
>类型别名 :=> 文字
>p3 : number
>类型别名 :=> 数字

        //Property Signature
        p;
>p : any
>类型别名 :=> 任意

        p1?;
>p1 : any
>类型别名 :=> 任意

        p2?: string;
>p2 : string
>类型别名 :=> 文字
    
        //Function Signature
        p3();
>p3 : () => any

        p4? ();
>p4 : () => any

        p5? (): void;
>p5 : () => void

        p6(pa1): void;
>p6 : (pa1: any) => void
>pa1 : any
>类型别名 :=> 任意

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意
    }
    module M {
>M : typeof M

        var V;
>V : any
>类型别名 :=> 任意

        function F() { };
>F : () => void

        class C { };
>C : C

        interface I { };
>I : I

        module M { };
>M : any
>类型别名 :=> 任意

        export var eV;
>eV : any
>类型别名 :=> 任意

        export function eF() { };
>eF : () => void

        export class eC { };
>eC : eC

        export interface eI { };
>eI : eI

        export module eM { };
>eM : any
>类型别名 :=> 任意

        export declare var eaV;
>eaV : any
>类型别名 :=> 任意

        export declare function eaF() { };
>eaF : () => void

        export declare class eaC { };
>eaC : eaC

        export declare module eaM { };
>eaM : any
>类型别名 :=> 任意
    }
    export var eV;
>eV : any
>类型别名 :=> 任意

    export function eF() { };
>eF : () => void

    export class eC {
>eC : eC

        constructor () { }
        public pV;
>pV : any
>类型别名 :=> 任意

        private rV;
>rV : any
>类型别名 :=> 任意

        public pF() { }
>pF : () => void

        private rF() { }
>rF : () => void

        public pgF() { }
>pgF : () => void

        public get pgF()
>pgF : any
>类型别名 :=> 任意

        public psF(param:any) { }
>psF : (param: any) => void
>param : any
>类型别名 :=> 任意

        public set psF(param:any)
>psF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        private rgF() { }
>rgF : () => void

        private get rgF()
>rgF : any
>类型别名 :=> 任意

        private rsF(param:any) { }
>rsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        private set rsF(param:any)
>rsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tV;
>tV : any
>类型别名 :=> 任意

        static tF() { }
>tF : () => void

        static tsF(param:any) { }
>tsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        static set tsF(param:any)
>tsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tgF() { }
>tgF : () => void

        static get tgF()
>tgF : any
>类型别名 :=> 任意
    }
    export interface eI {
>eI : eI

        //Call Signature
        ();
        (): number;
        (p);
>p : any
>类型别名 :=> 任意

        (p1: string);
>p1 : string
>类型别名 :=> 文字

        (p2?: string);
>p2 : string
>类型别名 :=> 文字

        (...p3: any[]);
>p3 : any[]

        (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>类型别名 :=> 文字

        new (p2?: string);
>p2 : string
>类型别名 :=> 文字

        new (...p3: any[]);
>p3 : any[]

        new (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        new (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //Index Signature
        [p];
>p : any
>类型别名 :=> 任意

        [p1: string];
>p1 : string
>类型别名 :=> 文字

        [p2: string, p3: number];
>p2 : string
>类型别名 :=> 文字
>p3 : number
>类型别名 :=> 数字

        //Property Signature
        p;
>p : any
>类型别名 :=> 任意

        p1?;
>p1 : any
>类型别名 :=> 任意

        p2?: string;
>p2 : string
>类型别名 :=> 文字
    
        //Function Signature
        p3();
>p3 : () => any

        p4? ();
>p4 : () => any

        p5? (): void;
>p5 : () => void

        p6(pa1): void;
>p6 : (pa1: any) => void
>pa1 : any
>类型别名 :=> 任意

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意
    }
    export module eM {
>eM : typeof eM

        var V;
>V : any
>类型别名 :=> 任意

        function F() { };
>F : () => void

        class C { };
>C : C

        interface I { };
>I : I

        module M { };
>M : any
>类型别名 :=> 任意

        export var eV;
>eV : any
>类型别名 :=> 任意

        export function eF() { };
>eF : () => void

        export class eC { };
>eC : eC

        export interface eI { };
>eI : eI

        export module eM { };
>eM : any
>类型别名 :=> 任意

        export declare var eaV;
>eaV : any
>类型别名 :=> 任意

        export declare function eaF() { };
>eaF : () => void

        export declare class eaC { };
>eaC : eaC

        export declare module eaM { };
>eaM : any
>类型别名 :=> 任意
    }
    export declare var eaV;
>eaV : any
>类型别名 :=> 任意

    export declare function eaF() { };
>eaF : () => void

    export declare class eaC {
>eaC : eaC

        constructor () { }
        public pV;
>pV : any
>类型别名 :=> 任意

        private rV;
>rV : any
>类型别名 :=> 任意

        public pF() { }
>pF : () => void

        private rF() { }
>rF : () => void

        public pgF() { }
>pgF : () => void

        public get pgF()
>pgF : any
>类型别名 :=> 任意

        public psF(param:any) { }
>psF : (param: any) => void
>param : any
>类型别名 :=> 任意

        public set psF(param:any)
>psF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        private rgF() { }
>rgF : () => void

        private get rgF()
>rgF : any
>类型别名 :=> 任意

        private rsF(param:any) { }
>rsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        private set rsF(param:any)
>rsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tV;
>tV : any
>类型别名 :=> 任意

        static tF() { }
>tF : () => void

        static tsF(param:any) { }
>tsF : (param: any) => void
>param : any
>类型别名 :=> 任意

        static set tsF(param:any)
>tsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

        static tgF() { }
>tgF : () => void

        static get tgF()
>tgF : any
>类型别名 :=> 任意
    }
    export declare module eaM {
>eaM : typeof eaM

        var V;
>V : any
>类型别名 :=> 任意

        function F() { };
>F : () => void

        class C { }
>C : C

        interface I { }
>I : I

        module M { }
>M : any
>类型别名 :=> 任意

        export var eV;
>eV : any
>类型别名 :=> 任意

        export function eF() { };
>eF : () => void

        export class eC { }
>eC : eC

        export interface eI { }
>eI : eI

        export module eM { }
>eM : any
>类型别名 :=> 任意
    }
}
export declare var eaV;
>eaV : any
>类型别名 :=> 任意

export declare function eaF() { };
>eaF : () => void

export declare class eaC {
>eaC : eaC

    constructor () { }
    public pV;
>pV : any
>类型别名 :=> 任意

    private rV;
>rV : any
>类型别名 :=> 任意

    public pF() { }
>pF : () => void

    private rF() { }
>rF : () => void

    public pgF() { }
>pgF : () => void

    public get pgF()
>pgF : any
>类型别名 :=> 任意

    public psF(param:any) { }
>psF : (param: any) => void
>param : any
>类型别名 :=> 任意

    public set psF(param:any)
>psF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

    private rgF() { }
>rgF : () => void

    private get rgF()
>rgF : any
>类型别名 :=> 任意

    private rsF(param:any) { }
>rsF : (param: any) => void
>param : any
>类型别名 :=> 任意

    private set rsF(param:any)
>rsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

    static tV;
>tV : any
>类型别名 :=> 任意

    static tF() { }
>tF : () => void

    static tsF(param:any) { }
>tsF : (param: any) => void
>param : any
>类型别名 :=> 任意

    static set tsF(param:any)
>tsF : any
>类型别名 :=> 任意
>param : any
>类型别名 :=> 任意

    static tgF() { }
>tgF : () => void

    static get tgF()
>tgF : any
>类型别名 :=> 任意
}
export declare module eaM {
>eaM : typeof eaM

    var V;
>V : any
>类型别名 :=> 任意

    function F() { };
>F : () => void

    class C {
>C : C

        constructor () { }
        public pV;
>pV : any
>类型别名 :=> 任意

        private rV;
>rV : any
>类型别名 :=> 任意

        public pF() { }
>pF : () => void

        static tV;
>tV : any
>类型别名 :=> 任意

        static tF() { }
>tF : () => void
    }
    interface I {
>I : I

        //Call Signature
        ();
        (): number;
        (p: string);
>p : string
>类型别名 :=> 文字

        (p2?: string);
>p2 : string
>类型别名 :=> 文字

        (...p3: any[]);
>p3 : any[]

        (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>类型别名 :=> 文字

        new (p2?: string);
>p2 : string
>类型别名 :=> 文字

        new (...p3: any[]);
>p3 : any[]

        new (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        new (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //Index Signature
        [p];
>p : any
>类型别名 :=> 任意

        [p1: string];
>p1 : string
>类型别名 :=> 文字

        [p2: string, p3: number];
>p2 : string
>类型别名 :=> 文字
>p3 : number
>类型别名 :=> 数字

        //Property Signature
        p;
>p : any
>类型别名 :=> 任意

        p1?;
>p1 : any
>类型别名 :=> 任意

        p2?: string;
>p2 : string
>类型别名 :=> 文字
    
        //Function Signature
        p3();
>p3 : () => any

        p4? ();
>p4 : () => any

        p5? (): void;
>p5 : () => void

        p6(pa1): void;
>p6 : (pa1: any) => void
>pa1 : any
>类型别名 :=> 任意

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意
    }
    module M {
>M : typeof M

        var V;
>V : any
>类型别名 :=> 任意

        function F() { };
>F : () => void

        class C { }
>C : C

        interface I { }
>I : I

        module M { }
>M : any
>类型别名 :=> 任意

        export var eV;
>eV : any
>类型别名 :=> 任意

        export function eF() { };
>eF : () => void

        export class eC { }
>eC : eC

        export interface eI { }
>eI : eI

        export module eM { }
>eM : any
>类型别名 :=> 任意

        export declare var eaV
>eaV : any
>类型别名 :=> 任意

        export declare function eaF() { };
>eaF : () => void

        export declare class eaC { }
>eaC : eaC

        export declare module eaM { }
>eaM : any
>类型别名 :=> 任意
    }
    export var eV;
>eV : any
>类型别名 :=> 任意

    export function eF() { };
>eF : () => void

    export class eC {
>eC : eC

        constructor () { }
        public pV;
>pV : any
>类型别名 :=> 任意

        private rV;
>rV : any
>类型别名 :=> 任意

        public pF() { }
>pF : () => void

        static tV
>tV : any
>类型别名 :=> 任意

        static tF() { }
>tF : () => void
    }
    export interface eI {
>eI : eI

        //Call Signature
        ();
        (): number;
        (p);
>p : any
>类型别名 :=> 任意

        (p1: string);
>p1 : string
>类型别名 :=> 文字

        (p2?: string);
>p2 : string
>类型别名 :=> 文字

        (...p3: any[]);
>p3 : any[]

        (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>类型别名 :=> 文字

        new (p2?: string);
>p2 : string
>类型别名 :=> 文字

        new (...p3: any[]);
>p3 : any[]

        new (p4: string, p5?: string);
>p4 : string
>类型别名 :=> 文字
>p5 : string
>类型别名 :=> 文字

        new (p6: string, ...p7: any[]);
>p6 : string
>类型别名 :=> 文字
>p7 : any[]

        //Index Signature
        [p];
>p : any
>类型别名 :=> 任意

        [p1: string];
>p1 : string
>类型别名 :=> 文字

        [p2: string, p3: number];
>p2 : string
>类型别名 :=> 文字
>p3 : number
>类型别名 :=> 数字

        //Property Signature
        p;
>p : any
>类型别名 :=> 任意

        p1?;
>p1 : any
>类型别名 :=> 任意

        p2?: string;
>p2 : string
>类型别名 :=> 文字
    
        //Function Signature
        p3();
>p3 : () => any

        p4? ();
>p4 : () => any

        p5? (): void;
>p5 : () => void

        p6(pa1): void;
>p6 : (pa1: any) => void
>pa1 : any
>类型别名 :=> 任意

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>pa1 : any
>类型别名 :=> 任意
>pa2 : any
>类型别名 :=> 任意
    }
    export module eM {
>eM : typeof eM

        var V;
>V : any
>类型别名 :=> 任意

        function F() { };
>F : () => void

        class C { }
>C : C

        module M { }
>M : any
>类型别名 :=> 任意

        export var eV;
>eV : any
>类型别名 :=> 任意

        export function eF() { };
>eF : () => void

        export class eC { }
>eC : eC

        export interface eI { }
>eI : eI

        export module eM { }
>eM : any
>类型别名 :=> 任意
    }
}
