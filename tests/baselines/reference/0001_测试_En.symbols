=== /a/node_modules/@types/testEn/index.d.ts ===
export declare interface C {
>C : Symbol(C, Decl(index.d.ts, 0, 0))

    t: string
>t : Symbol(C.t, Decl(index.d.ts, 0, 28))

    n: "AAAAAAA"|"BBBBBB"
>n : Symbol(C.n, Decl(index.d.ts, 1, 13))
}

export declare class Te {
>Te : Symbol(Te, Decl(index.d.ts, 3, 1))

    private v: string
>v : Symbol(Te.v, Decl(index.d.ts, 5, 25))

    private tn: C
>tn : Symbol(Te.tn, Decl(index.d.ts, 6, 21))
>C : Symbol(C, Decl(index.d.ts, 0, 0))

    constructor(v: string, tn: C)
>v : Symbol(v, Decl(index.d.ts, 8, 16))
>tn : Symbol(tn, Decl(index.d.ts, 8, 26))
>C : Symbol(C, Decl(index.d.ts, 0, 0))

    getv: string
>getv : Symbol(Te.getv, Decl(index.d.ts, 8, 33))

    gettn: C
>gettn : Symbol(Te.gettn, Decl(index.d.ts, 9, 16))
>C : Symbol(C, Decl(index.d.ts, 0, 0))
}

export declare class Te2 {
>Te2 : Symbol(Te2, Decl(index.d.ts, 11, 1))

    private v: string
>v : Symbol(Te2.v, Decl(index.d.ts, 13, 26))

    private tn: C
>tn : Symbol(Te2.tn, Decl(index.d.ts, 14, 21))
>C : Symbol(C, Decl(index.d.ts, 0, 0))

    constructor(v: string, tn: C)
>v : Symbol(v, Decl(index.d.ts, 16, 16))
>tn : Symbol(tn, Decl(index.d.ts, 16, 26))
>C : Symbol(C, Decl(index.d.ts, 0, 0))

    getv: string
>getv : Symbol(Te2.getv, Decl(index.d.ts, 16, 33))

    gettn: C
>gettn : Symbol(Te2.gettn, Decl(index.d.ts, 17, 16))
>C : Symbol(C, Decl(index.d.ts, 0, 0))
}

=== /a/测试_1_en.ts ===
import { Te, Te2 } from "testEn"
>Te : Symbol(Te, Decl(测试_1_en.ts, 0, 8))
>Te2 : Symbol(Te2, Decl(测试_1_en.ts, 0, 12))

let 标1 = new Te("vvvvv", { t: "ttttt", n: "AAAAAAA" as "AAAAAAA"|"BBBBBB"})
>标1 : Symbol(标1, Decl(测试_1_en.ts, 2, 3))
>Te : Symbol(Te, Decl(测试_1_en.ts, 0, 8))
>t : Symbol(t, Decl(测试_1_en.ts, 2, 26))
>n : Symbol(n, Decl(测试_1_en.ts, 2, 38))

let v = "vvvvv"
>v : Symbol(v, Decl(测试_1_en.ts, 4, 3))

let tn = {
>tn : Symbol(tn, Decl(测试_1_en.ts, 5, 3))

    t: "ttttt",
>t : Symbol(t, Decl(测试_1_en.ts, 5, 10))

    n: "AAAAAAA" as "AAAAAAA"|"BBBBBB"
>n : Symbol(n, Decl(测试_1_en.ts, 6, 15))
}

let 标2 = new Te2(v, tn)
>标2 : Symbol(标2, Decl(测试_1_en.ts, 10, 3))
>Te2 : Symbol(Te2, Decl(测试_1_en.ts, 0, 12))
>v : Symbol(v, Decl(测试_1_en.ts, 4, 3))
>tn : Symbol(tn, Decl(测试_1_en.ts, 5, 3))

let v2 = "vvvvv"
>v2 : Symbol(v2, Decl(测试_1_en.ts, 12, 3))

let t = "ttttt"
>t : Symbol(t, Decl(测试_1_en.ts, 13, 3))

let n = "BBBBBB" as "AAAAAAA"|"BBBBBB"
>n : Symbol(n, Decl(测试_1_en.ts, 14, 3))

let tn2 = { t, n }
>tn2 : Symbol(tn2, Decl(测试_1_en.ts, 15, 3))
>t : Symbol(t, Decl(测试_1_en.ts, 15, 11))
>n : Symbol(n, Decl(测试_1_en.ts, 15, 14))

let 标3 = new Te(v2, tn2)
>标3 : Symbol(标3, Decl(测试_1_en.ts, 17, 3))
>Te : Symbol(Te, Decl(测试_1_en.ts, 0, 8))
>v2 : Symbol(v2, Decl(测试_1_en.ts, 12, 3))
>tn2 : Symbol(tn2, Decl(测试_1_en.ts, 15, 3))

if (标1 && 标2 && 标3) {
>标1 : Symbol(标1, Decl(测试_1_en.ts, 2, 3))
>标2 : Symbol(标2, Decl(测试_1_en.ts, 10, 3))
>标3 : Symbol(标3, Decl(测试_1_en.ts, 17, 3))

    标1.getv
>标1.getv : Symbol(Te.getv, Decl(index.d.ts, 8, 33))
>标1 : Symbol(标1, Decl(测试_1_en.ts, 2, 3))
>getv : Symbol(Te.getv, Decl(index.d.ts, 8, 33))

    标1.gettn
>标1.gettn : Symbol(Te.gettn, Decl(index.d.ts, 9, 16))
>标1 : Symbol(标1, Decl(测试_1_en.ts, 2, 3))
>gettn : Symbol(Te.gettn, Decl(index.d.ts, 9, 16))

    标2.getv
>标2.getv : Symbol(Te2.getv, Decl(index.d.ts, 16, 33))
>标2 : Symbol(标2, Decl(测试_1_en.ts, 10, 3))
>getv : Symbol(Te2.getv, Decl(index.d.ts, 16, 33))

    标2.gettn
>标2.gettn : Symbol(Te2.gettn, Decl(index.d.ts, 17, 16))
>标2 : Symbol(标2, Decl(测试_1_en.ts, 10, 3))
>gettn : Symbol(Te2.gettn, Decl(index.d.ts, 17, 16))

    标3["getv"]
>标3 : Symbol(标3, Decl(测试_1_en.ts, 17, 3))
>"getv" : Symbol(Te.getv, Decl(index.d.ts, 8, 33))

    标3["gettn"]
>标3 : Symbol(标3, Decl(测试_1_en.ts, 17, 3))
>"gettn" : Symbol(Te.gettn, Decl(index.d.ts, 9, 16))
}

