=== tests/cases/compiler/blockScopedBindingsReassignedInLoop3.ts ===
for (let x = 1, y = 2; x < y; ++x, --y) {
>x : number
>类型别名 :=> 数字
>1 : 1
>y : number
>类型别名 :=> 数字
>2 : 2
>x < y : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>++x, --y : number
>类型别名 :=> 数字
>++x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>--y : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    let a = () => x++ + y++;
>a : () => number
>() => x++ + y++ : () => number
>x++ + y++ : number
>类型别名 :=> 数字
>x++ : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y++ : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        break;
    }
    else {
        for (let a = 1; a < 5; --a) {
>a : number
>类型别名 :=> 数字
>1 : 1
>a < 5 : boolean
>类型别名 :=> 真假
>a : number
>类型别名 :=> 数字
>5 : 5
>--a : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字

            let f = () => a;
>f : () => number
>() => a : () => number
>a : number
>类型别名 :=> 数字

            if (a) {
>a : number
>类型别名 :=> 数字

                a = x;
>a = x : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

                break;
            }
            else {
                y++;
>y++ : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
            }
        }
        
        y = 5;
>y = 5 : 5
>y : number
>类型别名 :=> 数字
>5 : 5
    }
}


for (let x = 1, y = 2; x < y; ++x, --y) {
>x : number
>类型别名 :=> 数字
>1 : 1
>y : number
>类型别名 :=> 数字
>2 : 2
>x < y : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>++x, --y : number
>类型别名 :=> 数字
>++x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>--y : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    let a = () => x++ + y++;
>a : () => number
>() => x++ + y++ : () => number
>x++ + y++ : number
>类型别名 :=> 数字
>x++ : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y++ : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        continue;
    }
    else {
        for (let a = 1; a < 5; --a) {
>a : number
>类型别名 :=> 数字
>1 : 1
>a < 5 : boolean
>类型别名 :=> 真假
>a : number
>类型别名 :=> 数字
>5 : 5
>--a : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字

            let f = () => a;
>f : () => number
>() => a : () => number
>a : number
>类型别名 :=> 数字

            if (a) {
>a : number
>类型别名 :=> 数字

                a = x;
>a = x : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

                continue;
            }
            else {
                y++;
>y++ : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
            }
        }
        
        y = 5;
>y = 5 : 5
>y : number
>类型别名 :=> 数字
>5 : 5
    }
}

loop2:
>loop2 : any
>类型别名 :=> 任意

for (let x = 1, y = 2; x < y; ++x, --y) {
>x : number
>类型别名 :=> 数字
>1 : 1
>y : number
>类型别名 :=> 数字
>2 : 2
>x < y : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>++x, --y : number
>类型别名 :=> 数字
>++x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>--y : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    let a = () => x++ + y++;
>a : () => number
>() => x++ + y++ : () => number
>x++ + y++ : number
>类型别名 :=> 数字
>x++ : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y++ : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        break loop2;
>loop2 : any
>类型别名 :=> 任意
    }
    else {
        loop1:
>loop1 : any
>类型别名 :=> 任意

        for (let a = 1; a < 5; --a) {
>a : number
>类型别名 :=> 数字
>1 : 1
>a < 5 : boolean
>类型别名 :=> 真假
>a : number
>类型别名 :=> 数字
>5 : 5
>--a : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字

            let f = () => a;
>f : () => number
>() => a : () => number
>a : number
>类型别名 :=> 数字

            if (a) {
>a : number
>类型别名 :=> 数字

                a = x;
>a = x : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

                break loop1;
>loop1 : any
>类型别名 :=> 任意
            }
            else {
                y++;
>y++ : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

                break loop2
>loop2 : any
>类型别名 :=> 任意
            }
        }
        
        y = 5;
>y = 5 : 5
>y : number
>类型别名 :=> 数字
>5 : 5
    }
}

loop2:
>loop2 : any
>类型别名 :=> 任意

for (let x = 1, y = 2; x < y; ++x, --y) {
>x : number
>类型别名 :=> 数字
>1 : 1
>y : number
>类型别名 :=> 数字
>2 : 2
>x < y : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>++x, --y : number
>类型别名 :=> 数字
>++x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>--y : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    let a = () => x++ + y++;
>a : () => number
>() => x++ + y++ : () => number
>x++ + y++ : number
>类型别名 :=> 数字
>x++ : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y++ : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    if (x == 1) {
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

        continue loop2;
>loop2 : any
>类型别名 :=> 任意
    }
    else {
        loop1:
>loop1 : any
>类型别名 :=> 任意

        for (let a = 1; a < 5; --a) {
>a : number
>类型别名 :=> 数字
>1 : 1
>a < 5 : boolean
>类型别名 :=> 真假
>a : number
>类型别名 :=> 数字
>5 : 5
>--a : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字

            let f = () => a;
>f : () => number
>() => a : () => number
>a : number
>类型别名 :=> 数字

            if (a) {
>a : number
>类型别名 :=> 数字

                a = x;
>a = x : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

                continue loop1;
>loop1 : any
>类型别名 :=> 任意
            }
            else {
                y++;
>y++ : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

                continue loop2
>loop2 : any
>类型别名 :=> 任意
            }
        }
        
        y = 5;
>y = 5 : 5
>y : number
>类型别名 :=> 数字
>5 : 5
    }
}

