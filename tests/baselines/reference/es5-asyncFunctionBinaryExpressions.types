=== tests/cases/compiler/es5-asyncFunctionBinaryExpressions.ts ===
declare var x, y, z, a, b, c;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

async function binaryPlus0() {
>binaryPlus0 : () => Promise<无值>

    (await x) + y;
>(await x) + y : 任意
>类型别名 :=> 任意
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryPlus1() {
>binaryPlus1 : () => Promise<无值>

    x + await y;
>x + await y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryLogicalAnd0() {
>binaryLogicalAnd0 : () => Promise<无值>

    (await x) && y;
>(await x) && y : 任意
>类型别名 :=> 任意
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryLogicalAnd1() {
>binaryLogicalAnd1 : () => Promise<无值>

    x && await y;
>x && await y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment0() {
>binaryAssignment0 : () => Promise<无值>

    x = await y;
>x = await y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment1() {
>binaryAssignment1 : () => Promise<无值>

    x.a = await y;
>x.a = await y : 任意
>类型别名 :=> 任意
>x.a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment2() {
>binaryAssignment2 : () => Promise<无值>

    x.a.b = await y;
>x.a.b = await y : 任意
>类型别名 :=> 任意
>x.a.b : 任意
>类型别名 :=> 任意
>x.a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment3() {
>binaryAssignment3 : () => Promise<无值>

    x[z] = await y;
>x[z] = await y : 任意
>类型别名 :=> 任意
>x[z] : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment4() {
>binaryAssignment4 : () => Promise<无值>

    x[z].b = await y;
>x[z].b = await y : 任意
>类型别名 :=> 任意
>x[z].b : 任意
>类型别名 :=> 任意
>x[z] : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment5() {
>binaryAssignment5 : () => Promise<无值>

    x.a[z] = await y;
>x.a[z] = await y : 任意
>类型别名 :=> 任意
>x.a[z] : 任意
>类型别名 :=> 任意
>x.a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment6() {
>binaryAssignment6 : () => Promise<无值>

    (await x).a = y;
>(await x).a = y : 任意
>类型别名 :=> 任意
>(await x).a : 任意
>类型别名 :=> 任意
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment7() {
>binaryAssignment7 : () => Promise<无值>

    (await x.a).b = y;
>(await x.a).b = y : 任意
>类型别名 :=> 任意
>(await x.a).b : 任意
>类型别名 :=> 任意
>(await x.a) : 任意
>类型别名 :=> 任意
>await x.a : 任意
>类型别名 :=> 任意
>x.a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment8() {
>binaryAssignment8 : () => Promise<无值>

    (await x)[z] = y;
>(await x)[z] = y : 任意
>类型别名 :=> 任意
>(await x)[z] : 任意
>类型别名 :=> 任意
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment9() {
>binaryAssignment9 : () => Promise<无值>

    x[await z] = y;
>x[await z] = y : 任意
>类型别名 :=> 任意
>x[await z] : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment10() {
>binaryAssignment10 : () => Promise<无值>

    x[await z].b = y;
>x[await z].b = y : 任意
>类型别名 :=> 任意
>x[await z].b : 任意
>类型别名 :=> 任意
>x[await z] : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment11() {
>binaryAssignment11 : () => Promise<无值>

    (await x[z]).b = y;
>(await x[z]).b = y : 任意
>类型别名 :=> 任意
>(await x[z]).b : 任意
>类型别名 :=> 任意
>(await x[z]) : 任意
>类型别名 :=> 任意
>await x[z] : 任意
>类型别名 :=> 任意
>x[z] : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment12() {
>binaryAssignment12 : () => Promise<无值>

    x.a[await z] = y;
>x.a[await z] = y : 任意
>类型别名 :=> 任意
>x.a[await z] : 任意
>类型别名 :=> 任意
>x.a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryAssignment13() {
>binaryAssignment13 : () => Promise<无值>

    (await x.a)[z] = y;
>(await x.a)[z] = y : 任意
>类型别名 :=> 任意
>(await x.a)[z] : 任意
>类型别名 :=> 任意
>(await x.a) : 任意
>类型别名 :=> 任意
>await x.a : 任意
>类型别名 :=> 任意
>x.a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryCompoundAssignment0() {
>binaryCompoundAssignment0 : () => Promise<无值>

    x += await y;
>x += await y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryCompoundAssignment1() {
>binaryCompoundAssignment1 : () => Promise<无值>

    x.a += await y;
>x.a += await y : 任意
>类型别名 :=> 任意
>x.a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryCompoundAssignment2() {
>binaryCompoundAssignment2 : () => Promise<无值>

    x[a] += await y;
>x[a] += await y : 任意
>类型别名 :=> 任意
>x[a] : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryCompoundAssignment3() {
>binaryCompoundAssignment3 : () => Promise<无值>

    (await x).a += y;
>(await x).a += y : 任意
>类型别名 :=> 任意
>(await x).a : 任意
>类型别名 :=> 任意
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryCompoundAssignment4() {
>binaryCompoundAssignment4 : () => Promise<无值>

    (await x)[a] += y;
>(await x)[a] += y : 任意
>类型别名 :=> 任意
>(await x)[a] : 任意
>类型别名 :=> 任意
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryCompoundAssignment5() {
>binaryCompoundAssignment5 : () => Promise<无值>

    x[await a] += y;
>x[await a] += y : 任意
>类型别名 :=> 任意
>x[await a] : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryCompoundAssignment6() {
>binaryCompoundAssignment6 : () => Promise<无值>

    (await x).a += await y;
>(await x).a += await y : 任意
>类型别名 :=> 任意
>(await x).a : 任意
>类型别名 :=> 任意
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryCompoundAssignment7() {
>binaryCompoundAssignment7 : () => Promise<无值>

    (await x)[a] += await y;
>(await x)[a] += await y : 任意
>类型别名 :=> 任意
>(await x)[a] : 任意
>类型别名 :=> 任意
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryCompoundAssignment8() {
>binaryCompoundAssignment8 : () => Promise<无值>

    x[await a] += await y;
>x[await a] += await y : 任意
>类型别名 :=> 任意
>x[await a] : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryExponentiation() {
>binaryExponentiation : () => Promise<无值>

    (await x) ** y;
>(await x) ** y : 数字
>类型别名 :=> 数字
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    x ** await y;
>x ** await y : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryComma0() {
>binaryComma0 : () => Promise<任意>

    return (await x), y;
>(await x), y : 任意
>类型别名 :=> 任意
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function binaryComma1(): Promise<any> {
>binaryComma1 : () => Promise<任意>
>Promise : Promise<T>

    return x, await y;
>x, await y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}
