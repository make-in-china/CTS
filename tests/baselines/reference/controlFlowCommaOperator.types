=== tests/cases/conformance/controlFlow/controlFlowCommaOperator.ts ===
function f(x: string | number | boolean) {
>f : (x: 文字 | 数字 | 真假) => 无值
>x : 文字 | 数字 | 真假

    let y: string | number | boolean = false;
>y : 文字 | 数字 | 真假
>false : 为假
>类型别名 :=> 为假

    let z: string | number | boolean = false;
>z : 文字 | 数字 | 真假
>false : 为假
>类型别名 :=> 为假

    if (y = "", typeof x === "string") {
>y = "", typeof x === "string" : 真假
>类型别名 :=> 真假
>y = "" : ""
>y : 文字 | 数字 | 真假
>"" : ""
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字 | 真假
>"string" : "string"

        x; // string
>x : 文字
>类型别名 :=> 文字

        y; // string
>y : 文字
>类型别名 :=> 文字

        z; // boolean
>z : 为假
>类型别名 :=> 为假
    }
    else if (z = 1, typeof x === "number") {
>z = 1, typeof x === "number" : 真假
>类型别名 :=> 真假
>z = 1 : 1
>z : 文字 | 数字 | 真假
>1 : 1
>typeof x === "number" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字 | 真假
>"number" : "number"

        x; // number
>x : 数字
>类型别名 :=> 数字

        y; // string
>y : 文字
>类型别名 :=> 文字

        z; // number
>z : 数字
>类型别名 :=> 数字
    }
    else {
        x; // boolean
>x : 真假
>类型别名 :=> 真假

        y; // string
>y : 文字
>类型别名 :=> 文字

        z; // number
>z : 数字
>类型别名 :=> 数字
    }
    x; // string | number | boolean
>x : 文字 | 数字 | 真假

    y; // string
>y : 文字
>类型别名 :=> 文字

    z; // number | boolean
>z : 数字 | 为假
}

