=== tests/cases/conformance/controlFlow/controlFlowCommaOperator.ts ===
function f(x: string | number | boolean) {
>f : (x: string | number | boolean) => void
>x : string | number | boolean

    let y: string | number | boolean = false;
>y : string | number | boolean
>false : false
>类型别名 :=> 为假

    let z: string | number | boolean = false;
>z : string | number | boolean
>false : false
>类型别名 :=> 为假

    if (y = "", typeof x === "string") {
>y = "", typeof x === "string" : boolean
>类型别名 :=> 真假
>y = "" : ""
>y : string | number | boolean
>"" : ""
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number | boolean
>"string" : "string"

        x; // string
>x : string
>类型别名 :=> 文字

        y; // string
>y : string
>类型别名 :=> 文字

        z; // boolean
>z : false
>类型别名 :=> 为假
    }
    else if (z = 1, typeof x === "number") {
>z = 1, typeof x === "number" : boolean
>类型别名 :=> 真假
>z = 1 : 1
>z : string | number | boolean
>1 : 1
>typeof x === "number" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : number | boolean
>"number" : "number"

        x; // number
>x : number
>类型别名 :=> 数字

        y; // string
>y : string
>类型别名 :=> 文字

        z; // number
>z : number
>类型别名 :=> 数字
    }
    else {
        x; // boolean
>x : boolean
>类型别名 :=> 真假

        y; // string
>y : string
>类型别名 :=> 文字

        z; // number
>z : number
>类型别名 :=> 数字
    }
    x; // string | number | boolean
>x : string | number | boolean

    y; // string
>y : string
>类型别名 :=> 文字

    z; // number | boolean
>z : number | false
}

