=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfPrimitiveSubtype.ts ===
let a: {};
>a : {}

let b: {toString(): string};
>b : { toString(): 文字; }
>toString : () => 文字

if (typeof a === "number") {
>typeof a === "number" : 真假
>类型别名 :=> 真假
>typeof a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>a : {}
>"number" : "number"

    let c: number = a;
>c : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字
}
if (typeof a === "string") {
>typeof a === "string" : 真假
>类型别名 :=> 真假
>typeof a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>a : {}
>"string" : "string"

    let c: string = a;
>c : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
}
if (typeof a === "boolean") {
>typeof a === "boolean" : 真假
>类型别名 :=> 真假
>typeof a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>a : {}
>"boolean" : "boolean"

    let c: boolean = a;
>c : 真假
>类型别名 :=> 真假
>a : 真假
>类型别名 :=> 真假
}

if (typeof b === "number") {
>typeof b === "number" : 真假
>类型别名 :=> 真假
>typeof b : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>b : { toString(): 文字; }
>"number" : "number"

    let c: number = b;
>c : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
}
if (typeof b === "string") {
>typeof b === "string" : 真假
>类型别名 :=> 真假
>typeof b : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>b : { toString(): 文字; }
>"string" : "string"

    let c: string = b;
>c : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字
}
if (typeof b === "boolean") {
>typeof b === "boolean" : 真假
>类型别名 :=> 真假
>typeof b : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>b : { toString(): 文字; }
>"boolean" : "boolean"

    let c: boolean = b;
>c : 真假
>类型别名 :=> 真假
>b : 真假
>类型别名 :=> 真假
}

