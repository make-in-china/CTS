=== tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorWithoutIdenticalBCT.ts ===
//Cond ? Expr1 : Expr2,  Expr1 and Expr2 have no identical best common type
class X { propertyX: any; propertyX1: number; propertyX2: string };
>X : X
>propertyX : any
>类型别名 :=> 任意
>propertyX1 : number
>类型别名 :=> 数字
>propertyX2 : string
>类型别名 :=> 文字

class A extends X { propertyA: number };
>A : A
>X : X
>propertyA : number
>类型别名 :=> 数字

class B extends X { propertyB: string };
>B : B
>X : X
>propertyB : string
>类型别名 :=> 文字

var x: X;
>x : X
>X : X

var a: A;
>a : A
>A : A

var b: B;
>b : B
>B : B

// No errors anymore, uses union types
true ? a : b;
>true ? a : b : A | B
>true : true
>类型别名 :=> 为真
>a : A
>b : B

var result1 = true ? a : b;
>result1 : A | B
>true ? a : b : A | B
>true : true
>类型别名 :=> 为真
>a : A
>b : B

//Be contextually typed and and bct is not identical, results in errors that union type is not assignable to target
var result2: A = true ? a : b;
>result2 : A
>A : A
>true ? a : b : A | B
>true : true
>类型别名 :=> 为真
>a : A
>b : B

var result3: B = true ? a : b;
>result3 : B
>B : B
>true ? a : b : A | B
>true : true
>类型别名 :=> 为真
>a : A
>b : B

var result31: A | B = true ? a : b;
>result31 : A | B
>A : A
>B : B
>true ? a : b : A | B
>true : true
>类型别名 :=> 为真
>a : A
>b : B

var result4: (t: X) => number = true ? (m) => m.propertyX1 : (n) => n.propertyX2;
>result4 : (t: X) => number
>t : X
>X : X
>true ? (m) => m.propertyX1 : (n) => n.propertyX2 : ((m: X) => number) | ((n: X) => string)
>true : true
>类型别名 :=> 为真
>(m) => m.propertyX1 : (m: X) => number
>m : X
>m.propertyX1 : number
>类型别名 :=> 数字
>m : X
>propertyX1 : number
>类型别名 :=> 数字
>(n) => n.propertyX2 : (n: X) => string
>n : X
>n.propertyX2 : string
>类型别名 :=> 文字
>n : X
>propertyX2 : string
>类型别名 :=> 文字

var result5: (t: X) => string = true ? (m) => m.propertyX1 : (n) => n.propertyX2;
>result5 : (t: X) => string
>t : X
>X : X
>true ? (m) => m.propertyX1 : (n) => n.propertyX2 : ((m: X) => number) | ((n: X) => string)
>true : true
>类型别名 :=> 为真
>(m) => m.propertyX1 : (m: X) => number
>m : X
>m.propertyX1 : number
>类型别名 :=> 数字
>m : X
>propertyX1 : number
>类型别名 :=> 数字
>(n) => n.propertyX2 : (n: X) => string
>n : X
>n.propertyX2 : string
>类型别名 :=> 文字
>n : X
>propertyX2 : string
>类型别名 :=> 文字

var result6: (t: X) => boolean = true ? (m) => m.propertyX1 : (n) => n.propertyX2;
>result6 : (t: X) => boolean
>t : X
>X : X
>true ? (m) => m.propertyX1 : (n) => n.propertyX2 : ((m: X) => number) | ((n: X) => string)
>true : true
>类型别名 :=> 为真
>(m) => m.propertyX1 : (m: X) => number
>m : X
>m.propertyX1 : number
>类型别名 :=> 数字
>m : X
>propertyX1 : number
>类型别名 :=> 数字
>(n) => n.propertyX2 : (n: X) => string
>n : X
>n.propertyX2 : string
>类型别名 :=> 文字
>n : X
>propertyX2 : string
>类型别名 :=> 文字

var result61: (t: X) => number| string = true ? (m) => m.propertyX1 : (n) => n.propertyX2;
>result61 : (t: X) => string | number
>t : X
>X : X
>true ? (m) => m.propertyX1 : (n) => n.propertyX2 : ((m: X) => number) | ((n: X) => string)
>true : true
>类型别名 :=> 为真
>(m) => m.propertyX1 : (m: X) => number
>m : X
>m.propertyX1 : number
>类型别名 :=> 数字
>m : X
>propertyX1 : number
>类型别名 :=> 数字
>(n) => n.propertyX2 : (n: X) => string
>n : X
>n.propertyX2 : string
>类型别名 :=> 文字
>n : X
>propertyX2 : string
>类型别名 :=> 文字

