=== tests/cases/compiler/constDeclarations-access2.ts ===
const x = 0
>x : 0
>0 : 0

// Errors
x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1

x += 2;
>x += 2 : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>2 : 2

x -= 3;
>x -= 3 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>3 : 3

x *= 4;
>x *= 4 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>4 : 4

x /= 5;
>x /= 5 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>5 : 5

x %= 6;
>x %= 6 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>6 : 6

x <<= 7;
>x <<= 7 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>7 : 7

x >>= 8;
>x >>= 8 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>8 : 8

x >>>= 9;
>x >>>= 9 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>9 : 9

x &= 10;
>x &= 10 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>10 : 10

x |= 11;
>x |= 11 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>11 : 11

x ^= 12;
>x ^= 12 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>12 : 12

x++;
>x++ : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意

x--;
>x-- : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意

++x;
>++x : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意

--x;
>--x : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意

++((x));
>++((x)) : 数字
>类型别名 :=> 数字
>((x)) : 任意
>类型别名 :=> 任意
>(x) : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

// OK
var a = x + 1;
>a : 数字
>类型别名 :=> 数字
>x + 1 : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

function f(v: number) { }
>f : (v: 数字) => 无值
>v : 数字
>类型别名 :=> 数字

f(x);
>f(x) : 无值
>类型别名 :=> 无值
>f : (v: 数字) => 无值
>x : 数字
>类型别名 :=> 数字

if (x) { }
>x : 数字
>类型别名 :=> 数字

x;
>x : 数字
>类型别名 :=> 数字

(x);
>(x) : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

-x;
>-x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

+x;
>+x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

x.toString();
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : (radix?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

