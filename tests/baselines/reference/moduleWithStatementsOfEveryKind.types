=== tests/cases/conformance/internalModules/moduleBody/moduleWithStatementsOfEveryKind.ts ===
module A {
>A : 类为 A

    class A { s: string }
>A : A
>s : 文字
>类型别名 :=> 文字

    class AA<T> { s: T }
>AA : AA<T>
>T : T
>s : T
>T : T

    interface I { id: number }
>I : I
>id : 数字
>类型别名 :=> 数字

    class B extends AA<string> implements I { id: number }
>B : B
>AA : AA<文字>
>I : I
>id : 数字
>类型别名 :=> 数字

    class BB<T> extends A {
>BB : BB<T>
>T : T
>A : A

        id: number;
>id : 数字
>类型别名 :=> 数字
    }

    module Module {
>Module : 类为 Module

        class A { s: string }
>A : A
>s : 文字
>类型别名 :=> 文字
    }
    enum Color { Blue, Red }
>Color : Color
>Blue : Color.Blue
>Red : Color.Red

    var x = 12;
>x : 数字
>类型别名 :=> 数字
>12 : 12

    function F(s: string): number {
>F : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字

        return 2;
>2 : 2
    }
    var array: I[] = null;
>array : I[]
>I : I
>null : 空值
>类型别名 :=> 空值

    var fn = (s: string) => {
>fn : (s: 文字) => 文字
>(s: string) => {        return 'hello ' + s;    } : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字

        return 'hello ' + s;
>'hello ' + s : 文字
>类型别名 :=> 文字
>'hello ' : "hello "
>s : 文字
>类型别名 :=> 文字
    }
    var ol = { s: 'hello', id: 2, isvalid: true };
>ol : { s: 文字; id: 数字; isvalid: 真假; }
>{ s: 'hello', id: 2, isvalid: true } : { s: 文字; id: 数字; isvalid: 真假; }
>s : 文字
>类型别名 :=> 文字
>'hello' : "hello"
>id : 数字
>类型别名 :=> 数字
>2 : 2
>isvalid : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

    declare class DC {
>DC : DC

        static x: number;
>x : 数字
>类型别名 :=> 数字
    }
}

module Y {
>Y : 类为 Y

    export class A { s: string }
>A : A
>s : 文字
>类型别名 :=> 文字

    export class AA<T> { s: T }
>AA : AA<T>
>T : T
>s : T
>T : T

    export interface I { id: number }
>I : I
>id : 数字
>类型别名 :=> 数字

    export class B extends AA<string> implements I { id: number }
>B : B
>AA : AA<文字>
>I : I
>id : 数字
>类型别名 :=> 数字

    export class BB<T> extends A {
>BB : BB<T>
>T : T
>A : A

        id: number;
>id : 数字
>类型别名 :=> 数字
    }

    export module Module {
>Module : 类为 Module

        class A { s: string }
>A : A
>s : 文字
>类型别名 :=> 文字
    }
    export enum Color { Blue, Red }
>Color : Color
>Blue : Color.Blue
>Red : Color.Red

    export var x = 12;
>x : 数字
>类型别名 :=> 数字
>12 : 12

    export function F(s: string): number {
>F : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字

        return 2;
>2 : 2
    }
    export var array: I[] = null;
>array : I[]
>I : I
>null : 空值
>类型别名 :=> 空值

    export var fn = (s: string) => {
>fn : (s: 文字) => 文字
>(s: string) => {        return 'hello ' + s;    } : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字

        return 'hello ' + s;
>'hello ' + s : 文字
>类型别名 :=> 文字
>'hello ' : "hello "
>s : 文字
>类型别名 :=> 文字
    }
    export var ol = { s: 'hello', id: 2, isvalid: true };
>ol : { s: 文字; id: 数字; isvalid: 真假; }
>{ s: 'hello', id: 2, isvalid: true } : { s: 文字; id: 数字; isvalid: 真假; }
>s : 文字
>类型别名 :=> 文字
>'hello' : "hello"
>id : 数字
>类型别名 :=> 数字
>2 : 2
>isvalid : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

    export declare class DC {
>DC : DC

        static x: number;
>x : 数字
>类型别名 :=> 数字
    }
}

