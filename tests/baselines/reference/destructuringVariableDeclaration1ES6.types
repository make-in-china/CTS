=== tests/cases/conformance/es6/destructuring/destructuringVariableDeclaration1ES6.ts ===
// The type T associated with a destructuring variable declaration is determined as follows:
//      If the declaration includes a type annotation, T is that type.
var {a1, a2}: { a1: number, a2: string } = { a1: 10, a2: "world" }
>a1 : 数字
>类型别名 :=> 数字
>a2 : 文字
>类型别名 :=> 文字
>a1 : 数字
>类型别名 :=> 数字
>a2 : 文字
>类型别名 :=> 文字
>{ a1: 10, a2: "world" } : { a1: 数字; a2: 文字; }
>a1 : 数字
>类型别名 :=> 数字
>10 : 10
>a2 : 文字
>类型别名 :=> 文字
>"world" : "world"

var [a3, [[a4]], a5]: [number, [[string]], boolean] = [1, [["hello"]], true];
>a3 : 数字
>类型别名 :=> 数字
>a4 : 文字
>类型别名 :=> 文字
>a5 : 真假
>类型别名 :=> 真假
>[1, [["hello"]], true] : [数字, [[文字]], 为真]
>1 : 1
>[["hello"]] : [[文字]]
>["hello"] : [文字]
>"hello" : "hello"
>true : 为真
>类型别名 :=> 为真

// The type T associated with a destructuring variable declaration is determined as follows:
//      Otherwise, if the declaration includes an initializer expression, T is the type of that initializer expression.
var { b1: { b11 } = { b11: "string" }  } = { b1: { b11: "world" } };
>b1 : 任意
>类型别名 :=> 任意
>b11 : 文字
>类型别名 :=> 文字
>{ b11: "string" } : { b11: 文字; }
>b11 : 文字
>类型别名 :=> 文字
>"string" : "string"
>{ b1: { b11: "world" } } : { b1?: { b11: 文字; }; }
>b1 : { b11: 文字; }
>{ b11: "world" } : { b11: 文字; }
>b11 : 文字
>类型别名 :=> 文字
>"world" : "world"

var temp = { t1: true, t2: "false" };
>temp : { t1: 真假; t2: 文字; }
>{ t1: true, t2: "false" } : { t1: 真假; t2: 文字; }
>t1 : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>t2 : 文字
>类型别名 :=> 文字
>"false" : "false"

var [b2 = 3, b3 = true, b4 = temp] = [3, false, { t1: false, t2: "hello" }];
>b2 : 数字
>类型别名 :=> 数字
>3 : 3
>b3 : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>b4 : { t1: 真假; t2: 文字; }
>temp : { t1: 真假; t2: 文字; }
>[3, false, { t1: false, t2: "hello" }] : [数字, 为假, { t1: 为假; t2: 文字; }]
>3 : 3
>false : 为假
>类型别名 :=> 为假
>{ t1: false, t2: "hello" } : { t1: 为假; t2: 文字; }
>t1 : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>t2 : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var [b5 = 3, b6 = true, b7 = temp] = [undefined, undefined, undefined];
>b5 : 3
>3 : 3
>b6 : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真
>b7 : { t1: 真假; t2: 文字; }
>temp : { t1: 真假; t2: 文字; }
>[undefined, undefined, undefined] : [未定, 未定, 未定]
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

// The type T associated with a binding element is determined as follows:
//      If the binding element is a rest element, T is an array type with
//          an element type E, where E is the type of the numeric index signature of S.
var [...c1] = [1,2,3]; 
>c1 : 任意[]
>[1,2,3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

var [...c2] = [1,2,3, "string"]; 
>c2 : 任意[]
>[1,2,3, "string"] : (文字 | 数字)[]
>1 : 1
>2 : 2
>3 : 3
>"string" : "string"

// The type T associated with a binding element is determined as follows:
//      Otherwise, if S is a tuple- like type (section 3.3.3):
//          	Let N be the zero-based index of the binding element in the array binding pattern.
// 	            If S has a property with the numerical name N, T is the type of that property.
var [d1,d2] = [1,"string"]	
>d1 : 数字
>类型别名 :=> 数字
>d2 : 文字
>类型别名 :=> 文字
>[1,"string"] : [数字, 文字]
>1 : 1
>"string" : "string"

// The type T associated with a binding element is determined as follows:
//      Otherwise, if S is a tuple- like type (section 3.3.3):
//              Otherwise, if S has a numeric index signature, T is the type of the numeric index signature.
var temp1 = [true, false, true]
>temp1 : 真假[]
>[true, false, true] : 真假[]
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真

var [d3, d4] = [1, "string", ...temp1];
>d3 : 任意
>类型别名 :=> 任意
>d4 : 任意
>类型别名 :=> 任意
>[1, "string", ...temp1] : 任意[]
>1 : 1
>"string" : "string"
>...temp1 : 任意
>类型别名 :=> 任意
>temp1 : 真假[]

//  Combining both forms of destructuring,
var {e: [e1, e2, e3 = { b1: 1000, b4: 200 }]} = { e: [1, 2, { b1: 4, b4: 0 }] }; 
>e : 任意
>类型别名 :=> 任意
>e1 : 数字
>类型别名 :=> 数字
>e2 : 数字
>类型别名 :=> 数字
>e3 : { b1: 数字; b4: 数字; }
>{ b1: 1000, b4: 200 } : { b1: 数字; b4: 数字; }
>b1 : 数字
>类型别名 :=> 数字
>1000 : 1000
>b4 : 数字
>类型别名 :=> 数字
>200 : 200
>{ e: [1, 2, { b1: 4, b4: 0 }] } : { e: [数字, 数字, { b1: 数字; b4: 数字; }]; }
>e : [数字, 数字, { b1: 数字; b4: 数字; }]
>[1, 2, { b1: 4, b4: 0 }] : [数字, 数字, { b1: 数字; b4: 数字; }]
>1 : 1
>2 : 2
>{ b1: 4, b4: 0 } : { b1: 数字; b4: 数字; }
>b1 : 数字
>类型别名 :=> 数字
>4 : 4
>b4 : 数字
>类型别名 :=> 数字
>0 : 0

var {f: [f1, f2, { f3: f4, f5 }, , ]} = { f: [1, 2, { f3: 4, f5: 0 }] };
>f : 任意
>类型别名 :=> 任意
>f1 : 数字
>类型别名 :=> 数字
>f2 : 数字
>类型别名 :=> 数字
>f3 : 任意
>类型别名 :=> 任意
>f4 : 数字
>类型别名 :=> 数字
>f5 : 数字
>类型别名 :=> 数字
> : 未定
>类型别名 :=> 未定
>{ f: [1, 2, { f3: 4, f5: 0 }] } : { f: [数字, 数字, { f3: 数字; f5: 数字; }, 任意]; }
>f : [数字, 数字, { f3: 数字; f5: 数字; }, 任意]
>[1, 2, { f3: 4, f5: 0 }] : [数字, 数字, { f3: 数字; f5: 数字; }, 任意]
>1 : 1
>2 : 2
>{ f3: 4, f5: 0 } : { f3: 数字; f5: 数字; }
>f3 : 数字
>类型别名 :=> 数字
>4 : 4
>f5 : 数字
>类型别名 :=> 数字
>0 : 0

// When a destructuring variable declaration, binding property, or binding element specifies
// an initializer expression, the type of the initializer expression is required to be assignable
// to the widened form of the type associated with the destructuring variable declaration, binding property, or binding element.
var {g: {g1 = [undefined, null]}}: { g: { g1: any[] } } = { g: { g1: [1, 2] } };
>g : 任意
>类型别名 :=> 任意
>g1 : 任意[]
>[undefined, null] : 空值[]
>undefined : 未定
>类型别名 :=> 未定
>null : 空值
>类型别名 :=> 空值
>g : { g1: 任意[]; }
>g1 : 任意[]
>{ g: { g1: [1, 2] } } : { g: { g1: 数字[]; }; }
>g : { g1: 数字[]; }
>{ g1: [1, 2] } : { g1: 数字[]; }
>g1 : 数字[]
>[1, 2] : 数字[]
>1 : 1
>2 : 2

var {h: {h1 = [undefined, null]}}: { h: { h1: number[] } } = { h: { h1: [1, 2] } };
>h : 任意
>类型别名 :=> 任意
>h1 : 数字[]
>[undefined, null] : 空值[]
>undefined : 未定
>类型别名 :=> 未定
>null : 空值
>类型别名 :=> 空值
>h : { h1: 数字[]; }
>h1 : 数字[]
>{ h: { h1: [1, 2] } } : { h: { h1: 数字[]; }; }
>h : { h1: 数字[]; }
>{ h1: [1, 2] } : { h1: 数字[]; }
>h1 : 数字[]
>[1, 2] : 数字[]
>1 : 1
>2 : 2


