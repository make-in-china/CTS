=== tests/cases/conformance/expressions/assignmentOperator/assignmentLHSIsValue.ts ===
// expected error for all the LHS of assignments
var value: any;
>value : 任意
>类型别名 :=> 任意

// this
class C {
>C : C

    constructor() { this = value; }
>this = value : 任意
>类型别名 :=> 任意
>this : 本体
>value : 任意
>类型别名 :=> 任意

    foo() { this = value; }
>foo : () => 无值
>this = value : 任意
>类型别名 :=> 任意
>this : 本体
>value : 任意
>类型别名 :=> 任意

    static sfoo() { this = value; }
>sfoo : () => 无值
>this = value : 任意
>类型别名 :=> 任意
>this : 类为 C
>value : 任意
>类型别名 :=> 任意
}

function foo() { this = value; }
>foo : () => 无值
>this = value : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

this = value;
>this = value : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

// identifiers: module, class, enum, function
module M { export var a; }
>M : 类为 M
>a : 任意
>类型别名 :=> 任意

M = value;
>M = value : 任意
>类型别名 :=> 任意
>M : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

C = value;
>C = value : 任意
>类型别名 :=> 任意
>C : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

enum E { }
>E : E

E = value;
>E = value : 任意
>类型别名 :=> 任意
>E : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

foo = value;
>foo = value : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

// literals
null = value;
>null = value : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>value : 任意
>类型别名 :=> 任意

true = value;
>true = value : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>value : 任意
>类型别名 :=> 任意

false = value;
>false = value : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
>value : 任意
>类型别名 :=> 任意

0 = value;
>0 = value : 任意
>类型别名 :=> 任意
>0 : 0
>value : 任意
>类型别名 :=> 任意

'' = value;
>'' = value : 任意
>类型别名 :=> 任意
>'' : ""
>value : 任意
>类型别名 :=> 任意

/d+/ = value;
>/d+/ = value : 任意
>类型别名 :=> 任意
>/d+/ : RegExp
>value : 任意
>类型别名 :=> 任意

// object literals
{ a: 0} = value;
>a : 任意
>类型别名 :=> 任意
>0 : 0
>value : 任意
>类型别名 :=> 任意

// array literals
['', ''] = value;
>['', ''] = value : 任意
>类型别名 :=> 任意
>['', ''] : [文字, 文字]
>'' : ""
>'' : ""
>value : 任意
>类型别名 :=> 任意

// super
class Derived extends C {
>Derived : Derived
>C : C

    constructor() { super(); super = value; }
>super() : 无值
>类型别名 :=> 无值
>super : 类为 C
>super = value : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>super : C
> : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

    foo() { super = value }
>foo : () => 无值
>super = value : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>super : C
> : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

    static sfoo() { super = value; }
>sfoo : () => 无值
>super = value : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>super : 类为 C
> : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意
}

// function expression
function bar() { } = value;
>bar : () => 无值
>value : 任意
>类型别名 :=> 任意

() => { } = value;
>() => { } : () => 无值
>value : 任意
>类型别名 :=> 任意

// function calls
foo() = value;
>foo() = value : 任意
>类型别名 :=> 任意
>foo() : 无值
>类型别名 :=> 无值
>foo : () => 无值
>value : 任意
>类型别名 :=> 任意

// parentheses, the containted expression is value
(this) = value;
>(this) = value : 任意
>类型别名 :=> 任意
>(this) : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

(M) = value;
>(M) = value : 任意
>类型别名 :=> 任意
>(M) : 任意
>类型别名 :=> 任意
>M : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

(C) = value;
>(C) = value : 任意
>类型别名 :=> 任意
>(C) : 任意
>类型别名 :=> 任意
>C : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

(E) = value;
>(E) = value : 任意
>类型别名 :=> 任意
>(E) : 任意
>类型别名 :=> 任意
>E : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

(foo) = value;
>(foo) = value : 任意
>类型别名 :=> 任意
>(foo) : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

(null) = value;
>(null) = value : 任意
>类型别名 :=> 任意
>(null) : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
>value : 任意
>类型别名 :=> 任意

(true) = value;
>(true) = value : 任意
>类型别名 :=> 任意
>(true) : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真
>value : 任意
>类型别名 :=> 任意

(0) = value;
>(0) = value : 任意
>类型别名 :=> 任意
>(0) : 0
>0 : 0
>value : 任意
>类型别名 :=> 任意

('') = value;
>('') = value : 任意
>类型别名 :=> 任意
>('') : ""
>'' : ""
>value : 任意
>类型别名 :=> 任意

(/d+/) = value;
>(/d+/) = value : 任意
>类型别名 :=> 任意
>(/d+/) : RegExp
>/d+/ : RegExp
>value : 任意
>类型别名 :=> 任意

({}) = value;
>({}) = value : 任意
>类型别名 :=> 任意
>({}) : {}
>{} : {}
>value : 任意
>类型别名 :=> 任意

([]) = value;
>([]) = value : 任意
>类型别名 :=> 任意
>([]) : 未定[]
>[] : 未定[]
>value : 任意
>类型别名 :=> 任意

(function baz() { }) = value;
>(function baz() { }) = value : 任意
>类型别名 :=> 任意
>(function baz() { }) : () => 无值
>function baz() { } : () => 无值
>baz : () => 无值
>value : 任意
>类型别名 :=> 任意

(foo()) = value;
>(foo()) = value : 任意
>类型别名 :=> 任意
>(foo()) : 无值
>类型别名 :=> 无值
>foo() : 无值
>类型别名 :=> 无值
>foo : () => 无值
>value : 任意
>类型别名 :=> 任意

