=== tests/cases/compiler/assignmentCompatBug5.ts ===
function foo1(x: { a: number; }) { }
>foo1 : (x: { a: 数字; }) => 无值
>x : { a: 数字; }
>a : 数字
>类型别名 :=> 数字

foo1({ b: 5 });
>foo1({ b: 5 }) : 无值
>类型别名 :=> 无值
>foo1 : (x: { a: 数字; }) => 无值
>{ b: 5 } : { b: 数字; }
>b : 数字
>类型别名 :=> 数字
>5 : 5

function foo2(x: number[]) { }
>foo2 : (x: 数字[]) => 无值
>x : 数字[]

foo2(["s", "t"]);
>foo2(["s", "t"]) : 无值
>类型别名 :=> 无值
>foo2 : (x: 数字[]) => 无值
>["s", "t"] : 文字[]
>"s" : "s"
>"t" : "t"

function foo3(x: (n: number) =>number) { };
>foo3 : (x: (n: 数字) => 数字) => 无值
>x : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字

foo3((s:string) => { });
>foo3((s:string) => { }) : 无值
>类型别名 :=> 无值
>foo3 : (x: (n: 数字) => 数字) => 无值
>(s:string) => { } : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字

foo3((n) => { return; });
>foo3((n) => { return; }) : 无值
>类型别名 :=> 无值
>foo3 : (x: (n: 数字) => 数字) => 无值
>(n) => { return; } : (n: 数字) => 无值
>n : 数字
>类型别名 :=> 数字


