=== tests/cases/conformance/salsa/a.js ===
class C {
>C : C

    constructor() {
        if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

            this.inConstructor = 0;
>this.inConstructor = 0 : 0
>this.inConstructor : 文字 | 数字
>this : 本体
>inConstructor : 文字 | 数字
>0 : 0
        }
        else {
            this.inConstructor = "string"
>this.inConstructor = "string" : "string"
>this.inConstructor : 文字 | 数字
>this : 本体
>inConstructor : 文字 | 数字
>"string" : "string"
        }
        this.inMultiple = 0;
>this.inMultiple = 0 : 0
>this.inMultiple : 文字 | 数字 | 真假
>this : 本体
>inMultiple : 文字 | 数字 | 真假
>0 : 0
    }
    method() {
>method : () => 无值

        if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

            this.inMethod = 0;
>this.inMethod = 0 : 0
>this.inMethod : 文字 | 数字 | 未定
>this : 本体
>inMethod : 文字 | 数字 | 未定
>0 : 0
        }
        else {
            this.inMethod = "string"
>this.inMethod = "string" : "string"
>this.inMethod : 文字 | 数字 | 未定
>this : 本体
>inMethod : 文字 | 数字 | 未定
>"string" : "string"
        }
        this.inMultiple = "string";
>this.inMultiple = "string" : "string"
>this.inMultiple : 文字 | 数字 | 真假
>this : 本体
>inMultiple : 文字 | 数字 | 真假
>"string" : "string"

        var action = () => {
>action : () => 无值
>() => {            if (Math.random()) {                this.inNestedArrowFunction = 0;            }            else {                this.inNestedArrowFunction = "string"            }        } : () => 无值

            if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

                this.inNestedArrowFunction = 0;
>this.inNestedArrowFunction = 0 : 0
>this.inNestedArrowFunction : 文字 | 数字 | 未定
>this : 本体
>inNestedArrowFunction : 文字 | 数字 | 未定
>0 : 0
            }
            else {
                this.inNestedArrowFunction = "string"
>this.inNestedArrowFunction = "string" : "string"
>this.inNestedArrowFunction : 文字 | 数字 | 未定
>this : 本体
>inNestedArrowFunction : 文字 | 数字 | 未定
>"string" : "string"
            }
        };
    }
    get() {
>get : () => 无值

        if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

            this.inGetter = 0;
>this.inGetter = 0 : 0
>this.inGetter : 文字 | 数字 | 未定
>this : 本体
>inGetter : 文字 | 数字 | 未定
>0 : 0
        }
        else {
            this.inGetter = "string"
>this.inGetter = "string" : "string"
>this.inGetter : 文字 | 数字 | 未定
>this : 本体
>inGetter : 文字 | 数字 | 未定
>"string" : "string"
        }
        this.inMultiple = false;
>this.inMultiple = false : 为假
>类型别名 :=> 为假
>this.inMultiple : 文字 | 数字 | 真假
>this : 本体
>inMultiple : 文字 | 数字 | 真假
>false : 为假
>类型别名 :=> 为假
    }
    set() {
>set : () => 无值

        if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

            this.inSetter = 0;
>this.inSetter = 0 : 0
>this.inSetter : 文字 | 数字 | 未定
>this : 本体
>inSetter : 文字 | 数字 | 未定
>0 : 0
        }
        else {
            this.inSetter = "string"
>this.inSetter = "string" : "string"
>this.inSetter : 文字 | 数字 | 未定
>this : 本体
>inSetter : 文字 | 数字 | 未定
>"string" : "string"
        }
    }
    prop = () => {
>prop : () => 无值
>() => {        if (Math.random()) {            this.inPropertyDeclaration = 0;        }        else {            this.inPropertyDeclaration = "string"        }    } : () => 无值

        if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

            this.inPropertyDeclaration = 0;
>this.inPropertyDeclaration = 0 : 0
>this.inPropertyDeclaration : 文字 | 数字 | 未定
>this : 本体
>inPropertyDeclaration : 文字 | 数字 | 未定
>0 : 0
        }
        else {
            this.inPropertyDeclaration = "string"
>this.inPropertyDeclaration = "string" : "string"
>this.inPropertyDeclaration : 文字 | 数字 | 未定
>this : 本体
>inPropertyDeclaration : 文字 | 数字 | 未定
>"string" : "string"
        }
    }
    static method() {
>method : () => 无值

        if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

            this.inStaticMethod = 0;
>this.inStaticMethod = 0 : 0
>this.inStaticMethod : 文字 | 数字 | 未定
>this : 类为 C
>inStaticMethod : 文字 | 数字 | 未定
>0 : 0
        }
        else {
            this.inStaticMethod = "string"
>this.inStaticMethod = "string" : "string"
>this.inStaticMethod : 文字 | 数字 | 未定
>this : 类为 C
>inStaticMethod : 文字 | 数字 | 未定
>"string" : "string"
        }

        var action = () => {
>action : () => 无值
>() => {            if (Math.random()) {                this.inStaticNestedArrowFunction = 0;            }            else {                this.inStaticNestedArrowFunction = "string"            }        } : () => 无值

            if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

                this.inStaticNestedArrowFunction = 0;
>this.inStaticNestedArrowFunction = 0 : 0
>this.inStaticNestedArrowFunction : 文字 | 数字 | 未定
>this : 类为 C
>inStaticNestedArrowFunction : 文字 | 数字 | 未定
>0 : 0
            }
            else {
                this.inStaticNestedArrowFunction = "string"
>this.inStaticNestedArrowFunction = "string" : "string"
>this.inStaticNestedArrowFunction : 文字 | 数字 | 未定
>this : 类为 C
>inStaticNestedArrowFunction : 文字 | 数字 | 未定
>"string" : "string"
            }
        };
    }
    static get() {
>get : () => 无值

        if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

            this.inStaticGetter = 0;
>this.inStaticGetter = 0 : 0
>this.inStaticGetter : 文字 | 数字 | 未定
>this : 类为 C
>inStaticGetter : 文字 | 数字 | 未定
>0 : 0
        }
        else {
            this.inStaticGetter = "string"
>this.inStaticGetter = "string" : "string"
>this.inStaticGetter : 文字 | 数字 | 未定
>this : 类为 C
>inStaticGetter : 文字 | 数字 | 未定
>"string" : "string"
        }
    }
    static set() {
>set : () => 无值

        if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

            this.inStaticSetter = 0;
>this.inStaticSetter = 0 : 0
>this.inStaticSetter : 文字 | 数字 | 未定
>this : 类为 C
>inStaticSetter : 文字 | 数字 | 未定
>0 : 0
        }
        else {
            this.inStaticSetter = "string"
>this.inStaticSetter = "string" : "string"
>this.inStaticSetter : 文字 | 数字 | 未定
>this : 类为 C
>inStaticSetter : 文字 | 数字 | 未定
>"string" : "string"
        }
    }
    static prop = () => {
>prop : () => 无值
>() => {        if (Math.random()) {            this.inStaticPropertyDeclaration = 0;        }        else {            this.inStaticPropertyDeclaration = "string"        }    } : () => 无值

        if (Math.random()) {
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字

            this.inStaticPropertyDeclaration = 0;
>this.inStaticPropertyDeclaration = 0 : 0
>this.inStaticPropertyDeclaration : 文字 | 数字 | 未定
>this : 类为 C
>inStaticPropertyDeclaration : 文字 | 数字 | 未定
>0 : 0
        }
        else {
            this.inStaticPropertyDeclaration = "string"
>this.inStaticPropertyDeclaration = "string" : "string"
>this.inStaticPropertyDeclaration : 文字 | 数字 | 未定
>this : 类为 C
>inStaticPropertyDeclaration : 文字 | 数字 | 未定
>"string" : "string"
        }
    }
}

=== tests/cases/conformance/salsa/b.ts ===
var c = new C();
>c : C
>new C() : C
>C : 类为 C

var stringOrNumber: string | number;
>stringOrNumber : 文字 | 数字

var stringOrNumber = c.inConstructor;
>stringOrNumber : 文字 | 数字
>c.inConstructor : 文字 | 数字
>c : C
>inConstructor : 文字 | 数字

var stringOrNumberOrUndefined: string | number | undefined;
>stringOrNumberOrUndefined : 文字 | 数字 | 未定

var stringOrNumberOrUndefined = c.inMethod;
>stringOrNumberOrUndefined : 文字 | 数字 | 未定
>c.inMethod : 文字 | 数字 | 未定
>c : C
>inMethod : 文字 | 数字 | 未定

var stringOrNumberOrUndefined = c.inGetter;
>stringOrNumberOrUndefined : 文字 | 数字 | 未定
>c.inGetter : 文字 | 数字 | 未定
>c : C
>inGetter : 文字 | 数字 | 未定

var stringOrNumberOrUndefined = c.inSetter;
>stringOrNumberOrUndefined : 文字 | 数字 | 未定
>c.inSetter : 文字 | 数字 | 未定
>c : C
>inSetter : 文字 | 数字 | 未定

var stringOrNumberOrUndefined = c.inPropertyDeclaration;
>stringOrNumberOrUndefined : 文字 | 数字 | 未定
>c.inPropertyDeclaration : 文字 | 数字 | 未定
>c : C
>inPropertyDeclaration : 文字 | 数字 | 未定

var stringOrNumberOrUndefined = c.inNestedArrowFunction
>stringOrNumberOrUndefined : 文字 | 数字 | 未定
>c.inNestedArrowFunction : 文字 | 数字 | 未定
>c : C
>inNestedArrowFunction : 文字 | 数字 | 未定

var stringOrNumberOrBoolean: string | number | boolean;
>stringOrNumberOrBoolean : 文字 | 数字 | 真假

var stringOrNumberOrBoolean = c.inMultiple;
>stringOrNumberOrBoolean : 文字 | 数字 | 真假
>c.inMultiple : 文字 | 数字 | 真假
>c : C
>inMultiple : 文字 | 数字 | 真假


var stringOrNumberOrUndefined = C.inStaticMethod;
>stringOrNumberOrUndefined : 文字 | 数字 | 未定
>C.inStaticMethod : 文字 | 数字 | 未定
>C : 类为 C
>inStaticMethod : 文字 | 数字 | 未定

var stringOrNumberOrUndefined = C.inStaticGetter;
>stringOrNumberOrUndefined : 文字 | 数字 | 未定
>C.inStaticGetter : 文字 | 数字 | 未定
>C : 类为 C
>inStaticGetter : 文字 | 数字 | 未定

var stringOrNumberOrUndefined = C.inStaticSetter;
>stringOrNumberOrUndefined : 文字 | 数字 | 未定
>C.inStaticSetter : 文字 | 数字 | 未定
>C : 类为 C
>inStaticSetter : 文字 | 数字 | 未定

var stringOrNumberOrUndefined = C.inStaticPropertyDeclaration;
>stringOrNumberOrUndefined : 文字 | 数字 | 未定
>C.inStaticPropertyDeclaration : 文字 | 数字 | 未定
>C : 类为 C
>inStaticPropertyDeclaration : 文字 | 数字 | 未定

var stringOrNumberOrUndefined = C.inStaticNestedArrowFunction;
>stringOrNumberOrUndefined : 文字 | 数字 | 未定
>C.inStaticNestedArrowFunction : 文字 | 数字 | 未定
>C : 类为 C
>inStaticNestedArrowFunction : 文字 | 数字 | 未定

