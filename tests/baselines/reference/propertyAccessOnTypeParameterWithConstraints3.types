=== tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints3.ts ===
// generic types should behave as if they have properties of their constraint type

class A {
>A : A

    foo(): string { return ''; }
>foo : () => 文字
>'' : ""
}

class B extends A {
>B : B
>A : A

    bar(): string {
>bar : () => 文字

        return '';
>'' : ""
    }
}

class C<U extends A, T extends U> {
>C : C<U, T>
>U : U
>A : A
>T : T
>U : U

    f() {
>f : () => 文字

        var x: T;
>x : T
>T : T

        // BUG 823818
        var a = x['foo'](); // should be string
>a : 文字
>类型别名 :=> 文字
>x['foo']() : 文字
>类型别名 :=> 文字
>x['foo'] : () => 文字
>x : T
>'foo' : "foo"

        return a + x.foo();
>a + x.foo() : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>x.foo() : 文字
>类型别名 :=> 文字
>x.foo : () => 文字
>x : T
>foo : () => 文字
    }

    g(x: U) {
>g : (x: U) => 文字
>x : U
>U : U

        // BUG 823818
        var a = x['foo'](); // should be string
>a : 文字
>类型别名 :=> 文字
>x['foo']() : 文字
>类型别名 :=> 文字
>x['foo'] : () => 文字
>x : U
>'foo' : "foo"

        return a + x.foo();
>a + x.foo() : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>x.foo() : 文字
>类型别名 :=> 文字
>x.foo : () => 文字
>x : U
>foo : () => 文字
    }
}

var r1a = (new C<A, B>()).f();
>r1a : 文字
>类型别名 :=> 文字
>(new C<A, B>()).f() : 文字
>类型别名 :=> 文字
>(new C<A, B>()).f : () => 文字
>(new C<A, B>()) : C<A, B>
>new C<A, B>() : C<A, B>
>C : 类为 C
>A : A
>B : B
>f : () => 文字

var r1b = (new C<A, B>()).g(new B());
>r1b : 文字
>类型别名 :=> 文字
>(new C<A, B>()).g(new B()) : 文字
>类型别名 :=> 文字
>(new C<A, B>()).g : (x: A) => 文字
>(new C<A, B>()) : C<A, B>
>new C<A, B>() : C<A, B>
>C : 类为 C
>A : A
>B : B
>g : (x: A) => 文字
>new B() : B
>B : 类为 B

interface I<U extends A, T extends U> {
>I : I<U, T>
>U : U
>A : A
>T : T
>U : U

    foo: T;
>foo : T
>T : T
}
var i: I<A, B>;
>i : I<A, B>
>I : I<U, T>
>A : A
>B : B

var r2 = i.foo.foo();
>r2 : 文字
>类型别名 :=> 文字
>i.foo.foo() : 文字
>类型别名 :=> 文字
>i.foo.foo : () => 文字
>i.foo : B
>i : I<A, B>
>foo : B
>foo : () => 文字

var r2b = i.foo['foo']();
>r2b : 文字
>类型别名 :=> 文字
>i.foo['foo']() : 文字
>类型别名 :=> 文字
>i.foo['foo'] : () => 文字
>i.foo : B
>i : I<A, B>
>foo : B
>'foo' : "foo"

var a: {
>a : { <U 扩展 A, T 扩展 U>(): T; <U 扩展 T, T 扩展 A>(x: U): U; }

    <U extends A, T extends U>(): T;
>U : U
>A : A
>T : T
>U : U
>T : T

    <U extends T, T extends A>(x: U): U;
>U : U
>T : T
>T : T
>A : A
>x : U
>U : U
>U : U
}
var r3 = a().foo(); // error, no inferences for U so it doesn't satisfy constraint
>r3 : 文字
>类型别名 :=> 文字
>a().foo() : 文字
>类型别名 :=> 文字
>a().foo : () => 文字
>a() : A
>a : { <U 扩展 A, T 扩展 U>(): T; <U 扩展 T, T 扩展 A>(x: U): U; }
>foo : () => 文字

var r3b = a()['foo']();
>r3b : 文字
>类型别名 :=> 文字
>a()['foo']() : 文字
>类型别名 :=> 文字
>a()['foo'] : () => 文字
>a() : A
>a : { <U 扩展 A, T 扩展 U>(): T; <U 扩展 T, T 扩展 A>(x: U): U; }
>'foo' : "foo"

// parameter supplied for type argument inference for U
var r3c = a(new B()).foo(); // valid call to an invalid function, U is inferred as B, which has a foo
>r3c : 文字
>类型别名 :=> 文字
>a(new B()).foo() : 文字
>类型别名 :=> 文字
>a(new B()).foo : () => 文字
>a(new B()) : B
>a : { <U 扩展 A, T 扩展 U>(): T; <U 扩展 T, T 扩展 A>(x: U): U; }
>new B() : B
>B : 类为 B
>foo : () => 文字

var r3d = a(new B())['foo'](); // valid call to an invalid function, U is inferred as B, which has a foo
>r3d : 文字
>类型别名 :=> 文字
>a(new B())['foo']() : 文字
>类型别名 :=> 文字
>a(new B())['foo'] : () => 文字
>a(new B()) : B
>a : { <U 扩展 A, T 扩展 U>(): T; <U 扩展 T, T 扩展 A>(x: U): U; }
>new B() : B
>B : 类为 B
>'foo' : "foo"

var b = {
>b : { foo: <U 扩展 A, T 扩展 U>(x: T) => 文字; }
>{    foo: <U extends A, T extends U>(x: T) => {        // BUG 823818        var a = x['foo'](); // should be string        return a + x.foo();    }} : { foo: <U 扩展 A, T 扩展 U>(x: T) => 文字; }

    foo: <U extends A, T extends U>(x: T) => {
>foo : <U 扩展 A, T 扩展 U>(x: T) => 文字
><U extends A, T extends U>(x: T) => {        // BUG 823818        var a = x['foo'](); // should be string        return a + x.foo();    } : <U 扩展 A, T 扩展 U>(x: T) => 文字
>U : U
>A : A
>T : T
>U : U
>x : T
>T : T

        // BUG 823818
        var a = x['foo'](); // should be string
>a : 文字
>类型别名 :=> 文字
>x['foo']() : 文字
>类型别名 :=> 文字
>x['foo'] : () => 文字
>x : T
>'foo' : "foo"

        return a + x.foo();
>a + x.foo() : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>x.foo() : 文字
>类型别名 :=> 文字
>x.foo : () => 文字
>x : T
>foo : () => 文字
    }
}

var r4 = b.foo(new B()); // valid call to an invalid function
>r4 : 文字
>类型别名 :=> 文字
>b.foo(new B()) : 文字
>类型别名 :=> 文字
>b.foo : <U 扩展 A, T 扩展 U>(x: T) => 文字
>b : { foo: <U 扩展 A, T 扩展 U>(x: T) => 文字; }
>foo : <U 扩展 A, T 扩展 U>(x: T) => 文字
>new B() : B
>B : 类为 B

