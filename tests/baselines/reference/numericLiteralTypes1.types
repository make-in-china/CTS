=== tests/cases/conformance/types/literal/numericLiteralTypes1.ts ===
type A1 = 1;
>A1 : 1

type A2 = 1.0;
>A2 : 1

type A3 = 1e0;
>A3 : 1

type A4 = 10e-1;
>A4 : 1

type A5 = 1 | 1.0 | 1e0 | 10e-1;
>A5 : 1

function f1() {
>f1 : () => 无值

    var a: A1 = 1;
>a : 1
>A1 : 1
>1 : 1

    var a: A2 = 1;
>a : 1
>A2 : 1
>1 : 1

    var a: A3 = 1;
>a : 1
>A3 : 1
>1 : 1

    var a: A4 = 1;
>a : 1
>A4 : 1
>1 : 1

    var a: A5 = 1;
>a : 1
>A5 : 1
>1 : 1
}

type B1 = -1 | 0 | 1;
>B1 : B1
>-1 : -1
>1 : 1

type B2 = 1 | 0 | -1;
>B2 : B1
>-1 : -1
>1 : 1

type B3 = 0 | -1 | 1;
>B3 : B1
>-1 : -1
>1 : 1

function f2() {
>f2 : () => 无值

    var b: B1 = -1;
>b : B1
>B1 : B1
>-1 : -1
>1 : 1

    var b: B2 = 0;
>b : B1
>B2 : B1
>0 : 0

    var b: B3 = 1;
>b : B1
>B3 : B1
>1 : 1
}

function f3(a: 1, b: 0 | 1 | 2) {
>f3 : (a: 1, b: 0 | 1 | 2) => 无值
>a : 1
>b : 0 | 1 | 2

    var x = a + b;
>x : 数字
>类型别名 :=> 数字
>a + b : 数字
>类型别名 :=> 数字
>a : 1
>b : 0 | 1 | 2

    var x = a - b;
>x : 数字
>类型别名 :=> 数字
>a - b : 数字
>类型别名 :=> 数字
>a : 1
>b : 0 | 1 | 2

    var x = a * b;
>x : 数字
>类型别名 :=> 数字
>a * b : 数字
>类型别名 :=> 数字
>a : 1
>b : 0 | 1 | 2

    var x = a / b;
>x : 数字
>类型别名 :=> 数字
>a / b : 数字
>类型别名 :=> 数字
>a : 1
>b : 0 | 1 | 2

    var x = a % b;
>x : 数字
>类型别名 :=> 数字
>a % b : 数字
>类型别名 :=> 数字
>a : 1
>b : 0 | 1 | 2

    var x = a | b;
>x : 数字
>类型别名 :=> 数字
>a | b : 数字
>类型别名 :=> 数字
>a : 1
>b : 0 | 1 | 2

    var x = a & b;
>x : 数字
>类型别名 :=> 数字
>a & b : 数字
>类型别名 :=> 数字
>a : 1
>b : 0 | 1 | 2

    var x = a ^ b;
>x : 数字
>类型别名 :=> 数字
>a ^ b : 数字
>类型别名 :=> 数字
>a : 1
>b : 0 | 1 | 2

    var x = -b;
>x : 数字
>类型别名 :=> 数字
>-b : 数字
>类型别名 :=> 数字
>b : 0 | 1 | 2

    var x = ~b;
>x : 数字
>类型别名 :=> 数字
>~b : 数字
>类型别名 :=> 数字
>b : 0 | 1 | 2

    var y = a == b;
>y : 真假
>类型别名 :=> 真假
>a == b : 真假
>类型别名 :=> 真假
>a : 1
>b : 0 | 1 | 2

    var y = a != b;
>y : 真假
>类型别名 :=> 真假
>a != b : 真假
>类型别名 :=> 真假
>a : 1
>b : 0 | 1 | 2

    var y = a === b;
>y : 真假
>类型别名 :=> 真假
>a === b : 真假
>类型别名 :=> 真假
>a : 1
>b : 0 | 1 | 2

    var y = a !== b;
>y : 真假
>类型别名 :=> 真假
>a !== b : 真假
>类型别名 :=> 真假
>a : 1
>b : 0 | 1 | 2

    var y = a > b;
>y : 真假
>类型别名 :=> 真假
>a > b : 真假
>类型别名 :=> 真假
>a : 1
>b : 0 | 1 | 2

    var y = a < b;
>y : 真假
>类型别名 :=> 真假
>a < b : 真假
>类型别名 :=> 真假
>a : 1
>b : 0 | 1 | 2

    var y = a >= b;
>y : 真假
>类型别名 :=> 真假
>a >= b : 真假
>类型别名 :=> 真假
>a : 1
>b : 0 | 1 | 2

    var y = a <= b;
>y : 真假
>类型别名 :=> 真假
>a <= b : 真假
>类型别名 :=> 真假
>a : 1
>b : 0 | 1 | 2

    var y = !b;
>y : 真假
>类型别名 :=> 真假
>!b : 真假
>类型别名 :=> 真假
>b : 0 | 1 | 2
}

function f4(a: 1, b: 0 | 1 | 2) {
>f4 : (a: 1, b: 0 | 1 | 2) => 无值
>a : 1
>b : 0 | 1 | 2

    a++;
>a++ : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

    b++;
>b++ : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
}

declare function g(x: 0): string;
>g : { (x: 0): 文字; (x: 1): 真假; (x: 数字): 数字; }
>x : 0

declare function g(x: 1): boolean;
>g : { (x: 0): 文字; (x: 1): 真假; (x: 数字): 数字; }
>x : 1

declare function g(x: number): number;
>g : { (x: 0): 文字; (x: 1): 真假; (x: 数字): 数字; }
>x : 数字
>类型别名 :=> 数字

function f5(a: 1, b: 0 | 1 | 2) {
>f5 : (a: 1, b: 0 | 1 | 2) => 无值
>a : 1
>b : 0 | 1 | 2

    var z1 = g(0);
>z1 : 文字
>类型别名 :=> 文字
>g(0) : 文字
>类型别名 :=> 文字
>g : { (x: 0): 文字; (x: 1): 真假; (x: 数字): 数字; }
>0 : 0

    var z2 = g(1);
>z2 : 真假
>类型别名 :=> 真假
>g(1) : 真假
>类型别名 :=> 真假
>g : { (x: 0): 文字; (x: 1): 真假; (x: 数字): 数字; }
>1 : 1

    var z3 = g(2);
>z3 : 数字
>类型别名 :=> 数字
>g(2) : 数字
>类型别名 :=> 数字
>g : { (x: 0): 文字; (x: 1): 真假; (x: 数字): 数字; }
>2 : 2

    var z4 = g(a);
>z4 : 真假
>类型别名 :=> 真假
>g(a) : 真假
>类型别名 :=> 真假
>g : { (x: 0): 文字; (x: 1): 真假; (x: 数字): 数字; }
>a : 1

    var z5 = g(b);
>z5 : 数字
>类型别名 :=> 数字
>g(b) : 数字
>类型别名 :=> 数字
>g : { (x: 0): 文字; (x: 1): 真假; (x: 数字): 数字; }
>b : 0 | 1 | 2
}

function assertNever(x: never): never {
>assertNever : (x: 不及) => 不及
>x : 不及
>类型别名 :=> 不及

    throw new Error("Unexpected value");
>new Error("Unexpected value") : Error
>Error : ErrorConstructor
>"Unexpected value" : "Unexpected value"
}

type Tag = 0 | 1 | 2;
>Tag : 0 | 1 | 2

function f10(x: Tag) {
>f10 : (x: 0 | 1 | 2) => "a" | "b" | "c"
>x : 0 | 1 | 2
>Tag : 0 | 1 | 2

    switch (x) {
>x : 0 | 1 | 2

        case 0: return "a";
>0 : 0
>"a" : "a"

        case 1: return "b";
>1 : 1
>"b" : "b"

        case 2: return "c";
>2 : 2
>"c" : "c"
    }
}

function f11(x: Tag) {
>f11 : (x: 0 | 1 | 2) => "a" | "b" | "c"
>x : 0 | 1 | 2
>Tag : 0 | 1 | 2

    switch (x) {
>x : 0 | 1 | 2

        case 0: return "a";
>0 : 0
>"a" : "a"

        case 1: return "b";
>1 : 1
>"b" : "b"

        case 2: return "c";
>2 : 2
>"c" : "c"
    }
    return assertNever(x);
>assertNever(x) : 不及
>类型别名 :=> 不及
>assertNever : (x: 不及) => 不及
>x : 不及
>类型别名 :=> 不及
}

function f12(x: Tag) {
>f12 : (x: 0 | 1 | 2) => 无值
>x : 0 | 1 | 2
>Tag : 0 | 1 | 2

    if (x) {
>x : 0 | 1 | 2

        x;
>x : 1 | 2
    }
    else {
        x;
>x : 0 | 1 | 2
    }
}

function f13(x: Tag) {
>f13 : (x: 0 | 1 | 2) => 无值
>x : 0 | 1 | 2
>Tag : 0 | 1 | 2

    if (x === 0 || x === 2) {
>x === 0 || x === 2 : 真假
>类型别名 :=> 真假
>x === 0 : 真假
>类型别名 :=> 真假
>x : 0 | 1 | 2
>0 : 0
>x === 2 : 真假
>类型别名 :=> 真假
>x : 1 | 2
>2 : 2

        x;
>x : 0 | 2
    }
    else {
        x;
>x : 1
    }
}

function f14(x: 0 | 1 | 2, y: string) {
>f14 : (x: 0 | 1 | 2, y: 文字) => 无值
>x : 0 | 1 | 2
>y : 文字
>类型别名 :=> 文字

    var a = x && y;
>a : 文字
>类型别名 :=> 文字
>x && y : 文字
>类型别名 :=> 文字
>x : 0 | 1 | 2
>y : 文字
>类型别名 :=> 文字

    var b = x || y;
>b : 文字 | 1 | 2
>x || y : 文字 | 1 | 2
>x : 0 | 1 | 2
>y : 文字
>类型别名 :=> 文字
}

function f15(x: 0 | false, y: 1 | "one") {
>f15 : (x: 为假 | 0, y: 1 | "one") => 无值
>x : 为假 | 0
>false : 为假
>类型别名 :=> 为假
>y : 1 | "one"

    var a = x && y;
>a : 真假 | 0
>x && y : 为假 | 0
>x : 为假 | 0
>y : 1 | "one"

    var b = y && x;
>b : 真假 | 0
>y && x : 为假 | 0
>y : 1 | "one"
>x : 为假 | 0

    var c = x || y;
>c : 1 | "one"
>x || y : 1 | "one"
>x : 为假 | 0
>y : 1 | "one"

    var d = y || x;
>d : 真假 | 0 | 1 | "one"
>y || x : 为假 | 0 | 1 | "one"
>y : 1 | "one"
>x : 为假 | 0

    var e = !x;
>e : 真假
>类型别名 :=> 真假
>!x : 为真
>类型别名 :=> 为真
>x : 为假 | 0

    var f = !y;
>f : 真假
>类型别名 :=> 真假
>!y : 真假
>类型别名 :=> 真假
>y : 1 | "one"
}

type Item =
>Item : Item

    { kind: 0, a: string } |
>kind : 0
>a : 文字
>类型别名 :=> 文字

    { kind: 1, b: string } |
>kind : 1
>b : 文字
>类型别名 :=> 文字

    { kind: 2, c: string };
>kind : 2
>c : 文字
>类型别名 :=> 文字

function f20(x: Item) {
>f20 : (x: Item) => 文字
>x : Item
>Item : Item

    switch (x.kind) {
>x.kind : 0 | 1 | 2
>x : Item
>kind : 0 | 1 | 2

        case 0: return x.a;
>0 : 0
>x.a : 文字
>类型别名 :=> 文字
>x : { kind: 0; a: 文字; }
>a : 文字
>类型别名 :=> 文字

        case 1: return x.b;
>1 : 1
>x.b : 文字
>类型别名 :=> 文字
>x : { kind: 1; b: 文字; }
>b : 文字
>类型别名 :=> 文字

        case 2: return x.c;
>2 : 2
>x.c : 文字
>类型别名 :=> 文字
>x : { kind: 2; c: 文字; }
>c : 文字
>类型别名 :=> 文字
    }
}

function f21(x: Item) {
>f21 : (x: Item) => 文字
>x : Item
>Item : Item

    switch (x.kind) {
>x.kind : 0 | 1 | 2
>x : Item
>kind : 0 | 1 | 2

        case 0: return x.a;
>0 : 0
>x.a : 文字
>类型别名 :=> 文字
>x : { kind: 0; a: 文字; }
>a : 文字
>类型别名 :=> 文字

        case 1: return x.b;
>1 : 1
>x.b : 文字
>类型别名 :=> 文字
>x : { kind: 1; b: 文字; }
>b : 文字
>类型别名 :=> 文字

        case 2: return x.c;
>2 : 2
>x.c : 文字
>类型别名 :=> 文字
>x : { kind: 2; c: 文字; }
>c : 文字
>类型别名 :=> 文字
    }
    return assertNever(x);
>assertNever(x) : 不及
>类型别名 :=> 不及
>assertNever : (x: 不及) => 不及
>x : 不及
>类型别名 :=> 不及
}
