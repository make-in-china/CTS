=== tests/cases/conformance/types/any/narrowExceptionVariableInCatchClause.ts ===
declare function isFooError(x: any): x is { type: 'foo'; dontPanic(); };
>isFooError : (x: 任意) => x 作为 { type: "foo"; dontPanic(): 任意; }
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>type : "foo"
>dontPanic : () => 任意

function tryCatch() {
>tryCatch : () => 无值

    try {
        // do stuff...
    }
    catch (err) { // err is implicitly 'any' and cannot be annotated
>err : 任意
>类型别名 :=> 任意

        if (isFooError(err)) {
>isFooError(err) : 真假
>类型别名 :=> 真假
>isFooError : (x: 任意) => x 作为 { type: "foo"; dontPanic(): 任意; }
>err : 任意
>类型别名 :=> 任意

            err.dontPanic(); // OK
>err.dontPanic() : 任意
>类型别名 :=> 任意
>err.dontPanic : () => 任意
>err : { type: "foo"; dontPanic(): 任意; }
>dontPanic : () => 任意

            err.doPanic(); // ERROR: Property 'doPanic' does not exist on type '{...}'
>err.doPanic() : 任意
>类型别名 :=> 任意
>err.doPanic : 任意
>类型别名 :=> 任意
>err : { type: "foo"; dontPanic(): 任意; }
>doPanic : 任意
>类型别名 :=> 任意
        }

        else if (err instanceof Error) {
>err instanceof Error : 真假
>类型别名 :=> 真假
>err : 任意
>类型别名 :=> 任意
>Error : ErrorConstructor

            err.message;
>err.message : 文字
>类型别名 :=> 文字
>err : Error
>message : 文字
>类型别名 :=> 文字

            err.massage; // ERROR: Property 'massage' does not exist on type 'Error'
>err.massage : 任意
>类型别名 :=> 任意
>err : Error
>massage : 任意
>类型别名 :=> 任意
        }

        else {
            throw err;
>err : 任意
>类型别名 :=> 任意
        }
    }
}

