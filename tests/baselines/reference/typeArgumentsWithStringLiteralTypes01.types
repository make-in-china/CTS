=== tests/cases/conformance/types/stringLiteral/typeArgumentsWithStringLiteralTypes01.ts ===
declare function randBool(): boolean;
>randBool : () => 真假

declare function takeReturnString(str: string): string;
>takeReturnString : (str: 文字) => 文字
>str : 文字
>类型别名 :=> 文字

declare function takeReturnHello(str: "Hello"): "Hello";
>takeReturnHello : (str: "Hello") => "Hello"
>str : "Hello"

declare function takeReturnHelloWorld(str: "Hello" | "World"): "Hello" | "World";
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>str : "Hello" | "World"

function fun1<T>(x: T, y: T) {
>fun1 : <T>(x: T, y: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T

    return randBool() ? x : y;
>randBool() ? x : y : T
>randBool() : 真假
>类型别名 :=> 真假
>randBool : () => 真假
>x : T
>y : T
}

function fun2<T, U>(x: T, y: U) {
>fun2 : <T, U>(x: T, y: U) => T | U
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U

    return randBool() ? x : y;
>randBool() ? x : y : T | U
>randBool() : 真假
>类型别名 :=> 真假
>randBool : () => 真假
>x : T
>y : U
}

function fun3<T>(...args: T[]): T {
>fun3 : <T>(...args: T[]) => T
>T : T
>args : T[]
>T : T
>T : T

    return args[+randBool()];
>args[+randBool()] : T
>args : T[]
>+randBool() : 数字
>类型别名 :=> 数字
>randBool() : 真假
>类型别名 :=> 真假
>randBool : () => 真假
}

namespace n1 {
>n1 : 类为 n1

    // The following should all come back as strings.
    // They should be assignable to/from something of a type 'string'.
    // They should not be assignable to either "Hello" or "World".
    export let a = fun1("Hello", "World");
>a : 文字
>类型别名 :=> 文字
>fun1("Hello", "World") : "Hello" | "World"
>fun1 : <T>(x: T, y: T) => T
>"Hello" : "Hello"
>"World" : "World"

    export let b = fun1("Hello", "Hello");
>b : 文字
>类型别名 :=> 文字
>fun1("Hello", "Hello") : "Hello"
>fun1 : <T>(x: T, y: T) => T
>"Hello" : "Hello"
>"Hello" : "Hello"

    export let c = fun2("Hello", "World");
>c : 文字
>类型别名 :=> 文字
>fun2("Hello", "World") : "Hello" | "World"
>fun2 : <T, U>(x: T, y: U) => T | U
>"Hello" : "Hello"
>"World" : "World"

    export let d = fun2("Hello", "Hello");
>d : 文字
>类型别名 :=> 文字
>fun2("Hello", "Hello") : "Hello"
>fun2 : <T, U>(x: T, y: U) => T | U
>"Hello" : "Hello"
>"Hello" : "Hello"

    export let e = fun3("Hello", "Hello", "World", "Foo");
>e : 文字
>类型别名 :=> 文字
>fun3("Hello", "Hello", "World", "Foo") : "Hello" | "World" | "Foo"
>fun3 : <T>(...args: T[]) => T
>"Hello" : "Hello"
>"Hello" : "Hello"
>"World" : "World"
>"Foo" : "Foo"

    // Should be valid
    a = takeReturnString(a);
>a = takeReturnString(a) : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>takeReturnString(a) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>a : 文字
>类型别名 :=> 文字

    b = takeReturnString(b);
>b = takeReturnString(b) : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字
>takeReturnString(b) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>b : 文字
>类型别名 :=> 文字

    c = takeReturnString(c);
>c = takeReturnString(c) : 文字
>类型别名 :=> 文字
>c : 文字
>类型别名 :=> 文字
>takeReturnString(c) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>c : 文字
>类型别名 :=> 文字

    d = takeReturnString(d);
>d = takeReturnString(d) : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字
>takeReturnString(d) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>d : 文字
>类型别名 :=> 文字

    e = takeReturnString(e);
>e = takeReturnString(e) : 文字
>类型别名 :=> 文字
>e : 文字
>类型别名 :=> 文字
>takeReturnString(e) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>e : 文字
>类型别名 :=> 文字
    
    // Passing these as arguments should cause an error.
    a = takeReturnHello(a);
>a = takeReturnHello(a) : 任意
>类型别名 :=> 任意
>a : 文字
>类型别名 :=> 文字
>takeReturnHello(a) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>a : 文字
>类型别名 :=> 文字

    b = takeReturnHello(b);
>b = takeReturnHello(b) : 任意
>类型别名 :=> 任意
>b : 文字
>类型别名 :=> 文字
>takeReturnHello(b) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>b : 文字
>类型别名 :=> 文字

    c = takeReturnHello(c);
>c = takeReturnHello(c) : 任意
>类型别名 :=> 任意
>c : 文字
>类型别名 :=> 文字
>takeReturnHello(c) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>c : 文字
>类型别名 :=> 文字

    d = takeReturnHello(d);
>d = takeReturnHello(d) : 任意
>类型别名 :=> 任意
>d : 文字
>类型别名 :=> 文字
>takeReturnHello(d) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>d : 文字
>类型别名 :=> 文字

    e = takeReturnHello(e);
>e = takeReturnHello(e) : 任意
>类型别名 :=> 任意
>e : 文字
>类型别名 :=> 文字
>takeReturnHello(e) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>e : 文字
>类型别名 :=> 文字

    // Passing these as arguments should cause an error.
    a = takeReturnHelloWorld(a);
>a = takeReturnHelloWorld(a) : 任意
>类型别名 :=> 任意
>a : 文字
>类型别名 :=> 文字
>takeReturnHelloWorld(a) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>a : 文字
>类型别名 :=> 文字

    b = takeReturnHelloWorld(b);
>b = takeReturnHelloWorld(b) : 任意
>类型别名 :=> 任意
>b : 文字
>类型别名 :=> 文字
>takeReturnHelloWorld(b) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>b : 文字
>类型别名 :=> 文字

    c = takeReturnHelloWorld(c);
>c = takeReturnHelloWorld(c) : 任意
>类型别名 :=> 任意
>c : 文字
>类型别名 :=> 文字
>takeReturnHelloWorld(c) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>c : 文字
>类型别名 :=> 文字

    d = takeReturnHelloWorld(d);
>d = takeReturnHelloWorld(d) : 任意
>类型别名 :=> 任意
>d : 文字
>类型别名 :=> 文字
>takeReturnHelloWorld(d) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>d : 文字
>类型别名 :=> 文字

    e = takeReturnHelloWorld(e);
>e = takeReturnHelloWorld(e) : 任意
>类型别名 :=> 任意
>e : 文字
>类型别名 :=> 文字
>takeReturnHelloWorld(e) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>e : 文字
>类型别名 :=> 文字
}

namespace n2 {
>n2 : 类为 n2

    // The following (regardless of errors) should come back typed
    // as "Hello" (or "Hello" | "Hello").
    export let a = fun1<"Hello">("Hello", "Hello");
>a : "Hello"
>fun1<"Hello">("Hello", "Hello") : "Hello"
>fun1 : <T>(x: T, y: T) => T
>"Hello" : "Hello"
>"Hello" : "Hello"

    export let b = fun1<"Hello">("Hello", "World");
>b : 任意
>类型别名 :=> 任意
>fun1<"Hello">("Hello", "World") : 任意
>类型别名 :=> 任意
>fun1 : <T>(x: T, y: T) => T
>"Hello" : "Hello"
>"World" : "World"

    export let c = fun2<"Hello", "Hello">("Hello", "Hello");
>c : "Hello"
>fun2<"Hello", "Hello">("Hello", "Hello") : "Hello"
>fun2 : <T, U>(x: T, y: U) => T | U
>"Hello" : "Hello"
>"Hello" : "Hello"

    export let d = fun2<"Hello", "Hello">("Hello", "World");
>d : 任意
>类型别名 :=> 任意
>fun2<"Hello", "Hello">("Hello", "World") : 任意
>类型别名 :=> 任意
>fun2 : <T, U>(x: T, y: U) => T | U
>"Hello" : "Hello"
>"World" : "World"

    export let e = fun3<"Hello">("Hello", "World");
>e : 任意
>类型别名 :=> 任意
>fun3<"Hello">("Hello", "World") : 任意
>类型别名 :=> 任意
>fun3 : <T>(...args: T[]) => T
>"Hello" : "Hello"
>"World" : "World"

    // Assignment from the returned value should cause an error.
    a = takeReturnString(a);
>a = takeReturnString(a) : 文字
>类型别名 :=> 文字
>a : "Hello"
>takeReturnString(a) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>a : "Hello"

    b = takeReturnString(b);
>b = takeReturnString(b) : 文字
>类型别名 :=> 文字
>b : 任意
>类型别名 :=> 任意
>takeReturnString(b) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>b : 任意
>类型别名 :=> 任意

    c = takeReturnString(c);
>c = takeReturnString(c) : 文字
>类型别名 :=> 文字
>c : "Hello"
>takeReturnString(c) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>c : "Hello"

    d = takeReturnString(d);
>d = takeReturnString(d) : 文字
>类型别名 :=> 文字
>d : 任意
>类型别名 :=> 任意
>takeReturnString(d) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>d : 任意
>类型别名 :=> 任意

    e = takeReturnString(e);
>e = takeReturnString(e) : 文字
>类型别名 :=> 文字
>e : 任意
>类型别名 :=> 任意
>takeReturnString(e) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>e : 任意
>类型别名 :=> 任意

    // Should be valid
    a = takeReturnHello(a);
>a = takeReturnHello(a) : "Hello"
>a : "Hello"
>takeReturnHello(a) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>a : "Hello"

    b = takeReturnHello(b);
>b = takeReturnHello(b) : "Hello"
>b : 任意
>类型别名 :=> 任意
>takeReturnHello(b) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>b : 任意
>类型别名 :=> 任意

    c = takeReturnHello(c);
>c = takeReturnHello(c) : "Hello"
>c : "Hello"
>takeReturnHello(c) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>c : "Hello"

    d = takeReturnHello(d);
>d = takeReturnHello(d) : "Hello"
>d : 任意
>类型别名 :=> 任意
>takeReturnHello(d) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>d : 任意
>类型别名 :=> 任意

    e = takeReturnHello(e);
>e = takeReturnHello(e) : "Hello"
>e : 任意
>类型别名 :=> 任意
>takeReturnHello(e) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>e : 任意
>类型别名 :=> 任意

    // Assignment from the returned value should cause an error.
    a = takeReturnHelloWorld(a);
>a = takeReturnHelloWorld(a) : "Hello" | "World"
>a : "Hello"
>takeReturnHelloWorld(a) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>a : "Hello"

    b = takeReturnHelloWorld(b);
>b = takeReturnHelloWorld(b) : "Hello" | "World"
>b : 任意
>类型别名 :=> 任意
>takeReturnHelloWorld(b) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>b : 任意
>类型别名 :=> 任意

    c = takeReturnHelloWorld(c);
>c = takeReturnHelloWorld(c) : "Hello" | "World"
>c : "Hello"
>takeReturnHelloWorld(c) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>c : "Hello"

    d = takeReturnHelloWorld(d);
>d = takeReturnHelloWorld(d) : "Hello" | "World"
>d : 任意
>类型别名 :=> 任意
>takeReturnHelloWorld(d) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>d : 任意
>类型别名 :=> 任意

    e = takeReturnHelloWorld(e);
>e = takeReturnHelloWorld(e) : "Hello" | "World"
>e : 任意
>类型别名 :=> 任意
>takeReturnHelloWorld(e) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>e : 任意
>类型别名 :=> 任意
}


namespace n3 {
>n3 : 类为 n3

    // The following (regardless of errors) should come back typed
    // as "Hello" | "World" (or "World" | "Hello").
    export let a = fun2<"Hello", "World">("Hello", "World");
>a : "Hello" | "World"
>fun2<"Hello", "World">("Hello", "World") : "Hello" | "World"
>fun2 : <T, U>(x: T, y: U) => T | U
>"Hello" : "Hello"
>"World" : "World"

    export let b = fun2<"Hello", "World">("World", "Hello");
>b : 任意
>类型别名 :=> 任意
>fun2<"Hello", "World">("World", "Hello") : 任意
>类型别名 :=> 任意
>fun2 : <T, U>(x: T, y: U) => T | U
>"World" : "World"
>"Hello" : "Hello"

    export let c = fun2<"World", "Hello">("Hello", "Hello");
>c : 任意
>类型别名 :=> 任意
>fun2<"World", "Hello">("Hello", "Hello") : 任意
>类型别名 :=> 任意
>fun2 : <T, U>(x: T, y: U) => T | U
>"Hello" : "Hello"
>"Hello" : "Hello"

    export let d = fun2<"World", "Hello">("World", "World");
>d : 任意
>类型别名 :=> 任意
>fun2<"World", "Hello">("World", "World") : 任意
>类型别名 :=> 任意
>fun2 : <T, U>(x: T, y: U) => T | U
>"World" : "World"
>"World" : "World"

    export let e = fun3<"Hello" | "World">("Hello", "World");
>e : "Hello" | "World"
>fun3<"Hello" | "World">("Hello", "World") : "Hello" | "World"
>fun3 : <T>(...args: T[]) => T
>"Hello" : "Hello"
>"World" : "World"

    // Assignment from the returned value should cause an error.
    a = takeReturnString(a);
>a = takeReturnString(a) : 文字
>类型别名 :=> 文字
>a : "Hello" | "World"
>takeReturnString(a) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>a : "Hello" | "World"

    b = takeReturnString(b);
>b = takeReturnString(b) : 文字
>类型别名 :=> 文字
>b : 任意
>类型别名 :=> 任意
>takeReturnString(b) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>b : 任意
>类型别名 :=> 任意

    c = takeReturnString(c);
>c = takeReturnString(c) : 文字
>类型别名 :=> 文字
>c : 任意
>类型别名 :=> 任意
>takeReturnString(c) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>c : 任意
>类型别名 :=> 任意

    d = takeReturnString(d);
>d = takeReturnString(d) : 文字
>类型别名 :=> 文字
>d : 任意
>类型别名 :=> 任意
>takeReturnString(d) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>d : 任意
>类型别名 :=> 任意

    e = takeReturnString(e);
>e = takeReturnString(e) : 文字
>类型别名 :=> 文字
>e : "Hello" | "World"
>takeReturnString(e) : 文字
>类型别名 :=> 文字
>takeReturnString : (str: 文字) => 文字
>e : "Hello" | "World"

    // Passing these as arguments should cause an error.
    a = takeReturnHello(a);
>a = takeReturnHello(a) : 任意
>类型别名 :=> 任意
>a : "Hello" | "World"
>takeReturnHello(a) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>a : "Hello" | "World"

    b = takeReturnHello(b);
>b = takeReturnHello(b) : "Hello"
>b : 任意
>类型别名 :=> 任意
>takeReturnHello(b) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>b : 任意
>类型别名 :=> 任意

    c = takeReturnHello(c);
>c = takeReturnHello(c) : "Hello"
>c : 任意
>类型别名 :=> 任意
>takeReturnHello(c) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>c : 任意
>类型别名 :=> 任意

    d = takeReturnHello(d);
>d = takeReturnHello(d) : "Hello"
>d : 任意
>类型别名 :=> 任意
>takeReturnHello(d) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>d : 任意
>类型别名 :=> 任意

    e = takeReturnHello(e);
>e = takeReturnHello(e) : 任意
>类型别名 :=> 任意
>e : "Hello" | "World"
>takeReturnHello(e) : "Hello"
>takeReturnHello : (str: "Hello") => "Hello"
>e : "Hello" | "World"

    // Both should be valid.
    a = takeReturnHelloWorld(a);
>a = takeReturnHelloWorld(a) : "Hello" | "World"
>a : "Hello" | "World"
>takeReturnHelloWorld(a) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>a : "Hello"

    b = takeReturnHelloWorld(b);
>b = takeReturnHelloWorld(b) : "Hello" | "World"
>b : 任意
>类型别名 :=> 任意
>takeReturnHelloWorld(b) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>b : 任意
>类型别名 :=> 任意

    c = takeReturnHelloWorld(c);
>c = takeReturnHelloWorld(c) : "Hello" | "World"
>c : 任意
>类型别名 :=> 任意
>takeReturnHelloWorld(c) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>c : 任意
>类型别名 :=> 任意

    d = takeReturnHelloWorld(d);
>d = takeReturnHelloWorld(d) : "Hello" | "World"
>d : 任意
>类型别名 :=> 任意
>takeReturnHelloWorld(d) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>d : 任意
>类型别名 :=> 任意

    e = takeReturnHelloWorld(e);
>e = takeReturnHelloWorld(e) : "Hello" | "World"
>e : "Hello" | "World"
>takeReturnHelloWorld(e) : "Hello" | "World"
>takeReturnHelloWorld : (str: "Hello" | "World") => "Hello" | "World"
>e : "Hello"
}
