=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfOther.ts ===
class C { private p: string };
>C : C
>p : 文字
>类型别名 :=> 文字

var str: string;
>str : 文字
>类型别名 :=> 文字

var bool: boolean;
>bool : 真假
>类型别名 :=> 真假

var num: number;
>num : 数字
>类型别名 :=> 数字

var strOrNum: string | number;
>strOrNum : 文字 | 数字

var strOrBool: string | boolean;
>strOrBool : 文字 | 真假

var numOrBool: number | boolean
>numOrBool : 数字 | 真假

var strOrNumOrBool: string | number | boolean;
>strOrNumOrBool : 文字 | 数字 | 真假

var strOrC: string | C;
>strOrC : 文字 | C
>C : C

var numOrC: number | C;
>numOrC : 数字 | C
>C : C

var boolOrC: boolean | C;
>boolOrC : 真假 | C
>C : C

var emptyObj: {};
>emptyObj : {}

var c: C;
>c : C
>C : C

// A type guard of the form typeof x === s, 
// where s is a string literal with any value but 'string', 'number' or 'boolean',
//  - when true, removes the primitive types string, number, and boolean from the type of x, or
//  - when false, has no effect on the type of x.

if (typeof strOrC === "Object") {
>typeof strOrC === "Object" : 真假
>类型别名 :=> 真假
>typeof strOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrC : 文字 | C
>"Object" : "Object"

    c = strOrC; // C
>c = strOrC : C
>c : C
>strOrC : C
}
else {
    var r2: string = strOrC; // string
>r2 : 文字
>类型别名 :=> 文字
>strOrC : 文字
>类型别名 :=> 文字
}
if (typeof numOrC === "Object") {
>typeof numOrC === "Object" : 真假
>类型别名 :=> 真假
>typeof numOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>numOrC : 数字 | C
>"Object" : "Object"

    c = numOrC; // C
>c = numOrC : C
>c : C
>numOrC : C
}
else {
    var r3: number  = numOrC; // number
>r3 : 数字
>类型别名 :=> 数字
>numOrC : 数字
>类型别名 :=> 数字
}
if (typeof boolOrC === "Object") {
>typeof boolOrC === "Object" : 真假
>类型别名 :=> 真假
>typeof boolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>boolOrC : 真假 | C
>"Object" : "Object"

    c = boolOrC; // C
>c = boolOrC : C
>c : C
>boolOrC : C
}
else {
    var r4: boolean = boolOrC; // boolean
>r4 : 真假
>类型别名 :=> 真假
>boolOrC : 真假
>类型别名 :=> 真假
}
if (typeof strOrC === "Object" as string) { // comparison is OK with cast
>typeof strOrC === "Object" as string : 真假
>类型别名 :=> 真假
>typeof strOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrC : 文字 | C
>"Object" as string : 文字
>类型别名 :=> 文字
>"Object" : "Object"

    c = strOrC; // error: but no narrowing to C
>c = strOrC : 文字 | C
>c : C
>strOrC : 文字 | C
}
else {
    var r5: string = strOrC; // error: no narrowing to string
>r5 : 文字
>类型别名 :=> 文字
>strOrC : 文字 | C
}

if (typeof strOrNumOrBool === "Object") {
>typeof strOrNumOrBool === "Object" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : 文字 | 数字 | 真假
>"Object" : "Object"

    let q1: {} = strOrNumOrBool; // {}
>q1 : {}
>strOrNumOrBool : 不及
>类型别名 :=> 不及
}
else {
    let q2: string | number | boolean = strOrNumOrBool; // string | number | boolean
>q2 : 文字 | 数字 | 真假
>strOrNumOrBool : 文字 | 数字 | 真假
}

// A type guard of the form typeof x !== s, where s is a string literal,
//  - when true, narrows the type of x by typeof x === s when false, or
//  - when false, narrows the type of x by typeof x === s when true.
if (typeof strOrC !== "Object") {
>typeof strOrC !== "Object" : 真假
>类型别名 :=> 真假
>typeof strOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrC : 文字 | C
>"Object" : "Object"

    var r2: string = strOrC; // string
>r2 : 文字
>类型别名 :=> 文字
>strOrC : 文字
>类型别名 :=> 文字
}
else {
    c = strOrC; // C
>c = strOrC : C
>c : C
>strOrC : C
}
if (typeof numOrC !== "Object") {
>typeof numOrC !== "Object" : 真假
>类型别名 :=> 真假
>typeof numOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>numOrC : 数字 | C
>"Object" : "Object"

    var r3: number = numOrC; // number
>r3 : 数字
>类型别名 :=> 数字
>numOrC : 数字
>类型别名 :=> 数字
}
else {
    c = numOrC; // C
>c = numOrC : C
>c : C
>numOrC : C
}
if (typeof boolOrC !== "Object") {
>typeof boolOrC !== "Object" : 真假
>类型别名 :=> 真假
>typeof boolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>boolOrC : 真假 | C
>"Object" : "Object"

    var r4: boolean = boolOrC; // boolean
>r4 : 真假
>类型别名 :=> 真假
>boolOrC : 真假
>类型别名 :=> 真假
}
else {
    c = boolOrC; // C
>c = boolOrC : C
>c : C
>boolOrC : C
}

if (typeof strOrNumOrBool !== "Object") {
>typeof strOrNumOrBool !== "Object" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : 文字 | 数字 | 真假
>"Object" : "Object"

    let q1: string | number | boolean = strOrNumOrBool; // string | number | boolean
>q1 : 文字 | 数字 | 真假
>strOrNumOrBool : 文字 | 数字 | 真假
}
else {
    let q2: {} = strOrNumOrBool; // {}
>q2 : {}
>strOrNumOrBool : 不及
>类型别名 :=> 不及
}

