=== tests/cases/compiler/interfaceDeclaration4.ts ===
// Import this module when test harness supports external modules. Also remove the internal module below.
// import Foo = require("interfaceDeclaration5")
module Foo {
>Foo : 类为 Foo

    export interface I1 { item: string; }
>I1 : I1
>item : 文字
>类型别名 :=> 文字

    export class C1 { }
>C1 : C1
}

class C1 implements Foo.I1 {
>C1 : C1
>Foo.I1 : 任意
>类型别名 :=> 任意
>Foo : 类为 Foo
>I1 : Foo.I1

	public item:string;
>item : 文字
>类型别名 :=> 文字
}

// Allowed
interface I2 extends Foo.I1 {
>I2 : I2
>Foo.I1 : 任意
>类型别名 :=> 任意
>Foo : 类为 Foo
>I1 : Foo.I1

	item:string;
>item : 文字
>类型别名 :=> 文字
}

// Negative Case
interface I3 extends Foo.I1 {
>I3 : I3
>Foo.I1 : 任意
>类型别名 :=> 任意
>Foo : 类为 Foo
>I1 : Foo.I1

    item:number;
>item : 数字
>类型别名 :=> 数字
}

interface I4 extends Foo.I1 {
>I4 : I4
>Foo.I1 : 任意
>类型别名 :=> 任意
>Foo : 类为 Foo
>I1 : Foo.I1

    token:string;
>token : 文字
>类型别名 :=> 文字
}

// Err - not implemented item
class C2 implements I4 {
>C2 : C2
>I4 : I4

    public token: string;
>token : 文字
>类型别名 :=> 文字
}

interface I5 extends Foo { }
>I5 : I5
>Foo : Foo

// Negative case
interface I6 extends Foo.C1 { }
>I6 : I6
>Foo.C1 : 任意
>类型别名 :=> 任意
>Foo : 类为 Foo
>C1 : Foo.C1

class C3 implements Foo.I1 { }
>C3 : C3
>Foo.I1 : 任意
>类型别名 :=> 任意
>Foo : 类为 Foo
>I1 : Foo.I1

// Negative case 
interface Foo.I1 { }
>Foo : Foo
>I1 : 任意
>类型别名 :=> 任意

