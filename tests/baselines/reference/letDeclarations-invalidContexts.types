=== tests/cases/compiler/letDeclarations-invalidContexts.ts ===
// Errors, let must be defined inside a block
if (true) 
>true : true
>类型别名 :=> 为真

    let l1 = 0;
>l1 : number
>类型别名 :=> 数字
>0 : 0

else 
    let l2 = 0;
>l2 : number
>类型别名 :=> 数字
>0 : 0

while (true) 
>true : true
>类型别名 :=> 为真

    let l3 = 0;
>l3 : number
>类型别名 :=> 数字
>0 : 0

do 
    let l4 = 0;
>l4 : number
>类型别名 :=> 数字
>0 : 0

while (true);
>true : true
>类型别名 :=> 为真

var obj;
>obj : any
>类型别名 :=> 任意

with (obj) 
>obj : any
>类型别名 :=> 任意

    let l5 = 0;
>l5 : any
>类型别名 :=> 任意
>0 : any
>类型别名 :=> 任意

for (var i = 0; i < 10; i++)
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 10 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>10 : 10
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    let l6 = 0;
>l6 : number
>类型别名 :=> 数字
>0 : 0

for (var i2 in {}) 
>i2 : string
>类型别名 :=> 文字
>{} : {}

    let l7 = 0;
>l7 : number
>类型别名 :=> 数字
>0 : 0

if (true) 
>true : true
>类型别名 :=> 为真

    label: let l8 = 0;
>label : any
>类型别名 :=> 任意
>l8 : number
>类型别名 :=> 数字
>0 : 0

while (false)
>false : false
>类型别名 :=> 为假

    label2: label3: label4: let l9 = 0;
>label2 : any
>类型别名 :=> 任意
>label3 : any
>类型别名 :=> 任意
>label4 : any
>类型别名 :=> 任意
>l9 : number
>类型别名 :=> 数字
>0 : 0




