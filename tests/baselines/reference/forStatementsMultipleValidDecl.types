=== tests/cases/conformance/statements/forStatements/forStatementsMultipleValidDecl.ts ===
// all expected to be valid

for (var x: number; ;) { }
>x : 数字
>类型别名 :=> 数字

for (var x = 2; ;) { }
>x : 数字
>类型别名 :=> 数字
>2 : 2

for (var x = <number>undefined; ;) { }
>x : 数字
>类型别名 :=> 数字
><number>undefined : 数字
>类型别名 :=> 数字
>undefined : 未定
>类型别名 :=> 未定

// new declaration space, making redeclaring x as a string valid
function declSpace() {
>declSpace : () => 无值

    for (var x = 'this is a string'; ;) { }
>x : 文字
>类型别名 :=> 文字
>'this is a string' : "this is a string"
}
interface Point { x: number; y: number; }
>Point : Point
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

for (var p: Point; ;) { }
>p : Point
>Point : Point

for (var p = { x: 1, y: 2 }; ;) { }
>p : Point
>{ x: 1, y: 2 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

for (var p: Point = { x: 0, y: undefined }; ;) { }
>p : Point
>Point : Point
>{ x: 0, y: undefined } : { x: 数字; y: 未定; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

for (var p = { x: 1, y: <number>undefined }; ;) { }
>p : Point
>{ x: 1, y: <number>undefined } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
><number>undefined : 数字
>类型别名 :=> 数字
>undefined : 未定
>类型别名 :=> 未定

for (var p: { x: number; y: number; } = { x: 1, y: 2 }; ;) { }
>p : Point
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>{ x: 1, y: 2 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

for (var p = <{ x: number; y: number; }>{ x: 0, y: undefined }; ;) { }
>p : Point
><{ x: number; y: number; }>{ x: 0, y: undefined } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>{ x: 0, y: undefined } : { x: 数字; y: 未定; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

for (var p: typeof p; ;) { }
>p : Point
>p : Point

for (var fn = function (s: string) { return 42; }; ;) { }
>fn : (s: 文字) => 数字
>function (s: string) { return 42; } : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>42 : 42

for (var fn = (s: string) => 3; ;) { }
>fn : (s: 文字) => 数字
>(s: string) => 3 : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>3 : 3

for (var fn: (s: string) => number; ;) { }
>fn : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字

for (var fn: { (s: string): number }; ;) { }
>fn : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字

for (var fn = <(s: string) => number> null; ;) { }
>fn : (s: 文字) => 数字
><(s: string) => number> null : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

for (var fn: typeof fn; ;) { }
>fn : (s: 文字) => 数字
>fn : (s: 文字) => 数字

for (var a: string[]; ;) { }
>a : 文字[]

for (var a = ['a', 'b']; ;) { }
>a : 文字[]
>['a', 'b'] : 文字[]
>'a' : "a"
>'b' : "b"

for (var a = <string[]>[]; ;) { }
>a : 文字[]
><string[]>[] : 文字[]
>[] : 未定[]

for (var a: string[] = []; ;) { }
>a : 文字[]
>[] : 未定[]

for (var a = new Array<string>(); ;) { }
>a : 文字[]
>new Array<string>() : 文字[]
>Array : ArrayConstructor

for (var a: typeof a; ;) { }
>a : 文字[]
>a : 文字[]

