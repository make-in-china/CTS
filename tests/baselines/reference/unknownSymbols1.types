=== tests/cases/compiler/unknownSymbols1.ts ===
var x = asdf;
>x : 任意
>类型别名 :=> 任意
>asdf : 任意
>类型别名 :=> 任意

var y: asdf;
>y : 任意
>类型别名 :=> 任意
>asdf : No type information available!

function foo(x: asdf, y: number): asdf { }
>foo : (x: 任意, y: 数字) => 任意
>x : 任意
>类型别名 :=> 任意
>asdf : No type information available!
>y : 数字
>类型别名 :=> 数字
>asdf : No type information available!

function foo2() {
>foo2 : () => 任意

    return asdf;
>asdf : 任意
>类型别名 :=> 任意
}

var z = <asdf>x; // should be an error
>z : 任意
>类型别名 :=> 任意
><asdf>x : 任意
>类型别名 :=> 任意
>asdf : No type information available!
>x : 任意
>类型别名 :=> 任意

class C<T> {
>C : C<T>
>T : T

    foo: asdf;
>foo : 任意
>类型别名 :=> 任意
>asdf : No type information available!

    bar: C<asdf>;
>bar : C<任意>
>C : C<T>
>asdf : No type information available!
}

class C2 implements asdf { }
>C2 : C2
>asdf : No type information available!

interface I extends adsf { }
>I : I
>adsf : No type information available!

class C3 { constructor(x: any) { } }
>C3 : C3
>x : 任意
>类型别名 :=> 任意

class C4 extends C3 {
>C4 : C4
>C3 : C3

    constructor() {
        super(asdf);
>super(asdf) : 无值
>类型别名 :=> 无值
>super : 类为 C3
>asdf : 任意
>类型别名 :=> 任意
    }
}

var x2 = this.asdf; // no error, this is any
>x2 : 任意
>类型别名 :=> 任意
>this.asdf : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>asdf : 任意
>类型别名 :=> 任意

class C5 {
>C5 : C5

    constructor() {
        this.asdf = asdf;
>this.asdf = asdf : 任意
>类型别名 :=> 任意
>this.asdf : 任意
>类型别名 :=> 任意
>this : 本体
>asdf : 任意
>类型别名 :=> 任意
>asdf : 任意
>类型别名 :=> 任意
    }
}
