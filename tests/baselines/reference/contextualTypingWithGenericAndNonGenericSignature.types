=== tests/cases/compiler/contextualTypingWithGenericAndNonGenericSignature.ts ===
//•	If e is a FunctionExpression or ArrowFunctionExpression with no type parameters and no parameter or return type annotations, and T is a function type with EXACTLY ONE non - generic call signature, then any inferences made for type parameters referenced by the parameters of T’s call signature are fixed(section 4.12.2) and e is processed with the contextual type T, as described in section 4.9.3.

var f2: {
>f2 : { (x: 文字, y: 数字): 文字; <T, U>(x: T, y: U): T; }

    (x: string, y: number): string;
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字

    <T, U>(x: T, y: U): T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

};

f2 = (x, y) => { return x }
>f2 = (x, y) => { return x } : (x: 任意, y: 任意) => 任意
>f2 : { (x: 文字, y: 数字): 文字; <T, U>(x: T, y: U): T; }
>(x, y) => { return x } : (x: 任意, y: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var f3: {
>f3 : { <T, U>(x: T, y: U): T; (x: 文字, y: 数字): 文字; }

    <T, U>(x: T, y: U): T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

    (x: string, y: number): string;
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字

};

f3 = (x, y) => { return x }
>f3 = (x, y) => { return x } : (x: 任意, y: 任意) => 任意
>f3 : { <T, U>(x: T, y: U): T; (x: 文字, y: 数字): 文字; }
>(x, y) => { return x } : (x: 任意, y: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

