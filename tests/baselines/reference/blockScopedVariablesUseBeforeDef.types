=== tests/cases/compiler/blockScopedVariablesUseBeforeDef.ts ===
function foo0() {
>foo0 : () => 无值

    let a = x;
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo1() {
>foo1 : () => 无值

    let a = () => x;
>a : () => 任意
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo2() {
>foo2 : () => 无值

    let a = function () { return x; }
>a : () => 任意
>function () { return x; } : () => 任意
>x : 任意
>类型别名 :=> 任意

    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo3() {
>foo3 : () => 无值

    class X {
>X : X

        m() { return x;}
>m : () => 任意
>x : 任意
>类型别名 :=> 任意
    }
    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo4() {
>foo4 : () => 无值

    let y = class {
>y : 类为 y
>class {        m() { return x; }    } : 类为 y

        m() { return x; }
>m : () => 任意
>x : 任意
>类型别名 :=> 任意

    };
    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo5() {
>foo5 : () => 无值

    let x = () => y;
>x : () => () => 任意
>() => y : () => () => 任意
>y : () => () => 任意

    let y = () => x;
>y : () => () => 任意
>() => x : () => () => 任意
>x : () => () => 任意
}

function foo6() {
>foo6 : () => 无值

    function f() {
>f : () => 任意

        return x;
>x : 任意
>类型别名 :=> 任意
    }
    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo7() {
>foo7 : () => 无值

    class A {
>A : A

        a = x;
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo8() {
>foo8 : () => 无值

    let y = class {
>y : 类为 y
>class {        a = x;    } : 类为 y

        a = x;
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo9() {
>foo9 : () => 无值

    let y = class {
>y : 类为 y
>class {        static a = x;    } : 类为 y

        static a = x;
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo10() {
>foo10 : () => 无值

    class A {
>A : A

        static a = x;
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo11() {
>foo11 : () => 无值

    function f () {
>f : () => 无值

        let y = class {
>y : 类为 y
>class {            static a = x;        } : 类为 y

            static a = x;
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
        }
    }
    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo12() {
>foo12 : () => 无值

    function f () {
>f : () => 无值

        let y = class {
>y : 类为 y
>class {            a;            constructor() {                this.a = x;            }        } : 类为 y

            a;
>a : 任意
>类型别名 :=> 任意

            constructor() {
                this.a = x;
>this.a = x : 任意
>类型别名 :=> 任意
>this.a : 任意
>类型别名 :=> 任意
>this : 本体
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
            }
        }
    }
    let x;
>x : 任意
>类型别名 :=> 任意
}

function foo13() {
>foo13 : () => 无值

    let a = {
>a : { 只读 a: 任意; }
>{        get a() { return x }     } : { 只读 a: 任意; }

        get a() { return x } 
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
    let x
>x : 任意
>类型别名 :=> 任意
}

function foo14() {
>foo14 : () => 无值

    let a = {
>a : { a: 任意; }
>{        a: x     } : { a: 任意; }

        a: x 
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
    let x
>x : 任意
>类型别名 :=> 任意
}
