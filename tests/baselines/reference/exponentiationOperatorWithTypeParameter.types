=== tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithTypeParameter.ts ===
// type parameter type is not valid for arithmetic operand
function foo<T>(t: T) {
>foo : <T>(t: T) => 无值
>T : T
>t : T
>T : T

    var a: any;
>a : 任意
>类型别名 :=> 任意

    var b: boolean;
>b : 真假
>类型别名 :=> 真假

    var c: number;
>c : 数字
>类型别名 :=> 数字

    var d: string;
>d : 文字
>类型别名 :=> 文字

    var e: {};
>e : {}

    var r1a1 = a ** t;
>r1a1 : 数字
>类型别名 :=> 数字
>a ** t : 数字
>类型别名 :=> 数字
>a : 任意
>类型别名 :=> 任意
>t : T

    var r2a1 = t ** a;
>r2a1 : 数字
>类型别名 :=> 数字
>t ** a : 数字
>类型别名 :=> 数字
>t : T
>a : 任意
>类型别名 :=> 任意

    var r1b1 = b ** t;
>r1b1 : 数字
>类型别名 :=> 数字
>b ** t : 数字
>类型别名 :=> 数字
>b : 真假
>类型别名 :=> 真假
>t : T

    var r2b1 = t ** b;
>r2b1 : 数字
>类型别名 :=> 数字
>t ** b : 数字
>类型别名 :=> 数字
>t : T
>b : 真假
>类型别名 :=> 真假

    var r1c1 = c ** t;
>r1c1 : 数字
>类型别名 :=> 数字
>c ** t : 数字
>类型别名 :=> 数字
>c : 数字
>类型别名 :=> 数字
>t : T

    var r2c1 = t ** c;
>r2c1 : 数字
>类型别名 :=> 数字
>t ** c : 数字
>类型别名 :=> 数字
>t : T
>c : 数字
>类型别名 :=> 数字

    var r1d1 = d ** t;
>r1d1 : 数字
>类型别名 :=> 数字
>d ** t : 数字
>类型别名 :=> 数字
>d : 文字
>类型别名 :=> 文字
>t : T

    var r2d1 = t ** d;
>r2d1 : 数字
>类型别名 :=> 数字
>t ** d : 数字
>类型别名 :=> 数字
>t : T
>d : 文字
>类型别名 :=> 文字

    var r1e1 = e ** t;
>r1e1 : 数字
>类型别名 :=> 数字
>e ** t : 数字
>类型别名 :=> 数字
>e : {}
>t : T

    var r2e1 = t ** d;
>r2e1 : 数字
>类型别名 :=> 数字
>t ** d : 数字
>类型别名 :=> 数字
>t : T
>d : 文字
>类型别名 :=> 文字

    var r1f1 = t ** t;
>r1f1 : 数字
>类型别名 :=> 数字
>t ** t : 数字
>类型别名 :=> 数字
>t : T
>t : T
}
