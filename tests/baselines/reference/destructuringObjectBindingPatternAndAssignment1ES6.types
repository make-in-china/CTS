=== tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment1ES6.ts ===
// In a destructuring assignment expression, the type of the expression on the right must be assignable to the assignment target on the left.
// An expression of type S is considered assignable to an assignment target V if one of the following is true

// V is an object assignment pattern and, for each assignment property P in V,
//      S is the type Any, or
var { a1 }: any = undefined;
>a1 : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

var { a2 }: any = {};
>a2 : 任意
>类型别名 :=> 任意
>{} : {}

// V is an object assignment pattern and, for each assignment property P in V,
//      S has an apparent property with the property name specified in
//          P of a type that is assignable to the target given in P, or
var { b1, } = { b1:1, };
>b1 : 数字
>类型别名 :=> 数字
>{ b1:1, } : { b1: 数字; }
>b1 : 数字
>类型别名 :=> 数字
>1 : 1

var { b2: { b21 } = { b21: "string" }  } = { b2: { b21: "world" } };
>b2 : 任意
>类型别名 :=> 任意
>b21 : 文字
>类型别名 :=> 文字
>{ b21: "string" } : { b21: 文字; }
>b21 : 文字
>类型别名 :=> 文字
>"string" : "string"
>{ b2: { b21: "world" } } : { b2?: { b21: 文字; }; }
>b2 : { b21: 文字; }
>{ b21: "world" } : { b21: 文字; }
>b21 : 文字
>类型别名 :=> 文字
>"world" : "world"

var {1: b3} = { 1: "string" };
>b3 : 文字
>类型别名 :=> 文字
>{ 1: "string" } : { 1: 文字; }
>"string" : "string"

var {b4 = 1}: any = { b4: 100000 };
>b4 : 任意
>类型别名 :=> 任意
>1 : 1
>{ b4: 100000 } : { b4: 数字; }
>b4 : 数字
>类型别名 :=> 数字
>100000 : 100000

var {b5: { b52 }  } = { b5: { b52 } };
>b5 : 任意
>类型别名 :=> 任意
>b52 : 任意
>类型别名 :=> 任意
>{ b5: { b52 } } : { b5: { b52: 任意; }; }
>b5 : { b52: 任意; }
>{ b52 } : { b52: 任意; }
>b52 : 任意
>类型别名 :=> 任意

// V is an object assignment pattern and, for each assignment property P in V,
//      P specifies a numeric property name and S has a numeric index signature
//          of a type that is assignable to the target given in P, or

interface F {
>F : F

    [idx: number]: boolean;
>idx : 数字
>类型别名 :=> 数字
}

function foo(): F {
>foo : () => F
>F : F

    return {
>{        1: true    } : { 1: 为真; }

        1: true
>true : 为真
>类型别名 :=> 为真

    };
}

function bar(): F {
>bar : () => F
>F : F

    return {
>{        2: true    } : { 2: 为真; }

        2: true
>true : 为真
>类型别名 :=> 为真

    };
}
var {1: c0} = foo();
>c0 : 真假
>类型别名 :=> 真假
>foo() : F
>foo : () => F

var {1: c1} = bar();
>c1 : 真假
>类型别名 :=> 真假
>bar() : F
>bar : () => F

// V is an object assignment pattern and, for each assignment property P in V,
//      S has a string index signature of a type that is assignable to the target given in P

interface F1 {
>F1 : F1

    [str: string]: number;
>str : 文字
>类型别名 :=> 文字
}

function foo1(): F1 {
>foo1 : () => F1
>F1 : F1

    return {
>{        "prop1": 2    } : { "prop1": 数字; }

        "prop1": 2
>2 : 2
    }
}

var {"prop1": d1} = foo1();
>d1 : 数字
>类型别名 :=> 数字
>foo1() : F1
>foo1 : () => F1

var {"prop2": d1} = foo1();
>d1 : 数字
>类型别名 :=> 数字
>foo1() : F1
>foo1 : () => F1

