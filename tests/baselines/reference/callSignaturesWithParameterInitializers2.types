=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithParameterInitializers2.ts ===
// Optional parameters allow initializers only in implementation signatures
// All the below declarations are errors

function foo(x = 2);
>foo : (x?: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>2 : 2

function foo(x = 1) { }
>foo : (x?: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>1 : 1

foo(1);
>foo(1) : 任意
>类型别名 :=> 任意
>foo : (x?: 数字) => 任意
>1 : 1

foo();
>foo() : 任意
>类型别名 :=> 任意
>foo : (x?: 数字) => 任意

class C {
>C : C

    foo(x = 2);
>foo : (x?: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>2 : 2

    foo(x = 1) { }
>foo : (x?: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>1 : 1
}

var c: C;
>c : C
>C : C

c.foo();
>c.foo() : 任意
>类型别名 :=> 任意
>c.foo : (x?: 数字) => 任意
>c : C
>foo : (x?: 数字) => 任意

c.foo(1);
>c.foo(1) : 任意
>类型别名 :=> 任意
>c.foo : (x?: 数字) => 任意
>c : C
>foo : (x?: 数字) => 任意
>1 : 1

var b = {
>b : { foo(x?: 数字): 任意; foo(x?: 数字): 无值; }
>{    foo(x = 1), // error    foo(x = 1) { }, // error} : { foo(x?: 数字): 任意; foo(x?: 数字): 无值; }

    foo(x = 1), // error
>foo : { (x?: 数字): 任意; (x?: 数字): 无值; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

    foo(x = 1) { }, // error
>foo : { (x?: 数字): 任意; (x?: 数字): 无值; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
}

b.foo();
>b.foo() : 任意
>类型别名 :=> 任意
>b.foo : { (x?: 数字): 任意; (x?: 数字): 无值; }
>b : { foo(x?: 数字): 任意; foo(x?: 数字): 无值; }
>foo : { (x?: 数字): 任意; (x?: 数字): 无值; }

b.foo(1);
>b.foo(1) : 任意
>类型别名 :=> 任意
>b.foo : { (x?: 数字): 任意; (x?: 数字): 无值; }
>b : { foo(x?: 数字): 任意; foo(x?: 数字): 无值; }
>foo : { (x?: 数字): 任意; (x?: 数字): 无值; }
>1 : 1

