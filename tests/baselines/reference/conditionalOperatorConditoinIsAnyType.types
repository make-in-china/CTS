=== tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditoinIsAnyType.ts ===
//Cond ? Expr1 : Expr2,  Cond is of any type, Expr1 and Expr2 have the same type
var condAny: any;
>condAny : 任意
>类型别名 :=> 任意

var x: any;
>x : 任意
>类型别名 :=> 任意

var exprAny1: any;
>exprAny1 : 任意
>类型别名 :=> 任意

var exprBoolean1: boolean;
>exprBoolean1 : 真假
>类型别名 :=> 真假

var exprNumber1: number;
>exprNumber1 : 数字
>类型别名 :=> 数字

var exprString1: string;
>exprString1 : 文字
>类型别名 :=> 文字

var exprIsObject1: Object;
>exprIsObject1 : Object
>Object : Object

var exprAny2: any;
>exprAny2 : 任意
>类型别名 :=> 任意

var exprBoolean2: boolean;
>exprBoolean2 : 真假
>类型别名 :=> 真假

var exprNumber2: number;
>exprNumber2 : 数字
>类型别名 :=> 数字

var exprString2: string;
>exprString2 : 文字
>类型别名 :=> 文字

var exprIsObject2: Object;
>exprIsObject2 : Object
>Object : Object

//Cond is an any type variable
condAny ? exprAny1 : exprAny2;
>condAny ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>condAny : 任意
>类型别名 :=> 任意
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

condAny ? exprBoolean1 : exprBoolean2;
>condAny ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>condAny : 任意
>类型别名 :=> 任意
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

condAny ? exprNumber1 : exprNumber2;
>condAny ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>condAny : 任意
>类型别名 :=> 任意
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

condAny ? exprString1 : exprString2;
>condAny ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>condAny : 任意
>类型别名 :=> 任意
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

condAny ? exprIsObject1 : exprIsObject2;
>condAny ? exprIsObject1 : exprIsObject2 : Object
>condAny : 任意
>类型别名 :=> 任意
>exprIsObject1 : Object
>exprIsObject2 : Object

condAny ? exprString1 : exprBoolean1; // union
>condAny ? exprString1 : exprBoolean1 : 文字 | 真假
>condAny : 任意
>类型别名 :=> 任意
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Cond is an any type literal
null ? exprAny1 : exprAny2;
>null ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

null ? exprBoolean1 : exprBoolean2;
>null ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

undefined ? exprNumber1 : exprNumber2;
>undefined ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>undefined : 未定
>类型别名 :=> 未定
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

[null, undefined] ? exprString1 : exprString2;
>[null, undefined] ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>[null, undefined] : 空值[]
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

[null, undefined] ? exprIsObject1 : exprIsObject2;
>[null, undefined] ? exprIsObject1 : exprIsObject2 : Object
>[null, undefined] : 空值[]
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定
>exprIsObject1 : Object
>exprIsObject2 : Object

undefined ? exprString1 : exprBoolean1; // union
>undefined ? exprString1 : exprBoolean1 : 文字 | 真假
>undefined : 未定
>类型别名 :=> 未定
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Cond is an any type expression
x.doSomeThing() ? exprAny1 : exprAny2;
>x.doSomeThing() ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>x.doSomeThing() : 任意
>类型别名 :=> 任意
>x.doSomeThing : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>doSomeThing : 任意
>类型别名 :=> 任意
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

x("x") ? exprBoolean1 : exprBoolean2;
>x("x") ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>x("x") : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>"x" : "x"
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

x(x) ? exprNumber1 : exprNumber2;
>x(x) ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>x(x) : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

x("x") ? exprString1 : exprString2;
>x("x") ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>x("x") : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>"x" : "x"
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

x.doSomeThing() ? exprIsObject1 : exprIsObject2;
>x.doSomeThing() ? exprIsObject1 : exprIsObject2 : Object
>x.doSomeThing() : 任意
>类型别名 :=> 任意
>x.doSomeThing : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>doSomeThing : 任意
>类型别名 :=> 任意
>exprIsObject1 : Object
>exprIsObject2 : Object

x.doSomeThing() ? exprString1 : exprBoolean1; // union
>x.doSomeThing() ? exprString1 : exprBoolean1 : 文字 | 真假
>x.doSomeThing() : 任意
>类型别名 :=> 任意
>x.doSomeThing : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>doSomeThing : 任意
>类型别名 :=> 任意
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Results shoud be same as Expr1 and Expr2
var resultIsAny1 = condAny ? exprAny1 : exprAny2;
>resultIsAny1 : 任意
>类型别名 :=> 任意
>condAny ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>condAny : 任意
>类型别名 :=> 任意
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean1 = condAny ? exprBoolean1 : exprBoolean2;
>resultIsBoolean1 : 真假
>类型别名 :=> 真假
>condAny ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>condAny : 任意
>类型别名 :=> 任意
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber1 = condAny ? exprNumber1 : exprNumber2;
>resultIsNumber1 : 数字
>类型别名 :=> 数字
>condAny ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>condAny : 任意
>类型别名 :=> 任意
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString1 = condAny ? exprString1 : exprString2;
>resultIsString1 : 文字
>类型别名 :=> 文字
>condAny ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>condAny : 任意
>类型别名 :=> 任意
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject1 = condAny ? exprIsObject1 : exprIsObject2;
>resultIsObject1 : Object
>condAny ? exprIsObject1 : exprIsObject2 : Object
>condAny : 任意
>类型别名 :=> 任意
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean1 = condAny ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean1 : 文字 | 真假
>condAny ? exprString1 : exprBoolean1 : 文字 | 真假
>condAny : 任意
>类型别名 :=> 任意
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsAny2 = null ? exprAny1 : exprAny2;
>resultIsAny2 : 任意
>类型别名 :=> 任意
>null ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean2 = null ? exprBoolean1 : exprBoolean2;
>resultIsBoolean2 : 真假
>类型别名 :=> 真假
>null ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber2 = undefined ? exprNumber1 : exprNumber2;
>resultIsNumber2 : 数字
>类型别名 :=> 数字
>undefined ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>undefined : 未定
>类型别名 :=> 未定
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString2 = [null, undefined] ? exprString1 : exprString2;
>resultIsString2 : 文字
>类型别名 :=> 文字
>[null, undefined] ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>[null, undefined] : 空值[]
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject2 = [null, undefined] ? exprIsObject1 : exprIsObject2;
>resultIsObject2 : Object
>[null, undefined] ? exprIsObject1 : exprIsObject2 : Object
>[null, undefined] : 空值[]
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean2 = null ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean2 : 文字 | 真假
>null ? exprString1 : exprBoolean1 : 文字 | 真假
>null : 空值
>类型别名 :=> 空值
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsStringOrBoolean3 = undefined ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean3 : 文字 | 真假
>undefined ? exprString1 : exprBoolean1 : 文字 | 真假
>undefined : 未定
>类型别名 :=> 未定
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsStringOrBoolean4 = [null, undefined] ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean4 : 文字 | 真假
>[null, undefined] ? exprString1 : exprBoolean1 : 文字 | 真假
>[null, undefined] : 空值[]
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsAny3 = x.doSomeThing() ? exprAny1 : exprAny2;
>resultIsAny3 : 任意
>类型别名 :=> 任意
>x.doSomeThing() ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>x.doSomeThing() : 任意
>类型别名 :=> 任意
>x.doSomeThing : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>doSomeThing : 任意
>类型别名 :=> 任意
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean3 = x("x") ? exprBoolean1 : exprBoolean2;
>resultIsBoolean3 : 真假
>类型别名 :=> 真假
>x("x") ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>x("x") : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>"x" : "x"
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber3 = x(x) ? exprNumber1 : exprNumber2;
>resultIsNumber3 : 数字
>类型别名 :=> 数字
>x(x) ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>x(x) : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString3 = x("x") ? exprString1 : exprString2;
>resultIsString3 : 文字
>类型别名 :=> 文字
>x("x") ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>x("x") : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>"x" : "x"
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject3 = x.doSomeThing() ? exprIsObject1 : exprIsObject2;
>resultIsObject3 : Object
>x.doSomeThing() ? exprIsObject1 : exprIsObject2 : Object
>x.doSomeThing() : 任意
>类型别名 :=> 任意
>x.doSomeThing : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>doSomeThing : 任意
>类型别名 :=> 任意
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean5 = x.doSomeThing() ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean5 : 文字 | 真假
>x.doSomeThing() ? exprString1 : exprBoolean1 : 文字 | 真假
>x.doSomeThing() : 任意
>类型别名 :=> 任意
>x.doSomeThing : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>doSomeThing : 任意
>类型别名 :=> 任意
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

