=== tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByConstraints3.ts ===
// Two call or construct signatures are considered identical when they have the same number of type parameters and, considering those 
// parameters pairwise identical, have identical type parameter constraints, identical number of parameters with identical kind(required, 
// optional or rest) and types, and identical return types.

class One { foo: string }
>One : One
>foo : 文字
>类型别名 :=> 文字

class Two { foo: string }
>Two : Two
>foo : 文字
>类型别名 :=> 文字

interface Three { foo: string }
>Three : Three
>foo : 文字
>类型别名 :=> 文字

interface Four<T> { foo: T }
>Four : Four<T>
>T : T
>foo : T
>T : T

interface Five<T> extends Four<T> { }
>Five : Five<T>
>T : T
>Four : Four<T>
>T : T

interface Six<T, U> {
>Six : Six<T, U>
>T : T
>U : U

    foo: T;
>foo : T
>T : T
}

class A {
>A : A

    foo<T extends U, U extends One>(x: T, y: U): string { return null; }
>foo : <T 扩展 U, U 扩展 One>(x: T, y: U) => 文字
>T : T
>U : U
>U : U
>One : One
>x : T
>T : T
>y : U
>U : U
>null : 空值
>类型别名 :=> 空值
}

class B<T extends U, U extends Two> {
>B : B<T, U>
>T : T
>U : U
>U : U
>Two : Two

    foo(x: T, y: U): string { return null; }
>foo : (x: T, y: U) => 文字
>x : T
>T : T
>y : U
>U : U
>null : 空值
>类型别名 :=> 空值
}

class C<T extends U, U extends Three> {
>C : C<T, U>
>T : T
>U : U
>U : U
>Three : Three

    foo(x: T, y: U): string { return null; }
>foo : (x: T, y: U) => 文字
>x : T
>T : T
>y : U
>U : U
>null : 空值
>类型别名 :=> 空值
}

class D<T extends U, U extends Four<string>> {
>D : D<T, U>
>T : T
>U : U
>U : U
>Four : Four<T>

    foo(x: T, y: U): string { return null; }
>foo : (x: T, y: U) => 文字
>x : T
>T : T
>y : U
>U : U
>null : 空值
>类型别名 :=> 空值
}

interface I<T extends U, U extends Five<string>> {
>I : I<T, U>
>T : T
>U : U
>U : U
>Five : Five<T>

    foo(x: T, y: U): string;
>foo : (x: T, y: U) => 文字
>x : T
>T : T
>y : U
>U : U
}

interface I2 {
>I2 : I2

    foo<T extends U, U extends Six<string, string>>(x: T, y: U): string;
>foo : <T 扩展 U, U 扩展 Six<文字, 文字>>(x: T, y: U) => 文字
>T : T
>U : U
>U : U
>Six : Six<T, U>
>x : T
>T : T
>y : U
>U : U
}

var a: { foo<T extends U, U extends One>(x: T, y: U): string }
>a : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }
>foo : <T 扩展 U, U 扩展 One>(x: T, y: U) => 文字
>T : T
>U : U
>U : U
>One : One
>x : T
>T : T
>y : U
>U : U

var b = { foo<T extends U, U extends Two>(x: T, y: U) { return ''; } };
>b : { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }
>{ foo<T extends U, U extends Two>(x: T, y: U) { return ''; } } : { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }
>foo : <T 扩展 U, U 扩展 Two>(x: T, y: U) => 文字
>T : T
>U : U
>U : U
>Two : Two
>x : T
>T : T
>y : U
>U : U
>'' : ""

function foo1(x: A);
>foo1 : { (x: A): 任意; (x: A): 任意; }
>x : A
>A : A

function foo1(x: A); // error
>foo1 : { (x: A): 任意; (x: A): 任意; }
>x : A
>A : A

function foo1(x: any) { }
>foo1 : { (x: A): 任意; (x: A): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo1b(x: B<Two, Two>);
>foo1b : { (x: B<Two, Two>): 任意; (x: B<Two, Two>): 任意; }
>x : B<Two, Two>
>B : B<T, U>
>Two : Two
>Two : Two

function foo1b(x: B<Two, Two>); // error
>foo1b : { (x: B<Two, Two>): 任意; (x: B<Two, Two>): 任意; }
>x : B<Two, Two>
>B : B<T, U>
>Two : Two
>Two : Two

function foo1b(x: any) { }
>foo1b : { (x: B<Two, Two>): 任意; (x: B<Two, Two>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo1c(x: C<Three, Three>);
>foo1c : { (x: C<Three, Three>): 任意; (x: C<Three, Three>): 任意; }
>x : C<Three, Three>
>C : C<T, U>
>Three : Three
>Three : Three

function foo1c(x: C<Three, Three>); // error
>foo1c : { (x: C<Three, Three>): 任意; (x: C<Three, Three>): 任意; }
>x : C<Three, Three>
>C : C<T, U>
>Three : Three
>Three : Three

function foo1c(x: any) { }
>foo1c : { (x: C<Three, Three>): 任意; (x: C<Three, Three>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo2(x: I<Five<string>, Five<string>>);
>foo2 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: I<Five<文字>, Five<文字>>): 任意; }
>x : I<Five<文字>, Five<文字>>
>I : I<T, U>
>Five : Five<T>
>Five : Five<T>

function foo2(x: I<Five<string>, Five<string>>); // error
>foo2 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: I<Five<文字>, Five<文字>>): 任意; }
>x : I<Five<文字>, Five<文字>>
>I : I<T, U>
>Five : Five<T>
>Five : Five<T>

function foo2(x: any) { }
>foo2 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: I<Five<文字>, Five<文字>>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo3(x: typeof a);
>foo3 : { (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }
>a : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }

function foo3(x: typeof a); // error
>foo3 : { (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }
>a : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }

function foo3(x: any) { }
>foo3 : { (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo4(x: typeof b);
>foo4 : { (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; }
>x : { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }
>b : { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }

function foo4(x: typeof b); // error
>foo4 : { (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; }
>x : { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }
>b : { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }

function foo4(x: any) { }
>foo4 : { (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo5(x: A);
>foo5 : { (x: A): 任意; (x: B<Two, Two>): 任意; }
>x : A
>A : A

function foo5(x: B<Two, Two>); // ok
>foo5 : { (x: A): 任意; (x: B<Two, Two>): 任意; }
>x : B<Two, Two>
>B : B<T, U>
>Two : Two
>Two : Two

function foo5(x: any) { }
>foo5 : { (x: A): 任意; (x: B<Two, Two>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo5b(x: A);
>foo5b : { (x: A): 任意; (x: C<Three, Three>): 任意; }
>x : A
>A : A

function foo5b(x: C<Three, Three>); // ok
>foo5b : { (x: A): 任意; (x: C<Three, Three>): 任意; }
>x : C<Three, Three>
>C : C<T, U>
>Three : Three
>Three : Three

function foo5b(x: any) { }
>foo5b : { (x: A): 任意; (x: C<Three, Three>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo5c(x: C<Three, Three>);
>foo5c : { (x: C<Three, Three>): 任意; (x: D<Four<文字>, Four<文字>>): 任意; }
>x : C<Three, Three>
>C : C<T, U>
>Three : Three
>Three : Three

function foo5c(x: D<Four<string>, Four<string>>); // error
>foo5c : { (x: C<Three, Three>): 任意; (x: D<Four<文字>, Four<文字>>): 任意; }
>x : D<Four<文字>, Four<文字>>
>D : D<T, U>
>Four : Four<T>
>Four : Four<T>

function foo5c(x: any) { }
>foo5c : { (x: C<Three, Three>): 任意; (x: D<Four<文字>, Four<文字>>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo6c(x: C<Three, Three>);
>foo6c : { (x: C<Three, Three>): 任意; (x: D<Four<文字>, Four<文字>>): 任意; }
>x : C<Three, Three>
>C : C<T, U>
>Three : Three
>Three : Three

function foo6c(x: D<Four<string>, Four<string>>); // error
>foo6c : { (x: C<Three, Three>): 任意; (x: D<Four<文字>, Four<文字>>): 任意; }
>x : D<Four<文字>, Four<文字>>
>D : D<T, U>
>Four : Four<T>
>Four : Four<T>

function foo6c(x: any) { }
>foo6c : { (x: C<Three, Three>): 任意; (x: D<Four<文字>, Four<文字>>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo6(x: A);
>foo6 : { (x: A): 任意; (x: I<Five<文字>, Five<文字>>): 任意; }
>x : A
>A : A

function foo6(x: I<Five<string>, Five<string>>); // ok
>foo6 : { (x: A): 任意; (x: I<Five<文字>, Five<文字>>): 任意; }
>x : I<Five<文字>, Five<文字>>
>I : I<T, U>
>Five : Five<T>
>Five : Five<T>

function foo6(x: any) { }
>foo6 : { (x: A): 任意; (x: I<Five<文字>, Five<文字>>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo7(x: A);
>foo7 : { (x: A): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : A
>A : A

function foo7(x: typeof a); // error
>foo7 : { (x: A): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }
>a : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }

function foo7(x: any) { }
>foo7 : { (x: A): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo8(x: B<Two, Two>);
>foo8 : { (x: B<Two, Two>): 任意; (x: I<Five<文字>, Five<文字>>): 任意; }
>x : B<Two, Two>
>B : B<T, U>
>Two : Two
>Two : Two

function foo8(x: I<Five<string>, Five<string>>); // error
>foo8 : { (x: B<Two, Two>): 任意; (x: I<Five<文字>, Five<文字>>): 任意; }
>x : I<Five<文字>, Five<文字>>
>I : I<T, U>
>Five : Five<T>
>Five : Five<T>

function foo8(x: any) { }
>foo8 : { (x: B<Two, Two>): 任意; (x: I<Five<文字>, Five<文字>>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo9(x: B<Two, Two>);
>foo9 : { (x: B<Two, Two>): 任意; (x: C<Three, Three>): 任意; }
>x : B<Two, Two>
>B : B<T, U>
>Two : Two
>Two : Two

function foo9(x: C<Three, Three>); // error
>foo9 : { (x: B<Two, Two>): 任意; (x: C<Three, Three>): 任意; }
>x : C<Three, Three>
>C : C<T, U>
>Three : Three
>Three : Three

function foo9(x: any) { }
>foo9 : { (x: B<Two, Two>): 任意; (x: C<Three, Three>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo10(x: B<Two, Two>);
>foo10 : { (x: B<Two, Two>): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : B<Two, Two>
>B : B<T, U>
>Two : Two
>Two : Two

function foo10(x: typeof a); // ok
>foo10 : { (x: B<Two, Two>): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }
>a : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }

function foo10(x: any) { }
>foo10 : { (x: B<Two, Two>): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo11(x: B<Two, Two>);
>foo11 : { (x: B<Two, Two>): 任意; (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; }
>x : B<Two, Two>
>B : B<T, U>
>Two : Two
>Two : Two

function foo11(x: typeof b); // ok
>foo11 : { (x: B<Two, Two>): 任意; (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; }
>x : { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }
>b : { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }

function foo11(x: any) { }
>foo11 : { (x: B<Two, Two>): 任意; (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo12(x: I<Five<string>, Five<string>>);
>foo12 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: C<Three, Three>): 任意; }
>x : I<Five<文字>, Five<文字>>
>I : I<T, U>
>Five : Five<T>
>Five : Five<T>

function foo12(x: C<Three, Three>); // error
>foo12 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: C<Three, Three>): 任意; }
>x : C<Three, Three>
>C : C<T, U>
>Three : Three
>Three : Three

function foo12(x: any) { }
>foo12 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: C<Three, Three>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo12b(x: I2);
>foo12b : { (x: I2): 任意; (x: C<Three, Three>): 任意; }
>x : I2
>I2 : I2

function foo12b(x: C<Three, Three>); // ok
>foo12b : { (x: I2): 任意; (x: C<Three, Three>): 任意; }
>x : C<Three, Three>
>C : C<T, U>
>Three : Three
>Three : Three

function foo12b(x: any) { }
>foo12b : { (x: I2): 任意; (x: C<Three, Three>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo13(x: I<Five<string>, Five<string>>);
>foo13 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : I<Five<文字>, Five<文字>>
>I : I<T, U>
>Five : Five<T>
>Five : Five<T>

function foo13(x: typeof a); // ok
>foo13 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }
>a : { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }

function foo13(x: any) { }
>foo13 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: { foo<T 扩展 U, U 扩展 One>(x: T, y: U): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo14(x: I<Five<string>, Five<string>>);
>foo14 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; }
>x : I<Five<文字>, Five<文字>>
>I : I<T, U>
>Five : Five<T>
>Five : Five<T>

function foo14(x: typeof b); // ok
>foo14 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; }
>x : { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }
>b : { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }

function foo14(x: any) { }
>foo14 : { (x: I<Five<文字>, Five<文字>>): 任意; (x: { foo<T 扩展 U, U 扩展 Two>(x: T, y: U): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo15(x: I2);
>foo15 : { (x: I2): 任意; (x: C<Three, Three>): 任意; }
>x : I2
>I2 : I2

function foo15(x: C<Three, Three>); // ok
>foo15 : { (x: I2): 任意; (x: C<Three, Three>): 任意; }
>x : C<Three, Three>
>C : C<T, U>
>Three : Three
>Three : Three

function foo15(x: any) { }
>foo15 : { (x: I2): 任意; (x: C<Three, Three>): 任意; }
>x : 任意
>类型别名 :=> 任意

