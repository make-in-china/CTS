=== tests/cases/conformance/expressions/superPropertyAccess/superPropertyAccessNoError.ts ===
//super.publicInstanceMemberFunction in constructor of derived class
//super.publicInstanceMemberFunction in instance member function of derived class
//super.publicInstanceMemberFunction in instance member accessor(get and set) of derived class
//super.publicInstanceMemberFunction in lambda in member function
//super.publicStaticMemberFunction in static member function of derived class
//super.publicStaticMemberFunction in static member accessor(get and set) of derived class


class SomeBaseClass {
>SomeBaseClass : SomeBaseClass

    public func() {
>func : () => string

        return '';
>'' : ""
    }

    static func() {
>func : () => number

        return 3;
>3 : 3
    }

    returnThis() {
>returnThis : () => this

        return this;
>this : this
    }
}

class SomeDerivedClass extends SomeBaseClass {
>SomeDerivedClass : SomeDerivedClass
>SomeBaseClass : SomeBaseClass

    constructor() {
        super();
>super() : void
>类型别名 :=> 无值
>super : typeof SomeBaseClass

        var x = super.func();
>x : string
>类型别名 :=> 文字
>super.func() : string
>类型别名 :=> 文字
>super.func : () => string
>super : SomeBaseClass
>func : () => string

        var x: string;
>x : string
>类型别名 :=> 文字
    }

    fn() {
>fn : () => void

        var x = super.func();
>x : string
>类型别名 :=> 文字
>super.func() : string
>类型别名 :=> 文字
>super.func : () => string
>super : SomeBaseClass
>func : () => string

        var x: string;
>x : string
>类型别名 :=> 文字

        var y = () => super.func();
>y : () => string
>() => super.func() : () => string
>super.func() : string
>类型别名 :=> 文字
>super.func : () => string
>super : SomeBaseClass
>func : () => string
    }

    get a() {
>a : any
>类型别名 :=> 任意

        var x = super.func();
>x : string
>类型别名 :=> 文字
>super.func() : string
>类型别名 :=> 文字
>super.func : () => string
>super : SomeBaseClass
>func : () => string

        var x: string;
>x : string
>类型别名 :=> 文字

        return null;
>null : null
>类型别名 :=> 空值
    }

    set a(n) {
>a : any
>类型别名 :=> 任意
>n : any
>类型别名 :=> 任意

        var x = super.func();
>x : string
>类型别名 :=> 文字
>super.func() : string
>类型别名 :=> 文字
>super.func : () => string
>super : SomeBaseClass
>func : () => string

        var x: string;
>x : string
>类型别名 :=> 文字
    }

    static fn() {
>fn : () => void

        var x = super.func();
>x : number
>类型别名 :=> 数字
>super.func() : number
>类型别名 :=> 数字
>super.func : () => number
>super : typeof SomeBaseClass
>func : () => number

        var x: number;
>x : number
>类型别名 :=> 数字
    }

    static get a() {
>a : any
>类型别名 :=> 任意

        var x = super.func();
>x : number
>类型别名 :=> 数字
>super.func() : number
>类型别名 :=> 数字
>super.func : () => number
>super : typeof SomeBaseClass
>func : () => number

        var x: number;
>x : number
>类型别名 :=> 数字

        return null;
>null : null
>类型别名 :=> 空值
    }

    static set a(n) {
>a : any
>类型别名 :=> 任意
>n : any
>类型别名 :=> 任意

        var x = super.func();
>x : number
>类型别名 :=> 数字
>super.func() : number
>类型别名 :=> 数字
>super.func : () => number
>super : typeof SomeBaseClass
>func : () => number

        var x: number;
>x : number
>类型别名 :=> 数字
    }

    returnThis() {
>returnThis : () => this

        return super.returnThis();
>super.returnThis() : this
>super.returnThis : () => this
>super : SomeBaseClass
>returnThis : () => this
    }
}

let instance = new SomeDerivedClass();
>instance : SomeDerivedClass
>new SomeDerivedClass() : SomeDerivedClass
>SomeDerivedClass : typeof SomeDerivedClass

instance.returnThis().fn();
>instance.returnThis().fn() : void
>类型别名 :=> 无值
>instance.returnThis().fn : () => void
>instance.returnThis() : SomeDerivedClass
>instance.returnThis : () => SomeDerivedClass
>instance : SomeDerivedClass
>returnThis : () => SomeDerivedClass
>fn : () => void

