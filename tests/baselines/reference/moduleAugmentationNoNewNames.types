=== tests/cases/compiler/map.ts ===
import { Observable } from "./observable"
>Observable : typeof Observable

(<any>Observable.prototype).map = function() { }
>(<any>Observable.prototype).map = function() { } : () => void
>(<any>Observable.prototype).map : any
>类型别名 :=> 任意
>(<any>Observable.prototype) : any
>类型别名 :=> 任意
><any>Observable.prototype : any
>类型别名 :=> 任意
>Observable.prototype : Observable<any>
>Observable : typeof Observable
>prototype : Observable<any>
>map : any
>类型别名 :=> 任意
>function() { } : () => void

declare module "./observable" {
    interface Observable<T> {
>Observable : Observable<T>
>T : T

        map<U>(proj: (e:T) => U): Observable<U>
>map : <U>(proj: (e: T) => U) => Observable<U>
>U : U
>proj : (e: T) => U
>e : T
>T : T
>U : U
>Observable : Observable<T>
>U : U
    }
    class Bar {}
>Bar : Bar

    let y: number, z: string;
>y : number
>类型别名 :=> 数字
>z : string
>类型别名 :=> 文字

    let {a: x, b: x1}: {a: number, b: number};
>a : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字
>b : any
>类型别名 :=> 任意
>x1 : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字

    module Z {}
>Z : any
>类型别名 :=> 任意
}

=== tests/cases/compiler/observable.ts ===
export declare class Observable<T> {
>Observable : Observable<T>
>T : T

    filter(pred: (e:T) => boolean): Observable<T>;
>filter : (pred: (e: T) => boolean) => Observable<T>
>pred : (e: T) => boolean
>e : T
>T : T
>Observable : Observable<T>
>T : T
}

=== tests/cases/compiler/main.ts ===
import { Observable } from "./observable"
>Observable : typeof Observable

import "./map";

let x: Observable<number>;
>x : Observable<number>
>Observable : Observable<T>

let y = x.map(x => x + 1);
>y : Observable<number>
>x.map(x => x + 1) : Observable<number>
>x.map : <U>(proj: (e: number) => U) => Observable<U>
>x : Observable<number>
>map : <U>(proj: (e: number) => U) => Observable<U>
>x => x + 1 : (x: number) => number
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1

