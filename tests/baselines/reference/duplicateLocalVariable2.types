=== tests/cases/compiler/duplicateLocalVariable2.ts ===
export class TestCase {
>TestCase : TestCase

    constructor (public name: string, public test: ()=>boolean, public errorMessageRegEx?: string) {
>name : string
>类型别名 :=> 文字
>test : () => boolean
>errorMessageRegEx : string
>类型别名 :=> 文字
    }
}
export class TestRunner { 
>TestRunner : TestRunner

    static arrayCompare(arg1: any[], arg2: any[]): boolean {
>arrayCompare : (arg1: any[], arg2: any[]) => boolean
>arg1 : any[]
>arg2 : any[]

        return false;
>false : false
>类型别名 :=> 为假
    }

    public addTest(test: TestCase) {
>addTest : (test: TestCase) => void
>test : TestCase
>TestCase : TestCase
    }
}

export var tests: TestRunner = (function () {
>tests : TestRunner
>TestRunner : TestRunner
>(function () {    var testRunner = new TestRunner();    testRunner.addTest(new TestCase("Check UTF8 encoding",        function () {            var fb: any;            fb.writeUtf8Bom();            var chars = [0x0054];            for (var i in chars) {                fb.writeUtf8CodePoint(chars[i]);            }            fb.index = 0;            var bytes = [];            for (var i = 0; i < 14; i++) {                bytes.push(fb.readByte());            }            var expected = [0xEF];            return TestRunner.arrayCompare(bytes, expected);        }));    return testRunner;})() : TestRunner
>(function () {    var testRunner = new TestRunner();    testRunner.addTest(new TestCase("Check UTF8 encoding",        function () {            var fb: any;            fb.writeUtf8Bom();            var chars = [0x0054];            for (var i in chars) {                fb.writeUtf8CodePoint(chars[i]);            }            fb.index = 0;            var bytes = [];            for (var i = 0; i < 14; i++) {                bytes.push(fb.readByte());            }            var expected = [0xEF];            return TestRunner.arrayCompare(bytes, expected);        }));    return testRunner;}) : () => TestRunner
>function () {    var testRunner = new TestRunner();    testRunner.addTest(new TestCase("Check UTF8 encoding",        function () {            var fb: any;            fb.writeUtf8Bom();            var chars = [0x0054];            for (var i in chars) {                fb.writeUtf8CodePoint(chars[i]);            }            fb.index = 0;            var bytes = [];            for (var i = 0; i < 14; i++) {                bytes.push(fb.readByte());            }            var expected = [0xEF];            return TestRunner.arrayCompare(bytes, expected);        }));    return testRunner;} : () => TestRunner

    var testRunner = new TestRunner();
>testRunner : TestRunner
>new TestRunner() : TestRunner
>TestRunner : typeof TestRunner

    testRunner.addTest(new TestCase("Check UTF8 encoding",
>testRunner.addTest(new TestCase("Check UTF8 encoding",        function () {            var fb: any;            fb.writeUtf8Bom();            var chars = [0x0054];            for (var i in chars) {                fb.writeUtf8CodePoint(chars[i]);            }            fb.index = 0;            var bytes = [];            for (var i = 0; i < 14; i++) {                bytes.push(fb.readByte());            }            var expected = [0xEF];            return TestRunner.arrayCompare(bytes, expected);        })) : void
>类型别名 :=> 无值
>testRunner.addTest : (test: TestCase) => void
>testRunner : TestRunner
>addTest : (test: TestCase) => void
>new TestCase("Check UTF8 encoding",        function () {            var fb: any;            fb.writeUtf8Bom();            var chars = [0x0054];            for (var i in chars) {                fb.writeUtf8CodePoint(chars[i]);            }            fb.index = 0;            var bytes = [];            for (var i = 0; i < 14; i++) {                bytes.push(fb.readByte());            }            var expected = [0xEF];            return TestRunner.arrayCompare(bytes, expected);        }) : TestCase
>TestCase : typeof TestCase
>"Check UTF8 encoding" : "Check UTF8 encoding"

        function () {
>function () {            var fb: any;            fb.writeUtf8Bom();            var chars = [0x0054];            for (var i in chars) {                fb.writeUtf8CodePoint(chars[i]);            }            fb.index = 0;            var bytes = [];            for (var i = 0; i < 14; i++) {                bytes.push(fb.readByte());            }            var expected = [0xEF];            return TestRunner.arrayCompare(bytes, expected);        } : () => boolean

            var fb: any;
>fb : any
>类型别名 :=> 任意

            fb.writeUtf8Bom();
>fb.writeUtf8Bom() : any
>类型别名 :=> 任意
>fb.writeUtf8Bom : any
>类型别名 :=> 任意
>fb : any
>类型别名 :=> 任意
>writeUtf8Bom : any
>类型别名 :=> 任意

            var chars = [0x0054];
>chars : number[]
>[0x0054] : number[]
>0x0054 : 84

            for (var i in chars) {
>i : string
>类型别名 :=> 文字
>chars : number[]

                fb.writeUtf8CodePoint(chars[i]);
>fb.writeUtf8CodePoint(chars[i]) : any
>类型别名 :=> 任意
>fb.writeUtf8CodePoint : any
>类型别名 :=> 任意
>fb : any
>类型别名 :=> 任意
>writeUtf8CodePoint : any
>类型别名 :=> 任意
>chars[i] : number
>类型别名 :=> 数字
>chars : number[]
>i : string
>类型别名 :=> 文字
            }
            fb.index = 0;
>fb.index = 0 : 0
>fb.index : any
>类型别名 :=> 任意
>fb : any
>类型别名 :=> 任意
>index : any
>类型别名 :=> 任意
>0 : 0

            var bytes = [];
>bytes : any[]
>[] : undefined[]

            for (var i = 0; i < 14; i++) {
>i : string
>类型别名 :=> 文字
>0 : 0
>i < 14 : boolean
>类型别名 :=> 真假
>i : string
>类型别名 :=> 文字
>14 : 14
>i++ : number
>类型别名 :=> 数字
>i : string
>类型别名 :=> 文字

                bytes.push(fb.readByte());
>bytes.push(fb.readByte()) : number
>类型别名 :=> 数字
>bytes.push : (...items: any[]) => number
>bytes : any[]
>push : (...items: any[]) => number
>fb.readByte() : any
>类型别名 :=> 任意
>fb.readByte : any
>类型别名 :=> 任意
>fb : any
>类型别名 :=> 任意
>readByte : any
>类型别名 :=> 任意
            }
            var expected = [0xEF];
>expected : number[]
>[0xEF] : number[]
>0xEF : 239

            return TestRunner.arrayCompare(bytes, expected);
>TestRunner.arrayCompare(bytes, expected) : boolean
>类型别名 :=> 真假
>TestRunner.arrayCompare : (arg1: any[], arg2: any[]) => boolean
>TestRunner : typeof TestRunner
>arrayCompare : (arg1: any[], arg2: any[]) => boolean
>bytes : any[]
>expected : number[]

        }));

    return testRunner;
>testRunner : TestRunner

})();
