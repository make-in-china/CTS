=== tests/cases/compiler/collisionArgumentsClassMethod.ts ===
class c1 {
>c1 : c1

    public foo(i: number, ...arguments) { //arguments is error
>foo : (i: 数字, ...arguments: 任意[]) => 无值
>i : 数字
>类型别名 :=> 数字
>arguments : 任意[]

        var arguments: any[]; // no error
>arguments : 任意[]
    }
    public foo1(arguments: number, ...rest) { //arguments is error
>foo1 : (arguments: 数字, ...rest: 任意[]) => 无值
>arguments : 数字
>类型别名 :=> 数字
>rest : 任意[]

        var arguments = 10; // no error
>arguments : 数字
>类型别名 :=> 数字
>10 : 10
    }
    public fooNoError(arguments: number) { // no error
>fooNoError : (arguments: 数字) => 无值
>arguments : 数字
>类型别名 :=> 数字

        var arguments = 10; // no error
>arguments : 数字
>类型别名 :=> 数字
>10 : 10
    }
    public f4(i: number, ...arguments); // no codegen no error
>f4 : { (i: 数字, ...arguments: 任意[]): 任意; (i: 文字, ...arguments: 任意[]): 任意; }
>i : 数字
>类型别名 :=> 数字
>arguments : 任意[]

    public f4(i: string, ...arguments); // no codegen no error
>f4 : { (i: 数字, ...arguments: 任意[]): 任意; (i: 文字, ...arguments: 任意[]): 任意; }
>i : 文字
>类型别名 :=> 文字
>arguments : 任意[]

    public f4(i: any, ...arguments) { // error
>f4 : { (i: 数字, ...arguments: 任意[]): 任意; (i: 文字, ...arguments: 任意[]): 任意; }
>i : 任意
>类型别名 :=> 任意
>arguments : 任意[]

        var arguments: any[]; // no error
>arguments : 任意[]
    }
    public f41(arguments: number, ...rest); // no codegen no error
>f41 : { (arguments: 数字, ...rest: 任意[]): 任意; (arguments: 文字, ...rest: 任意[]): 任意; }
>arguments : 数字
>类型别名 :=> 数字
>rest : 任意[]

    public f41(arguments: string, ...rest); // no codegen no error
>f41 : { (arguments: 数字, ...rest: 任意[]): 任意; (arguments: 文字, ...rest: 任意[]): 任意; }
>arguments : 文字
>类型别名 :=> 文字
>rest : 任意[]

    public f41(arguments: any, ...rest) { // error
>f41 : { (arguments: 数字, ...rest: 任意[]): 任意; (arguments: 文字, ...rest: 任意[]): 任意; }
>arguments : 任意
>类型别名 :=> 任意
>rest : 任意[]

        var arguments: any; // no error
>arguments : 任意
>类型别名 :=> 任意
    }
    public f4NoError(arguments: number); // no error
>f4NoError : { (arguments: 数字): 任意; (arguments: 文字): 任意; }
>arguments : 数字
>类型别名 :=> 数字

    public f4NoError(arguments: string); // no error
>f4NoError : { (arguments: 数字): 任意; (arguments: 文字): 任意; }
>arguments : 文字
>类型别名 :=> 文字

    public f4NoError(arguments: any) { // no error
>f4NoError : { (arguments: 数字): 任意; (arguments: 文字): 任意; }
>arguments : 任意
>类型别名 :=> 任意

        var arguments: any; // no error
>arguments : 任意
>类型别名 :=> 任意
    }
}

declare class c2 {
>c2 : c2

    public foo(i: number, ...arguments); // No error - no code gen
>foo : (i: 数字, ...arguments: 任意[]) => 任意
>i : 数字
>类型别名 :=> 数字
>arguments : 任意[]

    public foo1(arguments: number, ...rest); // No error - no code gen
>foo1 : (arguments: 数字, ...rest: 任意[]) => 任意
>arguments : 数字
>类型别名 :=> 数字
>rest : 任意[]

    public fooNoError(arguments: number); // No error - no code gen
>fooNoError : (arguments: 数字) => 任意
>arguments : 数字
>类型别名 :=> 数字

    public f4(i: number, ...arguments); // no codegen no error
>f4 : { (i: 数字, ...arguments: 任意[]): 任意; (i: 文字, ...arguments: 任意[]): 任意; }
>i : 数字
>类型别名 :=> 数字
>arguments : 任意[]

    public f4(i: string, ...arguments); // no codegen no error
>f4 : { (i: 数字, ...arguments: 任意[]): 任意; (i: 文字, ...arguments: 任意[]): 任意; }
>i : 文字
>类型别名 :=> 文字
>arguments : 任意[]

    public f41(arguments: number, ...rest); // no codegen no error
>f41 : { (arguments: 数字, ...rest: 任意[]): 任意; (arguments: 文字, ...rest: 任意[]): 任意; }
>arguments : 数字
>类型别名 :=> 数字
>rest : 任意[]

    public f41(arguments: string, ...rest); // no codegen no error
>f41 : { (arguments: 数字, ...rest: 任意[]): 任意; (arguments: 文字, ...rest: 任意[]): 任意; }
>arguments : 文字
>类型别名 :=> 文字
>rest : 任意[]

    public f4NoError(arguments: number); // no error
>f4NoError : { (arguments: 数字): 任意; (arguments: 文字): 任意; }
>arguments : 数字
>类型别名 :=> 数字

    public f4NoError(arguments: string); // no error
>f4NoError : { (arguments: 数字): 任意; (arguments: 文字): 任意; }
>arguments : 文字
>类型别名 :=> 文字
}

class c3 {
>c3 : c3

    public foo(...restParameters) {
>foo : (...restParameters: 任意[]) => 无值
>restParameters : 任意[]

        var arguments = 10; // no error
>arguments : 数字
>类型别名 :=> 数字
>10 : 10
    }
    public fooNoError() {
>fooNoError : () => 无值

        var arguments = 10; // no error
>arguments : 数字
>类型别名 :=> 数字
>10 : 10
    }
}
