=== tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperCallsWithThisArg.ts ===
class Base {
>Base : Base

    x: string;
>x : string
>类型别名 :=> 文字

    constructor(a) { }
>a : any
>类型别名 :=> 任意
}

class Derived extends Base {
>Derived : Derived
>Base : Base

    constructor() {
        super(this); // ok
>super(this) : void
>类型别名 :=> 无值
>super : typeof Base
>this : this
    }
}

class Derived2 extends Base {
>Derived2 : Derived2
>Base : Base

    constructor(public a: string) {
>a : string
>类型别名 :=> 文字

        super(this); // error
>super(this) : void
>类型别名 :=> 无值
>super : typeof Base
>this : this
    }
}

class Derived3 extends Base {
>Derived3 : Derived3
>Base : Base

    constructor(public a: string) {
>a : string
>类型别名 :=> 文字

        super(() => this); // error
>super(() => this) : void
>类型别名 :=> 无值
>super : typeof Base
>() => this : () => this
>this : this
    }
}

class Derived4 extends Base {
>Derived4 : Derived4
>Base : Base

    constructor(public a: string) {
>a : string
>类型别名 :=> 文字

        super(function () { return this; }); // ok
>super(function () { return this; }) : void
>类型别名 :=> 无值
>super : typeof Base
>function () { return this; } : () => any
>this : any
>类型别名 :=> 任意
    }
}
