=== tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperCallsWithThisArg.ts ===
class Base {
>Base : Base

    x: string;
>x : 文字
>类型别名 :=> 文字

    constructor(a) { }
>a : 任意
>类型别名 :=> 任意
}

class Derived extends Base {
>Derived : Derived
>Base : Base

    constructor() {
        super(this); // ok
>super(this) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>this : 本体
    }
}

class Derived2 extends Base {
>Derived2 : Derived2
>Base : Base

    constructor(public a: string) {
>a : 文字
>类型别名 :=> 文字

        super(this); // error
>super(this) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>this : 本体
    }
}

class Derived3 extends Base {
>Derived3 : Derived3
>Base : Base

    constructor(public a: string) {
>a : 文字
>类型别名 :=> 文字

        super(() => this); // error
>super(() => this) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>() => this : () => 本体
>this : 本体
    }
}

class Derived4 extends Base {
>Derived4 : Derived4
>Base : Base

    constructor(public a: string) {
>a : 文字
>类型别名 :=> 文字

        super(function () { return this; }); // ok
>super(function () { return this; }) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>function () { return this; } : () => 任意
>this : 任意
>类型别名 :=> 任意
    }
}
