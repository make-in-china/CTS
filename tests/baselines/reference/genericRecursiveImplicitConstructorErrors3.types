=== tests/cases/compiler/genericRecursiveImplicitConstructorErrors3.ts ===
module TypeScript {
>TypeScript : typeof TypeScript

    export class MemberName <A,B,C>{
>MemberName : MemberName<A, B, C>
>A : A
>B : B
>C : C

        static create<A,B,C>(arg1: any, arg2?: any, arg3?: any): MemberName {
>create : <A, B, C>(arg1: any, arg2?: any, arg3?: any) => any
>A : A
>B : B
>C : C
>arg1 : any
>类型别名 :=> 任意
>arg2 : any
>类型别名 :=> 任意
>arg3 : any
>类型别名 :=> 任意
>MemberName : MemberName<A, B, C>
        }
    }
}
 
module TypeScript {
>TypeScript : typeof TypeScript

    export class PullSymbol <A,B,C>{
>PullSymbol : PullSymbol<A, B, C>
>A : A
>B : B
>C : C

        public type: PullTypeSymbol = null;
>type : any
>类型别名 :=> 任意
>PullTypeSymbol : PullTypeSymbol<A, B, C>
>null : null
>类型别名 :=> 空值
    }
    export class PullTypeSymbol <A,B,C>extends PullSymbol {
>PullTypeSymbol : PullTypeSymbol<A, B, C>
>A : A
>B : B
>C : C
>PullSymbol : typeof PullSymbol

        private _elementType: PullTypeSymbol = null;
>_elementType : any
>类型别名 :=> 任意
>PullTypeSymbol : PullTypeSymbol<A, B, C>
>null : null
>类型别名 :=> 空值

        public toString<A,B,C>(scopeSymbol?: PullSymbol, useConstraintInName?: boolean) {
>toString : <A, B, C>(scopeSymbol?: any, useConstraintInName?: boolean) => any
>A : A
>B : B
>C : C
>scopeSymbol : any
>类型别名 :=> 任意
>PullSymbol : PullSymbol<A, B, C>
>useConstraintInName : boolean
>类型别名 :=> 真假

            var s = this.getScopedNameEx(scopeSymbol, useConstraintInName).toString();
>s : any
>类型别名 :=> 任意
>this.getScopedNameEx(scopeSymbol, useConstraintInName).toString() : any
>类型别名 :=> 任意
>this.getScopedNameEx(scopeSymbol, useConstraintInName).toString : any
>类型别名 :=> 任意
>this.getScopedNameEx(scopeSymbol, useConstraintInName) : any
>类型别名 :=> 任意
>this.getScopedNameEx : <A, B, C>(scopeSymbol?: any, useConstraintInName?: boolean, getPrettyTypeName?: boolean, getTypeParamMarkerInfo?: boolean) => any
>this : this
>getScopedNameEx : <A, B, C>(scopeSymbol?: any, useConstraintInName?: boolean, getPrettyTypeName?: boolean, getTypeParamMarkerInfo?: boolean) => any
>scopeSymbol : any
>类型别名 :=> 任意
>useConstraintInName : boolean
>类型别名 :=> 真假
>toString : any
>类型别名 :=> 任意

            return s;
>s : any
>类型别名 :=> 任意
        }
        public getScopedNameEx<A,B,C>(scopeSymbol?: PullSymbol, useConstraintInName?: boolean, getPrettyTypeName?: boolean, getTypeParamMarkerInfo?: boolean) {
>getScopedNameEx : <A, B, C>(scopeSymbol?: any, useConstraintInName?: boolean, getPrettyTypeName?: boolean, getTypeParamMarkerInfo?: boolean) => any
>A : A
>B : B
>C : C
>scopeSymbol : any
>类型别名 :=> 任意
>PullSymbol : PullSymbol<A, B, C>
>useConstraintInName : boolean
>类型别名 :=> 真假
>getPrettyTypeName : boolean
>类型别名 :=> 真假
>getTypeParamMarkerInfo : boolean
>类型别名 :=> 真假

            if (this.isArray()) {
>this.isArray() : any
>类型别名 :=> 任意
>this.isArray : any
>类型别名 :=> 任意
>this : this
>isArray : any
>类型别名 :=> 任意

                var elementMemberName = this._elementType ?
>elementMemberName : any
>类型别名 :=> 任意
>this._elementType ?                (this._elementType.isArray() || this._elementType.isNamedTypeSymbol() ?                this._elementType.getScopedNameEx(scopeSymbol, false, getPrettyTypeName, getTypeParamMarkerInfo) :                this._elementType.getMemberTypeNameEx(false, scopeSymbol, getPrettyTypeName)) : 1 : any
>类型别名 :=> 任意
>this._elementType : any
>类型别名 :=> 任意
>this : this
>_elementType : any
>类型别名 :=> 任意

                (this._elementType.isArray() || this._elementType.isNamedTypeSymbol() ?
>(this._elementType.isArray() || this._elementType.isNamedTypeSymbol() ?                this._elementType.getScopedNameEx(scopeSymbol, false, getPrettyTypeName, getTypeParamMarkerInfo) :                this._elementType.getMemberTypeNameEx(false, scopeSymbol, getPrettyTypeName)) : any
>类型别名 :=> 任意
>this._elementType.isArray() || this._elementType.isNamedTypeSymbol() ?                this._elementType.getScopedNameEx(scopeSymbol, false, getPrettyTypeName, getTypeParamMarkerInfo) :                this._elementType.getMemberTypeNameEx(false, scopeSymbol, getPrettyTypeName) : any
>类型别名 :=> 任意
>this._elementType.isArray() || this._elementType.isNamedTypeSymbol() : any
>类型别名 :=> 任意
>this._elementType.isArray() : any
>类型别名 :=> 任意
>this._elementType.isArray : any
>类型别名 :=> 任意
>this._elementType : any
>类型别名 :=> 任意
>this : this
>_elementType : any
>类型别名 :=> 任意
>isArray : any
>类型别名 :=> 任意
>this._elementType.isNamedTypeSymbol() : any
>类型别名 :=> 任意
>this._elementType.isNamedTypeSymbol : any
>类型别名 :=> 任意
>this._elementType : any
>类型别名 :=> 任意
>this : this
>_elementType : any
>类型别名 :=> 任意
>isNamedTypeSymbol : any
>类型别名 :=> 任意

                this._elementType.getScopedNameEx(scopeSymbol, false, getPrettyTypeName, getTypeParamMarkerInfo) :
>this._elementType.getScopedNameEx(scopeSymbol, false, getPrettyTypeName, getTypeParamMarkerInfo) : any
>类型别名 :=> 任意
>this._elementType.getScopedNameEx : any
>类型别名 :=> 任意
>this._elementType : any
>类型别名 :=> 任意
>this : this
>_elementType : any
>类型别名 :=> 任意
>getScopedNameEx : any
>类型别名 :=> 任意
>scopeSymbol : any
>类型别名 :=> 任意
>false : false
>类型别名 :=> 为假
>getPrettyTypeName : boolean
>类型别名 :=> 真假
>getTypeParamMarkerInfo : boolean
>类型别名 :=> 真假

                this._elementType.getMemberTypeNameEx(false, scopeSymbol, getPrettyTypeName)) : 1
>this._elementType.getMemberTypeNameEx(false, scopeSymbol, getPrettyTypeName) : any
>类型别名 :=> 任意
>this._elementType.getMemberTypeNameEx : any
>类型别名 :=> 任意
>this._elementType : any
>类型别名 :=> 任意
>this : this
>_elementType : any
>类型别名 :=> 任意
>getMemberTypeNameEx : any
>类型别名 :=> 任意
>false : false
>类型别名 :=> 为假
>scopeSymbol : any
>类型别名 :=> 任意
>getPrettyTypeName : boolean
>类型别名 :=> 真假
>1 : 1

                return MemberName.create(elementMemberName, "", "[]");
>MemberName.create(elementMemberName, "", "[]") : any
>类型别名 :=> 任意
>MemberName.create : <A, B, C>(arg1: any, arg2?: any, arg3?: any) => any
>MemberName : typeof MemberName
>create : <A, B, C>(arg1: any, arg2?: any, arg3?: any) => any
>elementMemberName : any
>类型别名 :=> 任意
>"" : ""
>"[]" : "[]"
            }
        }
    }
}
 

