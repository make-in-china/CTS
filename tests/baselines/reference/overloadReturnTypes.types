=== tests/cases/compiler/overloadReturnTypes.ts ===
class Accessor {}
>Accessor : Accessor

function attr(name: string): string;
>attr : { (name: 文字): 文字; (name: 文字, value: 文字): Accessor; (map: 任意): Accessor; }
>name : 文字
>类型别名 :=> 文字

function attr(name: string, value: string): Accessor;
>attr : { (name: 文字): 文字; (name: 文字, value: 文字): Accessor; (map: 任意): Accessor; }
>name : 文字
>类型别名 :=> 文字
>value : 文字
>类型别名 :=> 文字
>Accessor : Accessor

function attr(map: any): Accessor;
>attr : { (name: 文字): 文字; (name: 文字, value: 文字): Accessor; (map: 任意): Accessor; }
>map : 任意
>类型别名 :=> 任意
>Accessor : Accessor

function attr(nameOrMap: any, value?: string): any {
>attr : { (name: 文字): 文字; (name: 文字, value: 文字): Accessor; (map: 任意): Accessor; }
>nameOrMap : 任意
>类型别名 :=> 任意
>value : 文字
>类型别名 :=> 文字

    if (nameOrMap && typeof nameOrMap === "object") {
>nameOrMap && typeof nameOrMap === "object" : 真假
>类型别名 :=> 真假
>nameOrMap : 任意
>类型别名 :=> 任意
>typeof nameOrMap === "object" : 真假
>类型别名 :=> 真假
>typeof nameOrMap : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>nameOrMap : 任意
>类型别名 :=> 任意
>"object" : "object"

        // handle map case
        return new Accessor;
>new Accessor : Accessor
>Accessor : 类为 Accessor
    }
    else {
        // handle string case
        return "s";
>"s" : "s"
    }
}


interface IFace {
>IFace : IFace

	attr(name:string):string;
>attr : { (name: 文字): 文字; (name: 文字, value: 文字): Accessor; (map: 任意): Accessor; }
>name : 文字
>类型别名 :=> 文字

	attr(name: string, value: string): Accessor;
>attr : { (name: 文字): 文字; (name: 文字, value: 文字): Accessor; (map: 任意): Accessor; }
>name : 文字
>类型别名 :=> 文字
>value : 文字
>类型别名 :=> 文字
>Accessor : Accessor

	attr(map: any): Accessor;
>attr : { (name: 文字): 文字; (name: 文字, value: 文字): Accessor; (map: 任意): Accessor; }
>map : 任意
>类型别名 :=> 任意
>Accessor : Accessor
}

