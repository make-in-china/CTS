=== tests/cases/compiler/sourceMapValidationDestructuringParameterObjectBindingPatternDefaultValues.ts ===
interface Robot {
>Robot : Robot

    name?: string;
>name : string
>类型别名 :=> 文字

    skill?: string;
>skill : string
>类型别名 :=> 文字
}
declare var console: {
>console : { log(msg: string): void; }

    log(msg: string): void;
>log : (msg: string) => void
>msg : string
>类型别名 :=> 文字
}
var hello = "hello";
>hello : string
>类型别名 :=> 文字
>"hello" : "hello"

var robotA: Robot = { name: "mower", skill: "mowing" };
>robotA : Robot
>Robot : Robot
>{ name: "mower", skill: "mowing" } : { name: string; skill: string; }
>name : string
>类型别名 :=> 文字
>"mower" : "mower"
>skill : string
>类型别名 :=> 文字
>"mowing" : "mowing"

function foo1({ name: nameA = "<NoName>" }: Robot = { }) {
>foo1 : ({ name: nameA }?: Robot) => void
>name : any
>类型别名 :=> 任意
>nameA : string
>类型别名 :=> 文字
>"<NoName>" : "<NoName>"
>Robot : Robot
>{ } : {}

    console.log(nameA);
>console.log(nameA) : void
>类型别名 :=> 无值
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>nameA : string
>类型别名 :=> 文字
}
function foo2({ name: nameB = "<NoName>", skill: skillB = "noSkill" }: Robot = {}) {
>foo2 : ({ name: nameB, skill: skillB }?: Robot) => void
>name : any
>类型别名 :=> 任意
>nameB : string
>类型别名 :=> 文字
>"<NoName>" : "<NoName>"
>skill : any
>类型别名 :=> 任意
>skillB : string
>类型别名 :=> 文字
>"noSkill" : "noSkill"
>Robot : Robot
>{} : {}

    console.log(nameB);
>console.log(nameB) : void
>类型别名 :=> 无值
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>nameB : string
>类型别名 :=> 文字
}
function foo3({ name = "<NoName>" }: Robot = {}) {
>foo3 : ({ name }?: Robot) => void
>name : string
>类型别名 :=> 文字
>"<NoName>" : "<NoName>"
>Robot : Robot
>{} : {}

    console.log(name);
>console.log(name) : void
>类型别名 :=> 无值
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>name : string
>类型别名 :=> 文字
}

foo1(robotA);
>foo1(robotA) : void
>类型别名 :=> 无值
>foo1 : ({ name: nameA }?: Robot) => void
>robotA : Robot

foo1({ name: "Edger", skill: "cutting edges" });
>foo1({ name: "Edger", skill: "cutting edges" }) : void
>类型别名 :=> 无值
>foo1 : ({ name: nameA }?: Robot) => void
>{ name: "Edger", skill: "cutting edges" } : { name: string; skill: string; }
>name : string
>类型别名 :=> 文字
>"Edger" : "Edger"
>skill : string
>类型别名 :=> 文字
>"cutting edges" : "cutting edges"

foo2(robotA);
>foo2(robotA) : void
>类型别名 :=> 无值
>foo2 : ({ name: nameB, skill: skillB }?: Robot) => void
>robotA : Robot

foo2({ name: "Edger", skill: "cutting edges" });
>foo2({ name: "Edger", skill: "cutting edges" }) : void
>类型别名 :=> 无值
>foo2 : ({ name: nameB, skill: skillB }?: Robot) => void
>{ name: "Edger", skill: "cutting edges" } : { name: string; skill: string; }
>name : string
>类型别名 :=> 文字
>"Edger" : "Edger"
>skill : string
>类型别名 :=> 文字
>"cutting edges" : "cutting edges"

foo3(robotA);
>foo3(robotA) : void
>类型别名 :=> 无值
>foo3 : ({ name }?: Robot) => void
>robotA : Robot

foo3({ name: "Edger", skill: "cutting edges" });
>foo3({ name: "Edger", skill: "cutting edges" }) : void
>类型别名 :=> 无值
>foo3 : ({ name }?: Robot) => void
>{ name: "Edger", skill: "cutting edges" } : { name: string; skill: string; }
>name : string
>类型别名 :=> 文字
>"Edger" : "Edger"
>skill : string
>类型别名 :=> 文字
>"cutting edges" : "cutting edges"

