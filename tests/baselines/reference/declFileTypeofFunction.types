=== tests/cases/compiler/declFileTypeofFunction.ts ===
function f(n: typeof f): string;
>f : { (n: 类为 f): 文字; (n: { (n: 类为 g): 数字; (n: 类为 f): 数字; }): 文字; }
>n : { (n: 类为 f): 文字; (n: { (n: 类为 g): 数字; (n: 类为 f): 数字; }): 文字; }
>f : { (n: 类为 f): 文字; (n: { (n: 类为 g): 数字; (n: 类为 f): 数字; }): 文字; }

function f(n: typeof g): string;
>f : { (n: 类为 f): 文字; (n: { (n: 类为 g): 数字; (n: 类为 f): 数字; }): 文字; }
>n : { (n: 类为 g): 数字; (n: { (n: 类为 f): 文字; (n: 类为 g): 文字; }): 数字; }
>g : { (n: 类为 g): 数字; (n: { (n: 类为 f): 文字; (n: 类为 g): 文字; }): 数字; }

function f() { return undefined; }
>f : { (n: 类为 f): 文字; (n: { (n: 类为 g): 数字; (n: 类为 f): 数字; }): 文字; }
>undefined : 未定
>类型别名 :=> 未定

function g(n: typeof g): number;
>g : { (n: 类为 g): 数字; (n: { (n: 类为 f): 文字; (n: 类为 g): 文字; }): 数字; }
>n : { (n: 类为 g): 数字; (n: { (n: 类为 f): 文字; (n: 类为 g): 文字; }): 数字; }
>g : { (n: 类为 g): 数字; (n: { (n: 类为 f): 文字; (n: 类为 g): 文字; }): 数字; }

function g(n: typeof f): number;
>g : { (n: 类为 g): 数字; (n: { (n: 类为 f): 文字; (n: 类为 g): 文字; }): 数字; }
>n : { (n: 类为 f): 文字; (n: { (n: 类为 g): 数字; (n: 类为 f): 数字; }): 文字; }
>f : { (n: 类为 f): 文字; (n: { (n: 类为 g): 数字; (n: 类为 f): 数字; }): 文字; }

function g() { return undefined; }
>g : { (n: 类为 g): 数字; (n: { (n: 类为 f): 文字; (n: 类为 g): 文字; }): 数字; }
>undefined : 未定
>类型别名 :=> 未定

var b: () => typeof b;
>b : () => 任意
>b : () => 任意

function b1() {
>b1 : () => 类为 b1

    return b1;
>b1 : () => 类为 b1
}

function foo(): typeof foo {
>foo : () => 类为 foo
>foo : () => 类为 foo

    return null;
>null : 空值
>类型别名 :=> 空值
}
var foo1: typeof foo;
>foo1 : () => 类为 foo
>foo : () => 类为 foo

var foo2 = foo;
>foo2 : () => 类为 foo
>foo : () => 类为 foo

var foo3 = function () {
>foo3 : () => 任意
>function () {    return foo3;} : () => 任意

    return foo3;
>foo3 : () => 任意
}
var x = () => {
>x : () => 任意
>() => {    return x;} : () => 任意

    return x;
>x : () => 任意
}

function foo5(x: number) {
>foo5 : (x: 数字) => (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    function bar(x: number) {
>bar : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

        return x;
>x : 数字
>类型别名 :=> 数字
    }
    return bar;
>bar : (x: 数字) => 数字
}
