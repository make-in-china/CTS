=== tests/cases/conformance/types/objectTypeLiteral/methodSignatures/methodSignaturesWithOverloads.ts ===
// Object type literals permit overloads with optionality but they must match

var c: {
>c : { func4?(x: 数字): 数字; func4?(s: 文字): 文字; func5?: { (x: 数字): 数字; (s: 文字): 文字; }; }

    func4?(x: number): number;
>func4 : { (x: 数字): 数字; (s: 文字): 文字; }
>x : 数字
>类型别名 :=> 数字

    func4(s: string): string; // error, mismatched optionality
>func4 : { (x: 数字): 数字; (s: 文字): 文字; }
>s : 文字
>类型别名 :=> 文字

    func5?: {
>func5 : { (x: 数字): 数字; (s: 文字): 文字; }

        (x: number): number;
>x : 数字
>类型别名 :=> 数字

        (s: string): string;
>s : 文字
>类型别名 :=> 文字

    };
};

var c2: {
>c2 : { func4?<T>(x: T): 数字; func4?<T>(s: T): 文字; func5?: { <T>(x: T): 数字; <T>(s: T): 文字; }; }

    func4<T>(x: T): number;
>func4 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>T : T
>x : T
>T : T

    func4? <T>(s: T): string; // error, mismatched optionality
>func4 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>T : T
>s : T
>T : T

    func5?: {
>func5 : { <T>(x: T): 数字; <T>(s: T): 文字; }

        <T>(x: T): number;
>T : T
>x : T
>T : T

        <T>(s: T): string;
>T : T
>s : T
>T : T

    };
};
