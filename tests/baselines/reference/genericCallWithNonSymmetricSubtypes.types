=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithNonSymmetricSubtypes.ts ===
// generic type argument inference where inference leads to two candidates that are both supertypes of all candidates
// we choose the first candidate so the result is dependent on the order of the arguments provided

function foo<T>(x: T, y: T) {
>foo : <T>(x: T, y: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T

    var r: T;
>r : T
>T : T

    return r;
>r : T
}

var a: { x: number; y?: number; };
>a : { x: 数字; y?: 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

var b: { x: number; z?: number; };
>b : { x: 数字; z?: 数字; }
>x : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字

var r = foo(a, b); // { x: number; y?: number; };
>r : { x: 数字; y?: 数字; }
>foo(a, b) : { x: 数字; y?: 数字; }
>foo : <T>(x: T, y: T) => T
>a : { x: 数字; y?: 数字; }
>b : { x: 数字; z?: 数字; }

var r2 = foo(b, a); // { x: number; z?: number; };
>r2 : { x: 数字; z?: 数字; }
>foo(b, a) : { x: 数字; z?: 数字; }
>foo : <T>(x: T, y: T) => T
>b : { x: 数字; z?: 数字; }
>a : { x: 数字; y?: 数字; }

var x: { x: number; };
>x : { x: 数字; }
>x : 数字
>类型别名 :=> 数字

var y: { x?: number; };
>y : { x?: 数字; }
>x : 数字
>类型别名 :=> 数字

var r3 = foo(a, x); // { x: number; y?: number; };
>r3 : { x: 数字; }
>foo(a, x) : { x: 数字; }
>foo : <T>(x: T, y: T) => T
>a : { x: 数字; y?: 数字; }
>x : { x: 数字; }

var r4 = foo(x, a); // { x: number; };
>r4 : { x: 数字; }
>foo(x, a) : { x: 数字; }
>foo : <T>(x: T, y: T) => T
>x : { x: 数字; }
>a : { x: 数字; y?: 数字; }

var r5 = foo(a, y); // { x?: number; };
>r5 : { x?: 数字; }
>foo(a, y) : { x?: 数字; }
>foo : <T>(x: T, y: T) => T
>a : { x: 数字; y?: 数字; }
>y : { x?: 数字; }

var r5 = foo(y, a); // { x?: number; };
>r5 : { x?: 数字; }
>foo(y, a) : { x?: 数字; }
>foo : <T>(x: T, y: T) => T
>y : { x?: 数字; }
>a : { x: 数字; y?: 数字; }

var r6 = foo(x, y); // { x?: number; };
>r6 : { x?: 数字; }
>foo(x, y) : { x?: 数字; }
>foo : <T>(x: T, y: T) => T
>x : { x: 数字; }
>y : { x?: 数字; }

var r6 = foo(y, x); // { x?: number; };
>r6 : { x?: 数字; }
>foo(y, x) : { x?: 数字; }
>foo : <T>(x: T, y: T) => T
>y : { x?: 数字; }
>x : { x: 数字; }

var s1: (x: Object) => string;
>s1 : (x: Object) => 文字
>x : Object
>Object : Object

var s2: (x: string) => string;
>s2 : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字

var r7 = foo(s1, s2); // (x: Object) => string;
>r7 : (x: 文字) => 文字
>foo(s1, s2) : (x: 文字) => 文字
>foo : <T>(x: T, y: T) => T
>s1 : (x: Object) => 文字
>s2 : (x: 文字) => 文字

var r8 = foo(s2, s1); // (x: string) => string;
>r8 : (x: Object) => 文字
>foo(s2, s1) : (x: Object) => 文字
>foo : <T>(x: T, y: T) => T
>s2 : (x: 文字) => 文字
>s1 : (x: Object) => 文字

