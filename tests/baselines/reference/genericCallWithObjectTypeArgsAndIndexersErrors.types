=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndIndexersErrors.ts ===
// Type inference infers from indexers in target type, error cases

function foo<T>(x: T) {
>foo : <T>(x: T) => T
>T : T
>x : T
>T : T

    return x;
>x : T
}

function other<T>(arg: T) {
>other : <T>(arg: T) => 无值
>T : T
>arg : T
>T : T

    var b: {
>b : { [x: 文字]: Object; [x: 数字]: T; }

        [x: string]: Object;
>x : 文字
>类型别名 :=> 文字
>Object : Object

        [x: number]: T; // ok, T is a subtype of Object because its apparent type is {}
>x : 数字
>类型别名 :=> 数字
>T : T

    };
    var r2 = foo(b); // T
>r2 : { [x: 文字]: Object; [x: 数字]: T; }
>foo(b) : { [x: 文字]: Object; [x: 数字]: T; }
>foo : <T>(x: T) => T
>b : { [x: 文字]: Object; [x: 数字]: T; }
}

function other3<T extends U, U extends Date>(arg: T) {
>other3 : <T 扩展 U, U 扩展 Date>(arg: T) => 无值
>T : T
>U : U
>U : U
>Date : Date
>arg : T
>T : T

    var b: {
>b : { [x: 文字]: Object; [x: 数字]: T; }

        [x: string]: Object;
>x : 文字
>类型别名 :=> 文字
>Object : Object

        [x: number]: T;
>x : 数字
>类型别名 :=> 数字
>T : T

    };
    var r2 = foo(b);
>r2 : { [x: 文字]: Object; [x: 数字]: T; }
>foo(b) : { [x: 文字]: Object; [x: 数字]: T; }
>foo : <T>(x: T) => T
>b : { [x: 文字]: Object; [x: 数字]: T; }

    var d = r2[1];
>d : T
>r2[1] : T
>r2 : { [x: 文字]: Object; [x: 数字]: T; }
>1 : 1

    var e = r2['1'];
>e : Object
>r2['1'] : Object
>r2 : { [x: 文字]: Object; [x: 数字]: T; }
>'1' : "1"

    var u: U = r2[1]; // ok
>u : U
>U : U
>r2[1] : T
>r2 : { [x: 文字]: Object; [x: 数字]: T; }
>1 : 1
}
