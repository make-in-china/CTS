=== tests/cases/compiler/sourceMapValidationDestructuringForOfArrayBindingPattern2.ts ===
declare var console: {
>console : { log(msg: any): void; }

    log(msg: any): void;
>log : (msg: any) => void
>msg : any
>类型别名 :=> 任意
}
type Robot = [number, string, string];
>Robot : [number, string, string]

type MultiSkilledRobot = [string, [string, string]];
>MultiSkilledRobot : [string, [string, string]]

let robotA: Robot = [1, "mower", "mowing"];
>robotA : [number, string, string]
>Robot : [number, string, string]
>[1, "mower", "mowing"] : [number, string, string]
>1 : 1
>"mower" : "mower"
>"mowing" : "mowing"

let robotB: Robot = [2, "trimmer", "trimming"];
>robotB : [number, string, string]
>Robot : [number, string, string]
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"

let robots = [robotA, robotB];
>robots : [number, string, string][]
>[robotA, robotB] : [number, string, string][]
>robotA : [number, string, string]
>robotB : [number, string, string]

function getRobots() {
>getRobots : () => [number, string, string][]

    return robots;
>robots : [number, string, string][]
}

let multiRobotA: MultiSkilledRobot = ["mower", ["mowing", ""]];
>multiRobotA : [string, [string, string]]
>MultiSkilledRobot : [string, [string, string]]
>["mower", ["mowing", ""]] : [string, [string, string]]
>"mower" : "mower"
>["mowing", ""] : [string, string]
>"mowing" : "mowing"
>"" : ""

let multiRobotB: MultiSkilledRobot = ["trimmer", ["trimming", "edging"]];
>multiRobotB : [string, [string, string]]
>MultiSkilledRobot : [string, [string, string]]
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>"trimmer" : "trimmer"
>["trimming", "edging"] : [string, string]
>"trimming" : "trimming"
>"edging" : "edging"

let multiRobots = [multiRobotA, multiRobotB];
>multiRobots : [string, [string, string]][]
>[multiRobotA, multiRobotB] : [string, [string, string]][]
>multiRobotA : [string, [string, string]]
>multiRobotB : [string, [string, string]]

function getMultiRobots() {
>getMultiRobots : () => [string, [string, string]][]

    return multiRobots;
>multiRobots : [string, [string, string]][]
}

let nameA: string, primarySkillA: string, secondarySkillA: string;
>nameA : string
>类型别名 :=> 文字
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字

let numberB: number, nameB: string;
>numberB : number
>类型别名 :=> 数字
>nameB : string
>类型别名 :=> 文字

let numberA2: number, nameA2: string, skillA2: string, nameMA: string;
>numberA2 : number
>类型别名 :=> 数字
>nameA2 : string
>类型别名 :=> 文字
>skillA2 : string
>类型别名 :=> 文字
>nameMA : string
>类型别名 :=> 文字

let numberA3: number, robotAInfo: (number | string)[], multiRobotAInfo: (string | [string, string])[];
>numberA3 : number
>类型别名 :=> 数字
>robotAInfo : (string | number)[]
>multiRobotAInfo : (string | [string, string])[]

for ([, nameA] of robots) {
>[, nameA] : [undefined, string]
> : undefined
>类型别名 :=> 未定
>nameA : string
>类型别名 :=> 文字
>robots : [number, string, string][]

    console.log(nameA);
>console.log(nameA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA : string
>类型别名 :=> 文字
}
for ([, nameA] of getRobots()) {
>[, nameA] : [undefined, string]
> : undefined
>类型别名 :=> 未定
>nameA : string
>类型别名 :=> 文字
>getRobots() : [number, string, string][]
>getRobots : () => [number, string, string][]

    console.log(nameA);
>console.log(nameA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA : string
>类型别名 :=> 文字
}
for ([, nameA] of [robotA, robotB]) {
>[, nameA] : [undefined, string]
> : undefined
>类型别名 :=> 未定
>nameA : string
>类型别名 :=> 文字
>[robotA, robotB] : [number, string, string][]
>robotA : [number, string, string]
>robotB : [number, string, string]

    console.log(nameA);
>console.log(nameA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA : string
>类型别名 :=> 文字
}
for ([, [primarySkillA, secondarySkillA]] of multiRobots) {
>[, [primarySkillA, secondarySkillA]] : [undefined, [string, string]]
> : undefined
>类型别名 :=> 未定
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>multiRobots : [string, [string, string]][]

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>primarySkillA : string
>类型别名 :=> 文字
}
for ([, [primarySkillA, secondarySkillA]] of getMultiRobots()) {
>[, [primarySkillA, secondarySkillA]] : [undefined, [string, string]]
> : undefined
>类型别名 :=> 未定
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>getMultiRobots() : [string, [string, string]][]
>getMultiRobots : () => [string, [string, string]][]

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>primarySkillA : string
>类型别名 :=> 文字
}
for ([, [primarySkillA, secondarySkillA]] of [multiRobotA, multiRobotB]) {
>[, [primarySkillA, secondarySkillA]] : [undefined, [string, string]]
> : undefined
>类型别名 :=> 未定
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>[multiRobotA, multiRobotB] : [string, [string, string]][]
>multiRobotA : [string, [string, string]]
>multiRobotB : [string, [string, string]]

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>primarySkillA : string
>类型别名 :=> 文字
}

for ([numberB] of robots) {
>[numberB] : [number]
>numberB : number
>类型别名 :=> 数字
>robots : [number, string, string][]

    console.log(numberB);
>console.log(numberB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberB : number
>类型别名 :=> 数字
}
for ([numberB] of getRobots()) {
>[numberB] : [number]
>numberB : number
>类型别名 :=> 数字
>getRobots() : [number, string, string][]
>getRobots : () => [number, string, string][]

    console.log(numberB);
>console.log(numberB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberB : number
>类型别名 :=> 数字
}
for ([numberB] of [robotA, robotB]) {
>[numberB] : [number]
>numberB : number
>类型别名 :=> 数字
>[robotA, robotB] : [number, string, string][]
>robotA : [number, string, string]
>robotB : [number, string, string]

    console.log(numberB);
>console.log(numberB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberB : number
>类型别名 :=> 数字
}
for ([nameB] of multiRobots) {
>[nameB] : [string]
>nameB : string
>类型别名 :=> 文字
>multiRobots : [string, [string, string]][]

    console.log(nameB);
>console.log(nameB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameB : string
>类型别名 :=> 文字
}
for ([nameB] of getMultiRobots()) {
>[nameB] : [string]
>nameB : string
>类型别名 :=> 文字
>getMultiRobots() : [string, [string, string]][]
>getMultiRobots : () => [string, [string, string]][]

    console.log(nameB);
>console.log(nameB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameB : string
>类型别名 :=> 文字
}
for ([nameB] of [multiRobotA, multiRobotB]) {
>[nameB] : [string]
>nameB : string
>类型别名 :=> 文字
>[multiRobotA, multiRobotB] : [string, [string, string]][]
>multiRobotA : [string, [string, string]]
>multiRobotB : [string, [string, string]]

    console.log(nameB);
>console.log(nameB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameB : string
>类型别名 :=> 文字
}

for ([numberA2, nameA2, skillA2] of robots) {
>[numberA2, nameA2, skillA2] : [number, string, string]
>numberA2 : number
>类型别名 :=> 数字
>nameA2 : string
>类型别名 :=> 文字
>skillA2 : string
>类型别名 :=> 文字
>robots : [number, string, string][]

    console.log(nameA2);
>console.log(nameA2) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA2 : string
>类型别名 :=> 文字
}
for ([numberA2, nameA2, skillA2] of getRobots()) {
>[numberA2, nameA2, skillA2] : [number, string, string]
>numberA2 : number
>类型别名 :=> 数字
>nameA2 : string
>类型别名 :=> 文字
>skillA2 : string
>类型别名 :=> 文字
>getRobots() : [number, string, string][]
>getRobots : () => [number, string, string][]

    console.log(nameA2);
>console.log(nameA2) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA2 : string
>类型别名 :=> 文字
}
for ([numberA2, nameA2, skillA2] of [robotA, robotB]) {
>[numberA2, nameA2, skillA2] : [number, string, string]
>numberA2 : number
>类型别名 :=> 数字
>nameA2 : string
>类型别名 :=> 文字
>skillA2 : string
>类型别名 :=> 文字
>[robotA, robotB] : [number, string, string][]
>robotA : [number, string, string]
>robotB : [number, string, string]

    console.log(nameA2);
>console.log(nameA2) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA2 : string
>类型别名 :=> 文字
}
for ([nameMA, [primarySkillA, secondarySkillA]] of multiRobots) {
>[nameMA, [primarySkillA, secondarySkillA]] : [string, [string, string]]
>nameMA : string
>类型别名 :=> 文字
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>multiRobots : [string, [string, string]][]

    console.log(nameMA);
>console.log(nameMA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameMA : string
>类型别名 :=> 文字
}
for ([nameMA, [primarySkillA, secondarySkillA]] of getMultiRobots()) {
>[nameMA, [primarySkillA, secondarySkillA]] : [string, [string, string]]
>nameMA : string
>类型别名 :=> 文字
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>getMultiRobots() : [string, [string, string]][]
>getMultiRobots : () => [string, [string, string]][]

    console.log(nameMA);
>console.log(nameMA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameMA : string
>类型别名 :=> 文字
}
for ([nameMA, [primarySkillA, secondarySkillA]] of [multiRobotA, multiRobotB]) {
>[nameMA, [primarySkillA, secondarySkillA]] : [string, [string, string]]
>nameMA : string
>类型别名 :=> 文字
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>[multiRobotA, multiRobotB] : [string, [string, string]][]
>multiRobotA : [string, [string, string]]
>multiRobotB : [string, [string, string]]

    console.log(nameMA);
>console.log(nameMA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameMA : string
>类型别名 :=> 文字
}

for ([numberA3, ...robotAInfo] of robots) {
>[numberA3, ...robotAInfo] : (string | number)[]
>numberA3 : number
>类型别名 :=> 数字
>...robotAInfo : string | number
>robotAInfo : (string | number)[]
>robots : [number, string, string][]

    console.log(numberA3);
>console.log(numberA3) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberA3 : number
>类型别名 :=> 数字
}
for ([numberA3, ...robotAInfo] of getRobots()) {
>[numberA3, ...robotAInfo] : (string | number)[]
>numberA3 : number
>类型别名 :=> 数字
>...robotAInfo : string | number
>robotAInfo : (string | number)[]
>getRobots() : [number, string, string][]
>getRobots : () => [number, string, string][]

    console.log(numberA3);
>console.log(numberA3) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberA3 : number
>类型别名 :=> 数字
}
for ([numberA3, ...robotAInfo] of [robotA, robotB]) {
>[numberA3, ...robotAInfo] : (string | number)[]
>numberA3 : number
>类型别名 :=> 数字
>...robotAInfo : string | number
>robotAInfo : (string | number)[]
>[robotA, robotB] : [number, string, string][]
>robotA : [number, string, string]
>robotB : [number, string, string]

    console.log(numberA3);
>console.log(numberA3) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberA3 : number
>类型别名 :=> 数字
}
for ([...multiRobotAInfo] of multiRobots) {
>[...multiRobotAInfo] : (string | [string, string])[]
>...multiRobotAInfo : string | [string, string]
>multiRobotAInfo : (string | [string, string])[]
>multiRobots : [string, [string, string]][]

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>multiRobotAInfo : (string | [string, string])[]
}
for ([...multiRobotAInfo] of getMultiRobots()) {
>[...multiRobotAInfo] : (string | [string, string])[]
>...multiRobotAInfo : string | [string, string]
>multiRobotAInfo : (string | [string, string])[]
>getMultiRobots() : [string, [string, string]][]
>getMultiRobots : () => [string, [string, string]][]

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>multiRobotAInfo : (string | [string, string])[]
}
for ([...multiRobotAInfo] of [multiRobotA, multiRobotB]) {
>[...multiRobotAInfo] : (string | [string, string])[]
>...multiRobotAInfo : string | [string, string]
>multiRobotAInfo : (string | [string, string])[]
>[multiRobotA, multiRobotB] : [string, [string, string]][]
>multiRobotA : [string, [string, string]]
>multiRobotB : [string, [string, string]]

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>multiRobotAInfo : (string | [string, string])[]
}
