=== tests/cases/compiler/baseCheck.ts ===
class C { constructor(x: number, y: number) { } }
>C : C
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

class ELoc extends C {
>ELoc : ELoc
>C : C

    constructor(x: number) {
>x : 数字
>类型别名 :=> 数字

        super(0, x);
>super(0, x) : 无值
>类型别名 :=> 无值
>super : 类为 C
>0 : 0
>x : 数字
>类型别名 :=> 数字
    }
}
class ELocVar extends C {  
>ELocVar : ELocVar
>C : C

    constructor(x: number) {
>x : 数字
>类型别名 :=> 数字

        super(0, loc);
>super(0, loc) : 无值
>类型别名 :=> 无值
>super : 类为 C
>0 : 0
>loc : 任意
>类型别名 :=> 任意
    }

    m() {
>m : () => 无值

        var loc=10;
>loc : 数字
>类型别名 :=> 数字
>10 : 10
    }
}

class D extends C { constructor(public z: number) { super(this.z) }  } // too few params
>D : D
>C : C
>z : 数字
>类型别名 :=> 数字
>super(this.z) : 无值
>类型别名 :=> 无值
>super : 类为 C
>this.z : 数字
>类型别名 :=> 数字
>this : 本体
>z : 数字
>类型别名 :=> 数字

class E extends C { constructor(public z: number) { super(0, this.z) } }
>E : E
>C : C
>z : 数字
>类型别名 :=> 数字
>super(0, this.z) : 无值
>类型别名 :=> 无值
>super : 类为 C
>0 : 0
>this.z : 数字
>类型别名 :=> 数字
>this : 本体
>z : 数字
>类型别名 :=> 数字

class F extends C { constructor(public z: number) { super("hello", this.z) } } // first param type
>F : F
>C : C
>z : 数字
>类型别名 :=> 数字
>super("hello", this.z) : 无值
>类型别名 :=> 无值
>super : 类为 C
>"hello" : "hello"
>this.z : 数字
>类型别名 :=> 数字
>this : 本体
>z : 数字
>类型别名 :=> 数字

function f() {
>f : () => 无值

    if (x<10) {
>x<10 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>10 : 10

      x=11;
>x=11 : 11
>x : 任意
>类型别名 :=> 任意
>11 : 11
    }
    else {
        x=12;
>x=12 : 12
>x : 任意
>类型别名 :=> 任意
>12 : 12
    }
}

