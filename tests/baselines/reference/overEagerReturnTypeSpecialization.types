=== tests/cases/compiler/overEagerReturnTypeSpecialization.ts ===
//Note: Below simpler repro

interface I1<T> {
>I1 : I1<T>
>T : T

    func<U>(callback: (value: T) => U): I1<U>;
>func : <U>(callback: (value: T) => U) => I1<U>
>U : U
>callback : (value: T) => U
>value : T
>T : T
>U : U
>I1 : I1<T>
>U : U
}
 
declare var v1: I1<number>;
>v1 : I1<数字>
>I1 : I1<T>

var r1: I1<string> = v1.func(num => num.toString()) // Correctly returns an I1<string>
>r1 : I1<文字>
>I1 : I1<T>
>v1.func(num => num.toString()) // Correctly returns an I1<string>           .func(str => str.length) : I1<数字>
>v1.func(num => num.toString()) // Correctly returns an I1<string>           .func : <U>(callback: (value: 文字) => U) => I1<U>
>v1.func(num => num.toString()) : I1<文字>
>v1.func : <U>(callback: (value: 数字) => U) => I1<U>
>v1 : I1<数字>
>func : <U>(callback: (value: 数字) => U) => I1<U>
>num => num.toString() : (num: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>num.toString() : 文字
>类型别名 :=> 文字
>num.toString : (radix?: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

           .func(str => str.length);    // should error
>func : <U>(callback: (value: 文字) => U) => I1<U>
>str => str.length : (str: 文字) => 数字
>str : 文字
>类型别名 :=> 文字
>str.length : 数字
>类型别名 :=> 数字
>str : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

var r2: I1<number> = v1.func(num => num.toString()) // Correctly returns an I1<string>
>r2 : I1<数字>
>I1 : I1<T>
>v1.func(num => num.toString()) // Correctly returns an I1<string>           .func(str => str.length) : I1<数字>
>v1.func(num => num.toString()) // Correctly returns an I1<string>           .func : <U>(callback: (value: 文字) => U) => I1<U>
>v1.func(num => num.toString()) : I1<文字>
>v1.func : <U>(callback: (value: 数字) => U) => I1<U>
>v1 : I1<数字>
>func : <U>(callback: (value: 数字) => U) => I1<U>
>num => num.toString() : (num: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>num.toString() : 文字
>类型别名 :=> 文字
>num.toString : (radix?: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

           .func(str => str.length);    // should be ok 
>func : <U>(callback: (value: 文字) => U) => I1<U>
>str => str.length : (str: 文字) => 数字
>str : 文字
>类型别名 :=> 文字
>str.length : 数字
>类型别名 :=> 数字
>str : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
 
 
