=== tests/cases/conformance/controlFlow/typeGuardsAsAssertions.ts ===
// Repro from #8513

let cond: boolean;
>cond : boolean
>类型别名 :=> 真假

export type Optional<a> = Some<a> | None;
>Optional : Optional<a>
>a : a
>Some : Some<a>
>a : a
>None : None

export interface None { readonly none: string; }
>None : None
>none : string
>类型别名 :=> 文字

export interface Some<a> { readonly some: a; }
>Some : Some<a>
>a : a
>some : a
>a : a

export const none : None = { none: '' };
>none : None
>None : None
>{ none: '' } : { none: string; }
>none : string
>类型别名 :=> 文字
>'' : ""

export function isSome<a>(value: Optional<a>): value is Some<a> {
>isSome : <a>(value: Optional<a>) => value is Some<a>
>a : a
>value : Optional<a>
>Optional : Optional<a>
>a : a
>value : any
>类型别名 :=> 任意
>Some : Some<a>
>a : a

    return 'some' in value;
>'some' in value : boolean
>类型别名 :=> 真假
>'some' : "some"
>value : Optional<a>
}

function someFrom<a>(some: a) {
>someFrom : <a>(some: a) => { some: a; }
>a : a
>some : a
>a : a

    return { some };
>{ some } : { some: a; }
>some : a
}

export function fn<r>(makeSome: () => r): void {
>fn : <r>(makeSome: () => r) => void
>r : r
>makeSome : () => r
>r : r

    let result: Optional<r> = none;
>result : Optional<r>
>Optional : Optional<a>
>r : r
>none : None

    result;  // None
>result : None

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        result;  // Some<r> | None
>result : Optional<r>

        result = someFrom(isSome(result) ? result.some : makeSome());
>result = someFrom(isSome(result) ? result.some : makeSome()) : { some: r; }
>result : Optional<r>
>someFrom(isSome(result) ? result.some : makeSome()) : { some: r; }
>someFrom : <a>(some: a) => { some: a; }
>isSome(result) ? result.some : makeSome() : r
>isSome(result) : boolean
>类型别名 :=> 真假
>isSome : <a>(value: Optional<a>) => value is Some<a>
>result : Optional<r>
>result.some : r
>result : Some<r>
>some : r
>makeSome() : r
>makeSome : () => r

        result;  // Some<r>
>result : Some<r>
    }
}

function foo1() {
>foo1 : () => void

    let x: string | number | boolean = 0;
>x : string | number | boolean
>0 : 0

    x;  // number
>x : number
>类型别名 :=> 数字

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        x;  // number, then string | number
>x : string | number

        x = typeof x === "string" ? x.slice() : "abc";
>x = typeof x === "string" ? x.slice() : "abc" : string
>类型别名 :=> 文字
>x : string | number | boolean
>typeof x === "string" ? x.slice() : "abc" : string
>类型别名 :=> 文字
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"
>x.slice() : string
>类型别名 :=> 文字
>x.slice : (start?: number | undefined, end?: number | undefined) => string
>x : string
>类型别名 :=> 文字
>slice : (start?: number | undefined, end?: number | undefined) => string
>"abc" : "abc"

        x;  // string
>x : string
>类型别名 :=> 文字
    }
    x;
>x : string | number
}

function foo2() {
>foo2 : () => void

    let x: string | number | boolean = 0;
>x : string | number | boolean
>0 : 0

    x;  // number
>x : number
>类型别名 :=> 数字

    while (cond) {
>cond : boolean
>类型别名 :=> 真假

        x;  // number, then string | number
>x : string | number

        if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

            x = x.slice();
>x = x.slice() : string
>类型别名 :=> 文字
>x : string | number | boolean
>x.slice() : string
>类型别名 :=> 文字
>x.slice : (start?: number | undefined, end?: number | undefined) => string
>x : string
>类型别名 :=> 文字
>slice : (start?: number | undefined, end?: number | undefined) => string
        }
        else {
            x = "abc";
>x = "abc" : "abc"
>x : string | number | boolean
>"abc" : "abc"
        }
        x;  // string
>x : string
>类型别名 :=> 文字
    }
    x;
>x : string | number
}

// Type guards as assertions

function f1() {
>f1 : () => void

    let x: string | number | undefined = undefined;
>x : string | number | undefined
>undefined : undefined
>类型别名 :=> 未定

    x;  // undefined
>x : undefined
>类型别名 :=> 未定

    if (x) {
>x : undefined
>类型别名 :=> 未定

        x;  // string | number (guard as assertion)
>x : never
>类型别名 :=> 不及
    }
    x;  // string | number | undefined
>x : undefined
>类型别名 :=> 未定
}

function f2() {
>f2 : () => void

    let x: string | number | undefined = undefined;
>x : string | number | undefined
>undefined : undefined
>类型别名 :=> 未定

    x;  // undefined
>x : undefined
>类型别名 :=> 未定

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : undefined
>类型别名 :=> 未定
>"string" : "string"

        x;  // string (guard as assertion)
>x : never
>类型别名 :=> 不及
    }
    x;  // string | undefined
>x : undefined
>类型别名 :=> 未定
}

function f3() {
>f3 : () => void

    let x: string | number | undefined = undefined;
>x : string | number | undefined
>undefined : undefined
>类型别名 :=> 未定

    x;  // undefined
>x : undefined
>类型别名 :=> 未定

    if (!x) {
>!x : true
>类型别名 :=> 为真
>x : undefined
>类型别名 :=> 未定

        return;
    }
    x;  // string | number (guard as assertion)
>x : never
>类型别名 :=> 不及
}

function f4() {
>f4 : () => void

    let x: string | number | undefined = undefined;
>x : string | number | undefined
>undefined : undefined
>类型别名 :=> 未定

    x;  // undefined
>x : undefined
>类型别名 :=> 未定

    if (typeof x === "boolean") {
>typeof x === "boolean" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : undefined
>类型别名 :=> 未定
>"boolean" : "boolean"

        x;  // nothing (boolean not in declared type)
>x : never
>类型别名 :=> 不及
    }
    x;  // undefined
>x : undefined
>类型别名 :=> 未定
}

function f5(x: string | number) {
>f5 : (x: string | number) => void
>x : string | number

    if (typeof x === "string" && typeof x === "number") {
>typeof x === "string" && typeof x === "number" : boolean
>类型别名 :=> 真假
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"
>typeof x === "number" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string
>类型别名 :=> 文字
>"number" : "number"

        x;  // number (guard as assertion)
>x : never
>类型别名 :=> 不及
    }
    else {
        x;  // string | number
>x : string | number
    }
    x;  // string | number
>x : string | number
}

function f6() {
>f6 : () => void

    let x: string | undefined | null;
>x : string | null | undefined
>null : null
>类型别名 :=> 空值

    x!.slice();
>x!.slice() : string
>类型别名 :=> 文字
>x!.slice : (start?: number | undefined, end?: number | undefined) => string
>x! : string
>类型别名 :=> 文字
>x : string | null | undefined
>slice : (start?: number | undefined, end?: number | undefined) => string

    x = "";
>x = "" : ""
>x : string | null | undefined
>"" : ""

    x!.slice();
>x!.slice() : string
>类型别名 :=> 文字
>x!.slice : (start?: number | undefined, end?: number | undefined) => string
>x! : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>slice : (start?: number | undefined, end?: number | undefined) => string

    x = undefined;
>x = undefined : undefined
>类型别名 :=> 未定
>x : string | null | undefined
>undefined : undefined
>类型别名 :=> 未定

    x!.slice();
>x!.slice() : string
>类型别名 :=> 文字
>x!.slice : (start?: number | undefined, end?: number | undefined) => string
>x! : string
>类型别名 :=> 文字
>x : string | null | undefined
>slice : (start?: number | undefined, end?: number | undefined) => string

    x = null;
>x = null : null
>类型别名 :=> 空值
>x : string | null | undefined
>null : null
>类型别名 :=> 空值

    x!.slice();
>x!.slice() : string
>类型别名 :=> 文字
>x!.slice : (start?: number | undefined, end?: number | undefined) => string
>x! : string
>类型别名 :=> 文字
>x : string | null | undefined
>slice : (start?: number | undefined, end?: number | undefined) => string

    x = <undefined | null>undefined;
>x = <undefined | null>undefined : null | undefined
>x : string | null | undefined
><undefined | null>undefined : null | undefined
>null : null
>类型别名 :=> 空值
>undefined : undefined
>类型别名 :=> 未定

    x!.slice();
>x!.slice() : string
>类型别名 :=> 文字
>x!.slice : (start?: number | undefined, end?: number | undefined) => string
>x! : string
>类型别名 :=> 文字
>x : string | null | undefined
>slice : (start?: number | undefined, end?: number | undefined) => string

    x = <string | undefined>"";
>x = <string | undefined>"" : string | undefined
>x : string | null | undefined
><string | undefined>"" : string | undefined
>"" : ""

    x!.slice();
>x!.slice() : string
>类型别名 :=> 文字
>x!.slice : (start?: number | undefined, end?: number | undefined) => string
>x! : string
>类型别名 :=> 文字
>x : string | undefined
>slice : (start?: number | undefined, end?: number | undefined) => string

    x = <string | null>"";
>x = <string | null>"" : string | null
>x : string | null | undefined
><string | null>"" : string | null
>null : null
>类型别名 :=> 空值
>"" : ""

    x!.slice();
>x!.slice() : string
>类型别名 :=> 文字
>x!.slice : (start?: number | undefined, end?: number | undefined) => string
>x! : string
>类型别名 :=> 文字
>x : string | null
>slice : (start?: number | undefined, end?: number | undefined) => string
}

function f7() {
>f7 : () => void

    let x: string;
>x : string
>类型别名 :=> 文字

    x!.slice();
>x!.slice() : string
>类型别名 :=> 文字
>x!.slice : (start?: number | undefined, end?: number | undefined) => string
>x! : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>slice : (start?: number | undefined, end?: number | undefined) => string
}

