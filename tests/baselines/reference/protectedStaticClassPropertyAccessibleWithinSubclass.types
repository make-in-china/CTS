=== tests/cases/conformance/classes/members/accessibility/protectedStaticClassPropertyAccessibleWithinSubclass.ts ===
class Base {
>Base : Base

    protected static x: string;
>x : 文字
>类型别名 :=> 文字

    static staticMethod() {
>staticMethod : () => 无值

        Base.x;         // OK, accessed within their declaring class
>Base.x : 文字
>类型别名 :=> 文字
>Base : 类为 Base
>x : 文字
>类型别名 :=> 文字

        Derived1.x;     // OK, accessed within their declaring class
>Derived1.x : 文字
>类型别名 :=> 文字
>Derived1 : 类为 Derived1
>x : 文字
>类型别名 :=> 文字

        Derived2.x;     // OK, accessed within their declaring class
>Derived2.x : 文字
>类型别名 :=> 文字
>Derived2 : 类为 Derived2
>x : 文字
>类型别名 :=> 文字

        Derived3.x;     // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>Derived3.x : 文字
>类型别名 :=> 文字
>Derived3 : 类为 Derived3
>x : 文字
>类型别名 :=> 文字
    }
}

class Derived1 extends Base {
>Derived1 : Derived1
>Base : Base

    static staticMethod1() {
>staticMethod1 : () => 无值

        Base.x;         // OK, accessed within a class derived from their declaring class
>Base.x : 文字
>类型别名 :=> 文字
>Base : 类为 Base
>x : 文字
>类型别名 :=> 文字

        Derived1.x;     // OK, accessed within a class derived from their declaring class
>Derived1.x : 文字
>类型别名 :=> 文字
>Derived1 : 类为 Derived1
>x : 文字
>类型别名 :=> 文字

        Derived2.x;     // OK, accessed within a class derived from their declaring class
>Derived2.x : 文字
>类型别名 :=> 文字
>Derived2 : 类为 Derived2
>x : 文字
>类型别名 :=> 文字

        Derived3.x;     // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>Derived3.x : 文字
>类型别名 :=> 文字
>Derived3 : 类为 Derived3
>x : 文字
>类型别名 :=> 文字
    }
}

class Derived2 extends Base {
>Derived2 : Derived2
>Base : Base

    static staticMethod2() {
>staticMethod2 : () => 无值

        Base.x;         // OK, accessed within a class derived from their declaring class
>Base.x : 文字
>类型别名 :=> 文字
>Base : 类为 Base
>x : 文字
>类型别名 :=> 文字

        Derived1.x;     // OK, accessed within a class derived from their declaring class
>Derived1.x : 文字
>类型别名 :=> 文字
>Derived1 : 类为 Derived1
>x : 文字
>类型别名 :=> 文字

        Derived2.x;     // OK, accessed within a class derived from their declaring class
>Derived2.x : 文字
>类型别名 :=> 文字
>Derived2 : 类为 Derived2
>x : 文字
>类型别名 :=> 文字

        Derived3.x;     // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>Derived3.x : 文字
>类型别名 :=> 文字
>Derived3 : 类为 Derived3
>x : 文字
>类型别名 :=> 文字
    }
}

class Derived3 extends Derived1 {
>Derived3 : Derived3
>Derived1 : Derived1

    protected static x: string;
>x : 文字
>类型别名 :=> 文字

    static staticMethod3() {
>staticMethod3 : () => 无值

        Base.x;         // OK, accessed within a class derived from their declaring class
>Base.x : 文字
>类型别名 :=> 文字
>Base : 类为 Base
>x : 文字
>类型别名 :=> 文字

        Derived1.x;     // OK, accessed within a class derived from their declaring class
>Derived1.x : 文字
>类型别名 :=> 文字
>Derived1 : 类为 Derived1
>x : 文字
>类型别名 :=> 文字

        Derived2.x;     // OK, accessed within a class derived from their declaring class
>Derived2.x : 文字
>类型别名 :=> 文字
>Derived2 : 类为 Derived2
>x : 文字
>类型别名 :=> 文字

        Derived3.x;     // OK, accessed within their declaring class
>Derived3.x : 文字
>类型别名 :=> 文字
>Derived3 : 类为 Derived3
>x : 文字
>类型别名 :=> 文字
    }
}


Base.x;         // Error, neither within their declaring class nor classes derived from their declaring class
>Base.x : 文字
>类型别名 :=> 文字
>Base : 类为 Base
>x : 文字
>类型别名 :=> 文字

Derived1.x;     // Error, neither within their declaring class nor classes derived from their declaring class
>Derived1.x : 文字
>类型别名 :=> 文字
>Derived1 : 类为 Derived1
>x : 文字
>类型别名 :=> 文字

Derived2.x;     // Error, neither within their declaring class nor classes derived from their declaring class
>Derived2.x : 文字
>类型别名 :=> 文字
>Derived2 : 类为 Derived2
>x : 文字
>类型别名 :=> 文字

Derived3.x;     // Error, neither within their declaring class nor classes derived from their declaring class
>Derived3.x : 文字
>类型别名 :=> 文字
>Derived3 : 类为 Derived3
>x : 文字
>类型别名 :=> 文字

