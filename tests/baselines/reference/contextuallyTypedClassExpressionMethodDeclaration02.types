=== tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedClassExpressionMethodDeclaration02.ts ===
interface A {
>A : A

    numProp: number;
>numProp : 数字
>类型别名 :=> 数字
}

interface B  {
>B : B

    strProp: string;
>strProp : 文字
>类型别名 :=> 文字
}

interface Foo {
>Foo : Foo

    new (): Bar;
>Bar : Bar
}

interface Bar {
>Bar : Bar

    method1(arg: A): void;
>method1 : (arg: A) => 无值
>arg : A
>A : A

    method2(arg: B): void;
>method2 : (arg: B) => 无值
>arg : B
>B : B
}

function getFoo1(): Foo {
>getFoo1 : () => Foo
>Foo : Foo

    return class {
>class {        method1(arg) {            arg.numProp = 10;        }        method2(arg) {            arg.strProp = "hello";        }    } : 类为 (Anonymous class)

        method1(arg) {
>method1 : (arg: 任意) => 无值
>arg : 任意
>类型别名 :=> 任意

            arg.numProp = 10;
>arg.numProp = 10 : 10
>arg.numProp : 任意
>类型别名 :=> 任意
>arg : 任意
>类型别名 :=> 任意
>numProp : 任意
>类型别名 :=> 任意
>10 : 10
        }
        method2(arg) {
>method2 : (arg: 任意) => 无值
>arg : 任意
>类型别名 :=> 任意

            arg.strProp = "hello";
>arg.strProp = "hello" : "hello"
>arg.strProp : 任意
>类型别名 :=> 任意
>arg : 任意
>类型别名 :=> 任意
>strProp : 任意
>类型别名 :=> 任意
>"hello" : "hello"
        }
    }
}

function getFoo2(): Foo {
>getFoo2 : () => Foo
>Foo : Foo

    return class {
>class {        method1 = (arg) => {            arg.numProp = 10;        }        method2 = (arg) => {            arg.strProp = "hello";        }    } : 类为 (Anonymous class)

        method1 = (arg) => {
>method1 : (arg: 任意) => 无值
>(arg) => {            arg.numProp = 10;        } : (arg: 任意) => 无值
>arg : 任意
>类型别名 :=> 任意

            arg.numProp = 10;
>arg.numProp = 10 : 10
>arg.numProp : 任意
>类型别名 :=> 任意
>arg : 任意
>类型别名 :=> 任意
>numProp : 任意
>类型别名 :=> 任意
>10 : 10
        }
        method2 = (arg) => {
>method2 : (arg: 任意) => 无值
>(arg) => {            arg.strProp = "hello";        } : (arg: 任意) => 无值
>arg : 任意
>类型别名 :=> 任意

            arg.strProp = "hello";
>arg.strProp = "hello" : "hello"
>arg.strProp : 任意
>类型别名 :=> 任意
>arg : 任意
>类型别名 :=> 任意
>strProp : 任意
>类型别名 :=> 任意
>"hello" : "hello"
        }
    }
}

function getFoo3(): Foo {
>getFoo3 : () => Foo
>Foo : Foo

    return class {
>class {        method1 = function (arg) {            arg.numProp = 10;        }        method2 = function (arg) {            arg.strProp = "hello";        }    } : 类为 (Anonymous class)

        method1 = function (arg) {
>method1 : (arg: 任意) => 无值
>function (arg) {            arg.numProp = 10;        } : (arg: 任意) => 无值
>arg : 任意
>类型别名 :=> 任意

            arg.numProp = 10;
>arg.numProp = 10 : 10
>arg.numProp : 任意
>类型别名 :=> 任意
>arg : 任意
>类型别名 :=> 任意
>numProp : 任意
>类型别名 :=> 任意
>10 : 10
        }
        method2 = function (arg) {
>method2 : (arg: 任意) => 无值
>function (arg) {            arg.strProp = "hello";        } : (arg: 任意) => 无值
>arg : 任意
>类型别名 :=> 任意

            arg.strProp = "hello";
>arg.strProp = "hello" : "hello"
>arg.strProp : 任意
>类型别名 :=> 任意
>arg : 任意
>类型别名 :=> 任意
>strProp : 任意
>类型别名 :=> 任意
>"hello" : "hello"
        }
    }
}
