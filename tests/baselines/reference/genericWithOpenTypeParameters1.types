=== tests/cases/compiler/genericWithOpenTypeParameters1.ts ===
class B<T> {
>B : B<T>
>T : T

   foo(x: T): T { return null; }
>foo : (x: T) => T
>x : T
>T : T
>T : T
>null : 空值
>类型别名 :=> 空值
}

var x: B<number>;
>x : B<数字>
>B : B<T>

x.foo(1); // no error
>x.foo(1) : 数字
>类型别名 :=> 数字
>x.foo : (x: 数字) => 数字
>x : B<数字>
>foo : (x: 数字) => 数字
>1 : 1

var f = <T>(x: B<T>) => { return x.foo(1); } // error
>f : <T>(x: B<T>) => 任意
><T>(x: B<T>) => { return x.foo(1); } : <T>(x: B<T>) => 任意
>T : T
>x : B<T>
>B : B<T>
>T : T
>x.foo(1) : T
>x.foo : (x: T) => T
>x : B<T>
>foo : (x: T) => T
>1 : 1

var f2 = <T>(x: B<T>) => { return x.foo<T>(1); } // error
>f2 : <T>(x: B<T>) => 任意
><T>(x: B<T>) => { return x.foo<T>(1); } : <T>(x: B<T>) => 任意
>T : T
>x : B<T>
>B : B<T>
>T : T
>x.foo<T>(1) : T
>x.foo : (x: T) => T
>x : B<T>
>foo : (x: T) => T
>T : T
>1 : 1

var f3 = <T>(x: B<T>) => { return x.foo<number>(1); } // error
>f3 : <T>(x: B<T>) => 任意
><T>(x: B<T>) => { return x.foo<number>(1); } : <T>(x: B<T>) => 任意
>T : T
>x : B<T>
>B : B<T>
>T : T
>x.foo<number>(1) : T
>x.foo : (x: T) => T
>x : B<T>
>foo : (x: T) => T
>1 : 1

var f4 = (x: B<number>) => { return x.foo(1); } // no error
>f4 : (x: B<数字>) => 数字
>(x: B<number>) => { return x.foo(1); } : (x: B<数字>) => 数字
>x : B<数字>
>B : B<T>
>x.foo(1) : 数字
>类型别名 :=> 数字
>x.foo : (x: 数字) => 数字
>x : B<数字>
>foo : (x: 数字) => 数字
>1 : 1

