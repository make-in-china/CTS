=== tests/cases/compiler/genericMemberFunction.ts ===
export class BuildError<A, B, C>{
>BuildError : BuildError<A, B, C>
>A : A
>B : B
>C : C

  public parent<A, B extends A, C>(): FileWithErrors<A, B, C> {
>parent : <A, B 扩展 A, C>() => FileWithErrors<A, B, C>
>A : A
>B : B
>A : A
>C : C
>FileWithErrors : FileWithErrors<A, B, C>
>A : A
>B : B
>C : C

    return undefined;
>undefined : 未定
>类型别名 :=> 未定
  }
}
export class FileWithErrors<A, B, C>{
>FileWithErrors : FileWithErrors<A, B, C>
>A : A
>B : B
>C : C

  public errors<A, B extends A, C>(): BuildError<A, B, C>[] {
>errors : <A, B 扩展 A, C>() => BuildError<A, B, C>[]
>A : A
>B : B
>A : A
>C : C
>BuildError : BuildError<A, B, C>
>A : A
>B : B
>C : C

    return undefined;
>undefined : 未定
>类型别名 :=> 未定
  }
  public parent<A, B extends A, C>(): BuildResult<A, B, C> {
>parent : <A, B 扩展 A, C>() => BuildResult<A, B, C>
>A : A
>B : B
>A : A
>C : C
>BuildResult : BuildResult<A, B, C>
>A : A
>B : B
>C : C

    return undefined;
>undefined : 未定
>类型别名 :=> 未定
  }
}
export class BuildResult<A, B, C>{
>BuildResult : BuildResult<A, B, C>
>A : A
>B : B
>C : C

  public merge<A, B extends A, C>(other: BuildResult<A, B, C>): void {
>merge : <A, B 扩展 A, C>(other: BuildResult<A, B, C>) => 无值
>A : A
>B : B
>A : A
>C : C
>other : BuildResult<A, B, C>
>BuildResult : BuildResult<A, B, C>
>A : A
>B : B
>C : C

    a.b.c.d.e.f.g = 0;
>a.b.c.d.e.f.g = 0 : 0
>a.b.c.d.e.f.g : 任意
>类型别名 :=> 任意
>a.b.c.d.e.f : 任意
>类型别名 :=> 任意
>a.b.c.d.e : 任意
>类型别名 :=> 任意
>a.b.c.d : 任意
>类型别名 :=> 任意
>a.b.c : 任意
>类型别名 :=> 任意
>a.b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
>f : 任意
>类型别名 :=> 任意
>g : 任意
>类型别名 :=> 任意
>0 : 0

    removedFiles.forEach(<A, B extends A, C>(each: FileWithErrors<A, B, C>) => {
>removedFiles.forEach(<A, B extends A, C>(each: FileWithErrors<A, B, C>) => {      this.removeFile(each);    }) : 任意
>类型别名 :=> 任意
>removedFiles.forEach : 任意
>类型别名 :=> 任意
>removedFiles : 任意
>类型别名 :=> 任意
>forEach : 任意
>类型别名 :=> 任意
><A, B extends A, C>(each: FileWithErrors<A, B, C>) => {      this.removeFile(each);    } : <A, B 扩展 A, C>(each: FileWithErrors<A, B, C>) => 无值
>A : A
>B : B
>A : A
>C : C
>each : FileWithErrors<A, B, C>
>FileWithErrors : FileWithErrors<A, B, C>
>A : A
>B : B
>C : C

      this.removeFile(each);
>this.removeFile(each) : 任意
>类型别名 :=> 任意
>this.removeFile : 任意
>类型别名 :=> 任意
>this : 本体
>removeFile : 任意
>类型别名 :=> 任意
>each : FileWithErrors<A, B, C>

    });
  }
}

