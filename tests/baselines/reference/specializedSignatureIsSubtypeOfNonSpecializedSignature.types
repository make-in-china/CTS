=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/specializedSignatureIsSubtypeOfNonSpecializedSignature.ts ===
// Specialized signatures must be a subtype of a non-specialized signature
// All the below should not be errors

function foo(x: 'a');
>foo : { (x: "a"): 任意; (x: 文字): 任意; }
>x : "a"

function foo(x: string);
>foo : { (x: "a"): 任意; (x: 文字): 任意; }
>x : 文字
>类型别名 :=> 文字

function foo(x: any) { }
>foo : { (x: "a"): 任意; (x: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意

class C {
>C : C

    foo(x: 'a');
>foo : { (x: "a"): 任意; (x: 文字): 任意; }
>x : "a"

    foo(x: string);
>foo : { (x: "a"): 任意; (x: 文字): 任意; }
>x : 文字
>类型别名 :=> 文字

    foo(x: any) { }
>foo : { (x: "a"): 任意; (x: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意
}

class C2<T> {
>C2 : C2<T>
>T : T

    foo(x: 'a');
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : "a"

    foo(x: string);
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : 文字
>类型别名 :=> 文字

    foo(x: T);
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : T
>T : T

    foo(x: any) { }
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : 任意
>类型别名 :=> 任意
}

class C3<T extends String> {
>C3 : C3<T>
>T : T
>String : String

    foo(x: 'a');
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : "a"

    foo(x: string);
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : 文字
>类型别名 :=> 文字

    foo(x: T);
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : T
>T : T

    foo(x: any) { }
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : 任意
>类型别名 :=> 任意
}

interface I {
>I : I

    (x: 'a');
>x : "a"

    (x: number);
>x : 数字
>类型别名 :=> 数字

    (x: string);
>x : 文字
>类型别名 :=> 文字

    foo(x: 'a');
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: 数字): 任意; }
>x : "a"

    foo(x: string);
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: 数字): 任意; }
>x : 文字
>类型别名 :=> 文字

    foo(x: number);
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: 数字): 任意; }
>x : 数字
>类型别名 :=> 数字
}

interface I2<T> {
>I2 : I2<T>
>T : T

    (x: 'a');
>x : "a"

    (x: T);
>x : T
>T : T

    (x: string);
>x : 文字
>类型别名 :=> 文字

    foo(x: 'a');
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : "a"

    foo(x: string);
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : 文字
>类型别名 :=> 文字

    foo(x: T);
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : T
>T : T
}

interface I3<T extends String> {
>I3 : I3<T>
>T : T
>String : String

    (x: 'a');
>x : "a"

    (x: string);
>x : 文字
>类型别名 :=> 文字

    (x: T);
>x : T
>T : T

    foo(x: 'a');
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : "a"

    foo(x: string);
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : 文字
>类型别名 :=> 文字

    foo(x: T);
>foo : { (x: "a"): 任意; (x: 文字): 任意; (x: T): 任意; }
>x : T
>T : T
}

var a: {
>a : { (x: 文字): 任意; (x: "a"): 任意; (x: 数字): 任意; foo(x: 文字): 任意; foo(x: "a"): 任意; foo(x: 数字): 任意; }

    (x: string);
>x : 文字
>类型别名 :=> 文字

    (x: 'a');
>x : "a"

    (x: number);
>x : 数字
>类型别名 :=> 数字

    foo(x: string);
>foo : { (x: 文字): 任意; (x: "a"): 任意; (x: 数字): 任意; }
>x : 文字
>类型别名 :=> 文字

    foo(x: 'a');
>foo : { (x: 文字): 任意; (x: "a"): 任意; (x: 数字): 任意; }
>x : "a"

    foo(x: number);
>foo : { (x: 文字): 任意; (x: "a"): 任意; (x: 数字): 任意; }
>x : 数字
>类型别名 :=> 数字
}

var a2: {
>a2 : { (x: "a"): 任意; (x: 文字): 任意; <T>(x: T): 任意; foo(x: 文字): 任意; foo(x: "a"): 任意; foo<T>(x: T): 任意; }

    (x: 'a');
>x : "a"

    (x: string);
>x : 文字
>类型别名 :=> 文字

    <T>(x: T);
>T : T
>x : T
>T : T

    foo(x: string);
>foo : { (x: 文字): 任意; (x: "a"): 任意; <T>(x: T): 任意; }
>x : 文字
>类型别名 :=> 文字

    foo(x: 'a');
>foo : { (x: 文字): 任意; (x: "a"): 任意; <T>(x: T): 任意; }
>x : "a"

    foo<T>(x: T);
>foo : { (x: 文字): 任意; (x: "a"): 任意; <T>(x: T): 任意; }
>T : T
>x : T
>T : T
}

var a3: {
>a3 : { (x: "a"): 任意; <T>(x: T): 任意; (x: 文字): 任意; foo(x: 文字): 任意; foo(x: "a"): 任意; foo<T 扩展 String>(x: T): 任意; }

    (x: 'a');
>x : "a"

    <T>(x: T);
>T : T
>x : T
>T : T

    (x: string);
>x : 文字
>类型别名 :=> 文字

    foo(x: string);
>foo : { (x: 文字): 任意; (x: "a"): 任意; <T 扩展 String>(x: T): 任意; }
>x : 文字
>类型别名 :=> 文字

    foo(x: 'a');
>foo : { (x: 文字): 任意; (x: "a"): 任意; <T 扩展 String>(x: T): 任意; }
>x : "a"

    foo<T extends String>(x: T);
>foo : { (x: 文字): 任意; (x: "a"): 任意; <T 扩展 String>(x: T): 任意; }
>T : T
>String : String
>x : T
>T : T
}

