=== tests/cases/compiler/ipromise2.ts ===
declare module Windows.Foundation {
>Windows : any
>类型别名 :=> 任意
>Foundation : any
>类型别名 :=> 任意

    export interface IPromise<T> {
>IPromise : IPromise<T>
>T : T

        then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>U : U
>success : (value: T) => IPromise<U>
>value : T
>T : T
>IPromise : IPromise<T>
>U : U
>error : (error: any) => IPromise<U>
>error : any
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U
>progress : (progress: any) => void
>progress : any
>类型别名 :=> 任意
>Windows : any
>类型别名 :=> 任意
>Foundation : any
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

        then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>U : U
>success : (value: T) => IPromise<U>
>value : T
>T : T
>IPromise : IPromise<T>
>U : U
>error : (error: any) => U
>error : any
>类型别名 :=> 任意
>U : U
>progress : (progress: any) => void
>progress : any
>类型别名 :=> 任意
>Windows : any
>类型别名 :=> 任意
>Foundation : any
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

        then<U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>U : U
>success : (value: T) => U
>value : T
>T : T
>U : U
>error : (error: any) => IPromise<U>
>error : any
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U
>progress : (progress: any) => void
>progress : any
>类型别名 :=> 任意
>Windows : any
>类型别名 :=> 任意
>Foundation : any
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

        then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>U : U
>success : (value: T) => U
>value : T
>T : T
>U : U
>error : (error: any) => U
>error : any
>类型别名 :=> 任意
>U : U
>progress : (progress: any) => void
>progress : any
>类型别名 :=> 任意
>Windows : any
>类型别名 :=> 任意
>Foundation : any
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

        done<U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void ): void;
>done : <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void) => void
>U : U
>success : (value: T) => any
>value : T
>T : T
>error : (error: any) => any
>error : any
>类型别名 :=> 任意
>progress : (progress: any) => void
>progress : any
>类型别名 :=> 任意

        value: T;
>value : T
>T : T
    }
}

var p: Windows.Foundation.IPromise<string>;
>p : Windows.Foundation.IPromise<string>
>Windows : any
>类型别名 :=> 任意
>Foundation : any
>类型别名 :=> 任意
>IPromise : Windows.Foundation.IPromise<T>

var p2 = p.then(function (s) {
>p2 : Windows.Foundation.IPromise<number>
>p.then(function (s) {    return 34;} ) : Windows.Foundation.IPromise<number>
>p.then : { <U>(success?: (value: string) => Windows.Foundation.IPromise<U>, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => Windows.Foundation.IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; }
>p : Windows.Foundation.IPromise<string>
>then : { <U>(success?: (value: string) => Windows.Foundation.IPromise<U>, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => Windows.Foundation.IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; }
>function (s) {    return 34;} : (s: string) => number
>s : string
>类型别名 :=> 文字

    return 34;
>34 : 34

} );


var x: number = p2.value;
>x : number
>类型别名 :=> 数字
>p2.value : number
>类型别名 :=> 数字
>p2 : Windows.Foundation.IPromise<number>
>value : number
>类型别名 :=> 数字


