=== tests/cases/conformance/types/typeRelationships/typeInference/unionAndIntersectionInference2.ts ===
declare function f1<T>(x: T | string): T;
>f1 : <T>(x: 文字 | T) => T
>T : T
>x : 文字 | T
>T : T
>T : T

var a1: string;
>a1 : 文字
>类型别名 :=> 文字

var b1: string | string[];
>b1 : 文字 | 文字[]

var c1: string[] | string;
>c1 : 文字 | 文字[]

var d1: string | { name: string };
>d1 : 文字 | { name: 文字; }
>name : 文字
>类型别名 :=> 文字

var e1: number | string | boolean;
>e1 : 文字 | 数字 | 真假

f1(a1); // string
>f1(a1) : 文字
>类型别名 :=> 文字
>f1 : <T>(x: 文字 | T) => T
>a1 : 文字
>类型别名 :=> 文字

f1(b1); // string[]
>f1(b1) : 文字[]
>f1 : <T>(x: 文字 | T) => T
>b1 : 文字 | 文字[]

f1(c1); // string[]
>f1(c1) : 文字[]
>f1 : <T>(x: 文字 | T) => T
>c1 : 文字 | 文字[]

f1(d1); // { name: string }
>f1(d1) : { name: 文字; }
>f1 : <T>(x: 文字 | T) => T
>d1 : 文字 | { name: 文字; }

f1(e1); // number | boolean
>f1(e1) : 数字 | 真假
>f1 : <T>(x: 文字 | T) => T
>e1 : 文字 | 数字 | 真假

declare function f2<T>(x: T & { name: string }): T;
>f2 : <T>(x: T & { name: 文字; }) => T
>T : T
>x : T & { name: 文字; }
>T : T
>name : 文字
>类型别名 :=> 文字
>T : T

var a2: string & { name: string };
>a2 : 文字 & { name: 文字; }
>name : 文字
>类型别名 :=> 文字

var b2: { name: string } & string[];
>b2 : { name: 文字; } & 文字[]
>name : 文字
>类型别名 :=> 文字

var c2: string & { name: string } & number;
>c2 : 文字 & { name: 文字; } & 数字
>name : 文字
>类型别名 :=> 文字

var d2: string & { name: string } & number & { name: string };
>d2 : 文字 & { name: 文字; } & 数字 & { name: 文字; }
>name : 文字
>类型别名 :=> 文字
>name : 文字
>类型别名 :=> 文字

f2(a2); // string
>f2(a2) : 文字
>类型别名 :=> 文字
>f2 : <T>(x: T & { name: 文字; }) => T
>a2 : 文字 & { name: 文字; }

f2(b2); // string[]
>f2(b2) : 文字[]
>f2 : <T>(x: T & { name: 文字; }) => T
>b2 : { name: 文字; } & 文字[]

f2(c2); // string & number
>f2(c2) : 文字 & 数字
>f2 : <T>(x: T & { name: 文字; }) => T
>c2 : 文字 & { name: 文字; } & 数字

f2(d2); // string & number
>f2(d2) : 文字 & 数字
>f2 : <T>(x: T & { name: 文字; }) => T
>d2 : 文字 & { name: 文字; } & 数字 & { name: 文字; }

