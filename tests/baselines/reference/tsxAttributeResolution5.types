=== tests/cases/conformance/jsx/file.tsx ===
declare module JSX {
>JSX : 任意
>类型别名 :=> 任意

	interface Element { }
>Element : Element

	interface IntrinsicElements {
>IntrinsicElements : IntrinsicElements

		test1: Attribs1;
>test1 : Attribs1
>Attribs1 : Attribs1

		test2: Attribs2;
>test2 : Attribs2
>Attribs2 : Attribs2
	}
}
interface Attribs1 {
>Attribs1 : Attribs1

	x: string;
>x : 文字
>类型别名 :=> 文字
}

interface Attribs2 {
>Attribs2 : Attribs2

	toString(): string;
>toString : () => 文字
}

function make1<T extends {x: string}> (obj: T) {
>make1 : <T 扩展 { x: 文字; }>(obj: T) => JSX.Element
>T : T
>x : 文字
>类型别名 :=> 文字
>obj : T
>T : T

	return <test1 {...obj} />; // OK
><test1 {...obj} /> : JSX.Element
>test1 : 任意
>类型别名 :=> 任意
>obj : T
}

function make2<T extends {x: number}> (obj: T) {
>make2 : <T 扩展 { x: 数字; }>(obj: T) => JSX.Element
>T : T
>x : 数字
>类型别名 :=> 数字
>obj : T
>T : T

	return <test1 {...obj} />; // Error (x is number, not string)
><test1 {...obj} /> : JSX.Element
>test1 : 任意
>类型别名 :=> 任意
>obj : T
}

function make3<T extends {y: string}> (obj: T) {
>make3 : <T 扩展 { y: 文字; }>(obj: T) => JSX.Element
>T : T
>y : 文字
>类型别名 :=> 文字
>obj : T
>T : T

	return <test1 {...obj} />; // Error, missing x
><test1 {...obj} /> : JSX.Element
>test1 : 任意
>类型别名 :=> 任意
>obj : T
}


<test1 {...{}} />; // Error, missing x
><test1 {...{}} /> : JSX.Element
>test1 : 任意
>类型别名 :=> 任意
>{} : {}

<test2 {...{}} />; // Error, missing toString
><test2 {...{}} /> : JSX.Element
>test2 : 任意
>类型别名 :=> 任意
>{} : {}

