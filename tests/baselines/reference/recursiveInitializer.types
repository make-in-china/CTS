=== tests/cases/conformance/statements/VariableStatements/recursiveInitializer.ts ===
// number unless otherwise specified
var n1 = n1++;
>n1 : 任意
>类型别名 :=> 任意
>n1++ : 数字
>类型别名 :=> 数字
>n1 : 任意
>类型别名 :=> 任意

var n2: number = n2 + n2;
>n2 : 数字
>类型别名 :=> 数字
>n2 + n2 : 数字
>类型别名 :=> 数字
>n2 : 数字
>类型别名 :=> 数字
>n2 : 数字
>类型别名 :=> 数字

var n3 /* any */ = n3 + n3;
>n3 : 任意
>类型别名 :=> 任意
>n3 + n3 : 任意
>类型别名 :=> 任意
>n3 : 任意
>类型别名 :=> 任意
>n3 : 任意
>类型别名 :=> 任意

// string unless otherwise specified
var s1 = s1 + '';
>s1 : 任意
>类型别名 :=> 任意
>s1 + '' : 文字
>类型别名 :=> 文字
>s1 : 任意
>类型别名 :=> 任意
>'' : ""

var s2 /* any */ = s2 + s2;
>s2 : 任意
>类型别名 :=> 任意
>s2 + s2 : 任意
>类型别名 :=> 任意
>s2 : 任意
>类型别名 :=> 任意
>s2 : 任意
>类型别名 :=> 任意

var s3 : string = s3 + s3;
>s3 : 文字
>类型别名 :=> 文字
>s3 + s3 : 文字
>类型别名 :=> 文字
>s3 : 文字
>类型别名 :=> 文字
>s3 : 文字
>类型别名 :=> 文字

var s4 = '' + s4;
>s4 : 任意
>类型别名 :=> 任意
>'' + s4 : 文字
>类型别名 :=> 文字
>'' : ""
>s4 : 任意
>类型别名 :=> 任意

// boolean unless otherwise specified
var b1 = !b1;
>b1 : 任意
>类型别名 :=> 任意
>!b1 : 真假
>类型别名 :=> 真假
>b1 : 任意
>类型别名 :=> 任意

var b2 = !!b2;
>b2 : 任意
>类型别名 :=> 任意
>!!b2 : 真假
>类型别名 :=> 真假
>!b2 : 真假
>类型别名 :=> 真假
>b2 : 任意
>类型别名 :=> 任意

var b3 = !b3 || b3; // expected boolean here. actually 'any'
>b3 : 任意
>类型别名 :=> 任意
>!b3 || b3 : 任意
>类型别名 :=> 任意
>!b3 : 真假
>类型别名 :=> 真假
>b3 : 任意
>类型别名 :=> 任意
>b3 : 任意
>类型别名 :=> 任意

var b4 = (!b4) && b4; // expected boolean here. actually 'any'
>b4 : 任意
>类型别名 :=> 任意
>(!b4) && b4 : 任意
>类型别名 :=> 任意
>(!b4) : 真假
>类型别名 :=> 真假
>!b4 : 真假
>类型别名 :=> 真假
>b4 : 任意
>类型别名 :=> 任意
>b4 : 任意
>类型别名 :=> 任意

// (x:string) => any
var f = (x: string) => f(x);
>f : (x: 文字) => 任意
>(x: string) => f(x) : (x: 文字) => 任意
>x : 文字
>类型别名 :=> 文字
>f(x) : 任意
>类型别名 :=> 任意
>f : (x: 文字) => 任意
>x : 文字
>类型别名 :=> 文字

