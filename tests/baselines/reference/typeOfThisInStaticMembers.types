=== tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers.ts ===
class C {
>C : C

    constructor(x: number) { }
>x : 数字
>类型别名 :=> 数字

    static foo: number;
>foo : 数字
>类型别名 :=> 数字

    static bar() {
>bar : () => 类为 C

        // type of this is the constructor function type
        var t = this;
>t : 类为 C
>this : 类为 C

        return this;
>this : 类为 C
    }
}

var t = C.bar();
>t : 类为 C
>C.bar() : 类为 C
>C.bar : () => 类为 C
>C : 类为 C
>bar : () => 类为 C

// all ok
var r2 = t.foo + 1;
>r2 : 数字
>类型别名 :=> 数字
>t.foo + 1 : 数字
>类型别名 :=> 数字
>t.foo : 数字
>类型别名 :=> 数字
>t : 类为 C
>foo : 数字
>类型别名 :=> 数字
>1 : 1

var r3 = t.bar();
>r3 : 类为 C
>t.bar() : 类为 C
>t.bar : () => 类为 C
>t : 类为 C
>bar : () => 类为 C

var r4 = new t(1);
>r4 : C
>new t(1) : C
>t : 类为 C
>1 : 1

class C2<T> {
>C2 : C2<T>
>T : T

    static test: number;
>test : 数字
>类型别名 :=> 数字

    constructor(x: string) { }
>x : 文字
>类型别名 :=> 文字

    static foo: string;
>foo : 文字
>类型别名 :=> 文字

    static bar() {
>bar : () => 类为 C2

        // type of this is the constructor function type
        var t = this;
>t : 类为 C2
>this : 类为 C2

        return this;
>this : 类为 C2
    }
}

var t2 = C2.bar();
>t2 : 类为 C2
>C2.bar() : 类为 C2
>C2.bar : () => 类为 C2
>C2 : 类为 C2
>bar : () => 类为 C2

// all ok
var r5 = t2.foo + 1;
>r5 : 文字
>类型别名 :=> 文字
>t2.foo + 1 : 文字
>类型别名 :=> 文字
>t2.foo : 文字
>类型别名 :=> 文字
>t2 : 类为 C2
>foo : 文字
>类型别名 :=> 文字
>1 : 1

var r6 = t2.bar();
>r6 : 类为 C2
>t2.bar() : 类为 C2
>t2.bar : () => 类为 C2
>t2 : 类为 C2
>bar : () => 类为 C2

var r7 = new t2('');
>r7 : C2<{}>
>new t2('') : C2<{}>
>t2 : 类为 C2
>'' : ""


