=== tests/cases/compiler/fatarrowfunctionsOptionalArgs.ts ===
// valid

// no params
() => 1;
>() => 1 : () => 数字
>1 : 1

// one param, no type
(arg) => 2;
>(arg) => 2 : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>2 : 2

// one param, no type
arg => 2;
>arg => 2 : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>2 : 2

// one param, no type with default value
(arg = 1) => 3;
>(arg = 1) => 3 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>1 : 1
>3 : 3

// one param, no type, optional
(arg?) => 4;
>(arg?) => 4 : (arg?: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>4 : 4

// typed param
(arg: number) => 5;
>(arg: number) => 5 : (arg: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>5 : 5

// typed param with default value
(arg: number = 0) => 6;
>(arg: number = 0) => 6 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>0 : 0
>6 : 6

// optional param
(arg?: number) => 7;
>(arg?: number) => 7 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>7 : 7

// var arg param
(...arg: number[]) => 8;
>(...arg: number[]) => 8 : (...arg: 数字[]) => 数字
>arg : 数字[]
>8 : 8

// multiple arguments
(arg1, arg2) => 12;
>(arg1, arg2) => 12 : (arg1: 任意, arg2: 任意) => 数字
>arg1 : 任意
>类型别名 :=> 任意
>arg2 : 任意
>类型别名 :=> 任意
>12 : 12

(arg1 = 1, arg2 =3) => 13;
>(arg1 = 1, arg2 =3) => 13 : (arg1?: 数字, arg2?: 数字) => 数字
>arg1 : 数字
>类型别名 :=> 数字
>1 : 1
>arg2 : 数字
>类型别名 :=> 数字
>3 : 3
>13 : 13

(arg1?, arg2?) => 14;
>(arg1?, arg2?) => 14 : (arg1?: 任意, arg2?: 任意) => 数字
>arg1 : 任意
>类型别名 :=> 任意
>arg2 : 任意
>类型别名 :=> 任意
>14 : 14

(arg1: number, arg2: number) => 15;
>(arg1: number, arg2: number) => 15 : (arg1: 数字, arg2: 数字) => 数字
>arg1 : 数字
>类型别名 :=> 数字
>arg2 : 数字
>类型别名 :=> 数字
>15 : 15

(arg1: number = 0, arg2: number = 1) => 16;
>(arg1: number = 0, arg2: number = 1) => 16 : (arg1?: 数字, arg2?: 数字) => 数字
>arg1 : 数字
>类型别名 :=> 数字
>0 : 0
>arg2 : 数字
>类型别名 :=> 数字
>1 : 1
>16 : 16

(arg1?: number, arg2?: number) => 17;
>(arg1?: number, arg2?: number) => 17 : (arg1?: 数字, arg2?: 数字) => 数字
>arg1 : 数字
>类型别名 :=> 数字
>arg2 : 数字
>类型别名 :=> 数字
>17 : 17

(arg1, ...arg2: number[]) => 18;
>(arg1, ...arg2: number[]) => 18 : (arg1: 任意, ...arg2: 数字[]) => 数字
>arg1 : 任意
>类型别名 :=> 任意
>arg2 : 数字[]
>18 : 18

(arg1, arg2?: number) => 19;
>(arg1, arg2?: number) => 19 : (arg1: 任意, arg2?: 数字) => 数字
>arg1 : 任意
>类型别名 :=> 任意
>arg2 : 数字
>类型别名 :=> 数字
>19 : 19

// in paren
(() => 21);
>(() => 21) : () => 数字
>() => 21 : () => 数字
>21 : 21

((arg) => 22);
>((arg) => 22) : (arg: 任意) => 数字
>(arg) => 22 : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>22 : 22

((arg = 1) => 23);
>((arg = 1) => 23) : (arg?: 数字) => 数字
>(arg = 1) => 23 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>1 : 1
>23 : 23

((arg?) => 24);
>((arg?) => 24) : (arg?: 任意) => 数字
>(arg?) => 24 : (arg?: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>24 : 24

((arg: number) => 25);
>((arg: number) => 25) : (arg: 数字) => 数字
>(arg: number) => 25 : (arg: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>25 : 25

((arg: number = 0) => 26);
>((arg: number = 0) => 26) : (arg?: 数字) => 数字
>(arg: number = 0) => 26 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>0 : 0
>26 : 26

((arg?: number) => 27);
>((arg?: number) => 27) : (arg?: 数字) => 数字
>(arg?: number) => 27 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>27 : 27

((...arg: number[]) => 28);
>((...arg: number[]) => 28) : (...arg: 数字[]) => 数字
>(...arg: number[]) => 28 : (...arg: 数字[]) => 数字
>arg : 数字[]
>28 : 28

// in multiple paren
(((((arg) => { return 32; }))));
>(((((arg) => { return 32; })))) : (arg: 任意) => 数字
>((((arg) => { return 32; }))) : (arg: 任意) => 数字
>(((arg) => { return 32; })) : (arg: 任意) => 数字
>((arg) => { return 32; }) : (arg: 任意) => 数字
>(arg) => { return 32; } : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>32 : 32

// in ternary exression
false ? () => 41 : null;
>false ? () => 41 : null : () => 数字
>false : 为假
>类型别名 :=> 为假
>() => 41 : () => 数字
>41 : 41
>null : 空值
>类型别名 :=> 空值

false ? (arg) => 42 : null;
>false ? (arg) => 42 : null : (arg: 任意) => 数字
>false : 为假
>类型别名 :=> 为假
>(arg) => 42 : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>42 : 42
>null : 空值
>类型别名 :=> 空值

false ? (arg = 1) => 43 : null;
>false ? (arg = 1) => 43 : null : (arg?: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>(arg = 1) => 43 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>1 : 1
>43 : 43
>null : 空值
>类型别名 :=> 空值

false ? (arg?) => 44 : null;
>false ? (arg?) => 44 : null : (arg?: 任意) => 数字
>false : 为假
>类型别名 :=> 为假
>(arg?) => 44 : (arg?: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>44 : 44
>null : 空值
>类型别名 :=> 空值

false ? (arg: number) => 45 : null;
>false ? (arg: number) => 45 : null : (arg: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>(arg: number) => 45 : (arg: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>45 : 45
>null : 空值
>类型别名 :=> 空值

false ? (arg?: number) => 46 : null;
>false ? (arg?: number) => 46 : null : (arg?: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>(arg?: number) => 46 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>46 : 46
>null : 空值
>类型别名 :=> 空值

false ? (arg?: number = 0) => 47 : null;
>false ? (arg?: number = 0) => 47 : null : (arg?: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>(arg?: number = 0) => 47 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>0 : 0
>47 : 47
>null : 空值
>类型别名 :=> 空值

false ? (...arg: number[]) => 48 : null;
>false ? (...arg: number[]) => 48 : null : (...arg: 数字[]) => 数字
>false : 为假
>类型别名 :=> 为假
>(...arg: number[]) => 48 : (...arg: 数字[]) => 数字
>arg : 数字[]
>48 : 48
>null : 空值
>类型别名 :=> 空值

// in ternary exression within paren
false ? (() => 51) : null;
>false ? (() => 51) : null : () => 数字
>false : 为假
>类型别名 :=> 为假
>(() => 51) : () => 数字
>() => 51 : () => 数字
>51 : 51
>null : 空值
>类型别名 :=> 空值

false ? ((arg) => 52) : null;
>false ? ((arg) => 52) : null : (arg: 任意) => 数字
>false : 为假
>类型别名 :=> 为假
>((arg) => 52) : (arg: 任意) => 数字
>(arg) => 52 : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>52 : 52
>null : 空值
>类型别名 :=> 空值

false ? ((arg = 1) => 53) : null;
>false ? ((arg = 1) => 53) : null : (arg?: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>((arg = 1) => 53) : (arg?: 数字) => 数字
>(arg = 1) => 53 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>1 : 1
>53 : 53
>null : 空值
>类型别名 :=> 空值

false ? ((arg?) => 54) : null;
>false ? ((arg?) => 54) : null : (arg?: 任意) => 数字
>false : 为假
>类型别名 :=> 为假
>((arg?) => 54) : (arg?: 任意) => 数字
>(arg?) => 54 : (arg?: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>54 : 54
>null : 空值
>类型别名 :=> 空值

false ? ((arg: number) => 55) : null;
>false ? ((arg: number) => 55) : null : (arg: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>((arg: number) => 55) : (arg: 数字) => 数字
>(arg: number) => 55 : (arg: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>55 : 55
>null : 空值
>类型别名 :=> 空值

false ? ((arg?: number) => 56) : null;
>false ? ((arg?: number) => 56) : null : (arg?: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>((arg?: number) => 56) : (arg?: 数字) => 数字
>(arg?: number) => 56 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>56 : 56
>null : 空值
>类型别名 :=> 空值

false ? ((arg?: number = 0) => 57) : null;
>false ? ((arg?: number = 0) => 57) : null : (arg?: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>((arg?: number = 0) => 57) : (arg?: 数字) => 数字
>(arg?: number = 0) => 57 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>0 : 0
>57 : 57
>null : 空值
>类型别名 :=> 空值

false ? ((...arg: number[]) => 58) : null;
>false ? ((...arg: number[]) => 58) : null : (...arg: 数字[]) => 数字
>false : 为假
>类型别名 :=> 为假
>((...arg: number[]) => 58) : (...arg: 数字[]) => 数字
>(...arg: number[]) => 58 : (...arg: 数字[]) => 数字
>arg : 数字[]
>58 : 58
>null : 空值
>类型别名 :=> 空值

// ternary exression's else clause
false ? null : () => 61;
>false ? null : () => 61 : () => 数字
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值
>() => 61 : () => 数字
>61 : 61

false ? null : (arg) => 62;
>false ? null : (arg) => 62 : (arg: 任意) => 数字
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值
>(arg) => 62 : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>62 : 62

false ? null : (arg = 1) => 63;
>false ? null : (arg = 1) => 63 : (arg?: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值
>(arg = 1) => 63 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>1 : 1
>63 : 63

false ? null : (arg?) => 64;
>false ? null : (arg?) => 64 : (arg?: 任意) => 数字
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值
>(arg?) => 64 : (arg?: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>64 : 64

false ? null : (arg: number) => 65;
>false ? null : (arg: number) => 65 : (arg: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值
>(arg: number) => 65 : (arg: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>65 : 65

false ? null : (arg?: number) => 66;
>false ? null : (arg?: number) => 66 : (arg?: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值
>(arg?: number) => 66 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>66 : 66

false ? null : (arg?: number = 0) => 67;
>false ? null : (arg?: number = 0) => 67 : (arg?: 数字) => 数字
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值
>(arg?: number = 0) => 67 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>0 : 0
>67 : 67

false ? null : (...arg: number[]) => 68;
>false ? null : (...arg: number[]) => 68 : (...arg: 数字[]) => 数字
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值
>(...arg: number[]) => 68 : (...arg: 数字[]) => 数字
>arg : 数字[]
>68 : 68


// nested ternary expressions
((a?) => { return a; }) ? (b? ) => { return b; } : (c? ) => { return c; };
>((a?) => { return a; }) ? (b? ) => { return b; } : (c? ) => { return c; } : (b?: 任意) => 任意
>((a?) => { return a; }) : (a?: 任意) => 任意
>(a?) => { return a; } : (a?: 任意) => 任意
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>(b? ) => { return b; } : (b?: 任意) => 任意
>b : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>(c? ) => { return c; } : (c?: 任意) => 任意
>c : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

//multiple levels
(a?) => { return a; } ? (b)=>(c)=>81 : (c)=>(d)=>82;
>(a?) => { return a; } : (a?: 任意) => 任意
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>(b)=>(c)=>81 : (b: 任意) => (c: 任意) => 数字
>b : 任意
>类型别名 :=> 任意
>(c)=>81 : (c: 任意) => 数字
>c : 任意
>类型别名 :=> 任意
>81 : 81
>(c)=>(d)=>82 : (c: 任意) => (d: 任意) => 数字
>c : 任意
>类型别名 :=> 任意
>(d)=>82 : (d: 任意) => 数字
>d : 任意
>类型别名 :=> 任意
>82 : 82


// In Expressions
((arg) => 90) instanceof Function;
>((arg) => 90) instanceof Function : 真假
>类型别名 :=> 真假
>((arg) => 90) : (arg: 任意) => 数字
>(arg) => 90 : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>90 : 90
>Function : FunctionConstructor

((arg = 1) => 91) instanceof Function;
>((arg = 1) => 91) instanceof Function : 真假
>类型别名 :=> 真假
>((arg = 1) => 91) : (arg?: 数字) => 数字
>(arg = 1) => 91 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>1 : 1
>91 : 91
>Function : FunctionConstructor

((arg? ) => 92) instanceof Function;
>((arg? ) => 92) instanceof Function : 真假
>类型别名 :=> 真假
>((arg? ) => 92) : (arg?: 任意) => 数字
>(arg? ) => 92 : (arg?: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>92 : 92
>Function : FunctionConstructor

((arg: number) => 93) instanceof Function;
>((arg: number) => 93) instanceof Function : 真假
>类型别名 :=> 真假
>((arg: number) => 93) : (arg: 数字) => 数字
>(arg: number) => 93 : (arg: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>93 : 93
>Function : FunctionConstructor

((arg: number = 1) => 94) instanceof Function;
>((arg: number = 1) => 94) instanceof Function : 真假
>类型别名 :=> 真假
>((arg: number = 1) => 94) : (arg?: 数字) => 数字
>(arg: number = 1) => 94 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>1 : 1
>94 : 94
>Function : FunctionConstructor

((arg?: number) => 95) instanceof Function;
>((arg?: number) => 95) instanceof Function : 真假
>类型别名 :=> 真假
>((arg?: number) => 95) : (arg?: 数字) => 数字
>(arg?: number) => 95 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>95 : 95
>Function : FunctionConstructor

((...arg: number[]) => 96) instanceof Function;
>((...arg: number[]) => 96) instanceof Function : 真假
>类型别名 :=> 真假
>((...arg: number[]) => 96) : (...arg: 数字[]) => 数字
>(...arg: number[]) => 96 : (...arg: 数字[]) => 数字
>arg : 数字[]
>96 : 96
>Function : FunctionConstructor

'' + ((arg) => 100);
>'' + ((arg) => 100) : 文字
>类型别名 :=> 文字
>'' : ""
>((arg) => 100) : (arg: 任意) => 数字
>(arg) => 100 : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>100 : 100

((arg) => 0) + '' + ((arg) => 101);
>((arg) => 0) + '' + ((arg) => 101) : 文字
>类型别名 :=> 文字
>((arg) => 0) + '' : 文字
>类型别名 :=> 文字
>((arg) => 0) : (arg: 任意) => 数字
>(arg) => 0 : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>0 : 0
>'' : ""
>((arg) => 101) : (arg: 任意) => 数字
>(arg) => 101 : (arg: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>101 : 101

((arg = 1) => 0) + '' + ((arg = 2) => 102);
>((arg = 1) => 0) + '' + ((arg = 2) => 102) : 文字
>类型别名 :=> 文字
>((arg = 1) => 0) + '' : 文字
>类型别名 :=> 文字
>((arg = 1) => 0) : (arg?: 数字) => 数字
>(arg = 1) => 0 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>1 : 1
>0 : 0
>'' : ""
>((arg = 2) => 102) : (arg?: 数字) => 数字
>(arg = 2) => 102 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>2 : 2
>102 : 102

((arg?) => 0) + '' + ((arg?) => 103);
>((arg?) => 0) + '' + ((arg?) => 103) : 文字
>类型别名 :=> 文字
>((arg?) => 0) + '' : 文字
>类型别名 :=> 文字
>((arg?) => 0) : (arg?: 任意) => 数字
>(arg?) => 0 : (arg?: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>0 : 0
>'' : ""
>((arg?) => 103) : (arg?: 任意) => 数字
>(arg?) => 103 : (arg?: 任意) => 数字
>arg : 任意
>类型别名 :=> 任意
>103 : 103

((arg:number) => 0) + '' + ((arg:number) => 104);
>((arg:number) => 0) + '' + ((arg:number) => 104) : 文字
>类型别名 :=> 文字
>((arg:number) => 0) + '' : 文字
>类型别名 :=> 文字
>((arg:number) => 0) : (arg: 数字) => 数字
>(arg:number) => 0 : (arg: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>0 : 0
>'' : ""
>((arg:number) => 104) : (arg: 数字) => 数字
>(arg:number) => 104 : (arg: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>104 : 104

((arg:number = 1) => 0) + '' + ((arg:number = 2) => 105);
>((arg:number = 1) => 0) + '' + ((arg:number = 2) => 105) : 文字
>类型别名 :=> 文字
>((arg:number = 1) => 0) + '' : 文字
>类型别名 :=> 文字
>((arg:number = 1) => 0) : (arg?: 数字) => 数字
>(arg:number = 1) => 0 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>1 : 1
>0 : 0
>'' : ""
>((arg:number = 2) => 105) : (arg?: 数字) => 数字
>(arg:number = 2) => 105 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>2 : 2
>105 : 105

((arg?:number = 1) => 0) + '' + ((arg?:number = 2) => 106);
>((arg?:number = 1) => 0) + '' + ((arg?:number = 2) => 106) : 文字
>类型别名 :=> 文字
>((arg?:number = 1) => 0) + '' : 文字
>类型别名 :=> 文字
>((arg?:number = 1) => 0) : (arg?: 数字) => 数字
>(arg?:number = 1) => 0 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>1 : 1
>0 : 0
>'' : ""
>((arg?:number = 2) => 106) : (arg?: 数字) => 数字
>(arg?:number = 2) => 106 : (arg?: 数字) => 数字
>arg : 数字
>类型别名 :=> 数字
>2 : 2
>106 : 106

((...arg:number[]) => 0) + '' + ((...arg:number[]) => 107);
>((...arg:number[]) => 0) + '' + ((...arg:number[]) => 107) : 文字
>类型别名 :=> 文字
>((...arg:number[]) => 0) + '' : 文字
>类型别名 :=> 文字
>((...arg:number[]) => 0) : (...arg: 数字[]) => 数字
>(...arg:number[]) => 0 : (...arg: 数字[]) => 数字
>arg : 数字[]
>0 : 0
>'' : ""
>((...arg:number[]) => 107) : (...arg: 数字[]) => 数字
>(...arg:number[]) => 107 : (...arg: 数字[]) => 数字
>arg : 数字[]
>107 : 107

((arg1, arg2?) => 0) + '' + ((arg1,arg2?) => 108);
>((arg1, arg2?) => 0) + '' + ((arg1,arg2?) => 108) : 文字
>类型别名 :=> 文字
>((arg1, arg2?) => 0) + '' : 文字
>类型别名 :=> 文字
>((arg1, arg2?) => 0) : (arg1: 任意, arg2?: 任意) => 数字
>(arg1, arg2?) => 0 : (arg1: 任意, arg2?: 任意) => 数字
>arg1 : 任意
>类型别名 :=> 任意
>arg2 : 任意
>类型别名 :=> 任意
>0 : 0
>'' : ""
>((arg1,arg2?) => 108) : (arg1: 任意, arg2?: 任意) => 数字
>(arg1,arg2?) => 108 : (arg1: 任意, arg2?: 任意) => 数字
>arg1 : 任意
>类型别名 :=> 任意
>arg2 : 任意
>类型别名 :=> 任意
>108 : 108

((arg1, ...arg2:number[]) => 0) + '' + ((arg1, ...arg2:number[]) => 108);
>((arg1, ...arg2:number[]) => 0) + '' + ((arg1, ...arg2:number[]) => 108) : 文字
>类型别名 :=> 文字
>((arg1, ...arg2:number[]) => 0) + '' : 文字
>类型别名 :=> 文字
>((arg1, ...arg2:number[]) => 0) : (arg1: 任意, ...arg2: 数字[]) => 数字
>(arg1, ...arg2:number[]) => 0 : (arg1: 任意, ...arg2: 数字[]) => 数字
>arg1 : 任意
>类型别名 :=> 任意
>arg2 : 数字[]
>0 : 0
>'' : ""
>((arg1, ...arg2:number[]) => 108) : (arg1: 任意, ...arg2: 数字[]) => 数字
>(arg1, ...arg2:number[]) => 108 : (arg1: 任意, ...arg2: 数字[]) => 数字
>arg1 : 任意
>类型别名 :=> 任意
>arg2 : 数字[]
>108 : 108


// Function Parameters
function foo(...arg: any[]) { }
>foo : (...arg: 任意[]) => 无值
>arg : 任意[]

foo(
>foo(    (a) => 110,     ((a) => 111),     (a) => {        return 112;    },    (a? ) => 113,     (a, b? ) => 114,     (a: number) => 115,     (a: number = 0) => 116,     (a = 0) => 117,     (a?: number = 0) => 118,     (...a: number[]) => 119,     (a, b? = 0, ...c: number[]) => 120,    (a) => (b) => (c) => 121,    false? (a) => 0 : (b) => 122) : 无值
>类型别名 :=> 无值
>foo : (...arg: 任意[]) => 无值

    (a) => 110, 
>(a) => 110 : (a: 任意) => 数字
>a : 任意
>类型别名 :=> 任意
>110 : 110

    ((a) => 111), 
>((a) => 111) : (a: 任意) => 数字
>(a) => 111 : (a: 任意) => 数字
>a : 任意
>类型别名 :=> 任意
>111 : 111

    (a) => {
>(a) => {        return 112;    } : (a: 任意) => 数字
>a : 任意
>类型别名 :=> 任意

        return 112;
>112 : 112

    },
    (a? ) => 113, 
>(a? ) => 113 : (a?: 任意) => 数字
>a : 任意
>类型别名 :=> 任意
>113 : 113

    (a, b? ) => 114, 
>(a, b? ) => 114 : (a: 任意, b?: 任意) => 数字
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>114 : 114

    (a: number) => 115, 
>(a: number) => 115 : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字
>115 : 115

    (a: number = 0) => 116, 
>(a: number = 0) => 116 : (a?: 数字) => 数字
>a : 数字
>类型别名 :=> 数字
>0 : 0
>116 : 116

    (a = 0) => 117, 
>(a = 0) => 117 : (a?: 数字) => 数字
>a : 数字
>类型别名 :=> 数字
>0 : 0
>117 : 117

    (a?: number = 0) => 118, 
>(a?: number = 0) => 118 : (a?: 数字) => 数字
>a : 数字
>类型别名 :=> 数字
>0 : 0
>118 : 118

    (...a: number[]) => 119, 
>(...a: number[]) => 119 : (...a: 数字[]) => 数字
>a : 数字[]
>119 : 119

    (a, b? = 0, ...c: number[]) => 120,
>(a, b? = 0, ...c: number[]) => 120 : (a: 任意, b?: 数字, ...c: 数字[]) => 数字
>a : 任意
>类型别名 :=> 任意
>b : 数字
>类型别名 :=> 数字
>0 : 0
>c : 数字[]
>120 : 120

    (a) => (b) => (c) => 121,
>(a) => (b) => (c) => 121 : (a: 任意) => (b: 任意) => (c: 任意) => 数字
>a : 任意
>类型别名 :=> 任意
>(b) => (c) => 121 : (b: 任意) => (c: 任意) => 数字
>b : 任意
>类型别名 :=> 任意
>(c) => 121 : (c: 任意) => 数字
>c : 任意
>类型别名 :=> 任意
>121 : 121

    false? (a) => 0 : (b) => 122
>false? (a) => 0 : (b) => 122 : (a: 任意) => 数字
>false : 为假
>类型别名 :=> 为假
>(a) => 0 : (a: 任意) => 数字
>a : 任意
>类型别名 :=> 任意
>0 : 0
>(b) => 122 : (b: 任意) => 数字
>b : 任意
>类型别名 :=> 任意
>122 : 122

);
