=== tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns01_ES5.ts ===
(function () {
>(function () {    var a: any;    var {} = a;    let {} = a;    const {} = a;    var [] = a;    let [] = a;    const [] = a;    var {} = a, [] = a;    let {} = a, [] = a;    const {} = a, [] = a;    var { p1: {}, p2: [] } = a;    let { p1: {}, p2: [] } = a;    const { p1: {}, p2: [] } = a;    for (var {} = {}, {} = {}; false; void 0) {    }    function f({} = a, [] = a, { p: {} = a} = a) {        return ({} = a, [] = a, { p: {} = a } = a) => a;    }})() : 无值
>类型别名 :=> 无值
>(function () {    var a: any;    var {} = a;    let {} = a;    const {} = a;    var [] = a;    let [] = a;    const [] = a;    var {} = a, [] = a;    let {} = a, [] = a;    const {} = a, [] = a;    var { p1: {}, p2: [] } = a;    let { p1: {}, p2: [] } = a;    const { p1: {}, p2: [] } = a;    for (var {} = {}, {} = {}; false; void 0) {    }    function f({} = a, [] = a, { p: {} = a} = a) {        return ({} = a, [] = a, { p: {} = a } = a) => a;    }}) : () => 无值
>function () {    var a: any;    var {} = a;    let {} = a;    const {} = a;    var [] = a;    let [] = a;    const [] = a;    var {} = a, [] = a;    let {} = a, [] = a;    const {} = a, [] = a;    var { p1: {}, p2: [] } = a;    let { p1: {}, p2: [] } = a;    const { p1: {}, p2: [] } = a;    for (var {} = {}, {} = {}; false; void 0) {    }    function f({} = a, [] = a, { p: {} = a} = a) {        return ({} = a, [] = a, { p: {} = a } = a) => a;    }} : () => 无值

    var a: any;
>a : 任意
>类型别名 :=> 任意

    var {} = a;
>a : 任意
>类型别名 :=> 任意

    let {} = a;
>a : 任意
>类型别名 :=> 任意

    const {} = a;
>a : 任意
>类型别名 :=> 任意

    var [] = a;
>a : 任意
>类型别名 :=> 任意

    let [] = a;
>a : 任意
>类型别名 :=> 任意

    const [] = a;
>a : 任意
>类型别名 :=> 任意

    var {} = a, [] = a;
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

    let {} = a, [] = a;
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

    const {} = a, [] = a;
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

    var { p1: {}, p2: [] } = a;
>p1 : 任意
>类型别名 :=> 任意
>p2 : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

    let { p1: {}, p2: [] } = a;
>p1 : 任意
>类型别名 :=> 任意
>p2 : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

    const { p1: {}, p2: [] } = a;
>p1 : 任意
>类型别名 :=> 任意
>p2 : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

    for (var {} = {}, {} = {}; false; void 0) {
>{} : {}
>{} : {}
>false : 为假
>类型别名 :=> 为假
>void 0 : 未定
>类型别名 :=> 未定
>0 : 0
    }

    function f({} = a, [] = a, { p: {} = a} = a) {
>f : ({}?: 任意, []?: 任意, { p: {} }?: 任意) => ({}?: 任意, []?: 任意, { p: {} }?: 任意) => 任意
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>p : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

        return ({} = a, [] = a, { p: {} = a } = a) => a;
>({} = a, [] = a, { p: {} = a } = a) => a : ({}?: 任意, []?: 任意, { p: {} }?: 任意) => 任意
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>p : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
    }
})();

(function () {
>(function () {    const ns: number[][] = [];    for (var {} of ns) {    }    for (let {} of ns) {    }    for (const {} of ns) {    }    for (var [] of ns) {    }    for (let [] of ns) {    }    for (const [] of ns) {    }})() : 无值
>类型别名 :=> 无值
>(function () {    const ns: number[][] = [];    for (var {} of ns) {    }    for (let {} of ns) {    }    for (const {} of ns) {    }    for (var [] of ns) {    }    for (let [] of ns) {    }    for (const [] of ns) {    }}) : () => 无值
>function () {    const ns: number[][] = [];    for (var {} of ns) {    }    for (let {} of ns) {    }    for (const {} of ns) {    }    for (var [] of ns) {    }    for (let [] of ns) {    }    for (const [] of ns) {    }} : () => 无值

    const ns: number[][] = [];
>ns : 数字[][]
>[] : 未定[]

    for (var {} of ns) {
>ns : 数字[][]
    }

    for (let {} of ns) {
>ns : 数字[][]
    }

    for (const {} of ns) {
>ns : 数字[][]
    }

    for (var [] of ns) {
>ns : 数字[][]
    }

    for (let [] of ns) {
>ns : 数字[][]
    }

    for (const [] of ns) {
>ns : 数字[][]
    }
})();
