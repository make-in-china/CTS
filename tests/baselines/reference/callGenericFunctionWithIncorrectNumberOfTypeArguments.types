=== tests/cases/conformance/types/typeParameters/typeArgumentLists/callGenericFunctionWithIncorrectNumberOfTypeArguments.ts ===
// type parameter lists must exactly match type argument lists
// all of these invocations are errors

function f<T, U>(x: T, y: U): T { return null; }
>f : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T
>null : 空值
>类型别名 :=> 空值

var r1 = f<number>(1, '');
>r1 : 任意
>类型别名 :=> 任意
>f<number>(1, '') : 任意
>类型别名 :=> 任意
>f : <T, U>(x: T, y: U) => T
>1 : 1
>'' : ""

var r1b = f<number, string, number>(1, '');
>r1b : 任意
>类型别名 :=> 任意
>f<number, string, number>(1, '') : 任意
>类型别名 :=> 任意
>f : <T, U>(x: T, y: U) => T
>1 : 1
>'' : ""

var f2 = <T, U>(x: T, y: U): T => { return null; }
>f2 : <T, U>(x: T, y: U) => T
><T, U>(x: T, y: U): T => { return null; } : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T
>null : 空值
>类型别名 :=> 空值

var r2 = f2<number>(1, '');
>r2 : 任意
>类型别名 :=> 任意
>f2<number>(1, '') : 任意
>类型别名 :=> 任意
>f2 : <T, U>(x: T, y: U) => T
>1 : 1
>'' : ""

var r2b = f2<number, string, number>(1, '');
>r2b : 任意
>类型别名 :=> 任意
>f2<number, string, number>(1, '') : 任意
>类型别名 :=> 任意
>f2 : <T, U>(x: T, y: U) => T
>1 : 1
>'' : ""

var f3: { <T, U>(x: T, y: U): T; }
>f3 : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

var r3 = f3<number>(1, '');
>r3 : 任意
>类型别名 :=> 任意
>f3<number>(1, '') : 任意
>类型别名 :=> 任意
>f3 : <T, U>(x: T, y: U) => T
>1 : 1
>'' : ""

var r3b = f3<number, string, number>(1, '');
>r3b : 任意
>类型别名 :=> 任意
>f3<number, string, number>(1, '') : 任意
>类型别名 :=> 任意
>f3 : <T, U>(x: T, y: U) => T
>1 : 1
>'' : ""

class C {
>C : C

    f<T, U>(x: T, y: U): T {
>f : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}
var r4 = (new C()).f<number>(1, '');
>r4 : 任意
>类型别名 :=> 任意
>(new C()).f<number>(1, '') : 任意
>类型别名 :=> 任意
>(new C()).f : <T, U>(x: T, y: U) => T
>(new C()) : C
>new C() : C
>C : 类为 C
>f : <T, U>(x: T, y: U) => T
>1 : 1
>'' : ""

var r4b = (new C()).f<number, string, number>(1, '');
>r4b : 任意
>类型别名 :=> 任意
>(new C()).f<number, string, number>(1, '') : 任意
>类型别名 :=> 任意
>(new C()).f : <T, U>(x: T, y: U) => T
>(new C()) : C
>new C() : C
>C : 类为 C
>f : <T, U>(x: T, y: U) => T
>1 : 1
>'' : ""

interface I {
>I : I

    f<T, U>(x: T, y: U): T;
>f : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T
}
var i: I;
>i : I
>I : I

var r5 = i.f<number>(1, '');
>r5 : 任意
>类型别名 :=> 任意
>i.f<number>(1, '') : 任意
>类型别名 :=> 任意
>i.f : <T, U>(x: T, y: U) => T
>i : I
>f : <T, U>(x: T, y: U) => T
>1 : 1
>'' : ""

var r5b = i.f<number, string, number>(1, '');
>r5b : 任意
>类型别名 :=> 任意
>i.f<number, string, number>(1, '') : 任意
>类型别名 :=> 任意
>i.f : <T, U>(x: T, y: U) => T
>i : I
>f : <T, U>(x: T, y: U) => T
>1 : 1
>'' : ""

class C2<T, U> {
>C2 : C2<T, U>
>T : T
>U : U

    f(x: T, y: U): T {
>f : (x: T, y: U) => T
>x : T
>T : T
>y : U
>U : U
>T : T

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}
var r6 = (new C2()).f<number>(1, '');
>r6 : {}
>(new C2()).f<number>(1, '') : {}
>(new C2()).f : (x: {}, y: {}) => {}
>(new C2()) : C2<{}, {}>
>new C2() : C2<{}, {}>
>C2 : 类为 C2
>f : (x: {}, y: {}) => {}
>1 : 1
>'' : ""

var r6b = (new C2()).f<number, string, number>(1, '');
>r6b : {}
>(new C2()).f<number, string, number>(1, '') : {}
>(new C2()).f : (x: {}, y: {}) => {}
>(new C2()) : C2<{}, {}>
>new C2() : C2<{}, {}>
>C2 : 类为 C2
>f : (x: {}, y: {}) => {}
>1 : 1
>'' : ""

interface I2<T, U> {
>I2 : I2<T, U>
>T : T
>U : U

    f(x: T, y: U): T;
>f : (x: T, y: U) => T
>x : T
>T : T
>y : U
>U : U
>T : T
}
var i2: I2<number, string>;
>i2 : I2<数字, 文字>
>I2 : I2<T, U>

var r7 = i2.f<number>(1, '');
>r7 : 数字
>类型别名 :=> 数字
>i2.f<number>(1, '') : 数字
>类型别名 :=> 数字
>i2.f : (x: 数字, y: 文字) => 数字
>i2 : I2<数字, 文字>
>f : (x: 数字, y: 文字) => 数字
>1 : 1
>'' : ""

var r7b = i2.f<number, string, number>(1, '');
>r7b : 数字
>类型别名 :=> 数字
>i2.f<number, string, number>(1, '') : 数字
>类型别名 :=> 数字
>i2.f : (x: 数字, y: 文字) => 数字
>i2 : I2<数字, 文字>
>f : (x: 数字, y: 文字) => 数字
>1 : 1
>'' : ""

