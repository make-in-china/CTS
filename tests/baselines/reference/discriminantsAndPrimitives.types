=== tests/cases/compiler/discriminantsAndPrimitives.ts ===
// Repro from #10257 plus other tests

interface Foo {
>Foo : Foo

    kind: "foo";
>kind : "foo"

    name: string;
>name : string
>类型别名 :=> 文字
}

interface Bar {
>Bar : Bar

    kind: "bar";
>kind : "bar"

    length: string;
>length : string
>类型别名 :=> 文字
}

function f1(x: Foo | Bar | string) {
>f1 : (x: string | Foo | Bar) => void
>x : string | Foo | Bar
>Foo : Foo
>Bar : Bar

    if (typeof x !== 'string') {
>typeof x !== 'string' : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | Foo | Bar
>'string' : "string"

        switch(x.kind) {
>x.kind : "foo" | "bar"
>x : Foo | Bar
>kind : "foo" | "bar"

            case 'foo':
>'foo' : "foo"

                x.name;
>x.name : string
>类型别名 :=> 文字
>x : Foo
>name : string
>类型别名 :=> 文字
        }
    }
}

function f2(x: Foo | Bar | string | undefined) {
>f2 : (x: string | Foo | Bar | undefined) => void
>x : string | Foo | Bar | undefined
>Foo : Foo
>Bar : Bar

    if (typeof x === "object") {
>typeof x === "object" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | Foo | Bar | undefined
>"object" : "object"

        switch(x.kind) {
>x.kind : "foo" | "bar"
>x : Foo | Bar
>kind : "foo" | "bar"

            case 'foo':
>'foo' : "foo"

                x.name;
>x.name : string
>类型别名 :=> 文字
>x : Foo
>name : string
>类型别名 :=> 文字
        }
    }
}

function f3(x: Foo | Bar | string | null) {
>f3 : (x: string | Foo | Bar | null) => void
>x : string | Foo | Bar | null
>Foo : Foo
>Bar : Bar
>null : null
>类型别名 :=> 空值

    if (x && typeof x !== "string") {
>x && typeof x !== "string" : boolean | "" | null
>x : string | Foo | Bar | null
>typeof x !== "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | Foo | Bar
>"string" : "string"

        switch(x.kind) {
>x.kind : "foo" | "bar"
>x : Foo | Bar
>kind : "foo" | "bar"

            case 'foo':
>'foo' : "foo"

                x.name;
>x.name : string
>类型别名 :=> 文字
>x : Foo
>name : string
>类型别名 :=> 文字
        }
    }
}

function f4(x: Foo | Bar | string | number | null) {
>f4 : (x: string | number | Foo | Bar | null) => void
>x : string | number | Foo | Bar | null
>Foo : Foo
>Bar : Bar
>null : null
>类型别名 :=> 空值

    if (x && typeof x === "object") {
>x && typeof x === "object" : boolean | "" | 0 | null
>x : string | number | Foo | Bar | null
>typeof x === "object" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number | Foo | Bar
>"object" : "object"

        switch(x.kind) {
>x.kind : "foo" | "bar"
>x : Foo | Bar
>kind : "foo" | "bar"

            case 'foo':
>'foo' : "foo"

                x.name;
>x.name : string
>类型别名 :=> 文字
>x : Foo
>name : string
>类型别名 :=> 文字
        }
    }
}
