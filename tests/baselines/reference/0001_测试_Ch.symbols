=== /a/node_modules/@types/testCh/index.d.cts ===
//@@{ 内容描述:C, 标题:t, 内容:n }
//@@{ "啊啊啊啊啊":"AAAAAAAAAAA", "宝宝贝贝吧":"BBBBBBBBB" }
导出 声明 接口 内容描述{
>内容描述 : Symbol(内容描述, Decl(index.d.cts, 0, 0))
>节点别名 : #内容描述 => C
>符号别名 : #内容描述 => C

    标题: 文字
>标题 : Symbol(内容描述.标题, Decl(index.d.cts, 2, 14))
>节点别名 : #内容描述.标题 => t
>符号别名 : #内容描述.标题 => t

    内容: "啊啊啊啊啊" | "宝宝贝贝吧"
>内容 : Symbol(内容描述.内容, Decl(index.d.cts, 3, 10))
>节点别名 : #内容描述.内容 => n
>符号别名 : #内容描述.内容 => n
}

//@@{ 测试类:Te, 测试目标:v, 测试内容:tn, 取测试目标:V, 取测试内容:Tn }
导出 声明 类别 测试类 {
>测试类 : Symbol(测试类, Decl(index.d.cts, 5, 1))
>节点别名 : #测试类 => Te
>符号别名 : #测试类 => Te

    私有 测试目标: 文字
>测试目标 : Symbol(测试类.测试目标, Decl(index.d.cts, 8, 14))
>节点别名 : #测试类.测试目标 => v
>符号别名 : #测试类.测试目标 => v

    私有 测试内容: 内容描述
>测试内容 : Symbol(测试类.测试内容, Decl(index.d.cts, 9, 15))
>节点别名 : #测试类.测试内容 => tn
>符号别名 : #测试类.测试内容 => tn
>内容描述 : Symbol(内容描述, Decl(index.d.cts, 0, 0))
>节点别名 : #内容描述 => C
>符号别名 : #内容描述 => C

    构造(测试目标: 文字, 测试内容: 内容描述)
>测试目标 : Symbol(测试目标, Decl(index.d.cts, 11, 7))
>节点别名 : #测试目标 => v
>符号别名 : #测试目标 => v
>测试内容 : Symbol(测试内容, Decl(index.d.cts, 11, 16))
>节点别名 : #测试内容 => tn
>符号别名 : #测试内容 => tn
>内容描述 : Symbol(内容描述, Decl(index.d.cts, 0, 0))
>节点别名 : #内容描述 => C
>符号别名 : #内容描述 => C

    取测试目标: 文字
>取测试目标 : Symbol(测试类.取测试目标, Decl(index.d.cts, 11, 28))
>节点别名 : #测试类.取测试目标 => V
>符号别名 : #测试类.取测试目标 => V

    取测试内容: 内容描述
>取测试内容 : Symbol(测试类.取测试内容, Decl(index.d.cts, 12, 13))
>节点别名 : #测试类.取测试内容 => Tn
>符号别名 : #测试类.取测试内容 => Tn
>内容描述 : Symbol(内容描述, Decl(index.d.cts, 0, 0))
>节点别名 : #内容描述 => C
>符号别名 : #内容描述 => C
}

//@@{ 测试类2:Te2, 测试目标:v, 测试内容:tn, 取测试目标:V, 取测试内容:Tn }
导出 声明 类别 测试类2 {
>测试类2 : Symbol(测试类2, Decl(index.d.cts, 14, 1))
>节点别名 : #测试类2 => Te2
>符号别名 : #测试类2 => Te2

    私有 测试目标: 文字
>测试目标 : Symbol(测试类2.测试目标, Decl(index.d.cts, 17, 15))
>节点别名 : #测试类2.测试目标 => v
>符号别名 : #测试类2.测试目标 => v

    私有 测试内容: 内容描述
>测试内容 : Symbol(测试类2.测试内容, Decl(index.d.cts, 18, 15))
>节点别名 : #测试类2.测试内容 => tn
>符号别名 : #测试类2.测试内容 => tn
>内容描述 : Symbol(内容描述, Decl(index.d.cts, 0, 0))
>节点别名 : #内容描述 => C
>符号别名 : #内容描述 => C

    构造(测试目标: 文字, 测试内容: 内容描述)
>测试目标 : Symbol(测试目标, Decl(index.d.cts, 20, 7))
>节点别名 : #测试目标 => v
>符号别名 : #测试目标 => v
>测试内容 : Symbol(测试内容, Decl(index.d.cts, 20, 16))
>节点别名 : #测试内容 => tn
>符号别名 : #测试内容 => tn
>内容描述 : Symbol(内容描述, Decl(index.d.cts, 0, 0))
>节点别名 : #内容描述 => C
>符号别名 : #内容描述 => C

    取测试目标: 文字
>取测试目标 : Symbol(测试类2.取测试目标, Decl(index.d.cts, 20, 28))
>节点别名 : #测试类2.取测试目标 => V
>符号别名 : #测试类2.取测试目标 => V

    取测试内容: 内容描述
>取测试内容 : Symbol(测试类2.取测试内容, Decl(index.d.cts, 21, 13))
>节点别名 : #测试类2.取测试内容 => Tn
>符号别名 : #测试类2.取测试内容 => Tn
>内容描述 : Symbol(内容描述, Decl(index.d.cts, 0, 0))
>节点别名 : #内容描述 => C
>符号别名 : #内容描述 => C
}

=== /a/测试_1_ch.cts ===
导入 { 测试类, 测试类2, 内容描述 } 来自 "testch"
>测试类 : Symbol(测试类, Decl(测试_1_ch.cts, 0, 4))
>节点别名 : #测试类 => Te
>符号别名 : #测试类 => Te
>测试类2 : Symbol(测试类2, Decl(测试_1_ch.cts, 0, 9))
>节点别名 : #测试类2 => Te2
>符号别名 : #测试类2 => Te2
>内容描述 : Symbol(内容描述, Decl(测试_1_ch.cts, 0, 15))
>节点别名 : #内容描述 => C
>符号别名 : #内容描述 => C

变量 测试目标 = "vvvvv"
>测试目标 : Symbol(测试目标, Decl(测试_1_ch.cts, 2, 2))

变量 测试内容 = {
>测试内容 : Symbol(测试内容, Decl(测试_1_ch.cts, 3, 2))

    标题: "ttttt",
>标题 : Symbol(标题, Decl(测试_1_ch.cts, 3, 11))
>节点别名 : #标题 => t
>符号别名 : #标题 => t

    内容: "啊啊啊啊啊" 转为 "啊啊啊啊啊"| "宝宝贝贝吧"
>内容 : Symbol(内容, Decl(测试_1_ch.cts, 4, 16))
>节点别名 : #内容 => n
>符号别名 : #内容 => n
}

变量 标1 = 新建 测试类("vvvvv", 测试内容)
>标1 : Symbol(标1, Decl(测试_1_ch.cts, 8, 2))
>测试类 : Symbol(测试类, Decl(测试_1_ch.cts, 0, 4))
>节点别名 : #测试类 => Te
>符号别名 : #测试类 => Te
>测试内容 : Symbol(测试内容, Decl(测试_1_ch.cts, 3, 2))

变量 标2 = 新建 测试类2(测试目标, 测试内容)
>标2 : Symbol(标2, Decl(测试_1_ch.cts, 10, 2))
>测试类2 : Symbol(测试类2, Decl(测试_1_ch.cts, 0, 9))
>节点别名 : #测试类2 => Te2
>符号别名 : #测试类2 => Te2
>测试目标 : Symbol(测试目标, Decl(测试_1_ch.cts, 2, 2))
>测试内容 : Symbol(测试内容, Decl(测试_1_ch.cts, 3, 2))

变量 测试目标2 = "vvvvv"
>测试目标2 : Symbol(测试目标2, Decl(测试_1_ch.cts, 12, 2))

变量 标题 = "ttttt"
>标题 : Symbol(标题, Decl(测试_1_ch.cts, 13, 2))

变量 测试内容2: 内容描述 = { 标题: 标题, 内容: "宝宝贝贝吧" }
>测试内容2 : Symbol(测试内容2, Decl(测试_1_ch.cts, 14, 2))
>内容描述 : Symbol(内容描述, Decl(测试_1_ch.cts, 0, 15))
>节点别名 : #内容描述 => C
>符号别名 : #内容描述 => C
>标题 : Symbol(标题, Decl(测试_1_ch.cts, 14, 18))
>节点别名 : #标题 => t
>符号别名 : #标题 => t
>标题 : Symbol(标题, Decl(测试_1_ch.cts, 13, 2))
>内容 : Symbol(内容, Decl(测试_1_ch.cts, 14, 26))
>节点别名 : #内容 => n
>符号别名 : #内容 => n

变量 标3 = 新建 测试类(测试目标2, 测试内容2)
>标3 : Symbol(标3, Decl(测试_1_ch.cts, 16, 2))
>测试类 : Symbol(测试类, Decl(测试_1_ch.cts, 0, 4))
>节点别名 : #测试类 => Te
>符号别名 : #测试类 => Te
>测试目标2 : Symbol(测试目标2, Decl(测试_1_ch.cts, 12, 2))
>测试内容2 : Symbol(测试内容2, Decl(测试_1_ch.cts, 14, 2))

如果(标1 && 标2 && 标3){
>标1 : Symbol(标1, Decl(测试_1_ch.cts, 8, 2))
>标2 : Symbol(标2, Decl(测试_1_ch.cts, 10, 2))
>标3 : Symbol(标3, Decl(测试_1_ch.cts, 16, 2))
    
    标1.取测试目标
>标1.取测试目标 : Symbol(测试类.取测试目标, Decl(index.d.cts, 11, 28))
>符号别名 : #测试类.取测试目标 => V
>标1 : Symbol(标1, Decl(测试_1_ch.cts, 8, 2))
>取测试目标 : Symbol(测试类.取测试目标, Decl(index.d.cts, 11, 28))
>节点别名 : #测试类.取测试目标 => V
>符号别名 : #测试类.取测试目标 => V

    标1.取测试内容
>标1.取测试内容 : Symbol(测试类.取测试内容, Decl(index.d.cts, 12, 13))
>符号别名 : #测试类.取测试内容 => Tn
>标1 : Symbol(标1, Decl(测试_1_ch.cts, 8, 2))
>取测试内容 : Symbol(测试类.取测试内容, Decl(index.d.cts, 12, 13))
>节点别名 : #测试类.取测试内容 => Tn
>符号别名 : #测试类.取测试内容 => Tn

    标2.取测试目标
>标2.取测试目标 : Symbol(测试类2.取测试目标, Decl(index.d.cts, 20, 28))
>符号别名 : #测试类2.取测试目标 => V
>标2 : Symbol(标2, Decl(测试_1_ch.cts, 10, 2))
>取测试目标 : Symbol(测试类2.取测试目标, Decl(index.d.cts, 20, 28))
>节点别名 : #测试类2.取测试目标 => V
>符号别名 : #测试类2.取测试目标 => V

    标2.取测试内容
>标2.取测试内容 : Symbol(测试类2.取测试内容, Decl(index.d.cts, 21, 13))
>符号别名 : #测试类2.取测试内容 => Tn
>标2 : Symbol(标2, Decl(测试_1_ch.cts, 10, 2))
>取测试内容 : Symbol(测试类2.取测试内容, Decl(index.d.cts, 21, 13))
>节点别名 : #测试类2.取测试内容 => Tn
>符号别名 : #测试类2.取测试内容 => Tn

    标3["取测试目标"]
>标3 : Symbol(标3, Decl(测试_1_ch.cts, 16, 2))
>"取测试目标" : Symbol(测试类.取测试目标, Decl(index.d.cts, 11, 28))
>节点别名 : #测试类.取测试目标 => V
>符号别名 : #测试类.取测试目标 => V

    标3["取测试内容"]
>标3 : Symbol(标3, Decl(测试_1_ch.cts, 16, 2))
>"取测试内容" : Symbol(测试类.取测试内容, Decl(index.d.cts, 12, 13))
>节点别名 : #测试类.取测试内容 => Tn
>符号别名 : #测试类.取测试内容 => Tn
}

