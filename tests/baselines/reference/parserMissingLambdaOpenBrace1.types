=== tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserMissingLambdaOpenBrace1.ts ===
class C {
>C : C

    where(filter: Iterator<T, boolean>): Query<T> {
>where : (filter: 任意) => 任意
>filter : 任意
>类型别名 :=> 任意
>Iterator : No type information available!
>T : No type information available!
>Query : No type information available!
>T : No type information available!

        return fromDoWhile(test =>
>fromDoWhile(test =>            var index = 0;            return this.doWhile((item, i) => filter(item, i) ? test(item, index++) : true);        }) : 任意
>类型别名 :=> 任意
>fromDoWhile : 任意
>类型别名 :=> 任意
>test =>            var index = 0;            return this.doWhile((item, i) => filter(item, i) ? test(item, index++) : true);        } : (test: 任意) => 任意
>test : 任意
>类型别名 :=> 任意

            var index = 0;
>index : 数字
>类型别名 :=> 数字
>0 : 0

            return this.doWhile((item, i) => filter(item, i) ? test(item, index++) : true);
>this.doWhile((item, i) => filter(item, i) ? test(item, index++) : true) : 任意
>类型别名 :=> 任意
>this.doWhile : 任意
>类型别名 :=> 任意
>this : 本体
>doWhile : 任意
>类型别名 :=> 任意
>(item, i) => filter(item, i) ? test(item, index++) : true : (item: 任意, i: 任意) => 任意
>item : 任意
>类型别名 :=> 任意
>i : 任意
>类型别名 :=> 任意
>filter(item, i) ? test(item, index++) : true : 任意
>类型别名 :=> 任意
>filter(item, i) : 任意
>类型别名 :=> 任意
>filter : 任意
>类型别名 :=> 任意
>item : 任意
>类型别名 :=> 任意
>i : 任意
>类型别名 :=> 任意
>test(item, index++) : 任意
>类型别名 :=> 任意
>test : 任意
>类型别名 :=> 任意
>item : 任意
>类型别名 :=> 任意
>index++ : 数字
>类型别名 :=> 数字
>index : 数字
>类型别名 :=> 数字
>true : 为真
>类型别名 :=> 为真

        });
    }
}
