=== tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserMissingLambdaOpenBrace1.ts ===
class C {
>C : C

    where(filter: Iterator<T, boolean>): Query<T> {
>where : (filter: any) => any
>filter : any
>类型别名 :=> 任意
>Iterator : No type information available!
>T : No type information available!
>Query : No type information available!
>T : No type information available!

        return fromDoWhile(test =>
>fromDoWhile(test =>            var index = 0;            return this.doWhile((item, i) => filter(item, i) ? test(item, index++) : true);        }) : any
>类型别名 :=> 任意
>fromDoWhile : any
>类型别名 :=> 任意
>test =>            var index = 0;            return this.doWhile((item, i) => filter(item, i) ? test(item, index++) : true);        } : (test: any) => any
>test : any
>类型别名 :=> 任意

            var index = 0;
>index : number
>类型别名 :=> 数字
>0 : 0

            return this.doWhile((item, i) => filter(item, i) ? test(item, index++) : true);
>this.doWhile((item, i) => filter(item, i) ? test(item, index++) : true) : any
>类型别名 :=> 任意
>this.doWhile : any
>类型别名 :=> 任意
>this : this
>doWhile : any
>类型别名 :=> 任意
>(item, i) => filter(item, i) ? test(item, index++) : true : (item: any, i: any) => any
>item : any
>类型别名 :=> 任意
>i : any
>类型别名 :=> 任意
>filter(item, i) ? test(item, index++) : true : any
>类型别名 :=> 任意
>filter(item, i) : any
>类型别名 :=> 任意
>filter : any
>类型别名 :=> 任意
>item : any
>类型别名 :=> 任意
>i : any
>类型别名 :=> 任意
>test(item, index++) : any
>类型别名 :=> 任意
>test : any
>类型别名 :=> 任意
>item : any
>类型别名 :=> 任意
>index++ : number
>类型别名 :=> 数字
>index : number
>类型别名 :=> 数字
>true : true
>类型别名 :=> 为真

        });
    }
}
