=== tests/cases/compiler/lastPropertyInLiteralWins.ts ===
interface Thing {
>Thing : Thing

    thunk: (str: string) => void;
>thunk : (str: 文字) => 无值
>str : 文字
>类型别名 :=> 文字
}
function test(thing: Thing) {
>test : (thing: Thing) => 无值
>thing : Thing
>Thing : Thing

    thing.thunk("str");
>thing.thunk("str") : 无值
>类型别名 :=> 无值
>thing.thunk : (str: 文字) => 无值
>thing : Thing
>thunk : (str: 文字) => 无值
>"str" : "str"
}
test({ // Should error, as last one wins, and is wrong type
>test({ // Should error, as last one wins, and is wrong type    thunk: (str: string) => {},    thunk: (num: number) => {}}) : 无值
>类型别名 :=> 无值
>test : (thing: Thing) => 无值
>{ // Should error, as last one wins, and is wrong type    thunk: (str: string) => {},    thunk: (num: number) => {}} : { thunk: (num: 数字) => 无值; }

    thunk: (str: string) => {},
>thunk : (str: 文字) => 无值
>(str: string) => {} : (str: 文字) => 无值
>str : 文字
>类型别名 :=> 文字

    thunk: (num: number) => {}
>thunk : (str: 文字) => 无值
>(num: number) => {} : (num: 数字) => 无值
>num : 数字
>类型别名 :=> 数字

});

test({ // Should be OK.  Last 'thunk' is of correct type
>test({ // Should be OK.  Last 'thunk' is of correct type    thunk: (num: number) => {},    thunk: (str: string) => {}}) : 无值
>类型别名 :=> 无值
>test : (thing: Thing) => 无值
>{ // Should be OK.  Last 'thunk' is of correct type    thunk: (num: number) => {},    thunk: (str: string) => {}} : { thunk: (str: 文字) => 无值; }

    thunk: (num: number) => {},
>thunk : (num: 数字) => 无值
>(num: number) => {} : (num: 数字) => 无值
>num : 数字
>类型别名 :=> 数字

    thunk: (str: string) => {}
>thunk : (num: 数字) => 无值
>(str: string) => {} : (str: 文字) => 无值
>str : 文字
>类型别名 :=> 文字

});

