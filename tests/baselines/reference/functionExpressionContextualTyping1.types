=== tests/cases/conformance/expressions/contextualTyping/functionExpressionContextualTyping1.ts ===
// When a function expression with no type parameters and no parameter type annotations 
// is contextually typed (section 4.19) by a type T and a contextual signature S can be extracted from T

enum E { red, blue }
>E : E
>red : E.red
>blue : E.blue

// A contextual signature S is extracted from a function type T as follows:
//      If T is a function type with exactly one call signature, and if that call signature is non- generic, S is that signature.

var a0: (n: number, s: string) => number = (num, str) => {
>a0 : (n: 数字, s: 文字) => 数字
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>(num, str) => {    num.toExponential();    return 0;} : (num: 数字, str: 文字) => 数字
>num : 数字
>类型别名 :=> 数字
>str : 文字
>类型别名 :=> 文字

    num.toExponential();
>num.toExponential() : 文字
>类型别名 :=> 文字
>num.toExponential : (fractionDigits?: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>toExponential : (fractionDigits?: 数字) => 文字

    return 0;
>0 : 0
}

class Class<T> {
>Class : Class<T>
>T : T

    foo() { }
>foo : () => 无值
}

var a1: (c: Class<Number>) => number = (a1) => {
>a1 : (c: Class<Number>) => 数字
>c : Class<Number>
>Class : Class<T>
>Number : Number
>(a1) => {    a1.foo();    return 1;} : (a1: Class<Number>) => 数字
>a1 : Class<Number>

    a1.foo();
>a1.foo() : 无值
>类型别名 :=> 无值
>a1.foo : () => 无值
>a1 : Class<Number>
>foo : () => 无值

    return 1;
>1 : 1
}

// A contextual signature S is extracted from a function type T as follows:
//      If T is a union type, let U be the set of element types in T that have call signatures.
//        If each type in U has exactly one call signature and that call signature is non- generic,
//        and if all of the signatures are identical ignoring return types,
//        then S is a signature with the same parameters and a union of the return types.
var b1: ((s: string, w: boolean) => void) | ((s: string, w: boolean) => string);
>b1 : ((s: 文字, w: 真假) => 无值) | ((s: 文字, w: 真假) => 文字)
>s : 文字
>类型别名 :=> 文字
>w : 真假
>类型别名 :=> 真假
>s : 文字
>类型别名 :=> 文字
>w : 真假
>类型别名 :=> 真假

b1 = (k, h) => { };
>b1 = (k, h) => { } : (k: 文字, h: 真假) => 无值
>b1 : ((s: 文字, w: 真假) => 无值) | ((s: 文字, w: 真假) => 文字)
>(k, h) => { } : (k: 文字, h: 真假) => 无值
>k : 文字
>类型别名 :=> 文字
>h : 真假
>类型别名 :=> 真假

var b2: typeof a0 | ((n: number, s: string) => string);
>b2 : ((n: 数字, s: 文字) => 数字) | ((n: 数字, s: 文字) => 文字)
>a0 : (n: 数字, s: 文字) => 数字
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

b2 = (foo, bar) => { return foo + 1; }
>b2 = (foo, bar) => { return foo + 1; } : (foo: 数字, bar: 文字) => 数字
>b2 : ((n: 数字, s: 文字) => 数字) | ((n: 数字, s: 文字) => 文字)
>(foo, bar) => { return foo + 1; } : (foo: 数字, bar: 文字) => 数字
>foo : 数字
>类型别名 :=> 数字
>bar : 文字
>类型别名 :=> 文字
>foo + 1 : 数字
>类型别名 :=> 数字
>foo : 数字
>类型别名 :=> 数字
>1 : 1

b2 = (foo, bar) => { return "hello"; }
>b2 = (foo, bar) => { return "hello"; } : (foo: 数字, bar: 文字) => 文字
>b2 : ((n: 数字, s: 文字) => 数字) | ((n: 数字, s: 文字) => 文字)
>(foo, bar) => { return "hello"; } : (foo: 数字, bar: 文字) => 文字
>foo : 数字
>类型别名 :=> 数字
>bar : 文字
>类型别名 :=> 文字
>"hello" : "hello"

var b3: (name: string, num: number, boo: boolean) => void;
>b3 : (name: 文字, num: 数字, boo: 真假) => 无值
>name : 文字
>类型别名 :=> 文字
>num : 数字
>类型别名 :=> 数字
>boo : 真假
>类型别名 :=> 真假

b3 = (name, number) => { };
>b3 = (name, number) => { } : (name: 文字, number: 数字) => 无值
>b3 : (name: 文字, num: 数字, boo: 真假) => 无值
>(name, number) => { } : (name: 文字, number: 数字) => 无值
>name : 文字
>类型别名 :=> 文字
>number : 数字
>类型别名 :=> 数字

var b4: (n: E) => string = (number = 1) => { return "hello"; };
>b4 : (n: E) => 文字
>n : E
>E : E
>(number = 1) => { return "hello"; } : (number?: E) => 文字
>number : E
>1 : 1
>"hello" : "hello"

var b5: (n: {}) => string = (number = "string") => { return "hello"; };
>b5 : (n: {}) => 文字
>n : {}
>(number = "string") => { return "hello"; } : (number?: {}) => 文字
>number : {}
>"string" : "string"
>"hello" : "hello"

// A contextual signature S is extracted from a function type T as follows:
//      Otherwise, no contextual signature can be extracted from T and S is undefined.
var b6: ((s: string, w: boolean) => void) | ((n: number) => number);
>b6 : ((s: 文字, w: 真假) => 无值) | ((n: 数字) => 数字)
>s : 文字
>类型别名 :=> 文字
>w : 真假
>类型别名 :=> 真假
>n : 数字
>类型别名 :=> 数字

var b7: ((s: string, w: boolean) => void) | ((s: string, w: number) => string);
>b7 : ((s: 文字, w: 真假) => 无值) | ((s: 文字, w: 数字) => 文字)
>s : 文字
>类型别名 :=> 文字
>w : 真假
>类型别名 :=> 真假
>s : 文字
>类型别名 :=> 文字
>w : 数字
>类型别名 :=> 数字

b6 = (k) => { k.toLowerCase() };
>b6 = (k) => { k.toLowerCase() } : (k: 任意) => 无值
>b6 : ((s: 文字, w: 真假) => 无值) | ((n: 数字) => 数字)
>(k) => { k.toLowerCase() } : (k: 任意) => 无值
>k : 任意
>类型别名 :=> 任意
>k.toLowerCase() : 任意
>类型别名 :=> 任意
>k.toLowerCase : 任意
>类型别名 :=> 任意
>k : 任意
>类型别名 :=> 任意
>toLowerCase : 任意
>类型别名 :=> 任意

b6 = (i) => {
>b6 = (i) => {    i.toExponential();    return i;} : (i: 任意) => 任意
>b6 : ((s: 文字, w: 真假) => 无值) | ((n: 数字) => 数字)
>(i) => {    i.toExponential();    return i;} : (i: 任意) => 任意
>i : 任意
>类型别名 :=> 任意

    i.toExponential();
>i.toExponential() : 任意
>类型别名 :=> 任意
>i.toExponential : 任意
>类型别名 :=> 任意
>i : 任意
>类型别名 :=> 任意
>toExponential : 任意
>类型别名 :=> 任意

    return i;
>i : 任意
>类型别名 :=> 任意

};                   // Per spec, no contextual signature can be extracted in this case. (Otherwise clause)
b7 = (j, m) => { };  // Per spec, no contextual signature can be extracted in this case. (Otherwise clause)
>b7 = (j, m) => { } : (j: 任意, m: 任意) => 无值
>b7 : ((s: 文字, w: 真假) => 无值) | ((s: 文字, w: 数字) => 文字)
>(j, m) => { } : (j: 任意, m: 任意) => 无值
>j : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意

class C<T, U> {
>C : C<T, U>
>T : T
>U : U

    constructor() {
        var k: ((j: T, k: U) => (T|U)[]) | ((j: number,k :U) => number[]) = (j, k) => {
>k : ((j: T, k: U) => (T | U)[]) | ((j: 数字, k: U) => 数字[])
>j : T
>T : T
>k : U
>U : U
>T : T
>U : U
>j : 数字
>类型别名 :=> 数字
>k : U
>U : U
>(j, k) => {            return [j, k];        } : (j: 任意, k: 任意) => 任意[]
>j : 任意
>类型别名 :=> 任意
>k : 任意
>类型别名 :=> 任意

            return [j, k];
>[j, k] : 任意[]
>j : 任意
>类型别名 :=> 任意
>k : 任意
>类型别名 :=> 任意

        }   // Per spec, no contextual signature can be extracted in this case.
    }
}
