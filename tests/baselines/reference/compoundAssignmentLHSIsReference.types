=== tests/cases/conformance/expressions/assignmentOperator/compoundAssignmentLHSIsReference.ts ===
var value;
>value : 任意
>类型别名 :=> 任意

// identifiers: variable and parameter
var x1: number;
>x1 : 数字
>类型别名 :=> 数字

x1 *= value;
>x1 *= value : 数字
>类型别名 :=> 数字
>x1 : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意

x1 += value;
>x1 += value : 任意
>类型别名 :=> 任意
>x1 : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意

function fn1(x2: number) {
>fn1 : (x2: 数字) => 无值
>x2 : 数字
>类型别名 :=> 数字

    x2 *= value;
>x2 *= value : 数字
>类型别名 :=> 数字
>x2 : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意

    x2 += value;
>x2 += value : 任意
>类型别名 :=> 任意
>x2 : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意
}

// property accesses
var x3: { a: number };
>x3 : { a: 数字; }
>a : 数字
>类型别名 :=> 数字

x3.a *= value;
>x3.a *= value : 数字
>类型别名 :=> 数字
>x3.a : 数字
>类型别名 :=> 数字
>x3 : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意

x3.a += value;
>x3.a += value : 任意
>类型别名 :=> 任意
>x3.a : 数字
>类型别名 :=> 数字
>x3 : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意

x3['a'] *= value;
>x3['a'] *= value : 数字
>类型别名 :=> 数字
>x3['a'] : 数字
>类型别名 :=> 数字
>x3 : { a: 数字; }
>'a' : "a"
>value : 任意
>类型别名 :=> 任意

x3['a'] += value;
>x3['a'] += value : 任意
>类型别名 :=> 任意
>x3['a'] : 数字
>类型别名 :=> 数字
>x3 : { a: 数字; }
>'a' : "a"
>value : 任意
>类型别名 :=> 任意

// parentheses, the contained expression is reference
(x1) *= value;
>(x1) *= value : 数字
>类型别名 :=> 数字
>(x1) : 数字
>类型别名 :=> 数字
>x1 : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意

(x1) += value;
>(x1) += value : 任意
>类型别名 :=> 任意
>(x1) : 数字
>类型别名 :=> 数字
>x1 : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意

function fn2(x4: number) {
>fn2 : (x4: 数字) => 无值
>x4 : 数字
>类型别名 :=> 数字

    (x4) *= value;
>(x4) *= value : 数字
>类型别名 :=> 数字
>(x4) : 数字
>类型别名 :=> 数字
>x4 : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意

    (x4) += value;
>(x4) += value : 任意
>类型别名 :=> 任意
>(x4) : 数字
>类型别名 :=> 数字
>x4 : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意
}

(x3.a) *= value;
>(x3.a) *= value : 数字
>类型别名 :=> 数字
>(x3.a) : 数字
>类型别名 :=> 数字
>x3.a : 数字
>类型别名 :=> 数字
>x3 : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意

(x3.a) += value;
>(x3.a) += value : 任意
>类型别名 :=> 任意
>(x3.a) : 数字
>类型别名 :=> 数字
>x3.a : 数字
>类型别名 :=> 数字
>x3 : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>value : 任意
>类型别名 :=> 任意

(x3['a']) *= value;
>(x3['a']) *= value : 数字
>类型别名 :=> 数字
>(x3['a']) : 数字
>类型别名 :=> 数字
>x3['a'] : 数字
>类型别名 :=> 数字
>x3 : { a: 数字; }
>'a' : "a"
>value : 任意
>类型别名 :=> 任意

(x3['a']) += value;
>(x3['a']) += value : 任意
>类型别名 :=> 任意
>(x3['a']) : 数字
>类型别名 :=> 数字
>x3['a'] : 数字
>类型别名 :=> 数字
>x3 : { a: 数字; }
>'a' : "a"
>value : 任意
>类型别名 :=> 任意

