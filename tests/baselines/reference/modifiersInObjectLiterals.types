=== tests/cases/compiler/modifiersInObjectLiterals.ts ===
let data = {
>data : { foo: string; bar: string; baz: string; noWay: string; }
>{	public foo: 'hey',	private bar: 'nay',	protected baz: 'oh my',	abstract noWay: 'yes'	} : { foo: string; bar: string; baz: string; noWay: string; }

	public foo: 'hey',
>foo : string
>类型别名 :=> 文字
>'hey' : "hey"

	private bar: 'nay',
>bar : string
>类型别名 :=> 文字
>'nay' : "nay"

	protected baz: 'oh my',
>baz : string
>类型别名 :=> 文字
>'oh my' : "oh my"

	abstract noWay: 'yes'	
>noWay : string
>类型别名 :=> 文字
>'yes' : "yes"

};

data.foo + data.bar + data.baz + data.noWay
>data.foo + data.bar + data.baz + data.noWay : string
>类型别名 :=> 文字
>data.foo + data.bar + data.baz : string
>类型别名 :=> 文字
>data.foo + data.bar : string
>类型别名 :=> 文字
>data.foo : string
>类型别名 :=> 文字
>data : { foo: string; bar: string; baz: string; noWay: string; }
>foo : string
>类型别名 :=> 文字
>data.bar : string
>类型别名 :=> 文字
>data : { foo: string; bar: string; baz: string; noWay: string; }
>bar : string
>类型别名 :=> 文字
>data.baz : string
>类型别名 :=> 文字
>data : { foo: string; bar: string; baz: string; noWay: string; }
>baz : string
>类型别名 :=> 文字
>data.noWay : string
>类型别名 :=> 文字
>data : { foo: string; bar: string; baz: string; noWay: string; }
>noWay : string
>类型别名 :=> 文字

