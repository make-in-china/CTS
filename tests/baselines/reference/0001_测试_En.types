=== /a/node_modules/@types/testEn/index.d.ts ===
export declare interface C {
>C : C

    t: string
>t : 文字
>类型别名 :=> 文字

    n: "AAAAAAA"|"BBBBBB"
>n : "AAAAAAA" | "BBBBBB"
}

export declare class Te {
>Te : Te

    private v: string
>v : 文字
>类型别名 :=> 文字

    private tn: C
>tn : C
>C : C

    constructor(v: string, tn: C)
>v : 文字
>类型别名 :=> 文字
>tn : C
>C : C

    getv: string
>getv : 文字
>类型别名 :=> 文字

    gettn: C
>gettn : C
>C : C
}

export declare class Te2 {
>Te2 : Te2

    private v: string
>v : 文字
>类型别名 :=> 文字

    private tn: C
>tn : C
>C : C

    constructor(v: string, tn: C)
>v : 文字
>类型别名 :=> 文字
>tn : C
>C : C

    getv: string
>getv : 文字
>类型别名 :=> 文字

    gettn: C
>gettn : C
>C : C
}

=== /a/测试_1_en.ts ===
import { Te, Te2 } from "testEn"
>Te : 类为 Te
>Te2 : 类为 Te2

let 标1 = new Te("vvvvv", { t: "ttttt", n: "AAAAAAA" as "AAAAAAA"|"BBBBBB"})
>标1 : Te
>new Te("vvvvv", { t: "ttttt", n: "AAAAAAA" as "AAAAAAA"|"BBBBBB"}) : Te
>Te : 类为 Te
>"vvvvv" : "vvvvv"
>{ t: "ttttt", n: "AAAAAAA" as "AAAAAAA"|"BBBBBB"} : { t: 文字; n: "AAAAAAA" | "BBBBBB"; }
>t : 文字
>类型别名 :=> 文字
>"ttttt" : "ttttt"
>n : "AAAAAAA" | "BBBBBB"
>"AAAAAAA" as "AAAAAAA"|"BBBBBB" : "AAAAAAA" | "BBBBBB"
>"AAAAAAA" : "AAAAAAA"

let v = "vvvvv"
>v : 文字
>类型别名 :=> 文字
>"vvvvv" : "vvvvv"

let tn = {
>tn : { t: 文字; n: "AAAAAAA" | "BBBBBB"; }
>{    t: "ttttt",    n: "AAAAAAA" as "AAAAAAA"|"BBBBBB"} : { t: 文字; n: "AAAAAAA" | "BBBBBB"; }

    t: "ttttt",
>t : 文字
>类型别名 :=> 文字
>"ttttt" : "ttttt"

    n: "AAAAAAA" as "AAAAAAA"|"BBBBBB"
>n : "AAAAAAA" | "BBBBBB"
>"AAAAAAA" as "AAAAAAA"|"BBBBBB" : "AAAAAAA" | "BBBBBB"
>"AAAAAAA" : "AAAAAAA"
}

let 标2 = new Te2(v, tn)
>标2 : Te2
>new Te2(v, tn) : Te2
>Te2 : 类为 Te2
>v : 文字
>类型别名 :=> 文字
>tn : { t: 文字; n: "AAAAAAA" | "BBBBBB"; }

let v2 = "vvvvv"
>v2 : 文字
>类型别名 :=> 文字
>"vvvvv" : "vvvvv"

let t = "ttttt"
>t : 文字
>类型别名 :=> 文字
>"ttttt" : "ttttt"

let n = "BBBBBB" as "AAAAAAA"|"BBBBBB"
>n : "AAAAAAA" | "BBBBBB"
>"BBBBBB" as "AAAAAAA"|"BBBBBB" : "AAAAAAA" | "BBBBBB"
>"BBBBBB" : "BBBBBB"

let tn2 = { t, n }
>tn2 : { t: 文字; n: "AAAAAAA" | "BBBBBB"; }
>{ t, n } : { t: 文字; n: "AAAAAAA" | "BBBBBB"; }
>t : 文字
>类型别名 :=> 文字
>n : "AAAAAAA" | "BBBBBB"

let 标3 = new Te(v2, tn2)
>标3 : Te
>new Te(v2, tn2) : Te
>Te : 类为 Te
>v2 : 文字
>类型别名 :=> 文字
>tn2 : { t: 文字; n: "AAAAAAA" | "BBBBBB"; }

if (标1 && 标2 && 标3) {
>标1 && 标2 && 标3 : Te
>标1 && 标2 : Te2
>标1 : Te
>标2 : Te2
>标3 : Te

    标1.getv
>标1.getv : 文字
>类型别名 :=> 文字
>标1 : Te
>getv : 文字
>类型别名 :=> 文字

    标1.gettn
>标1.gettn : C
>标1 : Te
>gettn : C

    标2.getv
>标2.getv : 文字
>类型别名 :=> 文字
>标2 : Te2
>getv : 文字
>类型别名 :=> 文字

    标2.gettn
>标2.gettn : C
>标2 : Te2
>gettn : C

    标3["getv"]
>标3["getv"] : 文字
>类型别名 :=> 文字
>标3 : Te
>"getv" : "getv"

    标3["gettn"]
>标3["gettn"] : C
>标3 : Te
>"gettn" : "gettn"
}

