=== tests/cases/compiler/blockScopedBindingsReassignedInLoop6.ts ===
function f1() {
>f1 : () => 无值

    for (let [x, y] = [1, 2]; x < y; ++x, --y) {
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>[1, 2] : [数字, 数字]
>1 : 1
>2 : 2
>x < y : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>++x, --y : 数字
>类型别名 :=> 数字
>++x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>--y : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        let a = () => x++ + y++;
>a : () => 数字
>() => x++ + y++ : () => 数字
>x++ + y++ : 数字
>类型别名 :=> 数字
>x++ : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y++ : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        if (x == 1)
>x == 1 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>1 : 1

            break;
        else if (y == 2)
>y == 2 : 真假
>类型别名 :=> 真假
>y : 数字
>类型别名 :=> 数字
>2 : 2

            y = 5;
>y = 5 : 5
>y : 数字
>类型别名 :=> 数字
>5 : 5

        else
            return;
    }
}

function f2() {
>f2 : () => 无值

    for (let [{a: x, b: {c: y}}] = [{a: 1, b: {c: 2}}]; x < y; ++x, --y) {
>a : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>y : 数字
>类型别名 :=> 数字
>[{a: 1, b: {c: 2}}] : [{ a: 数字; b: { c: 数字; }; }]
>{a: 1, b: {c: 2}} : { a: 数字; b: { c: 数字; }; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : { c: 数字; }
>{c: 2} : { c: 数字; }
>c : 数字
>类型别名 :=> 数字
>2 : 2
>x < y : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>++x, --y : 数字
>类型别名 :=> 数字
>++x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>--y : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        let a = () => x++ + y++;
>a : () => 数字
>() => x++ + y++ : () => 数字
>x++ + y++ : 数字
>类型别名 :=> 数字
>x++ : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y++ : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        if (x == 1)
>x == 1 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>1 : 1

            break;
        else if (y == 2)
>y == 2 : 真假
>类型别名 :=> 真假
>y : 数字
>类型别名 :=> 数字
>2 : 2

            y = 5;
>y = 5 : 5
>y : 数字
>类型别名 :=> 数字
>5 : 5

        else
            return;
    }
}






