=== tests/cases/compiler/narrowingOfDottedNames.ts ===
// Repro from #8383

class A {
>A : A

    prop: { a: string; };
>prop : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
}

class B {
>B : B

    prop: { b: string; }
>prop : { b: 文字; }
>b : 文字
>类型别名 :=> 文字
}

function isA(x: any): x is A {
>isA : (x: 任意) => x 作为 A
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>A : A

    return x instanceof A;
>x instanceof A : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>A : 类为 A
}

function isB(x: any): x is B {
>isB : (x: 任意) => x 作为 B
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>B : B

    return x instanceof B;
>x instanceof B : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>B : 类为 B
}

function f1(x: A | B) {
>f1 : (x: A | B) => 无值
>x : A | B
>A : A
>B : B

    while (true) {
>true : 为真
>类型别名 :=> 为真

        if (x instanceof A) {
>x instanceof A : 真假
>类型别名 :=> 真假
>x : A | B
>A : 类为 A

            x.prop.a;
>x.prop.a : 文字
>类型别名 :=> 文字
>x.prop : { a: 文字; }
>x : A
>prop : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
        }
        else if (x instanceof B) {
>x instanceof B : 真假
>类型别名 :=> 真假
>x : B
>B : 类为 B

            x.prop.b;
>x.prop.b : 文字
>类型别名 :=> 文字
>x.prop : { b: 文字; }
>x : B
>prop : { b: 文字; }
>b : 文字
>类型别名 :=> 文字
        }
    }
}

function f2(x: A | B) {
>f2 : (x: A | B) => 无值
>x : A | B
>A : A
>B : B

    while (true) {
>true : 为真
>类型别名 :=> 为真

        if (isA(x)) {
>isA(x) : 真假
>类型别名 :=> 真假
>isA : (x: 任意) => x 作为 A
>x : A | B

            x.prop.a;
>x.prop.a : 文字
>类型别名 :=> 文字
>x.prop : { a: 文字; }
>x : A
>prop : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
        }
        else if (isB(x)) {
>isB(x) : 真假
>类型别名 :=> 真假
>isB : (x: 任意) => x 作为 B
>x : B

            x.prop.b;
>x.prop.b : 文字
>类型别名 :=> 文字
>x.prop : { b: 文字; }
>x : B
>prop : { b: 文字; }
>b : 文字
>类型别名 :=> 文字
        }
    }
}

