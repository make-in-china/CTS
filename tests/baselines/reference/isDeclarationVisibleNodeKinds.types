=== tests/cases/compiler/isDeclarationVisibleNodeKinds.ts ===
// Function types
module schema {
>schema : typeof schema

    export function createValidator1(schema: any): <T>(data: T) => T {
>createValidator1 : (schema: any) => <T>(data: T) => T
>schema : any
>类型别名 :=> 任意
>T : T
>data : T
>T : T
>T : T

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}

// Constructor types
module schema {
>schema : typeof schema

    export function createValidator2(schema: any): new <T>(data: T) => T {
>createValidator2 : (schema: any) => new <T>(data: T) => T
>schema : any
>类型别名 :=> 任意
>T : T
>data : T
>T : T
>T : T

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}

// union types
module schema {
>schema : typeof schema

     export function createValidator3(schema: any): number | { new <T>(data: T): T; }  {
>createValidator3 : (schema: any) => number | (new <T>(data: T) => T)
>schema : any
>类型别名 :=> 任意
>T : T
>data : T
>T : T
>T : T

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}

// Array types
module schema {
>schema : typeof schema

     export function createValidator4(schema: any): { new <T>(data: T): T; }[] {
>createValidator4 : (schema: any) => (new <T>(data: T) => T)[]
>schema : any
>类型别名 :=> 任意
>T : T
>data : T
>T : T
>T : T

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}


// TypeLiterals
module schema {
>schema : typeof schema

    export function createValidator5(schema: any): { new <T>(data: T): T } {
>createValidator5 : (schema: any) => new <T>(data: T) => T
>schema : any
>类型别名 :=> 任意
>T : T
>data : T
>T : T
>T : T

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}

// Tuple types
module schema {
>schema : typeof schema

    export function createValidator6(schema: any): [ new <T>(data: T) => T, number] {
>createValidator6 : (schema: any) => [new <T>(data: T) => T, number]
>schema : any
>类型别名 :=> 任意
>T : T
>data : T
>T : T
>T : T

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}

// Paren Types
module schema {
>schema : typeof schema

    export function createValidator7(schema: any): (new <T>(data: T)=>T )[] {
>createValidator7 : (schema: any) => (new <T>(data: T) => T)[]
>schema : any
>类型别名 :=> 任意
>T : T
>data : T
>T : T
>T : T

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}

// Type reference
module schema {
>schema : typeof schema

    export function createValidator8(schema: any): Array<{ <T>(data: T) : T}> {
>createValidator8 : (schema: any) => (<T>(data: T) => T)[]
>schema : any
>类型别名 :=> 任意
>Array : T[]
>T : T
>data : T
>T : T
>T : T

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}


module schema {
>schema : typeof schema

    export class T {
>T : T

        get createValidator9(): <T>(data: T) => T {
>createValidator9 : <T>(data: T) => T
>T : T
>data : T
>T : T
>T : T

            return undefined;
>undefined : undefined
>类型别名 :=> 未定
        }
        
        set createValidator10(v: <T>(data: T) => T) {
>createValidator10 : <T>(data: T) => T
>v : <T>(data: T) => T
>T : T
>data : T
>T : T
>T : T
        }
    }
}
