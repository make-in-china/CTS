=== tests/cases/conformance/es6/modules/t1.ts ===
export var v = 1;
>v : number
>类型别名 :=> 数字
>1 : 1

export function f() { }
>f : () => void

export class C {
>C : C
}
export interface I {
>I : I
}
export enum E {
>E : E

    A, B, C
>A : E.A
>B : E.B
>C : E.C
}
export const enum D {
>D : D

    A, B, C
>A : D.A
>B : D.B
>C : D.C
}
export module M {
>M : typeof M

    export var x;
>x : any
>类型别名 :=> 任意
}
export module N {
>N : any
>类型别名 :=> 任意

    export interface I {
>I : I
    }
}
export type T = number;
>T : number
>类型别名 :=> 数字

export import a = M.x;
>a : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意

export { v as v1, f as f1, C as C1, I as I1, E as E1, D as D1, M as M1, N as N1, T as T1, a as a1 };
>v : number
>类型别名 :=> 数字
>v1 : number
>类型别名 :=> 数字
>f : () => void
>f1 : () => void
>C : typeof C
>C1 : typeof C
>I : any
>类型别名 :=> 任意
>I1 : any
>类型别名 :=> 任意
>E : typeof E
>E1 : typeof E
>D : typeof D
>D1 : typeof D
>M : typeof M
>M1 : typeof M
>N : any
>类型别名 :=> 任意
>N1 : any
>类型别名 :=> 任意
>T : any
>类型别名 :=> 任意
>T1 : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>a1 : any
>类型别名 :=> 任意

=== tests/cases/conformance/es6/modules/t2.ts ===
export { v1 as v, f1 as f, C1 as C, I1 as I, E1 as E, D1 as D, M1 as M, N1 as N, T1 as T, a1 as a } from "./t1";
>v1 : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字
>f1 : () => void
>f : () => void
>C1 : typeof C
>C : typeof C
>I1 : any
>类型别名 :=> 任意
>I : any
>类型别名 :=> 任意
>E1 : typeof E
>E : typeof E
>D1 : typeof D
>D : typeof D
>M1 : typeof M
>M : typeof M
>N1 : any
>类型别名 :=> 任意
>N : any
>类型别名 :=> 任意
>T1 : any
>类型别名 :=> 任意
>T : any
>类型别名 :=> 任意
>a1 : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

=== tests/cases/conformance/es6/modules/t3.ts ===
import { v1 as v, f1 as f, C1 as C, I1 as I, E1 as E, D1 as D, M1 as M, N1 as N, T1 as T, a1 as a } from "./t1";
>v1 : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字
>f1 : () => void
>f : () => void
>C1 : typeof C
>C : typeof C
>I1 : any
>类型别名 :=> 任意
>I : any
>类型别名 :=> 任意
>E1 : typeof E
>E : typeof E
>D1 : typeof D
>D : typeof D
>M1 : typeof M
>M : typeof M
>N1 : any
>类型别名 :=> 任意
>N : any
>类型别名 :=> 任意
>T1 : any
>类型别名 :=> 任意
>T : any
>类型别名 :=> 任意
>a1 : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

export { v, f, C, I, E, D, M, N, T, a };
>v : number
>类型别名 :=> 数字
>f : () => void
>C : typeof C
>I : any
>类型别名 :=> 任意
>E : typeof E
>D : typeof D
>M : typeof M
>N : any
>类型别名 :=> 任意
>T : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

