=== tests/cases/conformance/types/mapped/mappedTypeWithAny.ts ===
type Item = { value: string };
>Item : Item
>value : 文字
>类型别名 :=> 文字

type ItemMap<T> = { [P in keyof T]: Item };
>ItemMap : ItemMap<T>
>T : T
>P : P
>T : T
>Item : Item

declare let x0: keyof any;
>x0 : 文字
>类型别名 :=> 文字

declare let x1: { [P in any]: Item };
>x1 : { [x: 文字]: Item; }
>P : P
>Item : Item

declare let x2: { [P in string]: Item };
>x2 : { [x: 文字]: Item; }
>P : P
>Item : Item

declare let x3: { [P in keyof any]: Item };
>x3 : { [x: 文字]: Item; }
>P : P
>Item : Item

declare let x4: ItemMap<any>;
>x4 : ItemMap<任意>
>ItemMap : ItemMap<T>

// Repro from #19152

type Data = {
>Data : Data

  value: string;
>value : 文字
>类型别名 :=> 文字
}

type StrictDataMap<T> = {
>StrictDataMap : StrictDataMap<T>
>T : T

  [P in keyof T]: Data
>P : P
>T : T
>Data : Data
}

declare let z: StrictDataMap<any>;
>z : StrictDataMap<任意>
>StrictDataMap : StrictDataMap<T>

for (let id in z) {
>id : 文字
>类型别名 :=> 文字
>z : StrictDataMap<任意>

  let data = z[id];
>data : Data
>z[id] : Data
>z : StrictDataMap<任意>
>id : 文字
>类型别名 :=> 文字

  let x = data.notAValue;  // Error
>x : 任意
>类型别名 :=> 任意
>data.notAValue : 任意
>类型别名 :=> 任意
>data : Data
>notAValue : 任意
>类型别名 :=> 任意
}

