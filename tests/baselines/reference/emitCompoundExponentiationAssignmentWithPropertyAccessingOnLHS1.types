=== tests/cases/conformance/es7/exponentiationOperator/emitCompoundExponentiationAssignmentWithPropertyAccessingOnLHS1.ts ===
var globalCounter = 0;
>globalCounter : number
>类型别名 :=> 数字
>0 : 0

function foo() {
>foo : () => { prop: number; }

    globalCounter += 1;
>globalCounter += 1 : number
>类型别名 :=> 数字
>globalCounter : number
>类型别名 :=> 数字
>1 : 1

    return { prop: 2 };
>{ prop: 2 } : { prop: number; }
>prop : number
>类型别名 :=> 数字
>2 : 2
}
foo().prop **= 2;
>foo().prop **= 2 : number
>类型别名 :=> 数字
>foo().prop : number
>类型别名 :=> 数字
>foo() : { prop: number; }
>foo : () => { prop: number; }
>prop : number
>类型别名 :=> 数字
>2 : 2

var result0 = foo().prop **= 2;
>result0 : number
>类型别名 :=> 数字
>foo().prop **= 2 : number
>类型别名 :=> 数字
>foo().prop : number
>类型别名 :=> 数字
>foo() : { prop: number; }
>foo : () => { prop: number; }
>prop : number
>类型别名 :=> 数字
>2 : 2

foo().prop **= foo().prop **= 2;
>foo().prop **= foo().prop **= 2 : number
>类型别名 :=> 数字
>foo().prop : number
>类型别名 :=> 数字
>foo() : { prop: number; }
>foo : () => { prop: number; }
>prop : number
>类型别名 :=> 数字
>foo().prop **= 2 : number
>类型别名 :=> 数字
>foo().prop : number
>类型别名 :=> 数字
>foo() : { prop: number; }
>foo : () => { prop: number; }
>prop : number
>类型别名 :=> 数字
>2 : 2

var result1 = foo().prop **= foo().prop **= 2;
>result1 : number
>类型别名 :=> 数字
>foo().prop **= foo().prop **= 2 : number
>类型别名 :=> 数字
>foo().prop : number
>类型别名 :=> 数字
>foo() : { prop: number; }
>foo : () => { prop: number; }
>prop : number
>类型别名 :=> 数字
>foo().prop **= 2 : number
>类型别名 :=> 数字
>foo().prop : number
>类型别名 :=> 数字
>foo() : { prop: number; }
>foo : () => { prop: number; }
>prop : number
>类型别名 :=> 数字
>2 : 2

foo().prop **= foo().prop ** 2;
>foo().prop **= foo().prop ** 2 : number
>类型别名 :=> 数字
>foo().prop : number
>类型别名 :=> 数字
>foo() : { prop: number; }
>foo : () => { prop: number; }
>prop : number
>类型别名 :=> 数字
>foo().prop ** 2 : number
>类型别名 :=> 数字
>foo().prop : number
>类型别名 :=> 数字
>foo() : { prop: number; }
>foo : () => { prop: number; }
>prop : number
>类型别名 :=> 数字
>2 : 2

var result2 = foo().prop **= foo().prop ** 2;
>result2 : number
>类型别名 :=> 数字
>foo().prop **= foo().prop ** 2 : number
>类型别名 :=> 数字
>foo().prop : number
>类型别名 :=> 数字
>foo() : { prop: number; }
>foo : () => { prop: number; }
>prop : number
>类型别名 :=> 数字
>foo().prop ** 2 : number
>类型别名 :=> 数字
>foo().prop : number
>类型别名 :=> 数字
>foo() : { prop: number; }
>foo : () => { prop: number; }
>prop : number
>类型别名 :=> 数字
>2 : 2

