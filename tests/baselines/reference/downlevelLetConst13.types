=== tests/cases/compiler/downlevelLetConst13.ts ===
'use strict'
>'use strict' : "use strict"

// exported let\const bindings should not be renamed

export let foo = 10;
>foo : 数字
>类型别名 :=> 数字
>10 : 10

export const bar = "123"
>bar : "123"
>"123" : "123"

export let [bar1] = [1];
>bar1 : 数字
>类型别名 :=> 数字
>[1] : [数字]
>1 : 1

export const [bar2] = [2];
>bar2 : 数字
>类型别名 :=> 数字
>[2] : [数字]
>2 : 2

export let {a: bar3} = { a: 1 };
>a : 任意
>类型别名 :=> 任意
>bar3 : 数字
>类型别名 :=> 数字
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1

export const {a: bar4} = { a: 1 };
>a : 任意
>类型别名 :=> 任意
>bar4 : 数字
>类型别名 :=> 数字
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1

export module M {
>M : 类为 M

    export let baz = 100;
>baz : 数字
>类型别名 :=> 数字
>100 : 100

    export const baz2 = true;
>baz2 : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真

    export let [bar5] = [1];
>bar5 : 数字
>类型别名 :=> 数字
>[1] : [数字]
>1 : 1

    export const [bar6] = [2];
>bar6 : 数字
>类型别名 :=> 数字
>[2] : [数字]
>2 : 2

    export let {a: bar7} = { a: 1 };
>a : 任意
>类型别名 :=> 任意
>bar7 : 数字
>类型别名 :=> 数字
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1

    export const {a: bar8} = { a: 1 };
>a : 任意
>类型别名 :=> 任意
>bar8 : 数字
>类型别名 :=> 数字
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
}
