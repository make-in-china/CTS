=== tests/cases/conformance/types/specifyingTypes/typeLiterals/functionLiteralForOverloads.ts ===
// basic uses of function literals with overloads

var f: {
>f : { (x: 文字): 文字; (x: 数字): 数字; }

    (x: string): string;
>x : 文字
>类型别名 :=> 文字

    (x: number): number;
>x : 数字
>类型别名 :=> 数字

} = (x) => x;
>(x) => x : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var f2: {
>f2 : { <T>(x: 文字): 文字; <T>(x: 数字): 数字; }

    <T>(x: string): string;
>T : T
>x : 文字
>类型别名 :=> 文字

    <T>(x: number): number;
>T : T
>x : 数字
>类型别名 :=> 数字

} = (x) => x;
>(x) => x : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var f3: {
>f3 : { <T>(x: T): 文字; <T>(x: T): 数字; }

    <T>(x: T): string;
>T : T
>x : T
>T : T

    <T>(x: T): number;
>T : T
>x : T
>T : T

} = (x) => x;
>(x) => x : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var f4: {
>f4 : { <T>(x: 文字): T; <T>(x: 数字): T; }

    <T>(x: string): T;
>T : T
>x : 文字
>类型别名 :=> 文字
>T : T

    <T>(x: number): T;
>T : T
>x : 数字
>类型别名 :=> 数字
>T : T

} = (x) => x;
>(x) => x : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

