=== tests/cases/compiler/withStatementErrors.ts ===
declare var ooo:any;
>ooo : 任意
>类型别名 :=> 任意

with (ooo.eee.oo.ah_ah.ting.tang.walla.walla) { // error
>ooo.eee.oo.ah_ah.ting.tang.walla.walla : 任意
>类型别名 :=> 任意
>ooo.eee.oo.ah_ah.ting.tang.walla : 任意
>类型别名 :=> 任意
>ooo.eee.oo.ah_ah.ting.tang : 任意
>类型别名 :=> 任意
>ooo.eee.oo.ah_ah.ting : 任意
>类型别名 :=> 任意
>ooo.eee.oo.ah_ah : 任意
>类型别名 :=> 任意
>ooo.eee.oo : 任意
>类型别名 :=> 任意
>ooo.eee : 任意
>类型别名 :=> 任意
>ooo : 任意
>类型别名 :=> 任意
>eee : 任意
>类型别名 :=> 任意
>oo : 任意
>类型别名 :=> 任意
>ah_ah : 任意
>类型别名 :=> 任意
>ting : 任意
>类型别名 :=> 任意
>tang : 任意
>类型别名 :=> 任意
>walla : 任意
>类型别名 :=> 任意
>walla : 任意
>类型别名 :=> 任意

    bing = true; // no error
>bing = true : 任意
>类型别名 :=> 任意
>bing : 任意
>类型别名 :=> 任意
>true : 任意
>类型别名 :=> 任意

    bang = true; // no error
>bang = true : 任意
>类型别名 :=> 任意
>bang : 任意
>类型别名 :=> 任意
>true : 任意
>类型别名 :=> 任意
    
    function bar() {} // no error
>bar : 任意
>类型别名 :=> 任意

    bar(); // no error
>bar() : 任意
>类型别名 :=> 任意
>bar : 任意
>类型别名 :=> 任意

    class C {} // error   
>C : 任意
>类型别名 :=> 任意
    
    interface I {} // error
>I : 任意
>类型别名 :=> 任意
    
    module M {} // error
>M : 任意
>类型别名 :=> 任意
        
}

