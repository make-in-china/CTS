=== tests/cases/conformance/types/mapped/mappedTypes3.ts ===
class Box<P> {
>Box : Box<P>
>P : P

    value: P;
>value : P
>P : P
}

type Boxified<T> = {
>Boxified : Boxified<T>
>T : T

    [K in keyof T]: Box<T[K]>;
>K : K
>T : T
>Box : Box<P>
>T : T
>K : K
}

declare function boxify<T>(obj: T): Boxified<T>;
>boxify : <T>(obj: T) => Boxified<T>
>T : T
>obj : T
>T : T
>Boxified : Boxified<T>
>T : T

declare function unboxify<T>(obj: Boxified<T>): T;
>unboxify : <T>(obj: Boxified<T>) => T
>T : T
>obj : Boxified<T>
>Boxified : Boxified<T>
>T : T
>T : T

interface Bacon {
>Bacon : Bacon

    isPerfect: boolean;
>isPerfect : 真假
>类型别名 :=> 真假

    weight: number;
>weight : 数字
>类型别名 :=> 数字
}

interface BoxifiedBacon {
>BoxifiedBacon : BoxifiedBacon

    isPerfect: Box<boolean>;
>isPerfect : Box<真假>
>Box : Box<P>

    weight: Box<number>;
>weight : Box<数字>
>Box : Box<P>
}

function f1(b: Bacon) {
>f1 : (b: Bacon) => 无值
>b : Bacon
>Bacon : Bacon

    let bb = boxify(b);
>bb : Boxified<Bacon>
>boxify(b) : Boxified<Bacon>
>boxify : <T>(obj: T) => Boxified<T>
>b : Bacon

    let isPerfect = bb.isPerfect.value;
>isPerfect : 真假
>类型别名 :=> 真假
>bb.isPerfect.value : 真假
>类型别名 :=> 真假
>bb.isPerfect : Box<真假>
>bb : Boxified<Bacon>
>isPerfect : Box<真假>
>value : 真假
>类型别名 :=> 真假

    let weight = bb.weight.value;
>weight : 数字
>类型别名 :=> 数字
>bb.weight.value : 数字
>类型别名 :=> 数字
>bb.weight : Box<数字>
>bb : Boxified<Bacon>
>weight : Box<数字>
>value : 数字
>类型别名 :=> 数字
}

function f2(bb: Boxified<Bacon>) {
>f2 : (bb: Boxified<Bacon>) => 无值
>bb : Boxified<Bacon>
>Boxified : Boxified<T>
>Bacon : Bacon

    let b = unboxify(bb);  // Infer Bacon for T
>b : Bacon
>unboxify(bb) : Bacon
>unboxify : <T>(obj: Boxified<T>) => T
>bb : Boxified<Bacon>

    let bool = b.isPerfect;
>bool : 真假
>类型别名 :=> 真假
>b.isPerfect : 真假
>类型别名 :=> 真假
>b : Bacon
>isPerfect : 真假
>类型别名 :=> 真假

    let weight = b.weight;
>weight : 数字
>类型别名 :=> 数字
>b.weight : 数字
>类型别名 :=> 数字
>b : Bacon
>weight : 数字
>类型别名 :=> 数字
}

function f3(bb: BoxifiedBacon) {
>f3 : (bb: BoxifiedBacon) => 无值
>bb : BoxifiedBacon
>BoxifiedBacon : BoxifiedBacon

    let b = unboxify<Bacon>(bb);  // Explicit type parameter required
>b : Bacon
>unboxify<Bacon>(bb) : Bacon
>unboxify : <T>(obj: Boxified<T>) => T
>Bacon : Bacon
>bb : BoxifiedBacon

    let bool = b.isPerfect;
>bool : 真假
>类型别名 :=> 真假
>b.isPerfect : 真假
>类型别名 :=> 真假
>b : Bacon
>isPerfect : 真假
>类型别名 :=> 真假

    let weight = bb.weight;
>weight : Box<数字>
>bb.weight : Box<数字>
>bb : BoxifiedBacon
>weight : Box<数字>
}
