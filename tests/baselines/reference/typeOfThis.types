=== tests/cases/conformance/expressions/thisKeyword/typeOfThis.ts ===
class MyTestClass {
>MyTestClass : MyTestClass

    private canary: number;
>canary : 数字
>类型别名 :=> 数字

    static staticCanary: number;
>staticCanary : 数字
>类型别名 :=> 数字

    constructor() {
        //type of 'this' in constructor body is the class instance type
        var p = this.canary;
>p : 数字
>类型别名 :=> 数字
>this.canary : 数字
>类型别名 :=> 数字
>this : 本体
>canary : 数字
>类型别名 :=> 数字

        var p: number;
>p : 数字
>类型别名 :=> 数字

        this.canary = 3;
>this.canary = 3 : 3
>this.canary : 数字
>类型别名 :=> 数字
>this : 本体
>canary : 数字
>类型别名 :=> 数字
>3 : 3
    }

    //type of 'this' in member function param list is the class instance type
    memberFunc(t = this) {
>memberFunc : (t?: 本体) => 无值
>t : 本体
>this : 本体

        var t: MyTestClass;
>t : 本体
>MyTestClass : MyTestClass

        //type of 'this' in member function body is the class instance type
        var p = this;
>p : 本体
>this : 本体

        var p: MyTestClass;
>p : 本体
>MyTestClass : MyTestClass
    }

    //type of 'this' in member accessor(get and set) body is the class instance type
    get prop() {
>prop : 本体

        var p = this;
>p : 本体
>this : 本体

        var p: MyTestClass;
>p : 本体
>MyTestClass : MyTestClass

        return this;
>this : 本体
    }
    set prop(v) {
>prop : 本体
>v : 本体

        var p = this;
>p : 本体
>this : 本体

        var p: MyTestClass;
>p : 本体
>MyTestClass : MyTestClass

        p = v;
>p = v : 本体
>p : 本体
>v : 本体

        v = p;
>v = p : 本体
>v : 本体
>p : 本体
    }

    someFunc = () => {
>someFunc : () => 无值
>() => {        //type of 'this' in member variable initializer is the class instance type        var t = this;        var t: MyTestClass;    } : () => 无值

        //type of 'this' in member variable initializer is the class instance type
        var t = this;
>t : 本体
>this : 本体

        var t: MyTestClass;
>t : 本体
>MyTestClass : MyTestClass

    };

    //type of 'this' in static function param list is constructor function type
    static staticFn(t = this) {
>staticFn : (t?: 类为 MyTestClass) => 无值
>t : 类为 MyTestClass
>this : 类为 MyTestClass

        var t: typeof MyTestClass;
>t : 类为 MyTestClass
>MyTestClass : 类为 MyTestClass

        var t = MyTestClass;
>t : 类为 MyTestClass
>MyTestClass : 类为 MyTestClass

        t.staticCanary;
>t.staticCanary : 数字
>类型别名 :=> 数字
>t : 类为 MyTestClass
>staticCanary : 数字
>类型别名 :=> 数字

        //type of 'this' in static function body is constructor function type
        var p = this;
>p : 类为 MyTestClass
>this : 类为 MyTestClass

        var p: typeof MyTestClass;
>p : 类为 MyTestClass
>MyTestClass : 类为 MyTestClass

        var p = MyTestClass;
>p : 类为 MyTestClass
>MyTestClass : 类为 MyTestClass

        p.staticCanary;
>p.staticCanary : 数字
>类型别名 :=> 数字
>p : 类为 MyTestClass
>staticCanary : 数字
>类型别名 :=> 数字
    }

    static get staticProp() {
>staticProp : 类为 MyTestClass

        //type of 'this' in static accessor body is constructor function type
        var p = this;
>p : 类为 MyTestClass
>this : 类为 MyTestClass

        var p: typeof MyTestClass;
>p : 类为 MyTestClass
>MyTestClass : 类为 MyTestClass

        var p = MyTestClass;
>p : 类为 MyTestClass
>MyTestClass : 类为 MyTestClass

        p.staticCanary;
>p.staticCanary : 数字
>类型别名 :=> 数字
>p : 类为 MyTestClass
>staticCanary : 数字
>类型别名 :=> 数字

        return this;
>this : 类为 MyTestClass
    }
    static set staticProp(v: typeof MyTestClass) {
>staticProp : 类为 MyTestClass
>v : 类为 MyTestClass
>MyTestClass : 类为 MyTestClass

        //type of 'this' in static accessor body is constructor function type
        var p = this;
>p : 类为 MyTestClass
>this : 类为 MyTestClass

        var p: typeof MyTestClass;
>p : 类为 MyTestClass
>MyTestClass : 类为 MyTestClass

        var p = MyTestClass;
>p : 类为 MyTestClass
>MyTestClass : 类为 MyTestClass

        p.staticCanary;
>p.staticCanary : 数字
>类型别名 :=> 数字
>p : 类为 MyTestClass
>staticCanary : 数字
>类型别名 :=> 数字
    }
}

class MyGenericTestClass<T, U> {
>MyGenericTestClass : MyGenericTestClass<T, U>
>T : T
>U : U

    private canary: number;
>canary : 数字
>类型别名 :=> 数字

    static staticCanary: number;
>staticCanary : 数字
>类型别名 :=> 数字

    constructor() {
        //type of 'this' in constructor body is the class instance type
        var p = this.canary;
>p : 数字
>类型别名 :=> 数字
>this.canary : 数字
>类型别名 :=> 数字
>this : 本体
>canary : 数字
>类型别名 :=> 数字

        var p: number;
>p : 数字
>类型别名 :=> 数字

        this.canary = 3;
>this.canary = 3 : 3
>this.canary : 数字
>类型别名 :=> 数字
>this : 本体
>canary : 数字
>类型别名 :=> 数字
>3 : 3
    }

    //type of 'this' in member function param list is the class instance type
    memberFunc(t = this) {
>memberFunc : (t?: 本体) => 无值
>t : 本体
>this : 本体

        var t: MyGenericTestClass<T, U>;
>t : 本体
>MyGenericTestClass : MyGenericTestClass<T, U>
>T : T
>U : U

        //type of 'this' in member function body is the class instance type
        var p = this;
>p : 本体
>this : 本体

        var p: MyGenericTestClass<T, U>;
>p : 本体
>MyGenericTestClass : MyGenericTestClass<T, U>
>T : T
>U : U
    }

    //type of 'this' in member accessor(get and set) body is the class instance type
    get prop() {
>prop : 本体

        var p = this;
>p : 本体
>this : 本体

        var p: MyGenericTestClass<T, U>;
>p : 本体
>MyGenericTestClass : MyGenericTestClass<T, U>
>T : T
>U : U

        return this;
>this : 本体
    }
    set prop(v) {
>prop : 本体
>v : 本体

        var p = this;
>p : 本体
>this : 本体

        var p: MyGenericTestClass<T, U>;
>p : 本体
>MyGenericTestClass : MyGenericTestClass<T, U>
>T : T
>U : U

        p = v;
>p = v : 本体
>p : 本体
>v : 本体

        v = p;
>v = p : 本体
>v : 本体
>p : 本体
    }

    someFunc = () => {
>someFunc : () => 无值
>() => {        //type of 'this' in member variable initializer is the class instance type        var t = this;        var t: MyGenericTestClass<T, U>;    } : () => 无值

        //type of 'this' in member variable initializer is the class instance type
        var t = this;
>t : 本体
>this : 本体

        var t: MyGenericTestClass<T, U>;
>t : 本体
>MyGenericTestClass : MyGenericTestClass<T, U>
>T : T
>U : U

    };

    //type of 'this' in static function param list is constructor function type
    static staticFn(t = this) {
>staticFn : (t?: 类为 MyGenericTestClass) => 无值
>t : 类为 MyGenericTestClass
>this : 类为 MyGenericTestClass

        var t: typeof MyGenericTestClass;
>t : 类为 MyGenericTestClass
>MyGenericTestClass : 类为 MyGenericTestClass

        var t = MyGenericTestClass;
>t : 类为 MyGenericTestClass
>MyGenericTestClass : 类为 MyGenericTestClass

        t.staticCanary;
>t.staticCanary : 数字
>类型别名 :=> 数字
>t : 类为 MyGenericTestClass
>staticCanary : 数字
>类型别名 :=> 数字

        //type of 'this' in static function body is constructor function type
        var p = this;
>p : 类为 MyGenericTestClass
>this : 类为 MyGenericTestClass

        var p: typeof MyGenericTestClass;
>p : 类为 MyGenericTestClass
>MyGenericTestClass : 类为 MyGenericTestClass

        var p = MyGenericTestClass;
>p : 类为 MyGenericTestClass
>MyGenericTestClass : 类为 MyGenericTestClass

        p.staticCanary;
>p.staticCanary : 数字
>类型别名 :=> 数字
>p : 类为 MyGenericTestClass
>staticCanary : 数字
>类型别名 :=> 数字
    }

    static get staticProp() {
>staticProp : 类为 MyGenericTestClass

        //type of 'this' in static accessor body is constructor function type
        var p = this;
>p : 类为 MyGenericTestClass
>this : 类为 MyGenericTestClass

        var p: typeof MyGenericTestClass;
>p : 类为 MyGenericTestClass
>MyGenericTestClass : 类为 MyGenericTestClass

        var p = MyGenericTestClass;
>p : 类为 MyGenericTestClass
>MyGenericTestClass : 类为 MyGenericTestClass

        p.staticCanary;
>p.staticCanary : 数字
>类型别名 :=> 数字
>p : 类为 MyGenericTestClass
>staticCanary : 数字
>类型别名 :=> 数字

        return this;
>this : 类为 MyGenericTestClass
    }
    static set staticProp(v: typeof MyGenericTestClass) {
>staticProp : 类为 MyGenericTestClass
>v : 类为 MyGenericTestClass
>MyGenericTestClass : 类为 MyGenericTestClass

        //type of 'this' in static accessor body is constructor function type
        var p = this;
>p : 类为 MyGenericTestClass
>this : 类为 MyGenericTestClass

        var p: typeof MyGenericTestClass;
>p : 类为 MyGenericTestClass
>MyGenericTestClass : 类为 MyGenericTestClass

        var p = MyGenericTestClass;
>p : 类为 MyGenericTestClass
>MyGenericTestClass : 类为 MyGenericTestClass

        p.staticCanary;
>p.staticCanary : 数字
>类型别名 :=> 数字
>p : 类为 MyGenericTestClass
>staticCanary : 数字
>类型别名 :=> 数字
    }
}

//type of 'this' in a function declaration param list is Any
function fn(s = this) {
>fn : (s?: 任意) => 无值
>s : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意

    var s: any;
>s : 任意
>类型别名 :=> 任意

    s.spaaaaaaace = 4;
>s.spaaaaaaace = 4 : 4
>s.spaaaaaaace : 任意
>类型别名 :=> 任意
>s : 任意
>类型别名 :=> 任意
>spaaaaaaace : 任意
>类型别名 :=> 任意
>4 : 4

    //type of 'this' in a function declaration body is Any
    var t: any;
>t : 任意
>类型别名 :=> 任意

    var t = this;
>t : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意

    this.spaaaaace = 4;
>this.spaaaaace = 4 : 4
>this.spaaaaace : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>spaaaaace : 任意
>类型别名 :=> 任意
>4 : 4
}

//type of 'this' in a function expression param list list is Any
var q1 = function (s = this) {
>q1 : (s?: 任意) => 无值
>function (s = this) {    var s: any;    s.spaaaaaaace = 4;    //type of 'this' in a function expression body is Any    var t: any;    var t = this;    this.spaaaaace = 4;} : (s?: 任意) => 无值
>s : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意

    var s: any;
>s : 任意
>类型别名 :=> 任意

    s.spaaaaaaace = 4;
>s.spaaaaaaace = 4 : 4
>s.spaaaaaaace : 任意
>类型别名 :=> 任意
>s : 任意
>类型别名 :=> 任意
>spaaaaaaace : 任意
>类型别名 :=> 任意
>4 : 4

    //type of 'this' in a function expression body is Any
    var t: any;
>t : 任意
>类型别名 :=> 任意

    var t = this;
>t : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意

    this.spaaaaace = 4;
>this.spaaaaace = 4 : 4
>this.spaaaaace : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>spaaaaace : 任意
>类型别名 :=> 任意
>4 : 4
}

//type of 'this' in a fat arrow expression param list is Any
var q2 = (s = this) => {
>q2 : (s?: 任意) => 无值
>(s = this) => {    var s: any;    s.spaaaaaaace = 4;    //type of 'this' in a fat arrow expression body is Any    var t: any;    var t = this;    this.spaaaaace = 4;} : (s?: 任意) => 无值
>s : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意

    var s: any;
>s : 任意
>类型别名 :=> 任意

    s.spaaaaaaace = 4;
>s.spaaaaaaace = 4 : 4
>s.spaaaaaaace : 任意
>类型别名 :=> 任意
>s : 任意
>类型别名 :=> 任意
>spaaaaaaace : 任意
>类型别名 :=> 任意
>4 : 4

    //type of 'this' in a fat arrow expression body is Any
    var t: any;
>t : 任意
>类型别名 :=> 任意

    var t = this;
>t : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意

    this.spaaaaace = 4;
>this.spaaaaace = 4 : 4
>this.spaaaaace : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>spaaaaace : 任意
>类型别名 :=> 任意
>4 : 4
}

//type of 'this' in global module is Any
var t: any;
>t : 任意
>类型别名 :=> 任意

var t = this;
>t : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意

this.spaaaaace = 4;
>this.spaaaaace = 4 : 4
>this.spaaaaace : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>spaaaaace : 任意
>类型别名 :=> 任意
>4 : 4


