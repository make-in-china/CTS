=== tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedFunctions.ts ===
module A {
>A : typeof A

    export function fn(s: string) {
>fn : (s: string) => boolean
>s : string
>类型别名 :=> 文字

        return true;
>true : true
>类型别名 :=> 为真
    }

    export function fng<T, U>(s: T): U {
>fng : <T, U>(s: T) => U
>T : T
>U : U
>s : T
>T : T
>U : U

        return null;
>null : null
>类型别名 :=> 空值
    }

    function fn2(s: string) {
>fn2 : (s: string) => boolean
>s : string
>类型别名 :=> 文字

        return false;
>false : false
>类型别名 :=> 为假
    }

    function fng2<T, U>(s: T): U {
>fng2 : <T, U>(s: T) => U
>T : T
>U : U
>s : T
>T : T
>U : U

        return null;
>null : null
>类型别名 :=> 空值
    }
}

// these should not be errors since the functions are exported
var fn: (s: string) => boolean;
>fn : (s: string) => boolean
>s : string
>类型别名 :=> 文字

var fn = A.fn;
>fn : (s: string) => boolean
>A.fn : (s: string) => boolean
>A : typeof A
>fn : (s: string) => boolean

var fng: <T, U>(s: T) => U;
>fng : <T, U>(s: T) => U
>T : T
>U : U
>s : T
>T : T
>U : U

var fng = A.fng; // bug 838015
>fng : <T, U>(s: T) => U
>A.fng : <T, U>(s: T) => U
>A : typeof A
>fng : <T, U>(s: T) => U

// these should be errors since the functions are not exported
var fn2 = A.fn2;
>fn2 : any
>类型别名 :=> 任意
>A.fn2 : any
>类型别名 :=> 任意
>A : typeof A
>fn2 : any
>类型别名 :=> 任意

var fng2 = A.fng2;
>fng2 : any
>类型别名 :=> 任意
>A.fng2 : any
>类型别名 :=> 任意
>A : typeof A
>fng2 : any
>类型别名 :=> 任意

