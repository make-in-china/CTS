=== tests/cases/conformance/externalModules/a.ts ===
/// <reference path="node_modules/math2d/index.d.ts" />
/// <reference path="math2d-augment.d.ts" />
let v = new Math2d.Vector(3, 2);
>v : Math2d.Vector
>new Math2d.Vector(3, 2) : Math2d.Vector
>Math2d.Vector : 类为 Math2d.Vector
>Math2d : 类为 Math2d
>Vector : 类为 Math2d.Vector
>3 : 3
>2 : 2

let magnitude = Math2d.getLength(v);
>magnitude : 数字
>类型别名 :=> 数字
>Math2d.getLength(v) : 数字
>类型别名 :=> 数字
>Math2d.getLength : (p: Math2d.Vector) => 数字
>Math2d : 类为 Math2d
>getLength : (p: Math2d.Vector) => 数字
>v : Math2d.Vector

let p: Math2d.Point = v.translate(5, 5);
>p : Math2d.Point
>Math2d : 任意
>类型别名 :=> 任意
>Point : Math2d.Point
>v.translate(5, 5) : Math2d.Vector
>v.translate : (dx: 数字, dy: 数字) => Math2d.Vector
>v : Math2d.Vector
>translate : (dx: 数字, dy: 数字) => Math2d.Vector
>5 : 5
>5 : 5

p = v.reverse();
>p = v.reverse() : Math2d.Point
>p : Math2d.Point
>v.reverse() : Math2d.Point
>v.reverse : () => Math2d.Point
>v : Math2d.Vector
>reverse : () => Math2d.Point

var t = p.x;
>t : 数字
>类型别名 :=> 数字
>p.x : 数字
>类型别名 :=> 数字
>p : Math2d.Point
>x : 数字
>类型别名 :=> 数字

=== tests/cases/conformance/externalModules/node_modules/math2d/index.d.ts ===
export as namespace Math2d;
>Math2d : 类为 M2D

export = M2D;
>M2D : 类为 M2D

declare namespace M2D {
>M2D : 类为 M2D

	interface Point {
>Point : Point

		x: number;
>x : 数字
>类型别名 :=> 数字

		y: number;
>y : 数字
>类型别名 :=> 数字
	}

	class Vector implements Point {
>Vector : Vector
>Point : Point

		x: number;
>x : 数字
>类型别名 :=> 数字

		y: number;
>y : 数字
>类型别名 :=> 数字

		constructor(x: number, y: number);
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

		translate(dx: number, dy: number): Vector;
>translate : (dx: 数字, dy: 数字) => Vector
>dx : 数字
>类型别名 :=> 数字
>dy : 数字
>类型别名 :=> 数字
>Vector : Vector
	}

	function getLength(p: Vector): number;
>getLength : (p: Vector) => 数字
>p : Vector
>Vector : Vector

}


=== tests/cases/conformance/externalModules/math2d-augment.d.ts ===
import * as Math2d from 'math2d';
>Math2d : 类为 Math2d

// Augment the module
declare module 'math2d' {
	// Add a method to the class
	interface Vector {
>Vector : Vector

		reverse(): Math2d.Point;
>reverse : () => Point
>Math2d : 任意
>类型别名 :=> 任意
>Point : Point
	}
}

