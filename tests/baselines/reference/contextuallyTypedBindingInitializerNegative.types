=== tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedBindingInitializerNegative.ts ===
interface Show {
>Show : Show

    show: (x: number) => string;
>show : (x: number) => string
>x : number
>类型别名 :=> 数字
}
function f({ show: showRename = v => v }: Show) {}
>f : ({ show: showRename }: Show) => void
>show : any
>类型别名 :=> 任意
>showRename : ((x: number) => string) | ((v: number) => number)
>v => v : (v: number) => number
>v : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字
>Show : Show

function f2({ "show": showRename = v => v }: Show) {}
>f2 : ({ "show": showRename }: Show) => void
>showRename : ((x: number) => string) | ((v: number) => number)
>v => v : (v: number) => number
>v : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字
>Show : Show

function f3({ ["show"]: showRename = v => v }: Show) {}
>f3 : ({ ["show"]: showRename }: Show) => void
>"show" : "show"
>showRename : ((x: number) => string) | ((v: number) => number)
>v => v : (v: number) => number
>v : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字
>Show : Show

interface Nested {
>Nested : Nested

    nested: Show
>nested : Show
>Show : Show
}
function ff({ nested: nestedRename = { show: v => v } }: Nested) {}
>ff : ({ nested: nestedRename }: Nested) => void
>nested : any
>类型别名 :=> 任意
>nestedRename : Show | { show: (v: number) => number; }
>{ show: v => v } : { show: (v: number) => number; }
>show : (v: number) => number
>v => v : (v: number) => number
>v : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字
>Nested : Nested

interface StringIdentity {
>StringIdentity : StringIdentity

    stringIdentity(s: string): string;
>stringIdentity : (s: string) => string
>s : string
>类型别名 :=> 文字
}
let { stringIdentity: id = arg => arg.length }: StringIdentity = { stringIdentity: x => x};
>stringIdentity : any
>类型别名 :=> 任意
>id : ((s: string) => string) | ((arg: string) => number)
>arg => arg.length : (arg: string) => number
>arg : string
>类型别名 :=> 文字
>arg.length : number
>类型别名 :=> 数字
>arg : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
>StringIdentity : StringIdentity
>{ stringIdentity: x => x} : { stringIdentity: (x: string) => string; }
>stringIdentity : (x: string) => string
>x => x : (x: string) => string
>x : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

interface Tuples {
>Tuples : Tuples

    prop: [string, number];
>prop : [string, number]
}
function g({ prop = [101, 1234] }: Tuples) {}
>g : ({ prop }: Tuples) => void
>prop : [string, number] | [number, number]
>[101, 1234] : [number, number]
>101 : 101
>1234 : 1234
>Tuples : Tuples

interface StringUnion {
>StringUnion : StringUnion

    prop: "foo" | "bar";
>prop : "foo" | "bar"
}
function h({ prop = "baz" }: StringUnion) {}
>h : ({ prop }: StringUnion) => void
>prop : "foo" | "bar" | "baz"
>"baz" : "baz"
>StringUnion : StringUnion

