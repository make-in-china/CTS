=== tests/cases/conformance/types/thisType/thisTypeInAccessors.ts ===
interface Foo {
>Foo : Foo

    n: number;
>n : number
>类型别名 :=> 数字

    x: number;
>x : number
>类型别名 :=> 数字
}

const explicit = {
>explicit : { n: number; x: number; }
>{    n: 12,    get x(this: Foo): number { return this.n; },    set x(this: Foo, n: number) { this.n = n; }} : { n: number; x: number; }

    n: 12,
>n : number
>类型别名 :=> 数字
>12 : 12

    get x(this: Foo): number { return this.n; },
>x : number
>类型别名 :=> 数字
>this : Foo
>Foo : Foo
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字

    set x(this: Foo, n: number) { this.n = n; }
>x : number
>类型别名 :=> 数字
>this : Foo
>Foo : Foo
>n : number
>类型别名 :=> 数字
>this.n = n : number
>类型别名 :=> 数字
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字
}
const copiedFromGetter = {
>copiedFromGetter : { n: number; x: number; }
>{    n: 14,    get x(this: Foo): number { return this.n; },    set x(n) { this.n = n; }} : { n: number; x: number; }

    n: 14,
>n : number
>类型别名 :=> 数字
>14 : 14

    get x(this: Foo): number { return this.n; },
>x : number
>类型别名 :=> 数字
>this : Foo
>Foo : Foo
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字

    set x(n) { this.n = n; }
>x : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字
>this.n = n : number
>类型别名 :=> 数字
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字
}
const copiedFromSetter = {
>copiedFromSetter : { n: number; x: number; }
>{    n: 15,    get x() { return this.n },    set x(this: Foo, n: number) { this.n = n; }} : { n: number; x: number; }

    n: 15,
>n : number
>类型别名 :=> 数字
>15 : 15

    get x() { return this.n },
>x : number
>类型别名 :=> 数字
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字

    set x(this: Foo, n: number) { this.n = n; }
>x : number
>类型别名 :=> 数字
>this : Foo
>Foo : Foo
>n : number
>类型别名 :=> 数字
>this.n = n : number
>类型别名 :=> 数字
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字
}
const copiedFromGetterUnannotated = {
>copiedFromGetterUnannotated : { n: number; x: number; }
>{    n: 16,    get x(this: Foo) { return this.n },    set x(this, n) { this.n = n; }} : { n: number; x: number; }

    n: 16,
>n : number
>类型别名 :=> 数字
>16 : 16

    get x(this: Foo) { return this.n },
>x : number
>类型别名 :=> 数字
>this : Foo
>Foo : Foo
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字

    set x(this, n) { this.n = n; }
>x : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字
>this.n = n : number
>类型别名 :=> 数字
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字
}

class Explicit {
>Explicit : Explicit

    n = 17;
>n : number
>类型别名 :=> 数字
>17 : 17

    get x(this: Foo): number { return this.n; }
>x : number
>类型别名 :=> 数字
>this : Foo
>Foo : Foo
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字

    set x(this: Foo, n: number) { this.n = n; }
>x : number
>类型别名 :=> 数字
>this : Foo
>Foo : Foo
>n : number
>类型别名 :=> 数字
>this.n = n : number
>类型别名 :=> 数字
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字
}
class Contextual {
>Contextual : Contextual

    n = 21;
>n : number
>类型别名 :=> 数字
>21 : 21

    get x() { return this.n } // inside a class, so already correct
>x : number
>类型别名 :=> 数字
>this.n : number
>类型别名 :=> 数字
>this : this
>n : number
>类型别名 :=> 数字
}

