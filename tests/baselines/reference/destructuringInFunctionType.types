=== tests/cases/conformance/es6/destructuring/destructuringInFunctionType.ts ===
interface a { a }
>a : a
>a : any
>类型别名 :=> 任意

interface b { b }
>b : b
>b : any
>类型别名 :=> 任意

interface c { c }
>c : c
>c : any
>类型别名 :=> 任意

type T1 = ([a, b, c]);
>T1 : [a, b, c]
>a : a
>b : b
>c : c

type F1 = ([a, b, c]) => void;
>F1 : F1
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意

type T2 = ({ a });
>T2 : { a: any; }
>a : any
>类型别名 :=> 任意

type F2 = ({ a }) => void;
>F2 : F2
>a : any
>类型别名 :=> 任意

type T3 = ([{ a: b }, { b: a }]);
>T3 : [{ a: b; }, { b: a; }]
>a : b
>b : b
>b : a
>a : a

type F3 = ([{ a: b }, { b: a }]) => void;
>F3 : F3
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

type T4 = ([{ a: [b, c] }]);
>T4 : [{ a: [b, c]; }]
>a : [b, c]
>b : b
>c : c

type F4 = ([{ a: [b, c] }]) => void;
>F4 : F4
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意

type C1 = new ([{ a: [b, c] }]) => void;
>C1 : C1
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意

var v1 = ([a, b, c]) => "hello";
>v1 : ([a, b, c]: [any, any, any]) => string
>([a, b, c]) => "hello" : ([a, b, c]: [any, any, any]) => string
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>"hello" : "hello"

var v2: ([a, b, c]) => string;
>v2 : ([a, b, c]: [any, any, any]) => string
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意

