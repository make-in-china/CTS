=== tests/cases/compiler/sourceMapValidationDestructuringVariableStatement1.ts ===
interface Robot {
>Robot : Robot

    name: string;
>name : string
>类型别名 :=> 文字

    skill: string;
>skill : string
>类型别名 :=> 文字
}
declare var console: {
>console : { log(msg: string): void; }

    log(msg: string): void;
>log : (msg: string) => void
>msg : string
>类型别名 :=> 文字
}
var hello = "hello";
>hello : string
>类型别名 :=> 文字
>"hello" : "hello"

var robotA: Robot = { name: "mower", skill: "mowing" };
>robotA : Robot
>Robot : Robot
>{ name: "mower", skill: "mowing" } : { name: string; skill: string; }
>name : string
>类型别名 :=> 文字
>"mower" : "mower"
>skill : string
>类型别名 :=> 文字
>"mowing" : "mowing"

var robotB: Robot = { name: "trimmer", skill: "trimming" };
>robotB : Robot
>Robot : Robot
>{ name: "trimmer", skill: "trimming" } : { name: string; skill: string; }
>name : string
>类型别名 :=> 文字
>"trimmer" : "trimmer"
>skill : string
>类型别名 :=> 文字
>"trimming" : "trimming"

var a: string, { name: nameA } = robotA;
>a : string
>类型别名 :=> 文字
>name : any
>类型别名 :=> 任意
>nameA : string
>类型别名 :=> 文字
>robotA : Robot

var b: string, { name: nameB, skill: skillB } = robotB;
>b : string
>类型别名 :=> 文字
>name : any
>类型别名 :=> 任意
>nameB : string
>类型别名 :=> 文字
>skill : any
>类型别名 :=> 任意
>skillB : string
>类型别名 :=> 文字
>robotB : Robot

var c: string, { name: nameC, skill: skillC } = { name: "Edger", skill: "cutting edges" };
>c : string
>类型别名 :=> 文字
>name : any
>类型别名 :=> 任意
>nameC : string
>类型别名 :=> 文字
>skill : any
>类型别名 :=> 任意
>skillC : string
>类型别名 :=> 文字
>{ name: "Edger", skill: "cutting edges" } : { name: string; skill: string; }
>name : string
>类型别名 :=> 文字
>"Edger" : "Edger"
>skill : string
>类型别名 :=> 文字
>"cutting edges" : "cutting edges"

var { name: nameA } = robotA, a = hello;
>name : any
>类型别名 :=> 任意
>nameA : string
>类型别名 :=> 文字
>robotA : Robot
>a : string
>类型别名 :=> 文字
>hello : string
>类型别名 :=> 文字

var { name: nameB, skill: skillB } = robotB, b = " hello";
>name : any
>类型别名 :=> 任意
>nameB : string
>类型别名 :=> 文字
>skill : any
>类型别名 :=> 任意
>skillB : string
>类型别名 :=> 文字
>robotB : Robot
>b : string
>类型别名 :=> 文字
>" hello" : " hello"

var { name: nameC, skill: skillC } = { name: "Edger", skill: "cutting edges" }, c = hello;
>name : any
>类型别名 :=> 任意
>nameC : string
>类型别名 :=> 文字
>skill : any
>类型别名 :=> 任意
>skillC : string
>类型别名 :=> 文字
>{ name: "Edger", skill: "cutting edges" } : { name: string; skill: string; }
>name : string
>类型别名 :=> 文字
>"Edger" : "Edger"
>skill : string
>类型别名 :=> 文字
>"cutting edges" : "cutting edges"
>c : string
>类型别名 :=> 文字
>hello : string
>类型别名 :=> 文字

var a = hello, { name: nameA } = robotA, a1= "hello";
>a : string
>类型别名 :=> 文字
>hello : string
>类型别名 :=> 文字
>name : any
>类型别名 :=> 任意
>nameA : string
>类型别名 :=> 文字
>robotA : Robot
>a1 : string
>类型别名 :=> 文字
>"hello" : "hello"

var b = hello, { name: nameB, skill: skillB } = robotB, b1 = "hello";
>b : string
>类型别名 :=> 文字
>hello : string
>类型别名 :=> 文字
>name : any
>类型别名 :=> 任意
>nameB : string
>类型别名 :=> 文字
>skill : any
>类型别名 :=> 任意
>skillB : string
>类型别名 :=> 文字
>robotB : Robot
>b1 : string
>类型别名 :=> 文字
>"hello" : "hello"

var c = hello, { name: nameC, skill: skillC } = { name: "Edger", skill: "cutting edges" }, c1 = hello;
>c : string
>类型别名 :=> 文字
>hello : string
>类型别名 :=> 文字
>name : any
>类型别名 :=> 任意
>nameC : string
>类型别名 :=> 文字
>skill : any
>类型别名 :=> 任意
>skillC : string
>类型别名 :=> 文字
>{ name: "Edger", skill: "cutting edges" } : { name: string; skill: string; }
>name : string
>类型别名 :=> 文字
>"Edger" : "Edger"
>skill : string
>类型别名 :=> 文字
>"cutting edges" : "cutting edges"
>c1 : string
>类型别名 :=> 文字
>hello : string
>类型别名 :=> 文字

if (nameA == nameB) {
>nameA == nameB : boolean
>类型别名 :=> 真假
>nameA : string
>类型别名 :=> 文字
>nameB : string
>类型别名 :=> 文字

    console.log(skillB);
>console.log(skillB) : void
>类型别名 :=> 无值
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>skillB : string
>类型别名 :=> 文字
}
else {
    console.log(nameC);
>console.log(nameC) : void
>类型别名 :=> 无值
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>nameC : string
>类型别名 :=> 文字
}
