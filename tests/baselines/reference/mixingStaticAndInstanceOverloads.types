=== tests/cases/compiler/mixingStaticAndInstanceOverloads.ts ===
class C1 {
>C1 : C1

    // ERROR
    foo1(n: number);
>foo1 : { (n: 数字): 任意; (s: 文字): 任意; }
>n : 数字
>类型别名 :=> 数字

    foo1(s: string);
>foo1 : { (n: 数字): 任意; (s: 文字): 任意; }
>s : 文字
>类型别名 :=> 文字

    static foo1(a) { }
>foo1 : (a: 任意) => 无值
>a : 任意
>类型别名 :=> 任意
}
class C2 {
>C2 : C2

    // ERROR
    static foo2(n: number);
>foo2 : { (n: 数字): 任意; (s: 文字): 任意; }
>n : 数字
>类型别名 :=> 数字

    static foo2(s: string);
>foo2 : { (n: 数字): 任意; (s: 文字): 任意; }
>s : 文字
>类型别名 :=> 文字

    foo2(a) { }
>foo2 : (a: 任意) => 无值
>a : 任意
>类型别名 :=> 任意
}
class C3 {
>C3 : C3

    // ERROR
    foo3(n: number);
>foo3 : { (n: 数字): 任意; (a: 任意): 无值; }
>n : 数字
>类型别名 :=> 数字

    static foo3(s: string);
>foo3 : (s: 文字) => 任意
>s : 文字
>类型别名 :=> 文字

    foo3(a) { }
>foo3 : { (n: 数字): 任意; (a: 任意): 无值; }
>a : 任意
>类型别名 :=> 任意
}
class C4 {
>C4 : C4

    // ERROR
    static foo4(n: number);
>foo4 : { (n: 数字): 任意; (a: 任意): 无值; }
>n : 数字
>类型别名 :=> 数字

    foo4(s: string);
>foo4 : (s: 文字) => 任意
>s : 文字
>类型别名 :=> 文字

    static foo4(a) { }
>foo4 : { (n: 数字): 任意; (a: 任意): 无值; }
>a : 任意
>类型别名 :=> 任意
}
class C5 {
>C5 : C5

    // OK
    foo5(n: number);
>foo5 : { (n: 数字): 任意; (s: 文字): 任意; }
>n : 数字
>类型别名 :=> 数字

    foo5(s: string);
>foo5 : { (n: 数字): 任意; (s: 文字): 任意; }
>s : 文字
>类型别名 :=> 文字

    foo5(a) { }
>foo5 : { (n: 数字): 任意; (s: 文字): 任意; }
>a : 任意
>类型别名 :=> 任意

    // OK
    static foo5(n: number);
>foo5 : { (n: 数字): 任意; (s: 文字): 任意; }
>n : 数字
>类型别名 :=> 数字

    static foo5(s: string);
>foo5 : { (n: 数字): 任意; (s: 文字): 任意; }
>s : 文字
>类型别名 :=> 文字

    static foo5(a) { }
>foo5 : { (n: 数字): 任意; (s: 文字): 任意; }
>a : 任意
>类型别名 :=> 任意
}
