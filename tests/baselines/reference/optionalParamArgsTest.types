=== tests/cases/compiler/optionalParamArgsTest.ts ===
// Optional parameter and default argument tests

// Key:
// Cx - "Class x"
// My - "Method x"
// Az - "Argument z"
// E.g., C1M1A1 = "Class 1, Method 1, Argument 1"

interface I1 {
>I1 : I1

    C1M1():number;
>C1M1 : () => 数字

    C1M2(C1M2A1:number):number;
>C1M2 : (C1M2A1: 数字) => 数字
>C1M2A1 : 数字
>类型别名 :=> 数字

    C1M3(C1M3A1?:number,C1M3A2?:number):number;
>C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>C1M3A1 : 数字
>类型别名 :=> 数字
>C1M3A2 : 数字
>类型别名 :=> 数字

    C1M4(C1M4A1:number,C1M4A2?:number):number;
>C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>C1M4A1 : 数字
>类型别名 :=> 数字
>C1M4A2 : 数字
>类型别名 :=> 数字
}

// test basic configurations
class C1 {
>C1 : C1

    constructor(v: number = 1, p: number = 0) { }
>v : 数字
>类型别名 :=> 数字
>1 : 1
>p : 数字
>类型别名 :=> 数字
>0 : 0

    public n:number = 0;
>n : 数字
>类型别名 :=> 数字
>0 : 0

    public C1M1() { return 0; } // returning C1M1A1 will result in "Unresolved symbol C1M1A1"
>C1M1 : () => 数字
>0 : 0

    public C1M2(C1M2A1:number) { return C1M2A1; } // will return C1M1A2 without complaint
>C1M2 : (C1M2A1: 数字) => 数字
>C1M2A1 : 数字
>类型别名 :=> 数字
>C1M2A1 : 数字
>类型别名 :=> 数字

    // C1M3 contains all optional parameters
    public C1M3(C1M3A1:number=0,C1M3A2:number=C1M3A1) {return C1M3A1 + C1M3A2; }
>C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>C1M3A1 : 数字
>类型别名 :=> 数字
>0 : 0
>C1M3A2 : 数字
>类型别名 :=> 数字
>C1M3A1 : 数字
>类型别名 :=> 数字
>C1M3A1 + C1M3A2 : 数字
>类型别名 :=> 数字
>C1M3A1 : 数字
>类型别名 :=> 数字
>C1M3A2 : 数字
>类型别名 :=> 数字

    // C1M4 contains a mix of optional and non-optional parameters
    public C1M4(C1M4A1:number,C1M4A2?:number) { return C1M4A1 + C1M4A2; }
>C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>C1M4A1 : 数字
>类型别名 :=> 数字
>C1M4A2 : 数字
>类型别名 :=> 数字
>C1M4A1 + C1M4A2 : 数字
>类型别名 :=> 数字
>C1M4A1 : 数字
>类型别名 :=> 数字
>C1M4A2 : 数字
>类型别名 :=> 数字

    public C1M5(C1M5A1:number,C1M5A2:number=0,C1M5A3?:number) { return C1M5A1 + C1M5A2; }
>C1M5 : (C1M5A1: 数字, C1M5A2?: 数字, C1M5A3?: 数字) => 数字
>C1M5A1 : 数字
>类型别名 :=> 数字
>C1M5A2 : 数字
>类型别名 :=> 数字
>0 : 0
>C1M5A3 : 数字
>类型别名 :=> 数字
>C1M5A1 + C1M5A2 : 数字
>类型别名 :=> 数字
>C1M5A1 : 数字
>类型别名 :=> 数字
>C1M5A2 : 数字
>类型别名 :=> 数字

    // Uninitialized parameter makes the initialized one required
    public C1M5(C1M5A1:number,C1M5A2:number=0,C1M5A3:number) { return C1M5A1 + C1M5A2; }
>C1M5 : (C1M5A1: 数字, C1M5A2?: 数字, C1M5A3?: 数字) => 数字
>C1M5A1 : 数字
>类型别名 :=> 数字
>C1M5A2 : 数字
>类型别名 :=> 数字
>0 : 0
>C1M5A3 : 数字
>类型别名 :=> 数字
>C1M5A1 + C1M5A2 : 数字
>类型别名 :=> 数字
>C1M5A1 : 数字
>类型别名 :=> 数字
>C1M5A2 : 数字
>类型别名 :=> 数字
}

class C2 extends C1 {
>C2 : C2
>C1 : C1

    constructor(v2: number = 6) {
>v2 : 数字
>类型别名 :=> 数字
>6 : 6

        super(v2);
>super(v2) : 无值
>类型别名 :=> 无值
>super : 类为 C1
>v2 : 数字
>类型别名 :=> 数字
    }
}


function F1() { return 0; } 
>F1 : () => 数字
>0 : 0

function F2(F2A1:number) { return F2A1; } 
>F2 : (F2A1: 数字) => 数字
>F2A1 : 数字
>类型别名 :=> 数字
>F2A1 : 数字
>类型别名 :=> 数字

function F3(F3A1=0,F3A2=F3A1) {return F3A1 + F3A2; }
>F3 : (F3A1?: 数字, F3A2?: 数字) => 数字
>F3A1 : 数字
>类型别名 :=> 数字
>0 : 0
>F3A2 : 数字
>类型别名 :=> 数字
>F3A1 : 数字
>类型别名 :=> 数字
>F3A1 + F3A2 : 数字
>类型别名 :=> 数字
>F3A1 : 数字
>类型别名 :=> 数字
>F3A2 : 数字
>类型别名 :=> 数字

function F4(F4A1:number,F4A2?:number) { return F4A1 + F4A2; }
>F4 : (F4A1: 数字, F4A2?: 数字) => 数字
>F4A1 : 数字
>类型别名 :=> 数字
>F4A2 : 数字
>类型别名 :=> 数字
>F4A1 + F4A2 : 数字
>类型别名 :=> 数字
>F4A1 : 数字
>类型别名 :=> 数字
>F4A2 : 数字
>类型别名 :=> 数字

var L1 = function() {return 0;}
>L1 : () => 数字
>function() {return 0;} : () => 数字
>0 : 0

var L2 = function (L2A1:number) { return L2A1; } 
>L2 : (L2A1: 数字) => 数字
>function (L2A1:number) { return L2A1; } : (L2A1: 数字) => 数字
>L2A1 : 数字
>类型别名 :=> 数字
>L2A1 : 数字
>类型别名 :=> 数字

var L3 = function (L3A1=0,L3A2=L3A1) {return L3A1 + L3A2; }
>L3 : (L3A1?: 数字, L3A2?: 数字) => 数字
>function (L3A1=0,L3A2=L3A1) {return L3A1 + L3A2; } : (L3A1?: 数字, L3A2?: 数字) => 数字
>L3A1 : 数字
>类型别名 :=> 数字
>0 : 0
>L3A2 : 数字
>类型别名 :=> 数字
>L3A1 : 数字
>类型别名 :=> 数字
>L3A1 + L3A2 : 数字
>类型别名 :=> 数字
>L3A1 : 数字
>类型别名 :=> 数字
>L3A2 : 数字
>类型别名 :=> 数字

var L4 = function (L4A1:number,L4A2?:number) { return L4A1 + L4A2; }
>L4 : (L4A1: 数字, L4A2?: 数字) => 数字
>function (L4A1:number,L4A2?:number) { return L4A1 + L4A2; } : (L4A1: 数字, L4A2?: 数字) => 数字
>L4A1 : 数字
>类型别名 :=> 数字
>L4A2 : 数字
>类型别名 :=> 数字
>L4A1 + L4A2 : 数字
>类型别名 :=> 数字
>L4A1 : 数字
>类型别名 :=> 数字
>L4A2 : 数字
>类型别名 :=> 数字

var c1o1:C1 = new C1(5);
>c1o1 : C1
>C1 : C1
>new C1(5) : C1
>C1 : 类为 C1
>5 : 5

var i1o1:I1 = new C1(5);
>i1o1 : I1
>I1 : I1
>new C1(5) : C1
>C1 : 类为 C1
>5 : 5

// Valid
c1o1.C1M1();
>c1o1.C1M1() : 数字
>类型别名 :=> 数字
>c1o1.C1M1 : () => 数字
>c1o1 : C1
>C1M1 : () => 数字

var f1v1=F1();
>f1v1 : 数字
>类型别名 :=> 数字
>F1() : 数字
>类型别名 :=> 数字
>F1 : () => 数字

var l1v1=L1();
>l1v1 : 数字
>类型别名 :=> 数字
>L1() : 数字
>类型别名 :=> 数字
>L1 : () => 数字

// Valid
c1o1.C1M2(1);
>c1o1.C1M2(1) : 数字
>类型别名 :=> 数字
>c1o1.C1M2 : (C1M2A1: 数字) => 数字
>c1o1 : C1
>C1M2 : (C1M2A1: 数字) => 数字
>1 : 1

i1o1.C1M2(1);
>i1o1.C1M2(1) : 数字
>类型别名 :=> 数字
>i1o1.C1M2 : (C1M2A1: 数字) => 数字
>i1o1 : I1
>C1M2 : (C1M2A1: 数字) => 数字
>1 : 1

var f2v1=F2(1);
>f2v1 : 数字
>类型别名 :=> 数字
>F2(1) : 数字
>类型别名 :=> 数字
>F2 : (F2A1: 数字) => 数字
>1 : 1

var l2v1=L2(1);
>l2v1 : 数字
>类型别名 :=> 数字
>L2(1) : 数字
>类型别名 :=> 数字
>L2 : (L2A1: 数字) => 数字
>1 : 1

// Valid
c1o1.C1M3(1,2);
>c1o1.C1M3(1,2) : 数字
>类型别名 :=> 数字
>c1o1.C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>c1o1 : C1
>C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>1 : 1
>2 : 2

i1o1.C1M3(1,2);
>i1o1.C1M3(1,2) : 数字
>类型别名 :=> 数字
>i1o1.C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>i1o1 : I1
>C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>1 : 1
>2 : 2

var f3v1=F3(1,2);
>f3v1 : 数字
>类型别名 :=> 数字
>F3(1,2) : 数字
>类型别名 :=> 数字
>F3 : (F3A1?: 数字, F3A2?: 数字) => 数字
>1 : 1
>2 : 2

var l3v1=L3(1,2);
>l3v1 : 数字
>类型别名 :=> 数字
>L3(1,2) : 数字
>类型别名 :=> 数字
>L3 : (L3A1?: 数字, L3A2?: 数字) => 数字
>1 : 1
>2 : 2

// Valid
c1o1.C1M4(1,2);
>c1o1.C1M4(1,2) : 数字
>类型别名 :=> 数字
>c1o1.C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>c1o1 : C1
>C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>1 : 1
>2 : 2

i1o1.C1M4(1,2);
>i1o1.C1M4(1,2) : 数字
>类型别名 :=> 数字
>i1o1.C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>i1o1 : I1
>C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>1 : 1
>2 : 2

var f4v1=F4(1,2);
>f4v1 : 数字
>类型别名 :=> 数字
>F4(1,2) : 数字
>类型别名 :=> 数字
>F4 : (F4A1: 数字, F4A2?: 数字) => 数字
>1 : 1
>2 : 2

var l4v1=L4(1,2);
>l4v1 : 数字
>类型别名 :=> 数字
>L4(1,2) : 数字
>类型别名 :=> 数字
>L4 : (L4A1: 数字, L4A2?: 数字) => 数字
>1 : 1
>2 : 2

// Valid
c1o1.C1M3(1);
>c1o1.C1M3(1) : 数字
>类型别名 :=> 数字
>c1o1.C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>c1o1 : C1
>C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>1 : 1

i1o1.C1M3(1);
>i1o1.C1M3(1) : 数字
>类型别名 :=> 数字
>i1o1.C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>i1o1 : I1
>C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>1 : 1

var f3v2=F3(1);
>f3v2 : 数字
>类型别名 :=> 数字
>F3(1) : 数字
>类型别名 :=> 数字
>F3 : (F3A1?: 数字, F3A2?: 数字) => 数字
>1 : 1

var l3v2=L3(1);
>l3v2 : 数字
>类型别名 :=> 数字
>L3(1) : 数字
>类型别名 :=> 数字
>L3 : (L3A1?: 数字, L3A2?: 数字) => 数字
>1 : 1

// Valid 
c1o1.C1M3();
>c1o1.C1M3() : 数字
>类型别名 :=> 数字
>c1o1.C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>c1o1 : C1
>C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字

i1o1.C1M3();
>i1o1.C1M3() : 数字
>类型别名 :=> 数字
>i1o1.C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>i1o1 : I1
>C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字

var f3v3=F3();
>f3v3 : 数字
>类型别名 :=> 数字
>F3() : 数字
>类型别名 :=> 数字
>F3 : (F3A1?: 数字, F3A2?: 数字) => 数字

var l3v3=L3();
>l3v3 : 数字
>类型别名 :=> 数字
>L3() : 数字
>类型别名 :=> 数字
>L3 : (L3A1?: 数字, L3A2?: 数字) => 数字

// Valid
c1o1.C1M4(1);
>c1o1.C1M4(1) : 数字
>类型别名 :=> 数字
>c1o1.C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>c1o1 : C1
>C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>1 : 1

i1o1.C1M4(1);
>i1o1.C1M4(1) : 数字
>类型别名 :=> 数字
>i1o1.C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>i1o1 : I1
>C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>1 : 1

var f4v2=F4(1);
>f4v2 : 数字
>类型别名 :=> 数字
>F4(1) : 数字
>类型别名 :=> 数字
>F4 : (F4A1: 数字, F4A2?: 数字) => 数字
>1 : 1

var l4v2=L4(1);
>l4v2 : 数字
>类型别名 :=> 数字
>L4(1) : 数字
>类型别名 :=> 数字
>L4 : (L4A1: 数字, L4A2?: 数字) => 数字
>1 : 1

// Negative tests - we expect these cases to fail
c1o1.C1M1(1);
>c1o1.C1M1(1) : 数字
>类型别名 :=> 数字
>c1o1.C1M1 : () => 数字
>c1o1 : C1
>C1M1 : () => 数字
>1 : 1

i1o1.C1M1(1);
>i1o1.C1M1(1) : 数字
>类型别名 :=> 数字
>i1o1.C1M1 : () => 数字
>i1o1 : I1
>C1M1 : () => 数字
>1 : 1

F1(1);
>F1(1) : 数字
>类型别名 :=> 数字
>F1 : () => 数字
>1 : 1

L1(1);
>L1(1) : 数字
>类型别名 :=> 数字
>L1 : () => 数字
>1 : 1

c1o1.C1M2();
>c1o1.C1M2() : 数字
>类型别名 :=> 数字
>c1o1.C1M2 : (C1M2A1: 数字) => 数字
>c1o1 : C1
>C1M2 : (C1M2A1: 数字) => 数字

i1o1.C1M2();
>i1o1.C1M2() : 数字
>类型别名 :=> 数字
>i1o1.C1M2 : (C1M2A1: 数字) => 数字
>i1o1 : I1
>C1M2 : (C1M2A1: 数字) => 数字

F2();
>F2() : 数字
>类型别名 :=> 数字
>F2 : (F2A1: 数字) => 数字

L2();
>L2() : 数字
>类型别名 :=> 数字
>L2 : (L2A1: 数字) => 数字

c1o1.C1M2(1,2);
>c1o1.C1M2(1,2) : 数字
>类型别名 :=> 数字
>c1o1.C1M2 : (C1M2A1: 数字) => 数字
>c1o1 : C1
>C1M2 : (C1M2A1: 数字) => 数字
>1 : 1
>2 : 2

i1o1.C1M2(1,2);
>i1o1.C1M2(1,2) : 数字
>类型别名 :=> 数字
>i1o1.C1M2 : (C1M2A1: 数字) => 数字
>i1o1 : I1
>C1M2 : (C1M2A1: 数字) => 数字
>1 : 1
>2 : 2

F2(1,2);
>F2(1,2) : 数字
>类型别名 :=> 数字
>F2 : (F2A1: 数字) => 数字
>1 : 1
>2 : 2

L2(1,2);
>L2(1,2) : 数字
>类型别名 :=> 数字
>L2 : (L2A1: 数字) => 数字
>1 : 1
>2 : 2

c1o1.C1M3(1,2,3);
>c1o1.C1M3(1,2,3) : 数字
>类型别名 :=> 数字
>c1o1.C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>c1o1 : C1
>C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>1 : 1
>2 : 2
>3 : 3

i1o1.C1M3(1,2,3);
>i1o1.C1M3(1,2,3) : 数字
>类型别名 :=> 数字
>i1o1.C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>i1o1 : I1
>C1M3 : (C1M3A1?: 数字, C1M3A2?: 数字) => 数字
>1 : 1
>2 : 2
>3 : 3

F3(1,2,3);
>F3(1,2,3) : 数字
>类型别名 :=> 数字
>F3 : (F3A1?: 数字, F3A2?: 数字) => 数字
>1 : 1
>2 : 2
>3 : 3

L3(1,2,3);
>L3(1,2,3) : 数字
>类型别名 :=> 数字
>L3 : (L3A1?: 数字, L3A2?: 数字) => 数字
>1 : 1
>2 : 2
>3 : 3

c1o1.C1M4();
>c1o1.C1M4() : 数字
>类型别名 :=> 数字
>c1o1.C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>c1o1 : C1
>C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字

i1o1.C1M4();
>i1o1.C1M4() : 数字
>类型别名 :=> 数字
>i1o1.C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字
>i1o1 : I1
>C1M4 : (C1M4A1: 数字, C1M4A2?: 数字) => 数字

F4();
>F4() : 数字
>类型别名 :=> 数字
>F4 : (F4A1: 数字, F4A2?: 数字) => 数字

L4();
>L4() : 数字
>类型别名 :=> 数字
>L4 : (L4A1: 数字, L4A2?: 数字) => 数字

function fnOpt1(id: number, children: number[] = [], expectedPath: number[] = [], isRoot?: boolean): void {}
>fnOpt1 : (id: 数字, children?: 数字[], expectedPath?: 数字[], isRoot?: 真假) => 无值
>id : 数字
>类型别名 :=> 数字
>children : 数字[]
>[] : 未定[]
>expectedPath : 数字[]
>[] : 未定[]
>isRoot : 真假
>类型别名 :=> 真假

function fnOpt2(id: number, children?: number[], expectedPath?: number[], isRoot?: boolean): void {}
>fnOpt2 : (id: 数字, children?: 数字[], expectedPath?: 数字[], isRoot?: 真假) => 无值
>id : 数字
>类型别名 :=> 数字
>children : 数字[]
>expectedPath : 数字[]
>isRoot : 真假
>类型别名 :=> 真假

fnOpt1(1, [2, 3], [1], true);
>fnOpt1(1, [2, 3], [1], true) : 无值
>类型别名 :=> 无值
>fnOpt1 : (id: 数字, children?: 数字[], expectedPath?: 数字[], isRoot?: 真假) => 无值
>1 : 1
>[2, 3] : 数字[]
>2 : 2
>3 : 3
>[1] : 数字[]
>1 : 1
>true : 为真
>类型别名 :=> 为真

fnOpt2(1, [2, 3], [1], true);
>fnOpt2(1, [2, 3], [1], true) : 无值
>类型别名 :=> 无值
>fnOpt2 : (id: 数字, children?: 数字[], expectedPath?: 数字[], isRoot?: 真假) => 无值
>1 : 1
>[2, 3] : 数字[]
>2 : 2
>3 : 3
>[1] : 数字[]
>1 : 1
>true : 为真
>类型别名 :=> 为真

