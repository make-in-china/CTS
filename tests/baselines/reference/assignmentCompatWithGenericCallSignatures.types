=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithGenericCallSignatures.ts ===
// some complex cases of assignment compat of generic signatures that stress contextual signature instantiation

var f: <S extends { p: string }[]>(x: S) => void
>f : <S 扩展 { p: 文字; }[]>(x: S) => 无值
>S : S
>p : 文字
>类型别名 :=> 文字
>x : S
>S : S

var g: <T extends { p: string }>(x: T[]) => void
>g : <T 扩展 { p: 文字; }>(x: T[]) => 无值
>T : T
>p : 文字
>类型别名 :=> 文字
>x : T[]
>T : T

f = g; // ok
>f = g : <T 扩展 { p: 文字; }>(x: T[]) => 无值
>f : <S 扩展 { p: 文字; }[]>(x: S) => 无值
>g : <T 扩展 { p: 文字; }>(x: T[]) => 无值

g = f; // ok
>g = f : <S 扩展 { p: 文字; }[]>(x: S) => 无值
>g : <T 扩展 { p: 文字; }>(x: T[]) => 无值
>f : <S 扩展 { p: 文字; }[]>(x: S) => 无值

