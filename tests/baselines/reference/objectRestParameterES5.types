=== tests/cases/conformance/types/rest/objectRestParameterES5.ts ===
function cloneAgain({ a, ...clone }: { a: number, b: string }): void {
>cloneAgain : ({ a, ...clone }: { a: number; b: string; }) => void
>a : number
>类型别名 :=> 数字
>clone : { b: string; }
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字
}

declare function suddenly(f: (a: { x: { z, ka }, y: string }) => void);
>suddenly : (f: (a: { x: { z: any; ka: any; }; y: string; }) => void) => any
>f : (a: { x: { z: any; ka: any; }; y: string; }) => void
>a : { x: { z: any; ka: any; }; y: string; }
>x : { z: any; ka: any; }
>z : any
>类型别名 :=> 任意
>ka : any
>类型别名 :=> 任意
>y : string
>类型别名 :=> 文字

suddenly(({ x: a, ...rest }) => rest.y);
>suddenly(({ x: a, ...rest }) => rest.y) : any
>类型别名 :=> 任意
>suddenly : (f: (a: { x: { z: any; ka: any; }; y: string; }) => void) => any
>({ x: a, ...rest }) => rest.y : ({ x: a, ...rest }: { x: { z: any; ka: any; }; y: string; }) => string
>x : any
>类型别名 :=> 任意
>a : { z: any; ka: any; }
>rest : { y: string; }
>rest.y : string
>类型别名 :=> 文字
>rest : { y: string; }
>y : string
>类型别名 :=> 文字

suddenly(({ x: { z = 12, ...nested }, ...rest } = { x: { z: 1, ka: 1 }, y: 'noo' }) => rest.y + nested.ka);
>suddenly(({ x: { z = 12, ...nested }, ...rest } = { x: { z: 1, ka: 1 }, y: 'noo' }) => rest.y + nested.ka) : any
>类型别名 :=> 任意
>suddenly : (f: (a: { x: { z: any; ka: any; }; y: string; }) => void) => any
>({ x: { z = 12, ...nested }, ...rest } = { x: { z: 1, ka: 1 }, y: 'noo' }) => rest.y + nested.ka : ({ x: { z, ...nested }, ...rest }?: { x: { z: any; ka: any; }; y: string; }) => string
>x : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意
>12 : 12
>nested : { ka: any; }
>rest : { y: string; }
>{ x: { z: 1, ka: 1 }, y: 'noo' } : { x: { z: number; ka: number; }; y: string; }
>x : { z: number; ka: number; }
>{ z: 1, ka: 1 } : { z: number; ka: number; }
>z : number
>类型别名 :=> 数字
>1 : 1
>ka : number
>类型别名 :=> 数字
>1 : 1
>y : string
>类型别名 :=> 文字
>'noo' : "noo"
>rest.y + nested.ka : string
>类型别名 :=> 文字
>rest.y : string
>类型别名 :=> 文字
>rest : { y: string; }
>y : string
>类型别名 :=> 文字
>nested.ka : any
>类型别名 :=> 任意
>nested : { ka: any; }
>ka : any
>类型别名 :=> 任意

class C {
>C : C

    m({ a, ...clone }: { a: number, b: string}): void {
>m : ({ a, ...clone }: { a: number; b: string; }) => void
>a : number
>类型别名 :=> 数字
>clone : { b: string; }
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字

        // actually, never mind, don't clone
    }
    set p({ a, ...clone }: { a: number, b: string}) {
>p : { a: number; b: string; }
>a : number
>类型别名 :=> 数字
>clone : { b: string; }
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字

        // actually, never mind, don't clone
    }
}
function foobar({ bar={}, ...opts }: any = {}) {
>foobar : ({ bar, ...opts }?: any) => void
>bar : any
>类型别名 :=> 任意
>{} : {}
>opts : any
>类型别名 :=> 任意
>{} : {}
}
foobar();
>foobar() : void
>类型别名 :=> 无值
>foobar : ({ bar, ...opts }?: any) => void

foobar({ baz: 'hello' });
>foobar({ baz: 'hello' }) : void
>类型别名 :=> 无值
>foobar : ({ bar, ...opts }?: any) => void
>{ baz: 'hello' } : { baz: string; }
>baz : string
>类型别名 :=> 文字
>'hello' : "hello"

foobar({ bar: { greeting: 'hello' } });
>foobar({ bar: { greeting: 'hello' } }) : void
>类型别名 :=> 无值
>foobar : ({ bar, ...opts }?: any) => void
>{ bar: { greeting: 'hello' } } : { bar: { greeting: string; }; }
>bar : { greeting: string; }
>{ greeting: 'hello' } : { greeting: string; }
>greeting : string
>类型别名 :=> 文字
>'hello' : "hello"

