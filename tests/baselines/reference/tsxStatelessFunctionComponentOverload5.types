=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react')
>React : typeof React

export interface ClickableProps {
>ClickableProps : ClickableProps

    children?: string;
>children : string
>类型别名 :=> 文字

    className?: string;
>className : string
>类型别名 :=> 文字
}

export interface ButtonProps extends ClickableProps {
>ButtonProps : ButtonProps
>ClickableProps : ClickableProps

    onClick: React.MouseEventHandler<any>;
>onClick : React.EventHandler<React.MouseEvent<any>>
>React : any
>类型别名 :=> 任意
>MouseEventHandler : React.EventHandler<React.MouseEvent<T>>
}

export interface LinkProps extends ClickableProps {
>LinkProps : LinkProps
>ClickableProps : ClickableProps

    to: string;
>to : string
>类型别名 :=> 文字
}

export interface HyphenProps extends ClickableProps {
>HyphenProps : HyphenProps
>ClickableProps : ClickableProps

    "data-format": string;
}

let obj0 = {
>obj0 : { to: string; }
>{    to: "world"} : { to: string; }

    to: "world"
>to : string
>类型别名 :=> 文字
>"world" : "world"

};

let obj1 = {
>obj1 : { children: string; to: string; }
>{    children: "hi",    to: "boo"} : { children: string; to: string; }

    children: "hi",
>children : string
>类型别名 :=> 文字
>"hi" : "hi"

    to: "boo"
>to : string
>类型别名 :=> 文字
>"boo" : "boo"
}

let obj2 = {
>obj2 : { onClick: () => void; }
>{    onClick: ()=>{}} : { onClick: () => void; }

    onClick: ()=>{}
>onClick : () => void
>()=>{} : () => void
}

let obj3: any;
>obj3 : any
>类型别名 :=> 任意

export function MainButton(buttonProps: ButtonProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>buttonProps : ButtonProps
>ButtonProps : ButtonProps
>JSX : any
>类型别名 :=> 任意
>Element : JSX.Element

export function MainButton(linkProps: LinkProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>linkProps : LinkProps
>LinkProps : LinkProps
>JSX : any
>类型别名 :=> 任意
>Element : JSX.Element

export function MainButton(hyphenProps: HyphenProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>hyphenProps : HyphenProps
>HyphenProps : HyphenProps
>JSX : any
>类型别名 :=> 任意
>Element : JSX.Element

export function MainButton(props: ButtonProps | LinkProps | HyphenProps): JSX.Element {
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>props : ButtonProps | LinkProps | HyphenProps
>ButtonProps : ButtonProps
>LinkProps : LinkProps
>HyphenProps : HyphenProps
>JSX : any
>类型别名 :=> 任意
>Element : JSX.Element

    const linkProps = props as LinkProps;
>linkProps : LinkProps
>props as LinkProps : LinkProps
>props : ButtonProps | LinkProps | HyphenProps
>LinkProps : LinkProps

    if(linkProps.to) {
>linkProps.to : string
>类型别名 :=> 文字
>linkProps : LinkProps
>to : string
>类型别名 :=> 文字

        return this._buildMainLink(props);
>this._buildMainLink(props) : any
>类型别名 :=> 任意
>this._buildMainLink : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>_buildMainLink : any
>类型别名 :=> 任意
>props : ButtonProps | LinkProps | HyphenProps
    }

    return this._buildMainButton(props);
>this._buildMainButton(props) : any
>类型别名 :=> 任意
>this._buildMainButton : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>_buildMainButton : any
>类型别名 :=> 任意
>props : ButtonProps | LinkProps | HyphenProps
}

// Error
const b0 = <MainButton to='/some/path' onClick={(e)=>{}}>GO</MainButton>;  // extra property;
>b0 : JSX.Element
><MainButton to='/some/path' onClick={(e)=>{}}>GO</MainButton> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>to : string
>类型别名 :=> 文字
>onClick : (e: React.MouseEvent<any>) => void
>(e)=>{} : (e: React.MouseEvent<any>) => void
>e : React.MouseEvent<any>
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }

const b1 = <MainButton onClick={(e: any)=> {}} {...obj0}>Hello world</MainButton>;  // extra property;
>b1 : JSX.Element
><MainButton onClick={(e: any)=> {}} {...obj0}>Hello world</MainButton> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>onClick : (e: any) => void
>(e: any)=> {} : (e: any) => void
>e : any
>类型别名 :=> 任意
>obj0 : { to: string; }
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }

const b2 = <MainButton {...{to: "10000"}} {...obj2} />;  // extra property
>b2 : JSX.Element
><MainButton {...{to: "10000"}} {...obj2} /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>{to: "10000"} : { to: string; }
>to : string
>类型别名 :=> 文字
>"10000" : "10000"
>obj2 : { onClick: () => void; }

const b3 = <MainButton {...{to: "10000"}} {...{onClick: (k) => {}}} />;  // extra property
>b3 : JSX.Element
><MainButton {...{to: "10000"}} {...{onClick: (k) => {}}} /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>{to: "10000"} : { to: string; }
>to : string
>类型别名 :=> 文字
>"10000" : "10000"
>{onClick: (k) => {}} : { onClick: (k: React.MouseEvent<any>) => void; }
>onClick : (k: React.MouseEvent<any>) => void
>(k) => {} : (k: React.MouseEvent<any>) => void
>k : React.MouseEvent<any>

const b4 = <MainButton {...obj3} to />;  // Should error because Incorrect type; but attributes are any so everything is allowed
>b4 : JSX.Element
><MainButton {...obj3} to /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>obj3 : any
>类型别名 :=> 任意
>to : true
>类型别名 :=> 为真

const b5 = <MainButton {...{ onClick(e: any) { } }} {...obj0} />;  // Spread retain method declaration (see GitHub #13365), so now there is an extra attributes
>b5 : JSX.Element
><MainButton {...{ onClick(e: any) { } }} {...obj0} /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>{ onClick(e: any) { } } : { onClick(e: any): void; }
>onClick : (e: any) => void
>e : any
>类型别名 :=> 任意
>obj0 : { to: string; }

const b6 = <MainButton {...{ onClick(e: any){} }} children={10} />;  // incorrect type for optional attribute
>b6 : JSX.Element
><MainButton {...{ onClick(e: any){} }} children={10} /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>{ onClick(e: any){} } : { onClick(e: any): void; }
>onClick : (e: any) => void
>e : any
>类型别名 :=> 任意
>children : number
>类型别名 :=> 数字
>10 : 10

const b7 = <MainButton {...{ onClick(e: any){} }} children="hello" className />;  // incorrect type for optional attribute
>b7 : JSX.Element
><MainButton {...{ onClick(e: any){} }} children="hello" className /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>{ onClick(e: any){} } : { onClick(e: any): void; }
>onClick : (e: any) => void
>e : any
>类型别名 :=> 任意
>children : string
>类型别名 :=> 文字
>className : true
>类型别名 :=> 为真

const b8 = <MainButton data-format />;  // incorrect type for specified hyphanated name
>b8 : JSX.Element
><MainButton data-format /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>data-format : true
>类型别名 :=> 为真

