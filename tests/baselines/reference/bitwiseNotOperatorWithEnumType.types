=== tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithEnumType.ts ===
// ~ operator on enum type

enum ENUM1 { A, B, "" };
>ENUM1 : ENUM1
>A : ENUM1.A
>B : ENUM1.B

// enum type var
var ResultIsNumber1 = ~ENUM1;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>~ENUM1 : 数字
>类型别名 :=> 数字
>ENUM1 : 类为 ENUM1

// enum type expressions
var ResultIsNumber2 = ~ENUM1["A"];
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>~ENUM1["A"] : 数字
>类型别名 :=> 数字
>ENUM1["A"] : ENUM1.A
>ENUM1 : 类为 ENUM1
>"A" : "A"

var ResultIsNumber3 = ~(ENUM1.A + ENUM1["B"]);
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>~(ENUM1.A + ENUM1["B"]) : 数字
>类型别名 :=> 数字
>(ENUM1.A + ENUM1["B"]) : 数字
>类型别名 :=> 数字
>ENUM1.A + ENUM1["B"] : 数字
>类型别名 :=> 数字
>ENUM1.A : ENUM1.A
>ENUM1 : 类为 ENUM1
>A : ENUM1.A
>ENUM1["B"] : ENUM1.B
>ENUM1 : 类为 ENUM1
>"B" : "B"

// multiple ~ operators
var ResultIsNumber4 = ~~~(ENUM1["A"] + ENUM1.B);
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>~~~(ENUM1["A"] + ENUM1.B) : 数字
>类型别名 :=> 数字
>~~(ENUM1["A"] + ENUM1.B) : 数字
>类型别名 :=> 数字
>~(ENUM1["A"] + ENUM1.B) : 数字
>类型别名 :=> 数字
>(ENUM1["A"] + ENUM1.B) : 数字
>类型别名 :=> 数字
>ENUM1["A"] + ENUM1.B : 数字
>类型别名 :=> 数字
>ENUM1["A"] : ENUM1.A
>ENUM1 : 类为 ENUM1
>"A" : "A"
>ENUM1.B : ENUM1.B
>ENUM1 : 类为 ENUM1
>B : ENUM1.B

// miss assignment operators
~ENUM1;
>~ENUM1 : 数字
>类型别名 :=> 数字
>ENUM1 : 类为 ENUM1

~ENUM1["A"];
>~ENUM1["A"] : 数字
>类型别名 :=> 数字
>ENUM1["A"] : ENUM1.A
>ENUM1 : 类为 ENUM1
>"A" : "A"

~ENUM1.A, ~ENUM1["B"];
>~ENUM1.A, ~ENUM1["B"] : 数字
>类型别名 :=> 数字
>~ENUM1.A : 数字
>类型别名 :=> 数字
>ENUM1.A : ENUM1.A
>ENUM1 : 类为 ENUM1
>A : ENUM1.A
>~ENUM1["B"] : 数字
>类型别名 :=> 数字
>ENUM1["B"] : ENUM1.B
>ENUM1 : 类为 ENUM1
>"B" : "B"

