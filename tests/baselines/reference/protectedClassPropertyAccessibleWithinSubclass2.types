=== tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinSubclass2.ts ===
class Base {
>Base : Base

    protected x: string;
>x : 文字
>类型别名 :=> 文字

    method() {
>method : () => 无值

        var b: Base;
>b : Base
>Base : Base

        var d1: Derived1;
>d1 : Derived1
>Derived1 : Derived1

        var d2: Derived2;
>d2 : Derived2
>Derived2 : Derived2

        var d3: Derived3;
>d3 : Derived3
>Derived3 : Derived3

        var d4: Derived4;
>d4 : Derived4
>Derived4 : Derived4

        b.x;            // OK, accessed within their declaring class
>b.x : 文字
>类型别名 :=> 文字
>b : Base
>x : 文字
>类型别名 :=> 文字

        d1.x;           // OK, accessed within their declaring class
>d1.x : 文字
>类型别名 :=> 文字
>d1 : Derived1
>x : 文字
>类型别名 :=> 文字

        d2.x;           // OK, accessed within their declaring class
>d2.x : 文字
>类型别名 :=> 文字
>d2 : Derived2
>x : 文字
>类型别名 :=> 文字

        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>d3.x : 文字
>类型别名 :=> 文字
>d3 : Derived3
>x : 文字
>类型别名 :=> 文字

        d4.x;           // OK, accessed within their declaring class
>d4.x : 文字
>类型别名 :=> 文字
>d4 : Derived4
>x : 文字
>类型别名 :=> 文字
    }
}

class Derived1 extends Base {
>Derived1 : Derived1
>Base : Base

    method1() {
>method1 : () => 无值

        var b: Base;
>b : Base
>Base : Base

        var d1: Derived1;
>d1 : Derived1
>Derived1 : Derived1

        var d2: Derived2;
>d2 : Derived2
>Derived2 : Derived2

        var d3: Derived3;
>d3 : Derived3
>Derived3 : Derived3

        var d4: Derived4;
>d4 : Derived4
>Derived4 : Derived4

        b.x;            // Error, isn't accessed through an instance of the enclosing class
>b.x : 文字
>类型别名 :=> 文字
>b : Base
>x : 文字
>类型别名 :=> 文字

        d1.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
>d1.x : 文字
>类型别名 :=> 文字
>d1 : Derived1
>x : 文字
>类型别名 :=> 文字

        d2.x;           // Error, isn't accessed through an instance of the enclosing class
>d2.x : 文字
>类型别名 :=> 文字
>d2 : Derived2
>x : 文字
>类型别名 :=> 文字

        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>d3.x : 文字
>类型别名 :=> 文字
>d3 : Derived3
>x : 文字
>类型别名 :=> 文字

        d4.x;           // Error, isn't accessed through an instance of the enclosing class
>d4.x : 文字
>类型别名 :=> 文字
>d4 : Derived4
>x : 文字
>类型别名 :=> 文字
    }
}

class Derived2 extends Base {
>Derived2 : Derived2
>Base : Base

    method2() {
>method2 : () => 无值

        var b: Base;
>b : Base
>Base : Base

        var d1: Derived1;
>d1 : Derived1
>Derived1 : Derived1

        var d2: Derived2;
>d2 : Derived2
>Derived2 : Derived2

        var d3: Derived3;
>d3 : Derived3
>Derived3 : Derived3

        var d4: Derived4;
>d4 : Derived4
>Derived4 : Derived4

        b.x;            // Error, isn't accessed through an instance of the enclosing class
>b.x : 文字
>类型别名 :=> 文字
>b : Base
>x : 文字
>类型别名 :=> 文字

        d1.x;           // Error, isn't accessed through an instance of the enclosing class
>d1.x : 文字
>类型别名 :=> 文字
>d1 : Derived1
>x : 文字
>类型别名 :=> 文字

        d2.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
>d2.x : 文字
>类型别名 :=> 文字
>d2 : Derived2
>x : 文字
>类型别名 :=> 文字

        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>d3.x : 文字
>类型别名 :=> 文字
>d3 : Derived3
>x : 文字
>类型别名 :=> 文字

        d4.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class or one of its subclasses
>d4.x : 文字
>类型别名 :=> 文字
>d4 : Derived4
>x : 文字
>类型别名 :=> 文字
    }
}

class Derived3 extends Derived1 {
>Derived3 : Derived3
>Derived1 : Derived1

    protected x: string;
>x : 文字
>类型别名 :=> 文字

    method3() {
>method3 : () => 无值

        var b: Base;
>b : Base
>Base : Base

        var d1: Derived1;
>d1 : Derived1
>Derived1 : Derived1

        var d2: Derived2;
>d2 : Derived2
>Derived2 : Derived2

        var d3: Derived3;
>d3 : Derived3
>Derived3 : Derived3

        var d4: Derived4;
>d4 : Derived4
>Derived4 : Derived4

        b.x;            // Error, isn't accessed through an instance of the enclosing class
>b.x : 文字
>类型别名 :=> 文字
>b : Base
>x : 文字
>类型别名 :=> 文字

        d1.x;           // Error, isn't accessed through an instance of the enclosing class
>d1.x : 文字
>类型别名 :=> 文字
>d1 : Derived1
>x : 文字
>类型别名 :=> 文字

        d2.x;           // Error, isn't accessed through an instance of the enclosing class
>d2.x : 文字
>类型别名 :=> 文字
>d2 : Derived2
>x : 文字
>类型别名 :=> 文字

        d3.x;           // OK, accessed within their declaring class
>d3.x : 文字
>类型别名 :=> 文字
>d3 : Derived3
>x : 文字
>类型别名 :=> 文字

        d4.x;           // Error, isn't accessed through an instance of the enclosing class
>d4.x : 文字
>类型别名 :=> 文字
>d4 : Derived4
>x : 文字
>类型别名 :=> 文字
    }
}

class Derived4 extends Derived2 {
>Derived4 : Derived4
>Derived2 : Derived2

    method4() {
>method4 : () => 无值

        var b: Base;
>b : Base
>Base : Base

        var d1: Derived1;
>d1 : Derived1
>Derived1 : Derived1

        var d2: Derived2;
>d2 : Derived2
>Derived2 : Derived2

        var d3: Derived3;
>d3 : Derived3
>Derived3 : Derived3

        var d4: Derived4;
>d4 : Derived4
>Derived4 : Derived4

        b.x;            // Error, isn't accessed through an instance of the enclosing class
>b.x : 文字
>类型别名 :=> 文字
>b : Base
>x : 文字
>类型别名 :=> 文字

        d1.x;           // Error, isn't accessed through an instance of the enclosing class
>d1.x : 文字
>类型别名 :=> 文字
>d1 : Derived1
>x : 文字
>类型别名 :=> 文字

        d2.x;           // Error, isn't accessed through an instance of the enclosing class
>d2.x : 文字
>类型别名 :=> 文字
>d2 : Derived2
>x : 文字
>类型别名 :=> 文字

        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
>d3.x : 文字
>类型别名 :=> 文字
>d3 : Derived3
>x : 文字
>类型别名 :=> 文字

        d4.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
>d4.x : 文字
>类型别名 :=> 文字
>d4 : Derived4
>x : 文字
>类型别名 :=> 文字
    }
}


var b: Base;
>b : Base
>Base : Base

var d1: Derived1;
>d1 : Derived1
>Derived1 : Derived1

var d2: Derived2;
>d2 : Derived2
>Derived2 : Derived2

var d3: Derived3;
>d3 : Derived3
>Derived3 : Derived3

var d4: Derived4;
>d4 : Derived4
>Derived4 : Derived4

b.x;                    // Error, neither within their declaring class nor classes derived from their declaring class
>b.x : 文字
>类型别名 :=> 文字
>b : Base
>x : 文字
>类型别名 :=> 文字

d1.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
>d1.x : 文字
>类型别名 :=> 文字
>d1 : Derived1
>x : 文字
>类型别名 :=> 文字

d2.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
>d2.x : 文字
>类型别名 :=> 文字
>d2 : Derived2
>x : 文字
>类型别名 :=> 文字

d3.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
>d3.x : 文字
>类型别名 :=> 文字
>d3 : Derived3
>x : 文字
>类型别名 :=> 文字

d4.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
>d4.x : 文字
>类型别名 :=> 文字
>d4 : Derived4
>x : 文字
>类型别名 :=> 文字

