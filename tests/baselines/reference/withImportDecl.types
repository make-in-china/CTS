=== tests/cases/compiler/withImportDecl_1.ts ===
///<reference path='withImportDecl_0.ts'/>
var simpleVar;
>simpleVar : 任意
>类型别名 :=> 任意

var anotherVar: any;
>anotherVar : 任意
>类型别名 :=> 任意

var varWithSimpleType: number;
>varWithSimpleType : 数字
>类型别名 :=> 数字

var varWithArrayType: number[];
>varWithArrayType : 数字[]

var varWithInitialValue = 30;
>varWithInitialValue : 数字
>类型别名 :=> 数字
>30 : 30

var withComplicatedValue = { x: 30, y: 70, desc: "position" };
>withComplicatedValue : { x: 数字; y: 数字; desc: 文字; }
>{ x: 30, y: 70, desc: "position" } : { x: 数字; y: 数字; desc: 文字; }
>x : 数字
>类型别名 :=> 数字
>30 : 30
>y : 数字
>类型别名 :=> 数字
>70 : 70
>desc : 文字
>类型别名 :=> 文字
>"position" : "position"

declare var declaredVar;
>declaredVar : 任意
>类型别名 :=> 任意

declare var declareVar2
>declareVar2 : 任意
>类型别名 :=> 任意

declare var declaredVar;
>declaredVar : 任意
>类型别名 :=> 任意

declare var deckareVarWithType: number;
>deckareVarWithType : 数字
>类型别名 :=> 数字

var arrayVar: string[] = ['a', 'b'];
>arrayVar : 文字[]
>['a', 'b'] : 文字[]
>'a' : "a"
>'b' : "b"


function simpleFunction() {
>simpleFunction : () => { x: 文字; y: 文字; n: 数字; }

    return {
>{        x: "Hello",        y: "word",        n: 2    } : { x: 文字; y: 文字; n: 数字; }

        x: "Hello",
>x : 文字
>类型别名 :=> 文字
>"Hello" : "Hello"

        y: "word",
>y : 文字
>类型别名 :=> 文字
>"word" : "word"

        n: 2
>n : 数字
>类型别名 :=> 数字
>2 : 2

    };
}

module m1 {
>m1 : 类为 m1

    export function foo() {
>foo : () => 文字

        return "Hello";
>"Hello" : "Hello"
    }
}

import m3 = require("withImportDecl_0");
>m3 : 类为 m3

var b = new m3.A();
>b : m3.A
>new m3.A() : m3.A
>m3.A : 类为 m3.A
>m3 : 类为 m3
>A : 类为 m3.A

b.foo;
>b.foo : 文字
>类型别名 :=> 文字
>b : m3.A
>foo : 文字
>类型别名 :=> 文字

=== tests/cases/compiler/withImportDecl_0.ts ===
export class A { foo: string; }
>A : A
>foo : 文字
>类型别名 :=> 文字

