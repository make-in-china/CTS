=== tests/cases/compiler/literalsInComputedProperties1.ts ===
let x = {
>x : { 1: 数字; [2]: 数字; "3": 数字; ["4"]: 数字; }
>{    1:1,    [2]:1,    "3":1,    ["4"]:1} : { 1: 数字; [2]: 数字; "3": 数字; ["4"]: 数字; }

    1:1,
>1 : 1

    [2]:1,
>2 : 2
>1 : 1

    "3":1,
>1 : 1

    ["4"]:1
>"4" : "4"
>1 : 1
}
x[1].toExponential();
>x[1].toExponential() : 文字
>类型别名 :=> 文字
>x[1].toExponential : (fractionDigits?: 数字) => 文字
>x[1] : 数字
>类型别名 :=> 数字
>x : { 1: 数字; [2]: 数字; "3": 数字; ["4"]: 数字; }
>1 : 1
>toExponential : (fractionDigits?: 数字) => 文字

x[2].toExponential();
>x[2].toExponential() : 文字
>类型别名 :=> 文字
>x[2].toExponential : (fractionDigits?: 数字) => 文字
>x[2] : 数字
>类型别名 :=> 数字
>x : { 1: 数字; [2]: 数字; "3": 数字; ["4"]: 数字; }
>2 : 2
>toExponential : (fractionDigits?: 数字) => 文字

x[3].toExponential();
>x[3].toExponential() : 文字
>类型别名 :=> 文字
>x[3].toExponential : (fractionDigits?: 数字) => 文字
>x[3] : 数字
>类型别名 :=> 数字
>x : { 1: 数字; [2]: 数字; "3": 数字; ["4"]: 数字; }
>3 : 3
>toExponential : (fractionDigits?: 数字) => 文字

x[4].toExponential();
>x[4].toExponential() : 文字
>类型别名 :=> 文字
>x[4].toExponential : (fractionDigits?: 数字) => 文字
>x[4] : 数字
>类型别名 :=> 数字
>x : { 1: 数字; [2]: 数字; "3": 数字; ["4"]: 数字; }
>4 : 4
>toExponential : (fractionDigits?: 数字) => 文字

interface A {
>A : A

    1:number;
    [2]:number;
>2 : 2

    "3":number;
    ["4"]:number;
>"4" : "4"
}

let y:A;
>y : A
>A : A

y[1].toExponential();
>y[1].toExponential() : 文字
>类型别名 :=> 文字
>y[1].toExponential : (fractionDigits?: 数字) => 文字
>y[1] : 数字
>类型别名 :=> 数字
>y : A
>1 : 1
>toExponential : (fractionDigits?: 数字) => 文字

y[2].toExponential();
>y[2].toExponential() : 文字
>类型别名 :=> 文字
>y[2].toExponential : (fractionDigits?: 数字) => 文字
>y[2] : 数字
>类型别名 :=> 数字
>y : A
>2 : 2
>toExponential : (fractionDigits?: 数字) => 文字

y[3].toExponential();
>y[3].toExponential() : 文字
>类型别名 :=> 文字
>y[3].toExponential : (fractionDigits?: 数字) => 文字
>y[3] : 数字
>类型别名 :=> 数字
>y : A
>3 : 3
>toExponential : (fractionDigits?: 数字) => 文字

y[4].toExponential();
>y[4].toExponential() : 文字
>类型别名 :=> 文字
>y[4].toExponential : (fractionDigits?: 数字) => 文字
>y[4] : 数字
>类型别名 :=> 数字
>y : A
>4 : 4
>toExponential : (fractionDigits?: 数字) => 文字

class C {
>C : C

    1:number;
    [2]:number;
>2 : 2

    "3":number;
    ["4"]:number;
>"4" : "4"
}

let z:C;
>z : C
>C : C

z[1].toExponential();
>z[1].toExponential() : 文字
>类型别名 :=> 文字
>z[1].toExponential : (fractionDigits?: 数字) => 文字
>z[1] : 数字
>类型别名 :=> 数字
>z : C
>1 : 1
>toExponential : (fractionDigits?: 数字) => 文字

z[2].toExponential();
>z[2].toExponential() : 文字
>类型别名 :=> 文字
>z[2].toExponential : (fractionDigits?: 数字) => 文字
>z[2] : 数字
>类型别名 :=> 数字
>z : C
>2 : 2
>toExponential : (fractionDigits?: 数字) => 文字

z[3].toExponential();
>z[3].toExponential() : 文字
>类型别名 :=> 文字
>z[3].toExponential : (fractionDigits?: 数字) => 文字
>z[3] : 数字
>类型别名 :=> 数字
>z : C
>3 : 3
>toExponential : (fractionDigits?: 数字) => 文字

z[4].toExponential();
>z[4].toExponential() : 文字
>类型别名 :=> 文字
>z[4].toExponential : (fractionDigits?: 数字) => 文字
>z[4] : 数字
>类型别名 :=> 数字
>z : C
>4 : 4
>toExponential : (fractionDigits?: 数字) => 文字

enum X {
>X : X

    1 = 1,
>1 : 1

    [2] = 2,
>2 : 2
>2 : 2

    "3" = 3,
>3 : 3

    ["4"] = 4,
>"4" : "4"
>4 : 4

    "foo" = 5,
>5 : 5

    ["bar"] = 6
>"bar" : "bar"
>6 : 6
}

let a = X["foo"];
>a : X
>X["foo"] : X."foo"
>X : 类为 X
>"foo" : "foo"

let a0 = X["bar"];
>a0 : X
>X["bar"] : X.["bar"]
>X : 类为 X
>"bar" : "bar"

// TODO: make sure that enum still disallow template literals as member names
