=== tests/cases/conformance/dynamicImport/importCallExpressionDeclarationEmit1.ts ===
declare function getSpecifier(): string;
>getSpecifier : () => string

declare var whatToLoad: boolean;
>whatToLoad : boolean
>类型别名 :=> 真假

declare const directory: string;
>directory : string
>类型别名 :=> 文字

declare const moduleFile: number;
>moduleFile : number
>类型别名 :=> 数字

import(getSpecifier());
>import(getSpecifier()) : Promise<any>
>getSpecifier() : string
>类型别名 :=> 文字
>getSpecifier : () => string

var p0 = import(`${directory}\${moduleFile}`);
>p0 : Promise<any>
>import(`${directory}\${moduleFile}`) : Promise<any>
>`${directory}\${moduleFile}` : string
>类型别名 :=> 文字
>directory : string
>类型别名 :=> 文字

var p1 = import(getSpecifier());
>p1 : Promise<any>
>import(getSpecifier()) : Promise<any>
>getSpecifier() : string
>类型别名 :=> 文字
>getSpecifier : () => string

const p2 = import(whatToLoad ? getSpecifier() : "defaulPath")
>p2 : Promise<any>
>import(whatToLoad ? getSpecifier() : "defaulPath") : Promise<any>
>whatToLoad ? getSpecifier() : "defaulPath" : string
>类型别名 :=> 文字
>whatToLoad : boolean
>类型别名 :=> 真假
>getSpecifier() : string
>类型别名 :=> 文字
>getSpecifier : () => string
>"defaulPath" : "defaulPath"

function returnDynamicLoad(path: string) {
>returnDynamicLoad : (path: string) => Promise<any>
>path : string
>类型别名 :=> 文字

    return import(path);
>import(path) : Promise<any>
>path : string
>类型别名 :=> 文字
}
