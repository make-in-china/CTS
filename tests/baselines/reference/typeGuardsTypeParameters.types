=== tests/cases/conformance/controlFlow/typeGuardsTypeParameters.ts ===
// Type guards involving type parameters produce intersection types

class C {
>C : C

    prop: string;
>prop : string
>类型别名 :=> 文字
}

function f1<T>(x: T) {
>f1 : <T>(x: T) => void
>T : T
>x : T
>T : T

    if (x instanceof C) {
>x instanceof C : boolean
>类型别名 :=> 真假
>x : T
>C : typeof C

        let v1: T = x;
>v1 : T
>T : T
>x : T & C

        let v2: C = x;
>v2 : C
>C : C
>x : T & C

        x.prop;
>x.prop : string
>类型别名 :=> 文字
>x : T & C
>prop : string
>类型别名 :=> 文字
    }
}

function f2<T>(x: T) {
>f2 : <T>(x: T) => void
>T : T
>x : T
>T : T

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : T
>"string" : "string"

        let v1: T = x;
>v1 : T
>T : T
>x : T & string

        let v2: string = x;
>v2 : string
>类型别名 :=> 文字
>x : T & string

        x.length;
>x.length : number
>类型别名 :=> 数字
>x : T & string
>length : number
>类型别名 :=> 数字
    }
}

// Repro from #13872

function fun<T>(item: { [P in keyof T]: T[P] }) {
>fun : <T>(item: { [P in keyof T]: T[P]; }) => void
>T : T
>item : { [P in keyof T]: T[P]; }
>P : P
>T : T
>T : T
>P : P

    const strings: string[] = [];
>strings : string[]
>[] : never[]

    for (const key in item) {
>key : keyof T
>item : { [P in keyof T]: T[P]; }

        const value = item[key];
>value : { [P in keyof T]: T[P]; }[keyof T]
>item[key] : { [P in keyof T]: T[P]; }[keyof T]
>item : { [P in keyof T]: T[P]; }
>key : keyof T

        if (typeof value === "string") {
>typeof value === "string" : boolean
>类型别名 :=> 真假
>typeof value : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>value : { [P in keyof T]: T[P]; }[keyof T]
>"string" : "string"

            strings.push(value);
>strings.push(value) : number
>类型别名 :=> 数字
>strings.push : (...items: string[]) => number
>strings : string[]
>push : (...items: string[]) => number
>value : { [P in keyof T]: T[P]; }[keyof T] & string
        }
    }
}

