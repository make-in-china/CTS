=== tests/cases/compiler/primaryExpressionMods.ts ===
module M
>M : 类为 M
{
    export interface P { x: number; y: number; }
>P : P
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    export var a = 1;
>a : 数字
>类型别名 :=> 数字
>1 : 1
}
var p: M.P;             // Used as ModuleName
>p : M.P
>M : 任意
>类型别名 :=> 任意
>P : M.P

var m: M = M;           // Used as TypeName and PrimaryExpression (error on TypeName)
>m : 任意
>类型别名 :=> 任意
>M : No type information available!
>M : 类为 M

var m2: typeof M = M;   // Used as PrimaryExpression in TypeQuery
>m2 : 类为 M
>M : 类为 M
>M : 类为 M

var x1 = M.a;           // Used as PrimaryExpression
>x1 : 数字
>类型别名 :=> 数字
>M.a : 数字
>类型别名 :=> 数字
>M : 类为 M
>a : 数字
>类型别名 :=> 数字

var x2 = m.a;           // Same as M.a
>x2 : 任意
>类型别名 :=> 任意
>m.a : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

var q: m.P;             // Error
>q : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意
>P : No type information available!

