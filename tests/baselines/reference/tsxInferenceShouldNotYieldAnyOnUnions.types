=== tests/cases/compiler/index.tsx ===
namespace JSX {
>JSX : 任意
>类型别名 :=> 任意

    export interface Element {}
>Element : Element
}

type Props<T> = PropsBase<string> | PropsWithConvert<T>;
>Props : Props<T>
>T : T
>PropsBase : PropsBase<T>
>PropsWithConvert : PropsWithConvert<T>
>T : T

interface PropsBase<T> {
>PropsBase : PropsBase<T>
>T : T

    data: T;
>data : T
>T : T
}

interface PropsWithConvert<T> extends PropsBase<T> {
>PropsWithConvert : PropsWithConvert<T>
>T : T
>PropsBase : PropsBase<T>
>T : T

    convert: (t: T) => string;
>convert : (t: T) => 文字
>t : T
>T : T
}

function ShouldInferFromData<T>(props: Props<T>): JSX.Element {
>ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
>T : T
>props : Props<T>
>Props : Props<T>
>T : T
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

    return <div />;
><div /> : JSX.Element
>div : 任意
>类型别名 :=> 任意
}

// Sanity check: function call equivalent versions work fine
ShouldInferFromData({ data: "1" });
>ShouldInferFromData({ data: "1" }) : JSX.Element
>ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
>{ data: "1" } : { data: 文字; }
>data : 文字
>类型别名 :=> 文字
>"1" : "1"

ShouldInferFromData({ data: "1", convert: n => "" + n });
>ShouldInferFromData({ data: "1", convert: n => "" + n }) : JSX.Element
>ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
>{ data: "1", convert: n => "" + n } : { data: 文字; convert: (n: 文字) => 文字; }
>data : 文字
>类型别名 :=> 文字
>"1" : "1"
>convert : (n: 文字) => 文字
>n => "" + n : (n: 文字) => 文字
>n : 文字
>类型别名 :=> 文字
>"" + n : 文字
>类型别名 :=> 文字
>"" : ""
>n : 文字
>类型别名 :=> 文字

ShouldInferFromData({ data: 2, convert: n => "" + n });
>ShouldInferFromData({ data: 2, convert: n => "" + n }) : JSX.Element
>ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
>{ data: 2, convert: n => "" + n } : { data: 数字; convert: (n: 数字) => 文字; }
>data : 数字
>类型别名 :=> 数字
>2 : 2
>convert : (n: 数字) => 文字
>n => "" + n : (n: 数字) => 文字
>n : 数字
>类型别名 :=> 数字
>"" + n : 文字
>类型别名 :=> 文字
>"" : ""
>n : 数字
>类型别名 :=> 数字


const f1 = <ShouldInferFromData data={"1"} />;
>f1 : JSX.Element
><ShouldInferFromData data={"1"} /> : JSX.Element
>ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
>data : 文字
>类型别名 :=> 文字
>"1" : "1"

const f2 = <ShouldInferFromData data={"1"} convert={n => "" + n} />;
>f2 : JSX.Element
><ShouldInferFromData data={"1"} convert={n => "" + n} /> : JSX.Element
>ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
>data : 文字
>类型别名 :=> 文字
>"1" : "1"
>convert : (n: "1") => 文字
>n => "" + n : (n: "1") => 文字
>n : "1"
>"" + n : 文字
>类型别名 :=> 文字
>"" : ""
>n : "1"

const f3 = <ShouldInferFromData data={2} convert={n => "" + n} />;
>f3 : JSX.Element
><ShouldInferFromData data={2} convert={n => "" + n} /> : JSX.Element
>ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
>data : 数字
>类型别名 :=> 数字
>2 : 2
>convert : (n: 2) => 文字
>n => "" + n : (n: 2) => 文字
>n : 2
>"" + n : 文字
>类型别名 :=> 文字
>"" : ""
>n : 2

