=== tests/cases/compiler/typeArgInferenceWithNull.ts ===
// All legal

function fn4<T extends string>(n: T) { }
>fn4 : <T 扩展 文字>(n: T) => 无值
>T : T
>n : T
>T : T

fn4(null);
>fn4(null) : 无值
>类型别名 :=> 无值
>fn4 : <T 扩展 文字>(n: T) => 无值
>null : 空值
>类型别名 :=> 空值

function fn5<T extends { x: string }>(n: T) { }
>fn5 : <T 扩展 { x: 文字; }>(n: T) => 无值
>T : T
>x : 文字
>类型别名 :=> 文字
>n : T
>T : T

fn5({ x: null });
>fn5({ x: null }) : 无值
>类型别名 :=> 无值
>fn5 : <T 扩展 { x: 文字; }>(n: T) => 无值
>{ x: null } : { x: 空值; }
>x : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

function fn6<T extends { x: string }>(n: T, fun: (x: T) => void, n2: T) { }
>fn6 : <T 扩展 { x: 文字; }>(n: T, fun: (x: T) => 无值, n2: T) => 无值
>T : T
>x : 文字
>类型别名 :=> 文字
>n : T
>T : T
>fun : (x: T) => 无值
>x : T
>T : T
>n2 : T
>T : T

fn6({ x: null }, y => { }, { x: "" }); // y has type { x: any }, but ideally would have type { x: string }
>fn6({ x: null }, y => { }, { x: "" }) : 无值
>类型别名 :=> 无值
>fn6 : <T 扩展 { x: 文字; }>(n: T, fun: (x: T) => 无值, n2: T) => 无值
>{ x: null } : { x: 空值; }
>x : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
>y => { } : (y: { x: 文字; }) => 无值
>y : { x: 文字; }
>{ x: "" } : { x: 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""

