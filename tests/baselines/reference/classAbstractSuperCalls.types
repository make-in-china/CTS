=== tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractSuperCalls.ts ===
class A {
>A : A

    foo() { return 1; }
>foo : () => 数字
>1 : 1
}

abstract class B extends A {
>B : B
>A : A

    abstract foo();
>foo : () => 任意

    bar() { super.foo(); }
>bar : () => 无值
>super.foo() : 数字
>类型别名 :=> 数字
>super.foo : () => 数字
>super : A
>foo : () => 数字

    baz() { return this.foo; }
>baz : () => () => 任意
>this.foo : () => 任意
>this : 本体
>foo : () => 任意
}

class C extends B {
>C : C
>B : B

    foo() { return 2; }
>foo : () => 数字
>2 : 2

    qux() { return super.foo() || super.foo; } // 2 errors, foo is abstract
>qux : () => 任意
>super.foo() || super.foo : 任意
>类型别名 :=> 任意
>super.foo() : 任意
>类型别名 :=> 任意
>super.foo : () => 任意
>super : B
>foo : () => 任意
>super.foo : () => 任意
>super : B
>foo : () => 任意

    norf() { return super.bar(); }
>norf : () => 无值
>super.bar() : 无值
>类型别名 :=> 无值
>super.bar : () => 无值
>super : B
>bar : () => 无值
}

class AA {
>AA : AA

    foo() { return 1; }
>foo : () => 数字
>1 : 1

    bar() { return this.foo(); }
>bar : () => 数字
>this.foo() : 数字
>类型别名 :=> 数字
>this.foo : () => 数字
>this : 本体
>foo : () => 数字
}

abstract class BB extends AA {
>BB : BB
>AA : AA

    abstract foo();
>foo : () => 任意

    // inherits bar. But BB is abstract, so this is OK.
}

