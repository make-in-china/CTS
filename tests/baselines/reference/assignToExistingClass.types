=== tests/cases/compiler/assignToExistingClass.ts ===
module Test {
>Test : typeof Test

    class Mocked {
>Mocked : Mocked

        myProp: string;
>myProp : string
>类型别名 :=> 文字
    }

    class Tester {
>Tester : Tester

        willThrowError() {
>willThrowError : () => void

            Mocked = Mocked || function () { // => Error: Invalid left-hand side of assignment expression.
>Mocked = Mocked || function () { // => Error: Invalid left-hand side of assignment expression.                return { myProp: "test" };            } : typeof Mocked | (() => { myProp: string; })
>Mocked : any
>类型别名 :=> 任意
>Mocked || function () { // => Error: Invalid left-hand side of assignment expression.                return { myProp: "test" };            } : typeof Mocked | (() => { myProp: string; })
>Mocked : typeof Mocked
>function () { // => Error: Invalid left-hand side of assignment expression.                return { myProp: "test" };            } : () => { myProp: string; }

                return { myProp: "test" };
>{ myProp: "test" } : { myProp: string; }
>myProp : string
>类型别名 :=> 文字
>"test" : "test"

            };
        }
    }
 
}

