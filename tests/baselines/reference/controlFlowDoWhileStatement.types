=== tests/cases/conformance/controlFlow/controlFlowDoWhileStatement.ts ===
let cond: boolean;
>cond : 真假
>类型别名 :=> 真假

function a() {
>a : () => 无值

    let x: string | number;
>x : 文字 | 数字

    x = "";
>x = "" : ""
>x : 文字 | 数字
>"" : ""

    do {
        x; // string
>x : 文字
>类型别名 :=> 文字

    } while (cond)
>cond : 真假
>类型别名 :=> 真假
}
function b() {
>b : () => 无值

    let x: string | number;
>x : 文字 | 数字

    x = "";
>x = "" : ""
>x : 文字 | 数字
>"" : ""

    do {
        x; // string
>x : 文字
>类型别名 :=> 文字

        x = 42;
>x = 42 : 42
>x : 文字 | 数字
>42 : 42

        break;
    } while (cond)
>cond : 真假
>类型别名 :=> 真假
}
function c() {
>c : () => 无值

    let x: string | number;
>x : 文字 | 数字

    x = "";
>x = "" : ""
>x : 文字 | 数字
>"" : ""

    do {
        x; // string
>x : 文字
>类型别名 :=> 文字

        x = undefined;
>x = undefined : 未定
>类型别名 :=> 未定
>x : 文字 | 数字
>undefined : 未定
>类型别名 :=> 未定

        if (typeof x === "string") continue;
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        break;
    } while (cond)
>cond : 真假
>类型别名 :=> 真假
}
function d() {
>d : () => 无值

    let x: string | number;
>x : 文字 | 数字

    x = 1000;
>x = 1000 : 1000
>x : 文字 | 数字
>1000 : 1000

    do {
        x; // number
>x : 数字
>类型别名 :=> 数字

        x = "";
>x = "" : ""
>x : 文字 | 数字
>"" : ""

    } while (x = x.length)
>x = x.length : 数字
>类型别名 :=> 数字
>x : 文字 | 数字
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

    x; // number
>x : 数字
>类型别名 :=> 数字
}
function e() {
>e : () => 无值

    let x: string | number;
>x : 文字 | 数字

    x = "";
>x = "" : ""
>x : 文字 | 数字
>"" : ""

    do {
        x = 42;
>x = 42 : 42
>x : 文字 | 数字
>42 : 42

    } while (cond)
>cond : 真假
>类型别名 :=> 真假

    x; // number
>x : 数字
>类型别名 :=> 数字
}
function f() {
>f : () => 无值

    let x: string | number | boolean | RegExp | Function;
>x : 文字 | 数字 | 真假 | Function | RegExp
>RegExp : RegExp
>Function : Function

    x = "";
>x = "" : ""
>x : 文字 | 数字 | 真假 | Function | RegExp
>"" : ""

    do {
        if (cond) {
>cond : 真假
>类型别名 :=> 真假

            x = 42;
>x = 42 : 42
>x : 文字 | 数字 | 真假 | Function | RegExp
>42 : 42

            break;
        }
        if (cond) {
>cond : 真假
>类型别名 :=> 真假

            x = true;
>x = true : 为真
>类型别名 :=> 为真
>x : 文字 | 数字 | 真假 | Function | RegExp
>true : 为真
>类型别名 :=> 为真

            continue;
        }
        x = /a/;
>x = /a/ : RegExp
>x : 文字 | 数字 | 真假 | Function | RegExp
>/a/ : RegExp

    } while (cond)
>cond : 真假
>类型别名 :=> 真假

    x; // number | boolean | RegExp
>x : 数字 | 为真 | RegExp
}
function g() {
>g : () => 无值

    let x: string | number | boolean | RegExp | Function;
>x : 文字 | 数字 | 真假 | Function | RegExp
>RegExp : RegExp
>Function : Function

    x = "";
>x = "" : ""
>x : 文字 | 数字 | 真假 | Function | RegExp
>"" : ""

    do {
        if (cond) {
>cond : 真假
>类型别名 :=> 真假

            x = 42;
>x = 42 : 42
>x : 文字 | 数字 | 真假 | Function | RegExp
>42 : 42

            break;
        }
        if (cond) {
>cond : 真假
>类型别名 :=> 真假

            x = true;
>x = true : 为真
>类型别名 :=> 为真
>x : 文字 | 数字 | 真假 | Function | RegExp
>true : 为真
>类型别名 :=> 为真

            continue;
        }
        x = /a/;
>x = /a/ : RegExp
>x : 文字 | 数字 | 真假 | Function | RegExp
>/a/ : RegExp

    } while (true)
>true : 为真
>类型别名 :=> 为真

    x; // number
>x : 数字
>类型别名 :=> 数字
}

