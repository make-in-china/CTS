=== tests/cases/compiler/tupleTypes.ts ===
var v1: [];  // Error
>v1 : []

var v2: [number];
>v2 : [数字]

var v3: [number, string];
>v3 : [数字, 文字]

var v4: [number, [string, string]];
>v4 : [数字, [文字, 文字]]

var t: [number, string];
>t : [数字, 文字]

var t0 = t[0];   // number
>t0 : 数字
>类型别名 :=> 数字
>t[0] : 数字
>类型别名 :=> 数字
>t : [数字, 文字]
>0 : 0

var t0: number;
>t0 : 数字
>类型别名 :=> 数字

var t1 = t[1];   // string
>t1 : 文字
>类型别名 :=> 文字
>t[1] : 文字
>类型别名 :=> 文字
>t : [数字, 文字]
>1 : 1

var t1: string;
>t1 : 文字
>类型别名 :=> 文字

var t2 = t[2];   // number|string
>t2 : 文字 | 数字
>t[2] : 文字 | 数字
>t : [数字, 文字]
>2 : 2

var t2: number|string;
>t2 : 文字 | 数字

t = [];               // Error
>t = [] : 未定[]
>t : [数字, 文字]
>[] : 未定[]

t = [1];              // Error
>t = [1] : [数字]
>t : [数字, 文字]
>[1] : [数字]
>1 : 1

t = [1, "hello"];     // Ok
>t = [1, "hello"] : [数字, 文字]
>t : [数字, 文字]
>[1, "hello"] : [数字, 文字]
>1 : 1
>"hello" : "hello"

t = ["hello", 1];     // Error
>t = ["hello", 1] : [文字, 数字]
>t : [数字, 文字]
>["hello", 1] : [文字, 数字]
>"hello" : "hello"
>1 : 1

t = [1, "hello", 2];  // Ok
>t = [1, "hello", 2] : [数字, 文字, 数字]
>t : [数字, 文字]
>[1, "hello", 2] : [数字, 文字, 数字]
>1 : 1
>"hello" : "hello"
>2 : 2

var tf: [string, (x: string) => number] = ["hello", x => x.length];
>tf : [文字, (x: 文字) => 数字]
>x : 文字
>类型别名 :=> 文字
>["hello", x => x.length] : [文字, (x: 文字) => 数字]
>"hello" : "hello"
>x => x.length : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

declare function ff<T, U>(a: T, b: [T, (x: T) => U]): U;
>ff : <T, U>(a: T, b: [T, (x: T) => U]) => U
>T : T
>U : U
>a : T
>T : T
>b : [T, (x: T) => U]
>T : T
>x : T
>T : T
>U : U
>U : U

var ff1 = ff("hello", ["foo", x => x.length]);
>ff1 : 数字
>类型别名 :=> 数字
>ff("hello", ["foo", x => x.length]) : 数字
>类型别名 :=> 数字
>ff : <T, U>(a: T, b: [T, (x: T) => U]) => U
>"hello" : "hello"
>["foo", x => x.length] : [文字, (x: 文字) => 数字]
>"foo" : "foo"
>x => x.length : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

var ff1: number;
>ff1 : 数字
>类型别名 :=> 数字

function tuple2<T0, T1>(item0: T0, item1: T1): [T0, T1]{
>tuple2 : <T0, T1>(item0: T0, item1: T1) => [T0, T1]
>T0 : T0
>T1 : T1
>item0 : T0
>T0 : T0
>item1 : T1
>T1 : T1
>T0 : T0
>T1 : T1

    return [item0, item1];
>[item0, item1] : [T0, T1]
>item0 : T0
>item1 : T1
}

var tt = tuple2(1, "string");
>tt : [数字, 文字]
>tuple2(1, "string") : [数字, 文字]
>tuple2 : <T0, T1>(item0: T0, item1: T1) => [T0, T1]
>1 : 1
>"string" : "string"

var tt0 = tt[0];
>tt0 : 数字
>类型别名 :=> 数字
>tt[0] : 数字
>类型别名 :=> 数字
>tt : [数字, 文字]
>0 : 0

var tt0: number;
>tt0 : 数字
>类型别名 :=> 数字

var tt1 = tt[1];
>tt1 : 文字
>类型别名 :=> 文字
>tt[1] : 文字
>类型别名 :=> 文字
>tt : [数字, 文字]
>1 : 1

var tt1: string;
>tt1 : 文字
>类型别名 :=> 文字

var tt2 = tt[2]; 
>tt2 : 文字 | 数字
>tt[2] : 文字 | 数字
>tt : [数字, 文字]
>2 : 2

var tt2: number | string;
>tt2 : 文字 | 数字

tt = tuple2(1, undefined);
>tt = tuple2(1, undefined) : [数字, 任意]
>tt : [数字, 文字]
>tuple2(1, undefined) : [数字, 任意]
>tuple2 : <T0, T1>(item0: T0, item1: T1) => [T0, T1]
>1 : 1
>undefined : 未定
>类型别名 :=> 未定

tt = [1, undefined];
>tt = [1, undefined] : [数字, 未定]
>tt : [数字, 文字]
>[1, undefined] : [数字, 未定]
>1 : 1
>undefined : 未定
>类型别名 :=> 未定

tt = [undefined, undefined];
>tt = [undefined, undefined] : [未定, 未定]
>tt : [数字, 文字]
>[undefined, undefined] : [未定, 未定]
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

tt = [];  // Error
>tt = [] : 未定[]
>tt : [数字, 文字]
>[] : 未定[]

var a: number[];
>a : 数字[]

var a1: [number, string];
>a1 : [数字, 文字]

var a2: [number, number];
>a2 : [数字, 数字]

var a3: [number, {}];
>a3 : [数字, {}]

a = a1;   // Error
>a = a1 : [数字, 文字]
>a : 数字[]
>a1 : [数字, 文字]

a = a2;
>a = a2 : [数字, 数字]
>a : 数字[]
>a2 : [数字, 数字]

a = a3;   // Error
>a = a3 : [数字, {}]
>a : 数字[]
>a3 : [数字, {}]

a1 = a2;  // Error
>a1 = a2 : [数字, 数字]
>a1 : [数字, 文字]
>a2 : [数字, 数字]

a1 = a3;  // Error
>a1 = a3 : [数字, {}]
>a1 : [数字, 文字]
>a3 : [数字, {}]

a3 = a1;
>a3 = a1 : [数字, 文字]
>a3 : [数字, {}]
>a1 : [数字, 文字]

a3 = a2;
>a3 = a2 : [数字, 数字]
>a3 : [数字, {}]
>a2 : [数字, 数字]

