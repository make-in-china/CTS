=== tests/cases/compiler/specializationsShouldNotAffectEachOther.ts ===
interface Series  {
>Series : Series

    data: string[];
>data : 文字[]
}

var series: Series;
>series : Series
>Series : Series


function foo() {
>foo : () => 任意

    var seriesExtent = (series) => null;
>seriesExtent : (series: 任意) => 任意
>(series) => null : (series: 任意) => 任意
>series : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

    var series2: number[];
>series2 : 数字[]

    series2.map(seriesExtent);
>series2.map(seriesExtent) : 任意[]
>series2.map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>series2 : 数字[]
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>seriesExtent : (series: 任意) => 任意

    return null;
>null : 空值
>类型别名 :=> 空值
}


var keyExtent2: any[] = series.data.map(function (d: string) { return d; });
>keyExtent2 : 任意[]
>series.data.map(function (d: string) { return d; }) : 文字[]
>series.data.map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>series.data : 文字[]
>series : Series
>data : 文字[]
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>function (d: string) { return d; } : (d: 文字) => 文字
>d : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字

