=== tests/cases/conformance/externalModules/foo1.ts ===
var x = 10;
>x : 数字
>类型别名 :=> 数字
>10 : 10

export = typeof x; // Ok
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字
>类型别名 :=> 数字

=== tests/cases/conformance/externalModules/foo2.ts ===
export = "sausages"; // Ok
No type information for this code.
No type information for this code.=== tests/cases/conformance/externalModules/foo3.ts ===
export = class Foo3 {}; // Error, not an expression
>class Foo3 {} : 类为 Foo3
>Foo3 : 类为 Foo3

=== tests/cases/conformance/externalModules/foo4.ts ===
export = true; // Ok
>true : 为真
>类型别名 :=> 为真

=== tests/cases/conformance/externalModules/foo5.ts ===
export = undefined; // Valid.  undefined is an identifier in JavaScript/TypeScript
>undefined : 未定
>类型别名 :=> 未定

=== tests/cases/conformance/externalModules/foo6.ts ===
export = void; // Error, void operator requires an argument
>void : 未定
>类型别名 :=> 未定
> : 任意
>类型别名 :=> 任意

=== tests/cases/conformance/externalModules/foo7.ts ===
export = Date || String; // Ok
>Date || String : DateConstructor | StringConstructor
>Date : DateConstructor
>String : StringConstructor

=== tests/cases/conformance/externalModules/foo8.ts ===
export = null; // Ok
>null : 空值
>类型别名 :=> 空值


