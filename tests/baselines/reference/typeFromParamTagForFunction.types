=== tests/cases/conformance/salsa/node.d.ts ===
declare function require(id: string): any;
>require : (id: 文字) => 任意
>id : 文字
>类型别名 :=> 文字

declare var module: any, exports: any;
>module : 任意
>类型别名 :=> 任意
>exports : 任意
>类型别名 :=> 任意

=== tests/cases/conformance/salsa/a-ext.js ===
exports.A = function () {
>exports.A = function () {    this.x = 1;} : () => 无值
>exports.A : () => 无值
>exports : 类为 "tests/cases/conformance/salsa/a-ext"
>A : () => 无值
>function () {    this.x = 1;} : () => 无值

    this.x = 1;
>this.x = 1 : 1
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>1 : 1

};

=== tests/cases/conformance/salsa/a.js ===
const { A } = require("./a-ext");
>A : () => 无值
>require("./a-ext") : 类为 "tests/cases/conformance/salsa/a-ext"
>require : (id: 文字) => 任意
>"./a-ext" : "./a-ext"

/** @param {A} p */
function a(p) { p.x; }
>a : (p: { x: 数字; }) => 无值
>p : { x: 数字; }
>p.x : 数字
>类型别名 :=> 数字
>p : { x: 数字; }
>x : 数字
>类型别名 :=> 数字

=== tests/cases/conformance/salsa/b-ext.js ===
exports.B = class {
>exports.B = class {    constructor() {        this.x = 1;    }} : 类为 (Anonymous class)
>exports.B : 类为 (Anonymous class)
>exports : 类为 "tests/cases/conformance/salsa/b-ext"
>B : 类为 (Anonymous class)
>class {    constructor() {        this.x = 1;    }} : 类为 (Anonymous class)

    constructor() {
        this.x = 1;
>this.x = 1 : 1
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>1 : 1
    }
};

=== tests/cases/conformance/salsa/b.js ===
const { B } = require("./b-ext");
>B : 类为 (Anonymous class)
>require("./b-ext") : 类为 "tests/cases/conformance/salsa/b-ext"
>require : (id: 文字) => 任意
>"./b-ext" : "./b-ext"

/** @param {B} p */
function b(p) { p.x; }
>b : (p: (Anonymous class)) => 无值
>p : (Anonymous class)
>p.x : 数字
>类型别名 :=> 数字
>p : (Anonymous class)
>x : 数字
>类型别名 :=> 数字

=== tests/cases/conformance/salsa/c-ext.js ===
export function C() {
>C : () => 无值

    this.x = 1;
>this.x = 1 : 1
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>1 : 1
}

=== tests/cases/conformance/salsa/c.js ===
const { C } = require("./c-ext");
>C : () => 无值
>require("./c-ext") : 类为 "tests/cases/conformance/salsa/c-ext"
>require : (id: 文字) => 任意
>"./c-ext" : "./c-ext"

/** @param {C} p */
function c(p) { p.x; }
>c : (p: { x: 数字; }) => 无值
>p : { x: 数字; }
>p.x : 数字
>类型别名 :=> 数字
>p : { x: 数字; }
>x : 数字
>类型别名 :=> 数字

=== tests/cases/conformance/salsa/d-ext.js ===
export var D = function() {
>D : () => 无值
>function() {    this.x = 1;} : () => 无值

    this.x = 1;
>this.x = 1 : 1
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>1 : 1

};

=== tests/cases/conformance/salsa/d.js ===
const { D } = require("./d-ext");
>D : () => 无值
>require("./d-ext") : 类为 "tests/cases/conformance/salsa/d-ext"
>require : (id: 文字) => 任意
>"./d-ext" : "./d-ext"

/** @param {D} p */
function d(p) { p.x; }
>d : (p: { x: 数字; }) => 无值
>p : { x: 数字; }
>p.x : 数字
>类型别名 :=> 数字
>p : { x: 数字; }
>x : 数字
>类型别名 :=> 数字

=== tests/cases/conformance/salsa/e-ext.js ===
export class E {
>E : E

    constructor() {
        this.x = 1;
>this.x = 1 : 1
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>1 : 1
    }
}

=== tests/cases/conformance/salsa/e.js ===
const { E } = require("./e-ext");
>E : 类为 E
>require("./e-ext") : 类为 "tests/cases/conformance/salsa/e-ext"
>require : (id: 文字) => 任意
>"./e-ext" : "./e-ext"

/** @param {E} p */
function e(p) { p.x; }
>e : (p: E) => 无值
>p : E
>p.x : 数字
>类型别名 :=> 数字
>p : E
>x : 数字
>类型别名 :=> 数字

=== tests/cases/conformance/salsa/f.js ===
var F = function () {
>F : () => 无值
>function () {    this.x = 1;} : () => 无值

    this.x = 1;
>this.x = 1 : 1
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>1 : 1

};

/** @param {F} p */
function f(p) { p.x; }
>f : (p: { x: 数字; }) => 无值
>p : { x: 数字; }
>p.x : 数字
>类型别名 :=> 数字
>p : { x: 数字; }
>x : 数字
>类型别名 :=> 数字

=== tests/cases/conformance/salsa/g.js ===
function G() {
>G : () => 无值

    this.x = 1;
>this.x = 1 : 1
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>1 : 1
}

/** @param {G} p */
function g(p) { p.x; }
>g : (p: { x: 数字; }) => 无值
>p : { x: 数字; }
>p.x : 数字
>类型别名 :=> 数字
>p : { x: 数字; }
>x : 数字
>类型别名 :=> 数字

=== tests/cases/conformance/salsa/h.js ===
class H {
>H : H

    constructor() {
        this.x = 1;
>this.x = 1 : 1
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>1 : 1
    }
}

/** @param {H} p */
function h(p) { p.x; }
>h : (p: H) => 无值
>p : H
>p.x : 数字
>类型别名 :=> 数字
>p : H
>x : 数字
>类型别名 :=> 数字

