=== tests/cases/conformance/types/literal/enumLiteralTypes2.ts ===
const enum Choice { Unknown, Yes, No };
>Choice : Choice
>Unknown : Choice.Unknown
>Yes : Choice.Yes
>No : Choice.No

type YesNo = Choice.Yes | Choice.No;
>YesNo : YesNo
>Choice : 任意
>类型别名 :=> 任意
>Yes : Choice.Yes
>Choice : 任意
>类型别名 :=> 任意
>No : Choice.No

type NoYes = Choice.No | Choice.Yes;
>NoYes : YesNo
>Choice : 任意
>类型别名 :=> 任意
>No : Choice.No
>Choice : 任意
>类型别名 :=> 任意
>Yes : Choice.Yes

type UnknownYesNo = Choice.Unknown | Choice.Yes | Choice.No;
>UnknownYesNo : Choice
>Choice : 任意
>类型别名 :=> 任意
>Unknown : Choice.Unknown
>Choice : 任意
>类型别名 :=> 任意
>Yes : Choice.Yes
>Choice : 任意
>类型别名 :=> 任意
>No : Choice.No

function f1() {
>f1 : () => 无值

    var a: YesNo;
>a : YesNo
>YesNo : YesNo

    var a: NoYes;
>a : YesNo
>NoYes : YesNo

    var a: Choice.Yes | Choice.No;
>a : YesNo
>Choice : 任意
>类型别名 :=> 任意
>Yes : Choice.Yes
>Choice : 任意
>类型别名 :=> 任意
>No : Choice.No

    var a: Choice.No | Choice.Yes;
>a : YesNo
>Choice : 任意
>类型别名 :=> 任意
>No : Choice.No
>Choice : 任意
>类型别名 :=> 任意
>Yes : Choice.Yes
}

function f2(a: YesNo, b: UnknownYesNo, c: Choice) {
>f2 : (a: YesNo, b: Choice, c: Choice) => 无值
>a : YesNo
>YesNo : YesNo
>b : Choice
>UnknownYesNo : Choice
>c : Choice
>Choice : Choice

    b = a;
>b = a : YesNo
>b : Choice
>a : YesNo

    c = a;
>c = a : YesNo
>c : Choice
>a : YesNo

    c = b;
>c = b : YesNo
>c : Choice
>b : YesNo
}

function f3(a: Choice.Yes, b: UnknownYesNo) {
>f3 : (a: Choice.Yes, b: Choice) => 无值
>a : Choice.Yes
>Choice : 任意
>类型别名 :=> 任意
>Yes : Choice.Yes
>b : Choice
>UnknownYesNo : Choice

    var x = a + b;
>x : 数字
>类型别名 :=> 数字
>a + b : 数字
>类型别名 :=> 数字
>a : Choice.Yes
>b : Choice

    var x = a - b;
>x : 数字
>类型别名 :=> 数字
>a - b : 数字
>类型别名 :=> 数字
>a : Choice.Yes
>b : Choice

    var x = a * b;
>x : 数字
>类型别名 :=> 数字
>a * b : 数字
>类型别名 :=> 数字
>a : Choice.Yes
>b : Choice

    var x = a / b;
>x : 数字
>类型别名 :=> 数字
>a / b : 数字
>类型别名 :=> 数字
>a : Choice.Yes
>b : Choice

    var x = a % b;
>x : 数字
>类型别名 :=> 数字
>a % b : 数字
>类型别名 :=> 数字
>a : Choice.Yes
>b : Choice

    var x = a | b;
>x : 数字
>类型别名 :=> 数字
>a | b : 数字
>类型别名 :=> 数字
>a : Choice.Yes
>b : Choice

    var x = a & b;
>x : 数字
>类型别名 :=> 数字
>a & b : 数字
>类型别名 :=> 数字
>a : Choice.Yes
>b : Choice

    var x = a ^ b;
>x : 数字
>类型别名 :=> 数字
>a ^ b : 数字
>类型别名 :=> 数字
>a : Choice.Yes
>b : Choice

    var x = -b;
>x : 数字
>类型别名 :=> 数字
>-b : 数字
>类型别名 :=> 数字
>b : Choice

    var x = ~b;
>x : 数字
>类型别名 :=> 数字
>~b : 数字
>类型别名 :=> 数字
>b : Choice

    var y = a == b;
>y : 真假
>类型别名 :=> 真假
>a == b : 真假
>类型别名 :=> 真假
>a : Choice.Yes
>b : Choice

    var y = a != b;
>y : 真假
>类型别名 :=> 真假
>a != b : 真假
>类型别名 :=> 真假
>a : Choice.Yes
>b : Choice

    var y = a === b;
>y : 真假
>类型别名 :=> 真假
>a === b : 真假
>类型别名 :=> 真假
>a : Choice.Yes
>b : Choice

    var y = a !== b;
>y : 真假
>类型别名 :=> 真假
>a !== b : 真假
>类型别名 :=> 真假
>a : Choice.Yes
>b : Choice

    var y = a > b;
>y : 真假
>类型别名 :=> 真假
>a > b : 真假
>类型别名 :=> 真假
>a : Choice.Yes
>b : Choice

    var y = a < b;
>y : 真假
>类型别名 :=> 真假
>a < b : 真假
>类型别名 :=> 真假
>a : Choice.Yes
>b : Choice

    var y = a >= b;
>y : 真假
>类型别名 :=> 真假
>a >= b : 真假
>类型别名 :=> 真假
>a : Choice.Yes
>b : Choice

    var y = a <= b;
>y : 真假
>类型别名 :=> 真假
>a <= b : 真假
>类型别名 :=> 真假
>a : Choice.Yes
>b : Choice

    var y = !b;
>y : 真假
>类型别名 :=> 真假
>!b : 真假
>类型别名 :=> 真假
>b : Choice
}

function f4(a: Choice.Yes, b: UnknownYesNo) {
>f4 : (a: Choice.Yes, b: Choice) => 无值
>a : Choice.Yes
>Choice : 任意
>类型别名 :=> 任意
>Yes : Choice.Yes
>b : Choice
>UnknownYesNo : Choice

    a++;
>a++ : 数字
>类型别名 :=> 数字
>a : Choice

    b++;
>b++ : 数字
>类型别名 :=> 数字
>b : Choice
}

declare function g(x: Choice.Yes): string;
>g : { (x: Choice.Yes): 文字; (x: Choice.No): 真假; (x: Choice): 数字; }
>x : Choice.Yes
>Choice : 任意
>类型别名 :=> 任意
>Yes : Choice.Yes

declare function g(x: Choice.No): boolean;
>g : { (x: Choice.Yes): 文字; (x: Choice.No): 真假; (x: Choice): 数字; }
>x : Choice.No
>Choice : 任意
>类型别名 :=> 任意
>No : Choice.No

declare function g(x: Choice): number;
>g : { (x: Choice.Yes): 文字; (x: Choice.No): 真假; (x: Choice): 数字; }
>x : Choice
>Choice : Choice

function f5(a: YesNo, b: UnknownYesNo, c: Choice) {
>f5 : (a: YesNo, b: Choice, c: Choice) => 无值
>a : YesNo
>YesNo : YesNo
>b : Choice
>UnknownYesNo : Choice
>c : Choice
>Choice : Choice

    var z1 = g(Choice.Yes);
>z1 : 文字
>类型别名 :=> 文字
>g(Choice.Yes) : 文字
>类型别名 :=> 文字
>g : { (x: Choice.Yes): 文字; (x: Choice.No): 真假; (x: Choice): 数字; }
>Choice.Yes : Choice.Yes
>Choice : 类为 Choice
>Yes : Choice.Yes

    var z2 = g(Choice.No);
>z2 : 真假
>类型别名 :=> 真假
>g(Choice.No) : 真假
>类型别名 :=> 真假
>g : { (x: Choice.Yes): 文字; (x: Choice.No): 真假; (x: Choice): 数字; }
>Choice.No : Choice.No
>Choice : 类为 Choice
>No : Choice.No

    var z3 = g(a);
>z3 : 数字
>类型别名 :=> 数字
>g(a) : 数字
>类型别名 :=> 数字
>g : { (x: Choice.Yes): 文字; (x: Choice.No): 真假; (x: Choice): 数字; }
>a : YesNo

    var z4 = g(b);
>z4 : 数字
>类型别名 :=> 数字
>g(b) : 数字
>类型别名 :=> 数字
>g : { (x: Choice.Yes): 文字; (x: Choice.No): 真假; (x: Choice): 数字; }
>b : Choice

    var z5 = g(c);
>z5 : 数字
>类型别名 :=> 数字
>g(c) : 数字
>类型别名 :=> 数字
>g : { (x: Choice.Yes): 文字; (x: Choice.No): 真假; (x: Choice): 数字; }
>c : Choice
}

function assertNever(x: never): never {
>assertNever : (x: 不及) => 不及
>x : 不及
>类型别名 :=> 不及

    throw new Error("Unexpected value");
>new Error("Unexpected value") : Error
>Error : ErrorConstructor
>"Unexpected value" : "Unexpected value"
}

function f10(x: YesNo) {
>f10 : (x: YesNo) => "true" | "false"
>x : YesNo
>YesNo : YesNo

    switch (x) {
>x : YesNo

        case Choice.Yes: return "true";
>Choice.Yes : Choice.Yes
>Choice : 类为 Choice
>Yes : Choice.Yes
>"true" : "true"

        case Choice.No: return "false";
>Choice.No : Choice.No
>Choice : 类为 Choice
>No : Choice.No
>"false" : "false"
    }
}

function f11(x: YesNo) {
>f11 : (x: YesNo) => "true" | "false"
>x : YesNo
>YesNo : YesNo

    switch (x) {
>x : YesNo

        case Choice.Yes: return "true";
>Choice.Yes : Choice.Yes
>Choice : 类为 Choice
>Yes : Choice.Yes
>"true" : "true"

        case Choice.No: return "false";
>Choice.No : Choice.No
>Choice : 类为 Choice
>No : Choice.No
>"false" : "false"
    }
    return assertNever(x);
>assertNever(x) : 不及
>类型别名 :=> 不及
>assertNever : (x: 不及) => 不及
>x : 不及
>类型别名 :=> 不及
}

function f12(x: UnknownYesNo) {
>f12 : (x: Choice) => 无值
>x : Choice
>UnknownYesNo : Choice

    if (x) {
>x : Choice

        x;
>x : YesNo
    }
    else {
        x;
>x : Choice.Unknown
    }
}

function f13(x: UnknownYesNo) {
>f13 : (x: Choice) => 无值
>x : Choice
>UnknownYesNo : Choice

    if (x === Choice.Yes) {
>x === Choice.Yes : 真假
>类型别名 :=> 真假
>x : Choice
>Choice.Yes : Choice.Yes
>Choice : 类为 Choice
>Yes : Choice.Yes

        x;
>x : Choice.Yes
    }
    else {
        x;
>x : Choice.Unknown | Choice.No
    }
}

type Item =
>Item : Item

    { kind: Choice.Yes, a: string } |
>kind : Choice.Yes
>Choice : 任意
>类型别名 :=> 任意
>Yes : Choice.Yes
>a : 文字
>类型别名 :=> 文字

    { kind: Choice.No, b: string };
>kind : Choice.No
>Choice : 任意
>类型别名 :=> 任意
>No : Choice.No
>b : 文字
>类型别名 :=> 文字

function f20(x: Item) {
>f20 : (x: Item) => 文字
>x : Item
>Item : Item

    switch (x.kind) {
>x.kind : YesNo
>x : Item
>kind : YesNo

        case Choice.Yes: return x.a;
>Choice.Yes : Choice.Yes
>Choice : 类为 Choice
>Yes : Choice.Yes
>x.a : 文字
>类型别名 :=> 文字
>x : { kind: Choice.Yes; a: 文字; }
>a : 文字
>类型别名 :=> 文字

        case Choice.No: return x.b;
>Choice.No : Choice.No
>Choice : 类为 Choice
>No : Choice.No
>x.b : 文字
>类型别名 :=> 文字
>x : { kind: Choice.No; b: 文字; }
>b : 文字
>类型别名 :=> 文字
    }
}

function f21(x: Item) {
>f21 : (x: Item) => 文字
>x : Item
>Item : Item

    switch (x.kind) {
>x.kind : YesNo
>x : Item
>kind : YesNo

        case Choice.Yes: return x.a;
>Choice.Yes : Choice.Yes
>Choice : 类为 Choice
>Yes : Choice.Yes
>x.a : 文字
>类型别名 :=> 文字
>x : { kind: Choice.Yes; a: 文字; }
>a : 文字
>类型别名 :=> 文字

        case Choice.No: return x.b;
>Choice.No : Choice.No
>Choice : 类为 Choice
>No : Choice.No
>x.b : 文字
>类型别名 :=> 文字
>x : { kind: Choice.No; b: 文字; }
>b : 文字
>类型别名 :=> 文字
    }
    return assertNever(x);
>assertNever(x) : 不及
>类型别名 :=> 不及
>assertNever : (x: 不及) => 不及
>x : 不及
>类型别名 :=> 不及
}
