=== tests/cases/compiler/keyofIsLiteralContexualType.ts ===
// keyof T is a literal contextual type

function foo<T extends { a: string, b: string }>() {
>foo : <T 扩展 { a: 文字; b: 文字; }>() => 无值
>T : T
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字

    let a: (keyof T)[] = ["a", "b"];
>a : (键集 T)[]
>T : T
>["a", "b"] : ("a" | "b")[]
>"a" : "a"
>"b" : "b"

    let b: (keyof T)[] = ["a", "b", "c"];
>b : (键集 T)[]
>T : T
>["a", "b", "c"] : ("a" | "b" | "c")[]
>"a" : "a"
>"b" : "b"
>"c" : "c"
}

// Repro from #12455

declare function pick<T, K extends keyof T>(obj: T, propNames: K[]): Pick<T, K>;
>pick : <T, K 扩展 键集 T>(obj: T, propNames: K[]) => Pick<T, K>
>T : T
>K : K
>T : T
>obj : T
>T : T
>propNames : K[]
>K : K
>Pick : Pick<T, K>
>T : T
>K : K

let x = pick({ a: 10, b: 20, c: 30 }, ["a", "c"]);
>x : Pick<{ a: 数字; b: 数字; c: 数字; }, "a" | "c">
>pick({ a: 10, b: 20, c: 30 }, ["a", "c"]) : Pick<{ a: 数字; b: 数字; c: 数字; }, "a" | "c">
>pick : <T, K 扩展 键集 T>(obj: T, propNames: K[]) => Pick<T, K>
>{ a: 10, b: 20, c: 30 } : { a: 数字; b: 数字; c: 数字; }
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 数字
>类型别名 :=> 数字
>20 : 20
>c : 数字
>类型别名 :=> 数字
>30 : 30
>["a", "c"] : ("a" | "c")[]
>"a" : "a"
>"c" : "c"

let b = x.b;  // Error
>b : 任意
>类型别名 :=> 任意
>x.b : 任意
>类型别名 :=> 任意
>x : Pick<{ a: 数字; b: 数字; c: 数字; }, "a" | "c">
>b : 任意
>类型别名 :=> 任意

