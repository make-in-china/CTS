=== tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditionIsObjectType.ts ===
//Cond ? Expr1 : Expr2,  Cond is of object type, Expr1 and Expr2 have the same type
var condObject: Object;
>condObject : Object
>Object : Object

var exprAny1: any;
>exprAny1 : 任意
>类型别名 :=> 任意

var exprBoolean1: boolean;
>exprBoolean1 : 真假
>类型别名 :=> 真假

var exprNumber1: number;
>exprNumber1 : 数字
>类型别名 :=> 数字

var exprString1: string;
>exprString1 : 文字
>类型别名 :=> 文字

var exprIsObject1: Object;
>exprIsObject1 : Object
>Object : Object

var exprAny2: any;
>exprAny2 : 任意
>类型别名 :=> 任意

var exprBoolean2: boolean;
>exprBoolean2 : 真假
>类型别名 :=> 真假

var exprNumber2: number;
>exprNumber2 : 数字
>类型别名 :=> 数字

var exprString2: string;
>exprString2 : 文字
>类型别名 :=> 文字

var exprIsObject2: Object;
>exprIsObject2 : Object
>Object : Object

function foo() { };
>foo : () => 无值

class C { static doIt: () => void };
>C : C
>doIt : () => 无值

//Cond is an object type variable
condObject ? exprAny1 : exprAny2;
>condObject ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>condObject : Object
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

condObject ? exprBoolean1 : exprBoolean2;
>condObject ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>condObject : Object
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

condObject ? exprNumber1 : exprNumber2;
>condObject ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>condObject : Object
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

condObject ? exprString1 : exprString2;
>condObject ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>condObject : Object
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

condObject ? exprIsObject1 : exprIsObject2;
>condObject ? exprIsObject1 : exprIsObject2 : Object
>condObject : Object
>exprIsObject1 : Object
>exprIsObject2 : Object

condObject ? exprString1 : exprBoolean1; // union
>condObject ? exprString1 : exprBoolean1 : 文字 | 真假
>condObject : Object
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Cond is an object type literal
((a: string) => a.length) ? exprAny1 : exprAny2;
>((a: string) => a.length) ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>((a: string) => a.length) : (a: 文字) => 数字
>(a: string) => a.length : (a: 文字) => 数字
>a : 文字
>类型别名 :=> 文字
>a.length : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

((a: string) => a.length) ? exprBoolean1 : exprBoolean2;
>((a: string) => a.length) ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>((a: string) => a.length) : (a: 文字) => 数字
>(a: string) => a.length : (a: 文字) => 数字
>a : 文字
>类型别名 :=> 文字
>a.length : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

({}) ? exprNumber1 : exprNumber2;
>({}) ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>({}) : {}
>{} : {}
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

({ a: 1, b: "s" }) ? exprString1 : exprString2;
>({ a: 1, b: "s" }) ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>({ a: 1, b: "s" }) : { a: 数字; b: 文字; }
>{ a: 1, b: "s" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>"s" : "s"
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

({ a: 1, b: "s" }) ? exprIsObject1 : exprIsObject2;
>({ a: 1, b: "s" }) ? exprIsObject1 : exprIsObject2 : Object
>({ a: 1, b: "s" }) : { a: 数字; b: 文字; }
>{ a: 1, b: "s" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>"s" : "s"
>exprIsObject1 : Object
>exprIsObject2 : Object

({ a: 1, b: "s" }) ? exprString1: exprBoolean1; // union
>({ a: 1, b: "s" }) ? exprString1: exprBoolean1 : 文字 | 真假
>({ a: 1, b: "s" }) : { a: 数字; b: 文字; }
>{ a: 1, b: "s" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>"s" : "s"
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Cond is an object type expression
foo() ? exprAny1 : exprAny2;
>foo() ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>foo() : 无值
>类型别名 :=> 无值
>foo : () => 无值
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

new Date() ? exprBoolean1 : exprBoolean2;
>new Date() ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>new Date() : Date
>Date : DateConstructor
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

new C() ? exprNumber1 : exprNumber2;
>new C() ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>new C() : C
>C : 类为 C
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

C.doIt() ? exprString1 : exprString2;
>C.doIt() ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>C.doIt() : 无值
>类型别名 :=> 无值
>C.doIt : () => 无值
>C : 类为 C
>doIt : () => 无值
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

condObject.valueOf() ? exprIsObject1 : exprIsObject2;
>condObject.valueOf() ? exprIsObject1 : exprIsObject2 : Object
>condObject.valueOf() : Object
>condObject.valueOf : () => Object
>condObject : Object
>valueOf : () => Object
>exprIsObject1 : Object
>exprIsObject2 : Object

new Date() ? exprString1 : exprBoolean1; // union
>new Date() ? exprString1 : exprBoolean1 : 文字 | 真假
>new Date() : Date
>Date : DateConstructor
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Results shoud be same as Expr1 and Expr2
var resultIsAny1 = condObject ? exprAny1 : exprAny2;
>resultIsAny1 : 任意
>类型别名 :=> 任意
>condObject ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>condObject : Object
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean1 = condObject ? exprBoolean1 : exprBoolean2;
>resultIsBoolean1 : 真假
>类型别名 :=> 真假
>condObject ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>condObject : Object
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber1 = condObject ? exprNumber1 : exprNumber2;
>resultIsNumber1 : 数字
>类型别名 :=> 数字
>condObject ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>condObject : Object
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString1 = condObject ? exprString1 : exprString2;
>resultIsString1 : 文字
>类型别名 :=> 文字
>condObject ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>condObject : Object
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject1 = condObject ? exprIsObject1 : exprIsObject2;
>resultIsObject1 : Object
>condObject ? exprIsObject1 : exprIsObject2 : Object
>condObject : Object
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean1 = condObject ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean1 : 文字 | 真假
>condObject ? exprString1 : exprBoolean1 : 文字 | 真假
>condObject : Object
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsAny2 = ((a: string) => a.length) ? exprAny1 : exprAny2;
>resultIsAny2 : 任意
>类型别名 :=> 任意
>((a: string) => a.length) ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>((a: string) => a.length) : (a: 文字) => 数字
>(a: string) => a.length : (a: 文字) => 数字
>a : 文字
>类型别名 :=> 文字
>a.length : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean2 = ((a: string) => a.length) ? exprBoolean1 : exprBoolean2;
>resultIsBoolean2 : 真假
>类型别名 :=> 真假
>((a: string) => a.length) ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>((a: string) => a.length) : (a: 文字) => 数字
>(a: string) => a.length : (a: 文字) => 数字
>a : 文字
>类型别名 :=> 文字
>a.length : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber2 = ({}) ? exprNumber1 : exprNumber2;
>resultIsNumber2 : 数字
>类型别名 :=> 数字
>({}) ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>({}) : {}
>{} : {}
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString2 = ({ a: 1, b: "s" }) ? exprString1 : exprString2;
>resultIsString2 : 文字
>类型别名 :=> 文字
>({ a: 1, b: "s" }) ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>({ a: 1, b: "s" }) : { a: 数字; b: 文字; }
>{ a: 1, b: "s" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>"s" : "s"
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject2 = ({ a: 1, b: "s" }) ? exprIsObject1 : exprIsObject2;
>resultIsObject2 : Object
>({ a: 1, b: "s" }) ? exprIsObject1 : exprIsObject2 : Object
>({ a: 1, b: "s" }) : { a: 数字; b: 文字; }
>{ a: 1, b: "s" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>"s" : "s"
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean2 = ({ a: 1, b: "s" }) ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean2 : 文字 | 真假
>({ a: 1, b: "s" }) ? exprString1 : exprBoolean1 : 文字 | 真假
>({ a: 1, b: "s" }) : { a: 数字; b: 文字; }
>{ a: 1, b: "s" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>"s" : "s"
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsAny3 = foo() ? exprAny1 : exprAny2;
>resultIsAny3 : 任意
>类型别名 :=> 任意
>foo() ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>foo() : 无值
>类型别名 :=> 无值
>foo : () => 无值
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean3 = new Date() ? exprBoolean1 : exprBoolean2;
>resultIsBoolean3 : 真假
>类型别名 :=> 真假
>new Date() ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>new Date() : Date
>Date : DateConstructor
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber3 = new C() ? exprNumber1 : exprNumber2;
>resultIsNumber3 : 数字
>类型别名 :=> 数字
>new C() ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>new C() : C
>C : 类为 C
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString3 = C.doIt() ? exprString1 : exprString2;
>resultIsString3 : 文字
>类型别名 :=> 文字
>C.doIt() ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>C.doIt() : 无值
>类型别名 :=> 无值
>C.doIt : () => 无值
>C : 类为 C
>doIt : () => 无值
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject3 = condObject.valueOf() ? exprIsObject1 : exprIsObject2;
>resultIsObject3 : Object
>condObject.valueOf() ? exprIsObject1 : exprIsObject2 : Object
>condObject.valueOf() : Object
>condObject.valueOf : () => Object
>condObject : Object
>valueOf : () => Object
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean3 = C.doIt() ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean3 : 文字 | 真假
>C.doIt() ? exprString1 : exprBoolean1 : 文字 | 真假
>C.doIt() : 无值
>类型别名 :=> 无值
>C.doIt : () => 无值
>C : 类为 C
>doIt : () => 无值
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

