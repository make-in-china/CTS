=== tests/cases/compiler/a.d.ts ===
export { };

// Extends
declare class C { }
>C : C

declare class D extends C { }
>D : D
>C : C

// Destructuring
interface I {
>I : I

    ({descendants, read}?: {
>descendants : boolean
>类型别名 :=> 真假
>read : any
>类型别名 :=> 任意

        descendants?: boolean;
>descendants : boolean
>类型别名 :=> 真假

        read?: any;
>read : any
>类型别名 :=> 任意

    }): any;
}


// Object Rest
interface Foo {
>Foo : Foo

    a: number; b: string;
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字
}
export var { a, ...x } : Foo;
>a : number
>类型别名 :=> 数字
>x : { b: string; }
>Foo : Foo

=== tests/cases/compiler/b.ts ===
export {};
declare namespace N {
>N : typeof N

	// Extends
	class C { }
>C : C

	class D extends C { }
>D : D
>C : C

	// Destructuring
	interface I {
>I : I

		({descendants, read}?: {
>descendants : boolean
>类型别名 :=> 真假
>read : any
>类型别名 :=> 任意

			descendants?: boolean;
>descendants : boolean
>类型别名 :=> 真假

			read?: any;
>read : any
>类型别名 :=> 任意

		}): any;
	}


	// Object Rest
	interface Foo {
>Foo : Foo

		a: number; b: string;
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字
	}
	export var { a, ...x } : Foo;
>a : number
>类型别名 :=> 数字
>x : { b: string; }
>Foo : Foo
}

=== tests/cases/compiler/tslib.d.ts ===
export declare function __extends(d: Function, b: Function): void;
>__extends : (d: Function, b: Function) => void
>d : Function
>Function : Function
>b : Function
>Function : Function

export declare function __assign(t: any, ...sources: any[]): any;
>__assign : (t: any, ...sources: any[]) => any
>t : any
>类型别名 :=> 任意
>sources : any[]

export declare function __rest(t: any, propertyNames: string[]): any;
>__rest : (t: any, propertyNames: string[]) => any
>t : any
>类型别名 :=> 任意
>propertyNames : string[]

export declare function __decorate(decorators: Function[], target: any, key?: string | symbol, desc?: any): any;
>__decorate : (decorators: Function[], target: any, key?: string | symbol, desc?: any) => any
>decorators : Function[]
>Function : Function
>target : any
>类型别名 :=> 任意
>key : string | symbol
>desc : any
>类型别名 :=> 任意

export declare function __param(paramIndex: number, decorator: Function): Function;
>__param : (paramIndex: number, decorator: Function) => Function
>paramIndex : number
>类型别名 :=> 数字
>decorator : Function
>Function : Function
>Function : Function

export declare function __metadata(metadataKey: any, metadataValue: any): Function;
>__metadata : (metadataKey: any, metadataValue: any) => Function
>metadataKey : any
>类型别名 :=> 任意
>metadataValue : any
>类型别名 :=> 任意
>Function : Function

export declare function __awaiter(thisArg: any, _arguments: any, P: Function, generator: Function): any;
>__awaiter : (thisArg: any, _arguments: any, P: Function, generator: Function) => any
>thisArg : any
>类型别名 :=> 任意
>_arguments : any
>类型别名 :=> 任意
>P : Function
>Function : Function
>generator : Function
>Function : Function

export declare function __generator(thisArg: any, body: Function): any;
>__generator : (thisArg: any, body: Function) => any
>thisArg : any
>类型别名 :=> 任意
>body : Function
>Function : Function

export declare function __exportStar(m: any, exports: any): void;
>__exportStar : (m: any, exports: any) => void
>m : any
>类型别名 :=> 任意
>exports : any
>类型别名 :=> 任意

