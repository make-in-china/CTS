=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance3.ts ===
// checking subtype relations for function types as it relates to contextual signature instantiation
// error cases

module Errors {
>Errors : 类为 Errors

    class Base { foo: string; }
>Base : Base
>foo : 文字
>类型别名 :=> 文字

    class Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : 文字
>类型别名 :=> 文字

    class Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : 文字
>类型别名 :=> 文字

    class OtherDerived extends Base { bing: string; }
>OtherDerived : OtherDerived
>Base : Base
>bing : 文字
>类型别名 :=> 文字

    module WithNonGenericSignaturesInBaseType {
>WithNonGenericSignaturesInBaseType : 任意
>类型别名 :=> 任意

        // base type with non-generic call signatures
        interface A {
>A : A

            a2: new (x: number) => string[];
>a2 : 新建 (x: 数字) => 文字[]
>x : 数字
>类型别名 :=> 数字

            a7: new (x: (arg: Base) => Derived) => (r: Base) => Derived2;
>a7 : 新建 (x: (arg: Base) => Derived) => (r: Base) => Derived2
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived2 : Derived2

            a8: new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived;
>a8 : 新建 (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>y : (arg2: Base) => Derived
>arg2 : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived : Derived

            a10: new (...x: Base[]) => Base;
>a10 : 新建 (...x: Base[]) => Base
>x : Base[]
>Base : Base
>Base : Base

            a11: new (x: { foo: string }, y: { foo: string; bar: string }) => Base;
>a11 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>x : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字
>y : { foo: 文字; bar: 文字; }
>foo : 文字
>类型别名 :=> 文字
>bar : 文字
>类型别名 :=> 文字
>Base : Base

            a12: new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
>a12 : 新建 (x: Base[], y: Derived2[]) => Derived[]
>x : Base[]
>Array : T[]
>Base : Base
>y : Derived2[]
>Array : T[]
>Derived2 : Derived2
>Array : T[]
>Derived : Derived

            a14: {
>a14 : { 新建 (x: 数字): 数字[]; 新建 (x: 文字): 文字[]; }

                new (x: number): number[];
>x : 数字
>类型别名 :=> 数字

                new (x: string): string[];
>x : 文字
>类型别名 :=> 文字

            };
            a15: new (x: { a: string; b: number }) => number;
>a15 : 新建 (x: { a: 文字; b: 数字; }) => 数字
>x : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字

            a16: {
>a16 : { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }): 数字[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }): 真假[]; }

                // type of parameter is overload set which means we can't do inference based on this type
                new (x: {
>x : { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }

                    new (a: number): number;
>a : 数字
>类型别名 :=> 数字

                    new (a?: number): number;
>a : 数字
>类型别名 :=> 数字

                }): number[];
                new (x: {
>x : { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }

                    new (a: boolean): boolean;
>a : 真假
>类型别名 :=> 真假

                    new (a?: boolean): boolean;
>a : 真假
>类型别名 :=> 真假

                }): boolean[];
            };
        }

        interface I extends A {
>I : I
>A : A

            a2: new <T, U>(x: T) => U[]; // error, contextual signature instantiation doesn't relate return types so U is {}, not a subtype of string[]
>a2 : 新建 <T, U>(x: T) => U[]
>T : T
>U : U
>x : T
>T : T
>U : U
        }

        interface I2<T, U> extends A {
>I2 : I2<T, U>
>T : T
>U : U
>A : A

            a2: new (x: T) => U[]; // error, no contextual signature instantiation since I2.a2 is not generic
>a2 : 新建 (x: T) => U[]
>x : T
>T : T
>U : U
        }

        interface I3 extends A {
>I3 : I3
>A : A

            // valid, no inferences for V so it defaults to Derived2
            a7: new <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V;
>a7 : 新建 <T 扩展 Base, U 扩展 Derived, V 扩展 Derived2>(x: (arg: T) => U) => (r: T) => V
>T : T
>Base : Base
>U : U
>Derived : Derived
>V : V
>Derived2 : Derived2
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>r : T
>T : T
>V : V
        }

        interface I4 extends A {
>I4 : I4
>A : A

            a8: new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U; // error, type mismatch
>a8 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: { foo: 数字; }) => U) => (r: T) => U
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>y : (arg2: { foo: 数字; }) => U
>arg2 : { foo: 数字; }
>foo : 数字
>类型别名 :=> 数字
>U : U
>r : T
>T : T
>U : U
        }

        interface I4B extends A {
>I4B : I4B
>A : A

            a10: new <T extends Derived>(...x: T[]) => T; // valid, parameter covariance works even after contextual signature instantiation
>a10 : 新建 <T 扩展 Derived>(...x: T[]) => T
>T : T
>Derived : Derived
>x : T[]
>T : T
>T : T
        }

        interface I4C extends A {
>I4C : I4C
>A : A

            a11: new <T extends Derived>(x: T, y: T) => T; // valid, even though x is a Base, parameter covariance works even after contextual signature instantiation
>a11 : 新建 <T 扩展 Derived>(x: T, y: T) => T
>T : T
>Derived : Derived
>x : T
>T : T
>y : T
>T : T
>T : T
        }

        interface I4E extends A {
>I4E : I4E
>A : A

            a12: new <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T; // valid, no inferences for T, defaults to Array<Derived2>
>a12 : 新建 <T 扩展 Derived2[]>(x: Base[], y: Base[]) => T
>T : T
>Array : T[]
>Derived2 : Derived2
>x : Base[]
>Array : T[]
>Base : Base
>y : Base[]
>Array : T[]
>Base : Base
>T : T
        }

        interface I6 extends A {
>I6 : I6
>A : A

            a15: new <T>(x: { a: T; b: T }) => T; // error, T is {} which isn't an acceptable return type
>a15 : 新建 <T>(x: { a: T; b: T; }) => T
>T : T
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
>T : T
        }

        interface I7 extends A {
>I7 : I7
>A : A

            a15: new <T extends Base>(x: { a: T; b: T }) => number; // error, T defaults to Base, which is not compatible with number or string
>a15 : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => 数字
>T : T
>Base : Base
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
        }

        interface I8 extends A {
>I8 : I8
>A : A

            // ok, we relate each signature of a16 to b16, and within that, we make inferences from two different signatures in the respective A.a16 signature
            a16: new <T>(x: new (a: T) => T) => T[];
>a16 : 新建 <T>(x: 新建 (a: T) => T) => T[]
>T : T
>x : 新建 (a: T) => T
>a : T
>T : T
>T : T
>T : T
        }
    }

    module WithGenericSignaturesInBaseType {
>WithGenericSignaturesInBaseType : 任意
>类型别名 :=> 任意

        // base type has generic call signature
        interface B {
>B : B

            a2: new <T>(x: T) => T[];
>a2 : 新建 <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T
        }

        interface I6 extends B {
>I6 : I6
>B : B

            a2: new <T>(x: T) => string[]; // error
>a2 : 新建 <T>(x: T) => 文字[]
>T : T
>x : T
>T : T
        }

        // base type has generic call signature
        interface C {
>C : C

            a2: new <T>(x: T) => string[];
>a2 : 新建 <T>(x: T) => 文字[]
>T : T
>x : T
>T : T
        }

        interface I7 extends C {
>I7 : I7
>C : C

            a2: new <T>(x: T) => T[]; // error
>a2 : 新建 <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T
        }

        // base type has a generic call signature with overloads
        interface D {
>D : D

            a14: {
>a14 : { 新建 <T 扩展 Derived>(x: T): 数字[]; 新建 <U 扩展 Base>(x: U): 数字[]; }

                new <T extends Derived>(x: T): number[];
>T : T
>Derived : Derived
>x : T
>T : T

                new <U extends Base>(x: U): number[];
>U : U
>Base : Base
>x : U
>U : U

            };
        }

        interface I8 extends D {
>I8 : I8
>D : D

            a14: new <T extends Base>(x: T) => number[];
>a14 : 新建 <T 扩展 Base>(x: T) => 数字[]
>T : T
>Base : Base
>x : T
>T : T
        }
    }
}
