=== tests/cases/compiler/typeAssertionToGenericFunctionType.ts ===
var x = {
>x : { a: <T>(x: T) => T; b: <T>(x: T) => 无值; }
>{    a: < <T>(x: T) => T > ((x: any) => 1),    b: <T>(x: T) => { x }} : { a: <T>(x: T) => T; b: <T>(x: T) => 无值; }

    a: < <T>(x: T) => T > ((x: any) => 1),
>a : <T>(x: T) => T
>< <T>(x: T) => T > ((x: any) => 1) : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
>((x: any) => 1) : (x: 任意) => 数字
>(x: any) => 1 : (x: 任意) => 数字
>x : 任意
>类型别名 :=> 任意
>1 : 1

    b: <T>(x: T) => { x }
>b : <T>(x: T) => 无值
><T>(x: T) => { x } : <T>(x: T) => 无值
>T : T
>x : T
>T : T
>x : T
}
x.a<string>(1); // bug was that this caused 'Could not find symbol T' on return type T in the type assertion on x.a's definition
>x.a<string>(1) : 任意
>类型别名 :=> 任意
>x.a : <T>(x: T) => T
>x : { a: <T>(x: T) => T; b: <T>(x: T) => 无值; }
>a : <T>(x: T) => T
>1 : 1

x.b<string>(); // error
>x.b<string>() : 任意
>类型别名 :=> 任意
>x.b : <T>(x: T) => 无值
>x : { a: <T>(x: T) => T; b: <T>(x: T) => 无值; }
>b : <T>(x: T) => 无值

