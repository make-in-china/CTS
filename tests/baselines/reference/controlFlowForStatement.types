=== tests/cases/conformance/controlFlow/controlFlowForStatement.ts ===
let cond: boolean;
>cond : 真假
>类型别名 :=> 真假

function a() {
>a : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    for (x = ""; cond; x = 5) {
>x = "" : ""
>x : 文字 | 数字 | 真假
>"" : ""
>cond : 真假
>类型别名 :=> 真假
>x = 5 : 5
>x : 文字 | 数字 | 真假
>5 : 5

        x; // string | number
>x : 文字 | 数字
    }
}
function b() {
>b : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    for (x = 5; cond; x = x.length) {
>x = 5 : 5
>x : 文字 | 数字 | 真假
>5 : 5
>cond : 真假
>类型别名 :=> 真假
>x = x.length : 数字
>类型别名 :=> 数字
>x : 文字 | 数字 | 真假
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

        x; // number
>x : 数字
>类型别名 :=> 数字

        x = "";
>x = "" : ""
>x : 文字 | 数字 | 真假
>"" : ""
    }
}
function c() {
>c : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    for (x = 5; x = x.toExponential(); x = 5) {
>x = 5 : 5
>x : 文字 | 数字 | 真假
>5 : 5
>x = x.toExponential() : 文字
>类型别名 :=> 文字
>x : 文字 | 数字 | 真假
>x.toExponential() : 文字
>类型别名 :=> 文字
>x.toExponential : (fractionDigits?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toExponential : (fractionDigits?: 数字) => 文字
>x = 5 : 5
>x : 文字 | 数字 | 真假
>5 : 5

        x; // string
>x : 文字
>类型别名 :=> 文字
    }
}
function d() {
>d : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    for (x = ""; typeof x === "string"; x = 5) {
>x = "" : ""
>x : 文字 | 数字 | 真假
>"" : ""
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"
>x = 5 : 5
>x : 文字 | 数字 | 真假
>5 : 5

        x; // string
>x : 文字
>类型别名 :=> 文字
    }
}
function e() {
>e : () => 无值

    let x: string | number | boolean | RegExp;
>x : 文字 | 数字 | 真假 | RegExp
>RegExp : RegExp

    for (x = "" || 0; typeof x !== "string"; x = "" || true) {
>x = "" || 0 : 0
>x : 文字 | 数字 | 真假 | RegExp
>"" || 0 : 0
>"" : ""
>0 : 0
>typeof x !== "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字 | 为真
>"string" : "string"
>x = "" || true : 为真
>类型别名 :=> 为真
>x : 文字 | 数字 | 真假 | RegExp
>"" || true : 为真
>类型别名 :=> 为真
>"" : ""
>true : 为真
>类型别名 :=> 为真

        x; // number | boolean
>x : 数字 | 为真
    }
}
function f() {
>f : () => 无值

    let x: string | number | boolean;
>x : 文字 | 数字 | 真假

    for (; typeof x !== "string";) {
>typeof x !== "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字 | 真假
>"string" : "string"

        x; // number | boolean
>x : 数字 | 真假

        if (typeof x === "number") break;
>typeof x === "number" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字 | 真假
>"number" : "number"

        x = undefined;
>x = undefined : 未定
>类型别名 :=> 未定
>x : 文字 | 数字 | 真假
>undefined : 未定
>类型别名 :=> 未定
    }
    x; // string | number
>x : 文字 | 数字
}

