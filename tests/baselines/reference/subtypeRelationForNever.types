=== tests/cases/compiler/subtypeRelationForNever.ts ===
function fail(message: string) : never { throw new Error(message); }
>fail : (message: 文字) => 不及
>message : 文字
>类型别名 :=> 文字
>new Error(message) : Error
>Error : ErrorConstructor
>message : 文字
>类型别名 :=> 文字

function withFew<a, r>(values: a[], haveFew: (values: a[]) => r, haveNone: (reason: string) => r): r {
>withFew : <a, r>(values: a[], haveFew: (values: a[]) => r, haveNone: (reason: 文字) => r) => r
>a : a
>r : r
>values : a[]
>a : a
>haveFew : (values: a[]) => r
>values : a[]
>a : a
>r : r
>haveNone : (reason: 文字) => r
>reason : 文字
>类型别名 :=> 文字
>r : r
>r : r

    return values.length > 0 ? haveFew(values) : haveNone('No values.');
>values.length > 0 ? haveFew(values) : haveNone('No values.') : r
>values.length > 0 : 真假
>类型别名 :=> 真假
>values.length : 数字
>类型别名 :=> 数字
>values : a[]
>length : 数字
>类型别名 :=> 数字
>0 : 0
>haveFew(values) : r
>haveFew : (values: a[]) => r
>values : a[]
>haveNone('No values.') : r
>haveNone : (reason: 文字) => r
>'No values.' : "No values."
}
function id<a>(value: a) : a { return value; }
>id : <a>(value: a) => a
>a : a
>value : a
>a : a
>a : a
>value : a

const result = withFew([1, 2, 3], id, fail); // expected result is number[]
>result : 数字[]
>withFew([1, 2, 3], id, fail) : 数字[]
>withFew : <a, r>(values: a[], haveFew: (values: a[]) => r, haveNone: (reason: 文字) => r) => r
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>id : <a>(value: a) => a
>fail : (message: 文字) => 不及

