=== tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithAnyOtherType.ts ===
// ++ operator on any type

var ANY: any;
>ANY : 任意
>类型别名 :=> 任意

var ANY1: any;
>ANY1 : 任意
>类型别名 :=> 任意

var ANY2: any[] = ["", ""];
>ANY2 : 任意[]
>["", ""] : 文字[]
>"" : ""
>"" : ""

var obj = {x:1,y:null};
>obj : { x: 数字; y: 任意; }
>{x:1,y:null} : { x: 数字; y: 空值; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

class A {
>A : A

    public a: any;
>a : 任意
>类型别名 :=> 任意
}
module M {
>M : 类为 M

    export var n: any;
>n : 任意
>类型别名 :=> 任意
}
var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// any type var
var ResultIsNumber1 = ++ANY;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>++ANY : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意

var ResultIsNumber2 = ++ANY1;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>++ANY1 : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意

var ResultIsNumber3 = ANY1++;
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>ANY1++ : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意

var ResultIsNumber4 = ANY1++;
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>ANY1++ : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意

// expressions
var ResultIsNumber5 = ++ANY2[0];
>ResultIsNumber5 : 数字
>类型别名 :=> 数字
>++ANY2[0] : 数字
>类型别名 :=> 数字
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0

var ResultIsNumber6 = ++obj.x;
>ResultIsNumber6 : 数字
>类型别名 :=> 数字
>++obj.x : 数字
>类型别名 :=> 数字
>obj.x : 数字
>类型别名 :=> 数字
>obj : { x: 数字; y: 任意; }
>x : 数字
>类型别名 :=> 数字

var ResultIsNumber7 = ++obj.y;
>ResultIsNumber7 : 数字
>类型别名 :=> 数字
>++obj.y : 数字
>类型别名 :=> 数字
>obj.y : 任意
>类型别名 :=> 任意
>obj : { x: 数字; y: 任意; }
>y : 任意
>类型别名 :=> 任意

var ResultIsNumber8 = ++objA.a;
>ResultIsNumber8 : 数字
>类型别名 :=> 数字
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 任意
>类型别名 :=> 任意
>objA : A
>a : 任意
>类型别名 :=> 任意

var ResultIsNumber = ++M.n;
>ResultIsNumber : 数字
>类型别名 :=> 数字
>++M.n : 数字
>类型别名 :=> 数字
>M.n : 任意
>类型别名 :=> 任意
>M : 类为 M
>n : 任意
>类型别名 :=> 任意

var ResultIsNumber9 = ANY2[0]++;
>ResultIsNumber9 : 数字
>类型别名 :=> 数字
>ANY2[0]++ : 数字
>类型别名 :=> 数字
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0

var ResultIsNumber10 = obj.x++;
>ResultIsNumber10 : 数字
>类型别名 :=> 数字
>obj.x++ : 数字
>类型别名 :=> 数字
>obj.x : 数字
>类型别名 :=> 数字
>obj : { x: 数字; y: 任意; }
>x : 数字
>类型别名 :=> 数字

var ResultIsNumber11 = obj.y++;
>ResultIsNumber11 : 数字
>类型别名 :=> 数字
>obj.y++ : 数字
>类型别名 :=> 数字
>obj.y : 任意
>类型别名 :=> 任意
>obj : { x: 数字; y: 任意; }
>y : 任意
>类型别名 :=> 任意

var ResultIsNumber12 = objA.a++;
>ResultIsNumber12 : 数字
>类型别名 :=> 数字
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 任意
>类型别名 :=> 任意
>objA : A
>a : 任意
>类型别名 :=> 任意

var ResultIsNumber13 = M.n++;
>ResultIsNumber13 : 数字
>类型别名 :=> 数字
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 任意
>类型别名 :=> 任意
>M : 类为 M
>n : 任意
>类型别名 :=> 任意

// miss assignment opertors
++ANY;
>++ANY : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意

++ANY1;
>++ANY1 : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意

++ANY2[0];
>++ANY2[0] : 数字
>类型别名 :=> 数字
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0

++ANY, ++ANY1;
>++ANY, ++ANY1 : 数字
>类型别名 :=> 数字
>++ANY : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意
>++ANY1 : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意

++objA.a;
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 任意
>类型别名 :=> 任意
>objA : A
>a : 任意
>类型别名 :=> 任意

++M.n;
>++M.n : 数字
>类型别名 :=> 数字
>M.n : 任意
>类型别名 :=> 任意
>M : 类为 M
>n : 任意
>类型别名 :=> 任意

ANY++;
>ANY++ : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意

ANY1++;
>ANY1++ : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意

ANY2[0]++;
>ANY2[0]++ : 数字
>类型别名 :=> 数字
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0

ANY++, ANY1++;
>ANY++, ANY1++ : 数字
>类型别名 :=> 数字
>ANY++ : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意
>ANY1++ : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意

objA.a++;
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 任意
>类型别名 :=> 任意
>objA : A
>a : 任意
>类型别名 :=> 任意

M.n++;
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 任意
>类型别名 :=> 任意
>M : 类为 M
>n : 任意
>类型别名 :=> 任意

