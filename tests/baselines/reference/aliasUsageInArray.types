=== tests/cases/compiler/aliasUsageInArray_main.ts ===
import Backbone = require("./aliasUsageInArray_backbone");
>Backbone : 类为 Backbone

import moduleA = require("./aliasUsageInArray_moduleA");
>moduleA : 类为 moduleA

interface IHasVisualizationModel {
>IHasVisualizationModel : IHasVisualizationModel

    VisualizationModel: typeof Backbone.Model;
>VisualizationModel : 类为 Backbone.Model
>Backbone.Model : 类为 Backbone.Model
>Backbone : 类为 Backbone
>Model : 类为 Backbone.Model
}

var xs: IHasVisualizationModel[] = [moduleA];
>xs : IHasVisualizationModel[]
>IHasVisualizationModel : IHasVisualizationModel
>[moduleA] : (类为 moduleA)[]
>moduleA : 类为 moduleA

var xs2: typeof moduleA[] = [moduleA];
>xs2 : (类为 moduleA)[]
>moduleA : 类为 moduleA
>[moduleA] : (类为 moduleA)[]
>moduleA : 类为 moduleA

=== tests/cases/compiler/aliasUsageInArray_backbone.ts ===
export class Model {
>Model : Model

    public someData: string;
>someData : 文字
>类型别名 :=> 文字
}

=== tests/cases/compiler/aliasUsageInArray_moduleA.ts ===
import Backbone = require("./aliasUsageInArray_backbone");
>Backbone : 类为 Backbone

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : VisualizationModel
>Backbone.Model : Backbone.Model
>Backbone : 类为 Backbone
>Model : 类为 Backbone.Model

    // interesting stuff here
}

