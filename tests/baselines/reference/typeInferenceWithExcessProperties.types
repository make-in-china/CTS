=== tests/cases/compiler/typeInferenceWithExcessProperties.ts ===
// Repro from #17041

interface Named {
>Named : Named

    name: string;
>name : 文字
>类型别名 :=> 文字
}

function parrot<T extends Named>(obj: T): T {
>parrot : <T 扩展 Named>(obj: T) => T
>T : T
>Named : Named
>obj : T
>T : T
>T : T

    return obj;
>obj : T
}


parrot({
>parrot({    name: "TypeScript",}) : { name: 文字; }
>parrot : <T 扩展 Named>(obj: T) => T
>{    name: "TypeScript",} : { name: 文字; }

    name: "TypeScript",
>name : 文字
>类型别名 :=> 文字
>"TypeScript" : "TypeScript"

});

parrot({
>parrot({    name: "TypeScript",    age: 5,}) : { name: 文字; age: 数字; }
>parrot : <T 扩展 Named>(obj: T) => T
>{    name: "TypeScript",    age: 5,} : { name: 文字; age: 数字; }

    name: "TypeScript",
>name : 文字
>类型别名 :=> 文字
>"TypeScript" : "TypeScript"

    age: 5,
>age : 数字
>类型别名 :=> 数字
>5 : 5

});

parrot({
>parrot({    name: "TypeScript",    age: function () { },}) : { name: 文字; age: () => 无值; }
>parrot : <T 扩展 Named>(obj: T) => T
>{    name: "TypeScript",    age: function () { },} : { name: 文字; age: () => 无值; }

    name: "TypeScript",
>name : 文字
>类型别名 :=> 文字
>"TypeScript" : "TypeScript"

    age: function () { },
>age : () => 无值
>function () { } : () => 无值

});

parrot({
>parrot({    name: "TypeScript",    sayHello() {    },}) : { name: 文字; sayHello(): 无值; }
>parrot : <T 扩展 Named>(obj: T) => T
>{    name: "TypeScript",    sayHello() {    },} : { name: 文字; sayHello(): 无值; }

    name: "TypeScript",
>name : 文字
>类型别名 :=> 文字
>"TypeScript" : "TypeScript"

    sayHello() {
>sayHello : () => 无值

    },
});

