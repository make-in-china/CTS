=== tests/cases/conformance/types/union/contextualTypeWithUnionTypeCallSignatures.ts ===
//When used as a contextual type, a union type U has those members that are present in any of 
// its constituent types, with types that are unions of the respective members in the constituent types. 

// Let S be the set of types in U that have call signatures.
// If S is not empty and the sets of call signatures of the types in S are identical ignoring return types,
// U has the same set of call signatures, but with return types that are unions of the return types of the respective call signatures from each type in S.

interface IWithNoCallSignatures {
>IWithNoCallSignatures : IWithNoCallSignatures

    foo: string;
>foo : 文字
>类型别名 :=> 文字
}
interface IWithCallSignatures {
>IWithCallSignatures : IWithCallSignatures

    (a: number): string;
>a : 数字
>类型别名 :=> 数字
}
interface IWithCallSignatures2 {
>IWithCallSignatures2 : IWithCallSignatures2

    (a: number): number;
>a : 数字
>类型别名 :=> 数字
}
interface IWithCallSignatures3 {
>IWithCallSignatures3 : IWithCallSignatures3

    (b: string): number;
>b : 文字
>类型别名 :=> 文字
}
interface IWithCallSignatures4 {
>IWithCallSignatures4 : IWithCallSignatures4

    (a: number): string;
>a : 数字
>类型别名 :=> 数字

    (a: string, b: number): number;
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
}

// With no call signature | callSignatures
var x: IWithNoCallSignatures | IWithCallSignatures = a => a.toString();
>x : IWithNoCallSignatures | IWithCallSignatures
>IWithNoCallSignatures : IWithNoCallSignatures
>IWithCallSignatures : IWithCallSignatures
>a => a.toString() : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>a.toString() : 文字
>类型别名 :=> 文字
>a.toString : (radix?: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

// With call signatures with different return type
var x2: IWithCallSignatures | IWithCallSignatures2 = a => a.toString(); // Like iWithCallSignatures
>x2 : IWithCallSignatures | IWithCallSignatures2
>IWithCallSignatures : IWithCallSignatures
>IWithCallSignatures2 : IWithCallSignatures2
>a => a.toString() : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>a.toString() : 文字
>类型别名 :=> 文字
>a.toString : (radix?: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

var x2: IWithCallSignatures | IWithCallSignatures2 = a => a; // Like iWithCallSignatures2
>x2 : IWithCallSignatures | IWithCallSignatures2
>IWithCallSignatures : IWithCallSignatures
>IWithCallSignatures2 : IWithCallSignatures2
>a => a : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

// With call signatures of mismatching parameter type
var x3: IWithCallSignatures | IWithCallSignatures3 = a => /*here a should be any*/ a.toString();
>x3 : IWithCallSignatures | IWithCallSignatures3
>IWithCallSignatures : IWithCallSignatures
>IWithCallSignatures3 : IWithCallSignatures3
>a => /*here a should be any*/ a.toString() : (a: 任意) => 任意
>a : 任意
>类型别名 :=> 任意
>a.toString() : 任意
>类型别名 :=> 任意
>a.toString : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>toString : 任意
>类型别名 :=> 任意

// With call signature count mismatch
var x4: IWithCallSignatures | IWithCallSignatures4 = a => /*here a should be any*/ a.toString();
>x4 : IWithCallSignatures | IWithCallSignatures4
>IWithCallSignatures : IWithCallSignatures
>IWithCallSignatures4 : IWithCallSignatures4
>a => /*here a should be any*/ a.toString() : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>a.toString() : 文字
>类型别名 :=> 文字
>a.toString : (radix?: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

