=== tests/cases/conformance/internalModules/DeclarationMerging/part1.ts ===
module Root {
>Root : 类为 Root

    export module A {
>A : 类为 A

        export interface Point {
>Point : Point

            x: number;
>x : 数字
>类型别名 :=> 数字

            y: number;
>y : 数字
>类型别名 :=> 数字
        }

        export module Utils {
>Utils : 类为 Utils

            export function mirror<T extends Point>(p: T) {
>mirror : <T 扩展 Point>(p: T) => { x: 数字; y: 数字; }
>T : T
>Point : Point
>p : T
>T : T

                return { x: p.y, y: p.x };
>{ x: p.y, y: p.x } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>p.y : 数字
>类型别名 :=> 数字
>p : T
>y : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>p.x : 数字
>类型别名 :=> 数字
>p : T
>x : 数字
>类型别名 :=> 数字
            }
        }
    }
}

=== tests/cases/conformance/internalModules/DeclarationMerging/part2.ts ===
module otherRoot {
>otherRoot : 类为 otherRoot

    export module A {
>A : 类为 A

        // have to be fully qualified since in different root
        export var Origin: Root.A.Point = { x: 0, y: 0 };
>Origin : Root.A.Point
>Root : 任意
>类型别名 :=> 任意
>A : 任意
>类型别名 :=> 任意
>Point : Root.A.Point
>{ x: 0, y: 0 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0

        export module Utils {
>Utils : 类为 Utils

            export class Plane {
>Plane : Plane

                constructor(public tl: Root.A.Point, public br: Root.A.Point) { }
>tl : Root.A.Point
>Root : 任意
>类型别名 :=> 任意
>A : 任意
>类型别名 :=> 任意
>Point : Root.A.Point
>br : Root.A.Point
>Root : 任意
>类型别名 :=> 任意
>A : 任意
>类型别名 :=> 任意
>Point : Root.A.Point
            }
        }
    }
}
