=== tests/cases/compiler/typeInferenceFBoundedTypeParams.ts ===
// Example from #6037

function fold<a, r>(values: a[], result: r, fold: (result: r, value: a) => r): r {
>fold : <a, r>(values: a[], result: r, fold: (result: r, value: a) => r) => r
>a : a
>r : r
>values : a[]
>a : a
>result : r
>r : r
>fold : (result: r, value: a) => r
>result : r
>r : r
>value : a
>a : a
>r : r
>r : r

    for (let value of values) {
>value : a
>values : a[]

        result = fold(result, value);
>result = fold(result, value) : r
>result : r
>fold(result, value) : r
>fold : (result: r, value: a) => r
>result : r
>value : a
    }
    return result;
>result : r
}

function append<a, b extends a>(values: a[], value: b): a[] {
>append : <a, b 扩展 a>(values: a[], value: b) => a[]
>a : a
>b : b
>a : a
>values : a[]
>a : a
>value : b
>b : b
>a : a

    values.push(value);
>values.push(value) : 数字
>类型别名 :=> 数字
>values.push : (...items: a[]) => 数字
>values : a[]
>push : (...items: a[]) => 数字
>value : b

    return values;
>values : a[]
}

fold(
>fold(    [1, 2, 3],    [] as [string, string][],    (result, value) => append(        result,        ["", ""]    )) : [文字, 文字][]
>fold : <a, r>(values: a[], result: r, fold: (result: r, value: a) => r) => r

    [1, 2, 3],
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

    [] as [string, string][],
>[] as [string, string][] : [文字, 文字][]
>[] : 未定[]

    (result, value) => append(
>(result, value) => append(        result,        ["", ""]    ) : (result: [文字, 文字][], value: 数字) => [文字, 文字][]
>result : [文字, 文字][]
>value : 数字
>类型别名 :=> 数字
>append(        result,        ["", ""]    ) : [文字, 文字][]
>append : <a, b 扩展 a>(values: a[], value: b) => a[]

        result,
>result : [文字, 文字][]

        ["", ""]
>["", ""] : [文字, 文字]
>"" : ""
>"" : ""

    )
);

