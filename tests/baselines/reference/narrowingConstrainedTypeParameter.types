=== tests/cases/compiler/narrowingConstrainedTypeParameter.ts ===
// Repro from #10811

interface Pet {
>Pet : Pet

    name: string;
>name : 文字
>类型别名 :=> 文字
}

function isPet(pet: any): pet is Pet {
>isPet : (pet: 任意) => pet 作为 Pet
>pet : 任意
>类型别名 :=> 任意
>pet : 任意
>类型别名 :=> 任意
>Pet : Pet

    return typeof pet.name === "string";
>typeof pet.name === "string" : 真假
>类型别名 :=> 真假
>typeof pet.name : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>pet.name : 任意
>类型别名 :=> 任意
>pet : 任意
>类型别名 :=> 任意
>name : 任意
>类型别名 :=> 任意
>"string" : "string"
}

export function speak<TPet extends Pet>(pet: TPet, voice: (pet: TPet) => string): string {
>speak : <TPet 扩展 Pet>(pet: TPet, voice: (pet: TPet) => 文字) => 文字
>TPet : TPet
>Pet : Pet
>pet : TPet
>TPet : TPet
>voice : (pet: TPet) => 文字
>pet : TPet
>TPet : TPet

    if (!isPet(pet)) {
>!isPet(pet) : 真假
>类型别名 :=> 真假
>isPet(pet) : 真假
>类型别名 :=> 真假
>isPet : (pet: 任意) => pet 作为 Pet
>pet : TPet

        throw new Error("Expected \"pet\" to be a Pet");
>new Error("Expected \"pet\" to be a Pet") : Error
>Error : ErrorConstructor
>"Expected \"pet\" to be a Pet" : "Expected \"pet\" to be a Pet"
    }
    return voice(pet);
>voice(pet) : 文字
>类型别名 :=> 文字
>voice : (pet: TPet) => 文字
>pet : TPet
}
