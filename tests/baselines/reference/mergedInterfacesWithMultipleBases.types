=== tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithMultipleBases.ts ===
// merged interfaces behave as if all extends clauses from each declaration are merged together
// no errors expected

class C {
>C : C

    a: number;
>a : 数字
>类型别名 :=> 数字
}

class C2 {
>C2 : C2

    b: number;
>b : 数字
>类型别名 :=> 数字
}

interface A extends C {
>A : A
>C : C

    y: string;
>y : 文字
>类型别名 :=> 文字
}

interface A extends C2 {
>A : A
>C2 : C2

    z: string;
>z : 文字
>类型别名 :=> 文字
}

class D implements A {
>D : D
>A : A

    a: number;
>a : 数字
>类型别名 :=> 数字

    b: number;
>b : 数字
>类型别名 :=> 数字

    y: string;
>y : 文字
>类型别名 :=> 文字

    z: string;
>z : 文字
>类型别名 :=> 文字
}

var a: A;
>a : A
>A : A

var r = a.a;
>r : 数字
>类型别名 :=> 数字
>a.a : 数字
>类型别名 :=> 数字
>a : A
>a : 数字
>类型别名 :=> 数字

// generic interfaces in a module
module M {
>M : 类为 M

    class C<T> {
>C : C<T>
>T : T

        a: T;
>a : T
>T : T
    }

    class C2<T> {
>C2 : C2<T>
>T : T

        b: T;
>b : T
>T : T
    }

    interface A<T> extends C<T> {
>A : A<T>
>T : T
>C : C<T>
>T : T

        y: T;
>y : T
>T : T
    }

    interface A<T> extends C2<string> {
>A : A<T>
>T : T
>C2 : C2<T>

        z: T;
>z : T
>T : T
    }

    class D implements A<boolean> {
>D : D
>A : A<T>

        a: boolean;
>a : 真假
>类型别名 :=> 真假

        b: string;
>b : 文字
>类型别名 :=> 文字

        y: boolean;
>y : 真假
>类型别名 :=> 真假

        z: boolean;
>z : 真假
>类型别名 :=> 真假
    }
}
