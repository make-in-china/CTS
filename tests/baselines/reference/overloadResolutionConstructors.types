=== tests/cases/conformance/expressions/functionCalls/overloadResolutionConstructors.ts ===
class SomeBase {
>SomeBase : SomeBase

    private n;
>n : 任意
>类型别名 :=> 任意

    public s: string;
>s : 文字
>类型别名 :=> 文字
}
class SomeDerived1 extends SomeBase {
>SomeDerived1 : SomeDerived1
>SomeBase : SomeBase

    private m;
>m : 任意
>类型别名 :=> 任意
}
class SomeDerived2 extends SomeBase {
>SomeDerived2 : SomeDerived2
>SomeBase : SomeBase

    private m;
>m : 任意
>类型别名 :=> 任意
}
class SomeDerived3 extends SomeBase {
>SomeDerived3 : SomeDerived3
>SomeBase : SomeBase

    private m;
>m : 任意
>类型别名 :=> 任意
}

interface fn1 {
>fn1 : fn1

    new (s: string): string;
>s : 文字
>类型别名 :=> 文字

    new (s: number): number;
>s : 数字
>类型别名 :=> 数字
}
var fn1: fn1;
>fn1 : fn1
>fn1 : fn1

// Ambiguous call picks the first overload in declaration order
var s = new fn1(undefined);
>s : 文字
>类型别名 :=> 文字
>new fn1(undefined) : 文字
>类型别名 :=> 文字
>fn1 : fn1
>undefined : 未定
>类型别名 :=> 未定

var s: string;
>s : 文字
>类型别名 :=> 文字

// No candidate overloads found
new fn1({}); // Error
>new fn1({}) : 任意
>类型别名 :=> 任意
>fn1 : fn1
>{} : {}

// Generic and non - generic overload where generic overload is the only candidate when called with type arguments
interface fn2 {
>fn2 : fn2

    new (s: string, n: number): number;
>s : 文字
>类型别名 :=> 文字
>n : 数字
>类型别名 :=> 数字

    new <T>(n: number, t: T): T;
>T : T
>n : 数字
>类型别名 :=> 数字
>t : T
>T : T
>T : T
}
var fn2: fn2;
>fn2 : fn2
>fn2 : fn2

var d = new fn2<Date>(0, undefined);
>d : Date
>new fn2<Date>(0, undefined) : Date
>fn2 : fn2
>Date : Date
>0 : 0
>undefined : 未定
>类型别名 :=> 未定

var d: Date;
>d : Date
>Date : Date

// Generic and non - generic overload where generic overload is the only candidate when called without type arguments
var s = new fn2(0, '');
>s : 文字
>类型别名 :=> 文字
>new fn2(0, '') : ""
>fn2 : fn2
>0 : 0
>'' : ""

// Generic and non - generic overload where non - generic overload is the only candidate when called with type arguments
new fn2<Date>('', 0); // Error
>new fn2<Date>('', 0) : 任意
>类型别名 :=> 任意
>fn2 : fn2
>Date : Date
>'' : ""
>0 : 0

// Generic and non - generic overload where non - generic overload is the only candidate when called without type arguments
new fn2('', 0); // OK
>new fn2('', 0) : 数字
>类型别名 :=> 数字
>fn2 : fn2
>'' : ""
>0 : 0

// Generic overloads with differing arity called without type arguments
interface fn3 {
>fn3 : fn3

    new<T>(n: T): string;
>T : T
>n : T
>T : T

    new<T, U>(s: string, t: T, u: U): U;
>T : T
>U : U
>s : 文字
>类型别名 :=> 文字
>t : T
>T : T
>u : U
>U : U
>U : U

    new<T, U, V>(v: V, u: U, t: T): number;
>T : T
>U : U
>V : V
>v : V
>V : V
>u : U
>U : U
>t : T
>T : T
}
var fn3: fn3;
>fn3 : fn3
>fn3 : fn3

var s = new fn3(3);
>s : 文字
>类型别名 :=> 文字
>new fn3(3) : 文字
>类型别名 :=> 文字
>fn3 : fn3
>3 : 3

var s = new fn3('', 3, '');
>s : 文字
>类型别名 :=> 文字
>new fn3('', 3, '') : ""
>fn3 : fn3
>'' : ""
>3 : 3
>'' : ""

var n = new fn3(5, 5, 5);
>n : 数字
>类型别名 :=> 数字
>new fn3(5, 5, 5) : 数字
>类型别名 :=> 数字
>fn3 : fn3
>5 : 5
>5 : 5
>5 : 5

var n: number;
>n : 数字
>类型别名 :=> 数字

// Generic overloads with differing arity called with type arguments matching each overload type parameter count
var s = new fn3<number>(4);
>s : 文字
>类型别名 :=> 文字
>new fn3<number>(4) : 文字
>类型别名 :=> 文字
>fn3 : fn3
>4 : 4

var s = new fn3<string, string>('', '', '');
>s : 文字
>类型别名 :=> 文字
>new fn3<string, string>('', '', '') : 文字
>类型别名 :=> 文字
>fn3 : fn3
>'' : ""
>'' : ""
>'' : ""

var n = new fn3<number, string, string>('', '', 3);
>n : 数字
>类型别名 :=> 数字
>new fn3<number, string, string>('', '', 3) : 数字
>类型别名 :=> 数字
>fn3 : fn3
>'' : ""
>'' : ""
>3 : 3

// Generic overloads with differing arity called with type argument count that doesn't match any overload
new fn3<number, number, number, number>(); // Error
>new fn3<number, number, number, number>() : 任意
>类型别名 :=> 任意
>fn3 : fn3

// Generic overloads with constraints called with type arguments that satisfy the constraints
interface fn4 {
>fn4 : fn4

    new<T extends string, U extends number>(n: T, m: U);
>T : T
>U : U
>n : T
>T : T
>m : U
>U : U

    new<T extends number, U extends string>(n: T, m: U);
>T : T
>U : U
>n : T
>T : T
>m : U
>U : U
}
var fn4: fn4;
>fn4 : fn4
>fn4 : fn4

new fn4<string, number>('', 3);
>new fn4<string, number>('', 3) : 任意
>类型别名 :=> 任意
>fn4 : fn4
>'' : ""
>3 : 3

new fn4<string, number>(3, ''); // Error
>new fn4<string, number>(3, '') : 任意
>类型别名 :=> 任意
>fn4 : fn4
>3 : 3
>'' : ""

new fn4<number, string>('', 3); // Error
>new fn4<number, string>('', 3) : 任意
>类型别名 :=> 任意
>fn4 : fn4
>'' : ""
>3 : 3

new fn4<number, string>(3, ''); 
>new fn4<number, string>(3, '') : 任意
>类型别名 :=> 任意
>fn4 : fn4
>3 : 3
>'' : ""

// Generic overloads with constraints called without type arguments but with types that satisfy the constraints
new fn4('', 3);
>new fn4('', 3) : 任意
>类型别名 :=> 任意
>fn4 : fn4
>'' : ""
>3 : 3

new fn4(3, '');
>new fn4(3, '') : 任意
>类型别名 :=> 任意
>fn4 : fn4
>3 : 3
>'' : ""

new fn4(3, undefined);
>new fn4(3, undefined) : 任意
>类型别名 :=> 任意
>fn4 : fn4
>3 : 3
>undefined : 未定
>类型别名 :=> 未定

new fn4('', null);
>new fn4('', null) : 任意
>类型别名 :=> 任意
>fn4 : fn4
>'' : ""
>null : 空值
>类型别名 :=> 空值

// Generic overloads with constraints called with type arguments that do not satisfy the constraints
new fn4<boolean, Date>(null, null); // Error
>new fn4<boolean, Date>(null, null) : 任意
>类型别名 :=> 任意
>fn4 : fn4
>Date : Date
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

// Generic overloads with constraints called without type arguments but with types that do not satisfy the constraints
new fn4(true, null); // Error
>new fn4(true, null) : 任意
>类型别名 :=> 任意
>fn4 : fn4
>true : 为真
>类型别名 :=> 为真
>null : 空值
>类型别名 :=> 空值

new fn4(null, true); // Error
>new fn4(null, true) : 任意
>类型别名 :=> 任意
>fn4 : fn4
>null : 空值
>类型别名 :=> 空值
>true : 为真
>类型别名 :=> 为真

// Non - generic overloads where contextual typing of function arguments has errors
interface fn5 {
>fn5 : fn5

    new(f: (n: string) => void): string;
>f : (n: 文字) => 无值
>n : 文字
>类型别名 :=> 文字

    new(f: (n: number) => void): number;
>f : (n: 数字) => 无值
>n : 数字
>类型别名 :=> 数字
}
var fn5: fn5;
>fn5 : fn5
>fn5 : fn5

var n = new fn5((n) => n.toFixed());
>n : 数字
>类型别名 :=> 数字
>new fn5((n) => n.toFixed()) : 文字
>类型别名 :=> 文字
>fn5 : fn5
>(n) => n.toFixed() : (n: 文字) => 任意
>n : 文字
>类型别名 :=> 文字
>n.toFixed() : 任意
>类型别名 :=> 任意
>n.toFixed : 任意
>类型别名 :=> 任意
>n : 文字
>类型别名 :=> 文字
>toFixed : 任意
>类型别名 :=> 任意

var s = new fn5((n) => n.substr(0));
>s : 文字
>类型别名 :=> 文字
>new fn5((n) => n.substr(0)) : 文字
>类型别名 :=> 文字
>fn5 : fn5
>(n) => n.substr(0) : (n: 文字) => 文字
>n : 文字
>类型别名 :=> 文字
>n.substr(0) : 文字
>类型别名 :=> 文字
>n.substr : (from: 数字, length?: 数字) => 文字
>n : 文字
>类型别名 :=> 文字
>substr : (from: 数字, length?: 数字) => 文字
>0 : 0

