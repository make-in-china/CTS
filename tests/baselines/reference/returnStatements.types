=== tests/cases/conformance/statements/returnStatements/returnStatements.ts ===
// all the following should be valid
function fn1(): number { return 1; }
>fn1 : () => 数字
>1 : 1

function fn2(): string { return ''; }
>fn2 : () => 文字
>'' : ""

function fn3(): void { return undefined; }
>fn3 : () => 无值
>undefined : 未定
>类型别名 :=> 未定

function fn4(): void { return; }
>fn4 : () => 无值

function fn5(): boolean { return true; }
>fn5 : () => 真假
>true : 为真
>类型别名 :=> 为真

function fn6(): Date { return new Date(12); }
>fn6 : () => Date
>Date : Date
>new Date(12) : Date
>Date : DateConstructor
>12 : 12

function fn7(): any { return null; }
>fn7 : () => 任意
>null : 空值
>类型别名 :=> 空值

function fn8(): any { return; } // OK, eq. to 'return undefined'
>fn8 : () => 任意

interface I { id: number }
>I : I
>id : 数字
>类型别名 :=> 数字

class C implements I {
>C : C
>I : I

    id: number;
>id : 数字
>类型别名 :=> 数字

    dispose() {}
>dispose : () => 无值
}
class D extends C {
>D : D
>C : C

    name: string;
>name : 文字
>类型别名 :=> 文字
}
function fn10(): I { return { id: 12 }; } 
>fn10 : () => I
>I : I
>{ id: 12 } : { id: 数字; }
>id : 数字
>类型别名 :=> 数字
>12 : 12

function fn11(): I { return new C(); }
>fn11 : () => I
>I : I
>new C() : C
>C : 类为 C

function fn12(): C { return new D(); }
>fn12 : () => C
>C : C
>new D() : D
>D : 类为 D

function fn13(): C { return null; }
>fn13 : () => C
>C : C
>null : 空值
>类型别名 :=> 空值

