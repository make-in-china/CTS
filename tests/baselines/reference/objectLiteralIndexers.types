=== tests/cases/compiler/objectLiteralIndexers.ts ===
interface A {
>A : A

    x: number;
>x : 数字
>类型别名 :=> 数字
}

interface B extends A {
>B : B
>A : A

    y: string;
>y : 文字
>类型别名 :=> 文字
}

var a: A;
>a : A
>A : A

var b: B;
>b : B
>B : B

var c: any;
>c : 任意
>类型别名 :=> 任意

var o1: { [s: string]: A;[n: number]: B; } = { x: a, 0: b }; // string indexer is A, number indexer is B
>o1 : { [s: 文字]: A; [n: 数字]: B; }
>s : 文字
>类型别名 :=> 文字
>A : A
>n : 数字
>类型别名 :=> 数字
>B : B
>{ x: a, 0: b } : { x: A; 0: B; }
>x : A
>a : A
>b : B

o1 = { x: b, 0: c }; // both indexers are any
>o1 = { x: b, 0: c } : { x: B; 0: 任意; }
>o1 : { [s: 文字]: A; [n: 数字]: B; }
>{ x: b, 0: c } : { x: B; 0: 任意; }
>x : B
>b : B
>c : 任意
>类型别名 :=> 任意

o1 = { x: c, 0: b }; // string indexer is any, number indexer is B
>o1 = { x: c, 0: b } : { x: 任意; 0: B; }
>o1 : { [s: 文字]: A; [n: 数字]: B; }
>{ x: c, 0: b } : { x: 任意; 0: B; }
>x : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>b : B

