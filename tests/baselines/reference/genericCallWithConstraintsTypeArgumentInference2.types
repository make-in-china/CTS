=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithConstraintsTypeArgumentInference2.ts ===
// Generic call with parameters of T and U, U extends T, no parameter of type U

function foo<T, U extends T>(t: T) {
>foo : <T, U extends T>(t: T) => U
>T : T
>U : U
>T : T
>t : T
>T : T

    var u: U;
>u : U
>U : U

    return u;
>u : U
}

var r = foo(1); // ok
>r : number
>类型别名 :=> 数字
>foo(1) : number
>类型别名 :=> 数字
>foo : <T, U extends T>(t: T) => U
>1 : 1

var r2 = foo(null); // {}
>r2 : {}
>foo(null) : {}
>foo : <T, U extends T>(t: T) => U
>null : null
>类型别名 :=> 空值

var r3 = foo(new Object()); // {}
>r3 : {}
>foo(new Object()) : {}
>foo : <T, U extends T>(t: T) => U
>new Object() : Object
>Object : ObjectConstructor

var r4 = foo<Date, Date>(1); // error
>r4 : any
>类型别名 :=> 任意
>foo<Date, Date>(1) : any
>类型别名 :=> 任意
>foo : <T, U extends T>(t: T) => U
>Date : Date
>Date : Date
>1 : 1

var r5 = foo<Date, Date>(new Date()); // no error
>r5 : Date
>foo<Date, Date>(new Date()) : Date
>foo : <T, U extends T>(t: T) => U
>Date : Date
>Date : Date
>new Date() : Date
>Date : DateConstructor

