=== tests/cases/compiler/noImplicitAnyParametersInAmbientClass.ts ===
declare class D_C {
>D_C : D_C

    // No implicit-'any' errors.
    public pub_f1(): void;
>pub_f1 : () => 无值

    // Implicit-'any' errors for x.
    public pub_f2(x): void;
>pub_f2 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    // No implicit-'any' errors.
    public pub_f3(x: any): void;
>pub_f3 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    // Implicit-'any' errors for x, y, and z.
    public pub_f4(x, y, z): void;
>pub_f4 : (x: 任意, y: 任意, z: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    // Implicit-'any' errors for x, and z.
    public pub_f5(x, y: any, z): void;
>pub_f5 : (x: 任意, y: 任意, z: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    // Implicit-'any[]' errors for r.
    public pub_f6(...r): void;
>pub_f6 : (...r: 任意[]) => 无值
>r : 任意[]

    // Implicit-'any'/'any[]' errors for x, r.
    public pub_f7(x, ...r): void;
>pub_f7 : (x: 任意, ...r: 任意[]) => 无值
>x : 任意
>类型别名 :=> 任意
>r : 任意[]

    // Implicit-'any' errors for x1, y2, x3, and y3.
    public pub_f8(x1, y1: number): any;
>pub_f8 : { (x1: 任意, y1: 数字): 任意; (x2: 文字, y2: 任意): 任意; (x3: 任意, y3: 任意): 任意; }
>x1 : 任意
>类型别名 :=> 任意
>y1 : 数字
>类型别名 :=> 数字

    public pub_f8(x2: string, y2): any;
>pub_f8 : { (x1: 任意, y1: 数字): 任意; (x2: 文字, y2: 任意): 任意; (x3: 任意, y3: 任意): 任意; }
>x2 : 文字
>类型别名 :=> 文字
>y2 : 任意
>类型别名 :=> 任意

    public pub_f8(x3, y3): any;
>pub_f8 : { (x1: 任意, y1: 数字): 任意; (x2: 文字, y2: 任意): 任意; (x3: 任意, y3: 任意): 任意; }
>x3 : 任意
>类型别名 :=> 任意
>y3 : 任意
>类型别名 :=> 任意

    // No implicit-'any' errors.
    public pub_f9: () => string;
>pub_f9 : () => 文字

    // Implicit-'any' error for x.
    public pub_f10: (x) => string;
>pub_f10 : (x: 任意) => 文字
>x : 任意
>类型别名 :=> 任意

    // Implicit-'any' errors for x, y, and z.
    public pub_f11: (x, y, z) => string;
>pub_f11 : (x: 任意, y: 任意, z: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    // Implicit-'any' errors for x and z.
    public pub_f12: (x, y: any, z) => string;
>pub_f12 : (x: 任意, y: 任意, z: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    // Implicit-'any[]' error for r.
    public pub_f13: (...r) => string;
>pub_f13 : (...r: 任意[]) => 文字
>r : 任意[]

    // Implicit-'any'/'any[]' errors for x, r.
    public pub_f14: (x, ...r) => string;
>pub_f14 : (x: 任意, ...r: 任意[]) => 文字
>x : 任意
>类型别名 :=> 任意
>r : 任意[]

    ///////////////////////////////////////////

    // No implicit-'any' errors.
    private priv_f1(): void;
>priv_f1 : () => 无值

    // No implicit-'any' errors.
    private priv_f2(x): void;
>priv_f2 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    // No implicit-'any' errors.
    private priv_f3(x: any): void;
>priv_f3 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    // No implicit-'any' errors.
    private priv_f4(x, y, z): void;
>priv_f4 : (x: 任意, y: 任意, z: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    // No implicit-'any' errors.
    private priv_f5(x, y: any, z): void;
>priv_f5 : (x: 任意, y: 任意, z: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    // No implicit-'any' errors.
    private priv_f6(...r): void;
>priv_f6 : (...r: 任意[]) => 无值
>r : 任意[]

    // No implicit-'any' errors.
    private priv_f7(x, ...r): void;
>priv_f7 : (x: 任意, ...r: 任意[]) => 无值
>x : 任意
>类型别名 :=> 任意
>r : 任意[]

    // No implicit-'any' errors.
    private priv_f8(x1, y1: number): any;
>priv_f8 : { (x1: 任意, y1: 数字): 任意; (x2: 文字, y2: 任意): 任意; (x3: 任意, y3: 任意): 任意; }
>x1 : 任意
>类型别名 :=> 任意
>y1 : 数字
>类型别名 :=> 数字

    private priv_f8(x2: string, y2): any;
>priv_f8 : { (x1: 任意, y1: 数字): 任意; (x2: 文字, y2: 任意): 任意; (x3: 任意, y3: 任意): 任意; }
>x2 : 文字
>类型别名 :=> 文字
>y2 : 任意
>类型别名 :=> 任意

    private priv_f8(x3, y3): any;
>priv_f8 : { (x1: 任意, y1: 数字): 任意; (x2: 文字, y2: 任意): 任意; (x3: 任意, y3: 任意): 任意; }
>x3 : 任意
>类型别名 :=> 任意
>y3 : 任意
>类型别名 :=> 任意

    // No implicit-'any' errors.
    private priv_f9: () => string;
>priv_f9 : () => 文字

    // Implicit-'any' error for x.
    private priv_f10: (x) => string;
>priv_f10 : (x: 任意) => 文字
>x : 任意
>类型别名 :=> 任意

    // Implicit-'any' errors for x, y, and z.
    private priv_f11: (x, y, z) => string;
>priv_f11 : (x: 任意, y: 任意, z: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    // Implicit-'any' errors for x and z.
    private priv_f12: (x, y: any, z) => string;
>priv_f12 : (x: 任意, y: 任意, z: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    // Implicit-'any[]' error for r.
    private priv_f13: (...r) => string;
>priv_f13 : (...r: 任意[]) => 文字
>r : 任意[]

    // Implicit-'any'/'any[]' errors for x, r.
    private priv_f14: (x, ...r) => string;
>priv_f14 : (x: 任意, ...r: 任意[]) => 文字
>x : 任意
>类型别名 :=> 任意
>r : 任意[]
}
