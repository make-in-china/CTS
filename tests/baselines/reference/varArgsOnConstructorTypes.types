=== tests/cases/compiler/varArgsOnConstructorTypes.ts ===
export class A {
>A : A

    constructor(ctor) { }
>ctor : any
>类型别名 :=> 任意
}

export class B extends A {
>B : B
>A : A

    private p1: number;
>p1 : number
>类型别名 :=> 数字

    private p2: string;
>p2 : string
>类型别名 :=> 文字

    constructor(element: any, url: string) {
>element : any
>类型别名 :=> 任意
>url : string
>类型别名 :=> 文字

       super(element);
>super(element) : void
>类型别名 :=> 无值
>super : typeof A
>element : any
>类型别名 :=> 任意

        this.p1 = element;
>this.p1 = element : any
>类型别名 :=> 任意
>this.p1 : number
>类型别名 :=> 数字
>this : this
>p1 : number
>类型别名 :=> 数字
>element : any
>类型别名 :=> 任意

        this.p2 = url;
>this.p2 = url : string
>类型别名 :=> 文字
>this.p2 : string
>类型别名 :=> 文字
>this : this
>p2 : string
>类型别名 :=> 文字
>url : string
>类型别名 :=> 文字
    }
}

export interface I1 {
>I1 : I1

    register(inputClass: new(...params: any[]) => A);
>register : { (inputClass: new (...params: any[]) => A): any; (inputClass: (new (...params: any[]) => A)[]): any; }
>inputClass : new (...params: any[]) => A
>params : any[]
>A : A

    register(inputClass: { new (...params: any[]): A; }[]);
>register : { (inputClass: new (...params: any[]) => A): any; (inputClass: (new (...params: any[]) => A)[]): any; }
>inputClass : (new (...params: any[]) => A)[]
>params : any[]
>A : A
}


var reg: I1;
>reg : I1
>I1 : I1

reg.register(B);
>reg.register(B) : any
>类型别名 :=> 任意
>reg.register : { (inputClass: new (...params: any[]) => A): any; (inputClass: (new (...params: any[]) => A)[]): any; }
>reg : I1
>register : { (inputClass: new (...params: any[]) => A): any; (inputClass: (new (...params: any[]) => A)[]): any; }
>B : typeof B

