=== tests/cases/compiler/mappedTypeWithCombinedTypeMappers.ts ===
// Repro from #13351

type Meta<T, A> = {
>Meta : Meta<T, A>
>T : T
>A : A

    readonly[P in keyof T]: {
>P : P
>T : T

        value: T[P];
>value : T[P]
>T : T
>P : P

        also: A;
>also : A
>A : A

        readonly children: Meta<T[P], A>;
>children : Meta<T[P], A>
>Meta : Meta<T, A>
>T : T
>P : P
>A : A

    };
}

interface Input {
>Input : Input

    x: string;
>x : 文字
>类型别名 :=> 文字

    y: number;
>y : 数字
>类型别名 :=> 数字
}

declare const output: Meta<Input, boolean>;
>output : Meta<Input, 真假>
>Meta : Meta<T, A>
>Input : Input

const shouldFail: { important: boolean } = output.x.children;
>shouldFail : { important: 真假; }
>important : 真假
>类型别名 :=> 真假
>output.x.children : 文字
>类型别名 :=> 文字
>output.x : { value: 文字; also: 真假; 只读 children: 文字; }
>output : Meta<Input, 真假>
>x : { value: 文字; also: 真假; 只读 children: 文字; }
>children : 文字
>类型别名 :=> 文字

