=== tests/cases/conformance/dynamicImport/0.ts ===
export class B {
>B : B

    print() { return "I am B"}
>print : () => 文字
>"I am B" : "I am B"
}

=== tests/cases/conformance/dynamicImport/2.ts ===
async function foo() {
>foo : () => Promise<无值>

    class C extends (await import("./0")).B {}
>C : C
>(await import("./0")).B : B
>(await import("./0")) : 类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }
>await import("./0") : 类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }
>import("./0") : Promise<类为 "tests/cases/conformance/dynamicImport/0" & { default: 类为 "tests/cases/conformance/dynamicImport/0"; }>
>"./0" : "./0"
>B : 类为 B

    var c = new C();
>c : C
>new C() : C
>C : 类为 C

    c.print();
>c.print() : 文字
>类型别名 :=> 文字
>c.print : () => 文字
>c : C
>print : () => 文字
}
foo();
>foo() : Promise<无值>
>foo : () => Promise<无值>

