=== tests/cases/compiler/arrayAssignmentTest5.ts ===
module Test {
>Test : typeof Test

    interface IState {
>IState : IState
    }
    interface IToken {
>IToken : IToken

        startIndex: number;
>startIndex : number
>类型别名 :=> 数字
    }
    interface IStateToken extends IToken {
>IStateToken : IStateToken
>IToken : IToken

        state: IState;
>state : IState
>IState : IState
    }
    interface ILineTokens {
>ILineTokens : ILineTokens

        tokens: IToken[];
>tokens : IToken[]
>IToken : IToken

        endState: IState;
>endState : IState
>IState : IState
    }
    interface IAction {
>IAction : IAction
    }
    interface IMode {
>IMode : IMode

        onEnter(line:string, state:IState, offset:number):IAction;
>onEnter : (line: string, state: IState, offset: number) => IAction
>line : string
>类型别名 :=> 文字
>state : IState
>IState : IState
>offset : number
>类型别名 :=> 数字
>IAction : IAction

        tokenize(line:string, state:IState, includeStates:boolean):ILineTokens;
>tokenize : (line: string, state: IState, includeStates: boolean) => ILineTokens
>line : string
>类型别名 :=> 文字
>state : IState
>IState : IState
>includeStates : boolean
>类型别名 :=> 真假
>ILineTokens : ILineTokens
    }
    export class Bug implements IMode {
>Bug : Bug
>IMode : IMode

        public onEnter(line:string, state:IState, offset:number):IAction {
>onEnter : (line: string, state: IState, offset: number) => IAction
>line : string
>类型别名 :=> 文字
>state : IState
>IState : IState
>offset : number
>类型别名 :=> 数字
>IAction : IAction

            var lineTokens:ILineTokens= this.tokenize(line, state, true);
>lineTokens : ILineTokens
>ILineTokens : ILineTokens
>this.tokenize(line, state, true) : ILineTokens
>this.tokenize : (line: string, state: IState, includeStates: boolean) => ILineTokens
>this : this
>tokenize : (line: string, state: IState, includeStates: boolean) => ILineTokens
>line : string
>类型别名 :=> 文字
>state : IState
>true : true
>类型别名 :=> 为真

            var tokens:IStateToken[]= lineTokens.tokens;
>tokens : IStateToken[]
>IStateToken : IStateToken
>lineTokens.tokens : IToken[]
>lineTokens : ILineTokens
>tokens : IToken[]

            if (tokens.length === 0) {
>tokens.length === 0 : boolean
>类型别名 :=> 真假
>tokens.length : number
>类型别名 :=> 数字
>tokens : IStateToken[]
>length : number
>类型别名 :=> 数字
>0 : 0

                return this.onEnter(line, tokens, offset);        // <== this should produce an error since onEnter can not be called with (string, IStateToken[], offset)
>this.onEnter(line, tokens, offset) : IAction
>this.onEnter : (line: string, state: IState, offset: number) => IAction
>this : this
>onEnter : (line: string, state: IState, offset: number) => IAction
>line : string
>类型别名 :=> 文字
>tokens : IStateToken[]
>offset : number
>类型别名 :=> 数字
            }
        }
        public tokenize(line:string, state:IState, includeStates:boolean):ILineTokens {
>tokenize : (line: string, state: IState, includeStates: boolean) => ILineTokens
>line : string
>类型别名 :=> 文字
>state : IState
>IState : IState
>includeStates : boolean
>类型别名 :=> 真假
>ILineTokens : ILineTokens

            return null;
>null : null
>类型别名 :=> 空值
        }
    }
}

