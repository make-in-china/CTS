=== /a/node_modules/@types/testCh/index.d.ts ===
//@@{ 测试:foo, 属性1:bar, 属性2:baz, 合成属性:nested, 甲:a, 乙:b }
导出 类型 测试 = {
>测试 : 测试

  属性1: 数字 | 空值;
>属性1 : number | null
>空值 : null
>类型别名 :=> 空值

  属性2: 文字;
>属性2 : string
>类型别名 :=> 文字

  合成属性: {
>合成属性 : { 甲: number; 乙: string | null; }

    甲: 数字;
>甲 : number
>类型别名 :=> 数字

    乙: 文字 | 空值;
>乙 : string | null
>空值 : null
>类型别名 :=> 空值
  }
}

//@@{ 元素1:elem1, 元素2:elem2 }
导出 类型 属性1 = {
>属性1 : 属性1

  元素1: 数字 | 空值;
>元素1 : number | null
>空值 : null
>类型别名 :=> 空值

  元素2: 测试 | 空值;
>元素2 : 测试 | null
>测试 : 测试
>空值 : null
>类型别名 :=> 空值
}

=== /a/测试_2_ch.ts ===
导入 { 测试, 属性1 } 来自 "testCh"
>测试 : any
>类型别名 :=> 任意
>属性1 : any
>类型别名 :=> 任意

常量 aFoo: 测试 = { bar: 3, 属性2: "b", 合成属性: { 甲: 1, 乙: "y" } };
>aFoo : 测试
>测试 : 测试
>{ bar: 3, 属性2: "b", 合成属性: { 甲: 1, 乙: "y" } } : { bar: number; 属性2: string; 合成属性: { 甲: number; 乙: string; }; }
>bar : number
>类型别名 :=> 数字
>3 : 3
>属性2 : string
>类型别名 :=> 文字
>"b" : "b"
>合成属性 : { 甲: number; 乙: string; }
>{ 甲: 1, 乙: "y" } : { 甲: number; 乙: string; }
>甲 : number
>类型别名 :=> 数字
>1 : 1
>乙 : string
>类型别名 :=> 文字
>"y" : "y"

如果 (aFoo.bar && aFoo.合成属性.乙) {
>aFoo.bar && aFoo.合成属性.乙 : string | 0 | null
>aFoo.bar : number | null
>aFoo : 测试
>bar : number | null
>aFoo.合成属性.乙 : string | null
>aFoo.合成属性 : { 甲: number; 乙: string | null; }
>aFoo : 测试
>合成属性 : { 甲: number; 乙: string | null; }
>乙 : string | null

  常量 { 属性1, 属性2, 合成属性: { 甲, 乙: text } } = aFoo;
>属性1 : number
>类型别名 :=> 数字
>属性2 : string
>类型别名 :=> 文字
>合成属性 : any
>类型别名 :=> 任意
>甲 : number
>类型别名 :=> 数字
>乙 : any
>类型别名 :=> 任意
>text : string
>类型别名 :=> 文字
>aFoo : 测试

  常量 A: 数字 = aFoo.bar;
>A : number
>类型别名 :=> 数字
>aFoo.bar : number
>类型别名 :=> 数字
>aFoo : 测试
>bar : number
>类型别名 :=> 数字

  常量 B: 数字 = 属性1;
>B : number
>类型别名 :=> 数字
>属性1 : number
>类型别名 :=> 数字

  常量 C: 文字 = 属性2;
>C : string
>类型别名 :=> 文字
>属性2 : string
>类型别名 :=> 文字

  常量 D: 数字 = 甲;
>D : number
>类型别名 :=> 数字
>甲 : number
>类型别名 :=> 数字

  常量 E: 文字 = text;
>E : string
>类型别名 :=> 文字
>text : string
>类型别名 :=> 文字
}

常量 bBar:属性1 = { 元素1: 7, 元素2: aFoo };
>bBar : 属性1
>属性1 : 属性1
>{ 元素1: 7, 元素2: aFoo } : { 元素1: number; 元素2: 测试; }
>元素1 : number
>类型别名 :=> 数字
>7 : 7
>元素2 : 测试
>aFoo : 测试

如果(bBar.元素2 && bBar.元素2.属性1 && bBar.元素2.合成属性.乙) {
>bBar.元素2 && bBar.元素2.属性1 && bBar.元素2.合成属性.乙 : string | 0 | null
>bBar.元素2 && bBar.元素2.属性1 : number | null
>bBar.元素2 : 测试 | null
>bBar : 属性1
>元素2 : 测试 | null
>bBar.元素2.属性1 : number | null
>bBar.元素2 : 测试
>bBar : 属性1
>元素2 : 测试
>属性1 : number | null
>bBar.元素2.合成属性.乙 : string | null
>bBar.元素2.合成属性 : { 甲: number; 乙: string | null; }
>bBar.元素2 : 测试
>bBar : 属性1
>元素2 : 测试
>合成属性 : { 甲: number; 乙: string | null; }
>乙 : string | null

  常量 { 属性1, 属性2, 合成属性: { 甲, 乙: text } } = bBar.元素2;
>属性1 : number
>类型别名 :=> 数字
>属性2 : string
>类型别名 :=> 文字
>合成属性 : any
>类型别名 :=> 任意
>甲 : number
>类型别名 :=> 数字
>乙 : any
>类型别名 :=> 任意
>text : string
>类型别名 :=> 文字
>bBar.元素2 : 测试
>bBar : 属性1
>元素2 : 测试

  常量 A: 数字 = bBar.元素2.属性1;
>A : number
>类型别名 :=> 数字
>bBar.元素2.属性1 : number
>类型别名 :=> 数字
>bBar.元素2 : 测试
>bBar : 属性1
>元素2 : 测试
>属性1 : number
>类型别名 :=> 数字

  常量 B: 数字 = 属性1;
>B : number
>类型别名 :=> 数字
>属性1 : number
>类型别名 :=> 数字

  常量 C: 文字 = 属性2;
>C : string
>类型别名 :=> 文字
>属性2 : string
>类型别名 :=> 文字

  常量 D: 数字 = 甲;
>D : number
>类型别名 :=> 数字
>甲 : number
>类型别名 :=> 数字

  常量 E: 文字 = text;
>E : string
>类型别名 :=> 文字
>text : string
>类型别名 :=> 文字
}

