=== tests/cases/compiler/map1.ts ===
import { Observable } from "./observable"
>Observable : 类为 Observable

(<any>Observable.prototype).map = function() { }
>(<any>Observable.prototype).map = function() { } : () => 无值
>(<any>Observable.prototype).map : 任意
>类型别名 :=> 任意
>(<any>Observable.prototype) : 任意
>类型别名 :=> 任意
><any>Observable.prototype : 任意
>类型别名 :=> 任意
>Observable.prototype : Observable<任意>
>Observable : 类为 Observable
>prototype : Observable<任意>
>map : 任意
>类型别名 :=> 任意
>function() { } : () => 无值

declare module "./observable" {
    interface I {x0}
>I : I
>x0 : 任意
>类型别名 :=> 任意
}

=== tests/cases/compiler/map2.ts ===
import { Observable } from "./observable"
>Observable : 类为 Observable

(<any>Observable.prototype).map = function() { }
>(<any>Observable.prototype).map = function() { } : () => 无值
>(<any>Observable.prototype).map : 任意
>类型别名 :=> 任意
>(<any>Observable.prototype) : 任意
>类型别名 :=> 任意
><any>Observable.prototype : 任意
>类型别名 :=> 任意
>Observable.prototype : Observable<任意>
>Observable : 类为 Observable
>prototype : Observable<任意>
>map : 任意
>类型别名 :=> 任意
>function() { } : () => 无值

declare module "./observable" {
    interface I {x1}
>I : I
>x1 : 任意
>类型别名 :=> 任意
}


=== tests/cases/compiler/observable.ts ===
export declare class Observable<T> {
>Observable : Observable<T>
>T : T

    filter(pred: (e:T) => boolean): Observable<T>;
>filter : (pred: (e: T) => 真假) => Observable<T>
>pred : (e: T) => 真假
>e : T
>T : T
>Observable : Observable<T>
>T : T
}

=== tests/cases/compiler/main.ts ===
import { Observable } from "./observable"
>Observable : 类为 Observable

import "./map1";
import "./map2";

let x: Observable<number>;
>x : Observable<数字>
>Observable : Observable<T>

