=== tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithUndefinedValueAndInvalidOperands.ts ===
// If one operand is the null or undefined value, it is treated as having the type of the other operand.

function foo(): void { return undefined }
>foo : () => 无值
>undefined : 未定
>类型别名 :=> 未定

var a: boolean;
>a : 真假
>类型别名 :=> 真假

var b: Object;
>b : Object
>Object : Object

var c: void;
>c : 无值
>类型别名 :=> 无值

var d: Number;
>d : Number
>Number : Number

// undefined + boolean/Object
var r1 = undefined + a;
>r1 : 任意
>类型别名 :=> 任意
>undefined + a : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>a : 真假
>类型别名 :=> 真假

var r2 = undefined + b;
>r2 : 任意
>类型别名 :=> 任意
>undefined + b : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>b : Object

var r3 = undefined + c;
>r3 : 任意
>类型别名 :=> 任意
>undefined + c : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>c : 无值
>类型别名 :=> 无值

var r4 = a + undefined;
>r4 : 任意
>类型别名 :=> 任意
>a + undefined : 任意
>类型别名 :=> 任意
>a : 真假
>类型别名 :=> 真假
>undefined : 未定
>类型别名 :=> 未定

var r5 = b + undefined;
>r5 : 任意
>类型别名 :=> 任意
>b + undefined : 任意
>类型别名 :=> 任意
>b : Object
>undefined : 未定
>类型别名 :=> 未定

var r6 = undefined + c;
>r6 : 任意
>类型别名 :=> 任意
>undefined + c : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>c : 无值
>类型别名 :=> 无值

// other cases
var r7 = undefined + d;
>r7 : 任意
>类型别名 :=> 任意
>undefined + d : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>d : Number

var r8 = undefined + true;
>r8 : 任意
>类型别名 :=> 任意
>undefined + true : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>true : 为真
>类型别名 :=> 为真

var r9 = undefined + { a: '' };
>r9 : 任意
>类型别名 :=> 任意
>undefined + { a: '' } : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>{ a: '' } : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>'' : ""

var r10 = undefined + foo();
>r10 : 任意
>类型别名 :=> 任意
>undefined + foo() : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>foo() : 无值
>类型别名 :=> 无值
>foo : () => 无值

var r11 = undefined + (() => { });
>r11 : 任意
>类型别名 :=> 任意
>undefined + (() => { }) : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>(() => { }) : () => 无值
>() => { } : () => 无值

