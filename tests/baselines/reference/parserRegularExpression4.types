=== tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpression4.ts ===
if (Ca.test(c.href) || Ba.test(c.href) && /(\\?|&)adurl=/.test(c.href) && !/(\\?|&)q=/.test(c.href)) / (\\ ? | & ) rct = j / .test(c.href) || (d += "&rct=j"), /(\\?|&)q=/.test(c.href) || (d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length)), b = !0;
>Ca.test(c.href) || Ba.test(c.href) && /(\\?|&)adurl=/.test(c.href) && !/(\\?|&)q=/.test(c.href) : any
>类型别名 :=> 任意
>Ca.test(c.href) : any
>类型别名 :=> 任意
>Ca.test : any
>类型别名 :=> 任意
>Ca : any
>类型别名 :=> 任意
>test : any
>类型别名 :=> 任意
>c.href : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>href : any
>类型别名 :=> 任意
>Ba.test(c.href) && /(\\?|&)adurl=/.test(c.href) && !/(\\?|&)q=/.test(c.href) : boolean
>类型别名 :=> 真假
>Ba.test(c.href) && /(\\?|&)adurl=/.test(c.href) : boolean
>类型别名 :=> 真假
>Ba.test(c.href) : any
>类型别名 :=> 任意
>Ba.test : any
>类型别名 :=> 任意
>Ba : any
>类型别名 :=> 任意
>test : any
>类型别名 :=> 任意
>c.href : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>href : any
>类型别名 :=> 任意
>/(\\?|&)adurl=/.test(c.href) : boolean
>类型别名 :=> 真假
>/(\\?|&)adurl=/.test : (string: string) => boolean
>/(\\?|&)adurl=/ : RegExp
>test : (string: string) => boolean
>c.href : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>href : any
>类型别名 :=> 任意
>!/(\\?|&)q=/.test(c.href) : boolean
>类型别名 :=> 真假
>/(\\?|&)q=/.test(c.href) : boolean
>类型别名 :=> 真假
>/(\\?|&)q=/.test : (string: string) => boolean
>/(\\?|&)q=/ : RegExp
>test : (string: string) => boolean
>c.href : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>href : any
>类型别名 :=> 任意
>/ (\\ ? | & ) rct = j / .test(c.href) || (d += "&rct=j"), /(\\?|&)q=/.test(c.href) || (d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length)), b = !0 : true
>类型别名 :=> 为真
>/ (\\ ? | & ) rct = j / .test(c.href) || (d += "&rct=j"), /(\\?|&)q=/.test(c.href) || (d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length)) : any
>类型别名 :=> 任意
>/ (\\ ? | & ) rct = j / .test(c.href) || (d += "&rct=j") : string | true
>/ (\\ ? | & ) rct = j / .test(c.href) : boolean
>类型别名 :=> 真假
>/ (\\ ? | & ) rct = j / .test : (string: string) => boolean
>/ (\\ ? | & ) rct = j / : RegExp
>test : (string: string) => boolean
>c.href : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>href : any
>类型别名 :=> 任意
>(d += "&rct=j") : string
>类型别名 :=> 文字
>d += "&rct=j" : string
>类型别名 :=> 文字
>d : any
>类型别名 :=> 任意
>"&rct=j" : "&rct=j"
>/(\\?|&)q=/.test(c.href) || (d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length)) : any
>类型别名 :=> 任意
>/(\\?|&)q=/.test(c.href) : boolean
>类型别名 :=> 真假
>/(\\?|&)q=/.test : (string: string) => boolean
>/(\\?|&)q=/ : RegExp
>test : (string: string) => boolean
>c.href : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>href : any
>类型别名 :=> 任意
>(d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length)) : any
>类型别名 :=> 任意
>d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length) : any
>类型别名 :=> 任意
>d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A) : string
>类型别名 :=> 文字
>d : any
>类型别名 :=> 任意
>"&q=" + encodeURIComponent(W("q") || W("as_q") || A) : string
>类型别名 :=> 文字
>"&q=" : "&q="
>encodeURIComponent(W("q") || W("as_q") || A) : string
>类型别名 :=> 文字
>encodeURIComponent : (uriComponent: string) => string
>W("q") || W("as_q") || A : any
>类型别名 :=> 任意
>W("q") || W("as_q") : any
>类型别名 :=> 任意
>W("q") : any
>类型别名 :=> 任意
>W : any
>类型别名 :=> 任意
>"q" : "q"
>W("as_q") : any
>类型别名 :=> 任意
>W : any
>类型别名 :=> 任意
>"as_q" : "as_q"
>A : any
>类型别名 :=> 任意
>d = d.substring(0, 1948 - c.href.length) : any
>类型别名 :=> 任意
>d : any
>类型别名 :=> 任意
>d.substring(0, 1948 - c.href.length) : any
>类型别名 :=> 任意
>d.substring : any
>类型别名 :=> 任意
>d : any
>类型别名 :=> 任意
>substring : any
>类型别名 :=> 任意
>0 : 0
>1948 - c.href.length : number
>类型别名 :=> 数字
>1948 : 1948
>c.href.length : any
>类型别名 :=> 任意
>c.href : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>href : any
>类型别名 :=> 任意
>length : any
>类型别名 :=> 任意
>b = !0 : true
>类型别名 :=> 为真
>b : any
>类型别名 :=> 任意
>!0 : true
>类型别名 :=> 为真
>0 : 0

