=== tests/cases/compiler/constIndexedAccess.ts ===
const enum numbers {
>numbers : numbers

    zero,
>zero : numbers.zero

    one
>one : numbers.one
}

interface indexAccess {
>indexAccess : indexAccess

    0: string;
    1: number;
}

let test: indexAccess;
>test : indexAccess
>indexAccess : indexAccess

let s = test[0];
>s : 文字
>类型别名 :=> 文字
>test[0] : 文字
>类型别名 :=> 文字
>test : indexAccess
>0 : 0

let n = test[1];
>n : 数字
>类型别名 :=> 数字
>test[1] : 数字
>类型别名 :=> 数字
>test : indexAccess
>1 : 1

let s1 = test[numbers.zero];
>s1 : 文字
>类型别名 :=> 文字
>test[numbers.zero] : 文字
>类型别名 :=> 文字
>test : indexAccess
>numbers.zero : numbers.zero
>numbers : 类为 numbers
>zero : numbers.zero

let n1 = test[numbers.one];
>n1 : 数字
>类型别名 :=> 数字
>test[numbers.one] : 数字
>类型别名 :=> 数字
>test : indexAccess
>numbers.one : numbers.one
>numbers : 类为 numbers
>one : numbers.one

let s2 = test[numbers["zero"]];
>s2 : 文字
>类型别名 :=> 文字
>test[numbers["zero"]] : 文字
>类型别名 :=> 文字
>test : indexAccess
>numbers["zero"] : numbers.zero
>numbers : 类为 numbers
>"zero" : "zero"

let n2 = test[numbers["one"]];
>n2 : 数字
>类型别名 :=> 数字
>test[numbers["one"]] : 数字
>类型别名 :=> 数字
>test : indexAccess
>numbers["one"] : numbers.one
>numbers : 类为 numbers
>"one" : "one"

enum numbersNotConst {
>numbersNotConst : numbersNotConst

    zero,
>zero : numbersNotConst.zero

    one
>one : numbersNotConst.one
}

let s3 = test[numbersNotConst.zero];
>s3 : 文字
>类型别名 :=> 文字
>test[numbersNotConst.zero] : 文字
>类型别名 :=> 文字
>test : indexAccess
>numbersNotConst.zero : numbersNotConst.zero
>numbersNotConst : 类为 numbersNotConst
>zero : numbersNotConst.zero

let n3 = test[numbersNotConst.one];
>n3 : 数字
>类型别名 :=> 数字
>test[numbersNotConst.one] : 数字
>类型别名 :=> 数字
>test : indexAccess
>numbersNotConst.one : numbersNotConst.one
>numbersNotConst : 类为 numbersNotConst
>one : numbersNotConst.one

