=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react')
>React : 类为 React

export interface ClickableProps {
>ClickableProps : ClickableProps

    children?: string;
>children : 文字
>类型别名 :=> 文字

    className?: string;
>className : 文字
>类型别名 :=> 文字
}

export interface ButtonProps extends ClickableProps {
>ButtonProps : ButtonProps
>ClickableProps : ClickableProps

    onClick: React.MouseEventHandler<any>;
>onClick : React.EventHandler<React.MouseEvent<任意>>
>React : 任意
>类型别名 :=> 任意
>MouseEventHandler : React.EventHandler<React.MouseEvent<T>>
}

export interface LinkProps extends ClickableProps {
>LinkProps : LinkProps
>ClickableProps : ClickableProps

    to: string;
>to : 文字
>类型别名 :=> 文字
}

export interface HyphenProps extends ClickableProps {
>HyphenProps : HyphenProps
>ClickableProps : ClickableProps

    "data-format": string;
}

let obj = {
>obj : { children: 文字; to: 文字; }
>{    children: "hi",    to: "boo"} : { children: 文字; to: 文字; }

    children: "hi",
>children : 文字
>类型别名 :=> 文字
>"hi" : "hi"

    to: "boo"
>to : 文字
>类型别名 :=> 文字
>"boo" : "boo"
}
let obj1: any;
>obj1 : 任意
>类型别名 :=> 任意

let obj2 = {
>obj2 : { onClick: () => 无值; }
>{    onClick: () => {}} : { onClick: () => 无值; }

    onClick: () => {}
>onClick : () => 无值
>() => {} : () => 无值
}

export function MainButton(buttonProps: ButtonProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>buttonProps : ButtonProps
>ButtonProps : ButtonProps
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

export function MainButton(linkProps: LinkProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>linkProps : LinkProps
>LinkProps : LinkProps
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

export function MainButton(hyphenProps: HyphenProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>hyphenProps : HyphenProps
>HyphenProps : HyphenProps
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

export function MainButton(props: ButtonProps | LinkProps | HyphenProps): JSX.Element {
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>props : ButtonProps | LinkProps | HyphenProps
>ButtonProps : ButtonProps
>LinkProps : LinkProps
>HyphenProps : HyphenProps
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

    const linkProps = props as LinkProps;
>linkProps : LinkProps
>props as LinkProps : LinkProps
>props : ButtonProps | LinkProps | HyphenProps
>LinkProps : LinkProps

    if(linkProps.to) {
>linkProps.to : 文字
>类型别名 :=> 文字
>linkProps : LinkProps
>to : 文字
>类型别名 :=> 文字

        return this._buildMainLink(props);
>this._buildMainLink(props) : 任意
>类型别名 :=> 任意
>this._buildMainLink : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>_buildMainLink : 任意
>类型别名 :=> 任意
>props : ButtonProps | LinkProps | HyphenProps
    }

    return this._buildMainButton(props);
>this._buildMainButton(props) : 任意
>类型别名 :=> 任意
>this._buildMainButton : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>_buildMainButton : 任意
>类型别名 :=> 任意
>props : ButtonProps | LinkProps | HyphenProps
}

// OK
const b0 = <MainButton to='/some/path'>GO</MainButton>;
>b0 : JSX.Element
><MainButton to='/some/path'>GO</MainButton> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>to : 文字
>类型别名 :=> 文字
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }

const b1 = <MainButton onClick={(e) => {}}>Hello world</MainButton>;
>b1 : JSX.Element
><MainButton onClick={(e) => {}}>Hello world</MainButton> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>onClick : (e: React.MouseEvent<任意>) => 无值
>(e) => {} : (e: React.MouseEvent<任意>) => 无值
>e : React.MouseEvent<任意>
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }

const b2 = <MainButton {...obj} />;
>b2 : JSX.Element
><MainButton {...obj} /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>obj : { children: 文字; to: 文字; }

const b3 = <MainButton {...{to: 10000}} {...obj} />;
>b3 : JSX.Element
><MainButton {...{to: 10000}} {...obj} /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>{to: 10000} : { to: 数字; }
>to : 数字
>类型别名 :=> 数字
>10000 : 10000
>obj : { children: 文字; to: 文字; }

const b4 = <MainButton {...obj1} />;  // any; just pick the first overload
>b4 : JSX.Element
><MainButton {...obj1} /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>obj1 : 任意
>类型别名 :=> 任意

const b5 = <MainButton {...obj1} to="/to/somewhere" />;  // should pick the second overload
>b5 : JSX.Element
><MainButton {...obj1} to="/to/somewhere" /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>obj1 : 任意
>类型别名 :=> 任意
>to : 文字
>类型别名 :=> 文字

const b6 = <MainButton {...obj2} />;
>b6 : JSX.Element
><MainButton {...obj2} /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>obj2 : { onClick: () => 无值; }

const b7 = <MainButton {...{onClick: () => { console.log("hi") }}} />;
>b7 : JSX.Element
><MainButton {...{onClick: () => { console.log("hi") }}} /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>{onClick: () => { console.log("hi") }} : { onClick: () => 无值; }
>onClick : () => 无值
>() => { console.log("hi") } : () => 无值
>console.log("hi") : 无值
>类型别名 :=> 无值
>console.log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>console : Console
>log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>"hi" : "hi"

const b8 = <MainButton {...{onClick() {}}} />;  // OK; method declaration get retained (See GitHub #13365)
>b8 : JSX.Element
><MainButton {...{onClick() {}}} /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>{onClick() {}} : { onClick(): 无值; }
>onClick : () => 无值

const b9 = <MainButton to='/some/path' extra-prop>GO</MainButton>;
>b9 : JSX.Element
><MainButton to='/some/path' extra-prop>GO</MainButton> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>to : 文字
>类型别名 :=> 文字
>extra-prop : 为真
>类型别名 :=> 为真
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }

const b10 = <MainButton to='/some/path' children="hi" ></MainButton>;
>b10 : JSX.Element
><MainButton to='/some/path' children="hi" ></MainButton> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>to : 文字
>类型别名 :=> 文字
>children : 文字
>类型别名 :=> 文字
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }

const b11 = <MainButton onClick={(e) => {}} className="hello" data-format>Hello world</MainButton>;
>b11 : JSX.Element
><MainButton onClick={(e) => {}} className="hello" data-format>Hello world</MainButton> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>onClick : (e: React.MouseEvent<任意>) => 无值
>(e) => {} : (e: React.MouseEvent<任意>) => 无值
>e : React.MouseEvent<任意>
>className : 文字
>类型别名 :=> 文字
>data-format : 为真
>类型别名 :=> 为真
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }

const b12 = <MainButton data-format="Hello world" />
>b12 : JSX.Element
><MainButton data-format="Hello world" /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
>data-format : 文字
>类型别名 :=> 文字



