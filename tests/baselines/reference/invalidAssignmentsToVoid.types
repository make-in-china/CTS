=== tests/cases/conformance/types/primitives/void/invalidAssignmentsToVoid.ts ===
var x: void;
>x : 无值
>类型别名 :=> 无值

x = 1;
>x = 1 : 1
>x : 无值
>类型别名 :=> 无值
>1 : 1

x = true;
>x = true : 为真
>类型别名 :=> 为真
>x : 无值
>类型别名 :=> 无值
>true : 为真
>类型别名 :=> 为真

x = '';
>x = '' : ""
>x : 无值
>类型别名 :=> 无值
>'' : ""

x = {}
>x = {} : {}
>x : 无值
>类型别名 :=> 无值
>{} : {}

class C { foo: string; }
>C : C
>foo : 文字
>类型别名 :=> 文字

var c: C;
>c : C
>C : C

x = C;
>x = C : 类为 C
>x : 无值
>类型别名 :=> 无值
>C : 类为 C

x = c;
>x = c : C
>x : 无值
>类型别名 :=> 无值
>c : C

interface I { foo: string; }
>I : I
>foo : 文字
>类型别名 :=> 文字

var i: I;
>i : I
>I : I

x = i;
>x = i : I
>x : 无值
>类型别名 :=> 无值
>i : I

module M { export var x = 1; }
>M : 类为 M
>x : 数字
>类型别名 :=> 数字
>1 : 1

x = M;
>x = M : 类为 M
>x : 无值
>类型别名 :=> 无值
>M : 类为 M

function f<T>(a: T) {
>f : <T>(a: T) => 无值
>T : T
>a : T
>T : T

    x = a;
>x = a : T
>x : 无值
>类型别名 :=> 无值
>a : T
}
x = f;
>x = f : <T>(a: T) => 无值
>x : 无值
>类型别名 :=> 无值
>f : <T>(a: T) => 无值

