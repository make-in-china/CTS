=== tests/cases/compiler/genericReversingTypeParameters.ts ===
class BiMap<K, V> {
>BiMap : BiMap<K, V>
>K : K
>V : V

    private inverseBiMap: BiMap<V, K>;
>inverseBiMap : BiMap<V, K>
>BiMap : BiMap<K, V>
>V : V
>K : K

    public get(key: K): V { return null; }
>get : (key: K) => V
>key : K
>K : K
>V : V
>null : 空值
>类型别名 :=> 空值

    public inverse(): BiMap<V, K> { return null; }
>inverse : () => BiMap<V, K>
>BiMap : BiMap<K, V>
>V : V
>K : K
>null : 空值
>类型别名 :=> 空值
}

var b = new BiMap<string, number>();
>b : BiMap<文字, 数字>
>new BiMap<string, number>() : BiMap<文字, 数字>
>BiMap : 类为 BiMap

var r1 = b.get(''); 
>r1 : 数字
>类型别名 :=> 数字
>b.get('') : 数字
>类型别名 :=> 数字
>b.get : (key: 文字) => 数字
>b : BiMap<文字, 数字>
>get : (key: 文字) => 数字
>'' : ""

var i = b.inverse(); // used to get the type wrong here.
>i : BiMap<数字, 文字>
>b.inverse() : BiMap<数字, 文字>
>b.inverse : () => BiMap<数字, 文字>
>b : BiMap<文字, 数字>
>inverse : () => BiMap<数字, 文字>

var r2b = i.get(1); 
>r2b : 文字
>类型别名 :=> 文字
>i.get(1) : 文字
>类型别名 :=> 文字
>i.get : (key: 数字) => 文字
>i : BiMap<数字, 文字>
>get : (key: 数字) => 文字
>1 : 1

