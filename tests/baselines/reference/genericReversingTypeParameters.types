=== tests/cases/compiler/genericReversingTypeParameters.ts ===
class BiMap<K, V> {
>BiMap : BiMap<K, V>
>K : K
>V : V

    private inverseBiMap: BiMap<V, K>;
>inverseBiMap : BiMap<V, K>
>BiMap : BiMap<K, V>
>V : V
>K : K

    public get(key: K): V { return null; }
>get : (key: K) => V
>key : K
>K : K
>V : V
>null : null
>类型别名 :=> 空值

    public inverse(): BiMap<V, K> { return null; }
>inverse : () => BiMap<V, K>
>BiMap : BiMap<K, V>
>V : V
>K : K
>null : null
>类型别名 :=> 空值
}

var b = new BiMap<string, number>();
>b : BiMap<string, number>
>new BiMap<string, number>() : BiMap<string, number>
>BiMap : typeof BiMap

var r1 = b.get(''); 
>r1 : number
>类型别名 :=> 数字
>b.get('') : number
>类型别名 :=> 数字
>b.get : (key: string) => number
>b : BiMap<string, number>
>get : (key: string) => number
>'' : ""

var i = b.inverse(); // used to get the type wrong here.
>i : BiMap<number, string>
>b.inverse() : BiMap<number, string>
>b.inverse : () => BiMap<number, string>
>b : BiMap<string, number>
>inverse : () => BiMap<number, string>

var r2b = i.get(1); 
>r2b : string
>类型别名 :=> 文字
>i.get(1) : string
>类型别名 :=> 文字
>i.get : (key: number) => string
>i : BiMap<number, string>
>get : (key: number) => string
>1 : 1

