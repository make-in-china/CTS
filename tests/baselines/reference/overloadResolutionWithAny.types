=== tests/cases/compiler/overloadResolutionWithAny.ts ===
var func: {
>func : { (s: string): number; (s: any): string; }

    (s: string): number;
>s : string
>类型别名 :=> 文字

    (s: any): string;
>s : any
>类型别名 :=> 任意

};

func(""); // number
>func("") : number
>类型别名 :=> 数字
>func : { (s: string): number; (s: any): string; }
>"" : ""

func(3); // string
>func(3) : string
>类型别名 :=> 文字
>func : { (s: string): number; (s: any): string; }
>3 : 3

var x: any;
>x : any
>类型别名 :=> 任意

func(x); // string
>func(x) : string
>类型别名 :=> 文字
>func : { (s: string): number; (s: any): string; }
>x : any
>类型别名 :=> 任意

var func2: {
>func2 : { (s: string, t: string): number; (s: any, t: string): boolean; (s: string, t: any): RegExp; (s: any, t: any): string; }

    (s: string, t: string): number;
>s : string
>类型别名 :=> 文字
>t : string
>类型别名 :=> 文字

    (s: any, t: string): boolean;
>s : any
>类型别名 :=> 任意
>t : string
>类型别名 :=> 文字

    (s: string, t: any): RegExp;
>s : string
>类型别名 :=> 文字
>t : any
>类型别名 :=> 任意
>RegExp : RegExp

    (s: any, t: any): string;
>s : any
>类型别名 :=> 任意
>t : any
>类型别名 :=> 任意
}

func2(x, x); // string
>func2(x, x) : string
>类型别名 :=> 文字
>func2 : { (s: string, t: string): number; (s: any, t: string): boolean; (s: string, t: any): RegExp; (s: any, t: any): string; }
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

func2("", ""); // number
>func2("", "") : number
>类型别名 :=> 数字
>func2 : { (s: string, t: string): number; (s: any, t: string): boolean; (s: string, t: any): RegExp; (s: any, t: any): string; }
>"" : ""
>"" : ""

func2(x, ""); // boolean
>func2(x, "") : boolean
>类型别名 :=> 真假
>func2 : { (s: string, t: string): number; (s: any, t: string): boolean; (s: string, t: any): RegExp; (s: any, t: any): string; }
>x : any
>类型别名 :=> 任意
>"" : ""

func2("", x); // RegExp
>func2("", x) : RegExp
>func2 : { (s: string, t: string): number; (s: any, t: string): boolean; (s: string, t: any): RegExp; (s: any, t: any): string; }
>"" : ""
>x : any
>类型别名 :=> 任意

