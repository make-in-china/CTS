=== tests/cases/conformance/types/union/discriminatedUnionTypes1.ts ===
interface Square {
>Square : Square

    kind: "square";
>kind : "square"

    size: number;
>size : number
>类型别名 :=> 数字
}

interface Rectangle {
>Rectangle : Rectangle

    kind: "rectangle";
>kind : "rectangle"

    width: number;
>width : number
>类型别名 :=> 数字

    height: number;
>height : number
>类型别名 :=> 数字
}

interface Circle {
>Circle : Circle

    kind: "circle";
>kind : "circle"

    radius: number;
>radius : number
>类型别名 :=> 数字
}

type Shape = Square | Rectangle | Circle;
>Shape : Shape
>Square : Square
>Rectangle : Rectangle
>Circle : Circle

function area1(s: Shape) {
>area1 : (s: Shape) => number
>s : Shape
>Shape : Shape

    if (s.kind === "square") {
>s.kind === "square" : boolean
>类型别名 :=> 真假
>s.kind : "square" | "rectangle" | "circle"
>s : Shape
>kind : "square" | "rectangle" | "circle"
>"square" : "square"

        return s.size * s.size;
>s.size * s.size : number
>类型别名 :=> 数字
>s.size : number
>类型别名 :=> 数字
>s : Square
>size : number
>类型别名 :=> 数字
>s.size : number
>类型别名 :=> 数字
>s : Square
>size : number
>类型别名 :=> 数字
    }
    else if (s.kind === "circle") {
>s.kind === "circle" : boolean
>类型别名 :=> 真假
>s.kind : "rectangle" | "circle"
>s : Rectangle | Circle
>kind : "rectangle" | "circle"
>"circle" : "circle"

        return Math.PI * s.radius * s.radius;
>Math.PI * s.radius * s.radius : number
>类型别名 :=> 数字
>Math.PI * s.radius : number
>类型别名 :=> 数字
>Math.PI : number
>类型别名 :=> 数字
>Math : Math
>PI : number
>类型别名 :=> 数字
>s.radius : number
>类型别名 :=> 数字
>s : Circle
>radius : number
>类型别名 :=> 数字
>s.radius : number
>类型别名 :=> 数字
>s : Circle
>radius : number
>类型别名 :=> 数字
    }
    else if (s.kind === "rectangle") {
>s.kind === "rectangle" : boolean
>类型别名 :=> 真假
>s.kind : "rectangle"
>s : Rectangle
>kind : "rectangle"
>"rectangle" : "rectangle"

        return s.width * s.height;
>s.width * s.height : number
>类型别名 :=> 数字
>s.width : number
>类型别名 :=> 数字
>s : Rectangle
>width : number
>类型别名 :=> 数字
>s.height : number
>类型别名 :=> 数字
>s : Rectangle
>height : number
>类型别名 :=> 数字
    }
    else {
        return 0;
>0 : 0
    }
}

function area2(s: Shape) {
>area2 : (s: Shape) => number
>s : Shape
>Shape : Shape

    switch (s.kind) {
>s.kind : "square" | "rectangle" | "circle"
>s : Shape
>kind : "square" | "rectangle" | "circle"

        case "square": return s.size * s.size;
>"square" : "square"
>s.size * s.size : number
>类型别名 :=> 数字
>s.size : number
>类型别名 :=> 数字
>s : Square
>size : number
>类型别名 :=> 数字
>s.size : number
>类型别名 :=> 数字
>s : Square
>size : number
>类型别名 :=> 数字

        case "rectangle": return s.width * s.height;
>"rectangle" : "rectangle"
>s.width * s.height : number
>类型别名 :=> 数字
>s.width : number
>类型别名 :=> 数字
>s : Rectangle
>width : number
>类型别名 :=> 数字
>s.height : number
>类型别名 :=> 数字
>s : Rectangle
>height : number
>类型别名 :=> 数字

        case "circle": return Math.PI * s.radius * s.radius;
>"circle" : "circle"
>Math.PI * s.radius * s.radius : number
>类型别名 :=> 数字
>Math.PI * s.radius : number
>类型别名 :=> 数字
>Math.PI : number
>类型别名 :=> 数字
>Math : Math
>PI : number
>类型别名 :=> 数字
>s.radius : number
>类型别名 :=> 数字
>s : Circle
>radius : number
>类型别名 :=> 数字
>s.radius : number
>类型别名 :=> 数字
>s : Circle
>radius : number
>类型别名 :=> 数字
    }
}

function assertNever(x: never): never {
>assertNever : (x: never) => never
>x : never
>类型别名 :=> 不及

    throw new Error("Unexpected object: " + x);
>new Error("Unexpected object: " + x) : Error
>Error : ErrorConstructor
>"Unexpected object: " + x : string
>类型别名 :=> 文字
>"Unexpected object: " : "Unexpected object: "
>x : never
>类型别名 :=> 不及
}

function area3(s: Shape) {
>area3 : (s: Shape) => number
>s : Shape
>Shape : Shape

    switch (s.kind) {
>s.kind : "square" | "rectangle" | "circle"
>s : Shape
>kind : "square" | "rectangle" | "circle"

        case "square": return s.size * s.size;
>"square" : "square"
>s.size * s.size : number
>类型别名 :=> 数字
>s.size : number
>类型别名 :=> 数字
>s : Square
>size : number
>类型别名 :=> 数字
>s.size : number
>类型别名 :=> 数字
>s : Square
>size : number
>类型别名 :=> 数字

        case "rectangle": return s.width * s.height;
>"rectangle" : "rectangle"
>s.width * s.height : number
>类型别名 :=> 数字
>s.width : number
>类型别名 :=> 数字
>s : Rectangle
>width : number
>类型别名 :=> 数字
>s.height : number
>类型别名 :=> 数字
>s : Rectangle
>height : number
>类型别名 :=> 数字

        case "circle": return Math.PI * s.radius * s.radius;
>"circle" : "circle"
>Math.PI * s.radius * s.radius : number
>类型别名 :=> 数字
>Math.PI * s.radius : number
>类型别名 :=> 数字
>Math.PI : number
>类型别名 :=> 数字
>Math : Math
>PI : number
>类型别名 :=> 数字
>s.radius : number
>类型别名 :=> 数字
>s : Circle
>radius : number
>类型别名 :=> 数字
>s.radius : number
>类型别名 :=> 数字
>s : Circle
>radius : number
>类型别名 :=> 数字

        default: return assertNever(s);
>assertNever(s) : never
>类型别名 :=> 不及
>assertNever : (x: never) => never
>s : never
>类型别名 :=> 不及
    }
}

function area4(s: Shape) {
>area4 : (s: Shape) => number
>s : Shape
>Shape : Shape

    switch (s.kind) {
>s.kind : "square" | "rectangle" | "circle"
>s : Shape
>kind : "square" | "rectangle" | "circle"

        case "square": return s.size * s.size;
>"square" : "square"
>s.size * s.size : number
>类型别名 :=> 数字
>s.size : number
>类型别名 :=> 数字
>s : Square
>size : number
>类型别名 :=> 数字
>s.size : number
>类型别名 :=> 数字
>s : Square
>size : number
>类型别名 :=> 数字

        case "rectangle": return s.width * s.height;
>"rectangle" : "rectangle"
>s.width * s.height : number
>类型别名 :=> 数字
>s.width : number
>类型别名 :=> 数字
>s : Rectangle
>width : number
>类型别名 :=> 数字
>s.height : number
>类型别名 :=> 数字
>s : Rectangle
>height : number
>类型别名 :=> 数字

        case "circle": return Math.PI * s.radius * s.radius;
>"circle" : "circle"
>Math.PI * s.radius * s.radius : number
>类型别名 :=> 数字
>Math.PI * s.radius : number
>类型别名 :=> 数字
>Math.PI : number
>类型别名 :=> 数字
>Math : Math
>PI : number
>类型别名 :=> 数字
>s.radius : number
>类型别名 :=> 数字
>s : Circle
>radius : number
>类型别名 :=> 数字
>s.radius : number
>类型别名 :=> 数字
>s : Circle
>radius : number
>类型别名 :=> 数字
    }
    return assertNever(s);
>assertNever(s) : never
>类型别名 :=> 不及
>assertNever : (x: never) => never
>s : never
>类型别名 :=> 不及
}

type Message =
>Message : Message

    { kind: "A", x: string } |
>kind : "A"
>x : string
>类型别名 :=> 文字

    { kind: "B" | "C", y: number } |
>kind : "B" | "C"
>y : number
>类型别名 :=> 数字

    { kind: "D" };
>kind : "D"

function f1(m: Message) {
>f1 : (m: Message) => void
>m : Message
>Message : Message

    if (m.kind === "A") {
>m.kind === "A" : boolean
>类型别名 :=> 真假
>m.kind : "A" | "B" | "C" | "D"
>m : Message
>kind : "A" | "B" | "C" | "D"
>"A" : "A"

        m;  // { kind: "A", x: string }
>m : { kind: "A"; x: string; }
    }
    else if (m.kind === "D") {
>m.kind === "D" : boolean
>类型别名 :=> 真假
>m.kind : "B" | "C" | "D"
>m : { kind: "B" | "C"; y: number; } | { kind: "D"; }
>kind : "B" | "C" | "D"
>"D" : "D"

        m;  // { kind: "D" }
>m : { kind: "D"; }
    }
    else {
        m;  // { kind: "B" | "C", y: number }
>m : { kind: "B" | "C"; y: number; }
    }
}

function f2(m: Message) {
>f2 : (m: Message) => void
>m : Message
>Message : Message

    if (m.kind === "A") {
>m.kind === "A" : boolean
>类型别名 :=> 真假
>m.kind : "A" | "B" | "C" | "D"
>m : Message
>kind : "A" | "B" | "C" | "D"
>"A" : "A"

        return;
    }
    m;  // { kind: "B" | "C", y: number } | { kind: "D" }
>m : { kind: "B" | "C"; y: number; } | { kind: "D"; }
}

function f3(m: Message) {
>f3 : (m: Message) => void
>m : Message
>Message : Message

    if (m.kind === "X") {
>m.kind === "X" : boolean
>类型别名 :=> 真假
>m.kind : "A" | "B" | "C" | "D"
>m : Message
>kind : "A" | "B" | "C" | "D"
>"X" : "X"

        m;  // never
>m : Message
    }
}

function f4(m: Message, x: "A" | "D") {
>f4 : (m: Message, x: "A" | "D") => void
>m : Message
>Message : Message
>x : "A" | "D"

    if (m.kind == x) {
>m.kind == x : boolean
>类型别名 :=> 真假
>m.kind : "A" | "B" | "C" | "D"
>m : Message
>kind : "A" | "B" | "C" | "D"
>x : "A" | "D"

        m;  // { kind: "A", x: string } | { kind: "D" }
>m : { kind: "A"; x: string; } | { kind: "D"; }
    }
}

function f5(m: Message) {
>f5 : (m: Message) => void
>m : Message
>Message : Message

    switch (m.kind) {
>m.kind : "A" | "B" | "C" | "D"
>m : Message
>kind : "A" | "B" | "C" | "D"

        case "A":
>"A" : "A"

            m;  // { kind: "A", x: string }
>m : { kind: "A"; x: string; }

            break;
        case "D":
>"D" : "D"

            m;  // { kind: "D" }
>m : { kind: "D"; }

            break;
        default:
            m;  // { kind: "B" | "C", y: number }
>m : { kind: "B" | "C"; y: number; }
    }
}

function f6(m: Message) {
>f6 : (m: Message) => void
>m : Message
>Message : Message

    switch (m.kind) {
>m.kind : "A" | "B" | "C" | "D"
>m : Message
>kind : "A" | "B" | "C" | "D"

        case "A":
>"A" : "A"

            m;  // { kind: "A", x: string }
>m : { kind: "A"; x: string; }

        case "D":
>"D" : "D"

            m;  // { kind: "A", x: string } | { kind: "D" }
>m : { kind: "A"; x: string; } | { kind: "D"; }

            break;
        default:
            m;  // { kind: "B" | "C", y: number }
>m : { kind: "B" | "C"; y: number; }
    }
}

function f7(m: Message) {
>f7 : (m: Message) => void
>m : Message
>Message : Message

    switch (m.kind) {
>m.kind : "A" | "B" | "C" | "D"
>m : Message
>kind : "A" | "B" | "C" | "D"

        case "A":
>"A" : "A"

        case "B":
>"B" : "B"

            return;
    }
    m;  // { kind: "B" | "C", y: number } | { kind: "D" }
>m : { kind: "B" | "C"; y: number; } | { kind: "D"; }
}

function f8(m: Message) {
>f8 : (m: Message) => void
>m : Message
>Message : Message

    switch (m.kind) {
>m.kind : "A" | "B" | "C" | "D"
>m : Message
>kind : "A" | "B" | "C" | "D"

        case "A":
>"A" : "A"

            return;
        case "D":
>"D" : "D"

            throw new Error();
>new Error() : Error
>Error : ErrorConstructor
    }
    m;  // { kind: "B" | "C", y: number }
>m : { kind: "B" | "C"; y: number; }
}
