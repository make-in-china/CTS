=== tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration1ES6.ts ===
// Conformance for emitting ES6

// A parameter declaration may specify either an identifier or a binding pattern.
// The identifiers specified in parameter declarations and binding patterns
// in a parameter list must be unique within that parameter list.

// If the declaration includes a type annotation, the parameter is of that type
function a1([a, b, [[c]]]: [number, number, string[][]]) { }
>a1 : ([a, b, [[c]]]: [number, number, string[][]]) => void
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>c : string
>类型别名 :=> 文字

function a2(o: { x: number, a: number }) { }
>a2 : (o: { x: number; a: number; }) => void
>o : { x: number; a: number; }
>x : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字

function a3({j, k, l: {m, n}, q: [a, b, c]}: { j: number, k: string, l: { m: boolean, n: number }, q: (number|string)[] }) { };
>a3 : ({ j, k, l: { m, n }, q: [a, b, c] }: { j: number; k: string; l: { m: boolean; n: number; }; q: (string | number)[]; }) => void
>j : number
>类型别名 :=> 数字
>k : string
>类型别名 :=> 文字
>l : any
>类型别名 :=> 任意
>m : boolean
>类型别名 :=> 真假
>n : number
>类型别名 :=> 数字
>q : any
>类型别名 :=> 任意
>a : string | number
>b : string | number
>c : string | number
>j : number
>类型别名 :=> 数字
>k : string
>类型别名 :=> 文字
>l : { m: boolean; n: number; }
>m : boolean
>类型别名 :=> 真假
>n : number
>类型别名 :=> 数字
>q : (string | number)[]

function a4({x, a}: { x: number, a: number }) { }
>a4 : ({ x, a }: { x: number; a: number; }) => void
>x : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字

a1([1, 2, [["world"]]]);
>a1([1, 2, [["world"]]]) : void
>类型别名 :=> 无值
>a1 : ([a, b, [[c]]]: [number, number, string[][]]) => void
>[1, 2, [["world"]]] : [number, number, string[][]]
>1 : 1
>2 : 2
>[["world"]] : string[][]
>["world"] : string[]
>"world" : "world"

a1([1, 2, [["world"]], 3]);
>a1([1, 2, [["world"]], 3]) : void
>类型别名 :=> 无值
>a1 : ([a, b, [[c]]]: [number, number, string[][]]) => void
>[1, 2, [["world"]], 3] : [number, number, string[][], number]
>1 : 1
>2 : 2
>[["world"]] : string[][]
>["world"] : string[]
>"world" : "world"
>3 : 3


// If the declaration includes an initializer expression (which is permitted only
// when the parameter list occurs in conjunction with a function body),
// the parameter type is the widened form (section 3.11) of the type of the initializer expression.

function b1(z = [undefined, null]) { };
>b1 : (z?: any[]) => void
>z : any[]
>[undefined, null] : null[]
>undefined : undefined
>类型别名 :=> 未定
>null : null
>类型别名 :=> 空值

function b2(z = null, o = { x: 0, y: undefined }) { }
>b2 : (z?: any, o?: { x: number; y: any; }) => void
>z : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>o : { x: number; y: any; }
>{ x: 0, y: undefined } : { x: number; y: undefined; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

function b3({z: {x, y: {j}}} = { z: { x: "hi", y: { j: 1 } } }) { }
>b3 : ({ z: { x, y: { j } } }?: { z: { x: string; y: { j: number; }; }; }) => void
>z : any
>类型别名 :=> 任意
>x : string
>类型别名 :=> 文字
>y : any
>类型别名 :=> 任意
>j : number
>类型别名 :=> 数字
>{ z: { x: "hi", y: { j: 1 } } } : { z: { x: string; y: { j: number; }; }; }
>z : { x: string; y: { j: number; }; }
>{ x: "hi", y: { j: 1 } } : { x: string; y: { j: number; }; }
>x : string
>类型别名 :=> 文字
>"hi" : "hi"
>y : { j: number; }
>{ j: 1 } : { j: number; }
>j : number
>类型别名 :=> 数字
>1 : 1

interface F1 {
>F1 : F1

    b5(z, y, [, a, b], {p, m: { q, r}});
>b5 : (z: any, y: any, [, a, b]: [any, any, any], { p, m: { q, r } }: { p: any; m: { q: any; r: any; }; }) => any
>z : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
> : undefined
>类型别名 :=> 未定
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
>m : any
>类型别名 :=> 任意
>q : any
>类型别名 :=> 任意
>r : any
>类型别名 :=> 任意
}

function b6([a, z, y] = [undefined, null, undefined]) { }
>b6 : ([a, z, y]?: [any, any, any]) => void
>a : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>[undefined, null, undefined] : [undefined, null, undefined]
>undefined : undefined
>类型别名 :=> 未定
>null : null
>类型别名 :=> 空值
>undefined : undefined
>类型别名 :=> 未定

function b7([[a], b, [[c, d]]] = [[undefined], undefined, [[undefined, undefined]]]) { }
>b7 : ([[a], b, [[c, d]]]?: [[any], any, [[any, any]]]) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>d : any
>类型别名 :=> 任意
>[[undefined], undefined, [[undefined, undefined]]] : [[undefined], undefined, [[undefined, undefined]]]
>[undefined] : [undefined]
>undefined : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定
>[[undefined, undefined]] : [[undefined, undefined]]
>[undefined, undefined] : [undefined, undefined]
>undefined : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

b1([1, 2, 3]);  // z is widen to the type any[]
>b1([1, 2, 3]) : void
>类型别名 :=> 无值
>b1 : (z?: any[]) => void
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

b2("string", { x: 200, y: "string" });
>b2("string", { x: 200, y: "string" }) : void
>类型别名 :=> 无值
>b2 : (z?: any, o?: { x: number; y: any; }) => void
>"string" : "string"
>{ x: 200, y: "string" } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>200 : 200
>y : string
>类型别名 :=> 文字
>"string" : "string"

b2("string", { x: 200, y: true });
>b2("string", { x: 200, y: true }) : void
>类型别名 :=> 无值
>b2 : (z?: any, o?: { x: number; y: any; }) => void
>"string" : "string"
>{ x: 200, y: true } : { x: number; y: boolean; }
>x : number
>类型别名 :=> 数字
>200 : 200
>y : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真


// If the declaration specifies a binding pattern, the parameter type is the implied type of that binding pattern (section 5.1.3)
enum Foo { a }
>Foo : Foo
>a : Foo

function c0({z: {x, y: {j}}}) { }
>c0 : ({ z: { x, y: { j } } }: { z: { x: any; y: { j: any; }; }; }) => void
>z : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>j : any
>类型别名 :=> 任意

function c1({z} = { z: 10 }) { }
>c1 : ({ z }?: { z: number; }) => void
>z : number
>类型别名 :=> 数字
>{ z: 10 } : { z: number; }
>z : number
>类型别名 :=> 数字
>10 : 10

function c2({z = 10}) { }
>c2 : ({ z }: { z?: number; }) => void
>z : number
>类型别名 :=> 数字
>10 : 10

function c3({b}: { b: number|string} = { b: "hello" }) { }
>c3 : ({ b }?: { b: string | number; }) => void
>b : string | number
>b : string | number
>{ b: "hello" } : { b: string; }
>b : string
>类型别名 :=> 文字
>"hello" : "hello"

function c5([a, b, [[c]]]) { }
>c5 : ([a, b, [[c]]]: [any, any, [[any]]]) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意

function c6([a, b, [[c=1]]]) { }
>c6 : ([a, b, [[c]]]: [any, any, [[number]]]) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : number
>类型别名 :=> 数字
>1 : 1

c0({z : { x: 1, y: { j: "world" } }});      // Implied type is { z: {x: any, y: {j: any}} }
>c0({z : { x: 1, y: { j: "world" } }}) : void
>类型别名 :=> 无值
>c0 : ({ z: { x, y: { j } } }: { z: { x: any; y: { j: any; }; }; }) => void
>{z : { x: 1, y: { j: "world" } }} : { z: { x: number; y: { j: string; }; }; }
>z : { x: number; y: { j: string; }; }
>{ x: 1, y: { j: "world" } } : { x: number; y: { j: string; }; }
>x : number
>类型别名 :=> 数字
>1 : 1
>y : { j: string; }
>{ j: "world" } : { j: string; }
>j : string
>类型别名 :=> 文字
>"world" : "world"

c0({z : { x: "string", y: { j: true } }});  // Implied type is { z: {x: any, y: {j: any}} }
>c0({z : { x: "string", y: { j: true } }}) : void
>类型别名 :=> 无值
>c0 : ({ z: { x, y: { j } } }: { z: { x: any; y: { j: any; }; }; }) => void
>{z : { x: "string", y: { j: true } }} : { z: { x: string; y: { j: boolean; }; }; }
>z : { x: string; y: { j: boolean; }; }
>{ x: "string", y: { j: true } } : { x: string; y: { j: boolean; }; }
>x : string
>类型别名 :=> 文字
>"string" : "string"
>y : { j: boolean; }
>{ j: true } : { j: boolean; }
>j : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

c1();             // Implied type is {z:number}?
>c1() : void
>类型别名 :=> 无值
>c1 : ({ z }?: { z: number; }) => void

c1({ z: 1 })      // Implied type is {z:number}? 
>c1({ z: 1 }) : void
>类型别名 :=> 无值
>c1 : ({ z }?: { z: number; }) => void
>{ z: 1 } : { z: number; }
>z : number
>类型别名 :=> 数字
>1 : 1

c2({});         // Implied type is {z?: number}
>c2({}) : void
>类型别名 :=> 无值
>c2 : ({ z }: { z?: number; }) => void
>{} : {}

c2({z:1});      // Implied type is {z?: number}
>c2({z:1}) : void
>类型别名 :=> 无值
>c2 : ({ z }: { z?: number; }) => void
>{z:1} : { z: number; }
>z : number
>类型别名 :=> 数字
>1 : 1

c3({ b: 1 });     // Implied type is { b: number|string }.
>c3({ b: 1 }) : void
>类型别名 :=> 无值
>c3 : ({ b }?: { b: string | number; }) => void
>{ b: 1 } : { b: number; }
>b : number
>类型别名 :=> 数字
>1 : 1

c5([1, 2, [["string"]]]);               // Implied type is is [any, any, [[any]]]
>c5([1, 2, [["string"]]]) : void
>类型别名 :=> 无值
>c5 : ([a, b, [[c]]]: [any, any, [[any]]]) => void
>[1, 2, [["string"]]] : [number, number, [[string]]]
>1 : 1
>2 : 2
>[["string"]] : [[string]]
>["string"] : [string]
>"string" : "string"

c5([1, 2, [["string"]], false, true]);  // Implied type is is [any, any, [[any]]]
>c5([1, 2, [["string"]], false, true]) : void
>类型别名 :=> 无值
>c5 : ([a, b, [[c]]]: [any, any, [[any]]]) => void
>[1, 2, [["string"]], false, true] : [number, number, [[string]], boolean, boolean]
>1 : 1
>2 : 2
>[["string"]] : [[string]]
>["string"] : [string]
>"string" : "string"
>false : false
>类型别名 :=> 为假
>true : true
>类型别名 :=> 为真


// A parameter can be marked optional by following its name or binding pattern with a question mark (?)
// or by including an initializer.

interface F2 {
>F2 : F2

    d3([a, b, c]?);
>d3 : ([a, b, c]?: [any, any, any]) => any
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意

    d4({x, y, z}?);
>d4 : ({ x, y, z }?: { x: any; y: any; z: any; }) => any
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

    e0([a, b, c]);
>e0 : ([a, b, c]: [any, any, any]) => any
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
}

class C2 implements F2 {
>C2 : C2
>F2 : F2

    constructor() { }
    d3() { }
>d3 : () => void

    d4() { }
>d4 : () => void

    e0([a, b, c]) { }
>e0 : ([a, b, c]: [any, any, any]) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
}

class C3 implements F2 {
>C3 : C3
>F2 : F2

    d3([a, b, c]) { }
>d3 : ([a, b, c]: [any, any, any]) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意

    d4({x, y, z}) { }
>d4 : ({ x, y, z }: { x: any; y: any; z: any; }) => void
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

    e0([a, b, c]) { }
>e0 : ([a, b, c]: [any, any, any]) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
}

function d5({x, y} = { x: 1, y: 2 }) { }
>d5 : ({ x, y }?: { x: number; y: number; }) => void
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>{ x: 1, y: 2 } : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>1 : 1
>y : number
>类型别名 :=> 数字
>2 : 2

d5();  // Parameter is optional as its declaration included an initializer
>d5() : void
>类型别名 :=> 无值
>d5 : ({ x, y }?: { x: number; y: number; }) => void

// Destructuring parameter declarations do not permit type annotations on the individual binding patterns,
// as such annotations would conflict with the already established meaning of colons in object literals.
// Type annotations must instead be written on the top- level parameter declaration

function e1({x: number}) { }  // x has type any NOT number
>e1 : ({ x: number }: { x: any; }) => void
>x : any
>类型别名 :=> 任意
>number : any
>类型别名 :=> 任意

function e2({x}: { x: number }) { }  // x is type number
>e2 : ({ x }: { x: number; }) => void
>x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

function e3({x}: { x?: number }) { }  // x is an optional with type number
>e3 : ({ x }: { x?: number; }) => void
>x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

function e4({x: [number,string,any] }) { }  // x has type [any, any, any]
>e4 : ({ x: [number, string, any] }: { x: [any, any, any]; }) => void
>x : any
>类型别名 :=> 任意
>number : any
>类型别名 :=> 任意
>string : any
>类型别名 :=> 任意
>any : any
>类型别名 :=> 任意

function e5({x: [a, b, c]}: { x: [number, number, number] }) { }  // x has type [any, any, any]
>e5 : ({ x: [a, b, c] }: { x: [number, number, number]; }) => void
>x : any
>类型别名 :=> 任意
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>x : [number, number, number]

function e6({x: [number, number, number]}) { }  // error, duplicate identifier;
>e6 : ({ x: [number, number, number] }: { x: [any, any, any]; }) => void
>x : any
>类型别名 :=> 任意
>number : any
>类型别名 :=> 任意
>number : any
>类型别名 :=> 任意
>number : any
>类型别名 :=> 任意



