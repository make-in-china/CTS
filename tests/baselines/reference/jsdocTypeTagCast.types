=== tests/cases/conformance/jsdoc/a.ts ===
var W: string;
>W : 文字
>类型别名 :=> 文字

=== tests/cases/conformance/jsdoc/b.js ===
// @ts-check
var W = /** @type {string} */(/** @type {*} */ (4));
>W : 文字
>类型别名 :=> 文字
>(/** @type {*} */ (4)) : 文字
>类型别名 :=> 文字
>(4) : 任意
>类型别名 :=> 任意
>4 : 4

var W = /** @type {string} */(4); // Error
>W : 文字
>类型别名 :=> 文字
>(4) : 文字
>类型别名 :=> 文字
>4 : 4

/** @type {*} */
var a;
>a : 任意
>类型别名 :=> 任意

/** @type {string} */
var s;
>s : 文字
>类型别名 :=> 文字

var a = /** @type {*} */("" + 4);
>a : 任意
>类型别名 :=> 任意
>("" + 4) : 任意
>类型别名 :=> 任意
>"" + 4 : 文字
>类型别名 :=> 文字
>"" : ""
>4 : 4

var s = "" + /** @type {*} */(4);
>s : 文字
>类型别名 :=> 文字
>"" + /** @type {*} */(4) : 文字
>类型别名 :=> 文字
>"" : ""
>(4) : 任意
>类型别名 :=> 任意
>4 : 4

class SomeBase {
>SomeBase : SomeBase

    constructor() {
        this.p = 42;
>this.p = 42 : 42
>this.p : 数字
>类型别名 :=> 数字
>this : 本体
>p : 数字
>类型别名 :=> 数字
>42 : 42
    }
}
class SomeDerived extends SomeBase {
>SomeDerived : SomeDerived
>SomeBase : SomeBase

    constructor() {
        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 SomeBase

        this.x = 42;
>this.x = 42 : 42
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>42 : 42
    }
}
class SomeOther {
>SomeOther : SomeOther

    constructor() {
        this.q = 42;
>this.q = 42 : 42
>this.q : 数字
>类型别名 :=> 数字
>this : 本体
>q : 数字
>类型别名 :=> 数字
>42 : 42
    }
}

function SomeFakeClass() {
>SomeFakeClass : () => 无值

    /** @type {string|number} */
    this.p = "bar";
>this.p = "bar" : "bar"
>this.p : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>p : 任意
>类型别名 :=> 任意
>"bar" : "bar"
}

// Type assertion should check for assignability in either direction
var someBase = new SomeBase();
>someBase : SomeBase
>new SomeBase() : SomeBase
>SomeBase : 类为 SomeBase

var someDerived = new SomeDerived();
>someDerived : SomeDerived
>new SomeDerived() : SomeDerived
>SomeDerived : 类为 SomeDerived

var someOther = new SomeOther();
>someOther : SomeOther
>new SomeOther() : SomeOther
>SomeOther : 类为 SomeOther

var someFakeClass = new SomeFakeClass();
>someFakeClass : { p: 文字 | 数字 | 未定; }
>new SomeFakeClass() : { p: 文字 | 数字 | 未定; }
>SomeFakeClass : () => 无值

someBase = /** @type {SomeBase} */(someDerived);
>someBase = /** @type {SomeBase} */(someDerived) : SomeBase
>someBase : SomeBase
>(someDerived) : SomeBase
>someDerived : SomeDerived

someBase = /** @type {SomeBase} */(someBase);
>someBase = /** @type {SomeBase} */(someBase) : SomeBase
>someBase : SomeBase
>(someBase) : SomeBase
>someBase : SomeBase

someBase = /** @type {SomeBase} */(someOther); // Error
>someBase = /** @type {SomeBase} */(someOther) : SomeBase
>someBase : SomeBase
>(someOther) : SomeBase
>someOther : SomeOther

someDerived = /** @type {SomeDerived} */(someDerived);
>someDerived = /** @type {SomeDerived} */(someDerived) : SomeDerived
>someDerived : SomeDerived
>(someDerived) : SomeDerived
>someDerived : SomeDerived

someDerived = /** @type {SomeDerived} */(someBase);
>someDerived = /** @type {SomeDerived} */(someBase) : SomeDerived
>someDerived : SomeDerived
>(someBase) : SomeDerived
>someBase : SomeBase

someDerived = /** @type {SomeDerived} */(someOther); // Error
>someDerived = /** @type {SomeDerived} */(someOther) : SomeDerived
>someDerived : SomeDerived
>(someOther) : SomeDerived
>someOther : SomeOther

someOther = /** @type {SomeOther} */(someDerived); // Error
>someOther = /** @type {SomeOther} */(someDerived) : SomeOther
>someOther : SomeOther
>(someDerived) : SomeOther
>someDerived : SomeDerived

someOther = /** @type {SomeOther} */(someBase); // Error
>someOther = /** @type {SomeOther} */(someBase) : SomeOther
>someOther : SomeOther
>(someBase) : SomeOther
>someBase : SomeBase

someOther = /** @type {SomeOther} */(someOther);
>someOther = /** @type {SomeOther} */(someOther) : SomeOther
>someOther : SomeOther
>(someOther) : SomeOther
>someOther : SomeOther

someFakeClass = someBase;
>someFakeClass = someBase : SomeBase
>someFakeClass : { p: 文字 | 数字 | 未定; }
>someBase : SomeBase

someFakeClass = someDerived;
>someFakeClass = someDerived : SomeDerived
>someFakeClass : { p: 文字 | 数字 | 未定; }
>someDerived : SomeDerived

someBase = someFakeClass; // Error
>someBase = someFakeClass : { p: 文字 | 数字 | 未定; }
>someBase : SomeBase
>someFakeClass : { p: 文字 | 数字 | 未定; }

someBase = /** @type {SomeBase} */(someFakeClass);
>someBase = /** @type {SomeBase} */(someFakeClass) : SomeBase
>someBase : SomeBase
>(someFakeClass) : SomeBase
>someFakeClass : { p: 文字 | 数字 | 未定; }

// Type assertion cannot be a type-predicate type
/** @type {number | string} */
var numOrStr;
>numOrStr : 文字 | 数字

/** @type {string} */
var str;
>str : 文字
>类型别名 :=> 文字

if(/** @type {numOrStr is string} */(numOrStr === undefined)) { // Error
>(numOrStr === undefined) : 文字 | 数字
>numOrStr === undefined : 真假
>类型别名 :=> 真假
>numOrStr : 文字 | 数字
>undefined : 未定
>类型别名 :=> 未定

	str = numOrStr; // Error, no narrowing occurred
>str = numOrStr : 文字 | 数字
>str : 文字
>类型别名 :=> 文字
>numOrStr : 文字 | 数字
}



