=== tests/cases/conformance/expressions/binaryOperators/inOperator/inOperatorWithInvalidOperands.ts ===
enum E { a }
>E : E
>a : E

var x: any;
>x : 任意
>类型别名 :=> 任意

// invalid left operands
// the left operand is required to be of type Any, the String primitive type, or the Number primitive type
var a1: boolean;
>a1 : 真假
>类型别名 :=> 真假

var a2: void;
>a2 : 无值
>类型别名 :=> 无值

var a3: {};
>a3 : {}

var a4: E
>a4 : E
>E : E

var ra1 = a1 in x;
>ra1 : 真假
>类型别名 :=> 真假
>a1 in x : 真假
>类型别名 :=> 真假
>a1 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意

var ra2 = a2 in x;
>ra2 : 真假
>类型别名 :=> 真假
>a2 in x : 真假
>类型别名 :=> 真假
>a2 : 无值
>类型别名 :=> 无值
>x : 任意
>类型别名 :=> 任意

var ra3 = a3 in x;
>ra3 : 真假
>类型别名 :=> 真假
>a3 in x : 真假
>类型别名 :=> 真假
>a3 : {}
>x : 任意
>类型别名 :=> 任意

var ra4 = a4 in x;
>ra4 : 真假
>类型别名 :=> 真假
>a4 in x : 真假
>类型别名 :=> 真假
>a4 : E
>x : 任意
>类型别名 :=> 任意

var ra5 = null in x;
>ra5 : 真假
>类型别名 :=> 真假
>null in x : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值
>x : 任意
>类型别名 :=> 任意

var ra6 = undefined in x;
>ra6 : 真假
>类型别名 :=> 真假
>undefined in x : 真假
>类型别名 :=> 真假
>undefined : 未定
>类型别名 :=> 未定
>x : 任意
>类型别名 :=> 任意

var ra7 = E.a in x;
>ra7 : 真假
>类型别名 :=> 真假
>E.a in x : 真假
>类型别名 :=> 真假
>E.a : E
>E : 类为 E
>a : E
>x : 任意
>类型别名 :=> 任意

var ra8 = false in x;
>ra8 : 真假
>类型别名 :=> 真假
>false in x : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>x : 任意
>类型别名 :=> 任意

var ra9 = {} in x;
>ra9 : 真假
>类型别名 :=> 真假
>{} in x : 真假
>类型别名 :=> 真假
>{} : {}
>x : 任意
>类型别名 :=> 任意

// invalid right operands
// the right operand is required to be of type Any, an object type, or a type parameter type
var b1: number;
>b1 : 数字
>类型别名 :=> 数字

var b2: boolean;
>b2 : 真假
>类型别名 :=> 真假

var b3: string;
>b3 : 文字
>类型别名 :=> 文字

var b4: void;
>b4 : 无值
>类型别名 :=> 无值

var b5: string | number;
>b5 : 文字 | 数字

var rb1 = x in b1;
>rb1 : 真假
>类型别名 :=> 真假
>x in b1 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>b1 : 数字
>类型别名 :=> 数字

var rb2 = x in b2;
>rb2 : 真假
>类型别名 :=> 真假
>x in b2 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>b2 : 真假
>类型别名 :=> 真假

var rb3 = x in b3;
>rb3 : 真假
>类型别名 :=> 真假
>x in b3 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>b3 : 文字
>类型别名 :=> 文字

var rb4 = x in b4;
>rb4 : 真假
>类型别名 :=> 真假
>x in b4 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>b4 : 无值
>类型别名 :=> 无值

var rb5 = x in b5;
>rb5 : 真假
>类型别名 :=> 真假
>x in b5 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>b5 : 文字 | 数字

var rb6 = x in 0;
>rb6 : 真假
>类型别名 :=> 真假
>x in 0 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>0 : 0

var rb7 = x in false;
>rb7 : 真假
>类型别名 :=> 真假
>x in false : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

var rb8 = x in '';
>rb8 : 真假
>类型别名 :=> 真假
>x in '' : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>'' : ""

var rb9 = x in null;
>rb9 : 真假
>类型别名 :=> 真假
>x in null : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

var rb10 = x in undefined;
>rb10 : 真假
>类型别名 :=> 真假
>x in undefined : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定


// both operands are invalid
var rc1 = {} in '';
>rc1 : 真假
>类型别名 :=> 真假
>{} in '' : 真假
>类型别名 :=> 真假
>{} : {}
>'' : ""

