=== tests/cases/conformance/expressions/typeGuards/typeGuardFunctionOfFormThis.ts ===
class RoyalGuard {
>RoyalGuard : RoyalGuard

    isLeader(): this is LeadGuard {
>isLeader : () => 本体 作为 LeadGuard
>LeadGuard : LeadGuard

        return this instanceof LeadGuard;
>this instanceof LeadGuard : 真假
>类型别名 :=> 真假
>this : 本体
>LeadGuard : 类为 LeadGuard
    }
    isFollower(): this is FollowerGuard {
>isFollower : () => 本体 作为 FollowerGuard
>FollowerGuard : FollowerGuard

        return this instanceof FollowerGuard;
>this instanceof FollowerGuard : 真假
>类型别名 :=> 真假
>this : 本体
>FollowerGuard : 类为 FollowerGuard
    }
}

class LeadGuard extends RoyalGuard {
>LeadGuard : LeadGuard
>RoyalGuard : RoyalGuard

    lead(): void {};
>lead : () => 无值
}

class FollowerGuard extends RoyalGuard {
>FollowerGuard : FollowerGuard
>RoyalGuard : RoyalGuard

    follow(): void {};
>follow : () => 无值
}

let a: RoyalGuard = new FollowerGuard();
>a : RoyalGuard
>RoyalGuard : RoyalGuard
>new FollowerGuard() : FollowerGuard
>FollowerGuard : 类为 FollowerGuard

if (a.isLeader()) {
>a.isLeader() : 真假
>类型别名 :=> 真假
>a.isLeader : () => 本体 作为 LeadGuard
>a : RoyalGuard
>isLeader : () => 本体 作为 LeadGuard

    a.lead();
>a.lead() : 无值
>类型别名 :=> 无值
>a.lead : () => 无值
>a : LeadGuard
>lead : () => 无值
}
else if (a.isFollower()) {
>a.isFollower() : 真假
>类型别名 :=> 真假
>a.isFollower : () => 本体 作为 FollowerGuard
>a : RoyalGuard
>isFollower : () => 本体 作为 FollowerGuard

    a.follow();
>a.follow() : 无值
>类型别名 :=> 无值
>a.follow : () => 无值
>a : FollowerGuard
>follow : () => 无值
}

interface GuardInterface extends RoyalGuard {}
>GuardInterface : GuardInterface
>RoyalGuard : RoyalGuard

let b: GuardInterface;
>b : GuardInterface
>GuardInterface : GuardInterface

if (b.isLeader()) {
>b.isLeader() : 真假
>类型别名 :=> 真假
>b.isLeader : () => 本体 作为 LeadGuard
>b : GuardInterface
>isLeader : () => 本体 作为 LeadGuard

    b.lead();
>b.lead() : 无值
>类型别名 :=> 无值
>b.lead : () => 无值
>b : LeadGuard
>lead : () => 无值
}
else if (b.isFollower()) {
>b.isFollower() : 真假
>类型别名 :=> 真假
>b.isFollower : () => 本体 作为 FollowerGuard
>b : GuardInterface
>isFollower : () => 本体 作为 FollowerGuard

    b.follow();
>b.follow() : 无值
>类型别名 :=> 无值
>b.follow : () => 无值
>b : FollowerGuard
>follow : () => 无值
}

// if (((a.isLeader)())) {
//     a.lead();
// }
// else if (((a).isFollower())) {
//     a.follow();
// }

// if (((a["isLeader"])())) {
//     a.lead();
// }
// else if (((a)["isFollower"]())) {
//     a.follow();
// }

var holder2 = {a};
>holder2 : { a: RoyalGuard; }
>{a} : { a: RoyalGuard; }
>a : RoyalGuard

if (holder2.a.isLeader()) {
>holder2.a.isLeader() : 真假
>类型别名 :=> 真假
>holder2.a.isLeader : () => 本体 作为 LeadGuard
>holder2.a : RoyalGuard
>holder2 : { a: RoyalGuard; }
>a : RoyalGuard
>isLeader : () => 本体 作为 LeadGuard

    holder2.a;
>holder2.a : LeadGuard
>holder2 : { a: RoyalGuard; }
>a : LeadGuard
}
else {
    holder2.a;
>holder2.a : RoyalGuard
>holder2 : { a: RoyalGuard; }
>a : RoyalGuard
}

class ArrowGuard {
>ArrowGuard : ArrowGuard

    isElite = (): this is ArrowElite => {
>isElite : () => 本体 作为 ArrowElite
>(): this is ArrowElite => {        return this instanceof ArrowElite;    } : () => 本体 作为 ArrowElite
>ArrowElite : ArrowElite

        return this instanceof ArrowElite;
>this instanceof ArrowElite : 真假
>类型别名 :=> 真假
>this : 本体
>ArrowElite : 类为 ArrowElite
    }
    isMedic = (): this is ArrowMedic => {
>isMedic : () => 本体 作为 ArrowMedic
>(): this is ArrowMedic => {        return this instanceof ArrowMedic;    } : () => 本体 作为 ArrowMedic
>ArrowMedic : ArrowMedic

        return this instanceof ArrowMedic;
>this instanceof ArrowMedic : 真假
>类型别名 :=> 真假
>this : 本体
>ArrowMedic : 类为 ArrowMedic
    }
}

class ArrowElite extends ArrowGuard {
>ArrowElite : ArrowElite
>ArrowGuard : ArrowGuard

    defend(): void {}
>defend : () => 无值
}

class ArrowMedic extends ArrowGuard {
>ArrowMedic : ArrowMedic
>ArrowGuard : ArrowGuard

    heal(): void {}
>heal : () => 无值
}

let guard = new ArrowGuard();
>guard : ArrowGuard
>new ArrowGuard() : ArrowGuard
>ArrowGuard : 类为 ArrowGuard

if (guard.isElite()) {
>guard.isElite() : 真假
>类型别名 :=> 真假
>guard.isElite : () => 本体 作为 ArrowElite
>guard : ArrowGuard
>isElite : () => 本体 作为 ArrowElite

    guard.defend();
>guard.defend() : 无值
>类型别名 :=> 无值
>guard.defend : () => 无值
>guard : ArrowElite
>defend : () => 无值
}
else if (guard.isMedic()) {
>guard.isMedic() : 真假
>类型别名 :=> 真假
>guard.isMedic : () => 本体 作为 ArrowMedic
>guard : ArrowGuard
>isMedic : () => 本体 作为 ArrowMedic

    guard.heal();
>guard.heal() : 无值
>类型别名 :=> 无值
>guard.heal : () => 无值
>guard : ArrowMedic
>heal : () => 无值
}

interface Supplies {
>Supplies : Supplies

    spoiled: boolean;
>spoiled : 真假
>类型别名 :=> 真假
}

interface Sundries {
>Sundries : Sundries

    broken: boolean;
>broken : 真假
>类型别名 :=> 真假
}

interface Crate<T> {
>Crate : Crate<T>
>T : T

    contents: T;
>contents : T
>T : T

    volume: number;
>volume : 数字
>类型别名 :=> 数字

    isSupplies(): this is Crate<Supplies>;
>isSupplies : () => 本体 作为 Crate<Supplies>
>Crate : Crate<T>
>Supplies : Supplies

    isSundries(): this is Crate<Sundries>;
>isSundries : () => 本体 作为 Crate<Sundries>
>Crate : Crate<T>
>Sundries : Sundries
}

let crate: Crate<{}>;
>crate : Crate<{}>
>Crate : Crate<T>

if (crate.isSundries()) {
>crate.isSundries() : 真假
>类型别名 :=> 真假
>crate.isSundries : () => 本体 作为 Crate<Sundries>
>crate : Crate<{}>
>isSundries : () => 本体 作为 Crate<Sundries>

    crate.contents.broken = true;
>crate.contents.broken = true : 为真
>类型别名 :=> 为真
>crate.contents.broken : 真假
>类型别名 :=> 真假
>crate.contents : Sundries
>crate : Crate<Sundries>
>contents : Sundries
>broken : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
}
else if (crate.isSupplies()) {
>crate.isSupplies() : 真假
>类型别名 :=> 真假
>crate.isSupplies : () => 本体 作为 Crate<Supplies>
>crate : Crate<{}>
>isSupplies : () => 本体 作为 Crate<Supplies>

    crate.contents.spoiled = true;
>crate.contents.spoiled = true : 为真
>类型别名 :=> 为真
>crate.contents.spoiled : 真假
>类型别名 :=> 真假
>crate.contents : Supplies
>crate : Crate<Supplies>
>contents : Supplies
>spoiled : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
}

// Matching guards should be assignable

a.isFollower = b.isFollower;
>a.isFollower = b.isFollower : () => 本体 作为 FollowerGuard
>a.isFollower : () => 本体 作为 FollowerGuard
>a : RoyalGuard
>isFollower : () => 本体 作为 FollowerGuard
>b.isFollower : () => 本体 作为 FollowerGuard
>b : GuardInterface
>isFollower : () => 本体 作为 FollowerGuard

a.isLeader = b.isLeader;
>a.isLeader = b.isLeader : () => 本体 作为 LeadGuard
>a.isLeader : () => 本体 作为 LeadGuard
>a : RoyalGuard
>isLeader : () => 本体 作为 LeadGuard
>b.isLeader : () => 本体 作为 LeadGuard
>b : GuardInterface
>isLeader : () => 本体 作为 LeadGuard

class MimicGuard {
>MimicGuard : MimicGuard

    isLeader(): this is MimicLeader { return this instanceof MimicLeader; };
>isLeader : () => 本体 作为 MimicLeader
>MimicLeader : MimicLeader
>this instanceof MimicLeader : 真假
>类型别名 :=> 真假
>this : 本体
>MimicLeader : 类为 MimicLeader

    isFollower(): this is MimicFollower { return this instanceof MimicFollower; };
>isFollower : () => 本体 作为 MimicFollower
>MimicFollower : MimicFollower
>this instanceof MimicFollower : 真假
>类型别名 :=> 真假
>this : 本体
>MimicFollower : 类为 MimicFollower
}

class MimicLeader extends MimicGuard {
>MimicLeader : MimicLeader
>MimicGuard : MimicGuard

    lead(): void {}
>lead : () => 无值
}

class MimicFollower extends MimicGuard {
>MimicFollower : MimicFollower
>MimicGuard : MimicGuard

    follow(): void {}
>follow : () => 无值
}

let mimic = new MimicGuard();
>mimic : MimicGuard
>new MimicGuard() : MimicGuard
>MimicGuard : 类为 MimicGuard

a.isLeader = mimic.isLeader;
>a.isLeader = mimic.isLeader : () => 本体 作为 MimicLeader
>a.isLeader : () => 本体 作为 LeadGuard
>a : RoyalGuard
>isLeader : () => 本体 作为 LeadGuard
>mimic.isLeader : () => 本体 作为 MimicLeader
>mimic : MimicGuard
>isLeader : () => 本体 作为 MimicLeader

a.isFollower = mimic.isFollower;
>a.isFollower = mimic.isFollower : () => 本体 作为 MimicFollower
>a.isFollower : () => 本体 作为 FollowerGuard
>a : RoyalGuard
>isFollower : () => 本体 作为 FollowerGuard
>mimic.isFollower : () => 本体 作为 MimicFollower
>mimic : MimicGuard
>isFollower : () => 本体 作为 MimicFollower

if (mimic.isFollower()) {
>mimic.isFollower() : 真假
>类型别名 :=> 真假
>mimic.isFollower : () => 本体 作为 MimicFollower
>mimic : MimicGuard
>isFollower : () => 本体 作为 MimicFollower

    mimic.follow();
>mimic.follow() : 无值
>类型别名 :=> 无值
>mimic.follow : () => 无值
>mimic : MimicFollower
>follow : () => 无值

    mimic.isFollower = a.isFollower;
>mimic.isFollower = a.isFollower : () => 本体 作为 FollowerGuard
>mimic.isFollower : () => 本体 作为 MimicFollower
>mimic : MimicFollower
>isFollower : () => 本体 作为 MimicFollower
>a.isFollower : () => 本体 作为 FollowerGuard
>a : RoyalGuard
>isFollower : () => 本体 作为 FollowerGuard
}


interface MimicGuardInterface {
>MimicGuardInterface : MimicGuardInterface

    isLeader(): this is LeadGuard;
>isLeader : () => 本体 作为 LeadGuard
>LeadGuard : LeadGuard

    isFollower(): this is FollowerGuard;
>isFollower : () => 本体 作为 FollowerGuard
>FollowerGuard : FollowerGuard
}

