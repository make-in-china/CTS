=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormExpr1AndExpr2.ts ===
var str: string;
>str : string
>类型别名 :=> 文字

var bool: boolean;
>bool : boolean
>类型别名 :=> 真假

var num: number;
>num : number
>类型别名 :=> 数字

var strOrNum: string | number;
>strOrNum : string | number

var strOrNumOrBool: string | number | boolean;
>strOrNumOrBool : string | number | boolean

var numOrBool: number | boolean;
>numOrBool : number | boolean

class C { private p; }
>C : C
>p : any
>类型别名 :=> 任意

var c: C;
>c : C
>C : C

var cOrBool: C| boolean;
>cOrBool : boolean | C
>C : C

var strOrNumOrBoolOrC: string | number | boolean | C;
>strOrNumOrBoolOrC : string | number | boolean | C
>C : C

// A type guard of the form expr1 && expr2
//  - when true, narrows the type of x by expr1 when true and then by expr2 when true, or
//  - when false, narrows the type of x to T1 | T2, where T1 is the type of x narrowed by expr1 when 
//    false, and T2 is the type of x narrowed by expr1 when true and then by expr2 when false.

// (typeguard1 && typeguard2)
if (typeof strOrNumOrBool !== "string" && typeof strOrNumOrBool !== "number") {
>typeof strOrNumOrBool !== "string" && typeof strOrNumOrBool !== "number" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBool !== "string" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : string | number | boolean
>"string" : "string"
>typeof strOrNumOrBool !== "number" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : number | boolean
>"number" : "number"

    bool = strOrNumOrBool; // boolean
>bool = strOrNumOrBool : boolean
>类型别名 :=> 真假
>bool : boolean
>类型别名 :=> 真假
>strOrNumOrBool : boolean
>类型别名 :=> 真假
}
else {
    strOrNum = strOrNumOrBool; // string | number
>strOrNum = strOrNumOrBool : string | number
>strOrNum : string | number
>strOrNumOrBool : string | number
}
// (typeguard1 && typeguard2 && typeguard3)
if (typeof strOrNumOrBoolOrC !== "string" && typeof strOrNumOrBoolOrC !== "number" && typeof strOrNumOrBoolOrC !== "boolean") {
>typeof strOrNumOrBoolOrC !== "string" && typeof strOrNumOrBoolOrC !== "number" && typeof strOrNumOrBoolOrC !== "boolean" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC !== "string" && typeof strOrNumOrBoolOrC !== "number" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC !== "string" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBoolOrC : string | number | boolean | C
>"string" : "string"
>typeof strOrNumOrBoolOrC !== "number" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBoolOrC : number | boolean | C
>"number" : "number"
>typeof strOrNumOrBoolOrC !== "boolean" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBoolOrC : boolean | C
>"boolean" : "boolean"

    c = strOrNumOrBoolOrC; // C
>c = strOrNumOrBoolOrC : C
>c : C
>strOrNumOrBoolOrC : C
}
else {
    strOrNumOrBool = strOrNumOrBoolOrC; // string | number | boolean
>strOrNumOrBool = strOrNumOrBoolOrC : string | number | boolean
>strOrNumOrBool : string | number | boolean
>strOrNumOrBoolOrC : string | number | boolean
}
// (typeguard1 && typeguard2 && typeguard11(onAnotherType))
if (typeof strOrNumOrBoolOrC !== "string" && typeof strOrNumOrBoolOrC !== "number" && typeof strOrNumOrBool === "boolean") {
>typeof strOrNumOrBoolOrC !== "string" && typeof strOrNumOrBoolOrC !== "number" && typeof strOrNumOrBool === "boolean" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC !== "string" && typeof strOrNumOrBoolOrC !== "number" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC !== "string" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBoolOrC : string | number | boolean | C
>"string" : "string"
>typeof strOrNumOrBoolOrC !== "number" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBoolOrC : number | boolean | C
>"number" : "number"
>typeof strOrNumOrBool === "boolean" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : string | number | boolean
>"boolean" : "boolean"

    cOrBool = strOrNumOrBoolOrC; // C | boolean
>cOrBool = strOrNumOrBoolOrC : boolean | C
>cOrBool : boolean | C
>strOrNumOrBoolOrC : boolean | C

    bool = strOrNumOrBool; // boolean
>bool = strOrNumOrBool : boolean
>类型别名 :=> 真假
>bool : boolean
>类型别名 :=> 真假
>strOrNumOrBool : boolean
>类型别名 :=> 真假
}
else {
    var r1: string | number | boolean | C = strOrNumOrBoolOrC; // string | number | boolean | C
>r1 : string | number | boolean | C
>C : C
>strOrNumOrBoolOrC : string | number | boolean | C

    var r2: string | number | boolean = strOrNumOrBool;
>r2 : string | number | boolean
>strOrNumOrBool : string | number | boolean
}
// (typeguard1) && simpleExpr
if (typeof strOrNumOrBool !== "string" && numOrBool !== strOrNumOrBool) {
>typeof strOrNumOrBool !== "string" && numOrBool !== strOrNumOrBool : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBool !== "string" : boolean
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : string | number | boolean
>"string" : "string"
>numOrBool !== strOrNumOrBool : boolean
>类型别名 :=> 真假
>numOrBool : number | boolean
>strOrNumOrBool : number | boolean

    numOrBool = strOrNumOrBool; // number | boolean
>numOrBool = strOrNumOrBool : number | boolean
>numOrBool : number | boolean
>strOrNumOrBool : number | boolean
}
else {
    var r3: string | number | boolean = strOrNumOrBool; // string | number | boolean
>r3 : string | number | boolean
>strOrNumOrBool : string | number | boolean
}
