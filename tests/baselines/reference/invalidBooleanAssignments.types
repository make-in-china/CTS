=== tests/cases/conformance/types/primitives/boolean/invalidBooleanAssignments.ts ===
var x = true;
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

var a: number = x;
>a : number
>类型别名 :=> 数字
>x : true
>类型别名 :=> 为真

var b: string = x;
>b : string
>类型别名 :=> 文字
>x : true
>类型别名 :=> 为真

var c: void = x;
>c : void
>类型别名 :=> 无值
>x : true
>类型别名 :=> 为真

var d: typeof undefined = x;
>d : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>x : true
>类型别名 :=> 为真

enum E { A }
>E : E
>A : E

var e: E = x;
>e : E
>E : E
>x : true
>类型别名 :=> 为真

class C { foo: string }
>C : C
>foo : string
>类型别名 :=> 文字

var f: C = x;
>f : C
>C : C
>x : true
>类型别名 :=> 为真

interface I { bar: string }
>I : I
>bar : string
>类型别名 :=> 文字

var g: I = x;
>g : I
>I : I
>x : true
>类型别名 :=> 为真

var h: { (): string } = x;
>h : () => string
>x : true
>类型别名 :=> 为真

var h2: { toString(): string } = x; // no error
>h2 : { toString(): string; }
>toString : () => string
>x : true
>类型别名 :=> 为真

module M { export var a = 1; }
>M : typeof M
>a : number
>类型别名 :=> 数字
>1 : 1

M = x;
>M = x : true
>类型别名 :=> 为真
>M : any
>类型别名 :=> 任意
>x : true
>类型别名 :=> 为真

function i<T>(a: T) {
>i : <T>(a: T) => void
>T : T
>a : T
>T : T

    a = x;
>a = x : boolean
>类型别名 :=> 真假
>a : T
>x : boolean
>类型别名 :=> 真假
}
i = x;
>i = x : true
>类型别名 :=> 为真
>i : any
>类型别名 :=> 任意
>x : true
>类型别名 :=> 为真

