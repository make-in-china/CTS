=== tests/cases/compiler/inferFromGenericFunctionReturnTypes2.ts ===
type Mapper<T, U> = (x: T) => U;
>Mapper : Mapper<T, U>
>T : T
>U : U
>x : T
>T : T
>U : U

declare function wrap<T, U>(cb: Mapper<T, U>): Mapper<T, U>;
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>T : T
>U : U
>cb : Mapper<T, U>
>Mapper : Mapper<T, U>
>T : T
>U : U
>Mapper : Mapper<T, U>
>T : T
>U : U

declare function arrayize<T, U>(cb: Mapper<T, U>): Mapper<T, U[]>;
>arrayize : <T, U>(cb: Mapper<T, U>) => Mapper<T, U[]>
>T : T
>U : U
>cb : Mapper<T, U>
>Mapper : Mapper<T, U>
>T : T
>U : U
>Mapper : Mapper<T, U>
>T : T
>U : U

declare function combine<A, B, C>(f: (x: A) => B, g: (x: B) => C): (x: A) => C;
>combine : <A, B, C>(f: (x: A) => B, g: (x: B) => C) => (x: A) => C
>A : A
>B : B
>C : C
>f : (x: A) => B
>x : A
>A : A
>B : B
>g : (x: B) => C
>x : B
>B : B
>C : C
>x : A
>A : A
>C : C

declare function foo(f: Mapper<string, number>): void;
>foo : (f: Mapper<文字, 数字>) => 无值
>f : Mapper<文字, 数字>
>Mapper : Mapper<T, U>

let f1: Mapper<string, number> = s => s.length;
>f1 : Mapper<文字, 数字>
>Mapper : Mapper<T, U>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

let f2: Mapper<string, number> = wrap(s => s.length);
>f2 : Mapper<文字, 数字>
>Mapper : Mapper<T, U>
>wrap(s => s.length) : Mapper<文字, 数字>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

let f3: Mapper<string, number[]> = arrayize(wrap(s => s.length));
>f3 : Mapper<文字, 数字[]>
>Mapper : Mapper<T, U>
>arrayize(wrap(s => s.length)) : Mapper<文字, 数字[]>
>arrayize : <T, U>(cb: Mapper<T, U>) => Mapper<T, U[]>
>wrap(s => s.length) : Mapper<文字, 数字>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

let f4: Mapper<string, boolean> = combine(wrap(s => s.length), wrap(n => n >= 10));
>f4 : Mapper<文字, 真假>
>Mapper : Mapper<T, U>
>combine(wrap(s => s.length), wrap(n => n >= 10)) : (x: 文字) => 真假
>combine : <A, B, C>(f: (x: A) => B, g: (x: B) => C) => (x: A) => C
>wrap(s => s.length) : Mapper<文字, 数字>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>wrap(n => n >= 10) : Mapper<数字, 真假>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>n => n >= 10 : (n: 数字) => 真假
>n : 数字
>类型别名 :=> 数字
>n >= 10 : 真假
>类型别名 :=> 真假
>n : 数字
>类型别名 :=> 数字
>10 : 10

foo(wrap(s => s.length));
>foo(wrap(s => s.length)) : 无值
>类型别名 :=> 无值
>foo : (f: Mapper<文字, 数字>) => 无值
>wrap(s => s.length) : Mapper<文字, 数字>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

let a1 = ["a", "b"].map(s => s.length);
>a1 : 数字[]
>["a", "b"].map(s => s.length) : 数字[]
>["a", "b"].map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

let a2 = ["a", "b"].map(wrap(s => s.length));
>a2 : 数字[]
>["a", "b"].map(wrap(s => s.length)) : 数字[]
>["a", "b"].map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>wrap(s => s.length) : Mapper<文字, 数字>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

let a3 = ["a", "b"].map(wrap(arrayize(s => s.length)));
>a3 : 数字[][]
>["a", "b"].map(wrap(arrayize(s => s.length))) : 数字[][]
>["a", "b"].map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>wrap(arrayize(s => s.length)) : Mapper<文字, 数字[]>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>arrayize(s => s.length) : Mapper<文字, 数字[]>
>arrayize : <T, U>(cb: Mapper<T, U>) => Mapper<T, U[]>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

let a4 = ["a", "b"].map(combine(wrap(s => s.length), wrap(n => n > 10)));
>a4 : 真假[]
>["a", "b"].map(combine(wrap(s => s.length), wrap(n => n > 10))) : 真假[]
>["a", "b"].map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>combine(wrap(s => s.length), wrap(n => n > 10)) : (x: 文字) => 真假
>combine : <A, B, C>(f: (x: A) => B, g: (x: B) => C) => (x: A) => C
>wrap(s => s.length) : Mapper<文字, 数字>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>wrap(n => n > 10) : Mapper<数字, 真假>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>n => n > 10 : (n: 数字) => 真假
>n : 数字
>类型别名 :=> 数字
>n > 10 : 真假
>类型别名 :=> 真假
>n : 数字
>类型别名 :=> 数字
>10 : 10

let a5 = ["a", "b"].map(combine(identity, wrap(s => s.length)));
>a5 : 数字[]
>["a", "b"].map(combine(identity, wrap(s => s.length))) : 数字[]
>["a", "b"].map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>combine(identity, wrap(s => s.length)) : (x: 文字) => 数字
>combine : <A, B, C>(f: (x: A) => B, g: (x: B) => C) => (x: A) => C
>identity : <T>(x: T) => T
>wrap(s => s.length) : Mapper<文字, 数字>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

let a6 = ["a", "b"].map(combine(wrap(s => s.length), identity));
>a6 : 数字[]
>["a", "b"].map(combine(wrap(s => s.length), identity)) : 数字[]
>["a", "b"].map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>combine(wrap(s => s.length), identity) : (x: 文字) => 数字
>combine : <A, B, C>(f: (x: A) => B, g: (x: B) => C) => (x: A) => C
>wrap(s => s.length) : Mapper<文字, 数字>
>wrap : <T, U>(cb: Mapper<T, U>) => Mapper<T, U>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>identity : <T>(x: T) => T

// This is a contrived class. We could do the same thing with Observables, etc.
class SetOf<A> {
>SetOf : SetOf<A>
>A : A

  _store: A[];
>_store : A[]
>A : A

  add(a: A) {
>add : (a: A) => 无值
>a : A
>A : A

    this._store.push(a);
>this._store.push(a) : 数字
>类型别名 :=> 数字
>this._store.push : (...items: A[]) => 数字
>this._store : A[]
>this : 本体
>_store : A[]
>push : (...items: A[]) => 数字
>a : A
  }

  transform<B>(transformer: (a: SetOf<A>) => SetOf<B>): SetOf<B> {
>transform : <B>(transformer: (a: SetOf<A>) => SetOf<B>) => SetOf<B>
>B : B
>transformer : (a: SetOf<A>) => SetOf<B>
>a : SetOf<A>
>SetOf : SetOf<A>
>A : A
>SetOf : SetOf<A>
>B : B
>SetOf : SetOf<A>
>B : B

    return transformer(this);
>transformer(this) : SetOf<B>
>transformer : (a: SetOf<A>) => SetOf<B>
>this : 本体
  }

  forEach(fn: (a: A, index: number) => void) {
>forEach : (fn: (a: A, index: 数字) => 无值) => 无值
>fn : (a: A, index: 数字) => 无值
>a : A
>A : A
>index : 数字
>类型别名 :=> 数字

      this._store.forEach((a, i) => fn(a, i));
>this._store.forEach((a, i) => fn(a, i)) : 无值
>类型别名 :=> 无值
>this._store.forEach : (callbackfn: (value: A, index: 数字, array: A[]) => 无值, thisArg?: 任意) => 无值
>this._store : A[]
>this : 本体
>_store : A[]
>forEach : (callbackfn: (value: A, index: 数字, array: A[]) => 无值, thisArg?: 任意) => 无值
>(a, i) => fn(a, i) : (a: A, i: 数字) => 无值
>a : A
>i : 数字
>类型别名 :=> 数字
>fn(a, i) : 无值
>类型别名 :=> 无值
>fn : (a: A, index: 数字) => 无值
>a : A
>i : 数字
>类型别名 :=> 数字
  }
}

function compose<A, B, C, D, E>(
>compose : <A, B, C, D, E>(fnA: (a: SetOf<A>) => SetOf<B>, fnB: (b: SetOf<B>) => SetOf<C>, fnC: (c: SetOf<C>) => SetOf<D>, fnD: (c: SetOf<D>) => SetOf<E>) => (x: SetOf<A>) => SetOf<E>
>A : A
>B : B
>C : C
>D : D
>E : E

  fnA: (a: SetOf<A>) => SetOf<B>, 
>fnA : (a: SetOf<A>) => SetOf<B>
>a : SetOf<A>
>SetOf : SetOf<A>
>A : A
>SetOf : SetOf<A>
>B : B

  fnB: (b: SetOf<B>) => SetOf<C>, 
>fnB : (b: SetOf<B>) => SetOf<C>
>b : SetOf<B>
>SetOf : SetOf<A>
>B : B
>SetOf : SetOf<A>
>C : C

  fnC: (c: SetOf<C>) => SetOf<D>,
>fnC : (c: SetOf<C>) => SetOf<D>
>c : SetOf<C>
>SetOf : SetOf<A>
>C : C
>SetOf : SetOf<A>
>D : D

  fnD: (c: SetOf<D>) => SetOf<E>,
>fnD : (c: SetOf<D>) => SetOf<E>
>c : SetOf<D>
>SetOf : SetOf<A>
>D : D
>SetOf : SetOf<A>
>E : E

):(x: SetOf<A>) => SetOf<E>;
>x : SetOf<A>
>SetOf : SetOf<A>
>A : A
>SetOf : SetOf<A>
>E : E

/* ... etc ... */
function compose<T>(...fns: ((x: T) => T)[]): (x: T) => T {
>compose : <A, B, C, D, E>(fnA: (a: SetOf<A>) => SetOf<B>, fnB: (b: SetOf<B>) => SetOf<C>, fnC: (c: SetOf<C>) => SetOf<D>, fnD: (c: SetOf<D>) => SetOf<E>) => (x: SetOf<A>) => SetOf<E>
>T : T
>fns : ((x: T) => T)[]
>x : T
>T : T
>T : T
>x : T
>T : T
>T : T

  return (x: T) => fns.reduce((prev, fn) => fn(prev), x);
>(x: T) => fns.reduce((prev, fn) => fn(prev), x) : (x: T) => T
>x : T
>T : T
>fns.reduce((prev, fn) => fn(prev), x) : T
>fns.reduce : { (callbackfn: (previousValue: (x: T) => T, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => (x: T) => T): (x: T) => T; (callbackfn: (previousValue: (x: T) => T, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => (x: T) => T, initialValue: (x: T) => T): (x: T) => T; <U>(callbackfn: (previousValue: U, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => U, initialValue: U): U; }
>fns : ((x: T) => T)[]
>reduce : { (callbackfn: (previousValue: (x: T) => T, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => (x: T) => T): (x: T) => T; (callbackfn: (previousValue: (x: T) => T, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => (x: T) => T, initialValue: (x: T) => T): (x: T) => T; <U>(callbackfn: (previousValue: U, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => U, initialValue: U): U; }
>(prev, fn) => fn(prev) : (prev: T, fn: (x: T) => T) => T
>prev : T
>fn : (x: T) => T
>fn(prev) : T
>fn : (x: T) => T
>prev : T
>x : T
}

function map<A, B>(fn: (a: A) => B): (s: SetOf<A>) => SetOf<B> {
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>A : A
>B : B
>fn : (a: A) => B
>a : A
>A : A
>B : B
>s : SetOf<A>
>SetOf : SetOf<A>
>A : A
>SetOf : SetOf<A>
>B : B

  return (a: SetOf<A>) => {
>(a: SetOf<A>) => {    const b: SetOf<B> = new SetOf();    a.forEach(x => b.add(fn(x)));    return b;  } : (a: SetOf<A>) => SetOf<B>
>a : SetOf<A>
>SetOf : SetOf<A>
>A : A

    const b: SetOf<B> = new SetOf();
>b : SetOf<B>
>SetOf : SetOf<A>
>B : B
>new SetOf() : SetOf<B>
>SetOf : 类为 SetOf

    a.forEach(x => b.add(fn(x)));
>a.forEach(x => b.add(fn(x))) : 无值
>类型别名 :=> 无值
>a.forEach : (fn: (a: A, index: 数字) => 无值) => 无值
>a : SetOf<A>
>forEach : (fn: (a: A, index: 数字) => 无值) => 无值
>x => b.add(fn(x)) : (x: A) => 无值
>x : A
>b.add(fn(x)) : 无值
>类型别名 :=> 无值
>b.add : (a: B) => 无值
>b : SetOf<B>
>add : (a: B) => 无值
>fn(x) : B
>fn : (a: A) => B
>x : A

    return b;
>b : SetOf<B>
  }
}

function filter<A>(predicate: (a: A) => boolean): (s: SetOf<A>) => SetOf<A> {
>filter : <A>(predicate: (a: A) => 真假) => (s: SetOf<A>) => SetOf<A>
>A : A
>predicate : (a: A) => 真假
>a : A
>A : A
>s : SetOf<A>
>SetOf : SetOf<A>
>A : A
>SetOf : SetOf<A>
>A : A

  return (a: SetOf<A>) => {
>(a: SetOf<A>) => {    const result = new SetOf<A>();    a.forEach(x => {      if (predicate(x)) result.add(x);    });   return result;  } : (a: SetOf<A>) => SetOf<A>
>a : SetOf<A>
>SetOf : SetOf<A>
>A : A

    const result = new SetOf<A>();
>result : SetOf<A>
>new SetOf<A>() : SetOf<A>
>SetOf : 类为 SetOf
>A : A

    a.forEach(x => {
>a.forEach(x => {      if (predicate(x)) result.add(x);    }) : 无值
>类型别名 :=> 无值
>a.forEach : (fn: (a: A, index: 数字) => 无值) => 无值
>a : SetOf<A>
>forEach : (fn: (a: A, index: 数字) => 无值) => 无值
>x => {      if (predicate(x)) result.add(x);    } : (x: A) => 无值
>x : A

      if (predicate(x)) result.add(x);
>predicate(x) : 真假
>类型别名 :=> 真假
>predicate : (a: A) => 真假
>x : A
>result.add(x) : 无值
>类型别名 :=> 无值
>result.add : (a: A) => 无值
>result : SetOf<A>
>add : (a: A) => 无值
>x : A

    });
   return result;
>result : SetOf<A>
  }
}

const testSet = new SetOf<number>();
>testSet : SetOf<数字>
>new SetOf<number>() : SetOf<数字>
>SetOf : 类为 SetOf

testSet.add(1);
>testSet.add(1) : 无值
>类型别名 :=> 无值
>testSet.add : (a: 数字) => 无值
>testSet : SetOf<数字>
>add : (a: 数字) => 无值
>1 : 1

testSet.add(2);
>testSet.add(2) : 无值
>类型别名 :=> 无值
>testSet.add : (a: 数字) => 无值
>testSet : SetOf<数字>
>add : (a: 数字) => 无值
>2 : 2

testSet.add(3);
>testSet.add(3) : 无值
>类型别名 :=> 无值
>testSet.add : (a: 数字) => 无值
>testSet : SetOf<数字>
>add : (a: 数字) => 无值
>3 : 3

const t1 = testSet.transform(
>t1 : SetOf<文字>
>testSet.transform(  compose(    filter(x => x % 1 === 0),    map(x => x + x),    map(x => x + '!!!'),    map(x => x.toUpperCase())  )) : SetOf<文字>
>testSet.transform : <B>(transformer: (a: SetOf<数字>) => SetOf<B>) => SetOf<B>
>testSet : SetOf<数字>
>transform : <B>(transformer: (a: SetOf<数字>) => SetOf<B>) => SetOf<B>

  compose(
>compose(    filter(x => x % 1 === 0),    map(x => x + x),    map(x => x + '!!!'),    map(x => x.toUpperCase())  ) : (x: SetOf<数字>) => SetOf<文字>
>compose : <A, B, C, D, E>(fnA: (a: SetOf<A>) => SetOf<B>, fnB: (b: SetOf<B>) => SetOf<C>, fnC: (c: SetOf<C>) => SetOf<D>, fnD: (c: SetOf<D>) => SetOf<E>) => (x: SetOf<A>) => SetOf<E>

    filter(x => x % 1 === 0),
>filter(x => x % 1 === 0) : (s: SetOf<数字>) => SetOf<数字>
>filter : <A>(predicate: (a: A) => 真假) => (s: SetOf<A>) => SetOf<A>
>x => x % 1 === 0 : (x: 数字) => 真假
>x : 数字
>类型别名 :=> 数字
>x % 1 === 0 : 真假
>类型别名 :=> 真假
>x % 1 : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1
>0 : 0

    map(x => x + x),
>map(x => x + x) : (s: SetOf<数字>) => SetOf<数字>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => x + x : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>x + x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

    map(x => x + '!!!'),
>map(x => x + '!!!') : (s: SetOf<数字>) => SetOf<文字>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => x + '!!!' : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>x + '!!!' : 文字
>类型别名 :=> 文字
>x : 数字
>类型别名 :=> 数字
>'!!!' : "!!!"

    map(x => x.toUpperCase())
>map(x => x.toUpperCase()) : (s: SetOf<文字>) => SetOf<文字>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => x.toUpperCase() : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>x.toUpperCase() : 文字
>类型别名 :=> 文字
>x.toUpperCase : () => 文字
>x : 文字
>类型别名 :=> 文字
>toUpperCase : () => 文字

  )
)

declare function identity<T>(x: T): T;
>identity : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

const t2 = testSet.transform(
>t2 : SetOf<文字>
>testSet.transform(  compose(    filter(x => x % 1 === 0),    identity,    map(x => x + '!!!'),    map(x => x.toUpperCase())  )) : SetOf<文字>
>testSet.transform : <B>(transformer: (a: SetOf<数字>) => SetOf<B>) => SetOf<B>
>testSet : SetOf<数字>
>transform : <B>(transformer: (a: SetOf<数字>) => SetOf<B>) => SetOf<B>

  compose(
>compose(    filter(x => x % 1 === 0),    identity,    map(x => x + '!!!'),    map(x => x.toUpperCase())  ) : (x: SetOf<数字>) => SetOf<文字>
>compose : <A, B, C, D, E>(fnA: (a: SetOf<A>) => SetOf<B>, fnB: (b: SetOf<B>) => SetOf<C>, fnC: (c: SetOf<C>) => SetOf<D>, fnD: (c: SetOf<D>) => SetOf<E>) => (x: SetOf<A>) => SetOf<E>

    filter(x => x % 1 === 0),
>filter(x => x % 1 === 0) : (s: SetOf<数字>) => SetOf<数字>
>filter : <A>(predicate: (a: A) => 真假) => (s: SetOf<A>) => SetOf<A>
>x => x % 1 === 0 : (x: 数字) => 真假
>x : 数字
>类型别名 :=> 数字
>x % 1 === 0 : 真假
>类型别名 :=> 真假
>x % 1 : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1
>0 : 0

    identity,
>identity : <T>(x: T) => T

    map(x => x + '!!!'),
>map(x => x + '!!!') : (s: SetOf<数字>) => SetOf<文字>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => x + '!!!' : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>x + '!!!' : 文字
>类型别名 :=> 文字
>x : 数字
>类型别名 :=> 数字
>'!!!' : "!!!"

    map(x => x.toUpperCase())
>map(x => x.toUpperCase()) : (s: SetOf<文字>) => SetOf<文字>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => x.toUpperCase() : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>x.toUpperCase() : 文字
>类型别名 :=> 文字
>x.toUpperCase : () => 文字
>x : 文字
>类型别名 :=> 文字
>toUpperCase : () => 文字

  )
)

