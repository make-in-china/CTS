=== tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/derivedClassWithoutExplicitConstructor.ts ===
class Base {
>Base : Base

    a = 1;
>a : 数字
>类型别名 :=> 数字
>1 : 1

    constructor(x: number) { this.a = x; }
>x : 数字
>类型别名 :=> 数字
>this.a = x : 数字
>类型别名 :=> 数字
>this.a : 数字
>类型别名 :=> 数字
>this : 本体
>a : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
}

class Derived extends Base {
>Derived : Derived
>Base : Base

    x = 1
>x : 数字
>类型别名 :=> 数字
>1 : 1

    y = 'hello';
>y : 文字
>类型别名 :=> 文字
>'hello' : "hello"
}

var r = new Derived(); // error
>r : 任意
>类型别名 :=> 任意
>new Derived() : 任意
>类型别名 :=> 任意
>Derived : 类为 Derived

var r2 = new Derived(1); 
>r2 : Derived
>new Derived(1) : Derived
>Derived : 类为 Derived
>1 : 1

class Base2<T> {
>Base2 : Base2<T>
>T : T

    a: T;
>a : T
>T : T

    constructor(x: T) { this.a = x; }
>x : T
>T : T
>this.a = x : T
>this.a : T
>this : 本体
>a : T
>x : T
}

class D<T extends Date> extends Base2<T> {
>D : D<T>
>T : T
>Date : Date
>Base2 : Base2<T>
>T : T

    x = 2
>x : 数字
>类型别名 :=> 数字
>2 : 2

    y: T = null;
>y : T
>T : T
>null : 空值
>类型别名 :=> 空值
}

var d = new D(); // error
>d : 任意
>类型别名 :=> 任意
>new D() : 任意
>类型别名 :=> 任意
>D : 类为 D

var d2 = new D(new Date()); // ok
>d2 : D<Date>
>new D(new Date()) : D<Date>
>D : 类为 D
>new Date() : Date
>Date : DateConstructor

