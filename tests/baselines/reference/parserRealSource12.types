=== tests/cases/conformance/parser/ecmascript5/parserRealSource12.ts ===
// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
// See LICENSE.txt in the project root for complete license information.

///<reference path='typescript.ts' />

module TypeScript {
>TypeScript : 类为 TypeScript

    export interface IAstWalker {
>IAstWalker : IAstWalker

        walk(ast: AST, parent: AST): AST;
>walk : (ast: 任意, parent: 任意) => 任意
>ast : 任意
>类型别名 :=> 任意
>AST : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>AST : No type information available!

        options: AstWalkOptions;
>options : AstWalkOptions
>AstWalkOptions : AstWalkOptions

        state: any; // user state object
>state : 任意
>类型别名 :=> 任意
    }

    export class AstWalkOptions {
>AstWalkOptions : AstWalkOptions

        public goChildren = true;
>goChildren : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

        public goNextSibling = true;
>goNextSibling : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

        public reverseSiblings = false; // visit siblings in reverse execution order
>reverseSiblings : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public stopWalk(stop:boolean = true) {
>stopWalk : (stop?: 真假) => 无值
>stop : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

            this.goChildren = !stop;
>this.goChildren = !stop : 真假
>类型别名 :=> 真假
>this.goChildren : 真假
>类型别名 :=> 真假
>this : 本体
>goChildren : 真假
>类型别名 :=> 真假
>!stop : 真假
>类型别名 :=> 真假
>stop : 真假
>类型别名 :=> 真假

            this.goNextSibling = !stop;
>this.goNextSibling = !stop : 真假
>类型别名 :=> 真假
>this.goNextSibling : 真假
>类型别名 :=> 真假
>this : 本体
>goNextSibling : 真假
>类型别名 :=> 真假
>!stop : 真假
>类型别名 :=> 真假
>stop : 真假
>类型别名 :=> 真假
        }
    }

    export interface IAstWalkCallback {
>IAstWalkCallback : IAstWalkCallback

        (ast: AST, parent: AST, walker: IAstWalker): AST;
>ast : 任意
>类型别名 :=> 任意
>AST : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker
>AST : No type information available!
    }

    export interface IAstWalkChildren {
>IAstWalkChildren : IAstWalkChildren

        (preAst: AST, parent: AST, walker: IAstWalker): void;
>preAst : 任意
>类型别名 :=> 任意
>AST : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker
    }

    class AstWalker implements IAstWalker {
>AstWalker : AstWalker
>IAstWalker : IAstWalker

        constructor (
            private childrenWalkers: IAstWalkChildren[],
>childrenWalkers : IAstWalkChildren[]
>IAstWalkChildren : IAstWalkChildren

            private pre: IAstWalkCallback,
>pre : IAstWalkCallback
>IAstWalkCallback : IAstWalkCallback

            private post: IAstWalkCallback,
>post : IAstWalkCallback
>IAstWalkCallback : IAstWalkCallback

            public options: AstWalkOptions,
>options : AstWalkOptions
>AstWalkOptions : AstWalkOptions

            public state: any) {
>state : 任意
>类型别名 :=> 任意
        }

        public walk(ast: AST, parent: AST): AST {
>walk : (ast: 任意, parent: 任意) => 任意
>ast : 任意
>类型别名 :=> 任意
>AST : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>AST : No type information available!

            var preAst = this.pre(ast, parent, this);
>preAst : 任意
>类型别名 :=> 任意
>this.pre(ast, parent, this) : 任意
>类型别名 :=> 任意
>this.pre : IAstWalkCallback
>this : 本体
>pre : IAstWalkCallback
>ast : 任意
>类型别名 :=> 任意
>parent : 任意
>类型别名 :=> 任意
>this : 本体

            if (preAst === undefined) {
>preAst === undefined : 真假
>类型别名 :=> 真假
>preAst : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

                preAst = ast;
>preAst = ast : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
            }
            if (this.options.goChildren) {
>this.options.goChildren : 真假
>类型别名 :=> 真假
>this.options : AstWalkOptions
>this : 本体
>options : AstWalkOptions
>goChildren : 真假
>类型别名 :=> 真假

                var svGoSib = this.options.goNextSibling;
>svGoSib : 真假
>类型别名 :=> 真假
>this.options.goNextSibling : 真假
>类型别名 :=> 真假
>this.options : AstWalkOptions
>this : 本体
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                this.options.goNextSibling = true;
>this.options.goNextSibling = true : 为真
>类型别名 :=> 为真
>this.options.goNextSibling : 真假
>类型别名 :=> 真假
>this.options : AstWalkOptions
>this : 本体
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

                // Call the "walkChildren" function corresponding to "nodeType".
                this.childrenWalkers[ast.nodeType](ast, parent, this);
>this.childrenWalkers[ast.nodeType](ast, parent, this) : 无值
>类型别名 :=> 无值
>this.childrenWalkers[ast.nodeType] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>ast.nodeType : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>nodeType : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>parent : 任意
>类型别名 :=> 任意
>this : 本体

                this.options.goNextSibling = svGoSib;
>this.options.goNextSibling = svGoSib : 真假
>类型别名 :=> 真假
>this.options.goNextSibling : 真假
>类型别名 :=> 真假
>this.options : AstWalkOptions
>this : 本体
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假
>svGoSib : 真假
>类型别名 :=> 真假
            }
            else {
                // no go only applies to children of node issuing it
                this.options.goChildren = true;
>this.options.goChildren = true : 为真
>类型别名 :=> 为真
>this.options.goChildren : 真假
>类型别名 :=> 真假
>this.options : AstWalkOptions
>this : 本体
>options : AstWalkOptions
>goChildren : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
            }
            if (this.post) {
>this.post : IAstWalkCallback
>this : 本体
>post : IAstWalkCallback

                var postAst = this.post(preAst, parent, this);
>postAst : 任意
>类型别名 :=> 任意
>this.post(preAst, parent, this) : 任意
>类型别名 :=> 任意
>this.post : IAstWalkCallback
>this : 本体
>post : IAstWalkCallback
>preAst : 任意
>类型别名 :=> 任意
>parent : 任意
>类型别名 :=> 任意
>this : 本体

                if (postAst === undefined) {
>postAst === undefined : 真假
>类型别名 :=> 真假
>postAst : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

                    postAst = preAst;
>postAst = preAst : 任意
>类型别名 :=> 任意
>postAst : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
                }
                return postAst;
>postAst : 任意
>类型别名 :=> 任意
            }
            else {
                return preAst;
>preAst : 任意
>类型别名 :=> 任意
            }
        }
    }

    export class AstWalkerFactory {
>AstWalkerFactory : AstWalkerFactory

        private childrenWalkers: IAstWalkChildren[] = [];
>childrenWalkers : IAstWalkChildren[]
>IAstWalkChildren : IAstWalkChildren
>[] : 未定[]

        constructor () {
            this.initChildrenWalkers();
>this.initChildrenWalkers() : 无值
>类型别名 :=> 无值
>this.initChildrenWalkers : () => 无值
>this : 本体
>initChildrenWalkers : () => 无值
        }

        public walk(ast: AST, pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): AST {
>walk : (ast: 任意, pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: 任意) => 任意
>ast : 任意
>类型别名 :=> 任意
>AST : No type information available!
>pre : IAstWalkCallback
>IAstWalkCallback : IAstWalkCallback
>post : IAstWalkCallback
>IAstWalkCallback : IAstWalkCallback
>options : AstWalkOptions
>AstWalkOptions : AstWalkOptions
>state : 任意
>类型别名 :=> 任意
>AST : No type information available!

            return this.getWalker(pre, post, options, state).walk(ast, null)
>this.getWalker(pre, post, options, state).walk(ast, null) : 任意
>类型别名 :=> 任意
>this.getWalker(pre, post, options, state).walk : (ast: 任意, parent: 任意) => 任意
>this.getWalker(pre, post, options, state) : IAstWalker
>this.getWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: 任意) => IAstWalker
>this : 本体
>getWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: 任意) => IAstWalker
>pre : IAstWalkCallback
>post : IAstWalkCallback
>options : AstWalkOptions
>state : 任意
>类型别名 :=> 任意
>walk : (ast: 任意, parent: 任意) => 任意
>ast : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
        }

        public getWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {
>getWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: 任意) => IAstWalker
>pre : IAstWalkCallback
>IAstWalkCallback : IAstWalkCallback
>post : IAstWalkCallback
>IAstWalkCallback : IAstWalkCallback
>options : AstWalkOptions
>AstWalkOptions : AstWalkOptions
>state : 任意
>类型别名 :=> 任意
>IAstWalker : IAstWalker

            return this.getSlowWalker(pre, post, options, state);
>this.getSlowWalker(pre, post, options, state) : IAstWalker
>this.getSlowWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: 任意) => IAstWalker
>this : 本体
>getSlowWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: 任意) => IAstWalker
>pre : IAstWalkCallback
>post : IAstWalkCallback
>options : AstWalkOptions
>state : 任意
>类型别名 :=> 任意
        }

        private getSlowWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {
>getSlowWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: 任意) => IAstWalker
>pre : IAstWalkCallback
>IAstWalkCallback : IAstWalkCallback
>post : IAstWalkCallback
>IAstWalkCallback : IAstWalkCallback
>options : AstWalkOptions
>AstWalkOptions : AstWalkOptions
>state : 任意
>类型别名 :=> 任意
>IAstWalker : IAstWalker

            if (!options) {
>!options : 真假
>类型别名 :=> 真假
>options : AstWalkOptions

                options = new AstWalkOptions();
>options = new AstWalkOptions() : AstWalkOptions
>options : AstWalkOptions
>new AstWalkOptions() : AstWalkOptions
>AstWalkOptions : 类为 AstWalkOptions
            }

            return new AstWalker(this.childrenWalkers, pre, post, options, state);
>new AstWalker(this.childrenWalkers, pre, post, options, state) : AstWalker
>AstWalker : 类为 AstWalker
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>pre : IAstWalkCallback
>post : IAstWalkCallback
>options : AstWalkOptions
>state : 任意
>类型别名 :=> 任意
        }

        private initChildrenWalkers(): void {
>initChildrenWalkers : () => 无值

            this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.None] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.None : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>None : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Empty] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Empty : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Empty : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.EmptyExpr] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.EmptyExpr : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>EmptyExpr : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.True] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.True] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.True] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.True : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>True : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.False] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.False] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.False] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.False : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>False : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.This] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.This] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.This] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.This : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>This : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Super] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Super] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Super] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Super : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Super : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.QString] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.QString] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.QString] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.QString : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>QString : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Regex] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Regex] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Regex] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Regex : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Regex : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Null] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Null : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Null : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.ArrayLit] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.ArrayLit : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ArrayLit : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.ObjectLit] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.ObjectLit : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ObjectLit : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Void] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Void : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Void : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Comma] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Comma : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Comma : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Pos] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Pos : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Pos : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Neg] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Neg : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Neg : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Delete] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Delete : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Delete : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Await] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Await : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Await : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.In] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.In : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>In : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Dot] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Dot : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Dot : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.From] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.From : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>From : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Is] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Is : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Is : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.InstOf] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.InstOf : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>InstOf : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Typeof] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Typeof : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Typeof : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.NumberLit] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.NumberLit : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>NumberLit : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Name] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Name : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Name : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren;
>this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.TypeRef] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.TypeRef : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>TypeRef : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkTypeReferenceChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkTypeReferenceChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Index] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Index : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Index : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren;
>this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Call] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Call : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Call : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkCallExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkCallExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren;
>this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.New] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.New : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>New : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkCallExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkCallExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Asg] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Asg : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Asg : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgAdd] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgAdd : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgAdd : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgSub] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgSub : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgSub : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgDiv] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgDiv : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgDiv : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgMul] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgMul : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgMul : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgMod] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgMod : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgMod : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgAnd] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgAnd : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgAnd : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgXor] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgXor : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgXor : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgOr] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgOr : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgOr : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgLsh] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgLsh : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgLsh : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgRsh] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgRsh : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgRsh : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.AsgRs2] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgRs2 : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgRs2 : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren;
>this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.ConditionalExpression] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.ConditionalExpression : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ConditionalExpression : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkTrinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkTrinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.LogOr] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.LogOr : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>LogOr : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.LogAnd] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.LogAnd : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>LogAnd : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Or] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Or : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Or : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Xor] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Xor : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Xor : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.And] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.And : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>And : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Eq] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Eq : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Eq : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Ne] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Ne : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Ne : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Eqv] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Eqv : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Eqv : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.NEqv] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.NEqv : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>NEqv : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Lt] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Lt : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Lt : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Le] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Le : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Le : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Gt] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Gt : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Gt : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Ge] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Ge : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Ge : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Add] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Add : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Add : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Sub] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Sub : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Sub : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Mul] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Mul : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Mul : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Div] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Div : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Div : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Mod] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Mod : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Mod : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Lsh] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Lsh : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Lsh : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Rsh] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Rsh : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Rsh : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Rs2] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Rs2 : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Rs2 : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Not] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Not : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Not : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.LogNot] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.LogNot : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>LogNot : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.IncPre] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.IncPre : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>IncPre : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.DecPre] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.DecPre : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>DecPre : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.IncPost] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.IncPost : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>IncPost : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.DecPost] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.DecPost : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>DecPost : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.TypeAssertion] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.TypeAssertion : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>TypeAssertion : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren;
>this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.FuncDecl] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.FuncDecl : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>FuncDecl : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkFuncDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkFuncDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Member] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Member : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Member : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren;
>this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.VarDecl] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.VarDecl : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>VarDecl : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBoundDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBoundDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren;
>this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.ArgDecl] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.ArgDecl : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ArgDecl : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBoundDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBoundDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren;
>this.childrenWalkers[NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Return] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Return : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Return : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkReturnStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkReturnStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Break] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Break] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Break] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Break : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Break : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Continue] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Continue] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Continue] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Continue : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Continue : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Throw] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Throw : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Throw : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.For] = ChildrenWalkers.walkForStatementChildren;
>this.childrenWalkers[NodeType.For] = ChildrenWalkers.walkForStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.For] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.For : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>For : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkForStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkForStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren;
>this.childrenWalkers[NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.ForIn] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.ForIn : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ForIn : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkForInStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkForInStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.If] = ChildrenWalkers.walkIfStatementChildren;
>this.childrenWalkers[NodeType.If] = ChildrenWalkers.walkIfStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.If] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.If : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>If : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkIfStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkIfStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.While] = ChildrenWalkers.walkWhileStatementChildren;
>this.childrenWalkers[NodeType.While] = ChildrenWalkers.walkWhileStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.While] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.While : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>While : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkWhileStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkWhileStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren;
>this.childrenWalkers[NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.DoWhile] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.DoWhile : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>DoWhile : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkDoWhileStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkDoWhileStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren;
>this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Block] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Block : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Block : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkBlockChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkBlockChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren;
>this.childrenWalkers[NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Case] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Case : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Case : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkCaseStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkCaseStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren;
>this.childrenWalkers[NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Switch] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Switch : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Switch : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkSwitchStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkSwitchStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Try] = ChildrenWalkers.walkTryChildren;
>this.childrenWalkers[NodeType.Try] = ChildrenWalkers.walkTryChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Try] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Try : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Try : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkTryChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkTryChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren;
>this.childrenWalkers[NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.TryCatch] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.TryCatch : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>TryCatch : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkTryCatchChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkTryCatchChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren;
>this.childrenWalkers[NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.TryFinally] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.TryFinally : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>TryFinally : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkTryFinallyChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkTryFinallyChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Finally] = ChildrenWalkers.walkFinallyChildren;
>this.childrenWalkers[NodeType.Finally] = ChildrenWalkers.walkFinallyChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Finally] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Finally : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Finally : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkFinallyChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkFinallyChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Catch] = ChildrenWalkers.walkCatchChildren;
>this.childrenWalkers[NodeType.Catch] = ChildrenWalkers.walkCatchChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Catch] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Catch : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Catch : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkCatchChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkCatchChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren;
>this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.List] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.List : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>List : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkListChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkListChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren;
>this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Script] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Script : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Script : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkScriptChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkScriptChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren;
>this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.ClassDeclaration] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.ClassDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ClassDeclaration : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkClassDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkClassDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren;
>this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.InterfaceDeclaration] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.InterfaceDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>InterfaceDeclaration : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkTypeDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkTypeDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren;
>this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.ModuleDeclaration] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.ModuleDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ModuleDeclaration : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkModuleDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkModuleDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren;
>this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.ImportDeclaration] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.ImportDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ImportDeclaration : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkImportDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkImportDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.With] = ChildrenWalkers.walkWithStatementChildren;
>this.childrenWalkers[NodeType.With] = ChildrenWalkers.walkWithStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.With] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.With : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>With : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkWithStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkWithStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Label] = ChildrenWalkers.walkLabelChildren;
>this.childrenWalkers[NodeType.Label] = ChildrenWalkers.walkLabelChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Label] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Label : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Label : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkLabelChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkLabelChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren;
>this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.LabeledStatement] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.LabeledStatement : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>LabeledStatement : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkLabeledStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkLabeledStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.EBStart] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.EBStart] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.EBStart] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.EBStart : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>EBStart : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.GotoEB] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.GotoEB] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.GotoEB] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.GotoEB : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>GotoEB : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.EndCode] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.EndCode : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>EndCode : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Error] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Error] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Error] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Error : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Error : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Comment] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Comment : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Comment : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>this.childrenWalkers[NodeType.Debugger] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>NodeType.Debugger : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Debugger : 任意
>类型别名 :=> 任意
>ChildrenWalkers.walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>ChildrenWalkers : 类为 ChildrenWalkers
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值

            // Verify the code is up to date with the enum
            for (var e in (<any>NodeType)._map) {
>e : 文字
>类型别名 :=> 文字
>(<any>NodeType)._map : 任意
>类型别名 :=> 任意
>(<any>NodeType) : 任意
>类型别名 :=> 任意
><any>NodeType : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>_map : 任意
>类型别名 :=> 任意

                if ((<any>this.childrenWalkers)[e] === undefined) {
>(<any>this.childrenWalkers)[e] === undefined : 真假
>类型别名 :=> 真假
>(<any>this.childrenWalkers)[e] : 任意
>类型别名 :=> 任意
>(<any>this.childrenWalkers) : 任意
>类型别名 :=> 任意
><any>this.childrenWalkers : 任意
>类型别名 :=> 任意
>this.childrenWalkers : IAstWalkChildren[]
>this : 本体
>childrenWalkers : IAstWalkChildren[]
>e : 文字
>类型别名 :=> 文字
>undefined : 未定
>类型别名 :=> 未定

                    throw new Error("initWalkers function is not up to date with enum content!");
>new Error("initWalkers function is not up to date with enum content!") : Error
>Error : ErrorConstructor
>"initWalkers function is not up to date with enum content!" : "initWalkers function is not up to date with enum content!"
                }
            }
        }
    }

    var globalAstWalkerFactory: AstWalkerFactory;
>globalAstWalkerFactory : AstWalkerFactory
>AstWalkerFactory : AstWalkerFactory

    export function getAstWalkerFactory(): AstWalkerFactory {
>getAstWalkerFactory : () => AstWalkerFactory
>AstWalkerFactory : AstWalkerFactory

        if (!globalAstWalkerFactory) {
>!globalAstWalkerFactory : 真假
>类型别名 :=> 真假
>globalAstWalkerFactory : AstWalkerFactory

            globalAstWalkerFactory = new AstWalkerFactory();
>globalAstWalkerFactory = new AstWalkerFactory() : AstWalkerFactory
>globalAstWalkerFactory : AstWalkerFactory
>new AstWalkerFactory() : AstWalkerFactory
>AstWalkerFactory : 类为 AstWalkerFactory
        }
        return globalAstWalkerFactory;
>globalAstWalkerFactory : AstWalkerFactory
    }

    module ChildrenWalkers {
>ChildrenWalkers : 类为 ChildrenWalkers

        export function walkNone(preAst: ASTList, parent: AST, walker: IAstWalker): void {
>walkNone : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            // Nothing to do
        }

        export function walkListChildren(preAst: ASTList, parent: AST, walker: IAstWalker): void {
>walkListChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            var len = preAst.members.length;
>len : 任意
>类型别名 :=> 任意
>preAst.members.length : 任意
>类型别名 :=> 任意
>preAst.members : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意

            if (walker.options.reverseSiblings) {
>walker.options.reverseSiblings : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>reverseSiblings : 真假
>类型别名 :=> 真假

                for (var i = len - 1; i >= 0; i--) {
>i : 数字
>类型别名 :=> 数字
>len - 1 : 数字
>类型别名 :=> 数字
>len : 任意
>类型别名 :=> 任意
>1 : 1
>i >= 0 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i-- : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                    if (walker.options.goNextSibling) {
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                        preAst.members[i] = walker.walk(preAst.members[i], preAst);
>preAst.members[i] = walker.walk(preAst.members[i], preAst) : 任意
>类型别名 :=> 任意
>preAst.members[i] : 任意
>类型别名 :=> 任意
>preAst.members : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字
>walker.walk(preAst.members[i], preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.members[i] : 任意
>类型别名 :=> 任意
>preAst.members : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字
>preAst : 任意
>类型别名 :=> 任意
                    }
                }
            }
            else {
                for (var i = 0; i < len; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 任意
>类型别名 :=> 任意
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                    if (walker.options.goNextSibling) {
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                        preAst.members[i] = walker.walk(preAst.members[i], preAst);
>preAst.members[i] = walker.walk(preAst.members[i], preAst) : 任意
>类型别名 :=> 任意
>preAst.members[i] : 任意
>类型别名 :=> 任意
>preAst.members : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字
>walker.walk(preAst.members[i], preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.members[i] : 任意
>类型别名 :=> 任意
>preAst.members : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字
>preAst : 任意
>类型别名 :=> 任意
                    }
                }
            }
        }

        export function walkUnaryExpressionChildren(preAst: UnaryExpression, parent: AST, walker: IAstWalker): void {
>walkUnaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>UnaryExpression : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.castTerm) {
>preAst.castTerm : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>castTerm : 任意
>类型别名 :=> 任意

                preAst.castTerm = walker.walk(preAst.castTerm, preAst);
>preAst.castTerm = walker.walk(preAst.castTerm, preAst) : 任意
>类型别名 :=> 任意
>preAst.castTerm : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>castTerm : 任意
>类型别名 :=> 任意
>walker.walk(preAst.castTerm, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.castTerm : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>castTerm : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.operand) {
>preAst.operand : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand : 任意
>类型别名 :=> 任意

                preAst.operand = walker.walk(preAst.operand, preAst);
>preAst.operand = walker.walk(preAst.operand, preAst) : 任意
>类型别名 :=> 任意
>preAst.operand : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand : 任意
>类型别名 :=> 任意
>walker.walk(preAst.operand, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.operand : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkBinaryExpressionChildren(preAst: BinaryExpression, parent: AST, walker: IAstWalker): void {
>walkBinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>BinaryExpression : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (walker.options.reverseSiblings) {
>walker.options.reverseSiblings : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>reverseSiblings : 真假
>类型别名 :=> 真假

                if (preAst.operand2) {
>preAst.operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand2 : 任意
>类型别名 :=> 任意

                    preAst.operand2 = walker.walk(preAst.operand2, preAst);
>preAst.operand2 = walker.walk(preAst.operand2, preAst) : 任意
>类型别名 :=> 任意
>preAst.operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand2 : 任意
>类型别名 :=> 任意
>walker.walk(preAst.operand2, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
                }
                if ((preAst.operand1) && (walker.options.goNextSibling)) {
>(preAst.operand1) && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>(preAst.operand1) : 任意
>类型别名 :=> 任意
>preAst.operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand1 : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                    preAst.operand1 = walker.walk(preAst.operand1, preAst);
>preAst.operand1 = walker.walk(preAst.operand1, preAst) : 任意
>类型别名 :=> 任意
>preAst.operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand1 : 任意
>类型别名 :=> 任意
>walker.walk(preAst.operand1, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
                }
            } else {
                if (preAst.operand1) {
>preAst.operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand1 : 任意
>类型别名 :=> 任意

                    preAst.operand1 = walker.walk(preAst.operand1, preAst);
>preAst.operand1 = walker.walk(preAst.operand1, preAst) : 任意
>类型别名 :=> 任意
>preAst.operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand1 : 任意
>类型别名 :=> 任意
>walker.walk(preAst.operand1, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
                }
                if ((preAst.operand2) && (walker.options.goNextSibling)) {
>(preAst.operand2) && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>(preAst.operand2) : 任意
>类型别名 :=> 任意
>preAst.operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand2 : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                    preAst.operand2 = walker.walk(preAst.operand2, preAst);
>preAst.operand2 = walker.walk(preAst.operand2, preAst) : 任意
>类型别名 :=> 任意
>preAst.operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand2 : 任意
>类型别名 :=> 任意
>walker.walk(preAst.operand2, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
                }
            }
        }

        export function walkTypeReferenceChildren(preAst: TypeReference, parent: AST, walker: IAstWalker): void {
>walkTypeReferenceChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>TypeReference : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.term) {
>preAst.term : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>term : 任意
>类型别名 :=> 任意

                preAst.term = walker.walk(preAst.term, preAst);
>preAst.term = walker.walk(preAst.term, preAst) : 任意
>类型别名 :=> 任意
>preAst.term : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>term : 任意
>类型别名 :=> 任意
>walker.walk(preAst.term, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.term : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>term : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkCallExpressionChildren(preAst: CallExpression, parent: AST, walker: IAstWalker): void {
>walkCallExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>CallExpression : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (!walker.options.reverseSiblings) {
>!walker.options.reverseSiblings : 真假
>类型别名 :=> 真假
>walker.options.reverseSiblings : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>reverseSiblings : 真假
>类型别名 :=> 真假

                preAst.target = walker.walk(preAst.target, preAst);
>preAst.target = walker.walk(preAst.target, preAst) : 任意
>类型别名 :=> 任意
>preAst.target : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>target : 任意
>类型别名 :=> 任意
>walker.walk(preAst.target, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.target : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>target : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.arguments && (walker.options.goNextSibling)) {
>preAst.arguments && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.arguments : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>arguments : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.arguments = <ASTList> walker.walk(preAst.arguments, preAst);
>preAst.arguments = <ASTList> walker.walk(preAst.arguments, preAst) : 任意
>类型别名 :=> 任意
>preAst.arguments : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>arguments : 任意
>类型别名 :=> 任意
><ASTList> walker.walk(preAst.arguments, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.arguments, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.arguments : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>arguments : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if ((walker.options.reverseSiblings) && (walker.options.goNextSibling)) {
>(walker.options.reverseSiblings) && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>(walker.options.reverseSiblings) : 真假
>类型别名 :=> 真假
>walker.options.reverseSiblings : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>reverseSiblings : 真假
>类型别名 :=> 真假
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.target = walker.walk(preAst.target, preAst);
>preAst.target = walker.walk(preAst.target, preAst) : 任意
>类型别名 :=> 任意
>preAst.target : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>target : 任意
>类型别名 :=> 任意
>walker.walk(preAst.target, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.target : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>target : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkTrinaryExpressionChildren(preAst: ConditionalExpression, parent: AST, walker: IAstWalker): void {
>walkTrinaryExpressionChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>ConditionalExpression : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.operand1) {
>preAst.operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand1 : 任意
>类型别名 :=> 任意

                preAst.operand1 = walker.walk(preAst.operand1, preAst);
>preAst.operand1 = walker.walk(preAst.operand1, preAst) : 任意
>类型别名 :=> 任意
>preAst.operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand1 : 任意
>类型别名 :=> 任意
>walker.walk(preAst.operand1, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand1 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.operand2 && (walker.options.goNextSibling)) {
>preAst.operand2 && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand2 : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.operand2 = walker.walk(preAst.operand2, preAst);
>preAst.operand2 = walker.walk(preAst.operand2, preAst) : 任意
>类型别名 :=> 任意
>preAst.operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand2 : 任意
>类型别名 :=> 任意
>walker.walk(preAst.operand2, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand2 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.operand3 && (walker.options.goNextSibling)) {
>preAst.operand3 && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.operand3 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand3 : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.operand3 = walker.walk(preAst.operand3, preAst);
>preAst.operand3 = walker.walk(preAst.operand3, preAst) : 任意
>类型别名 :=> 任意
>preAst.operand3 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand3 : 任意
>类型别名 :=> 任意
>walker.walk(preAst.operand3, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.operand3 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>operand3 : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkFuncDeclChildren(preAst: FuncDecl, parent: AST, walker: IAstWalker): void {
>walkFuncDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>FuncDecl : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.name) {
>preAst.name : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>name : 任意
>类型别名 :=> 任意

                preAst.name = <Identifier>walker.walk(preAst.name, preAst);
>preAst.name = <Identifier>walker.walk(preAst.name, preAst) : 任意
>类型别名 :=> 任意
>preAst.name : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>name : 任意
>类型别名 :=> 任意
><Identifier>walker.walk(preAst.name, preAst) : 任意
>类型别名 :=> 任意
>Identifier : No type information available!
>walker.walk(preAst.name, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.name : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>name : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.arguments && (preAst.arguments.members.length > 0) && (walker.options.goNextSibling)) {
>preAst.arguments && (preAst.arguments.members.length > 0) && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.arguments && (preAst.arguments.members.length > 0) : 真假
>类型别名 :=> 真假
>preAst.arguments : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>arguments : 任意
>类型别名 :=> 任意
>(preAst.arguments.members.length > 0) : 真假
>类型别名 :=> 真假
>preAst.arguments.members.length > 0 : 真假
>类型别名 :=> 真假
>preAst.arguments.members.length : 任意
>类型别名 :=> 任意
>preAst.arguments.members : 任意
>类型别名 :=> 任意
>preAst.arguments : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>arguments : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.arguments = <ASTList>walker.walk(preAst.arguments, preAst);
>preAst.arguments = <ASTList>walker.walk(preAst.arguments, preAst) : 任意
>类型别名 :=> 任意
>preAst.arguments : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>arguments : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.arguments, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.arguments, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.arguments : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>arguments : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.returnTypeAnnotation && (walker.options.goNextSibling)) {
>preAst.returnTypeAnnotation && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.returnTypeAnnotation : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>returnTypeAnnotation : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst);
>preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst) : 任意
>类型别名 :=> 任意
>preAst.returnTypeAnnotation : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>returnTypeAnnotation : 任意
>类型别名 :=> 任意
>walker.walk(preAst.returnTypeAnnotation, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.returnTypeAnnotation : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>returnTypeAnnotation : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.bod && (preAst.bod.members.length > 0) && (walker.options.goNextSibling)) {
>preAst.bod && (preAst.bod.members.length > 0) && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.bod && (preAst.bod.members.length > 0) : 真假
>类型别名 :=> 真假
>preAst.bod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>bod : 任意
>类型别名 :=> 任意
>(preAst.bod.members.length > 0) : 真假
>类型别名 :=> 真假
>preAst.bod.members.length > 0 : 真假
>类型别名 :=> 真假
>preAst.bod.members.length : 任意
>类型别名 :=> 任意
>preAst.bod.members : 任意
>类型别名 :=> 任意
>preAst.bod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>bod : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);
>preAst.bod = <ASTList>walker.walk(preAst.bod, preAst) : 任意
>类型别名 :=> 任意
>preAst.bod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>bod : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.bod, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.bod, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.bod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>bod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkBoundDeclChildren(preAst: BoundDecl, parent: AST, walker: IAstWalker): void {
>walkBoundDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>BoundDecl : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.id) {
>preAst.id : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>id : 任意
>类型别名 :=> 任意

                preAst.id = <Identifier>walker.walk(preAst.id, preAst);
>preAst.id = <Identifier>walker.walk(preAst.id, preAst) : 任意
>类型别名 :=> 任意
>preAst.id : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>id : 任意
>类型别名 :=> 任意
><Identifier>walker.walk(preAst.id, preAst) : 任意
>类型别名 :=> 任意
>Identifier : No type information available!
>walker.walk(preAst.id, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.id : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>id : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.init) {
>preAst.init : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>init : 任意
>类型别名 :=> 任意

                preAst.init = walker.walk(preAst.init, preAst);
>preAst.init = walker.walk(preAst.init, preAst) : 任意
>类型别名 :=> 任意
>preAst.init : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>init : 任意
>类型别名 :=> 任意
>walker.walk(preAst.init, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.init : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>init : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if ((preAst.typeExpr) && (walker.options.goNextSibling)) {
>(preAst.typeExpr) && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>(preAst.typeExpr) : 任意
>类型别名 :=> 任意
>preAst.typeExpr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>typeExpr : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.typeExpr = walker.walk(preAst.typeExpr, preAst);
>preAst.typeExpr = walker.walk(preAst.typeExpr, preAst) : 任意
>类型别名 :=> 任意
>preAst.typeExpr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>typeExpr : 任意
>类型别名 :=> 任意
>walker.walk(preAst.typeExpr, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.typeExpr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>typeExpr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkReturnStatementChildren(preAst: ReturnStatement, parent: AST, walker: IAstWalker): void {
>walkReturnStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>ReturnStatement : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.returnExpression) {
>preAst.returnExpression : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>returnExpression : 任意
>类型别名 :=> 任意

                preAst.returnExpression = walker.walk(preAst.returnExpression, preAst);
>preAst.returnExpression = walker.walk(preAst.returnExpression, preAst) : 任意
>类型别名 :=> 任意
>preAst.returnExpression : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>returnExpression : 任意
>类型别名 :=> 任意
>walker.walk(preAst.returnExpression, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.returnExpression : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>returnExpression : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkForStatementChildren(preAst: ForStatement, parent: AST, walker: IAstWalker): void {
>walkForStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>ForStatement : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.init) {
>preAst.init : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>init : 任意
>类型别名 :=> 任意

                preAst.init = walker.walk(preAst.init, preAst);
>preAst.init = walker.walk(preAst.init, preAst) : 任意
>类型别名 :=> 任意
>preAst.init : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>init : 任意
>类型别名 :=> 任意
>walker.walk(preAst.init, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.init : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>init : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if (preAst.cond && walker.options.goNextSibling) {
>preAst.cond && walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>preAst.cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>cond : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.cond = walker.walk(preAst.cond, preAst);
>preAst.cond = walker.walk(preAst.cond, preAst) : 任意
>类型别名 :=> 任意
>preAst.cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>cond : 任意
>类型别名 :=> 任意
>walker.walk(preAst.cond, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if (preAst.incr && walker.options.goNextSibling) {
>preAst.incr && walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>preAst.incr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>incr : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.incr = walker.walk(preAst.incr, preAst);
>preAst.incr = walker.walk(preAst.incr, preAst) : 任意
>类型别名 :=> 任意
>preAst.incr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>incr : 任意
>类型别名 :=> 任意
>walker.walk(preAst.incr, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.incr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>incr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if (preAst.body && walker.options.goNextSibling) {
>preAst.body && walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkForInStatementChildren(preAst: ForInStatement, parent: AST, walker: IAstWalker): void {
>walkForInStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>ForInStatement : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            preAst.lval = walker.walk(preAst.lval, preAst);
>preAst.lval = walker.walk(preAst.lval, preAst) : 任意
>类型别名 :=> 任意
>preAst.lval : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>lval : 任意
>类型别名 :=> 任意
>walker.walk(preAst.lval, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.lval : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>lval : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意

            if (walker.options.goNextSibling) {
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.obj = walker.walk(preAst.obj, preAst);
>preAst.obj = walker.walk(preAst.obj, preAst) : 任意
>类型别名 :=> 任意
>preAst.obj : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意
>walker.walk(preAst.obj, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.obj : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.body && (walker.options.goNextSibling)) {
>preAst.body && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkIfStatementChildren(preAst: IfStatement, parent: AST, walker: IAstWalker): void {
>walkIfStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>IfStatement : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            preAst.cond = walker.walk(preAst.cond, preAst);
>preAst.cond = walker.walk(preAst.cond, preAst) : 任意
>类型别名 :=> 任意
>preAst.cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>cond : 任意
>类型别名 :=> 任意
>walker.walk(preAst.cond, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意

            if (preAst.thenBod && (walker.options.goNextSibling)) {
>preAst.thenBod && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.thenBod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>thenBod : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.thenBod = walker.walk(preAst.thenBod, preAst);
>preAst.thenBod = walker.walk(preAst.thenBod, preAst) : 任意
>类型别名 :=> 任意
>preAst.thenBod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>thenBod : 任意
>类型别名 :=> 任意
>walker.walk(preAst.thenBod, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.thenBod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>thenBod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.elseBod && (walker.options.goNextSibling)) {
>preAst.elseBod && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.elseBod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>elseBod : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.elseBod = walker.walk(preAst.elseBod, preAst);
>preAst.elseBod = walker.walk(preAst.elseBod, preAst) : 任意
>类型别名 :=> 任意
>preAst.elseBod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>elseBod : 任意
>类型别名 :=> 任意
>walker.walk(preAst.elseBod, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.elseBod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>elseBod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkWhileStatementChildren(preAst: WhileStatement, parent: AST, walker: IAstWalker): void {
>walkWhileStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>WhileStatement : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            preAst.cond = walker.walk(preAst.cond, preAst);
>preAst.cond = walker.walk(preAst.cond, preAst) : 任意
>类型别名 :=> 任意
>preAst.cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>cond : 任意
>类型别名 :=> 任意
>walker.walk(preAst.cond, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意

            if (preAst.body && (walker.options.goNextSibling)) {
>preAst.body && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkDoWhileStatementChildren(preAst: DoWhileStatement, parent: AST, walker: IAstWalker): void {
>walkDoWhileStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>DoWhileStatement : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            preAst.cond = walker.walk(preAst.cond, preAst);
>preAst.cond = walker.walk(preAst.cond, preAst) : 任意
>类型别名 :=> 任意
>preAst.cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>cond : 任意
>类型别名 :=> 任意
>walker.walk(preAst.cond, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>cond : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意

            if (preAst.body && (walker.options.goNextSibling)) {
>preAst.body && (walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>(walker.options.goNextSibling) : 真假
>类型别名 :=> 真假
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkBlockChildren(preAst: Block, parent: AST, walker: IAstWalker): void {
>walkBlockChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>Block : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.statements) {
>preAst.statements : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>statements : 任意
>类型别名 :=> 任意

                preAst.statements = <ASTList>walker.walk(preAst.statements, preAst);
>preAst.statements = <ASTList>walker.walk(preAst.statements, preAst) : 任意
>类型别名 :=> 任意
>preAst.statements : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>statements : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.statements, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.statements, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.statements : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>statements : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkCaseStatementChildren(preAst: CaseStatement, parent: AST, walker: IAstWalker): void {
>walkCaseStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>CaseStatement : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.expr) {
>preAst.expr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>expr : 任意
>类型别名 :=> 任意

                preAst.expr = walker.walk(preAst.expr, preAst);
>preAst.expr = walker.walk(preAst.expr, preAst) : 任意
>类型别名 :=> 任意
>preAst.expr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>expr : 任意
>类型别名 :=> 任意
>walker.walk(preAst.expr, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.expr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>expr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if (preAst.body && walker.options.goNextSibling) {
>preAst.body && walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.body = <ASTList>walker.walk(preAst.body, preAst);
>preAst.body = <ASTList>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkSwitchStatementChildren(preAst: SwitchStatement, parent: AST, walker: IAstWalker): void {
>walkSwitchStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>SwitchStatement : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.val) {
>preAst.val : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>val : 任意
>类型别名 :=> 任意

                preAst.val = walker.walk(preAst.val, preAst);
>preAst.val = walker.walk(preAst.val, preAst) : 任意
>类型别名 :=> 任意
>preAst.val : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>val : 任意
>类型别名 :=> 任意
>walker.walk(preAst.val, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.val : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>val : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if ((preAst.caseList) && walker.options.goNextSibling) {
>(preAst.caseList) && walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>(preAst.caseList) : 任意
>类型别名 :=> 任意
>preAst.caseList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>caseList : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.caseList = <ASTList>walker.walk(preAst.caseList, preAst);
>preAst.caseList = <ASTList>walker.walk(preAst.caseList, preAst) : 任意
>类型别名 :=> 任意
>preAst.caseList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>caseList : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.caseList, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.caseList, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.caseList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>caseList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkTryChildren(preAst: Try, parent: AST, walker: IAstWalker): void {
>walkTryChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>Try : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.body) {
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkTryCatchChildren(preAst: TryCatch, parent: AST, walker: IAstWalker): void {
>walkTryCatchChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>TryCatch : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.tryNode) {
>preAst.tryNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>tryNode : 任意
>类型别名 :=> 任意

                preAst.tryNode = <Try>walker.walk(preAst.tryNode, preAst);
>preAst.tryNode = <Try>walker.walk(preAst.tryNode, preAst) : 任意
>类型别名 :=> 任意
>preAst.tryNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>tryNode : 任意
>类型别名 :=> 任意
><Try>walker.walk(preAst.tryNode, preAst) : 任意
>类型别名 :=> 任意
>Try : No type information available!
>walker.walk(preAst.tryNode, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.tryNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>tryNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if ((preAst.catchNode) && walker.options.goNextSibling) {
>(preAst.catchNode) && walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>(preAst.catchNode) : 任意
>类型别名 :=> 任意
>preAst.catchNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>catchNode : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.catchNode = <Catch>walker.walk(preAst.catchNode, preAst);
>preAst.catchNode = <Catch>walker.walk(preAst.catchNode, preAst) : 任意
>类型别名 :=> 任意
>preAst.catchNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>catchNode : 任意
>类型别名 :=> 任意
><Catch>walker.walk(preAst.catchNode, preAst) : 任意
>类型别名 :=> 任意
>Catch : No type information available!
>walker.walk(preAst.catchNode, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.catchNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>catchNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkTryFinallyChildren(preAst: TryFinally, parent: AST, walker: IAstWalker): void {
>walkTryFinallyChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>TryFinally : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.tryNode) {
>preAst.tryNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>tryNode : 任意
>类型别名 :=> 任意

                preAst.tryNode = walker.walk(preAst.tryNode, preAst);
>preAst.tryNode = walker.walk(preAst.tryNode, preAst) : 任意
>类型别名 :=> 任意
>preAst.tryNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>tryNode : 任意
>类型别名 :=> 任意
>walker.walk(preAst.tryNode, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.tryNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>tryNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if (preAst.finallyNode && walker.options.goNextSibling) {
>preAst.finallyNode && walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>preAst.finallyNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>finallyNode : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.finallyNode = <Finally>walker.walk(preAst.finallyNode, preAst);
>preAst.finallyNode = <Finally>walker.walk(preAst.finallyNode, preAst) : 任意
>类型别名 :=> 任意
>preAst.finallyNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>finallyNode : 任意
>类型别名 :=> 任意
><Finally>walker.walk(preAst.finallyNode, preAst) : 任意
>类型别名 :=> 任意
>Finally : No type information available!
>walker.walk(preAst.finallyNode, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.finallyNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>finallyNode : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkFinallyChildren(preAst: Finally, parent: AST, walker: IAstWalker): void {
>walkFinallyChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>Finally : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.body) {
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkCatchChildren(preAst: Catch, parent: AST, walker: IAstWalker): void {
>walkCatchChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>Catch : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.param) {
>preAst.param : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>param : 任意
>类型别名 :=> 任意

                preAst.param = <VarDecl>walker.walk(preAst.param, preAst);
>preAst.param = <VarDecl>walker.walk(preAst.param, preAst) : 任意
>类型别名 :=> 任意
>preAst.param : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>param : 任意
>类型别名 :=> 任意
><VarDecl>walker.walk(preAst.param, preAst) : 任意
>类型别名 :=> 任意
>VarDecl : No type information available!
>walker.walk(preAst.param, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.param : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>param : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if ((preAst.body) && walker.options.goNextSibling) {
>(preAst.body) && walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>(preAst.body) : 任意
>类型别名 :=> 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkRecordChildren(preAst: NamedDeclaration, parent: AST, walker: IAstWalker): void {
>walkRecordChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>NamedDeclaration : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            preAst.name = <Identifier>walker.walk(preAst.name, preAst);
>preAst.name = <Identifier>walker.walk(preAst.name, preAst) : 任意
>类型别名 :=> 任意
>preAst.name : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>name : 任意
>类型别名 :=> 任意
><Identifier>walker.walk(preAst.name, preAst) : 任意
>类型别名 :=> 任意
>Identifier : No type information available!
>walker.walk(preAst.name, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.name : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>name : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意

            if (walker.options.goNextSibling && preAst.members) {
>walker.options.goNextSibling && preAst.members : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假
>preAst.members : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意

                preAst.members = <ASTList>walker.walk(preAst.members, preAst);
>preAst.members = <ASTList>walker.walk(preAst.members, preAst) : 任意
>类型别名 :=> 任意
>preAst.members : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.members, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.members, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.members : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

        }

        export function walkNamedTypeChildren(preAst: TypeDeclaration, parent: AST, walker: IAstWalker): void {
>walkNamedTypeChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>TypeDeclaration : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            walkRecordChildren(preAst, parent, walker);
>walkRecordChildren(preAst, parent, walker) : 无值
>类型别名 :=> 无值
>walkRecordChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>parent : 任意
>类型别名 :=> 任意
>walker : IAstWalker
        }

        export function walkClassDeclChildren(preAst: ClassDeclaration, parent: AST, walker: IAstWalker): void {
>walkClassDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>ClassDeclaration : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            walkNamedTypeChildren(preAst, parent, walker);
>walkNamedTypeChildren(preAst, parent, walker) : 无值
>类型别名 :=> 无值
>walkNamedTypeChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>parent : 任意
>类型别名 :=> 任意
>walker : IAstWalker

            if (walker.options.goNextSibling && preAst.extendsList) {
>walker.options.goNextSibling && preAst.extendsList : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假
>preAst.extendsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意

                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);
>preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst) : 任意
>类型别名 :=> 任意
>preAst.extendsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.extendsList, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.extendsList, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.extendsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if (walker.options.goNextSibling && preAst.implementsList) {
>walker.options.goNextSibling && preAst.implementsList : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假
>preAst.implementsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>implementsList : 任意
>类型别名 :=> 任意

                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);
>preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst) : 任意
>类型别名 :=> 任意
>preAst.implementsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>implementsList : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.implementsList, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.implementsList, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.implementsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>implementsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkScriptChildren(preAst: Script, parent: AST, walker: IAstWalker): void {
>walkScriptChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>Script : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.bod) {
>preAst.bod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>bod : 任意
>类型别名 :=> 任意

                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);
>preAst.bod = <ASTList>walker.walk(preAst.bod, preAst) : 任意
>类型别名 :=> 任意
>preAst.bod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>bod : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.bod, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.bod, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.bod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>bod : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkTypeDeclChildren(preAst: InterfaceDeclaration, parent: AST, walker: IAstWalker): void {
>walkTypeDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>InterfaceDeclaration : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            walkNamedTypeChildren(preAst, parent, walker);
>walkNamedTypeChildren(preAst, parent, walker) : 无值
>类型别名 :=> 无值
>walkNamedTypeChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>parent : 任意
>类型别名 :=> 任意
>walker : IAstWalker

            // walked arguments as part of members
            if (walker.options.goNextSibling && preAst.extendsList) {
>walker.options.goNextSibling && preAst.extendsList : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假
>preAst.extendsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意

                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);
>preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst) : 任意
>类型别名 :=> 任意
>preAst.extendsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.extendsList, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.extendsList, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.extendsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if (walker.options.goNextSibling && preAst.implementsList) {
>walker.options.goNextSibling && preAst.implementsList : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假
>preAst.implementsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>implementsList : 任意
>类型别名 :=> 任意

                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);
>preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst) : 任意
>类型别名 :=> 任意
>preAst.implementsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>implementsList : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.implementsList, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.implementsList, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.implementsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>implementsList : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkModuleDeclChildren(preAst: ModuleDeclaration, parent: AST, walker: IAstWalker): void {
>walkModuleDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>ModuleDeclaration : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            walkRecordChildren(preAst, parent, walker);
>walkRecordChildren(preAst, parent, walker) : 无值
>类型别名 :=> 无值
>walkRecordChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>parent : 任意
>类型别名 :=> 任意
>walker : IAstWalker
        }

        export function walkImportDeclChildren(preAst: ImportDeclaration, parent: AST, walker: IAstWalker): void {
>walkImportDeclChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>ImportDeclaration : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.id) {
>preAst.id : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>id : 任意
>类型别名 :=> 任意

                preAst.id = <Identifier>walker.walk(preAst.id, preAst);
>preAst.id = <Identifier>walker.walk(preAst.id, preAst) : 任意
>类型别名 :=> 任意
>preAst.id : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>id : 任意
>类型别名 :=> 任意
><Identifier>walker.walk(preAst.id, preAst) : 任意
>类型别名 :=> 任意
>Identifier : No type information available!
>walker.walk(preAst.id, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.id : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>id : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
            if (preAst.alias) {
>preAst.alias : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>alias : 任意
>类型别名 :=> 任意

                preAst.alias = walker.walk(preAst.alias, preAst);
>preAst.alias = walker.walk(preAst.alias, preAst) : 任意
>类型别名 :=> 任意
>preAst.alias : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>alias : 任意
>类型别名 :=> 任意
>walker.walk(preAst.alias, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.alias : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>alias : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkWithStatementChildren(preAst: WithStatement, parent: AST, walker: IAstWalker): void {
>walkWithStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>WithStatement : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            if (preAst.expr) {
>preAst.expr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>expr : 任意
>类型别名 :=> 任意

                preAst.expr = walker.walk(preAst.expr, preAst);
>preAst.expr = walker.walk(preAst.expr, preAst) : 任意
>类型别名 :=> 任意
>preAst.expr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>expr : 任意
>类型别名 :=> 任意
>walker.walk(preAst.expr, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.expr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>expr : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }

            if (preAst.body && walker.options.goNextSibling) {
>preAst.body && walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>walker.walk(preAst.body, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>body : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }

        export function walkLabelChildren(preAst: Label, parent: AST, walker: IAstWalker): void {
>walkLabelChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>Label : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            //TODO: Walk "id"?
        }

        export function walkLabeledStatementChildren(preAst: LabeledStatement, parent: AST, walker: IAstWalker): void {
>walkLabeledStatementChildren : (preAst: 任意, parent: 任意, walker: IAstWalker) => 无值
>preAst : 任意
>类型别名 :=> 任意
>LabeledStatement : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : IAstWalker
>IAstWalker : IAstWalker

            preAst.labels = <ASTList>walker.walk(preAst.labels, preAst);
>preAst.labels = <ASTList>walker.walk(preAst.labels, preAst) : 任意
>类型别名 :=> 任意
>preAst.labels : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>labels : 任意
>类型别名 :=> 任意
><ASTList>walker.walk(preAst.labels, preAst) : 任意
>类型别名 :=> 任意
>ASTList : No type information available!
>walker.walk(preAst.labels, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.labels : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>labels : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意

            if (walker.options.goNextSibling) {
>walker.options.goNextSibling : 真假
>类型别名 :=> 真假
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : 真假
>类型别名 :=> 真假

                preAst.stmt = walker.walk(preAst.stmt, preAst);
>preAst.stmt = walker.walk(preAst.stmt, preAst) : 任意
>类型别名 :=> 任意
>preAst.stmt : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>stmt : 任意
>类型别名 :=> 任意
>walker.walk(preAst.stmt, preAst) : 任意
>类型别名 :=> 任意
>walker.walk : (ast: 任意, parent: 任意) => 任意
>walker : IAstWalker
>walk : (ast: 任意, parent: 任意) => 任意
>preAst.stmt : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
>stmt : 任意
>类型别名 :=> 任意
>preAst : 任意
>类型别名 :=> 任意
            }
        }
    }
}
