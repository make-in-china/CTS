=== tests/cases/conformance/jsx/jsxAndTypeAssertion.tsx ===
declare var createElement: any;
>createElement : 任意
>类型别名 :=> 任意

class foo {}
>foo : foo

var x: any;
>x : 任意
>类型别名 :=> 任意

x = <any> { test: <any></any> };
>x = <any> { test: <any></any> };x = <any><any></any>; x = <foo>hello {<foo>{}} </foo>;x = <foo test={<foo>{}}>hello</foo>;x = <foo test={<foo>{}}>hello{<foo>{}}</foo>;x = <foo>x</foo>, x = <foo/>;<foo>{<foo><foo>{/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo>     : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
><any> { test: <any></any> };x = <any><any></any>; x = <foo>hello {<foo>{}} </foo>;x = <foo test={<foo>{}}>hello</foo>;x = <foo test={<foo>{}}>hello{<foo>{}}</foo>;x = <foo>x</foo>, x = <foo/>;<foo>{<foo><foo>{/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo>     : 任意
>类型别名 :=> 任意
>any : 任意
>类型别名 :=> 任意
>test : 任意
>类型别名 :=> 任意
><any></any> : 任意
>类型别名 :=> 任意
>any : 任意
>类型别名 :=> 任意
>any : 任意
>类型别名 :=> 任意

x = <any><any></any>;
><any><any></any>; x = <foo>hello {<foo>{}} </foo>;x = <foo test={<foo>{}}>hello</foo>;x = <foo test={<foo>{}}>hello{<foo>{}}</foo>;x = <foo>x</foo>, x = <foo/>;<foo>{<foo><foo>{/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo>     : 任意
>类型别名 :=> 任意
>any : 任意
>类型别名 :=> 任意
><any></any> : 任意
>类型别名 :=> 任意
>any : 任意
>类型别名 :=> 任意
>any : 任意
>类型别名 :=> 任意
 
x = <foo>hello {<foo>{}} </foo>;
><foo>hello {<foo>{}} </foo>;x = <foo test={<foo>{}}>hello</foo>;x = <foo test={<foo>{}}>hello{<foo>{}}</foo>;x = <foo>x</foo>, x = <foo/>;<foo>{<foo><foo>{/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo>     : 任意
>类型别名 :=> 任意
>foo : 类为 foo
><foo>{}} </foo> : 任意
>类型别名 :=> 任意
>foo : 类为 foo
>foo : 类为 foo

x = <foo test={<foo>{}}>hello</foo>;
><foo test={<foo>{}}>hello</foo>; : 任意
>类型别名 :=> 任意
>foo : 类为 foo
>test : 任意
>类型别名 :=> 任意
><foo>{}}>hello</foo> : 任意
>类型别名 :=> 任意
>foo : 类为 foo
>foo : 类为 foo

x = <foo test={<foo>{}}>hello{<foo>{}}</foo>;
><foo test={<foo>{}}>hello{<foo>{}}</foo>;x = <foo>x</foo>, x = <foo/>;<foo>{<foo><foo>{/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo>     : 任意
>类型别名 :=> 任意
>foo : 类为 foo
>test : 任意
>类型别名 :=> 任意
><foo>{}}>hello{<foo>{}}</foo>;x = <foo>x</foo>, x = <foo/>;<foo>{<foo><foo>{/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo>     : 任意
>类型别名 :=> 任意
>foo : 类为 foo
><foo>{}}</foo> : 任意
>类型别名 :=> 任意
>foo : 类为 foo
>foo : 类为 foo

x = <foo>x</foo>, x = <foo/>;
><foo>x</foo> : 任意
>类型别名 :=> 任意
>foo : 类为 foo
>foo : 类为 foo
><foo/> : 任意
>类型别名 :=> 任意
>foo : 类为 foo

<foo>{<foo><foo>{/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo>
><foo>{<foo><foo>{/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo>     : 任意
>类型别名 :=> 任意
>foo : 类为 foo
><foo><foo>{/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo>     : 任意
>类型别名 :=> 任意
>foo : 类为 foo
><foo>{/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo>     : 任意
>类型别名 :=> 任意
>foo : 类为 foo
>/foo/.test(x) ? <foo><foo></foo> : <foo><foo></foo>}</foo>}</foo> : 任意
>类型别名 :=> 任意
>/foo/.test(x) : 真假
>类型别名 :=> 真假
>/foo/.test : (string: 文字) => 真假
>/foo/ : RegExp
>test : (string: 文字) => 真假
>x : 任意
>类型别名 :=> 任意
><foo><foo></foo> : <foo><foo></foo>}</foo>}</foo> : 任意
>类型别名 :=> 任意
>foo : 类为 foo
><foo></foo> : 任意
>类型别名 :=> 任意
>foo : 类为 foo
>foo : 类为 foo
><foo><foo></foo>}</foo> : 任意
>类型别名 :=> 任意
>foo : 类为 foo
><foo></foo> : 任意
>类型别名 :=> 任意
>foo : 类为 foo
>foo : 类为 foo
>foo : 类为 foo
>foo : 类为 foo

    

> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

