=== tests/cases/compiler/m1.ts ===
export class Cls {
>Cls : Cls
}

=== tests/cases/compiler/m2.ts ===
import {Cls} from "./m1";
>Cls : typeof Cls

(<any>Cls.prototype).foo = function() { return 1; };
>(<any>Cls.prototype).foo = function() { return 1; } : () => number
>(<any>Cls.prototype).foo : any
>类型别名 :=> 任意
>(<any>Cls.prototype) : any
>类型别名 :=> 任意
><any>Cls.prototype : any
>类型别名 :=> 任意
>Cls.prototype : Cls
>Cls : typeof Cls
>prototype : Cls
>foo : any
>类型别名 :=> 任意
>function() { return 1; } : () => number
>1 : 1

(<any>Cls.prototype).bar = function() { return "1"; };
>(<any>Cls.prototype).bar = function() { return "1"; } : () => string
>(<any>Cls.prototype).bar : any
>类型别名 :=> 任意
>(<any>Cls.prototype) : any
>类型别名 :=> 任意
><any>Cls.prototype : any
>类型别名 :=> 任意
>Cls.prototype : Cls
>Cls : typeof Cls
>prototype : Cls
>bar : any
>类型别名 :=> 任意
>function() { return "1"; } : () => string
>"1" : "1"

declare module "./m1" {
    interface Cls {
>Cls : Cls

        foo(): number;
>foo : () => number
    }
}

declare module "./m1" {
    interface Cls {
>Cls : Cls

        bar(): string;
>bar : () => string
    }
}

=== tests/cases/compiler/m3.ts ===
export class C1 { x: number }
>C1 : C1
>x : number
>类型别名 :=> 数字

export class C2 { x: string }
>C2 : C2
>x : string
>类型别名 :=> 文字

=== tests/cases/compiler/m4.ts ===
import {Cls} from "./m1";
>Cls : typeof Cls

import {C1, C2} from "./m3";
>C1 : typeof C1
>C2 : typeof C2

(<any>Cls.prototype).baz1 = function() { return undefined };
>(<any>Cls.prototype).baz1 = function() { return undefined } : () => any
>(<any>Cls.prototype).baz1 : any
>类型别名 :=> 任意
>(<any>Cls.prototype) : any
>类型别名 :=> 任意
><any>Cls.prototype : any
>类型别名 :=> 任意
>Cls.prototype : Cls
>Cls : typeof Cls
>prototype : Cls
>baz1 : any
>类型别名 :=> 任意
>function() { return undefined } : () => any
>undefined : undefined
>类型别名 :=> 未定

(<any>Cls.prototype).baz2 = function() { return undefined };
>(<any>Cls.prototype).baz2 = function() { return undefined } : () => any
>(<any>Cls.prototype).baz2 : any
>类型别名 :=> 任意
>(<any>Cls.prototype) : any
>类型别名 :=> 任意
><any>Cls.prototype : any
>类型别名 :=> 任意
>Cls.prototype : Cls
>Cls : typeof Cls
>prototype : Cls
>baz2 : any
>类型别名 :=> 任意
>function() { return undefined } : () => any
>undefined : undefined
>类型别名 :=> 未定

declare module "./m1" {
    interface Cls {
>Cls : Cls

        baz1(): C1;
>baz1 : () => C1
>C1 : C1
    }
}

declare module "./m1" {
    interface Cls {
>Cls : Cls

        baz2(): C2;
>baz2 : () => C2
>C2 : C2
    }
}

=== tests/cases/compiler/test.ts ===
import { Cls } from "./m1";
>Cls : typeof Cls

import "m2";
import "m4";
let c: Cls;
>c : Cls
>Cls : Cls

c.foo().toExponential();
>c.foo().toExponential() : string
>类型别名 :=> 文字
>c.foo().toExponential : (fractionDigits?: number) => string
>c.foo() : number
>类型别名 :=> 数字
>c.foo : () => number
>c : Cls
>foo : () => number
>toExponential : (fractionDigits?: number) => string

c.bar().toLowerCase();
>c.bar().toLowerCase() : string
>类型别名 :=> 文字
>c.bar().toLowerCase : () => string
>c.bar() : string
>类型别名 :=> 文字
>c.bar : () => string
>c : Cls
>bar : () => string
>toLowerCase : () => string

c.baz1().x.toExponential();
>c.baz1().x.toExponential() : string
>类型别名 :=> 文字
>c.baz1().x.toExponential : (fractionDigits?: number) => string
>c.baz1().x : number
>类型别名 :=> 数字
>c.baz1() : C1
>c.baz1 : () => C1
>c : Cls
>baz1 : () => C1
>x : number
>类型别名 :=> 数字
>toExponential : (fractionDigits?: number) => string

c.baz2().x.toLowerCase();
>c.baz2().x.toLowerCase() : string
>类型别名 :=> 文字
>c.baz2().x.toLowerCase : () => string
>c.baz2().x : string
>类型别名 :=> 文字
>c.baz2() : C2
>c.baz2 : () => C2
>c : Cls
>baz2 : () => C2
>x : string
>类型别名 :=> 文字
>toLowerCase : () => string

