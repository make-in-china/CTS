=== tests/cases/compiler/typeArgInference.ts ===
interface I {
>I : I

    f<T, U>(a1: { a: T; b: U }[], a2: { a: T; b: U }[]): { c: T; d: U };
>f : <T, U>(a1: { a: T; b: U; }[], a2: { a: T; b: U; }[]) => { c: T; d: U; }
>T : T
>U : U
>a1 : { a: T; b: U; }[]
>a : T
>T : T
>b : U
>U : U
>a2 : { a: T; b: U; }[]
>a : T
>T : T
>b : U
>U : U
>c : T
>T : T
>d : U
>U : U

    g<T, U>(...arg: { a: T; b: U }[][]): { c: T; d: U };
>g : <T, U>(...arg: { a: T; b: U; }[][]) => { c: T; d: U; }
>T : T
>U : U
>arg : { a: T; b: U; }[][]
>a : T
>T : T
>b : U
>U : U
>c : T
>T : T
>d : U
>U : U
}
var o = { a: 3, b: "test" };
>o : { a: 数字; b: 文字; }
>{ a: 3, b: "test" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>3 : 3
>b : 文字
>类型别名 :=> 文字
>"test" : "test"

var x: I;
>x : I
>I : I

var t1 = x.f([o], [o]);
>t1 : { c: 数字; d: 文字; }
>x.f([o], [o]) : { c: 数字; d: 文字; }
>x.f : <T, U>(a1: { a: T; b: U; }[], a2: { a: T; b: U; }[]) => { c: T; d: U; }
>x : I
>f : <T, U>(a1: { a: T; b: U; }[], a2: { a: T; b: U; }[]) => { c: T; d: U; }
>[o] : { a: 数字; b: 文字; }[]
>o : { a: 数字; b: 文字; }
>[o] : { a: 数字; b: 文字; }[]
>o : { a: 数字; b: 文字; }

var t1: { c: number; d: string }; 
>t1 : { c: 数字; d: 文字; }
>c : 数字
>类型别名 :=> 数字
>d : 文字
>类型别名 :=> 文字

var t2 = x.f<number, string>([o], [o]);
>t2 : { c: 数字; d: 文字; }
>x.f<number, string>([o], [o]) : { c: 数字; d: 文字; }
>x.f : <T, U>(a1: { a: T; b: U; }[], a2: { a: T; b: U; }[]) => { c: T; d: U; }
>x : I
>f : <T, U>(a1: { a: T; b: U; }[], a2: { a: T; b: U; }[]) => { c: T; d: U; }
>[o] : { a: 数字; b: 文字; }[]
>o : { a: 数字; b: 文字; }
>[o] : { a: 数字; b: 文字; }[]
>o : { a: 数字; b: 文字; }

var t2: { c: number; d: string }; 
>t2 : { c: 数字; d: 文字; }
>c : 数字
>类型别名 :=> 数字
>d : 文字
>类型别名 :=> 文字

var t3 = x.g([o], [o]);
>t3 : { c: 数字; d: 文字; }
>x.g([o], [o]) : { c: 数字; d: 文字; }
>x.g : <T, U>(...arg: { a: T; b: U; }[][]) => { c: T; d: U; }
>x : I
>g : <T, U>(...arg: { a: T; b: U; }[][]) => { c: T; d: U; }
>[o] : { a: 数字; b: 文字; }[]
>o : { a: 数字; b: 文字; }
>[o] : { a: 数字; b: 文字; }[]
>o : { a: 数字; b: 文字; }

var t3: { c: number; d: string };
>t3 : { c: 数字; d: 文字; }
>c : 数字
>类型别名 :=> 数字
>d : 文字
>类型别名 :=> 文字

var t4 = x.g<number, string>([o], [o]);
>t4 : { c: 数字; d: 文字; }
>x.g<number, string>([o], [o]) : { c: 数字; d: 文字; }
>x.g : <T, U>(...arg: { a: T; b: U; }[][]) => { c: T; d: U; }
>x : I
>g : <T, U>(...arg: { a: T; b: U; }[][]) => { c: T; d: U; }
>[o] : { a: 数字; b: 文字; }[]
>o : { a: 数字; b: 文字; }
>[o] : { a: 数字; b: 文字; }[]
>o : { a: 数字; b: 文字; }

var t4: { c: number; d: string };
>t4 : { c: 数字; d: 文字; }
>c : 数字
>类型别名 :=> 数字
>d : 文字
>类型别名 :=> 文字

