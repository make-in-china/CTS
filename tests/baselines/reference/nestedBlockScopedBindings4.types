=== tests/cases/compiler/nestedBlockScopedBindings4.ts ===
function a0() {
>a0 : () => void

    for (let x; x < 1;) {
>x : any
>类型别名 :=> 任意
>x < 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        x = x + 1;
>x = x + 1 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 1 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>1 : 1
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2
    }
}

function a1() {
>a1 : () => void

    for (let x; x < 1;) {
>x : any
>类型别名 :=> 任意
>x < 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        x = x + 1;
>x = x + 1 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 1 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>1 : 1

        () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2
    }
}

function a2() {
>a2 : () => void

    for (let x; x < 1;) {
>x : any
>类型别名 :=> 任意
>x < 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        x = x + 1;
>x = x + 1 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 1 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>1 : 1
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2

        () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意
    }
}


function a3() {
>a3 : () => void

    for (let x; x < 1;) {
>x : any
>类型别名 :=> 任意
>x < 1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>1 : 1

        x = x + 1;
>x = x + 1 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 1 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>1 : 1

        () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2

        () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意
    }
}
