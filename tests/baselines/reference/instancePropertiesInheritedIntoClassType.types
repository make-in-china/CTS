=== tests/cases/conformance/classes/members/classTypes/instancePropertiesInheritedIntoClassType.ts ===
module NonGeneric {
>NonGeneric : 类为 NonGeneric

    class C {
>C : C

        x: string;
>x : 文字
>类型别名 :=> 文字

        get y() {
>y : 数字
>类型别名 :=> 数字

            return 1;
>1 : 1
        }
        set y(v) { }
>y : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

        fn() { return this; }
>fn : () => 本体
>this : 本体

        constructor(public a: number, private b: number) { }
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
    }

    class D extends C { e: string; }
>D : D
>C : C
>e : 文字
>类型别名 :=> 文字

    var d = new D(1, 2);
>d : D
>new D(1, 2) : D
>D : 类为 D
>1 : 1
>2 : 2

    var r = d.fn();
>r : D
>d.fn() : D
>d.fn : () => D
>d : D
>fn : () => D

    var r2 = r.x;
>r2 : 文字
>类型别名 :=> 文字
>r.x : 文字
>类型别名 :=> 文字
>r : D
>x : 文字
>类型别名 :=> 文字

    var r3 = r.y;
>r3 : 数字
>类型别名 :=> 数字
>r.y : 数字
>类型别名 :=> 数字
>r : D
>y : 数字
>类型别名 :=> 数字

    r.y = 4;
>r.y = 4 : 4
>r.y : 数字
>类型别名 :=> 数字
>r : D
>y : 数字
>类型别名 :=> 数字
>4 : 4

    var r6 = d.y(); // error
>r6 : 任意
>类型别名 :=> 任意
>d.y() : 任意
>类型别名 :=> 任意
>d.y : 数字
>类型别名 :=> 数字
>d : D
>y : 数字
>类型别名 :=> 数字

}

module Generic {
>Generic : 类为 Generic

    class C<T, U> {
>C : C<T, U>
>T : T
>U : U

        x: T;
>x : T
>T : T

        get y() {
>y : U

            return null;
>null : 空值
>类型别名 :=> 空值
        }
        set y(v: U) { }
>y : U
>v : U
>U : U

        fn() { return this; }
>fn : () => 本体
>this : 本体

        constructor(public a: T, private b: U) { }
>a : T
>T : T
>b : U
>U : U
    }

    class D<T, U> extends C<T, U> { e: T; }
>D : D<T, U>
>T : T
>U : U
>C : C<T, U>
>T : T
>U : U
>e : T
>T : T

    var d = new D(1, '');
>d : D<数字, 文字>
>new D(1, '') : D<数字, 文字>
>D : 类为 D
>1 : 1
>'' : ""

    var r = d.fn();
>r : D<数字, 文字>
>d.fn() : D<数字, 文字>
>d.fn : () => D<数字, 文字>
>d : D<数字, 文字>
>fn : () => D<数字, 文字>

    var r2 = r.x;
>r2 : 数字
>类型别名 :=> 数字
>r.x : 数字
>类型别名 :=> 数字
>r : D<数字, 文字>
>x : 数字
>类型别名 :=> 数字

    var r3 = r.y;
>r3 : 文字
>类型别名 :=> 文字
>r.y : 文字
>类型别名 :=> 文字
>r : D<数字, 文字>
>y : 文字
>类型别名 :=> 文字

    r.y = '';
>r.y = '' : ""
>r.y : 文字
>类型别名 :=> 文字
>r : D<数字, 文字>
>y : 文字
>类型别名 :=> 文字
>'' : ""

    var r6 = d.y(); // error
>r6 : 任意
>类型别名 :=> 任意
>d.y() : 任意
>类型别名 :=> 任意
>d.y : 文字
>类型别名 :=> 文字
>d : D<数字, 文字>
>y : 文字
>类型别名 :=> 文字
}
