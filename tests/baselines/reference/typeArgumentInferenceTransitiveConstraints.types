=== tests/cases/conformance/expressions/functionCalls/typeArgumentInferenceTransitiveConstraints.ts ===
function fn<A extends Date, B extends A, C extends B>(a: A, b: B, c: C) {
>fn : <A 扩展 Date, B 扩展 A, C 扩展 B>(a: A, b: B, c: C) => A[]
>A : A
>Date : Date
>B : B
>A : A
>C : C
>B : B
>a : A
>A : A
>b : B
>B : B
>c : C
>C : C

    return [a, b, c];
>[a, b, c] : A[]
>a : A
>b : B
>c : C
}

var d = fn(new Date(), new Date(), new Date());
>d : Date[]
>fn(new Date(), new Date(), new Date()) : Date[]
>fn : <A 扩展 Date, B 扩展 A, C 扩展 B>(a: A, b: B, c: C) => A[]
>new Date() : Date
>Date : DateConstructor
>new Date() : Date
>Date : DateConstructor
>new Date() : Date
>Date : DateConstructor

var d: Date[]; // Should be OK (d should be Date[])
>d : Date[]
>Date : Date

