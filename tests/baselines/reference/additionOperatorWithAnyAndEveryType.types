=== tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithAnyAndEveryType.ts ===
function foo() { }
>foo : () => 无值

class C {
>C : C

    public a: string;
>a : 文字
>类型别名 :=> 文字

    static foo() { }
>foo : () => 无值
}
enum E { a, b, c }
>E : E
>a : E.a
>b : E.b
>c : E.c

module M { export var a }
>M : 类为 M
>a : 任意
>类型别名 :=> 任意

var a: any;
>a : 任意
>类型别名 :=> 任意

var b: boolean;
>b : 真假
>类型别名 :=> 真假

var c: number;
>c : 数字
>类型别名 :=> 数字

var d: string;
>d : 文字
>类型别名 :=> 文字

var e: Object;
>e : Object
>Object : Object

// any as left operand, result is type Any except plusing string
var r1 = a + a;
>r1 : 任意
>类型别名 :=> 任意
>a + a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

var r2 = a + b;
>r2 : 任意
>类型别名 :=> 任意
>a + b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 真假
>类型别名 :=> 真假

var r3 = a + c;
>r3 : 任意
>类型别名 :=> 任意
>a + c : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>c : 数字
>类型别名 :=> 数字

var r4 = a + d;
>r4 : 文字
>类型别名 :=> 文字
>a + d : 文字
>类型别名 :=> 文字
>a : 任意
>类型别名 :=> 任意
>d : 文字
>类型别名 :=> 文字

var r5 = a + e;
>r5 : 任意
>类型别名 :=> 任意
>a + e : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>e : Object

// any as right operand, result is type Any except plusing string
var r6 = b + a;
>r6 : 任意
>类型别名 :=> 任意
>b + a : 任意
>类型别名 :=> 任意
>b : 真假
>类型别名 :=> 真假
>a : 任意
>类型别名 :=> 任意

var r7 = c + a;
>r7 : 任意
>类型别名 :=> 任意
>c + a : 任意
>类型别名 :=> 任意
>c : 数字
>类型别名 :=> 数字
>a : 任意
>类型别名 :=> 任意

var r8 = d + a;
>r8 : 文字
>类型别名 :=> 文字
>d + a : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字
>a : 任意
>类型别名 :=> 任意

var r9 = e + a;
>r9 : 任意
>类型别名 :=> 任意
>e + a : 任意
>类型别名 :=> 任意
>e : Object
>a : 任意
>类型别名 :=> 任意

// other cases
var r10 = a + foo;
>r10 : 任意
>类型别名 :=> 任意
>a + foo : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>foo : () => 无值

var r11 = a + foo();
>r11 : 任意
>类型别名 :=> 任意
>a + foo() : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>foo() : 无值
>类型别名 :=> 无值
>foo : () => 无值

var r12 = a + C;
>r12 : 任意
>类型别名 :=> 任意
>a + C : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>C : 类为 C

var r13 = a + new C();
>r13 : 任意
>类型别名 :=> 任意
>a + new C() : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>new C() : C
>C : 类为 C

var r14 = a + E;
>r14 : 任意
>类型别名 :=> 任意
>a + E : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>E : 类为 E

var r15 = a + E.a;
>r15 : 任意
>类型别名 :=> 任意
>a + E.a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>E.a : E.a
>E : 类为 E
>a : E.a

var r16 = a + M;
>r16 : 任意
>类型别名 :=> 任意
>a + M : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>M : 类为 M

var r17 = a + '';
>r17 : 文字
>类型别名 :=> 文字
>a + '' : 文字
>类型别名 :=> 文字
>a : 任意
>类型别名 :=> 任意
>'' : ""

var r18 = a + 123;
>r18 : 任意
>类型别名 :=> 任意
>a + 123 : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>123 : 123

var r19 = a + { a: '' };
>r19 : 任意
>类型别名 :=> 任意
>a + { a: '' } : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>{ a: '' } : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>'' : ""

var r20 = a + ((a: string) => { return a });
>r20 : 任意
>类型别名 :=> 任意
>a + ((a: string) => { return a }) : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>((a: string) => { return a }) : (a: 文字) => 文字
>(a: string) => { return a } : (a: 文字) => 文字
>a : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字

