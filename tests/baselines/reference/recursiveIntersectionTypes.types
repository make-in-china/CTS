=== tests/cases/conformance/types/intersection/recursiveIntersectionTypes.ts ===
type LinkedList<T> = T & { next: LinkedList<T> };
>LinkedList : LinkedList<T>
>T : T
>T : T
>next : LinkedList<T>
>LinkedList : LinkedList<T>
>T : T

interface Entity {
>Entity : Entity

    name: string;
>name : string
>类型别名 :=> 文字
}

interface Product extends Entity {
>Product : Product
>Entity : Entity

    price: number;
>price : number
>类型别名 :=> 数字
}

var entityList: LinkedList<Entity>;
>entityList : LinkedList<Entity>
>LinkedList : LinkedList<T>
>Entity : Entity

var s = entityList.name;
>s : string
>类型别名 :=> 文字
>entityList.name : string
>类型别名 :=> 文字
>entityList : LinkedList<Entity>
>name : string
>类型别名 :=> 文字

var s = entityList.next.name;
>s : string
>类型别名 :=> 文字
>entityList.next.name : string
>类型别名 :=> 文字
>entityList.next : LinkedList<Entity>
>entityList : LinkedList<Entity>
>next : LinkedList<Entity>
>name : string
>类型别名 :=> 文字

var s = entityList.next.next.name;
>s : string
>类型别名 :=> 文字
>entityList.next.next.name : string
>类型别名 :=> 文字
>entityList.next.next : LinkedList<Entity>
>entityList.next : LinkedList<Entity>
>entityList : LinkedList<Entity>
>next : LinkedList<Entity>
>next : LinkedList<Entity>
>name : string
>类型别名 :=> 文字

var s = entityList.next.next.next.name;
>s : string
>类型别名 :=> 文字
>entityList.next.next.next.name : string
>类型别名 :=> 文字
>entityList.next.next.next : LinkedList<Entity>
>entityList.next.next : LinkedList<Entity>
>entityList.next : LinkedList<Entity>
>entityList : LinkedList<Entity>
>next : LinkedList<Entity>
>next : LinkedList<Entity>
>next : LinkedList<Entity>
>name : string
>类型别名 :=> 文字

var productList: LinkedList<Product>;
>productList : LinkedList<Product>
>LinkedList : LinkedList<T>
>Product : Product

entityList = productList;
>entityList = productList : LinkedList<Product>
>entityList : LinkedList<Entity>
>productList : LinkedList<Product>

productList = entityList;  // Error
>productList = entityList : LinkedList<Entity>
>productList : LinkedList<Product>
>entityList : LinkedList<Entity>

