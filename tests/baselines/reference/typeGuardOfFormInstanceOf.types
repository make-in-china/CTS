=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormInstanceOf.ts ===
// A type guard of the form x instanceof C, where C is of a subtype of the global type 'Function' 
// and C has a property named 'prototype'
//  - when true, narrows the type of x to the type of the 'prototype' property in C provided 
//    it is a subtype of the type of x, or
//  - when false, has no effect on the type of x.

class C1 {
>C1 : C1

    p1: string;
>p1 : 文字
>类型别名 :=> 文字
}
class C2 {
>C2 : C2

    p2: number;
>p2 : 数字
>类型别名 :=> 数字
}
class D1 extends C1 {
>D1 : D1
>C1 : C1

    p3: number;
>p3 : 数字
>类型别名 :=> 数字
}
class C3 {
>C3 : C3

    p4: number;
>p4 : 数字
>类型别名 :=> 数字
}
var str: string;
>str : 文字
>类型别名 :=> 文字

var num: number;
>num : 数字
>类型别名 :=> 数字

var strOrNum: string | number;
>strOrNum : 文字 | 数字

var ctor1: C1 | C2;
>ctor1 : C1 | C2
>C1 : C1
>C2 : C2

str = ctor1 instanceof C1 && ctor1.p1; // C1
>str = ctor1 instanceof C1 && ctor1.p1 : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>ctor1 instanceof C1 && ctor1.p1 : 文字
>类型别名 :=> 文字
>ctor1 instanceof C1 : 真假
>类型别名 :=> 真假
>ctor1 : C1 | C2
>C1 : 类为 C1
>ctor1.p1 : 文字
>类型别名 :=> 文字
>ctor1 : C1
>p1 : 文字
>类型别名 :=> 文字

num = ctor1 instanceof C2 && ctor1.p2; // C2
>num = ctor1 instanceof C2 && ctor1.p2 : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>ctor1 instanceof C2 && ctor1.p2 : 数字
>类型别名 :=> 数字
>ctor1 instanceof C2 : 真假
>类型别名 :=> 真假
>ctor1 : C1 | C2
>C2 : 类为 C2
>ctor1.p2 : 数字
>类型别名 :=> 数字
>ctor1 : C2
>p2 : 数字
>类型别名 :=> 数字

str = ctor1 instanceof D1 && ctor1.p1; // D1
>str = ctor1 instanceof D1 && ctor1.p1 : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>ctor1 instanceof D1 && ctor1.p1 : 文字
>类型别名 :=> 文字
>ctor1 instanceof D1 : 真假
>类型别名 :=> 真假
>ctor1 : C1 | C2
>D1 : 类为 D1
>ctor1.p1 : 文字
>类型别名 :=> 文字
>ctor1 : D1
>p1 : 文字
>类型别名 :=> 文字

num = ctor1 instanceof D1 && ctor1.p3; // D1
>num = ctor1 instanceof D1 && ctor1.p3 : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>ctor1 instanceof D1 && ctor1.p3 : 数字
>类型别名 :=> 数字
>ctor1 instanceof D1 : 真假
>类型别名 :=> 真假
>ctor1 : C1 | C2
>D1 : 类为 D1
>ctor1.p3 : 数字
>类型别名 :=> 数字
>ctor1 : D1
>p3 : 数字
>类型别名 :=> 数字

var ctor2: C2 | D1;
>ctor2 : C2 | D1
>C2 : C2
>D1 : D1

num = ctor2 instanceof C2 && ctor2.p2; // C2
>num = ctor2 instanceof C2 && ctor2.p2 : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>ctor2 instanceof C2 && ctor2.p2 : 数字
>类型别名 :=> 数字
>ctor2 instanceof C2 : 真假
>类型别名 :=> 真假
>ctor2 : C2 | D1
>C2 : 类为 C2
>ctor2.p2 : 数字
>类型别名 :=> 数字
>ctor2 : C2
>p2 : 数字
>类型别名 :=> 数字

num = ctor2 instanceof D1 && ctor2.p3; // D1
>num = ctor2 instanceof D1 && ctor2.p3 : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>ctor2 instanceof D1 && ctor2.p3 : 数字
>类型别名 :=> 数字
>ctor2 instanceof D1 : 真假
>类型别名 :=> 真假
>ctor2 : C2 | D1
>D1 : 类为 D1
>ctor2.p3 : 数字
>类型别名 :=> 数字
>ctor2 : D1
>p3 : 数字
>类型别名 :=> 数字

str = ctor2 instanceof D1 && ctor2.p1; // D1
>str = ctor2 instanceof D1 && ctor2.p1 : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>ctor2 instanceof D1 && ctor2.p1 : 文字
>类型别名 :=> 文字
>ctor2 instanceof D1 : 真假
>类型别名 :=> 真假
>ctor2 : C2 | D1
>D1 : 类为 D1
>ctor2.p1 : 文字
>类型别名 :=> 文字
>ctor2 : D1
>p1 : 文字
>类型别名 :=> 文字

var r2: D1 | C2 = ctor2 instanceof C1 && ctor2; // C2 | D1
>r2 : C2 | D1
>D1 : D1
>C2 : C2
>ctor2 instanceof C1 && ctor2 : D1
>ctor2 instanceof C1 : 真假
>类型别名 :=> 真假
>ctor2 : C2 | D1
>C1 : 类为 C1
>ctor2 : D1

var ctor3: C1 | C2;
>ctor3 : C1 | C2
>C1 : C1
>C2 : C2

if (ctor3 instanceof C1) {
>ctor3 instanceof C1 : 真假
>类型别名 :=> 真假
>ctor3 : C1 | C2
>C1 : 类为 C1

    ctor3.p1; // C1
>ctor3.p1 : 文字
>类型别名 :=> 文字
>ctor3 : C1
>p1 : 文字
>类型别名 :=> 文字
}
else {
    ctor3.p2; // C2
>ctor3.p2 : 数字
>类型别名 :=> 数字
>ctor3 : C2
>p2 : 数字
>类型别名 :=> 数字
}

var ctor4: C1 | C2 | C3;
>ctor4 : C1 | C2 | C3
>C1 : C1
>C2 : C2
>C3 : C3

if (ctor4 instanceof C1) {
>ctor4 instanceof C1 : 真假
>类型别名 :=> 真假
>ctor4 : C1 | C2 | C3
>C1 : 类为 C1

    ctor4.p1; // C1
>ctor4.p1 : 文字
>类型别名 :=> 文字
>ctor4 : C1
>p1 : 文字
>类型别名 :=> 文字
}
else if (ctor4 instanceof C2) {
>ctor4 instanceof C2 : 真假
>类型别名 :=> 真假
>ctor4 : C2 | C3
>C2 : 类为 C2

    ctor4.p2; // C2
>ctor4.p2 : 数字
>类型别名 :=> 数字
>ctor4 : C2
>p2 : 数字
>类型别名 :=> 数字
}
else {
    ctor4.p4; // C3
>ctor4.p4 : 数字
>类型别名 :=> 数字
>ctor4 : C3
>p4 : 数字
>类型别名 :=> 数字
}

var ctor5: C1 | D1 | C2;
>ctor5 : C1 | C2 | D1
>C1 : C1
>D1 : D1
>C2 : C2

if (ctor5 instanceof C1) {
>ctor5 instanceof C1 : 真假
>类型别名 :=> 真假
>ctor5 : C1 | C2 | D1
>C1 : 类为 C1

    ctor5.p1; // C1
>ctor5.p1 : 文字
>类型别名 :=> 文字
>ctor5 : C1 | D1
>p1 : 文字
>类型别名 :=> 文字
}
else {
    ctor5.p2; // C2
>ctor5.p2 : 数字
>类型别名 :=> 数字
>ctor5 : C2
>p2 : 数字
>类型别名 :=> 数字
}

var ctor6: C1 | C2 | C3;
>ctor6 : C1 | C2 | C3
>C1 : C1
>C2 : C2
>C3 : C3

if (ctor6 instanceof C1 || ctor6 instanceof C2) {
>ctor6 instanceof C1 || ctor6 instanceof C2 : 真假
>类型别名 :=> 真假
>ctor6 instanceof C1 : 真假
>类型别名 :=> 真假
>ctor6 : C1 | C2 | C3
>C1 : 类为 C1
>ctor6 instanceof C2 : 真假
>类型别名 :=> 真假
>ctor6 : C2 | C3
>C2 : 类为 C2
}
else {
    ctor6.p4; // C3
>ctor6.p4 : 数字
>类型别名 :=> 数字
>ctor6 : C3
>p4 : 数字
>类型别名 :=> 数字
}
