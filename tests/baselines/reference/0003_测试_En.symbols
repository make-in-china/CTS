=== /a/node_modules/@typesch/testEn/index.d.ts ===
export type foo = {
>foo : Symbol(foo, Decl(index.d.ts, 0, 0))

    bar: number | null;
>bar : Symbol(bar, Decl(index.d.ts, 0, 19))

    baz: string;
>baz : Symbol(baz, Decl(index.d.ts, 1, 23))

    nested: {
>nested : Symbol(nested, Decl(index.d.ts, 2, 16))

      a: number;
>a : Symbol(a, Decl(index.d.ts, 3, 13))

      b: string | null;
>b : Symbol(b, Decl(index.d.ts, 4, 16))
    }
  }
  
  export type foo2 = {
>foo2 : Symbol(foo2, Decl(index.d.ts, 7, 3))

    elem1: number | null;
>elem1 : Symbol(elem1, Decl(index.d.ts, 9, 22))

    elem2: foo | null;
>elem2 : Symbol(elem2, Decl(index.d.ts, 10, 25))
>foo : Symbol(foo, Decl(index.d.ts, 0, 0))
  }
  
  export function 取属性< T, K extends keyof T> (对象值:T, 键: K): T[K]
>取属性 : Symbol(取属性, Decl(index.d.ts, 12, 3))
>T : Symbol(T, Decl(index.d.ts, 14, 22))
>K : Symbol(K, Decl(index.d.ts, 14, 25))
>T : Symbol(T, Decl(index.d.ts, 14, 22))
>对象值 : Symbol(对象值, Decl(index.d.ts, 14, 46))
>T : Symbol(T, Decl(index.d.ts, 14, 22))
>键 : Symbol(键, Decl(index.d.ts, 14, 52))
>K : Symbol(K, Decl(index.d.ts, 14, 25))
>T : Symbol(T, Decl(index.d.ts, 14, 22))
>K : Symbol(K, Decl(index.d.ts, 14, 25))

  export function 置属性< T, K extends keyof T> (对象值:T, 键: K, 值: T[K]): T[K]
>置属性 : Symbol(置属性, Decl(index.d.ts, 14, 64))
>T : Symbol(T, Decl(index.d.ts, 15, 22))
>K : Symbol(K, Decl(index.d.ts, 15, 25))
>T : Symbol(T, Decl(index.d.ts, 15, 22))
>对象值 : Symbol(对象值, Decl(index.d.ts, 15, 46))
>T : Symbol(T, Decl(index.d.ts, 15, 22))
>键 : Symbol(键, Decl(index.d.ts, 15, 52))
>K : Symbol(K, Decl(index.d.ts, 15, 25))
>值 : Symbol(值, Decl(index.d.ts, 15, 58))
>T : Symbol(T, Decl(index.d.ts, 15, 22))
>K : Symbol(K, Decl(index.d.ts, 15, 25))
>T : Symbol(T, Decl(index.d.ts, 15, 22))
>K : Symbol(K, Decl(index.d.ts, 15, 25))

  export interface 事件类型{
>事件类型 : Symbol(事件类型, Decl(index.d.ts, 15, 73))

    "ev1":foo2;
>foo2 : Symbol(foo2, Decl(index.d.ts, 7, 3))

    "ev2":foo2
>foo2 : Symbol(foo2, Decl(index.d.ts, 7, 3))
  }
  
  export function  引发事件< K extends keyof 事件类型> (事件:K, 实体:foo):void
>引发事件 : Symbol(引发事件, Decl(index.d.ts, 19, 3))
>K : Symbol(K, Decl(index.d.ts, 21, 24))
>事件类型 : Symbol(事件类型, Decl(index.d.ts, 15, 73))
>事件 : Symbol(事件, Decl(index.d.ts, 21, 48))
>K : Symbol(K, Decl(index.d.ts, 21, 24))
>实体 : Symbol(实体, Decl(index.d.ts, 21, 53))
>foo : Symbol(foo, Decl(index.d.ts, 0, 0))
  
  //**************** 分割线 *******************//
  
=== /a/测试_3_en.ts ===
  import { foo, 取属性, 置属性, 引发事件, 事件类型 } from "testEn"
>foo : Symbol(foo, Decl(测试_3_en.ts, 0, 10))
>取属性 : Symbol(取属性, Decl(测试_3_en.ts, 0, 15))
>置属性 : Symbol(置属性, Decl(测试_3_en.ts, 0, 20))
>引发事件 : Symbol(引发事件, Decl(测试_3_en.ts, 0, 25))
>事件类型 : Symbol(事件类型, Decl(测试_3_en.ts, 0, 31))
  
  const aFoo: foo = { bar: 3, baz: "b", nested: { a: 1, b: "y" } };
>aFoo : Symbol(aFoo, Decl(测试_3_en.ts, 2, 7))
>foo : Symbol(foo, Decl(测试_3_en.ts, 0, 10))
>bar : Symbol(bar, Decl(测试_3_en.ts, 2, 21))
>baz : Symbol(baz, Decl(测试_3_en.ts, 2, 29))
>nested : Symbol(nested, Decl(测试_3_en.ts, 2, 39))
>a : Symbol(a, Decl(测试_3_en.ts, 2, 49))
>b : Symbol(b, Decl(测试_3_en.ts, 2, 55))

  const aFoo2: foo = { bar: 4, baz: "c", nested: { a: 2, b: "z" } };
>aFoo2 : Symbol(aFoo2, Decl(测试_3_en.ts, 3, 7))
>foo : Symbol(foo, Decl(测试_3_en.ts, 0, 10))
>bar : Symbol(bar, Decl(测试_3_en.ts, 3, 22))
>baz : Symbol(baz, Decl(测试_3_en.ts, 3, 30))
>nested : Symbol(nested, Decl(测试_3_en.ts, 3, 40))
>a : Symbol(a, Decl(测试_3_en.ts, 3, 50))
>b : Symbol(b, Decl(测试_3_en.ts, 3, 56))

  const 数组值: foo[] = [aFoo, aFoo2]
>数组值 : Symbol(数组值, Decl(测试_3_en.ts, 4, 7))
>foo : Symbol(foo, Decl(测试_3_en.ts, 0, 10))
>aFoo : Symbol(aFoo, Decl(测试_3_en.ts, 2, 7))
>aFoo2 : Symbol(aFoo2, Decl(测试_3_en.ts, 3, 7))

  function 组合(A:string, B:string){
>组合 : Symbol(组合, Decl(测试_3_en.ts, 4, 34))
>A : Symbol(A, Decl(测试_3_en.ts, 5, 14))
>B : Symbol(B, Decl(测试_3_en.ts, 5, 23))

    return(A + B)
>A : Symbol(A, Decl(测试_3_en.ts, 5, 14))
>B : Symbol(B, Decl(测试_3_en.ts, 5, 23))
  }
  // 1
  aFoo["bar"]
>aFoo : Symbol(aFoo, Decl(测试_3_en.ts, 2, 7))
>"bar" : Symbol(bar, Decl(index.d.ts, 0, 19))

  const B: keyof foo = "bar"
>B : Symbol(B, Decl(测试_3_en.ts, 10, 7))
>foo : Symbol(foo, Decl(测试_3_en.ts, 0, 10))

  // 2
  aFoo[B]
>aFoo : Symbol(aFoo, Decl(测试_3_en.ts, 2, 7))
>B : Symbol(B, Decl(测试_3_en.ts, 10, 7))

  // 3
  aFoo[组合("bar", "1") as keyof foo]
>aFoo : Symbol(aFoo, Decl(测试_3_en.ts, 2, 7))
>组合 : Symbol(组合, Decl(测试_3_en.ts, 4, 34))
>foo : Symbol(foo, Decl(测试_3_en.ts, 0, 10))

  // 5
  组合("bar" as keyof foo , "")
>组合 : Symbol(组合, Decl(测试_3_en.ts, 4, 34))
>foo : Symbol(foo, Decl(测试_3_en.ts, 0, 10))

  // 6
  组合(组合("bar", "1") as keyof foo, "")
>组合 : Symbol(组合, Decl(测试_3_en.ts, 4, 34))
>组合 : Symbol(组合, Decl(测试_3_en.ts, 4, 34))
>foo : Symbol(foo, Decl(测试_3_en.ts, 0, 10))

  // 7
  取属性(aFoo, "bar")
>取属性 : Symbol(取属性, Decl(测试_3_en.ts, 0, 15))
>aFoo : Symbol(aFoo, Decl(测试_3_en.ts, 2, 7))

  // 8
  置属性(aFoo, "baz", "baz")
>置属性 : Symbol(置属性, Decl(测试_3_en.ts, 0, 20))
>aFoo : Symbol(aFoo, Decl(测试_3_en.ts, 2, 7))

  // 9
  置属性(aFoo, 组合("bar", "1") as keyof foo, 1)
>置属性 : Symbol(置属性, Decl(测试_3_en.ts, 0, 20))
>aFoo : Symbol(aFoo, Decl(测试_3_en.ts, 2, 7))
>组合 : Symbol(组合, Decl(测试_3_en.ts, 4, 34))
>foo : Symbol(foo, Decl(测试_3_en.ts, 0, 10))

  // 10 
  引发事件("ev1", aFoo)
>引发事件 : Symbol(引发事件, Decl(测试_3_en.ts, 0, 25))
>aFoo : Symbol(aFoo, Decl(测试_3_en.ts, 2, 7))

  // 11 
  引发事件(组合("ev", "2") as keyof 事件类型, aFoo)
>引发事件 : Symbol(引发事件, Decl(测试_3_en.ts, 0, 25))
>组合 : Symbol(组合, Decl(测试_3_en.ts, 4, 34))
>事件类型 : Symbol(事件类型, Decl(测试_3_en.ts, 0, 31))
>aFoo : Symbol(aFoo, Decl(测试_3_en.ts, 2, 7))

  for (const aF of 数组值) {
>aF : Symbol(aF, Decl(测试_3_en.ts, 30, 12))
>数组值 : Symbol(数组值, Decl(测试_3_en.ts, 4, 7))

      if (aF.bar === 1) {
>aF.bar : Symbol(bar, Decl(index.d.ts, 0, 19))
>aF : Symbol(aF, Decl(测试_3_en.ts, 30, 12))
>bar : Symbol(bar, Decl(index.d.ts, 0, 19))

          aF["bar"]
>aF : Symbol(aF, Decl(测试_3_en.ts, 30, 12))
>"bar" : Symbol(bar, Decl(index.d.ts, 0, 19))

      } else if (aF.baz === "c") {
>aF.baz : Symbol(baz, Decl(index.d.ts, 1, 23))
>aF : Symbol(aF, Decl(测试_3_en.ts, 30, 12))
>baz : Symbol(baz, Decl(index.d.ts, 1, 23))

          aF["baz"]
>aF : Symbol(aF, Decl(测试_3_en.ts, 30, 12))
>"baz" : Symbol(baz, Decl(index.d.ts, 1, 23))

          const { baz } = aF
>baz : Symbol(baz, Decl(测试_3_en.ts, 36, 17))
>aF : Symbol(aF, Decl(测试_3_en.ts, 30, 12))

          if (baz) { }
>baz : Symbol(baz, Decl(测试_3_en.ts, 36, 17))
      }
  }

  for (const aF in 数组值) {
>aF : Symbol(aF, Decl(测试_3_en.ts, 41, 12))
>数组值 : Symbol(数组值, Decl(测试_3_en.ts, 4, 7))

      if (数组值[aF].bar === 1) {
>数组值[aF].bar : Symbol(bar, Decl(index.d.ts, 0, 19))
>数组值 : Symbol(数组值, Decl(测试_3_en.ts, 4, 7))
>aF : Symbol(aF, Decl(测试_3_en.ts, 41, 12))
>bar : Symbol(bar, Decl(index.d.ts, 0, 19))

          数组值[aF]["bar"]
>数组值 : Symbol(数组值, Decl(测试_3_en.ts, 4, 7))
>aF : Symbol(aF, Decl(测试_3_en.ts, 41, 12))
>"bar" : Symbol(bar, Decl(index.d.ts, 0, 19))

      } else if (数组值[aF].baz === "c") {
>数组值[aF].baz : Symbol(baz, Decl(index.d.ts, 1, 23))
>数组值 : Symbol(数组值, Decl(测试_3_en.ts, 4, 7))
>aF : Symbol(aF, Decl(测试_3_en.ts, 41, 12))
>baz : Symbol(baz, Decl(index.d.ts, 1, 23))

          数组值[aF]["baz"]
>数组值 : Symbol(数组值, Decl(测试_3_en.ts, 4, 7))
>aF : Symbol(aF, Decl(测试_3_en.ts, 41, 12))
>"baz" : Symbol(baz, Decl(index.d.ts, 1, 23))

          const { baz } = 数组值[aF]
>baz : Symbol(baz, Decl(测试_3_en.ts, 47, 17))
>数组值 : Symbol(数组值, Decl(测试_3_en.ts, 4, 7))
>aF : Symbol(aF, Decl(测试_3_en.ts, 41, 12))

          if (baz) { }
>baz : Symbol(baz, Decl(测试_3_en.ts, 47, 17))
      }
  }
