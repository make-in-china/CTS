=== tests/cases/conformance/declarationEmit/typePredicates/declarationEmitThisPredicatesWithPrivateName02.ts ===
interface Foo {
>Foo : Foo

    a: string;
>a : 文字
>类型别名 :=> 文字

    b: number;
>b : 数字
>类型别名 :=> 数字

    c: boolean;
>c : 真假
>类型别名 :=> 真假
}

export const obj = {
>obj : { m(): 本体 作为 Foo; }
>{    m(): this is Foo {        let dis = this as {} as Foo;        return dis.a != null && dis.b != null && dis.c != null;    }} : { m(): 本体 作为 Foo; }

    m(): this is Foo {
>m : () => 本体 作为 Foo
>Foo : Foo

        let dis = this as {} as Foo;
>dis : Foo
>this as {} as Foo : Foo
>this as {} : {}
>this : 任意
>类型别名 :=> 任意
>Foo : Foo

        return dis.a != null && dis.b != null && dis.c != null;
>dis.a != null && dis.b != null && dis.c != null : 真假
>类型别名 :=> 真假
>dis.a != null && dis.b != null : 真假
>类型别名 :=> 真假
>dis.a != null : 真假
>类型别名 :=> 真假
>dis.a : 文字
>类型别名 :=> 文字
>dis : Foo
>a : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值
>dis.b != null : 真假
>类型别名 :=> 真假
>dis.b : 数字
>类型别名 :=> 数字
>dis : Foo
>b : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值
>dis.c != null : 真假
>类型别名 :=> 真假
>dis.c : 真假
>类型别名 :=> 真假
>dis : Foo
>c : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值
    }
}
