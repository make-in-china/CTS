=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts ===
// Duplicate parameter names are always an error

function foo(x, x) { }
>foo : (x: 任意, x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var f = function foo(x, x) { }
>f : (x: 任意, x: 任意) => 无值
>function foo(x, x) { } : (x: 任意, x: 任意) => 无值
>foo : (x: 任意, x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var f2 = function (x, x) { }
>f2 : (x: 任意, x: 任意) => 无值
>function (x, x) { } : (x: 任意, x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var f3 = (x, x) => { }
>f3 : (x: 任意, x: 任意) => 无值
>(x, x) => { } : (x: 任意, x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

var f4 = <T>(x: T, x: T) => { }
>f4 : <T>(x: T, x: T) => 无值
><T>(x: T, x: T) => { } : <T>(x: T, x: T) => 无值
>T : T
>x : T
>T : T
>x : T
>T : T

function foo2(x: string, x: number) { }
>foo2 : (x: 文字, x: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>x : 数字
>类型别名 :=> 数字

var f5 = function foo(x: string, x: number) { }
>f5 : (x: 文字, x: 数字) => 无值
>function foo(x: string, x: number) { } : (x: 文字, x: 数字) => 无值
>foo : (x: 文字, x: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>x : 数字
>类型别名 :=> 数字

var f6 = function (x: string, x: number) { }
>f6 : (x: 文字, x: 数字) => 无值
>function (x: string, x: number) { } : (x: 文字, x: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>x : 数字
>类型别名 :=> 数字

var f7 = (x: string, x: number) => { }
>f7 : (x: 文字, x: 数字) => 无值
>(x: string, x: number) => { } : (x: 文字, x: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>x : 数字
>类型别名 :=> 数字

var f8 = <T>(x: T, y: T) => { }
>f8 : <T>(x: T, y: T) => 无值
><T>(x: T, y: T) => { } : <T>(x: T, y: T) => 无值
>T : T
>x : T
>T : T
>y : T
>T : T

class C {
>C : C

    foo(x, x) { }
>foo : (x: 任意, x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    foo2(x: number, x: string) { }
>foo2 : (x: 数字, x: 文字) => 无值
>x : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字

    foo3<T>(x: T, x: T) { }
>foo3 : <T>(x: T, x: T) => 无值
>T : T
>x : T
>T : T
>x : T
>T : T
}

interface I {
>I : I

    (x, x);
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    (x: string, x: number);
>x : 文字
>类型别名 :=> 文字
>x : 数字
>类型别名 :=> 数字

    foo(x, x);
>foo : { (x: 任意, x: 任意): 任意; (x: 数字, x: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    foo(x: number, x: string);
>foo : { (x: 任意, x: 任意): 任意; (x: 数字, x: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字

    foo3<T>(x: T, x: T);
>foo3 : <T>(x: T, x: T) => 任意
>T : T
>x : T
>T : T
>x : T
>T : T
}

var a: {
>a : { foo(x: 任意, x: 任意): 任意; foo2(x: 数字, x: 文字): 任意; }

    foo(x, x);
>foo : (x: 任意, x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    foo2(x: number, x: string);
>foo2 : (x: 数字, x: 文字) => 任意
>x : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字

};

var b = {
>b : { foo(x: 任意, x: 任意): 无值; a: (x: 数字, x: 文字) => 无值; b: <T>(x: T, x: T) => 无值; }
>{    foo(x, x) { },    a: function foo(x: number, x: string) { },    b: <T>(x: T, x: T) => { }} : { foo(x: 任意, x: 任意): 无值; a: (x: 数字, x: 文字) => 无值; b: <T>(x: T, x: T) => 无值; }

    foo(x, x) { },
>foo : (x: 任意, x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    a: function foo(x: number, x: string) { },
>a : (x: 数字, x: 文字) => 无值
>function foo(x: number, x: string) { } : (x: 数字, x: 文字) => 无值
>foo : (x: 数字, x: 文字) => 无值
>x : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字

    b: <T>(x: T, x: T) => { }
>b : <T>(x: T, x: T) => 无值
><T>(x: T, x: T) => { } : <T>(x: T, x: T) => 无值
>T : T
>x : T
>T : T
>x : T
>T : T
}
