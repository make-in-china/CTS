=== tests/cases/conformance/internalModules/codeGeneration/nameCollision.ts ===
module A {
>A : 类为 A

    // these 2 statements force an underscore before the 'A' 
    // in the generated function call.
    var A = 12;
>A : 数字
>类型别名 :=> 数字
>12 : 12

    var _A = '';
>_A : 文字
>类型别名 :=> 文字
>'' : ""
}

module B {
>B : 类为 B

    var A = 12;
>A : 数字
>类型别名 :=> 数字
>12 : 12
}

module B {
>B : 类为 B

    // re-opened module with colliding name
    // this should add an underscore.
    class B {
>B : B

        name: string;
>name : 文字
>类型别名 :=> 文字
    }
}

module X {
>X : 类为 X

    var X = 13;
>X : 数字
>类型别名 :=> 数字
>13 : 13

    export module Y {
>Y : 类为 X.Y

        var Y = 13;
>Y : 数字
>类型别名 :=> 数字
>13 : 13

        export module Z {
>Z : 类为 X.Y.Z

            var X = 12;
>X : 数字
>类型别名 :=> 数字
>12 : 12

            var Y = 12;
>Y : 数字
>类型别名 :=> 数字
>12 : 12

            var Z = 12;
>Z : 数字
>类型别名 :=> 数字
>12 : 12
        }
    }
}

module Y.Y {
>Y : 类为 Y
>Y : 类为 Y.Y

    export enum Y {
>Y : Y

        Red, Blue
>Red : Y.Red
>Blue : Y.Blue
    }
}

// no collision, since interface doesn't
// generate code.
module D {
>D : 类为 D

    export interface D {
>D : D

        id: number;
>id : 数字
>类型别名 :=> 数字
    }

    export var E = 'hello';
>E : 文字
>类型别名 :=> 文字
>'hello' : "hello"
}
