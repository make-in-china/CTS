=== tests/cases/conformance/ambient/ambientErrors.ts ===
// Ambient variable with an initializer 
declare var x = 4;
>x : 数字
>类型别名 :=> 数字
>4 : 4

// Ambient functions with invalid overloads
declare function fn(x: number): string;
>fn : { (x: 数字): 文字; (x: "foo"): 数字; }
>x : 数字
>类型别名 :=> 数字

declare function fn(x: 'foo'): number;
>fn : { (x: 数字): 文字; (x: "foo"): 数字; }
>x : "foo"

// Ambient functions with duplicate signatures
declare function fn1(x: number): string;
>fn1 : { (x: 数字): 文字; (x: 数字): 文字; }
>x : 数字
>类型别名 :=> 数字

declare function fn1(x: number): string;
>fn1 : { (x: 数字): 文字; (x: 数字): 文字; }
>x : 数字
>类型别名 :=> 数字

// Ambient function overloads that differ only by return type
declare function fn2(x: number): string;
>fn2 : { (x: 数字): 文字; (x: 数字): 数字; }
>x : 数字
>类型别名 :=> 数字

declare function fn2(x: number): number;
>fn2 : { (x: 数字): 文字; (x: 数字): 数字; }
>x : 数字
>类型别名 :=> 数字

// Ambient function with default parameter values
declare function fn3(x = 3);
>fn3 : (x?: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>3 : 3

// Ambient function with function body
declare function fn4() { };
>fn4 : () => 无值

// Ambient enum with non - integer literal constant member
declare enum E1 {
>E1 : E1

    y = 4.23
>y : E1
>4.23 : 4.23
}

// Ambient enum with computer member
declare enum E2 {
>E2 : E2

    x = 'foo'.length
>x : E2
>'foo'.length : 数字
>类型别名 :=> 数字
>'foo' : "foo"
>length : 数字
>类型别名 :=> 数字
}

// Ambient module with initializers for values, bodies for functions / classes
declare module M1 {
>M1 : 类为 M1

    var x = 3;
>x : 数字
>类型别名 :=> 数字
>3 : 3

    function fn() { }
>fn : () => 无值

    class C {
>C : C

        static x = 3;
>x : 数字
>类型别名 :=> 数字
>3 : 3

        y = 4;
>y : 数字
>类型别名 :=> 数字
>4 : 4

        constructor() { }
        fn() { }
>fn : () => 无值

        static sfn() { }
>sfn : () => 无值
    }
}

// Ambient external module not in the global module
module M2 {
>M2 : 任意
>类型别名 :=> 任意

    declare module 'nope' { }
}

// Ambient external module with a string literal name that isn't a top level external module name
declare module '../foo' { }

// Ambient external module with export assignment and other exported members
declare module 'bar' {
    var n;
>n : 任意
>类型别名 :=> 任意

    export var q;
>q : 任意
>类型别名 :=> 任意

    export = n;
>n : 任意
>类型别名 :=> 任意
}

