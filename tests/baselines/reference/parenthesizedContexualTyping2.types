=== tests/cases/conformance/expressions/contextualTyping/parenthesizedContexualTyping2.ts ===
// These tests ensure that in cases where it may *appear* that a value has a type,
// they actually are properly being contextually typed. The way we test this is
// that we invoke contextually typed arguments with type arguments.
// Since 'any' cannot be invoked with type arguments, we should get errors
// back if contextual typing is not taking effect.

type FuncType = (x: <T>(p: T) => T) => typeof x;
>FuncType : FuncType
>x : <T>(p: T) => T
>T : T
>p : T
>T : T
>T : T
>x : <T>(p: T) => T

function fun<T>(f: FuncType, x: T): T;
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>T : T
>f : FuncType
>FuncType : FuncType
>x : T
>T : T
>T : T

function fun<T>(f: FuncType, g: FuncType, x: T): T;
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>T : T
>f : FuncType
>FuncType : FuncType
>g : FuncType
>FuncType : FuncType
>x : T
>T : T
>T : T

function fun<T>(...rest: any[]): T {
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>T : T
>rest : any[]
>T : T

    return undefined;
>undefined : undefined
>类型别名 :=> 未定
}

var a = fun(x => { x<number>(undefined); return x; }, 10);
>a : number
>类型别名 :=> 数字
>fun(x => { x<number>(undefined); return x; }, 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>10 : 10

var b = fun((x => { x<number>(undefined); return x; }), 10);
>b : number
>类型别名 :=> 数字
>fun((x => { x<number>(undefined); return x; }), 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>10 : 10

var c = fun(((x => { x<number>(undefined); return x; })), 10);
>c : number
>类型别名 :=> 数字
>fun(((x => { x<number>(undefined); return x; })), 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>((x => { x<number>(undefined); return x; })) : (x: <T>(p: T) => T) => <T>(p: T) => T
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>10 : 10

var d = fun((((x => { x<number>(undefined); return x; }))), 10);
>d : number
>类型别名 :=> 数字
>fun((((x => { x<number>(undefined); return x; }))), 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>(((x => { x<number>(undefined); return x; }))) : (x: <T>(p: T) => T) => <T>(p: T) => T
>((x => { x<number>(undefined); return x; })) : (x: <T>(p: T) => T) => <T>(p: T) => T
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>10 : 10

var e = fun(x => { x<number>(undefined); return x; }, x => { x<number>(undefined); return x; }, 10);
>e : number
>类型别名 :=> 数字
>fun(x => { x<number>(undefined); return x; }, x => { x<number>(undefined); return x; }, 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>10 : 10

var f = fun((x => { x<number>(undefined); return x; }),(x => { x<number>(undefined); return x; }), 10);
>f : number
>类型别名 :=> 数字
>fun((x => { x<number>(undefined); return x; }),(x => { x<number>(undefined); return x; }), 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>10 : 10

var g = fun(((x => { x<number>(undefined); return x; })),((x => { x<number>(undefined); return x; })), 10);
>g : number
>类型别名 :=> 数字
>fun(((x => { x<number>(undefined); return x; })),((x => { x<number>(undefined); return x; })), 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>((x => { x<number>(undefined); return x; })) : (x: <T>(p: T) => T) => <T>(p: T) => T
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>((x => { x<number>(undefined); return x; })) : (x: <T>(p: T) => T) => <T>(p: T) => T
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>10 : 10

var h = fun((((x => { x<number>(undefined); return x; }))),((x => { x<number>(undefined); return x; })), 10);
>h : number
>类型别名 :=> 数字
>fun((((x => { x<number>(undefined); return x; }))),((x => { x<number>(undefined); return x; })), 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>(((x => { x<number>(undefined); return x; }))) : (x: <T>(p: T) => T) => <T>(p: T) => T
>((x => { x<number>(undefined); return x; })) : (x: <T>(p: T) => T) => <T>(p: T) => T
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>((x => { x<number>(undefined); return x; })) : (x: <T>(p: T) => T) => <T>(p: T) => T
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>10 : 10

// Ternaries in parens
var i = fun((Math.random() < 0.5 ? x => { x<number>(undefined); return x; } : x => undefined), 10);
>i : number
>类型别名 :=> 数字
>fun((Math.random() < 0.5 ? x => { x<number>(undefined); return x; } : x => undefined), 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>(Math.random() < 0.5 ? x => { x<number>(undefined); return x; } : x => undefined) : (x: <T>(p: T) => T) => any
>Math.random() < 0.5 ? x => { x<number>(undefined); return x; } : x => undefined : (x: <T>(p: T) => T) => any
>Math.random() < 0.5 : boolean
>类型别名 :=> 真假
>Math.random() : number
>类型别名 :=> 数字
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>x => undefined : (x: <T>(p: T) => T) => any
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>10 : 10

var j = fun((Math.random() < 0.5 ? (x => { x<number>(undefined); return x; }) : (x => undefined)), 10);
>j : number
>类型别名 :=> 数字
>fun((Math.random() < 0.5 ? (x => { x<number>(undefined); return x; }) : (x => undefined)), 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>(Math.random() < 0.5 ? (x => { x<number>(undefined); return x; }) : (x => undefined)) : (x: <T>(p: T) => T) => any
>Math.random() < 0.5 ? (x => { x<number>(undefined); return x; }) : (x => undefined) : (x: <T>(p: T) => T) => any
>Math.random() < 0.5 : boolean
>类型别名 :=> 真假
>Math.random() : number
>类型别名 :=> 数字
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>(x => undefined) : (x: <T>(p: T) => T) => any
>x => undefined : (x: <T>(p: T) => T) => any
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>10 : 10

var k = fun((Math.random() < 0.5 ? (x => { x<number>(undefined); return x; }) : (x => undefined)), x => { x<number>(undefined); return x; }, 10);
>k : number
>类型别名 :=> 数字
>fun((Math.random() < 0.5 ? (x => { x<number>(undefined); return x; }) : (x => undefined)), x => { x<number>(undefined); return x; }, 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>(Math.random() < 0.5 ? (x => { x<number>(undefined); return x; }) : (x => undefined)) : (x: <T>(p: T) => T) => any
>Math.random() < 0.5 ? (x => { x<number>(undefined); return x; }) : (x => undefined) : (x: <T>(p: T) => T) => any
>Math.random() < 0.5 : boolean
>类型别名 :=> 真假
>Math.random() : number
>类型别名 :=> 数字
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>(x => undefined) : (x: <T>(p: T) => T) => any
>x => undefined : (x: <T>(p: T) => T) => any
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>10 : 10

var l = fun(((Math.random() < 0.5 ? ((x => { x<number>(undefined); return x; })) : ((x => undefined)))),((x => { x<number>(undefined); return x; })), 10);
>l : number
>类型别名 :=> 数字
>fun(((Math.random() < 0.5 ? ((x => { x<number>(undefined); return x; })) : ((x => undefined)))),((x => { x<number>(undefined); return x; })), 10) : 10
>fun : { <T>(f: FuncType, x: T): T; <T>(f: FuncType, g: FuncType, x: T): T; }
>((Math.random() < 0.5 ? ((x => { x<number>(undefined); return x; })) : ((x => undefined)))) : (x: <T>(p: T) => T) => any
>(Math.random() < 0.5 ? ((x => { x<number>(undefined); return x; })) : ((x => undefined))) : (x: <T>(p: T) => T) => any
>Math.random() < 0.5 ? ((x => { x<number>(undefined); return x; })) : ((x => undefined)) : (x: <T>(p: T) => T) => any
>Math.random() < 0.5 : boolean
>类型别名 :=> 真假
>Math.random() : number
>类型别名 :=> 数字
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5
>((x => { x<number>(undefined); return x; })) : (x: <T>(p: T) => T) => <T>(p: T) => T
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>((x => undefined)) : (x: <T>(p: T) => T) => any
>(x => undefined) : (x: <T>(p: T) => T) => any
>x => undefined : (x: <T>(p: T) => T) => any
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>((x => { x<number>(undefined); return x; })) : (x: <T>(p: T) => T) => <T>(p: T) => T
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T
>10 : 10

var lambda1: FuncType = x => { x<number>(undefined); return x; };
>lambda1 : FuncType
>FuncType : FuncType
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T

var lambda2: FuncType = (x => { x<number>(undefined); return x; });
>lambda2 : FuncType
>FuncType : FuncType
>(x => { x<number>(undefined); return x; }) : (x: <T>(p: T) => T) => <T>(p: T) => T
>x => { x<number>(undefined); return x; } : (x: <T>(p: T) => T) => <T>(p: T) => T
>x : <T>(p: T) => T
>x<number>(undefined) : number
>类型别名 :=> 数字
>x : <T>(p: T) => T
>undefined : undefined
>类型别名 :=> 未定
>x : <T>(p: T) => T

type ObjType = { x: (p: number) => string; y: (p: string) => number };
>ObjType : ObjType
>x : (p: number) => string
>p : number
>类型别名 :=> 数字
>y : (p: string) => number
>p : string
>类型别名 :=> 文字

var obj1: ObjType = { x: x => (x, undefined), y: y => (y, undefined) };
>obj1 : ObjType
>ObjType : ObjType
>{ x: x => (x, undefined), y: y => (y, undefined) } : { x: (x: number) => any; y: (y: string) => any; }
>x : (x: number) => any
>x => (x, undefined) : (x: number) => any
>x : number
>类型别名 :=> 数字
>(x, undefined) : undefined
>类型别名 :=> 未定
>x, undefined : undefined
>类型别名 :=> 未定
>x : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>y : (y: string) => any
>y => (y, undefined) : (y: string) => any
>y : string
>类型别名 :=> 文字
>(y, undefined) : undefined
>类型别名 :=> 未定
>y, undefined : undefined
>类型别名 :=> 未定
>y : string
>类型别名 :=> 文字
>undefined : undefined
>类型别名 :=> 未定

var obj2: ObjType = ({ x: x => (x, undefined), y: y => (y, undefined) });
>obj2 : ObjType
>ObjType : ObjType
>({ x: x => (x, undefined), y: y => (y, undefined) }) : { x: (x: number) => any; y: (y: string) => any; }
>{ x: x => (x, undefined), y: y => (y, undefined) } : { x: (x: number) => any; y: (y: string) => any; }
>x : (x: number) => any
>x => (x, undefined) : (x: number) => any
>x : number
>类型别名 :=> 数字
>(x, undefined) : undefined
>类型别名 :=> 未定
>x, undefined : undefined
>类型别名 :=> 未定
>x : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>y : (y: string) => any
>y => (y, undefined) : (y: string) => any
>y : string
>类型别名 :=> 文字
>(y, undefined) : undefined
>类型别名 :=> 未定
>y, undefined : undefined
>类型别名 :=> 未定
>y : string
>类型别名 :=> 文字
>undefined : undefined
>类型别名 :=> 未定

