=== tests/cases/conformance/types/contextualTypes/jsdoc/index.js ===
/** @type {Array<[string, {x?:number, y?:number}]>} */
const arr = [
>arr : [文字, { x?: 数字; y?: 数字; }][]
>[    ['a', { x: 1 }],    ['b', { y: 2 }]] : ([文字, { x: 数字; }] | [文字, { y: 数字; }])[]

    ['a', { x: 1 }],
>['a', { x: 1 }] : [文字, { x: 数字; }]
>'a' : "a"
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

    ['b', { y: 2 }]
>['b', { y: 2 }] : [文字, { y: 数字; }]
>'b' : "b"
>{ y: 2 } : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>2 : 2

];

/** @return {Array<[string, {x?:number, y?:number}]>} */
function f() {
>f : () => [文字, { x?: 数字; y?: 数字; }][]

    return [
>[        ['a', { x: 1 }],        ['b', { y: 2 }]    ] : ([文字, { x: 数字; }] | [文字, { y: 数字; }])[]

        ['a', { x: 1 }],
>['a', { x: 1 }] : [文字, { x: 数字; }]
>'a' : "a"
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

        ['b', { y: 2 }]
>['b', { y: 2 }] : [文字, { y: 数字; }]
>'b' : "b"
>{ y: 2 } : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>2 : 2

    ];
}

class C {
>C : C

    /** @param {Array<[string, {x?:number, y?:number}]>} value */
    set x(value) { }
>x : [文字, { x?: 数字; y?: 数字; }][]
>value : [文字, { x?: 数字; y?: 数字; }][]

    get x() {
>x : [文字, { x?: 数字; y?: 数字; }][]

        return [
>[            ['a', { x: 1 }],            ['b', { y: 2 }]        ] : ([文字, { x: 数字; }] | [文字, { y: 数字; }])[]

            ['a', { x: 1 }],
>['a', { x: 1 }] : [文字, { x: 数字; }]
>'a' : "a"
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

            ['b', { y: 2 }]
>['b', { y: 2 }] : [文字, { y: 数字; }]
>'b' : "b"
>{ y: 2 } : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>2 : 2

        ];
    }
}
