=== tests/cases/compiler/genericInterfaceTypeCall.ts ===
interface Foo<T> {
>Foo : Foo<T>
>T : T

    reject(arg: T): void;
>reject : (arg: T) => 无值
>arg : T
>T : T
}
var foo: Foo<string>
>foo : Foo<文字>
>Foo : Foo<T>
 
interface bar<T> {
>bar : bar<T>
>T : T

    fail(func: (arg: T) => void ): void;
>fail : (func: (arg: T) => 无值) => 无值
>func : (arg: T) => 无值
>arg : T
>T : T

    fail2(func2: { (arg: T): void; }): void;
>fail2 : (func2: (arg: T) => 无值) => 无值
>func2 : (arg: T) => 无值
>arg : T
>T : T
}
var test: bar<string>;
>test : bar<文字>
>bar : bar<T>
 
test.fail(arg => foo.reject(arg));
>test.fail(arg => foo.reject(arg)) : 无值
>类型别名 :=> 无值
>test.fail : (func: (arg: 文字) => 无值) => 无值
>test : bar<文字>
>fail : (func: (arg: 文字) => 无值) => 无值
>arg => foo.reject(arg) : (arg: 文字) => 无值
>arg : 文字
>类型别名 :=> 文字
>foo.reject(arg) : 无值
>类型别名 :=> 无值
>foo.reject : (arg: 文字) => 无值
>foo : Foo<文字>
>reject : (arg: 文字) => 无值
>arg : 文字
>类型别名 :=> 文字

test.fail2(arg => foo.reject(arg)); // Error: Supplied parameters do not match any signature of call target
>test.fail2(arg => foo.reject(arg)) : 无值
>类型别名 :=> 无值
>test.fail2 : (func2: (arg: 文字) => 无值) => 无值
>test : bar<文字>
>fail2 : (func2: (arg: 文字) => 无值) => 无值
>arg => foo.reject(arg) : (arg: 文字) => 无值
>arg : 文字
>类型别名 :=> 文字
>foo.reject(arg) : 无值
>类型别名 :=> 无值
>foo.reject : (arg: 文字) => 无值
>foo : Foo<文字>
>reject : (arg: 文字) => 无值
>arg : 文字
>类型别名 :=> 文字

