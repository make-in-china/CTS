=== tests/cases/conformance/classes/members/constructorFunctionTypes/constructorHasPrototypeProperty.ts ===
module NonGeneric {
>NonGeneric : typeof NonGeneric

    class C {
>C : C

        foo: string;
>foo : string
>类型别名 :=> 文字
    }

    class D extends C {
>D : D
>C : C

        bar: string;
>bar : string
>类型别名 :=> 文字
    }

    var r = C.prototype;
>r : C
>C.prototype : C
>C : typeof C
>prototype : C

    r.foo;
>r.foo : string
>类型别名 :=> 文字
>r : C
>foo : string
>类型别名 :=> 文字

    var r2 = D.prototype;
>r2 : D
>D.prototype : D
>D : typeof D
>prototype : D

    r2.bar;
>r2.bar : string
>类型别名 :=> 文字
>r2 : D
>bar : string
>类型别名 :=> 文字
}

module Generic {
>Generic : typeof Generic

    class C<T,U> {
>C : C<T, U>
>T : T
>U : U

        foo: T;
>foo : T
>T : T

        bar: U;
>bar : U
>U : U
    }

    class D<T,U> extends C<T,U> {
>D : D<T, U>
>T : T
>U : U
>C : C<T, U>
>T : T
>U : U

        baz: T;
>baz : T
>T : T

        bing: U;
>bing : U
>U : U
    }

    var r = C.prototype; // C<any, any>
>r : C<any, any>
>C.prototype : C<any, any>
>C : typeof C
>prototype : C<any, any>

    var ra = r.foo; // any
>ra : any
>类型别名 :=> 任意
>r.foo : any
>类型别名 :=> 任意
>r : C<any, any>
>foo : any
>类型别名 :=> 任意

    var r2 = D.prototype; // D<any, any>
>r2 : D<any, any>
>D.prototype : D<any, any>
>D : typeof D
>prototype : D<any, any>

    var rb = r2.baz; // any
>rb : any
>类型别名 :=> 任意
>r2.baz : any
>类型别名 :=> 任意
>r2 : D<any, any>
>baz : any
>类型别名 :=> 任意
}
