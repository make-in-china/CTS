=== tests/cases/compiler/autolift4.ts ===
class Point {
>Point : Point

    constructor(public x: number, public y: number) {
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    }
    getDist() { 
>getDist : () => 数字

        return Math.sqrt(this.x*this.x + this.y*this.y); 
>Math.sqrt(this.x*this.x + this.y*this.y) : 数字
>类型别名 :=> 数字
>Math.sqrt : (x: 数字) => 数字
>Math : Math
>sqrt : (x: 数字) => 数字
>this.x*this.x + this.y*this.y : 数字
>类型别名 :=> 数字
>this.x*this.x : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>this.y*this.y : 数字
>类型别名 :=> 数字
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字
    }
    static origin = new Point(0,0);
>origin : Point
>new Point(0,0) : Point
>Point : 类为 Point
>0 : 0
>0 : 0
}

class Point3D extends Point {
>Point3D : Point3D
>Point : Point

    constructor(x: number, y: number, public z: number, m:number) {
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

        super(x, y);
>super(x, y) : 无值
>类型别名 :=> 无值
>super : 类为 Point
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
    }
    
    getDist() {
>getDist : () => 数字

        return Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.m);
>Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.m) : 数字
>类型别名 :=> 数字
>Math.sqrt : (x: 数字) => 数字
>Math : Math
>sqrt : (x: 数字) => 数字
>this.x*this.x + this.y*this.y + this.z*this.m : 数字
>类型别名 :=> 数字
>this.x*this.x + this.y*this.y : 数字
>类型别名 :=> 数字
>this.x*this.x : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>this.y*this.y : 数字
>类型别名 :=> 数字
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字
>this.z*this.m : 数字
>类型别名 :=> 数字
>this.z : 数字
>类型别名 :=> 数字
>this : 本体
>z : 数字
>类型别名 :=> 数字
>this.m : 任意
>类型别名 :=> 任意
>this : 本体
>m : 任意
>类型别名 :=> 任意
    }        
}


