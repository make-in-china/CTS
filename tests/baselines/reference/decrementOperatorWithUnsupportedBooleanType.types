=== tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithUnsupportedBooleanType.ts ===
// -- operator on boolean type
var BOOLEAN: boolean;
>BOOLEAN : boolean
>类型别名 :=> 真假

function foo(): boolean { return true; }
>foo : () => boolean
>true : true
>类型别名 :=> 为真

class A {
>A : A

    public a: boolean;
>a : boolean
>类型别名 :=> 真假

    static foo() { return true; }
>foo : () => boolean
>true : true
>类型别名 :=> 为真
}
module M {
>M : typeof M

    export var n: boolean;
>n : boolean
>类型别名 :=> 真假
}

var objA = new A();
>objA : A
>new A() : A
>A : typeof A

// boolean type var
var ResultIsNumber1 = --BOOLEAN;
>ResultIsNumber1 : number
>类型别名 :=> 数字
>--BOOLEAN : number
>类型别名 :=> 数字
>BOOLEAN : boolean
>类型别名 :=> 真假

var ResultIsNumber2 = BOOLEAN--;
>ResultIsNumber2 : number
>类型别名 :=> 数字
>BOOLEAN-- : number
>类型别名 :=> 数字
>BOOLEAN : boolean
>类型别名 :=> 真假

// boolean type literal
var ResultIsNumber3 = --true;
>ResultIsNumber3 : number
>类型别名 :=> 数字
>--true : number
>类型别名 :=> 数字
>true : true
>类型别名 :=> 为真

var ResultIsNumber4 = --{ x: true, y: false };
>ResultIsNumber4 : number
>类型别名 :=> 数字
>--{ x: true, y: false } : number
>类型别名 :=> 数字
>{ x: true, y: false } : { x: boolean; y: boolean; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>y : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

var ResultIsNumber5 = --{ x: true, y: (n: boolean) => { return n; } };
>ResultIsNumber5 : number
>类型别名 :=> 数字
>--{ x: true, y: (n: boolean) => { return n; } } : number
>类型别名 :=> 数字
>{ x: true, y: (n: boolean) => { return n; } } : { x: boolean; y: (n: boolean) => boolean; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>y : (n: boolean) => boolean
>(n: boolean) => { return n; } : (n: boolean) => boolean
>n : boolean
>类型别名 :=> 真假
>n : boolean
>类型别名 :=> 真假

var ResultIsNumber6 = true--;
>ResultIsNumber6 : number
>类型别名 :=> 数字
>true-- : number
>类型别名 :=> 数字
>true : true
>类型别名 :=> 为真

var ResultIsNumber7 = { x: true, y: false }--;
>ResultIsNumber7 : number
>类型别名 :=> 数字
>{ x: true, y: false }-- : number
>类型别名 :=> 数字
>{ x: true, y: false } : { x: boolean; y: boolean; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>y : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

var ResultIsNumber8 = { x: true, y: (n: boolean) => { return n; } }--;
>ResultIsNumber8 : number
>类型别名 :=> 数字
>{ x: true, y: (n: boolean) => { return n; } }-- : number
>类型别名 :=> 数字
>{ x: true, y: (n: boolean) => { return n; } } : { x: boolean; y: (n: boolean) => boolean; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>y : (n: boolean) => boolean
>(n: boolean) => { return n; } : (n: boolean) => boolean
>n : boolean
>类型别名 :=> 真假
>n : boolean
>类型别名 :=> 真假

// boolean type expressions
var ResultIsNumber9 = --objA.a;
>ResultIsNumber9 : number
>类型别名 :=> 数字
>--objA.a : number
>类型别名 :=> 数字
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假

var ResultIsNumber10 = --M.n;
>ResultIsNumber10 : number
>类型别名 :=> 数字
>--M.n : number
>类型别名 :=> 数字
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

var ResultIsNumber11 = --foo();
>ResultIsNumber11 : number
>类型别名 :=> 数字
>--foo() : number
>类型别名 :=> 数字
>foo() : boolean
>类型别名 :=> 真假
>foo : () => boolean

var ResultIsNumber12 = --A.foo();
>ResultIsNumber12 : number
>类型别名 :=> 数字
>--A.foo() : number
>类型别名 :=> 数字
>A.foo() : boolean
>类型别名 :=> 真假
>A.foo : () => boolean
>A : typeof A
>foo : () => boolean

var ResultIsNumber13 = foo()--;
>ResultIsNumber13 : number
>类型别名 :=> 数字
>foo()-- : number
>类型别名 :=> 数字
>foo() : boolean
>类型别名 :=> 真假
>foo : () => boolean

var ResultIsNumber14 = A.foo()--;
>ResultIsNumber14 : number
>类型别名 :=> 数字
>A.foo()-- : number
>类型别名 :=> 数字
>A.foo() : boolean
>类型别名 :=> 真假
>A.foo : () => boolean
>A : typeof A
>foo : () => boolean

var ResultIsNumber15 = objA.a--;
>ResultIsNumber15 : number
>类型别名 :=> 数字
>objA.a-- : number
>类型别名 :=> 数字
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假

var ResultIsNumber16 = M.n--;
>ResultIsNumber16 : number
>类型别名 :=> 数字
>M.n-- : number
>类型别名 :=> 数字
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

// miss assignment operators
--true;
>--true : number
>类型别名 :=> 数字
>true : true
>类型别名 :=> 为真

--BOOLEAN;
>--BOOLEAN : number
>类型别名 :=> 数字
>BOOLEAN : boolean
>类型别名 :=> 真假

--foo();
>--foo() : number
>类型别名 :=> 数字
>foo() : boolean
>类型别名 :=> 真假
>foo : () => boolean

--objA.a;
>--objA.a : number
>类型别名 :=> 数字
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假

--M.n;
>--M.n : number
>类型别名 :=> 数字
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

--objA.a, M.n;
>--objA.a, M.n : boolean
>类型别名 :=> 真假
>--objA.a : number
>类型别名 :=> 数字
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

true--;
>true-- : number
>类型别名 :=> 数字
>true : true
>类型别名 :=> 为真

BOOLEAN--;
>BOOLEAN-- : number
>类型别名 :=> 数字
>BOOLEAN : boolean
>类型别名 :=> 真假

foo()--;
>foo()-- : number
>类型别名 :=> 数字
>foo() : boolean
>类型别名 :=> 真假
>foo : () => boolean

objA.a--;
>objA.a-- : number
>类型别名 :=> 数字
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假

M.n--;
>M.n-- : number
>类型别名 :=> 数字
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

objA.a--, M.n--;
>objA.a--, M.n-- : number
>类型别名 :=> 数字
>objA.a-- : number
>类型别名 :=> 数字
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假
>M.n-- : number
>类型别名 :=> 数字
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

