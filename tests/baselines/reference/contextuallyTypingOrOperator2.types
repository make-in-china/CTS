=== tests/cases/compiler/contextuallyTypingOrOperator2.ts ===
var v: { a: (_: string) => number } = { a: s => s.length } || { a: s => 1 };
>v : { a: (_: 文字) => 数字; }
>a : (_: 文字) => 数字
>_ : 文字
>类型别名 :=> 文字
>{ a: s => s.length } || { a: s => 1 } : { a: (s: 文字) => 数字; }
>{ a: s => s.length } : { a: (s: 文字) => 数字; }
>a : (s: 文字) => 数字
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>{ a: s => 1 } : { a: (s: 文字) => 数字; }
>a : (s: 文字) => 数字
>s => 1 : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>1 : 1

var v2 = (s: string) => s.length || function (s) { s.aaa };
>v2 : (s: 文字) => 数字 | ((s: 任意) => 无值)
>(s: string) => s.length || function (s) { s.aaa } : (s: 文字) => 数字 | ((s: 任意) => 无值)
>s : 文字
>类型别名 :=> 文字
>s.length || function (s) { s.aaa } : 数字 | ((s: 任意) => 无值)
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>function (s) { s.aaa } : (s: 任意) => 无值
>s : 任意
>类型别名 :=> 任意
>s.aaa : 任意
>类型别名 :=> 任意
>s : 任意
>类型别名 :=> 任意
>aaa : 任意
>类型别名 :=> 任意

