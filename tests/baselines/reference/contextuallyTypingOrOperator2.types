=== tests/cases/compiler/contextuallyTypingOrOperator2.ts ===
var v: { a: (_: string) => number } = { a: s => s.length } || { a: s => 1 };
>v : { a: (_: string) => number; }
>a : (_: string) => number
>_ : string
>类型别名 :=> 文字
>{ a: s => s.length } || { a: s => 1 } : { a: (s: string) => number; }
>{ a: s => s.length } : { a: (s: string) => number; }
>a : (s: string) => number
>s => s.length : (s: string) => number
>s : string
>类型别名 :=> 文字
>s.length : number
>类型别名 :=> 数字
>s : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
>{ a: s => 1 } : { a: (s: string) => number; }
>a : (s: string) => number
>s => 1 : (s: string) => number
>s : string
>类型别名 :=> 文字
>1 : 1

var v2 = (s: string) => s.length || function (s) { s.aaa };
>v2 : (s: string) => number | ((s: any) => void)
>(s: string) => s.length || function (s) { s.aaa } : (s: string) => number | ((s: any) => void)
>s : string
>类型别名 :=> 文字
>s.length || function (s) { s.aaa } : number | ((s: any) => void)
>s.length : number
>类型别名 :=> 数字
>s : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
>function (s) { s.aaa } : (s: any) => void
>s : any
>类型别名 :=> 任意
>s.aaa : any
>类型别名 :=> 任意
>s : any
>类型别名 :=> 任意
>aaa : any
>类型别名 :=> 任意

