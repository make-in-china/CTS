=== tests/cases/compiler/privacyClassExtendsClauseDeclFile_externalModule.ts ===
export module publicModule {
>publicModule : 类为 publicModule

    export class publicClassInPublicModule {
>publicClassInPublicModule : publicClassInPublicModule

        private f1() {
>f1 : () => 无值
        }
    }

    class privateClassInPublicModule {
>privateClassInPublicModule : privateClassInPublicModule
    }

    class privateClassExtendingPublicClassInModule extends publicClassInPublicModule {
>privateClassExtendingPublicClassInModule : privateClassExtendingPublicClassInModule
>publicClassInPublicModule : publicClassInPublicModule
    }
    class privateClassExtendingPrivateClassInModule extends privateClassInPublicModule {
>privateClassExtendingPrivateClassInModule : privateClassExtendingPrivateClassInModule
>privateClassInPublicModule : privateClassInPublicModule
    }
    export class publicClassExtendingPublicClassInModule extends publicClassInPublicModule {
>publicClassExtendingPublicClassInModule : publicClassExtendingPublicClassInModule
>publicClassInPublicModule : publicClassInPublicModule
    }
    export class publicClassExtendingPrivateClassInModule extends privateClassInPublicModule { // Should error
>publicClassExtendingPrivateClassInModule : publicClassExtendingPrivateClassInModule
>privateClassInPublicModule : privateClassInPublicModule
    }

    class privateClassExtendingFromPrivateModuleClass extends privateModule.publicClassInPrivateModule {
>privateClassExtendingFromPrivateModuleClass : privateClassExtendingFromPrivateModuleClass
>privateModule.publicClassInPrivateModule : privateModule.publicClassInPrivateModule
>privateModule : 类为 privateModule
>publicClassInPrivateModule : 类为 privateModule.publicClassInPrivateModule
    }
    export class publicClassExtendingFromPrivateModuleClass extends privateModule.publicClassInPrivateModule { // Should error
>publicClassExtendingFromPrivateModuleClass : publicClassExtendingFromPrivateModuleClass
>privateModule.publicClassInPrivateModule : privateModule.publicClassInPrivateModule
>privateModule : 类为 privateModule
>publicClassInPrivateModule : 类为 privateModule.publicClassInPrivateModule
    }
}

module privateModule {
>privateModule : 类为 privateModule

    export class publicClassInPrivateModule {
>publicClassInPrivateModule : publicClassInPrivateModule

        private f1() {
>f1 : () => 无值
        }
    }

    class privateClassInPrivateModule {
>privateClassInPrivateModule : privateClassInPrivateModule
    }

    class privateClassExtendingPublicClassInModule extends publicClassInPrivateModule {
>privateClassExtendingPublicClassInModule : privateClassExtendingPublicClassInModule
>publicClassInPrivateModule : publicClassInPrivateModule
    }
    class privateClassExtendingPrivateClassInModule extends privateClassInPrivateModule {
>privateClassExtendingPrivateClassInModule : privateClassExtendingPrivateClassInModule
>privateClassInPrivateModule : privateClassInPrivateModule
    }
    export class publicClassExtendingPublicClassInModule extends publicClassInPrivateModule {
>publicClassExtendingPublicClassInModule : publicClassExtendingPublicClassInModule
>publicClassInPrivateModule : publicClassInPrivateModule
    }
    export class publicClassExtendingPrivateClassInModule extends privateClassInPrivateModule { 
>publicClassExtendingPrivateClassInModule : publicClassExtendingPrivateClassInModule
>privateClassInPrivateModule : privateClassInPrivateModule
    }

    class privateClassExtendingFromPrivateModuleClass extends privateModule.publicClassInPrivateModule {
>privateClassExtendingFromPrivateModuleClass : privateClassExtendingFromPrivateModuleClass
>privateModule.publicClassInPrivateModule : publicClassInPrivateModule
>privateModule : 类为 privateModule
>publicClassInPrivateModule : 类为 publicClassInPrivateModule
    }
    export class publicClassExtendingFromPrivateModuleClass extends privateModule.publicClassInPrivateModule {
>publicClassExtendingFromPrivateModuleClass : publicClassExtendingFromPrivateModuleClass
>privateModule.publicClassInPrivateModule : publicClassInPrivateModule
>privateModule : 类为 privateModule
>publicClassInPrivateModule : 类为 publicClassInPrivateModule
    }
}

export class publicClass {
>publicClass : publicClass

    private f1() {
>f1 : () => 无值
    }
}

class privateClass {
>privateClass : privateClass
}

class privateClassExtendingPublicClass extends publicClass {
>privateClassExtendingPublicClass : privateClassExtendingPublicClass
>publicClass : publicClass
}
class privateClassExtendingPrivateClassInModule extends privateClass {
>privateClassExtendingPrivateClassInModule : privateClassExtendingPrivateClassInModule
>privateClass : privateClass
}
export class publicClassExtendingPublicClass extends publicClass {
>publicClassExtendingPublicClass : publicClassExtendingPublicClass
>publicClass : publicClass
}
export class publicClassExtendingPrivateClass extends privateClass { // Should error
>publicClassExtendingPrivateClass : publicClassExtendingPrivateClass
>privateClass : privateClass
}

class privateClassExtendingFromPrivateModuleClass extends privateModule.publicClassInPrivateModule {
>privateClassExtendingFromPrivateModuleClass : privateClassExtendingFromPrivateModuleClass
>privateModule.publicClassInPrivateModule : privateModule.publicClassInPrivateModule
>privateModule : 类为 privateModule
>publicClassInPrivateModule : 类为 privateModule.publicClassInPrivateModule
}
export class publicClassExtendingFromPrivateModuleClass extends privateModule.publicClassInPrivateModule { // Should error
>publicClassExtendingFromPrivateModuleClass : publicClassExtendingFromPrivateModuleClass
>privateModule.publicClassInPrivateModule : privateModule.publicClassInPrivateModule
>privateModule : 类为 privateModule
>publicClassInPrivateModule : 类为 privateModule.publicClassInPrivateModule
}

=== tests/cases/compiler/privacyClassExtendsClauseDeclFile_GlobalFile.ts ===
module publicModuleInGlobal {
>publicModuleInGlobal : 类为 publicModuleInGlobal

    export class publicClassInPublicModule {
>publicClassInPublicModule : publicClassInPublicModule

        private f1() {
>f1 : () => 无值
        }
    }

    class privateClassInPublicModule {
>privateClassInPublicModule : privateClassInPublicModule
    }

    class privateClassExtendingPublicClassInModule extends publicClassInPublicModule {
>privateClassExtendingPublicClassInModule : privateClassExtendingPublicClassInModule
>publicClassInPublicModule : publicClassInPublicModule
    }
    class privateClassExtendingPrivateClassInModule extends privateClassInPublicModule {
>privateClassExtendingPrivateClassInModule : privateClassExtendingPrivateClassInModule
>privateClassInPublicModule : privateClassInPublicModule
    }
    export class publicClassExtendingPublicClassInModule extends publicClassInPublicModule {
>publicClassExtendingPublicClassInModule : publicClassExtendingPublicClassInModule
>publicClassInPublicModule : publicClassInPublicModule
    }
    export class publicClassExtendingPrivateClassInModule extends privateClassInPublicModule { // Should error
>publicClassExtendingPrivateClassInModule : publicClassExtendingPrivateClassInModule
>privateClassInPublicModule : privateClassInPublicModule
    }
}
class publicClassInGlobal {
>publicClassInGlobal : publicClassInGlobal
}
class publicClassExtendingPublicClassInGlobal extends publicClassInGlobal {
>publicClassExtendingPublicClassInGlobal : publicClassExtendingPublicClassInGlobal
>publicClassInGlobal : publicClassInGlobal
}

