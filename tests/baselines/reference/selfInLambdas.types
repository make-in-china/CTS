=== tests/cases/compiler/selfInLambdas.ts ===
interface MouseEvent {
>MouseEvent : MouseEvent

    x: number;
>x : 数字
>类型别名 :=> 数字

    y: number;
>y : 数字
>类型别名 :=> 数字
}

declare var window: Window;
>window : Window
>Window : Window

interface Window {
>Window : Window

    onmousemove: (ev: MouseEvent) => any;
>onmousemove : (ev: MouseEvent) => 任意
>ev : MouseEvent
>MouseEvent : MouseEvent
    
}
var o = {
>o : { counter: 数字; start: () => 无值; }
>{    counter: 0,    start: function() {        window.onmousemove = () => {            this.counter++            var f = () => this.counter;        }    }} : { counter: 数字; start: () => 无值; }

    counter: 0,
>counter : 数字
>类型别名 :=> 数字
>0 : 0

    start: function() {
>start : () => 无值
>function() {        window.onmousemove = () => {            this.counter++            var f = () => this.counter;        }    } : () => 无值

        window.onmousemove = () => {
>window.onmousemove = () => {            this.counter++            var f = () => this.counter;        } : () => 无值
>window.onmousemove : (ev: MouseEvent) => 任意
>window : Window
>onmousemove : (ev: MouseEvent) => 任意
>() => {            this.counter++            var f = () => this.counter;        } : () => 无值

            this.counter++
>this.counter++ : 数字
>类型别名 :=> 数字
>this.counter : 数字
>类型别名 :=> 数字
>this : { counter: 数字; start: () => 无值; }
>counter : 数字
>类型别名 :=> 数字

            var f = () => this.counter;
>f : () => 数字
>() => this.counter : () => 数字
>this.counter : 数字
>类型别名 :=> 数字
>this : { counter: 数字; start: () => 无值; }
>counter : 数字
>类型别名 :=> 数字

        }

    }

}



class X {
>X : X

	private value = "value";
>value : 文字
>类型别名 :=> 文字
>"value" : "value"

	public foo() {
>foo : () => 无值

		var outer= () => {
>outer : () => 无值
>() => {            var x = this.value;            var inner = () => {                var y = this.value;			}			inner();		} : () => 无值

            var x = this.value;
>x : 文字
>类型别名 :=> 文字
>this.value : 文字
>类型别名 :=> 文字
>this : 本体
>value : 文字
>类型别名 :=> 文字

            var inner = () => {
>inner : () => 无值
>() => {                var y = this.value;			} : () => 无值

                var y = this.value;
>y : 文字
>类型别名 :=> 文字
>this.value : 文字
>类型别名 :=> 文字
>this : 本体
>value : 文字
>类型别名 :=> 文字
			}

			inner();
>inner() : 无值
>类型别名 :=> 无值
>inner : () => 无值

		};
		outer();
>outer() : 无值
>类型别名 :=> 无值
>outer : () => 无值
	}

}

