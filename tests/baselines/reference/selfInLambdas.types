=== tests/cases/compiler/selfInLambdas.ts ===
interface MouseEvent {
>MouseEvent : MouseEvent

    x: number;
>x : number
>类型别名 :=> 数字

    y: number;
>y : number
>类型别名 :=> 数字
}

declare var window: Window;
>window : Window
>Window : Window

interface Window {
>Window : Window

    onmousemove: (ev: MouseEvent) => any;
>onmousemove : (ev: MouseEvent) => any
>ev : MouseEvent
>MouseEvent : MouseEvent
    
}
var o = {
>o : { counter: number; start: () => void; }
>{    counter: 0,    start: function() {        window.onmousemove = () => {            this.counter++            var f = () => this.counter;        }    }} : { counter: number; start: () => void; }

    counter: 0,
>counter : number
>类型别名 :=> 数字
>0 : 0

    start: function() {
>start : () => void
>function() {        window.onmousemove = () => {            this.counter++            var f = () => this.counter;        }    } : () => void

        window.onmousemove = () => {
>window.onmousemove = () => {            this.counter++            var f = () => this.counter;        } : () => void
>window.onmousemove : (ev: MouseEvent) => any
>window : Window
>onmousemove : (ev: MouseEvent) => any
>() => {            this.counter++            var f = () => this.counter;        } : () => void

            this.counter++
>this.counter++ : number
>类型别名 :=> 数字
>this.counter : number
>类型别名 :=> 数字
>this : { counter: number; start: () => void; }
>counter : number
>类型别名 :=> 数字

            var f = () => this.counter;
>f : () => number
>() => this.counter : () => number
>this.counter : number
>类型别名 :=> 数字
>this : { counter: number; start: () => void; }
>counter : number
>类型别名 :=> 数字

        }

    }

}



class X {
>X : X

	private value = "value";
>value : string
>类型别名 :=> 文字
>"value" : "value"

	public foo() {
>foo : () => void

		var outer= () => {
>outer : () => void
>() => {            var x = this.value;            var inner = () => {                var y = this.value;			}			inner();		} : () => void

            var x = this.value;
>x : string
>类型别名 :=> 文字
>this.value : string
>类型别名 :=> 文字
>this : this
>value : string
>类型别名 :=> 文字

            var inner = () => {
>inner : () => void
>() => {                var y = this.value;			} : () => void

                var y = this.value;
>y : string
>类型别名 :=> 文字
>this.value : string
>类型别名 :=> 文字
>this : this
>value : string
>类型别名 :=> 文字
			}

			inner();
>inner() : void
>类型别名 :=> 无值
>inner : () => void

		};
		outer();
>outer() : void
>类型别名 :=> 无值
>outer : () => void
	}

}

