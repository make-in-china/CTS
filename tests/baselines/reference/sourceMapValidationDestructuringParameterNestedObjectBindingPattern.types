=== tests/cases/compiler/sourceMapValidationDestructuringParameterNestedObjectBindingPattern.ts ===
declare var console: {
>console : { log(msg: string): void; }

    log(msg: string): void;
>log : (msg: string) => void
>msg : string
>类型别名 :=> 文字
}
interface Robot {
>Robot : Robot

    name: string;
>name : string
>类型别名 :=> 文字

    skills: {
>skills : { primary: string; secondary: string; }

        primary: string;
>primary : string
>类型别名 :=> 文字

        secondary: string;
>secondary : string
>类型别名 :=> 文字

    };
}
var robotA: Robot = { name: "mower", skills: { primary: "mowing", secondary: "none" } };
>robotA : Robot
>Robot : Robot
>{ name: "mower", skills: { primary: "mowing", secondary: "none" } } : { name: string; skills: { primary: string; secondary: string; }; }
>name : string
>类型别名 :=> 文字
>"mower" : "mower"
>skills : { primary: string; secondary: string; }
>{ primary: "mowing", secondary: "none" } : { primary: string; secondary: string; }
>primary : string
>类型别名 :=> 文字
>"mowing" : "mowing"
>secondary : string
>类型别名 :=> 文字
>"none" : "none"

function foo1({ skills: { primary: primaryA, secondary: secondaryA } }: Robot) {
>foo1 : ({ skills: { primary: primaryA, secondary: secondaryA } }: Robot) => void
>skills : any
>类型别名 :=> 任意
>primary : any
>类型别名 :=> 任意
>primaryA : string
>类型别名 :=> 文字
>secondary : any
>类型别名 :=> 任意
>secondaryA : string
>类型别名 :=> 文字
>Robot : Robot

    console.log(primaryA);
>console.log(primaryA) : void
>类型别名 :=> 无值
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>primaryA : string
>类型别名 :=> 文字
}
function foo2({ name: nameC, skills: { primary: primaryB, secondary: secondaryB } }: Robot) {
>foo2 : ({ name: nameC, skills: { primary: primaryB, secondary: secondaryB } }: Robot) => void
>name : any
>类型别名 :=> 任意
>nameC : string
>类型别名 :=> 文字
>skills : any
>类型别名 :=> 任意
>primary : any
>类型别名 :=> 任意
>primaryB : string
>类型别名 :=> 文字
>secondary : any
>类型别名 :=> 任意
>secondaryB : string
>类型别名 :=> 文字
>Robot : Robot

    console.log(secondaryB);
>console.log(secondaryB) : void
>类型别名 :=> 无值
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>secondaryB : string
>类型别名 :=> 文字
}
function foo3({ skills }: Robot) {
>foo3 : ({ skills }: Robot) => void
>skills : { primary: string; secondary: string; }
>Robot : Robot

    console.log(skills.primary);
>console.log(skills.primary) : void
>类型别名 :=> 无值
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>skills.primary : string
>类型别名 :=> 文字
>skills : { primary: string; secondary: string; }
>primary : string
>类型别名 :=> 文字
}

foo1(robotA);
>foo1(robotA) : void
>类型别名 :=> 无值
>foo1 : ({ skills: { primary: primaryA, secondary: secondaryA } }: Robot) => void
>robotA : Robot

foo1({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } });
>foo1({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } }) : void
>类型别名 :=> 无值
>foo1 : ({ skills: { primary: primaryA, secondary: secondaryA } }: Robot) => void
>{ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } } : { name: string; skills: { primary: string; secondary: string; }; }
>name : string
>类型别名 :=> 文字
>"Edger" : "Edger"
>skills : { primary: string; secondary: string; }
>{ primary: "edging", secondary: "branch trimming" } : { primary: string; secondary: string; }
>primary : string
>类型别名 :=> 文字
>"edging" : "edging"
>secondary : string
>类型别名 :=> 文字
>"branch trimming" : "branch trimming"

foo2(robotA);
>foo2(robotA) : void
>类型别名 :=> 无值
>foo2 : ({ name: nameC, skills: { primary: primaryB, secondary: secondaryB } }: Robot) => void
>robotA : Robot

foo2({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } });
>foo2({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } }) : void
>类型别名 :=> 无值
>foo2 : ({ name: nameC, skills: { primary: primaryB, secondary: secondaryB } }: Robot) => void
>{ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } } : { name: string; skills: { primary: string; secondary: string; }; }
>name : string
>类型别名 :=> 文字
>"Edger" : "Edger"
>skills : { primary: string; secondary: string; }
>{ primary: "edging", secondary: "branch trimming" } : { primary: string; secondary: string; }
>primary : string
>类型别名 :=> 文字
>"edging" : "edging"
>secondary : string
>类型别名 :=> 文字
>"branch trimming" : "branch trimming"

foo3(robotA);
>foo3(robotA) : void
>类型别名 :=> 无值
>foo3 : ({ skills }: Robot) => void
>robotA : Robot

foo3({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } });
>foo3({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } }) : void
>类型别名 :=> 无值
>foo3 : ({ skills }: Robot) => void
>{ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } } : { name: string; skills: { primary: string; secondary: string; }; }
>name : string
>类型别名 :=> 文字
>"Edger" : "Edger"
>skills : { primary: string; secondary: string; }
>{ primary: "edging", secondary: "branch trimming" } : { primary: string; secondary: string; }
>primary : string
>类型别名 :=> 文字
>"edging" : "edging"
>secondary : string
>类型别名 :=> 文字
>"branch trimming" : "branch trimming"

