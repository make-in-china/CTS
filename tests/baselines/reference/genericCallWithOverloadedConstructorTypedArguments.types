=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithOverloadedConstructorTypedArguments.ts ===
// Function typed arguments with multiple signatures must be passed an implementation that matches all of them
// Inferences are made quadratic-pairwise to and from these overload sets

module NonGenericParameter {
>NonGenericParameter : 类为 NonGenericParameter

    var a: {
>a : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }

        new(x: boolean): boolean;
>x : 真假
>类型别名 :=> 真假

        new(x: string): string;
>x : 文字
>类型别名 :=> 文字
    }

    function foo4(cb: typeof a) {
>foo4 : (cb: { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }) => 真假
>cb : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }
>a : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }

        return new cb(null);
>new cb(null) : 真假
>类型别名 :=> 真假
>cb : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }
>null : 空值
>类型别名 :=> 空值
    }

    var r = foo4(a);
>r : 真假
>类型别名 :=> 真假
>foo4(a) : 真假
>类型别名 :=> 真假
>foo4 : (cb: { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }) => 真假
>a : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }

    var b: { new <T>(x: T): T };
>b : 新建 <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

    var r2 = foo4(b);
>r2 : 真假
>类型别名 :=> 真假
>foo4(b) : 真假
>类型别名 :=> 真假
>foo4 : (cb: { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }) => 真假
>b : 新建 <T>(x: T) => T
}

module GenericParameter {
>GenericParameter : 类为 GenericParameter

    function foo5<T>(cb: { new(x: T): string; new(x: number): T }) {
>foo5 : <T>(cb: { 新建 (x: T): 文字; 新建 (x: 数字): T; }) => { 新建 (x: T): 文字; 新建 (x: 数字): T; }
>T : T
>cb : { 新建 (x: T): 文字; 新建 (x: 数字): T; }
>x : T
>T : T
>x : 数字
>类型别名 :=> 数字
>T : T

        return cb;
>cb : { 新建 (x: T): 文字; 新建 (x: 数字): T; }
    }

    var a: {
>a : { 新建 (x: 真假): 文字; 新建 (x: 数字): 真假; }

        new (x: boolean): string;
>x : 真假
>类型别名 :=> 真假

        new (x: number): boolean;
>x : 数字
>类型别名 :=> 数字
    }
    var r5 = foo5(a); // new{} => string; new(x:number) => {}
>r5 : { 新建 (x: 真假): 文字; 新建 (x: 数字): 真假; }
>foo5(a) : { 新建 (x: 真假): 文字; 新建 (x: 数字): 真假; }
>foo5 : <T>(cb: { 新建 (x: T): 文字; 新建 (x: 数字): T; }) => { 新建 (x: T): 文字; 新建 (x: 数字): T; }
>a : { 新建 (x: 真假): 文字; 新建 (x: 数字): 真假; }

    var b: { new<T>(x: T): string; new<T>(x: number): T; }
>b : { 新建 <T>(x: T): 文字; 新建 <T>(x: 数字): T; }
>T : T
>x : T
>T : T
>T : T
>x : 数字
>类型别名 :=> 数字
>T : T

    var r7 = foo5(b); // new any => string; new(x:number) => any
>r7 : { 新建 (x: 任意): 文字; 新建 (x: 数字): 任意; }
>foo5(b) : { 新建 (x: 任意): 文字; 新建 (x: 数字): 任意; }
>foo5 : <T>(cb: { 新建 (x: T): 文字; 新建 (x: 数字): T; }) => { 新建 (x: T): 文字; 新建 (x: 数字): T; }
>b : { 新建 <T>(x: T): 文字; 新建 <T>(x: 数字): T; }

    function foo6<T>(cb: { new(x: T): string; new(x: T, y?: T): string }) {
>foo6 : <T>(cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>T : T
>cb : { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>x : T
>T : T
>x : T
>T : T
>y : T
>T : T

        return cb;
>cb : { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
    }

    var r8 = foo6(a); // error
>r8 : { 新建 (x: 真假): 文字; 新建 (x: 真假, y?: 真假): 文字; }
>foo6(a) : { 新建 (x: 真假): 文字; 新建 (x: 真假, y?: 真假): 文字; }
>foo6 : <T>(cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>a : { 新建 (x: 真假): 文字; 新建 (x: 数字): 真假; }

    var r9 = foo6(b); // new any => string; new(x:any, y?:any) => string
>r9 : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo6(b) : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo6 : <T>(cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>b : { 新建 <T>(x: T): 文字; 新建 <T>(x: 数字): T; }

    function foo7<T>(x:T, cb: { new(x: T): string; new(x: T, y?: T): string }) {
>foo7 : <T>(x: T, cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>T : T
>x : T
>T : T
>cb : { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>x : T
>T : T
>x : T
>T : T
>y : T
>T : T

        return cb;
>cb : { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
    }

    var r13 = foo7(1, b); // new any => string; new(x:any, y?:any) => string
>r13 : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo7(1, b) : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo7 : <T>(x: T, cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>1 : 1
>b : { 新建 <T>(x: T): 文字; 新建 <T>(x: 数字): T; }

    var c: { new <T>(x: T): string; <T>(x: number): T; }
>c : { <T>(x: 数字): T; 新建 <T>(x: T): 文字; }
>T : T
>x : T
>T : T
>T : T
>x : 数字
>类型别名 :=> 数字
>T : T

    var c2: { new <T>(x: T): string; new<T>(x: number): T; }
>c2 : { 新建 <T>(x: T): 文字; 新建 <T>(x: 数字): T; }
>T : T
>x : T
>T : T
>T : T
>x : 数字
>类型别名 :=> 数字
>T : T

    var r14 = foo7(1, c); // new any => string; new(x:any, y?:any) => string
>r14 : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo7(1, c) : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo7 : <T>(x: T, cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>1 : 1
>c : { <T>(x: 数字): T; 新建 <T>(x: T): 文字; }

    var r15 = foo7(1, c2); // new any => string; new(x:any, y?:any) => string
>r15 : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo7(1, c2) : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo7 : <T>(x: T, cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>1 : 1
>c2 : { 新建 <T>(x: T): 文字; 新建 <T>(x: 数字): T; }
}
