=== tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration6.ts ===
// A parameter declaration may specify either an identifier or a binding pattern.

// Reserved words are not allowed to be used as an identifier in parameter declaration
"use strict"
>"use strict" : "use strict"

// Error
function a({while}) { }
>a : ({ while:  }: { while: 任意; }) => 无值
>while : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

function a1({public}) { }
>a1 : ({ public }: { public: 任意; }) => 无值
>public : 任意
>类型别名 :=> 任意

function a4([while, for, public]){ }
>a4 : ([]: 任意[]) => 任意
>, : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
>, public : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
>public : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

function a5(...while) { }
>a5 : (...: 任意[]) => 任意
> : 任意[]
> : 任意
>类型别名 :=> 任意

function a6(...public) { }
>a6 : (...public: 任意[]) => 无值
>public : 任意[]

function a7(...a: string) { }
>a7 : (...a: 文字) => 无值
>a : 文字
>类型别名 :=> 文字

a({ while: 1 });
>a({ while: 1 }) : 无值
>类型别名 :=> 无值
>a : ({ while:  }: { while: 任意; }) => 无值
>{ while: 1 } : { while: 数字; }
>while : 数字
>类型别名 :=> 数字
>1 : 1

// No Error
function b1({public: x}) { }
>b1 : ({ public: x }: { public: 任意; }) => 无值
>public : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

function b2({while: y}) { }
>b2 : ({ while: y }: { while: 任意; }) => 无值
>while : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

b1({ public: 1 });
>b1({ public: 1 }) : 无值
>类型别名 :=> 无值
>b1 : ({ public: x }: { public: 任意; }) => 无值
>{ public: 1 } : { public: 数字; }
>public : 数字
>类型别名 :=> 数字
>1 : 1

b2({ while: 1 });
>b2({ while: 1 }) : 无值
>类型别名 :=> 无值
>b2 : ({ while: y }: { while: 任意; }) => 无值
>{ while: 1 } : { while: 数字; }
>while : 数字
>类型别名 :=> 数字
>1 : 1


