=== tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration6.ts ===
// A parameter declaration may specify either an identifier or a binding pattern.

// Reserved words are not allowed to be used as an identifier in parameter declaration
"use strict"
>"use strict" : "use strict"

// Error
function a({while}) { }
>a : ({ while:  }: { while: any; }) => void
>while : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意

function a1({public}) { }
>a1 : ({ public }: { public: any; }) => void
>public : any
>类型别名 :=> 任意

function a4([while, for, public]){ }
>a4 : ([]: any[]) => any
>, : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
>, public : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
>public : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意

function a5(...while) { }
>a5 : (...: any[]) => any
> : any[]
> : any
>类型别名 :=> 任意

function a6(...public) { }
>a6 : (...public: any[]) => void
>public : any[]

function a7(...a: string) { }
>a7 : (...a: string) => void
>a : string
>类型别名 :=> 文字

a({ while: 1 });
>a({ while: 1 }) : void
>类型别名 :=> 无值
>a : ({ while:  }: { while: any; }) => void
>{ while: 1 } : { while: number; }
>while : number
>类型别名 :=> 数字
>1 : 1

// No Error
function b1({public: x}) { }
>b1 : ({ public: x }: { public: any; }) => void
>public : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

function b2({while: y}) { }
>b2 : ({ while: y }: { while: any; }) => void
>while : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

b1({ public: 1 });
>b1({ public: 1 }) : void
>类型别名 :=> 无值
>b1 : ({ public: x }: { public: any; }) => void
>{ public: 1 } : { public: number; }
>public : number
>类型别名 :=> 数字
>1 : 1

b2({ while: 1 });
>b2({ while: 1 }) : void
>类型别名 :=> 无值
>b2 : ({ while: y }: { while: any; }) => void
>{ while: 1 } : { while: number; }
>while : number
>类型别名 :=> 数字
>1 : 1


