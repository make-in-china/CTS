=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts ===
// Call signature parameters do not allow accessibility modifiers

function foo(public x, private y) { }
>foo : (公开 x: 任意, 私有 y: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

var f = function foo(public x, private y) { }
>f : (公开 x: 任意, 私有 y: 任意) => 无值
>function foo(public x, private y) { } : (公开 x: 任意, 私有 y: 任意) => 无值
>foo : (公开 x: 任意, 私有 y: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

var f2 = function (public x, private y) { }
>f2 : (公开 x: 任意, 私有 y: 任意) => 无值
>function (public x, private y) { } : (公开 x: 任意, 私有 y: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

var f3 = (x, private y) => { }
>f3 : (x: 任意, 私有 y: 任意) => 无值
>(x, private y) => { } : (x: 任意, 私有 y: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

var f4 = <T>(public x: T, y: T) => { }
>f4 : <T>(公开 x: T, y: T) => 无值
><T>(public x: T, y: T) => { } : <T>(公开 x: T, y: T) => 无值
>T : T
>x : T
>T : T
>y : T
>T : T

function foo2(private x: string, public y: number) { }
>foo2 : (私有 x: 文字, 公开 y: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字

var f5 = function foo(private x: string, public y: number) { }
>f5 : (私有 x: 文字, 公开 y: 数字) => 无值
>function foo(private x: string, public y: number) { } : (私有 x: 文字, 公开 y: 数字) => 无值
>foo : (私有 x: 文字, 公开 y: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字

var f6 = function (private x: string, public y: number) { }
>f6 : (私有 x: 文字, 公开 y: 数字) => 无值
>function (private x: string, public y: number) { } : (私有 x: 文字, 公开 y: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字

var f7 = (private x: string, public y: number) => { }
>f7 : (私有 x: 文字, 公开 y: 数字) => 无值
>(private x: string, public y: number) => { } : (私有 x: 文字, 公开 y: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字

var f8 = <T>(private x: T, public y: T) => { }
>f8 : <T>(私有 x: T, 公开 y: T) => 无值
><T>(private x: T, public y: T) => { } : <T>(私有 x: T, 公开 y: T) => 无值
>T : T
>x : T
>T : T
>y : T
>T : T

class C {
>C : C

    foo(public x, private y) { }
>foo : (公开 x: 任意, 私有 y: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    foo2(public x: number, private y: string) { }
>foo2 : (公开 x: 数字, 私有 y: 文字) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

    foo3<T>(public x: T, private y: T) { }
>foo3 : <T>(公开 x: T, 私有 y: T) => 无值
>T : T
>x : T
>T : T
>y : T
>T : T
}

interface I {
>I : I

    (private x, public y);
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    (private x: string, public y: number);
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字

    foo(private x, public y);
>foo : { (私有 x: 任意, 公开 y: 任意): 任意; (公开 x: 数字, y: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    foo(public x: number, y: string);
>foo : { (私有 x: 任意, 公开 y: 任意): 任意; (公开 x: 数字, y: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

    foo3<T>(x: T, private y: T);
>foo3 : <T>(x: T, 私有 y: T) => 任意
>T : T
>x : T
>T : T
>y : T
>T : T
}

var a: {
>a : { foo(公开 x: 任意, 私有 y: 任意): 任意; foo2(私有 x: 数字, 公开 y: 文字): 任意; }

    foo(public x, private y);
>foo : (公开 x: 任意, 私有 y: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    foo2(private x: number, public y: string);
>foo2 : (私有 x: 数字, 公开 y: 文字) => 任意
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

};

var b = {
>b : { foo(公开 x: 任意, y: 任意): 无值; a: (x: 数字, 私有 y: 文字) => 无值; b: <T>(公开 x: T, 私有 y: T) => 无值; }
>{    foo(public x, y) { },    a: function foo(x: number, private y: string) { },    b: <T>(public x: T, private y: T) => { }} : { foo(公开 x: 任意, y: 任意): 无值; a: (x: 数字, 私有 y: 文字) => 无值; b: <T>(公开 x: T, 私有 y: T) => 无值; }

    foo(public x, y) { },
>foo : (公开 x: 任意, y: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    a: function foo(x: number, private y: string) { },
>a : (x: 数字, 私有 y: 文字) => 无值
>function foo(x: number, private y: string) { } : (x: 数字, 私有 y: 文字) => 无值
>foo : (x: 数字, 私有 y: 文字) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

    b: <T>(public x: T, private y: T) => { }
>b : <T>(公开 x: T, 私有 y: T) => 无值
><T>(public x: T, private y: T) => { } : <T>(公开 x: T, 私有 y: T) => 无值
>T : T
>x : T
>T : T
>y : T
>T : T
}
