=== tests/cases/compiler/contextualTypingOfConditionalExpression.ts ===
var x: (a: number) => void = true ? (a) => a.toExponential() : (b) => b.toFixed();
>x : (a: 数字) => 无值
>a : 数字
>类型别名 :=> 数字
>true ? (a) => a.toExponential() : (b) => b.toFixed() : (a: 数字) => 文字
>true : 为真
>类型别名 :=> 为真
>(a) => a.toExponential() : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>a.toExponential() : 文字
>类型别名 :=> 文字
>a.toExponential : (fractionDigits?: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>toExponential : (fractionDigits?: 数字) => 文字
>(b) => b.toFixed() : (b: 数字) => 文字
>b : 数字
>类型别名 :=> 数字
>b.toFixed() : 文字
>类型别名 :=> 文字
>b.toFixed : (fractionDigits?: 数字) => 文字
>b : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

class A {
>A : A

    foo: number;
>foo : 数字
>类型别名 :=> 数字
}
class B extends A {
>B : B
>A : A

    bar: number;
>bar : 数字
>类型别名 :=> 数字
}
class C extends A {
>C : C
>A : A

    baz: number;
>baz : 数字
>类型别名 :=> 数字
}

var x2: (a: A) => void = true ? (a) => a.foo : (b) => b.foo;
>x2 : (a: A) => 无值
>a : A
>A : A
>true ? (a) => a.foo : (b) => b.foo : (a: A) => 数字
>true : 为真
>类型别名 :=> 为真
>(a) => a.foo : (a: A) => 数字
>a : A
>a.foo : 数字
>类型别名 :=> 数字
>a : A
>foo : 数字
>类型别名 :=> 数字
>(b) => b.foo : (b: A) => 数字
>b : A
>b.foo : 数字
>类型别名 :=> 数字
>b : A
>foo : 数字
>类型别名 :=> 数字

