=== tests/cases/compiler/decoratorWithUnderscoreMethod.ts ===
declare var console : { log(arg: string): void };
>console : { log(arg: string): void; }
>log : (arg: string) => void
>arg : string
>类型别名 :=> 文字

function dec(): Function {
>dec : () => Function
>Function : Function

    return function (target: any, propKey: string, descr: PropertyDescriptor): void {
>function (target: any, propKey: string, descr: PropertyDescriptor): void {        console.log(target[propKey]);        //logs undefined        //propKey has three underscores as prefix, but the method has only two underscores    } : (target: any, propKey: string, descr: PropertyDescriptor) => void
>target : any
>类型别名 :=> 任意
>propKey : string
>类型别名 :=> 文字
>descr : PropertyDescriptor
>PropertyDescriptor : PropertyDescriptor

        console.log(target[propKey]);
>console.log(target[propKey]) : void
>类型别名 :=> 无值
>console.log : (arg: string) => void
>console : { log(arg: string): void; }
>log : (arg: string) => void
>target[propKey] : any
>类型别名 :=> 任意
>target : any
>类型别名 :=> 任意
>propKey : string
>类型别名 :=> 文字

        //logs undefined
        //propKey has three underscores as prefix, but the method has only two underscores
    };
}

class A {
>A : A

    @dec()
>dec() : Function
>dec : () => Function

    private __foo(bar: string): void {
>__foo : (bar: string) => void
>bar : string
>类型别名 :=> 文字

        // do something with bar
    }
}
