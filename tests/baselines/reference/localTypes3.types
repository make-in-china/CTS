=== tests/cases/conformance/types/localTypes/localTypes3.ts ===
function f1() {
>f1 : () => 无值

    function f() {
>f : () => 类为 C

        class C<X, Y> {
>C : C<X, Y>
>X : X
>Y : Y

            constructor(public x: X, public y: Y) { }
>x : X
>X : X
>y : Y
>Y : Y
        }
        return C;
>C : 类为 C
    }
    let C = f();
>C : 类为 C
>f() : 类为 C
>f : () => 类为 C

    let v = new C(10, "hello");
>v : C<数字, 文字>
>new C(10, "hello") : C<数字, 文字>
>C : 类为 C
>10 : 10
>"hello" : "hello"

    let x = v.x;
>x : 数字
>类型别名 :=> 数字
>v.x : 数字
>类型别名 :=> 数字
>v : C<数字, 文字>
>x : 数字
>类型别名 :=> 数字

    let y = v.y;
>y : 文字
>类型别名 :=> 文字
>v.y : 文字
>类型别名 :=> 文字
>v : C<数字, 文字>
>y : 文字
>类型别名 :=> 文字
}

function f2() {
>f2 : () => 无值

    function f<X>(x: X) {
>f : <X>(x: X) => 类为 C
>X : X
>x : X
>X : X

        class C<Y> {
>C : C<Y>
>Y : Y

            public x = x;
>x : X
>x : X

            constructor(public y: Y) { }
>y : Y
>Y : Y
        }
        return C;
>C : 类为 C
    }
    let C = f(10);
>C : 类为 C
>f(10) : 类为 C
>f : <X>(x: X) => 类为 C
>10 : 10

    let v = new C("hello");
>v : f<数字>.C<文字>
>new C("hello") : f<数字>.C<文字>
>C : 类为 C
>"hello" : "hello"

    let x = v.x;
>x : 数字
>类型别名 :=> 数字
>v.x : 数字
>类型别名 :=> 数字
>v : f<数字>.C<文字>
>x : 数字
>类型别名 :=> 数字

    let y = v.y;
>y : 文字
>类型别名 :=> 文字
>v.y : 文字
>类型别名 :=> 文字
>v : f<数字>.C<文字>
>y : 文字
>类型别名 :=> 文字
}

function f3() {
>f3 : () => 无值

    function f<X, Y>(x: X, y: Y) {
>f : <X, Y>(x: X, y: Y) => 类为 C
>X : X
>Y : Y
>x : X
>X : X
>y : Y
>Y : Y

        class C {
>C : C

            public x = x;
>x : X
>x : X

            public y = y;
>y : Y
>y : Y
        }
        return C;
>C : 类为 C
    }
    let C = f(10, "hello");
>C : 类为 C
>f(10, "hello") : 类为 C
>f : <X, Y>(x: X, y: Y) => 类为 C
>10 : 10
>"hello" : "hello"

    let v = new C();
>v : f<数字, 文字>.C
>new C() : f<数字, 文字>.C
>C : 类为 C

    let x = v.x;
>x : 数字
>类型别名 :=> 数字
>v.x : 数字
>类型别名 :=> 数字
>v : f<数字, 文字>.C
>x : 数字
>类型别名 :=> 数字

    let y = v.y;
>y : 文字
>类型别名 :=> 文字
>v.y : 文字
>类型别名 :=> 文字
>v : f<数字, 文字>.C
>y : 文字
>类型别名 :=> 文字
}

