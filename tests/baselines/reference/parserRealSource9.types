=== tests/cases/conformance/parser/ecmascript5/parserRealSource9.ts ===
// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
// See LICENSE.txt in the project root for complete license information.

///<reference path='typescript.ts' />

module TypeScript {
>TypeScript : 类为 TypeScript

    export class Binder {
>Binder : Binder

        constructor (public checker: TypeChecker) { }
>checker : 任意
>类型别名 :=> 任意
>TypeChecker : No type information available!

        public resolveBaseTypeLinks(typeLinks: TypeLink[], scope: SymbolScope) {
>resolveBaseTypeLinks : (typeLinks: 任意[], scope: 任意) => 任意[]
>typeLinks : 任意[]
>TypeLink : No type information available!
>scope : 任意
>类型别名 :=> 任意
>SymbolScope : No type information available!

            var extendsList: Type[] = null;
>extendsList : 任意[]
>Type : No type information available!
>null : 空值
>类型别名 :=> 空值

            if (typeLinks) {
>typeLinks : 任意[]

                extendsList = new Type[];
>extendsList = new Type[] : 任意
>类型别名 :=> 任意
>extendsList : 任意[]
>new Type[] : 任意
>类型别名 :=> 任意
>Type[] : 任意
>类型别名 :=> 任意
>Type : 任意
>类型别名 :=> 任意

                for (var i = 0, len = typeLinks.length; i < len; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>len : 数字
>类型别名 :=> 数字
>typeLinks.length : 数字
>类型别名 :=> 数字
>typeLinks : 任意[]
>length : 数字
>类型别名 :=> 数字
>i < len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                    var typeLink = typeLinks[i];
>typeLink : 任意
>类型别名 :=> 任意
>typeLinks[i] : 任意
>类型别名 :=> 任意
>typeLinks : 任意[]
>i : 数字
>类型别名 :=> 数字

                    this.checker.resolvingBases = true;
>this.checker.resolvingBases = true : 为真
>类型别名 :=> 为真
>this.checker.resolvingBases : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>resolvingBases : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真

                    this.checker.resolveTypeLink(scope, typeLink, true);
>this.checker.resolveTypeLink(scope, typeLink, true) : 任意
>类型别名 :=> 任意
>this.checker.resolveTypeLink : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>resolveTypeLink : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真

                    this.checker.resolvingBases = false;
>this.checker.resolvingBases = false : 为假
>类型别名 :=> 为假
>this.checker.resolvingBases : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>resolvingBases : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    if (typeLink.type.isClass()) {
>typeLink.type.isClass() : 任意
>类型别名 :=> 任意
>typeLink.type.isClass : 任意
>类型别名 :=> 任意
>typeLink.type : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>isClass : 任意
>类型别名 :=> 任意

                        extendsList[i] = typeLink.type.instanceType;
>extendsList[i] = typeLink.type.instanceType : 任意
>类型别名 :=> 任意
>extendsList[i] : 任意
>类型别名 :=> 任意
>extendsList : 任意[]
>i : 数字
>类型别名 :=> 数字
>typeLink.type.instanceType : 任意
>类型别名 :=> 任意
>typeLink.type : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>instanceType : 任意
>类型别名 :=> 任意
                    }
                    else {
                        extendsList[i] = typeLink.type;
>extendsList[i] = typeLink.type : 任意
>类型别名 :=> 任意
>extendsList[i] : 任意
>类型别名 :=> 任意
>extendsList : 任意[]
>i : 数字
>类型别名 :=> 数字
>typeLink.type : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
                    }
                }
            }
            return extendsList;
>extendsList : 任意[]
        }

        public resolveBases(scope: SymbolScope, type: Type) {
>resolveBases : (scope: 任意, type: 任意) => 无值
>scope : 任意
>类型别名 :=> 任意
>SymbolScope : No type information available!
>type : 任意
>类型别名 :=> 任意
>Type : No type information available!

            type.extendsList = this.resolveBaseTypeLinks(type.extendsTypeLinks, scope);
>type.extendsList = this.resolveBaseTypeLinks(type.extendsTypeLinks, scope) : 任意[]
>type.extendsList : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意
>this.resolveBaseTypeLinks(type.extendsTypeLinks, scope) : 任意[]
>this.resolveBaseTypeLinks : (typeLinks: 任意[], scope: 任意) => 任意[]
>this : 本体
>resolveBaseTypeLinks : (typeLinks: 任意[], scope: 任意) => 任意[]
>type.extendsTypeLinks : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>extendsTypeLinks : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意

            var i = 0, len = type.extendsList.length;
>i : 数字
>类型别名 :=> 数字
>0 : 0
>len : 任意
>类型别名 :=> 任意
>type.extendsList.length : 任意
>类型别名 :=> 任意
>type.extendsList : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意

            var derivedIsClass = type.isClassInstance();
>derivedIsClass : 任意
>类型别名 :=> 任意
>type.isClassInstance() : 任意
>类型别名 :=> 任意
>type.isClassInstance : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>isClassInstance : 任意
>类型别名 :=> 任意

            for (; i < len; i++) {
>i < len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 任意
>类型别名 :=> 任意
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                var baseIsClass = type.extendsList[i].isClassInstance();
>baseIsClass : 任意
>类型别名 :=> 任意
>type.extendsList[i].isClassInstance() : 任意
>类型别名 :=> 任意
>type.extendsList[i].isClassInstance : 任意
>类型别名 :=> 任意
>type.extendsList[i] : 任意
>类型别名 :=> 任意
>type.extendsList : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字
>isClassInstance : 任意
>类型别名 :=> 任意

                if (type.extendsList[i] != this.checker.anyType) {
>type.extendsList[i] != this.checker.anyType : 真假
>类型别名 :=> 真假
>type.extendsList[i] : 任意
>类型别名 :=> 任意
>type.extendsList : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字
>this.checker.anyType : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>anyType : 任意
>类型别名 :=> 任意

                    if (derivedIsClass) {
>derivedIsClass : 任意
>类型别名 :=> 任意

                        if (!baseIsClass) {
>!baseIsClass : 真假
>类型别名 :=> 真假
>baseIsClass : 任意
>类型别名 :=> 任意

                            this.checker.errorReporter.simpleErrorFromSym(type.symbol,
>this.checker.errorReporter.simpleErrorFromSym(type.symbol,                                                                     "A export class may only extend other classes, " + type.extendsList[i].symbol.fullName() + " is an interface.") : 任意
>类型别名 :=> 任意
>this.checker.errorReporter.simpleErrorFromSym : 任意
>类型别名 :=> 任意
>this.checker.errorReporter : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>errorReporter : 任意
>类型别名 :=> 任意
>simpleErrorFromSym : 任意
>类型别名 :=> 任意
>type.symbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意

                                                                     "A export class may only extend other classes, " + type.extendsList[i].symbol.fullName() + " is an interface.");
>"A export class may only extend other classes, " + type.extendsList[i].symbol.fullName() + " is an interface." : 文字
>类型别名 :=> 文字
>"A export class may only extend other classes, " + type.extendsList[i].symbol.fullName() : 文字
>类型别名 :=> 文字
>"A export class may only extend other classes, " : "A export class may only extend other classes, "
>type.extendsList[i].symbol.fullName() : 任意
>类型别名 :=> 任意
>type.extendsList[i].symbol.fullName : 任意
>类型别名 :=> 任意
>type.extendsList[i].symbol : 任意
>类型别名 :=> 任意
>type.extendsList[i] : 任意
>类型别名 :=> 任意
>type.extendsList : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字
>symbol : 任意
>类型别名 :=> 任意
>fullName : 任意
>类型别名 :=> 任意
>" is an interface." : " is an interface."
                        }
                    }
                    else {
                        if (baseIsClass) {
>baseIsClass : 任意
>类型别名 :=> 任意

                            this.checker.errorReporter.simpleErrorFromSym(type.symbol,
>this.checker.errorReporter.simpleErrorFromSym(type.symbol,                                                                     "An interface may only extend other interfaces, " + type.extendsList[i].symbol.fullName() + " is a class.") : 任意
>类型别名 :=> 任意
>this.checker.errorReporter.simpleErrorFromSym : 任意
>类型别名 :=> 任意
>this.checker.errorReporter : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>errorReporter : 任意
>类型别名 :=> 任意
>simpleErrorFromSym : 任意
>类型别名 :=> 任意
>type.symbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意

                                                                     "An interface may only extend other interfaces, " + type.extendsList[i].symbol.fullName() + " is a class.");
>"An interface may only extend other interfaces, " + type.extendsList[i].symbol.fullName() + " is a class." : 文字
>类型别名 :=> 文字
>"An interface may only extend other interfaces, " + type.extendsList[i].symbol.fullName() : 文字
>类型别名 :=> 文字
>"An interface may only extend other interfaces, " : "An interface may only extend other interfaces, "
>type.extendsList[i].symbol.fullName() : 任意
>类型别名 :=> 任意
>type.extendsList[i].symbol.fullName : 任意
>类型别名 :=> 任意
>type.extendsList[i].symbol : 任意
>类型别名 :=> 任意
>type.extendsList[i] : 任意
>类型别名 :=> 任意
>type.extendsList : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>extendsList : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字
>symbol : 任意
>类型别名 :=> 任意
>fullName : 任意
>类型别名 :=> 任意
>" is a class." : " is a class."
                        }
                    }
                }
            }

            type.implementsList = this.resolveBaseTypeLinks(type.implementsTypeLinks, scope);
>type.implementsList = this.resolveBaseTypeLinks(type.implementsTypeLinks, scope) : 任意[]
>type.implementsList : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>implementsList : 任意
>类型别名 :=> 任意
>this.resolveBaseTypeLinks(type.implementsTypeLinks, scope) : 任意[]
>this.resolveBaseTypeLinks : (typeLinks: 任意[], scope: 任意) => 任意[]
>this : 本体
>resolveBaseTypeLinks : (typeLinks: 任意[], scope: 任意) => 任意[]
>type.implementsTypeLinks : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>implementsTypeLinks : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意

            if (type.implementsList) {
>type.implementsList : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>implementsList : 任意
>类型别名 :=> 任意

                for (i = 0, len = type.implementsList.length; i < len; i++) {
>i = 0, len = type.implementsList.length : 任意
>类型别名 :=> 任意
>i = 0 : 0
>i : 数字
>类型别名 :=> 数字
>0 : 0
>len = type.implementsList.length : 任意
>类型别名 :=> 任意
>len : 任意
>类型别名 :=> 任意
>type.implementsList.length : 任意
>类型别名 :=> 任意
>type.implementsList : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>implementsList : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>i < len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 任意
>类型别名 :=> 任意
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                    var iface = type.implementsList[i];
>iface : 任意
>类型别名 :=> 任意
>type.implementsList[i] : 任意
>类型别名 :=> 任意
>type.implementsList : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>implementsList : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字

                    if (iface.isClassInstance()) {
>iface.isClassInstance() : 任意
>类型别名 :=> 任意
>iface.isClassInstance : 任意
>类型别名 :=> 任意
>iface : 任意
>类型别名 :=> 任意
>isClassInstance : 任意
>类型别名 :=> 任意

                        if (derivedIsClass) {
>derivedIsClass : 任意
>类型别名 :=> 任意

                            this.checker.errorReporter.simpleErrorFromSym(type.symbol,
>this.checker.errorReporter.simpleErrorFromSym(type.symbol,                                                                     "A class may only implement an interface; " + iface.symbol.fullName() + " is a class.") : 任意
>类型别名 :=> 任意
>this.checker.errorReporter.simpleErrorFromSym : 任意
>类型别名 :=> 任意
>this.checker.errorReporter : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>errorReporter : 任意
>类型别名 :=> 任意
>simpleErrorFromSym : 任意
>类型别名 :=> 任意
>type.symbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意

                                                                     "A class may only implement an interface; " + iface.symbol.fullName() + " is a class.");
>"A class may only implement an interface; " + iface.symbol.fullName() + " is a class." : 文字
>类型别名 :=> 文字
>"A class may only implement an interface; " + iface.symbol.fullName() : 文字
>类型别名 :=> 文字
>"A class may only implement an interface; " : "A class may only implement an interface; "
>iface.symbol.fullName() : 任意
>类型别名 :=> 任意
>iface.symbol.fullName : 任意
>类型别名 :=> 任意
>iface.symbol : 任意
>类型别名 :=> 任意
>iface : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>fullName : 任意
>类型别名 :=> 任意
>" is a class." : " is a class."
                        }
                    }
                }
            }
        }

        public resolveSignatureGroup(signatureGroup: SignatureGroup, scope: SymbolScope, instanceType: Type) {
>resolveSignatureGroup : (signatureGroup: 任意, scope: 任意, instanceType: 任意) => 无值
>signatureGroup : 任意
>类型别名 :=> 任意
>SignatureGroup : No type information available!
>scope : 任意
>类型别名 :=> 任意
>SymbolScope : No type information available!
>instanceType : 任意
>类型别名 :=> 任意
>Type : No type information available!

            var supplyVar = !(signatureGroup.hasImplementation);
>supplyVar : 真假
>类型别名 :=> 真假
>!(signatureGroup.hasImplementation) : 真假
>类型别名 :=> 真假
>(signatureGroup.hasImplementation) : 任意
>类型别名 :=> 任意
>signatureGroup.hasImplementation : 任意
>类型别名 :=> 任意
>signatureGroup : 任意
>类型别名 :=> 任意
>hasImplementation : 任意
>类型别名 :=> 任意

            for (var i = 0, len = signatureGroup.signatures.length; i < len; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>len : 任意
>类型别名 :=> 任意
>signatureGroup.signatures.length : 任意
>类型别名 :=> 任意
>signatureGroup.signatures : 任意
>类型别名 :=> 任意
>signatureGroup : 任意
>类型别名 :=> 任意
>signatures : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>i < len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 任意
>类型别名 :=> 任意
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                var signature = signatureGroup.signatures[i];
>signature : 任意
>类型别名 :=> 任意
>signatureGroup.signatures[i] : 任意
>类型别名 :=> 任意
>signatureGroup.signatures : 任意
>类型别名 :=> 任意
>signatureGroup : 任意
>类型别名 :=> 任意
>signatures : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字

                if (instanceType) {
>instanceType : 任意
>类型别名 :=> 任意

                    signature.returnType.type = instanceType;
>signature.returnType.type = instanceType : 任意
>类型别名 :=> 任意
>signature.returnType.type : 任意
>类型别名 :=> 任意
>signature.returnType : 任意
>类型别名 :=> 任意
>signature : 任意
>类型别名 :=> 任意
>returnType : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>instanceType : 任意
>类型别名 :=> 任意
                }
                else {
                    this.checker.resolveTypeLink(scope, signature.returnType, supplyVar);
>this.checker.resolveTypeLink(scope, signature.returnType, supplyVar) : 任意
>类型别名 :=> 任意
>this.checker.resolveTypeLink : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>resolveTypeLink : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>signature.returnType : 任意
>类型别名 :=> 任意
>signature : 任意
>类型别名 :=> 任意
>returnType : 任意
>类型别名 :=> 任意
>supplyVar : 真假
>类型别名 :=> 真假
                }
                var paramLen = signature.parameters.length;
>paramLen : 任意
>类型别名 :=> 任意
>signature.parameters.length : 任意
>类型别名 :=> 任意
>signature.parameters : 任意
>类型别名 :=> 任意
>signature : 任意
>类型别名 :=> 任意
>parameters : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意

                for (var j = 0; j < paramLen; j++) {
>j : 数字
>类型别名 :=> 数字
>0 : 0
>j < paramLen : 真假
>类型别名 :=> 真假
>j : 数字
>类型别名 :=> 数字
>paramLen : 任意
>类型别名 :=> 任意
>j++ : 数字
>类型别名 :=> 数字
>j : 数字
>类型别名 :=> 数字

                    this.bindSymbol(scope, signature.parameters[j]);
>this.bindSymbol(scope, signature.parameters[j]) : 无值
>类型别名 :=> 无值
>this.bindSymbol : (scope: 任意, symbol: 任意) => 无值
>this : 本体
>bindSymbol : (scope: 任意, symbol: 任意) => 无值
>scope : 任意
>类型别名 :=> 任意
>signature.parameters[j] : 任意
>类型别名 :=> 任意
>signature.parameters : 任意
>类型别名 :=> 任意
>signature : 任意
>类型别名 :=> 任意
>parameters : 任意
>类型别名 :=> 任意
>j : 数字
>类型别名 :=> 数字
                }
                if (signature.hasVariableArgList) {
>signature.hasVariableArgList : 任意
>类型别名 :=> 任意
>signature : 任意
>类型别名 :=> 任意
>hasVariableArgList : 任意
>类型别名 :=> 任意

                    // check that last parameter has an array type
                    var lastParam = <ParameterSymbol>signature.parameters[paramLen - 1];
>lastParam : 任意
>类型别名 :=> 任意
><ParameterSymbol>signature.parameters[paramLen - 1] : 任意
>类型别名 :=> 任意
>ParameterSymbol : No type information available!
>signature.parameters[paramLen - 1] : 任意
>类型别名 :=> 任意
>signature.parameters : 任意
>类型别名 :=> 任意
>signature : 任意
>类型别名 :=> 任意
>parameters : 任意
>类型别名 :=> 任意
>paramLen - 1 : 数字
>类型别名 :=> 数字
>paramLen : 任意
>类型别名 :=> 任意
>1 : 1

                    lastParam.argsOffset = paramLen - 1;
>lastParam.argsOffset = paramLen - 1 : 数字
>类型别名 :=> 数字
>lastParam.argsOffset : 任意
>类型别名 :=> 任意
>lastParam : 任意
>类型别名 :=> 任意
>argsOffset : 任意
>类型别名 :=> 任意
>paramLen - 1 : 数字
>类型别名 :=> 数字
>paramLen : 任意
>类型别名 :=> 任意
>1 : 1

                    if (!lastParam.getType().isArray()) {
>!lastParam.getType().isArray() : 真假
>类型别名 :=> 真假
>lastParam.getType().isArray() : 任意
>类型别名 :=> 任意
>lastParam.getType().isArray : 任意
>类型别名 :=> 任意
>lastParam.getType() : 任意
>类型别名 :=> 任意
>lastParam.getType : 任意
>类型别名 :=> 任意
>lastParam : 任意
>类型别名 :=> 任意
>getType : 任意
>类型别名 :=> 任意
>isArray : 任意
>类型别名 :=> 任意

                        this.checker.errorReporter.simpleErrorFromSym(lastParam,
>this.checker.errorReporter.simpleErrorFromSym(lastParam,                                                                 "... parameter must have array type") : 任意
>类型别名 :=> 任意
>this.checker.errorReporter.simpleErrorFromSym : 任意
>类型别名 :=> 任意
>this.checker.errorReporter : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>errorReporter : 任意
>类型别名 :=> 任意
>simpleErrorFromSym : 任意
>类型别名 :=> 任意
>lastParam : 任意
>类型别名 :=> 任意

                                                                 "... parameter must have array type");
>"... parameter must have array type" : "... parameter must have array type"

                        lastParam.parameter.typeLink.type = this.checker.makeArrayType(lastParam.parameter.typeLink.type);
>lastParam.parameter.typeLink.type = this.checker.makeArrayType(lastParam.parameter.typeLink.type) : 任意
>类型别名 :=> 任意
>lastParam.parameter.typeLink.type : 任意
>类型别名 :=> 任意
>lastParam.parameter.typeLink : 任意
>类型别名 :=> 任意
>lastParam.parameter : 任意
>类型别名 :=> 任意
>lastParam : 任意
>类型别名 :=> 任意
>parameter : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>this.checker.makeArrayType(lastParam.parameter.typeLink.type) : 任意
>类型别名 :=> 任意
>this.checker.makeArrayType : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>makeArrayType : 任意
>类型别名 :=> 任意
>lastParam.parameter.typeLink.type : 任意
>类型别名 :=> 任意
>lastParam.parameter.typeLink : 任意
>类型别名 :=> 任意
>lastParam.parameter : 任意
>类型别名 :=> 任意
>lastParam : 任意
>类型别名 :=> 任意
>parameter : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
                    }
                }
            }
        }

        public bindType(scope: SymbolScope, type: Type, instanceType: Type): void {
>bindType : (scope: 任意, type: 任意, instanceType: 任意) => 无值
>scope : 任意
>类型别名 :=> 任意
>SymbolScope : No type information available!
>type : 任意
>类型别名 :=> 任意
>Type : No type information available!
>instanceType : 任意
>类型别名 :=> 任意
>Type : No type information available!

            if (instanceType) {
>instanceType : 任意
>类型别名 :=> 任意

                this.bindType(scope, instanceType, null);
>this.bindType(scope, instanceType, null) : 无值
>类型别名 :=> 无值
>this.bindType : (scope: 任意, type: 任意, instanceType: 任意) => 无值
>this : 本体
>bindType : (scope: 任意, type: 任意, instanceType: 任意) => 无值
>scope : 任意
>类型别名 :=> 任意
>instanceType : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
            }
            if (type.hasMembers()) {
>type.hasMembers() : 任意
>类型别名 :=> 任意
>type.hasMembers : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>hasMembers : 任意
>类型别名 :=> 任意

                var members = type.members;
>members : 任意
>类型别名 :=> 任意
>type.members : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意

                var ambientMembers = type.ambientMembers;
>ambientMembers : 任意
>类型别名 :=> 任意
>type.ambientMembers : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>ambientMembers : 任意
>类型别名 :=> 任意

                var typeMembers = type.getAllEnclosedTypes(); // REVIEW: Should only be getting exported types?
>typeMembers : 任意
>类型别名 :=> 任意
>type.getAllEnclosedTypes() : 任意
>类型别名 :=> 任意
>type.getAllEnclosedTypes : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>getAllEnclosedTypes : 任意
>类型别名 :=> 任意

                var ambientTypeMembers = type.getAllAmbientEnclosedTypes(); // REVIEW: Should only be getting exported types?
>ambientTypeMembers : 任意
>类型别名 :=> 任意
>type.getAllAmbientEnclosedTypes() : 任意
>类型别名 :=> 任意
>type.getAllAmbientEnclosedTypes : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>getAllAmbientEnclosedTypes : 任意
>类型别名 :=> 任意

                var memberScope = new SymbolTableScope(members, ambientMembers, typeMembers, ambientTypeMembers, type.symbol);
>memberScope : 任意
>类型别名 :=> 任意
>new SymbolTableScope(members, ambientMembers, typeMembers, ambientTypeMembers, type.symbol) : 任意
>类型别名 :=> 任意
>SymbolTableScope : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
>ambientMembers : 任意
>类型别名 :=> 任意
>typeMembers : 任意
>类型别名 :=> 任意
>ambientTypeMembers : 任意
>类型别名 :=> 任意
>type.symbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意

                var agg = new SymbolAggregateScope(type.symbol);
>agg : 任意
>类型别名 :=> 任意
>new SymbolAggregateScope(type.symbol) : 任意
>类型别名 :=> 任意
>SymbolAggregateScope : 任意
>类型别名 :=> 任意
>type.symbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意

                var prevCurrentModDecl = this.checker.currentModDecl;
>prevCurrentModDecl : 任意
>类型别名 :=> 任意
>this.checker.currentModDecl : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>currentModDecl : 任意
>类型别名 :=> 任意

                var prevBindStatus = this.checker.inBind;
>prevBindStatus : 任意
>类型别名 :=> 任意
>this.checker.inBind : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>inBind : 任意
>类型别名 :=> 任意

                agg.addParentScope(memberScope);
>agg.addParentScope(memberScope) : 任意
>类型别名 :=> 任意
>agg.addParentScope : 任意
>类型别名 :=> 任意
>agg : 任意
>类型别名 :=> 任意
>addParentScope : 任意
>类型别名 :=> 任意
>memberScope : 任意
>类型别名 :=> 任意

                agg.addParentScope(scope);
>agg.addParentScope(scope) : 任意
>类型别名 :=> 任意
>agg.addParentScope : 任意
>类型别名 :=> 任意
>agg : 任意
>类型别名 :=> 任意
>addParentScope : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意

                if (type.isModuleType()) {
>type.isModuleType() : 任意
>类型别名 :=> 任意
>type.isModuleType : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>isModuleType : 任意
>类型别名 :=> 任意

                    this.checker.currentModDecl = <ModuleDeclaration>type.symbol.declAST;
>this.checker.currentModDecl = <ModuleDeclaration>type.symbol.declAST : 任意
>类型别名 :=> 任意
>this.checker.currentModDecl : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>currentModDecl : 任意
>类型别名 :=> 任意
><ModuleDeclaration>type.symbol.declAST : 任意
>类型别名 :=> 任意
>ModuleDeclaration : No type information available!
>type.symbol.declAST : 任意
>类型别名 :=> 任意
>type.symbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>declAST : 任意
>类型别名 :=> 任意

                    this.checker.inBind = true;
>this.checker.inBind = true : 为真
>类型别名 :=> 为真
>this.checker.inBind : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>inBind : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
                }
                if (members) {
>members : 任意
>类型别名 :=> 任意

                    this.bind(agg, type.members.allMembers); // REVIEW: Should only be getting exported types?
>this.bind(agg, type.members.allMembers) : 无值
>类型别名 :=> 无值
>this.bind : (scope: 任意, table: 任意) => 无值
>this : 本体
>bind : (scope: 任意, table: 任意) => 无值
>agg : 任意
>类型别名 :=> 任意
>type.members.allMembers : 任意
>类型别名 :=> 任意
>type.members : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>members : 任意
>类型别名 :=> 任意
>allMembers : 任意
>类型别名 :=> 任意
                }
                if (typeMembers) {
>typeMembers : 任意
>类型别名 :=> 任意

                    this.bind(agg, typeMembers.allMembers);
>this.bind(agg, typeMembers.allMembers) : 无值
>类型别名 :=> 无值
>this.bind : (scope: 任意, table: 任意) => 无值
>this : 本体
>bind : (scope: 任意, table: 任意) => 无值
>agg : 任意
>类型别名 :=> 任意
>typeMembers.allMembers : 任意
>类型别名 :=> 任意
>typeMembers : 任意
>类型别名 :=> 任意
>allMembers : 任意
>类型别名 :=> 任意
                }
                if (ambientMembers) {
>ambientMembers : 任意
>类型别名 :=> 任意

                    this.bind(agg, ambientMembers.allMembers);
>this.bind(agg, ambientMembers.allMembers) : 无值
>类型别名 :=> 无值
>this.bind : (scope: 任意, table: 任意) => 无值
>this : 本体
>bind : (scope: 任意, table: 任意) => 无值
>agg : 任意
>类型别名 :=> 任意
>ambientMembers.allMembers : 任意
>类型别名 :=> 任意
>ambientMembers : 任意
>类型别名 :=> 任意
>allMembers : 任意
>类型别名 :=> 任意
                }
                if (ambientTypeMembers) {
>ambientTypeMembers : 任意
>类型别名 :=> 任意

                    this.bind(agg, ambientTypeMembers.allMembers);
>this.bind(agg, ambientTypeMembers.allMembers) : 无值
>类型别名 :=> 无值
>this.bind : (scope: 任意, table: 任意) => 无值
>this : 本体
>bind : (scope: 任意, table: 任意) => 无值
>agg : 任意
>类型别名 :=> 任意
>ambientTypeMembers.allMembers : 任意
>类型别名 :=> 任意
>ambientTypeMembers : 任意
>类型别名 :=> 任意
>allMembers : 任意
>类型别名 :=> 任意
                }
                this.checker.currentModDecl = prevCurrentModDecl;
>this.checker.currentModDecl = prevCurrentModDecl : 任意
>类型别名 :=> 任意
>this.checker.currentModDecl : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>currentModDecl : 任意
>类型别名 :=> 任意
>prevCurrentModDecl : 任意
>类型别名 :=> 任意

                this.checker.inBind = prevBindStatus;
>this.checker.inBind = prevBindStatus : 任意
>类型别名 :=> 任意
>this.checker.inBind : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>inBind : 任意
>类型别名 :=> 任意
>prevBindStatus : 任意
>类型别名 :=> 任意
            }
            if (type.extendsTypeLinks) {
>type.extendsTypeLinks : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>extendsTypeLinks : 任意
>类型别名 :=> 任意

                this.resolveBases(scope, type);
>this.resolveBases(scope, type) : 无值
>类型别名 :=> 无值
>this.resolveBases : (scope: 任意, type: 任意) => 无值
>this : 本体
>resolveBases : (scope: 任意, type: 任意) => 无值
>scope : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
            }
            if (type.construct) {
>type.construct : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>construct : 任意
>类型别名 :=> 任意

                this.resolveSignatureGroup(type.construct, scope, instanceType);
>this.resolveSignatureGroup(type.construct, scope, instanceType) : 无值
>类型别名 :=> 无值
>this.resolveSignatureGroup : (signatureGroup: 任意, scope: 任意, instanceType: 任意) => 无值
>this : 本体
>resolveSignatureGroup : (signatureGroup: 任意, scope: 任意, instanceType: 任意) => 无值
>type.construct : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>construct : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>instanceType : 任意
>类型别名 :=> 任意
            }
            if (type.call) {
>type.call : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>call : 任意
>类型别名 :=> 任意

                this.resolveSignatureGroup(type.call, scope, null);
>this.resolveSignatureGroup(type.call, scope, null) : 无值
>类型别名 :=> 无值
>this.resolveSignatureGroup : (signatureGroup: 任意, scope: 任意, instanceType: 任意) => 无值
>this : 本体
>resolveSignatureGroup : (signatureGroup: 任意, scope: 任意, instanceType: 任意) => 无值
>type.call : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>call : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
            }
            if (type.index) {
>type.index : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>index : 任意
>类型别名 :=> 任意

                this.resolveSignatureGroup(type.index, scope, null);
>this.resolveSignatureGroup(type.index, scope, null) : 无值
>类型别名 :=> 无值
>this.resolveSignatureGroup : (signatureGroup: 任意, scope: 任意, instanceType: 任意) => 无值
>this : 本体
>resolveSignatureGroup : (signatureGroup: 任意, scope: 任意, instanceType: 任意) => 无值
>type.index : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>index : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
            }
            if (type.elementType) {
>type.elementType : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>elementType : 任意
>类型别名 :=> 任意

                this.bindType(scope, type.elementType, null);
>this.bindType(scope, type.elementType, null) : 无值
>类型别名 :=> 无值
>this.bindType : (scope: 任意, type: 任意, instanceType: 任意) => 无值
>this : 本体
>bindType : (scope: 任意, type: 任意, instanceType: 任意) => 无值
>scope : 任意
>类型别名 :=> 任意
>type.elementType : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>elementType : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
            }
        }

        public bindSymbol(scope: SymbolScope, symbol: Symbol) {
>bindSymbol : (scope: 任意, symbol: 任意) => 无值
>scope : 任意
>类型别名 :=> 任意
>SymbolScope : No type information available!
>symbol : 任意
>类型别名 :=> 任意
>Symbol : No type information available!

            if (!symbol.bound) {
>!symbol.bound : 真假
>类型别名 :=> 真假
>symbol.bound : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>bound : 任意
>类型别名 :=> 任意

                var prevLocationInfo = this.checker.locationInfo;
>prevLocationInfo : 任意
>类型别名 :=> 任意
>this.checker.locationInfo : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>locationInfo : 任意
>类型别名 :=> 任意

                if ((this.checker.units) && (symbol.unitIndex >= 0) && (symbol.unitIndex < this.checker.units.length)) {
>(this.checker.units) && (symbol.unitIndex >= 0) && (symbol.unitIndex < this.checker.units.length) : 真假
>类型别名 :=> 真假
>(this.checker.units) && (symbol.unitIndex >= 0) : 真假
>类型别名 :=> 真假
>(this.checker.units) : 任意
>类型别名 :=> 任意
>this.checker.units : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>units : 任意
>类型别名 :=> 任意
>(symbol.unitIndex >= 0) : 真假
>类型别名 :=> 真假
>symbol.unitIndex >= 0 : 真假
>类型别名 :=> 真假
>symbol.unitIndex : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>unitIndex : 任意
>类型别名 :=> 任意
>0 : 0
>(symbol.unitIndex < this.checker.units.length) : 真假
>类型别名 :=> 真假
>symbol.unitIndex < this.checker.units.length : 真假
>类型别名 :=> 真假
>symbol.unitIndex : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>unitIndex : 任意
>类型别名 :=> 任意
>this.checker.units.length : 任意
>类型别名 :=> 任意
>this.checker.units : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>units : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意

                    this.checker.locationInfo = this.checker.units[symbol.unitIndex];
>this.checker.locationInfo = this.checker.units[symbol.unitIndex] : 任意
>类型别名 :=> 任意
>this.checker.locationInfo : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>locationInfo : 任意
>类型别名 :=> 任意
>this.checker.units[symbol.unitIndex] : 任意
>类型别名 :=> 任意
>this.checker.units : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>units : 任意
>类型别名 :=> 任意
>symbol.unitIndex : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>unitIndex : 任意
>类型别名 :=> 任意
                }
                switch (symbol.kind()) {
>symbol.kind() : 任意
>类型别名 :=> 任意
>symbol.kind : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>kind : 任意
>类型别名 :=> 任意

                    case SymbolKind.Type:
>SymbolKind.Type : 任意
>类型别名 :=> 任意
>SymbolKind : 任意
>类型别名 :=> 任意
>Type : 任意
>类型别名 :=> 任意

                        if (symbol.flags & SymbolFlags.Bound) {
>symbol.flags & SymbolFlags.Bound : 数字
>类型别名 :=> 数字
>symbol.flags : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>flags : 任意
>类型别名 :=> 任意
>SymbolFlags.Bound : 任意
>类型别名 :=> 任意
>SymbolFlags : 任意
>类型别名 :=> 任意
>Bound : 任意
>类型别名 :=> 任意

                            break;
                        }

                        var typeSymbol = <TypeSymbol>symbol;
>typeSymbol : 任意
>类型别名 :=> 任意
><TypeSymbol>symbol : 任意
>类型别名 :=> 任意
>TypeSymbol : No type information available!
>symbol : 任意
>类型别名 :=> 任意

                        typeSymbol.flags |= SymbolFlags.Bound;
>typeSymbol.flags |= SymbolFlags.Bound : 数字
>类型别名 :=> 数字
>typeSymbol.flags : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>flags : 任意
>类型别名 :=> 任意
>SymbolFlags.Bound : 任意
>类型别名 :=> 任意
>SymbolFlags : 任意
>类型别名 :=> 任意
>Bound : 任意
>类型别名 :=> 任意

                        // Since type collection happens out of order, a dynamic module referenced by an import statement
                        // may not yet be in scope when the import symbol is created.  In that case, we need to search
                        // out the module symbol now
                        // Note that we'll also want to do this in resolveTypeMembers, in case the symbol is set outside the
                        // context of a given module  (E.g., an outer import statement)
                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name) {
>typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name : 真假
>类型别名 :=> 真假
>typeSymbol.aliasLink && !typeSymbol.type : 真假
>类型别名 :=> 真假
>typeSymbol.aliasLink : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>aliasLink : 任意
>类型别名 :=> 任意
>!typeSymbol.type : 真假
>类型别名 :=> 真假
>typeSymbol.type : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>typeSymbol.aliasLink.alias.nodeType == NodeType.Name : 真假
>类型别名 :=> 真假
>typeSymbol.aliasLink.alias.nodeType : 任意
>类型别名 :=> 任意
>typeSymbol.aliasLink.alias : 任意
>类型别名 :=> 任意
>typeSymbol.aliasLink : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>aliasLink : 任意
>类型别名 :=> 任意
>alias : 任意
>类型别名 :=> 任意
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Name : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Name : 任意
>类型别名 :=> 任意

                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;
>modPath : 任意
>类型别名 :=> 任意
>(<Identifier>typeSymbol.aliasLink.alias).text : 任意
>类型别名 :=> 任意
>(<Identifier>typeSymbol.aliasLink.alias) : 任意
>类型别名 :=> 任意
><Identifier>typeSymbol.aliasLink.alias : 任意
>类型别名 :=> 任意
>Identifier : No type information available!
>typeSymbol.aliasLink.alias : 任意
>类型别名 :=> 任意
>typeSymbol.aliasLink : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>aliasLink : 任意
>类型别名 :=> 任意
>alias : 任意
>类型别名 :=> 任意
>text : 任意
>类型别名 :=> 任意

                            var modSym = this.checker.findSymbolForDynamicModule(modPath, this.checker.locationInfo.filename, (id) => scope.find(id, false, true));
>modSym : 任意
>类型别名 :=> 任意
>this.checker.findSymbolForDynamicModule(modPath, this.checker.locationInfo.filename, (id) => scope.find(id, false, true)) : 任意
>类型别名 :=> 任意
>this.checker.findSymbolForDynamicModule : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>findSymbolForDynamicModule : 任意
>类型别名 :=> 任意
>modPath : 任意
>类型别名 :=> 任意
>this.checker.locationInfo.filename : 任意
>类型别名 :=> 任意
>this.checker.locationInfo : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>locationInfo : 任意
>类型别名 :=> 任意
>filename : 任意
>类型别名 :=> 任意
>(id) => scope.find(id, false, true) : (id: 任意) => 任意
>id : 任意
>类型别名 :=> 任意
>scope.find(id, false, true) : 任意
>类型别名 :=> 任意
>scope.find : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>find : 任意
>类型别名 :=> 任意
>id : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真

                            if (modSym) {
>modSym : 任意
>类型别名 :=> 任意

                                typeSymbol.type = modSym.getType();
>typeSymbol.type = modSym.getType() : 任意
>类型别名 :=> 任意
>typeSymbol.type : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>modSym.getType() : 任意
>类型别名 :=> 任意
>modSym.getType : 任意
>类型别名 :=> 任意
>modSym : 任意
>类型别名 :=> 任意
>getType : 任意
>类型别名 :=> 任意
                            }
                        }

                        if (typeSymbol.type && typeSymbol.type != this.checker.gloModType) {
>typeSymbol.type && typeSymbol.type != this.checker.gloModType : 真假
>类型别名 :=> 真假
>typeSymbol.type : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>typeSymbol.type != this.checker.gloModType : 真假
>类型别名 :=> 真假
>typeSymbol.type : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>this.checker.gloModType : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>gloModType : 任意
>类型别名 :=> 任意

                            this.bindType(scope, typeSymbol.type, typeSymbol.instanceType);
>this.bindType(scope, typeSymbol.type, typeSymbol.instanceType) : 无值
>类型别名 :=> 无值
>this.bindType : (scope: 任意, type: 任意, instanceType: 任意) => 无值
>this : 本体
>bindType : (scope: 任意, type: 任意, instanceType: 任意) => 无值
>scope : 任意
>类型别名 :=> 任意
>typeSymbol.type : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>typeSymbol.instanceType : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>instanceType : 任意
>类型别名 :=> 任意

                            // bind expansions on the parent type symbol
                            if (typeSymbol.type.isModuleType()) {
>typeSymbol.type.isModuleType() : 任意
>类型别名 :=> 任意
>typeSymbol.type.isModuleType : 任意
>类型别名 :=> 任意
>typeSymbol.type : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>isModuleType : 任意
>类型别名 :=> 任意

                                for (var i = 0; i < typeSymbol.expansions.length; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < typeSymbol.expansions.length : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>typeSymbol.expansions.length : 任意
>类型别名 :=> 任意
>typeSymbol.expansions : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>expansions : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                                    this.bindType(scope, typeSymbol.expansions[i], typeSymbol.instanceType);
>this.bindType(scope, typeSymbol.expansions[i], typeSymbol.instanceType) : 无值
>类型别名 :=> 无值
>this.bindType : (scope: 任意, type: 任意, instanceType: 任意) => 无值
>this : 本体
>bindType : (scope: 任意, type: 任意, instanceType: 任意) => 无值
>scope : 任意
>类型别名 :=> 任意
>typeSymbol.expansions[i] : 任意
>类型别名 :=> 任意
>typeSymbol.expansions : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>expansions : 任意
>类型别名 :=> 任意
>i : 数字
>类型别名 :=> 数字
>typeSymbol.instanceType : 任意
>类型别名 :=> 任意
>typeSymbol : 任意
>类型别名 :=> 任意
>instanceType : 任意
>类型别名 :=> 任意
                                }
                            }
                        }
                        break;
                    case SymbolKind.Field:
>SymbolKind.Field : 任意
>类型别名 :=> 任意
>SymbolKind : 任意
>类型别名 :=> 任意
>Field : 任意
>类型别名 :=> 任意

                        this.checker.resolveTypeLink(scope, (<FieldSymbol>symbol).field.typeLink,
>this.checker.resolveTypeLink(scope, (<FieldSymbol>symbol).field.typeLink,                                                false) : 任意
>类型别名 :=> 任意
>this.checker.resolveTypeLink : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>resolveTypeLink : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>(<FieldSymbol>symbol).field.typeLink : 任意
>类型别名 :=> 任意
>(<FieldSymbol>symbol).field : 任意
>类型别名 :=> 任意
>(<FieldSymbol>symbol) : 任意
>类型别名 :=> 任意
><FieldSymbol>symbol : 任意
>类型别名 :=> 任意
>FieldSymbol : No type information available!
>symbol : 任意
>类型别名 :=> 任意
>field : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意

                                                false);
>false : 为假
>类型别名 :=> 为假

                        break;
                    case SymbolKind.Parameter:
>SymbolKind.Parameter : 任意
>类型别名 :=> 任意
>SymbolKind : 任意
>类型别名 :=> 任意
>Parameter : 任意
>类型别名 :=> 任意

                        this.checker.resolveTypeLink(scope,
>this.checker.resolveTypeLink(scope,                                                (<ParameterSymbol>symbol).parameter.typeLink,                                                true) : 任意
>类型别名 :=> 任意
>this.checker.resolveTypeLink : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>resolveTypeLink : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意

                                                (<ParameterSymbol>symbol).parameter.typeLink,
>(<ParameterSymbol>symbol).parameter.typeLink : 任意
>类型别名 :=> 任意
>(<ParameterSymbol>symbol).parameter : 任意
>类型别名 :=> 任意
>(<ParameterSymbol>symbol) : 任意
>类型别名 :=> 任意
><ParameterSymbol>symbol : 任意
>类型别名 :=> 任意
>ParameterSymbol : No type information available!
>symbol : 任意
>类型别名 :=> 任意
>parameter : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意

                                                true);
>true : 为真
>类型别名 :=> 为真

                        break;
                }
                this.checker.locationInfo = prevLocationInfo;
>this.checker.locationInfo = prevLocationInfo : 任意
>类型别名 :=> 任意
>this.checker.locationInfo : 任意
>类型别名 :=> 任意
>this.checker : 任意
>类型别名 :=> 任意
>this : 本体
>checker : 任意
>类型别名 :=> 任意
>locationInfo : 任意
>类型别名 :=> 任意
>prevLocationInfo : 任意
>类型别名 :=> 任意
            }
            symbol.bound = true;
>symbol.bound = true : 为真
>类型别名 :=> 为真
>symbol.bound : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>bound : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
        }

        public bind(scope: SymbolScope, table: IHashTable) {
>bind : (scope: 任意, table: 任意) => 无值
>scope : 任意
>类型别名 :=> 任意
>SymbolScope : No type information available!
>table : 任意
>类型别名 :=> 任意
>IHashTable : No type information available!

            table.map(
>table.map(                (key, sym, binder) => {                    binder.bindSymbol(scope, sym);                },                this) : 任意
>类型别名 :=> 任意
>table.map : 任意
>类型别名 :=> 任意
>table : 任意
>类型别名 :=> 任意
>map : 任意
>类型别名 :=> 任意

                (key, sym, binder) => {
>(key, sym, binder) => {                    binder.bindSymbol(scope, sym);                } : (key: 任意, sym: 任意, binder: 任意) => 无值
>key : 任意
>类型别名 :=> 任意
>sym : 任意
>类型别名 :=> 任意
>binder : 任意
>类型别名 :=> 任意

                    binder.bindSymbol(scope, sym);
>binder.bindSymbol(scope, sym) : 任意
>类型别名 :=> 任意
>binder.bindSymbol : 任意
>类型别名 :=> 任意
>binder : 任意
>类型别名 :=> 任意
>bindSymbol : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>sym : 任意
>类型别名 :=> 任意

                },
                this);
>this : 本体
        }
    }

}
