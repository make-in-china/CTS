=== tests/cases/compiler/typeName1.ts ===
interface I {
>I : I

    k;
>k : 任意
>类型别名 :=> 任意
}
class C {
>C : C

    public eek:string;
>eek : 文字
>类型别名 :=> 文字

    static zeek:number;
>zeek : 数字
>类型别名 :=> 数字
}

var x1:{ f(s:string):number;f(n:number):string; }=3;
>x1 : { f(s: 文字): 数字; f(n: 数字): 文字; }
>f : { (s: 文字): 数字; (n: 数字): 文字; }
>s : 文字
>类型别名 :=> 文字
>f : { (s: 文字): 数字; (n: 数字): 文字; }
>n : 数字
>类型别名 :=> 数字
>3 : 3

var x2:{ f(s:string):number; } =3;
>x2 : { f(s: 文字): 数字; }
>f : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>3 : 3

var x3:{ (s:string):number;(n:number):string; }=3;
>x3 : { (s: 文字): 数字; (n: 数字): 文字; }
>s : 文字
>类型别名 :=> 文字
>n : 数字
>类型别名 :=> 数字
>3 : 3

var x4:{ x;y;z:number;f(n:number):string;f(s:string):number; }=3;
>x4 : { x: 任意; y: 任意; z: 数字; f(n: 数字): 文字; f(s: 文字): 数字; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 数字
>类型别名 :=> 数字
>f : { (n: 数字): 文字; (s: 文字): 数字; }
>n : 数字
>类型别名 :=> 数字
>f : { (n: 数字): 文字; (s: 文字): 数字; }
>s : 文字
>类型别名 :=> 文字
>3 : 3

var x5:{ (s:string):number;(n:number):string;x;y;z:number;f(n:number):string;f(s:string):number; }=3;
>x5 : { (s: 文字): 数字; (n: 数字): 文字; x: 任意; y: 任意; z: 数字; f(n: 数字): 文字; f(s: 文字): 数字; }
>s : 文字
>类型别名 :=> 文字
>n : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 数字
>类型别名 :=> 数字
>f : { (n: 数字): 文字; (s: 文字): 数字; }
>n : 数字
>类型别名 :=> 数字
>f : { (n: 数字): 文字; (s: 文字): 数字; }
>s : 文字
>类型别名 :=> 文字
>3 : 3

var x6:{ z:number;f:{(n:number):string;(s:string):number;}; }=3;
>x6 : { z: 数字; f: { (n: 数字): 文字; (s: 文字): 数字; }; }
>z : 数字
>类型别名 :=> 数字
>f : { (n: 数字): 文字; (s: 文字): 数字; }
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>3 : 3

var x7:(s:string)=>boolean=3;
>x7 : (s: 文字) => 真假
>s : 文字
>类型别名 :=> 文字
>3 : 3

var x8:{ z:I;[s:string]:{ x; y; };[n:number]:{x; y;};():boolean; }=3;
>x8 : { (): 真假; [s: 文字]: { x: 任意; y: 任意; }; [n: 数字]: { x: 任意; y: 任意; }; z: I; }
>z : I
>I : I
>s : 文字
>类型别名 :=> 文字
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>n : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>3 : 3

var x9:I=3;
>x9 : I
>I : I
>3 : 3

var x10:I[][][][]=3;
>x10 : I[][][][]
>I : I
>3 : 3

var x11:{z:I;x:boolean;}[][]=3;
>x11 : { z: I; x: 真假; }[][]
>z : I
>I : I
>x : 真假
>类型别名 :=> 真假
>3 : 3

var x12:{z:I;x:boolean;y:(s:string)=>boolean;w:{ z:I;[s:string]:{ x; y; };[n:number]:{x; y;};():boolean; };}[][]=3;
>x12 : { z: I; x: 真假; y: (s: 文字) => 真假; w: { (): 真假; [s: 文字]: { x: 任意; y: 任意; }; [n: 数字]: { x: 任意; y: 任意; }; z: I; }; }[][]
>z : I
>I : I
>x : 真假
>类型别名 :=> 真假
>y : (s: 文字) => 真假
>s : 文字
>类型别名 :=> 文字
>w : { (): 真假; [s: 文字]: { x: 任意; y: 任意; }; [n: 数字]: { x: 任意; y: 任意; }; z: I; }
>z : I
>I : I
>s : 文字
>类型别名 :=> 文字
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>n : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>3 : 3

var x13:{ new(): number; new(n:number):number; x: string; w: {y: number;}; (): {}; } = 3;
>x13 : { (): {}; 新建 (): 数字; 新建 (n: 数字): 数字; x: 文字; w: { y: 数字; }; }
>n : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>w : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>3 : 3

var x14:{ f(x:number):boolean; p; q; ():string; }=3;
>x14 : { (): 文字; f(x: 数字): 真假; p: 任意; q: 任意; }
>f : (x: 数字) => 真假
>x : 数字
>类型别名 :=> 数字
>p : 任意
>类型别名 :=> 任意
>q : 任意
>类型别名 :=> 任意
>3 : 3

var x15:number=C;
>x15 : 数字
>类型别名 :=> 数字
>C : 类为 C




