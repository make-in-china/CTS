=== tests/cases/compiler/asyncFunctionReturnType.ts ===
async function fAsync() {
>fAsync : () => Promise<(number | boolean)[]>

    // Without explicit type annotation, this is just an array.
    return [1, true];
>[1, true] : (number | boolean)[]
>1 : 1
>true : true
>类型别名 :=> 为真
}

async function fAsyncExplicit(): Promise<[number, boolean]> {
>fAsyncExplicit : () => Promise<[number, boolean]>
>Promise : Promise<T>

    // This is contextually typed as a tuple.
    return [1, true];
>[1, true] : [number, true]
>1 : 1
>true : true
>类型别名 :=> 为真
}

// https://github.com/Microsoft/TypeScript/issues/13128
interface Obj {
>Obj : Obj

    stringProp: string;
>stringProp : string
>类型别名 :=> 文字

    anyProp: any;
>anyProp : any
>类型别名 :=> 任意
}

async function fIndexedTypeForStringProp(obj: Obj): Promise<Obj["stringProp"]> {
>fIndexedTypeForStringProp : (obj: Obj) => Promise<string>
>obj : Obj
>Obj : Obj
>Promise : Promise<T>
>Obj : Obj

    return obj.stringProp;
>obj.stringProp : string
>类型别名 :=> 文字
>obj : Obj
>stringProp : string
>类型别名 :=> 文字
}

async function fIndexedTypeForPromiseOfStringProp(obj: Obj): Promise<Obj["stringProp"]> {
>fIndexedTypeForPromiseOfStringProp : (obj: Obj) => Promise<string>
>obj : Obj
>Obj : Obj
>Promise : Promise<T>
>Obj : Obj

    return Promise.resolve(obj.stringProp);
>Promise.resolve(obj.stringProp) : Promise<string>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>obj.stringProp : string
>类型别名 :=> 文字
>obj : Obj
>stringProp : string
>类型别名 :=> 文字
}

async function fIndexedTypeForExplicitPromiseOfStringProp(obj: Obj): Promise<Obj["stringProp"]> {
>fIndexedTypeForExplicitPromiseOfStringProp : (obj: Obj) => Promise<string>
>obj : Obj
>Obj : Obj
>Promise : Promise<T>
>Obj : Obj

    return Promise.resolve<Obj["stringProp"]>(obj.stringProp);
>Promise.resolve<Obj["stringProp"]>(obj.stringProp) : Promise<string>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Obj : Obj
>obj.stringProp : string
>类型别名 :=> 文字
>obj : Obj
>stringProp : string
>类型别名 :=> 文字
}

async function fIndexedTypeForAnyProp(obj: Obj): Promise<Obj["anyProp"]> {
>fIndexedTypeForAnyProp : (obj: Obj) => Promise<any>
>obj : Obj
>Obj : Obj
>Promise : Promise<T>
>Obj : Obj

    return obj.anyProp;
>obj.anyProp : any
>类型别名 :=> 任意
>obj : Obj
>anyProp : any
>类型别名 :=> 任意
}

async function fIndexedTypeForPromiseOfAnyProp(obj: Obj): Promise<Obj["anyProp"]> {
>fIndexedTypeForPromiseOfAnyProp : (obj: Obj) => Promise<any>
>obj : Obj
>Obj : Obj
>Promise : Promise<T>
>Obj : Obj

    return Promise.resolve(obj.anyProp);
>Promise.resolve(obj.anyProp) : Promise<any>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>obj.anyProp : any
>类型别名 :=> 任意
>obj : Obj
>anyProp : any
>类型别名 :=> 任意
}

async function fIndexedTypeForExplicitPromiseOfAnyProp(obj: Obj): Promise<Obj["anyProp"]> {
>fIndexedTypeForExplicitPromiseOfAnyProp : (obj: Obj) => Promise<any>
>obj : Obj
>Obj : Obj
>Promise : Promise<T>
>Obj : Obj

    return Promise.resolve<Obj["anyProp"]>(obj.anyProp);
>Promise.resolve<Obj["anyProp"]>(obj.anyProp) : Promise<any>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Obj : Obj
>obj.anyProp : any
>类型别名 :=> 任意
>obj : Obj
>anyProp : any
>类型别名 :=> 任意
}

async function fGenericIndexedTypeForStringProp<TObj extends Obj>(obj: TObj): Promise<TObj["stringProp"]> {
>fGenericIndexedTypeForStringProp : <TObj extends Obj>(obj: TObj) => Promise<TObj["stringProp"]>
>TObj : TObj
>Obj : Obj
>obj : TObj
>TObj : TObj
>Promise : Promise<T>
>TObj : TObj

    return obj.stringProp;
>obj.stringProp : string
>类型别名 :=> 文字
>obj : TObj
>stringProp : string
>类型别名 :=> 文字
}

async function fGenericIndexedTypeForPromiseOfStringProp<TObj extends Obj>(obj: TObj): Promise<TObj["stringProp"]> {
>fGenericIndexedTypeForPromiseOfStringProp : <TObj extends Obj>(obj: TObj) => Promise<TObj["stringProp"]>
>TObj : TObj
>Obj : Obj
>obj : TObj
>TObj : TObj
>Promise : Promise<T>
>TObj : TObj

    return Promise.resolve(obj.stringProp);
>Promise.resolve(obj.stringProp) : Promise<string>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>obj.stringProp : string
>类型别名 :=> 文字
>obj : TObj
>stringProp : string
>类型别名 :=> 文字
}

async function fGenericIndexedTypeForExplicitPromiseOfStringProp<TObj extends Obj>(obj: TObj): Promise<TObj["stringProp"]> {
>fGenericIndexedTypeForExplicitPromiseOfStringProp : <TObj extends Obj>(obj: TObj) => Promise<TObj["stringProp"]>
>TObj : TObj
>Obj : Obj
>obj : TObj
>TObj : TObj
>Promise : Promise<T>
>TObj : TObj

    return Promise.resolve<TObj["stringProp"]>(obj.stringProp);
>Promise.resolve<TObj["stringProp"]>(obj.stringProp) : Promise<TObj["stringProp"]>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>TObj : TObj
>obj.stringProp : string
>类型别名 :=> 文字
>obj : TObj
>stringProp : string
>类型别名 :=> 文字
}

async function fGenericIndexedTypeForAnyProp<TObj extends Obj>(obj: TObj): Promise<TObj["anyProp"]> {
>fGenericIndexedTypeForAnyProp : <TObj extends Obj>(obj: TObj) => Promise<TObj["anyProp"]>
>TObj : TObj
>Obj : Obj
>obj : TObj
>TObj : TObj
>Promise : Promise<T>
>TObj : TObj

    return obj.anyProp;
>obj.anyProp : any
>类型别名 :=> 任意
>obj : TObj
>anyProp : any
>类型别名 :=> 任意
}

async function fGenericIndexedTypeForPromiseOfAnyProp<TObj extends Obj>(obj: TObj): Promise<TObj["anyProp"]> {
>fGenericIndexedTypeForPromiseOfAnyProp : <TObj extends Obj>(obj: TObj) => Promise<TObj["anyProp"]>
>TObj : TObj
>Obj : Obj
>obj : TObj
>TObj : TObj
>Promise : Promise<T>
>TObj : TObj

    return Promise.resolve(obj.anyProp);
>Promise.resolve(obj.anyProp) : Promise<any>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>obj.anyProp : any
>类型别名 :=> 任意
>obj : TObj
>anyProp : any
>类型别名 :=> 任意
}

async function fGenericIndexedTypeForExplicitPromiseOfAnyProp<TObj extends Obj>(obj: TObj): Promise<TObj["anyProp"]> {
>fGenericIndexedTypeForExplicitPromiseOfAnyProp : <TObj extends Obj>(obj: TObj) => Promise<TObj["anyProp"]>
>TObj : TObj
>Obj : Obj
>obj : TObj
>TObj : TObj
>Promise : Promise<T>
>TObj : TObj

    return Promise.resolve<TObj["anyProp"]>(obj.anyProp);
>Promise.resolve<TObj["anyProp"]>(obj.anyProp) : Promise<TObj["anyProp"]>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>TObj : TObj
>obj.anyProp : any
>类型别名 :=> 任意
>obj : TObj
>anyProp : any
>类型别名 :=> 任意
}

async function fGenericIndexedTypeForKProp<TObj extends Obj, K extends keyof TObj>(obj: TObj, key: K): Promise<TObj[K]> {
>fGenericIndexedTypeForKProp : <TObj extends Obj, K extends keyof TObj>(obj: TObj, key: K) => Promise<TObj[K]>
>TObj : TObj
>Obj : Obj
>K : K
>TObj : TObj
>obj : TObj
>TObj : TObj
>key : K
>K : K
>Promise : Promise<T>
>TObj : TObj
>K : K

    return obj[key];
>obj[key] : TObj[K]
>obj : TObj
>key : K
}

async function fGenericIndexedTypeForPromiseOfKProp<TObj extends Obj, K extends keyof TObj>(obj: TObj, key: K): Promise<TObj[K]> {
>fGenericIndexedTypeForPromiseOfKProp : <TObj extends Obj, K extends keyof TObj>(obj: TObj, key: K) => Promise<TObj[K]>
>TObj : TObj
>Obj : Obj
>K : K
>TObj : TObj
>obj : TObj
>TObj : TObj
>key : K
>K : K
>Promise : Promise<T>
>TObj : TObj
>K : K

    return Promise.resolve(obj[key]);
>Promise.resolve(obj[key]) : Promise<TObj[K]>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>obj[key] : TObj[K]
>obj : TObj
>key : K
}

async function fGenericIndexedTypeForExplicitPromiseOfKProp<TObj extends Obj, K extends keyof TObj>(obj: TObj, key: K): Promise<TObj[K]> {
>fGenericIndexedTypeForExplicitPromiseOfKProp : <TObj extends Obj, K extends keyof TObj>(obj: TObj, key: K) => Promise<TObj[K]>
>TObj : TObj
>Obj : Obj
>K : K
>TObj : TObj
>obj : TObj
>TObj : TObj
>key : K
>K : K
>Promise : Promise<T>
>TObj : TObj
>K : K

    return Promise.resolve<TObj[K]>(obj[key]);
>Promise.resolve<TObj[K]>(obj[key]) : Promise<TObj[K]>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>TObj : TObj
>K : K
>obj[key] : TObj[K]
>obj : TObj
>key : K
}
