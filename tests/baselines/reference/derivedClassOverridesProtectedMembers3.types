=== tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesProtectedMembers3.ts ===
var x: { foo: string; }
>x : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字

var y: { foo: string; bar: string; }
>y : { foo: 文字; bar: 文字; }
>foo : 文字
>类型别名 :=> 文字
>bar : 文字
>类型别名 :=> 文字

class Base {
>Base : Base

    a: typeof x;
>a : { foo: 文字; }
>x : { foo: 文字; }

    b(a: typeof x) { }
>b : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    get c() { return x; }
>c : { foo: 文字; }
>x : { foo: 文字; }

    set c(v: typeof x) { }
>c : { foo: 文字; }
>v : { foo: 文字; }
>x : { foo: 文字; }

    d: (a: typeof x) => void;
>d : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    static r: typeof x;
>r : { foo: 文字; }
>x : { foo: 文字; }

    static s(a: typeof x) { }
>s : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    static get t() { return x; }
>t : { foo: 文字; }
>x : { foo: 文字; }

    static set t(v: typeof x) { }
>t : { foo: 文字; }
>v : { foo: 文字; }
>x : { foo: 文字; }

    static u: (a: typeof x) => void;
>u : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) {}
>a : { foo: 文字; }
>x : { foo: 文字; }
}

// Errors
// decrease visibility of all public members to protected
class Derived1 extends Base {
>Derived1 : Derived1
>Base : Base

    protected a: typeof x;
>a : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { super(a); }
>a : { foo: 文字; }
>x : { foo: 文字; }
>super(a) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>a : { foo: 文字; }
}

class Derived2 extends Base {
>Derived2 : Derived2
>Base : Base

    protected b(a: typeof x) { }
>b : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { super(a); }
>a : { foo: 文字; }
>x : { foo: 文字; }
>super(a) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>a : { foo: 文字; }
}

class Derived3 extends Base {
>Derived3 : Derived3
>Base : Base

    protected get c() { return x; }
>c : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { super(a); }
>a : { foo: 文字; }
>x : { foo: 文字; }
>super(a) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>a : { foo: 文字; }
}

class Derived4 extends Base {
>Derived4 : Derived4
>Base : Base

    protected set c(v: typeof x) { }
>c : { foo: 文字; }
>v : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { super(a); }
>a : { foo: 文字; }
>x : { foo: 文字; }
>super(a) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>a : { foo: 文字; }
}

class Derived5 extends Base {
>Derived5 : Derived5
>Base : Base

    protected d: (a: typeof x) => void ;
>d : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { super(a); }
>a : { foo: 文字; }
>x : { foo: 文字; }
>super(a) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>a : { foo: 文字; }
}

class Derived6 extends Base {
>Derived6 : Derived6
>Base : Base

    protected static r: typeof x;
>r : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { super(a); }
>a : { foo: 文字; }
>x : { foo: 文字; }
>super(a) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>a : { foo: 文字; }
}

class Derived7 extends Base {
>Derived7 : Derived7
>Base : Base

    protected static s(a: typeof x) { }
>s : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { super(a); }
>a : { foo: 文字; }
>x : { foo: 文字; }
>super(a) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>a : { foo: 文字; }
}

class Derived8 extends Base {
>Derived8 : Derived8
>Base : Base

    protected static get t() { return x; }
>t : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { super(a); }
>a : { foo: 文字; }
>x : { foo: 文字; }
>super(a) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>a : { foo: 文字; }
}

class Derived9 extends Base {
>Derived9 : Derived9
>Base : Base

    protected static set t(v: typeof x) { }
>t : { foo: 文字; }
>v : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { super(a); }
>a : { foo: 文字; }
>x : { foo: 文字; }
>super(a) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>a : { foo: 文字; }
}

class Derived10 extends Base {
>Derived10 : Derived10
>Base : Base

    protected static u: (a: typeof x) => void ;
>u : (a: { foo: 文字; }) => 无值
>a : { foo: 文字; }
>x : { foo: 文字; }

    constructor(a: typeof x) { super(a); }
>a : { foo: 文字; }
>x : { foo: 文字; }
>super(a) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>a : { foo: 文字; }
}
