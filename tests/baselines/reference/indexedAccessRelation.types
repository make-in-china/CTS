=== tests/cases/compiler/indexedAccessRelation.ts ===
// Repro from #14723

class Component<S> {
>Component : Component<S>
>S : S

    setState<K extends keyof S>(state: Pick<S, K>) {}
>setState : <K 扩展 键集 S>(state: Pick<S, K>) => 无值
>K : K
>S : S
>state : Pick<S, K>
>Pick : Pick<T, K>
>S : S
>K : K
}

export interface State<T> {
>State : State<T>
>T : T

    a?: T;
>a : T
>T : T
}

class Foo {}
>Foo : Foo

class Comp<T extends Foo, S> extends Component<S & State<T>>
>Comp : Comp<T, S>
>T : T
>Foo : Foo
>S : S
>Component : Component<S & State<T>>
>S : S
>State : State<T>
>T : T
{
    foo(a: T) {
>foo : (a: T) => 无值
>a : T
>T : T

        this.setState({ a: a });
>this.setState({ a: a }) : 无值
>类型别名 :=> 无值
>this.setState : <K 扩展 键集 (S & State<T>)>(state: Pick<S & State<T>, K>) => 无值
>this : 本体
>setState : <K 扩展 键集 (S & State<T>)>(state: Pick<S & State<T>, K>) => 无值
>{ a: a } : { a: T; }
>a : T
>a : T
    }
}

