=== tests/cases/compiler/super.ts ===
class Base {
>Base : Base

    constructor() {
        var x;
>x : any
>类型别名 :=> 任意
    }
    public foo() {
>foo : () => string

        return "base";
>"base" : "base"
    }

    public bar() {
>bar : () => string

        return "basebar";
>"basebar" : "basebar"
    }
}

class Sub1 extends Base {
>Sub1 : Sub1
>Base : Base

    public foo() {
>foo : () => string

        return "sub1" + super.foo() + super.bar();
>"sub1" + super.foo() + super.bar() : string
>类型别名 :=> 文字
>"sub1" + super.foo() : string
>类型别名 :=> 文字
>"sub1" : "sub1"
>super.foo() : string
>类型别名 :=> 文字
>super.foo : () => string
>super : Base
>foo : () => string
>super.bar() : string
>类型别名 :=> 文字
>super.bar : () => string
>super : Base
>bar : () => string
    }
}


class SubSub1 extends Sub1 {
>SubSub1 : SubSub1
>Sub1 : Sub1

    public foo() {
>foo : () => string

        return "subsub1" + super.foo();
>"subsub1" + super.foo() : string
>类型别名 :=> 文字
>"subsub1" : "subsub1"
>super.foo() : string
>类型别名 :=> 文字
>super.foo : () => string
>super : Sub1
>foo : () => string
    }
}

class Base2 {
>Base2 : Base2

    public foo() {
>foo : () => void

        super.foo();
>super.foo() : any
>类型别名 :=> 任意
>super.foo : any
>类型别名 :=> 任意
>super : any
>类型别名 :=> 任意
>foo : any
>类型别名 :=> 任意
    }
}

var s = new Sub1();
>s : Sub1
>new Sub1() : Sub1
>Sub1 : typeof Sub1

var ss = new SubSub1();
>ss : SubSub1
>new SubSub1() : SubSub1
>SubSub1 : typeof SubSub1

s.foo() + ss.foo();
>s.foo() + ss.foo() : string
>类型别名 :=> 文字
>s.foo() : string
>类型别名 :=> 文字
>s.foo : () => string
>s : Sub1
>foo : () => string
>ss.foo() : string
>类型别名 :=> 文字
>ss.foo : () => string
>ss : SubSub1
>foo : () => string


