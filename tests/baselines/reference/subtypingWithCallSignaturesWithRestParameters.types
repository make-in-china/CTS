=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignaturesWithRestParameters.ts ===
// call signatures in derived types must have the same or fewer optional parameters as the base type

interface Base { 
>Base : Base

    a: (...args: number[]) => number;
>a : (...args: 数字[]) => 数字
>args : 数字[]

    a2: (x: number, ...z: number[]) => number;
>a2 : (x: 数字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>z : 数字[]

    a3: (x: number, y?: string, ...z: number[]) => number;
>a3 : (x: 数字, y?: 文字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>z : 数字[]

    a4: (x?: number, y?: string, ...z: number[]) => number;
>a4 : (x?: 数字, y?: 文字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>z : 数字[]
}

interface I1 extends Base {
>I1 : I1
>Base : Base

    a: () => number; // ok, same number of required params
>a : () => 数字
}

interface I1B extends Base {
>I1B : I1B
>Base : Base

    a: (...args: number[]) => number; // ok, same number of required params
>a : (...args: 数字[]) => 数字
>args : 数字[]
}

interface I1C extends Base {
>I1C : I1C
>Base : Base

    a: (...args: string[]) => number; // error, type mismatch
>a : (...args: 文字[]) => 数字
>args : 文字[]
}

interface I2 extends Base {
>I2 : I2
>Base : Base

    a: (x?: number) => number; // ok, same number of required params
>a : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
}

interface I2B extends Base {
>I2B : I2B
>Base : Base

    a: (x?: number, y?: number, z?: number) => number; // ok, same number of required params
>a : (x?: 数字, y?: 数字, z?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
}

interface I3 extends Base {
>I3 : I3
>Base : Base

    a: (x: number) => number; // ok, all present params match
>a : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
}

interface I3B extends Base {
>I3B : I3B
>Base : Base

    a: (x?: string) => number; // error, incompatible type
>a : (x?: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
}



interface I4 extends Base {
>I4 : I4
>Base : Base

    a2: () => number; // ok, fewer required params
>a2 : () => 数字
}

interface I4B extends Base {
>I4B : I4B
>Base : Base

    a2: (...args: number[]) => number; // ok, fewer required params
>a2 : (...args: 数字[]) => 数字
>args : 数字[]
}

interface I5 extends Base {
>I5 : I5
>Base : Base

    a2: (x?: number) => number; // ok, fewer required params
>a2 : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
}

interface I6 extends Base {
>I6 : I6
>Base : Base

    a2: (x: number) => number; // ok, same number of required params
>a2 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
}

interface I6B extends Base {
>I6B : I6B
>Base : Base

    a2: (x: number, ...args: number[]) => number; // ok, same number of required params
>a2 : (x: 数字, ...args: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>args : 数字[]
}

interface I6C extends Base {
>I6C : I6C
>Base : Base

    a2: (x: number, ...args: string[]) => number; // error
>a2 : (x: 数字, ...args: 文字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>args : 文字[]
}

interface I6D extends Base {
>I6D : I6D
>Base : Base

    a2: (x: number, y: number) => number; // ok, all present params match
>a2 : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
}

interface I6E extends Base {
>I6E : I6E
>Base : Base

    a2: (x: number, y?: number) => number; // ok, same number of required params
>a2 : (x: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
}



interface I7 extends Base {
>I7 : I7
>Base : Base

    a3: () => number; // ok, fewer required params
>a3 : () => 数字
}

interface I8 extends Base {
>I8 : I8
>Base : Base

    a3: (x?: number) => number; // ok, fewer required params
>a3 : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
}

interface I9 extends Base {
>I9 : I9
>Base : Base

    a3: (x: number) => number; // ok, same number of required params
>a3 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
}

interface I10 extends Base {
>I10 : I10
>Base : Base

    a3: (x: number, y: string) => number;  // ok, all present params match
>a3 : (x: 数字, y: 文字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
}

interface I10B extends Base {
>I10B : I10B
>Base : Base

    a3: (x: number, y?: number, z?: number) => number;  // error
>a3 : (x: 数字, y?: 数字, z?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
}

interface I10C extends Base {
>I10C : I10C
>Base : Base

    a3: (x: number, ...z: number[]) => number;  // error
>a3 : (x: 数字, ...z: 数字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>z : 数字[]
}

interface I10D extends Base {
>I10D : I10D
>Base : Base

    a3: (x: string, y?: string, z?: string) => number;  // error, incompatible types
>a3 : (x: 文字, y?: 文字, z?: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>y : 文字
>类型别名 :=> 文字
>z : 文字
>类型别名 :=> 文字
}

interface I10E extends Base {
>I10E : I10E
>Base : Base

    a3: (x: number, ...z: string[]) => number;  // error
>a3 : (x: 数字, ...z: 文字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>z : 文字[]
}

interface I11 extends Base {
>I11 : I11
>Base : Base

    a4: () => number; // ok, fewer required params
>a4 : () => 数字
}

interface I12 extends Base {
>I12 : I12
>Base : Base

    a4: (x?: number, y?: number) => number; // error, type mismatch
>a4 : (x?: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
}

interface I13 extends Base {
>I13 : I13
>Base : Base

    a4: (x: number) => number; // ok, all present params match
>a4 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
}

interface I14 extends Base {
>I14 : I14
>Base : Base

    a4: (x: number, y?: number) => number;  // error, second param has type mismatch
>a4 : (x: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
}

interface I15 extends Base {
>I15 : I15
>Base : Base

    a4: (x?: number, y?: string) => number;  // ok, same number of required params with matching types
>a4 : (x?: 数字, y?: 文字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
}

interface I16 extends Base {
>I16 : I16
>Base : Base

    a4: (x: number, ...args: string[]) => number;  // error, rest param has type mismatch
>a4 : (x: 数字, ...args: 文字[]) => 数字
>x : 数字
>类型别名 :=> 数字
>args : 文字[]
}

interface I17 extends Base {
>I17 : I17
>Base : Base

    a4: (...args: number[]) => number; // error
>a4 : (...args: 数字[]) => 数字
>args : 数字[]
}

