=== tests/cases/conformance/types/specifyingTypes/typeQueries/typeofANonExportedType.ts ===
var x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

export var r1: typeof x;
>r1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

var y = { foo: '' };
>y : { foo: string; }
>{ foo: '' } : { foo: string; }
>foo : string
>类型别名 :=> 文字
>'' : ""

export var r2: typeof y;
>r2 : { foo: string; }
>y : { foo: string; }

class C {
>C : C

    foo: string;
>foo : string
>类型别名 :=> 文字
}
export var c: C;
>c : C
>C : C

var c2: C;
>c2 : C
>C : C

export var r3: typeof C;
>r3 : typeof C
>C : typeof C

export var r4: typeof c;
>r4 : C
>c : C

export var r4b: typeof c2;
>r4b : C
>c2 : C

interface I {
>I : I

    foo: string;
>foo : string
>类型别名 :=> 文字
}
export var i: I;
>i : I
>I : I

var i2: I;
>i2 : I
>I : I

export var r5: typeof i;
>r5 : I
>i : I

export var r5: typeof i2;
>r5 : I
>i2 : I

module M {
>M : typeof M

    export var foo = '';
>foo : string
>类型别名 :=> 文字
>'' : ""

    export class C {
>C : C

        foo: string;
>foo : string
>类型别名 :=> 文字
    }
}
export var r6: typeof M;
>r6 : typeof M
>M : typeof M

export var r7: typeof M.foo;
>r7 : string
>类型别名 :=> 文字
>M.foo : string
>类型别名 :=> 文字
>M : typeof M
>foo : string
>类型别名 :=> 文字

import Z = M;
>Z : typeof M
>M : typeof M

export var r8: typeof Z;
>r8 : typeof M
>Z : typeof M

export var r9: typeof Z.foo;
>r9 : string
>类型别名 :=> 文字
>Z.foo : string
>类型别名 :=> 文字
>Z : typeof M
>foo : string
>类型别名 :=> 文字

enum E {
>E : E

    A
>A : E
}
export var r10: typeof E;
>r10 : typeof E
>E : typeof E

export var r11: typeof E.A;
>r11 : E
>E.A : E
>E : typeof E
>A : E

export var r12: typeof r12;
>r12 : any
>类型别名 :=> 任意
>r12 : any
>类型别名 :=> 任意

function foo() { }
>foo : typeof foo

module foo {
>foo : typeof foo

    export var y = 1;
>y : number
>类型别名 :=> 数字
>1 : 1

    export class C {
>C : C

        foo: string;
>foo : string
>类型别名 :=> 文字
    }
}
export var r13: typeof foo;
>r13 : typeof foo
>foo : typeof foo

