=== tests/cases/conformance/expressions/functionCalls/grammarAmbiguities.ts ===
function f(n: any) { return null; }
>f : (n: 任意) => 任意
>n : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

function g<A, B>(x: any) { return null; }
>g : <A, B>(x: 任意) => 任意
>A : A
>B : B
>x : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

interface A { }
>A : A

interface B { }
>B : B

var A, B;
>A : 任意
>类型别名 :=> 任意
>B : 任意
>类型别名 :=> 任意

f(g<A, B>(7));
>f(g<A, B>(7)) : 任意
>类型别名 :=> 任意
>f : (n: 任意) => 任意
>g<A, B>(7) : 任意
>类型别名 :=> 任意
>g : <A, B>(x: 任意) => 任意
>A : A
>B : B
>7 : 7

f(g < A, B > 7); // Should error
>f(g < A, B > 7) : 任意
>类型别名 :=> 任意
>f : (n: 任意) => 任意
>g < A : 真假
>类型别名 :=> 真假
>g : <A, B>(x: 任意) => 任意
>A : 任意
>类型别名 :=> 任意
>B > 7 : 真假
>类型别名 :=> 真假
>B : 任意
>类型别名 :=> 任意
>7 : 7

f(g < A, B > +(7)); // Should error
>f(g < A, B > +(7)) : 任意
>类型别名 :=> 任意
>f : (n: 任意) => 任意
>g < A : 真假
>类型别名 :=> 真假
>g : <A, B>(x: 任意) => 任意
>A : 任意
>类型别名 :=> 任意
>B > +(7) : 真假
>类型别名 :=> 真假
>B : 任意
>类型别名 :=> 任意
>+(7) : 数字
>类型别名 :=> 数字
>(7) : 7
>7 : 7


