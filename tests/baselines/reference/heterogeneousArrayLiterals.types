=== tests/cases/conformance/types/typeRelationships/bestCommonType/heterogeneousArrayLiterals.ts ===
// type of an array is the best common type of its elements (plus its contextual type if it exists)

var a = [1, '']; // {}[]
>a : (文字 | 数字)[]
>[1, ''] : (文字 | 数字)[]
>1 : 1
>'' : ""

var b = [1, null]; // number[]
>b : 数字[]
>[1, null] : 数字[]
>1 : 1
>null : 空值
>类型别名 :=> 空值

var c = [1, '', null]; // {}[]
>c : (文字 | 数字)[]
>[1, '', null] : (文字 | 数字)[]
>1 : 1
>'' : ""
>null : 空值
>类型别名 :=> 空值

var d = [{}, 1]; // {}[]
>d : {}[]
>[{}, 1] : {}[]
>{} : {}
>1 : 1

var e = [{}, Object]; // {}[]
>e : {}[]
>[{}, Object] : {}[]
>{} : {}
>Object : ObjectConstructor

var f = [[], [1]]; // number[][]
>f : 数字[][]
>[[], [1]] : 数字[][]
>[] : 未定[]
>[1] : 数字[]
>1 : 1

var g = [[1], ['']]; // {}[]
>g : (数字[] | 文字[])[]
>[[1], ['']] : (数字[] | 文字[])[]
>[1] : 数字[]
>1 : 1
>[''] : 文字[]
>'' : ""

var h = [{ foo: 1, bar: '' }, { foo: 2 }]; // {foo: number}[]
>h : ({ foo: 数字; bar: 文字; } | { foo: 数字; })[]
>[{ foo: 1, bar: '' }, { foo: 2 }] : ({ foo: 数字; bar: 文字; } | { foo: 数字; })[]
>{ foo: 1, bar: '' } : { foo: 数字; bar: 文字; }
>foo : 数字
>类型别名 :=> 数字
>1 : 1
>bar : 文字
>类型别名 :=> 文字
>'' : ""
>{ foo: 2 } : { foo: 数字; }
>foo : 数字
>类型别名 :=> 数字
>2 : 2

var i = [{ foo: 1, bar: '' }, { foo: '' }]; // {}[]
>i : ({ foo: 数字; bar: 文字; } | { foo: 文字; })[]
>[{ foo: 1, bar: '' }, { foo: '' }] : ({ foo: 数字; bar: 文字; } | { foo: 文字; })[]
>{ foo: 1, bar: '' } : { foo: 数字; bar: 文字; }
>foo : 数字
>类型别名 :=> 数字
>1 : 1
>bar : 文字
>类型别名 :=> 文字
>'' : ""
>{ foo: '' } : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字
>'' : ""

var j = [() => 1, () => '']; // {}[]
>j : ((() => 数字) | (() => 文字))[]
>[() => 1, () => ''] : ((() => 数字) | (() => 文字))[]
>() => 1 : () => 数字
>1 : 1
>() => '' : () => 文字
>'' : ""

var k = [() => 1, () => 1]; // { (): number }[]
>k : (() => 数字)[]
>[() => 1, () => 1] : (() => 数字)[]
>() => 1 : () => 数字
>1 : 1
>() => 1 : () => 数字
>1 : 1

var l = [() => 1, () => null]; // { (): any }[]
>l : (() => 任意)[]
>[() => 1, () => null] : (() => 任意)[]
>() => 1 : () => 数字
>1 : 1
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

var m = [() => 1, () => '', () => null]; // { (): any }[]
>m : (() => 任意)[]
>[() => 1, () => '', () => null] : (() => 任意)[]
>() => 1 : () => 数字
>1 : 1
>() => '' : () => 文字
>'' : ""
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

var n = [[() => 1], [() => '']]; // {}[]
>n : ((() => 数字)[] | (() => 文字)[])[]
>[[() => 1], [() => '']] : ((() => 数字)[] | (() => 文字)[])[]
>[() => 1] : (() => 数字)[]
>() => 1 : () => 数字
>1 : 1
>[() => ''] : (() => 文字)[]
>() => '' : () => 文字
>'' : ""

class Base { foo: string; }
>Base : Base
>foo : 文字
>类型别名 :=> 文字

class Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : 文字
>类型别名 :=> 文字

class Derived2 extends Base { baz: string; }
>Derived2 : Derived2
>Base : Base
>baz : 文字
>类型别名 :=> 文字

var base: Base;
>base : Base
>Base : Base

var derived: Derived;
>derived : Derived
>Derived : Derived

var derived2: Derived2;
>derived2 : Derived2
>Derived2 : Derived2

module Derived {
>Derived : 类为 Derived

    var h = [{ foo: base, basear: derived }, { foo: base }]; // {foo: Base}[]
>h : ({ foo: Base; basear: Derived; } | { foo: Base; })[]
>[{ foo: base, basear: derived }, { foo: base }] : ({ foo: Base; basear: Derived; } | { foo: Base; })[]
>{ foo: base, basear: derived } : { foo: Base; basear: Derived; }
>foo : Base
>base : Base
>basear : Derived
>derived : Derived
>{ foo: base } : { foo: Base; }
>foo : Base
>base : Base

    var i = [{ foo: base, basear: derived }, { foo: derived }]; // {foo: Derived}[]
>i : ({ foo: Base; basear: Derived; } | { foo: Derived; })[]
>[{ foo: base, basear: derived }, { foo: derived }] : ({ foo: Base; basear: Derived; } | { foo: Derived; })[]
>{ foo: base, basear: derived } : { foo: Base; basear: Derived; }
>foo : Base
>base : Base
>basear : Derived
>derived : Derived
>{ foo: derived } : { foo: Derived; }
>foo : Derived
>derived : Derived

    var j = [() => base, () => derived]; // { {}: Base }
>j : (() => Base)[]
>[() => base, () => derived] : (() => Base)[]
>() => base : () => Base
>base : Base
>() => derived : () => Derived
>derived : Derived

    var k = [() => base, () => 1]; // {}[]~
>k : ((() => Base) | (() => 数字))[]
>[() => base, () => 1] : ((() => Base) | (() => 数字))[]
>() => base : () => Base
>base : Base
>() => 1 : () => 数字
>1 : 1

    var l = [() => base, () => null]; // { (): any }[]
>l : (() => 任意)[]
>[() => base, () => null] : (() => 任意)[]
>() => base : () => Base
>base : Base
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

    var m = [() => base, () => derived, () => null]; // { (): any }[]
>m : (() => 任意)[]
>[() => base, () => derived, () => null] : (() => 任意)[]
>() => base : () => Base
>base : Base
>() => derived : () => Derived
>derived : Derived
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

    var n = [[() => base], [() => derived]]; // { (): Base }[]
>n : (() => Base)[][]
>[[() => base], [() => derived]] : (() => Base)[][]
>[() => base] : (() => Base)[]
>() => base : () => Base
>base : Base
>[() => derived] : (() => Derived)[]
>() => derived : () => Derived
>derived : Derived

    var o = [derived, derived2]; // {}[]
>o : (Derived | Derived2)[]
>[derived, derived2] : (Derived | Derived2)[]
>derived : Derived
>derived2 : Derived2

    var p = [derived, derived2, base]; // Base[]
>p : Base[]
>[derived, derived2, base] : Base[]
>derived : Derived
>derived2 : Derived2
>base : Base

    var q = [[() => derived2], [() => derived]]; // {}[]
>q : ((() => Derived2)[] | (() => Derived)[])[]
>[[() => derived2], [() => derived]] : ((() => Derived2)[] | (() => Derived)[])[]
>[() => derived2] : (() => Derived2)[]
>() => derived2 : () => Derived2
>derived2 : Derived2
>[() => derived] : (() => Derived)[]
>() => derived : () => Derived
>derived : Derived
}

module WithContextualType {
>WithContextualType : 类为 WithContextualType

    // no errors
    var a: Base[] = [derived, derived2];
>a : Base[]
>Base : Base
>[derived, derived2] : (Derived | Derived2)[]
>derived : Derived
>derived2 : Derived2

    var b: Derived[] = [null];
>b : Derived[]
>Derived : Derived
>[null] : 空值[]
>null : 空值
>类型别名 :=> 空值

    var c: Derived[] = [];
>c : Derived[]
>Derived : Derived
>[] : 未定[]

    var d: { (): Base }[] = [() => derived, () => derived2];
>d : (() => Base)[]
>Base : Base
>[() => derived, () => derived2] : ((() => Derived) | (() => Derived2))[]
>() => derived : () => Derived
>derived : Derived
>() => derived2 : () => Derived2
>derived2 : Derived2
}

function foo<T, U>(t: T, u: U) {
>foo : <T, U>(t: T, u: U) => 无值
>T : T
>U : U
>t : T
>T : T
>u : U
>U : U

    var a = [t, t]; // T[]
>a : T[]
>[t, t] : T[]
>t : T
>t : T

    var b = [t, null]; // T[]
>b : T[]
>[t, null] : T[]
>t : T
>null : 空值
>类型别名 :=> 空值

    var c = [t, u]; // {}[]
>c : (T | U)[]
>[t, u] : (T | U)[]
>t : T
>u : U

    var d = [t, 1]; // {}[]
>d : (数字 | T)[]
>[t, 1] : (数字 | T)[]
>t : T
>1 : 1

    var e = [() => t, () => u]; // {}[]
>e : ((() => T) | (() => U))[]
>[() => t, () => u] : ((() => T) | (() => U))[]
>() => t : () => T
>t : T
>() => u : () => U
>u : U

    var f = [() => t, () => u, () => null]; // { (): any }[]
>f : (() => 任意)[]
>[() => t, () => u, () => null] : (() => 任意)[]
>() => t : () => T
>t : T
>() => u : () => U
>u : U
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
}

function foo2<T extends Base, U extends Derived>(t: T, u: U) {
>foo2 : <T 扩展 Base, U 扩展 Derived>(t: T, u: U) => 无值
>T : T
>Base : Base
>U : U
>Derived : Derived
>t : T
>T : T
>u : U
>U : U

    var a = [t, t]; // T[]
>a : T[]
>[t, t] : T[]
>t : T
>t : T

    var b = [t, null]; // T[]
>b : T[]
>[t, null] : T[]
>t : T
>null : 空值
>类型别名 :=> 空值

    var c = [t, u]; // {}[]
>c : (T | U)[]
>[t, u] : (T | U)[]
>t : T
>u : U

    var d = [t, 1]; // {}[]
>d : (数字 | T)[]
>[t, 1] : (数字 | T)[]
>t : T
>1 : 1

    var e = [() => t, () => u]; // {}[]
>e : ((() => T) | (() => U))[]
>[() => t, () => u] : ((() => T) | (() => U))[]
>() => t : () => T
>t : T
>() => u : () => U
>u : U

    var f = [() => t, () => u, () => null]; // { (): any }[]
>f : (() => 任意)[]
>[() => t, () => u, () => null] : (() => 任意)[]
>() => t : () => T
>t : T
>() => u : () => U
>u : U
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

    var g = [t, base]; // Base[]
>g : Base[]
>[t, base] : Base[]
>t : T
>base : Base

    var h = [t, derived]; // Derived[]
>h : (Derived | T)[]
>[t, derived] : (Derived | T)[]
>t : T
>derived : Derived

    var i = [u, base]; // Base[]
>i : Base[]
>[u, base] : Base[]
>u : U
>base : Base

    var j = [u, derived]; // Derived[]
>j : Derived[]
>[u, derived] : Derived[]
>u : U
>derived : Derived
}

function foo3<T extends Derived, U extends Derived>(t: T, u: U) {
>foo3 : <T 扩展 Derived, U 扩展 Derived>(t: T, u: U) => 无值
>T : T
>Derived : Derived
>U : U
>Derived : Derived
>t : T
>T : T
>u : U
>U : U

    var a = [t, t]; // T[]
>a : T[]
>[t, t] : T[]
>t : T
>t : T

    var b = [t, null]; // T[]
>b : T[]
>[t, null] : T[]
>t : T
>null : 空值
>类型别名 :=> 空值

    var c = [t, u]; // {}[]
>c : (T | U)[]
>[t, u] : (T | U)[]
>t : T
>u : U

    var d = [t, 1]; // {}[]
>d : (数字 | T)[]
>[t, 1] : (数字 | T)[]
>t : T
>1 : 1

    var e = [() => t, () => u]; // {}[]
>e : ((() => T) | (() => U))[]
>[() => t, () => u] : ((() => T) | (() => U))[]
>() => t : () => T
>t : T
>() => u : () => U
>u : U

    var f = [() => t, () => u, () => null]; // { (): any }[]
>f : (() => 任意)[]
>[() => t, () => u, () => null] : (() => 任意)[]
>() => t : () => T
>t : T
>() => u : () => U
>u : U
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

    var g = [t, base]; // Base[]
>g : Base[]
>[t, base] : Base[]
>t : T
>base : Base

    var h = [t, derived]; // Derived[]
>h : Derived[]
>[t, derived] : Derived[]
>t : T
>derived : Derived

    var i = [u, base]; // Base[]
>i : Base[]
>[u, base] : Base[]
>u : U
>base : Base

    var j = [u, derived]; // Derived[]
>j : Derived[]
>[u, derived] : Derived[]
>u : U
>derived : Derived
}

function foo4<T extends Base, U extends Base>(t: T, u: U) {
>foo4 : <T 扩展 Base, U 扩展 Base>(t: T, u: U) => 无值
>T : T
>Base : Base
>U : U
>Base : Base
>t : T
>T : T
>u : U
>U : U

    var a = [t, t]; // T[]
>a : T[]
>[t, t] : T[]
>t : T
>t : T

    var b = [t, null]; // T[]
>b : T[]
>[t, null] : T[]
>t : T
>null : 空值
>类型别名 :=> 空值

    var c = [t, u]; // BUG 821629
>c : (T | U)[]
>[t, u] : (T | U)[]
>t : T
>u : U

    var d = [t, 1]; // {}[]
>d : (数字 | T)[]
>[t, 1] : (数字 | T)[]
>t : T
>1 : 1

    var e = [() => t, () => u]; // {}[]
>e : ((() => T) | (() => U))[]
>[() => t, () => u] : ((() => T) | (() => U))[]
>() => t : () => T
>t : T
>() => u : () => U
>u : U

    var f = [() => t, () => u, () => null]; // { (): any }[]
>f : (() => 任意)[]
>[() => t, () => u, () => null] : (() => 任意)[]
>() => t : () => T
>t : T
>() => u : () => U
>u : U
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

    var g = [t, base]; // Base[]
>g : Base[]
>[t, base] : Base[]
>t : T
>base : Base

    var h = [t, derived]; // Derived[]
>h : (Derived | T)[]
>[t, derived] : (Derived | T)[]
>t : T
>derived : Derived

    var i = [u, base]; // Base[]
>i : Base[]
>[u, base] : Base[]
>u : U
>base : Base

    var j = [u, derived]; // Derived[]
>j : (Derived | U)[]
>[u, derived] : (Derived | U)[]
>u : U
>derived : Derived

    var k: Base[] = [t, u];
>k : Base[]
>Base : Base
>[t, u] : (T | U)[]
>t : T
>u : U
}

//function foo3<T extends U, U extends Derived>(t: T, u: U) {
//    var a = [t, t]; // T[]
//    var b = [t, null]; // T[]
//    var c = [t, u]; // {}[]
//    var d = [t, 1]; // {}[]
//    var e = [() => t, () => u]; // {}[]
//    var f = [() => t, () => u, () => null]; // { (): any }[]

//    var g = [t, base]; // Base[]
//    var h = [t, derived]; // Derived[]
//    var i = [u, base]; // Base[]
//    var j = [u, derived]; // Derived[]
//}

//function foo4<T extends U, U extends Base>(t: T, u: U) {
//    var a = [t, t]; // T[]
//    var b = [t, null]; // T[]
//    var c = [t, u]; // BUG 821629
//    var d = [t, 1]; // {}[]
//    var e = [() => t, () => u]; // {}[]
//    var f = [() => t, () => u, () => null]; // { (): any }[]

//    var g = [t, base]; // Base[]
//    var h = [t, derived]; // Derived[]
//    var i = [u, base]; // Base[]
//    var j = [u, derived]; // Derived[]

//    var k: Base[] = [t, u];
//}
