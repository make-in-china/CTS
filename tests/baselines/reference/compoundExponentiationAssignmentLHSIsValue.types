=== tests/cases/conformance/es7/exponentiationOperator/compoundExponentiationAssignmentLHSIsValue.ts ===
// expected error for all the LHS of compound assignments (arithmetic and addition)
var value: any;
>value : 任意
>类型别名 :=> 任意

// this
class C {
>C : C

    constructor() {
        this **= value;
>this **= value : 数字
>类型别名 :=> 数字
>this : 本体
>value : 任意
>类型别名 :=> 任意
    }
    foo() {
>foo : () => 无值

        this **= value;
>this **= value : 数字
>类型别名 :=> 数字
>this : 本体
>value : 任意
>类型别名 :=> 任意
    }
    static sfoo() {
>sfoo : () => 无值

        this **= value;
>this **= value : 数字
>类型别名 :=> 数字
>this : 类为 C
>value : 任意
>类型别名 :=> 任意
    }
}

function foo() {
>foo : () => 无值

    this **= value;
>this **= value : 数字
>类型别名 :=> 数字
>this : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意
}

this **= value;
>this **= value : 数字
>类型别名 :=> 数字
>this : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

// identifiers: module, class, enum, function
module M { export var a; }
>M : 类为 M
>a : 任意
>类型别名 :=> 任意

M **= value;
>M **= value : 数字
>类型别名 :=> 数字
>M : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

C **= value;
>C **= value : 数字
>类型别名 :=> 数字
>C : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

enum E { }
>E : E

E **= value;
>E **= value : 数字
>类型别名 :=> 数字
>E : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

foo **= value;
>foo **= value : 数字
>类型别名 :=> 数字
>foo : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

// literals
null **= value;
>null **= value : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值
>value : 任意
>类型别名 :=> 任意

true **= value;
>true **= value : 数字
>类型别名 :=> 数字
>true : 为真
>类型别名 :=> 为真
>value : 任意
>类型别名 :=> 任意

false **= value;
>false **= value : 数字
>类型别名 :=> 数字
>false : 为假
>类型别名 :=> 为假
>value : 任意
>类型别名 :=> 任意

0 **= value;
>0 **= value : 数字
>类型别名 :=> 数字
>0 : 0
>value : 任意
>类型别名 :=> 任意

'' **= value;
>'' **= value : 数字
>类型别名 :=> 数字
>'' : ""
>value : 任意
>类型别名 :=> 任意

/d+/ **= value;
>/d+/ **= value : 数字
>类型别名 :=> 数字
>/d+/ : RegExp
>value : 任意
>类型别名 :=> 任意

// object literals
{ a: 0 } **= value;
>a : 任意
>类型别名 :=> 任意
>0 : 0
>value : 任意
>类型别名 :=> 任意

// array literals
['', ''] **= value;
>['', ''] **= value : 数字
>类型别名 :=> 数字
>['', ''] : [文字, 文字]
>'' : ""
>'' : ""
>value : 任意
>类型别名 :=> 任意

// super
class Derived extends C {
>Derived : Derived
>C : C

    constructor() {
        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 C

        super **= value;
>super **= value : 数字
>类型别名 :=> 数字
>super : 任意
>类型别名 :=> 任意
>super : C
> : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意
    }

    foo() {
>foo : () => 无值

        super **= value;
>super **= value : 数字
>类型别名 :=> 数字
>super : 任意
>类型别名 :=> 任意
>super : C
> : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意
    }

    static sfoo() {
>sfoo : () => 无值

        super **= value;
>super **= value : 数字
>类型别名 :=> 数字
>super : 任意
>类型别名 :=> 任意
>super : 类为 C
> : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意
    }
}

// function expression
function bar1() { } **= value;
>bar1 : () => 无值
>value : 任意
>类型别名 :=> 任意

() => { } **= value;
>() => { } : () => 无值
>value : 任意
>类型别名 :=> 任意

// function calls
foo() **= value;
>foo() **= value : 数字
>类型别名 :=> 数字
>foo() : 无值
>类型别名 :=> 无值
>foo : () => 无值
>value : 任意
>类型别名 :=> 任意

// parentheses, the containted expression is value
(this) **= value;
>(this) **= value : 数字
>类型别名 :=> 数字
>(this) : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

(M) **= value;
>(M) **= value : 数字
>类型别名 :=> 数字
>(M) : 任意
>类型别名 :=> 任意
>M : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

(C) **= value;
>(C) **= value : 数字
>类型别名 :=> 数字
>(C) : 任意
>类型别名 :=> 任意
>C : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

(E) **= value;
>(E) **= value : 数字
>类型别名 :=> 数字
>(E) : 任意
>类型别名 :=> 任意
>E : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

(foo) **= value;
>(foo) **= value : 数字
>类型别名 :=> 数字
>(foo) : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

(null) **= value;
>(null) **= value : 数字
>类型别名 :=> 数字
>(null) : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
>value : 任意
>类型别名 :=> 任意

(true) **= value;
>(true) **= value : 数字
>类型别名 :=> 数字
>(true) : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真
>value : 任意
>类型别名 :=> 任意

(0) **= value;
>(0) **= value : 数字
>类型别名 :=> 数字
>(0) : 0
>0 : 0
>value : 任意
>类型别名 :=> 任意

('') **= value;
>('') **= value : 数字
>类型别名 :=> 数字
>('') : ""
>'' : ""
>value : 任意
>类型别名 :=> 任意

(/d+/) **= value;
>(/d+/) **= value : 数字
>类型别名 :=> 数字
>(/d+/) : RegExp
>/d+/ : RegExp
>value : 任意
>类型别名 :=> 任意

({}) **= value;
>({}) **= value : 数字
>类型别名 :=> 数字
>({}) : {}
>{} : {}
>value : 任意
>类型别名 :=> 任意

([]) **= value;
>([]) **= value : 数字
>类型别名 :=> 数字
>([]) : 未定[]
>[] : 未定[]
>value : 任意
>类型别名 :=> 任意

(function baz1() { }) **= value;
>(function baz1() { }) **= value : 数字
>类型别名 :=> 数字
>(function baz1() { }) : () => 无值
>function baz1() { } : () => 无值
>baz1 : () => 无值
>value : 任意
>类型别名 :=> 任意

(foo()) **= value;
>(foo()) **= value : 数字
>类型别名 :=> 数字
>(foo()) : 无值
>类型别名 :=> 无值
>foo() : 无值
>类型别名 :=> 无值
>foo : () => 无值
>value : 任意
>类型别名 :=> 任意

