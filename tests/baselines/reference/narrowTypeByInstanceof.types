=== tests/cases/compiler/narrowTypeByInstanceof.ts ===
    class Match {
>Match : Match

        public range(): any {
>range : () => 任意

            return undefined;
>undefined : 未定
>类型别名 :=> 未定
        }
    }

    class FileMatch {
>FileMatch : FileMatch

        public resource(): any {
>resource : () => 任意

            return undefined;
>undefined : 未定
>类型别名 :=> 未定
        }
    }

type FileMatchOrMatch = FileMatch | Match;
>FileMatchOrMatch : FileMatchOrMatch
>FileMatch : FileMatch
>Match : Match


let elementA: FileMatchOrMatch, elementB: FileMatchOrMatch;
>elementA : FileMatchOrMatch
>FileMatchOrMatch : FileMatchOrMatch
>elementB : FileMatchOrMatch
>FileMatchOrMatch : FileMatchOrMatch

if (elementA instanceof FileMatch && elementB instanceof FileMatch) {
>elementA instanceof FileMatch && elementB instanceof FileMatch : 真假
>类型别名 :=> 真假
>elementA instanceof FileMatch : 真假
>类型别名 :=> 真假
>elementA : FileMatchOrMatch
>FileMatch : 类为 FileMatch
>elementB instanceof FileMatch : 真假
>类型别名 :=> 真假
>elementB : FileMatchOrMatch
>FileMatch : 类为 FileMatch

    let a = elementA.resource().path;
>a : 任意
>类型别名 :=> 任意
>elementA.resource().path : 任意
>类型别名 :=> 任意
>elementA.resource() : 任意
>类型别名 :=> 任意
>elementA.resource : () => 任意
>elementA : FileMatch
>resource : () => 任意
>path : 任意
>类型别名 :=> 任意

    let b = elementB.resource().path;
>b : 任意
>类型别名 :=> 任意
>elementB.resource().path : 任意
>类型别名 :=> 任意
>elementB.resource() : 任意
>类型别名 :=> 任意
>elementB.resource : () => 任意
>elementB : FileMatch
>resource : () => 任意
>path : 任意
>类型别名 :=> 任意

} else if (elementA instanceof Match && elementB instanceof Match) {
>elementA instanceof Match && elementB instanceof Match : 真假
>类型别名 :=> 真假
>elementA instanceof Match : 真假
>类型别名 :=> 真假
>elementA : FileMatchOrMatch
>Match : 类为 Match
>elementB instanceof Match : 真假
>类型别名 :=> 真假
>elementB : FileMatchOrMatch
>Match : 类为 Match

    let a = elementA.range();
>a : 任意
>类型别名 :=> 任意
>elementA.range() : 任意
>类型别名 :=> 任意
>elementA.range : () => 任意
>elementA : Match
>range : () => 任意

    let b = elementB.range();
>b : 任意
>类型别名 :=> 任意
>elementB.range() : 任意
>类型别名 :=> 任意
>elementB.range : () => 任意
>elementB : Match
>range : () => 任意
}

