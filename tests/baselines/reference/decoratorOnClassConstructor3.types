=== tests/cases/conformance/decorators/class/constructor/0.ts ===
export class base { }
>base : base

export function foo(target: Object, propertyKey: string | symbol, parameterIndex: number) { }
>foo : (target: Object, propertyKey: 文字 | 符号, parameterIndex: 数字) => 无值
>target : Object
>Object : Object
>propertyKey : 文字 | 符号
>parameterIndex : 数字
>类型别名 :=> 数字

=== tests/cases/conformance/decorators/class/constructor/2.ts ===
import {base} from "./0"
>base : 类为 base

import {foo} from "./0"
>foo : (target: Object, propertyKey: 文字 | 符号, parameterIndex: 数字) => 无值

/* Comment on the Class Declaration */
export class C  extends base{
>C : C
>base : base

    constructor(@foo prop: any) {
>foo : (target: Object, propertyKey: 文字 | 符号, parameterIndex: 数字) => 无值
>prop : 任意
>类型别名 :=> 任意

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 base
    }
}
