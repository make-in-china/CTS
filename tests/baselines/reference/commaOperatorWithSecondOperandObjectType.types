=== tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandObjectType.ts ===
var ANY: any;
>ANY : any
>类型别名 :=> 任意

var BOOLEAN: boolean;
>BOOLEAN : boolean
>类型别名 :=> 真假

var NUMBER: number;
>NUMBER : number
>类型别名 :=> 数字

var STRING: string;
>STRING : string
>类型别名 :=> 文字

var OBJECT: Object;
>OBJECT : Object
>Object : Object

class CLASS {
>CLASS : CLASS

    num: number;
>num : number
>类型别名 :=> 数字
}

//The second operand type is Object
ANY, OBJECT;
>ANY, OBJECT : Object
>ANY : any
>类型别名 :=> 任意
>OBJECT : Object

BOOLEAN, OBJECT;
>BOOLEAN, OBJECT : Object
>BOOLEAN : boolean
>类型别名 :=> 真假
>OBJECT : Object

NUMBER, OBJECT;
>NUMBER, OBJECT : Object
>NUMBER : number
>类型别名 :=> 数字
>OBJECT : Object

STRING, OBJECT;
>STRING, OBJECT : Object
>STRING : string
>类型别名 :=> 文字
>OBJECT : Object

OBJECT, OBJECT;
>OBJECT, OBJECT : Object
>OBJECT : Object
>OBJECT : Object

//Return type is Object
var resultIsObject1 = (ANY, OBJECT);
>resultIsObject1 : Object
>(ANY, OBJECT) : Object
>ANY, OBJECT : Object
>ANY : any
>类型别名 :=> 任意
>OBJECT : Object

var resultIsObject2 = (BOOLEAN, OBJECT);
>resultIsObject2 : Object
>(BOOLEAN, OBJECT) : Object
>BOOLEAN, OBJECT : Object
>BOOLEAN : boolean
>类型别名 :=> 真假
>OBJECT : Object

var resultIsObject3 = (NUMBER, OBJECT);
>resultIsObject3 : Object
>(NUMBER, OBJECT) : Object
>NUMBER, OBJECT : Object
>NUMBER : number
>类型别名 :=> 数字
>OBJECT : Object

var resultIsObject4 = (STRING, OBJECT);
>resultIsObject4 : Object
>(STRING, OBJECT) : Object
>STRING, OBJECT : Object
>STRING : string
>类型别名 :=> 文字
>OBJECT : Object

var resultIsObject5 = (OBJECT, OBJECT);
>resultIsObject5 : Object
>(OBJECT, OBJECT) : Object
>OBJECT, OBJECT : Object
>OBJECT : Object
>OBJECT : Object

//Literal and expression
null, OBJECT
>null, OBJECT : Object
>null : null
>类型别名 :=> 空值
>OBJECT : Object

ANY = null, OBJECT
>ANY = null, OBJECT : Object
>ANY = null : null
>类型别名 :=> 空值
>ANY : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>OBJECT : Object

true, {}
>true, {} : {}
>true : true
>类型别名 :=> 为真
>{} : {}

!BOOLEAN, []
>!BOOLEAN, [] : undefined[]
>!BOOLEAN : boolean
>类型别名 :=> 真假
>BOOLEAN : boolean
>类型别名 :=> 真假
>[] : undefined[]

"string", new Date()
>"string", new Date() : Date
>"string" : "string"
>new Date() : Date
>Date : DateConstructor

STRING.toLowerCase(), new CLASS()
>STRING.toLowerCase(), new CLASS() : CLASS
>STRING.toLowerCase() : string
>类型别名 :=> 文字
>STRING.toLowerCase : () => string
>STRING : string
>类型别名 :=> 文字
>toLowerCase : () => string
>new CLASS() : CLASS
>CLASS : typeof CLASS

var resultIsObject6 = (null, OBJECT);
>resultIsObject6 : Object
>(null, OBJECT) : Object
>null, OBJECT : Object
>null : null
>类型别名 :=> 空值
>OBJECT : Object

var resultIsObject7 = (ANY = null, OBJECT);
>resultIsObject7 : Object
>(ANY = null, OBJECT) : Object
>ANY = null, OBJECT : Object
>ANY = null : null
>类型别名 :=> 空值
>ANY : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>OBJECT : Object

var resultIsObject8 = (true, {});
>resultIsObject8 : {}
>(true, {}) : {}
>true, {} : {}
>true : true
>类型别名 :=> 为真
>{} : {}

var resultIsObject9 = (!BOOLEAN, { a: 1, b: "s" });
>resultIsObject9 : { a: number; b: string; }
>(!BOOLEAN, { a: 1, b: "s" }) : { a: number; b: string; }
>!BOOLEAN, { a: 1, b: "s" } : { a: number; b: string; }
>!BOOLEAN : boolean
>类型别名 :=> 真假
>BOOLEAN : boolean
>类型别名 :=> 真假
>{ a: 1, b: "s" } : { a: number; b: string; }
>a : number
>类型别名 :=> 数字
>1 : 1
>b : string
>类型别名 :=> 文字
>"s" : "s"

var resultIsObject10 = ("string", new Date());
>resultIsObject10 : Date
>("string", new Date()) : Date
>"string", new Date() : Date
>"string" : "string"
>new Date() : Date
>Date : DateConstructor

var resultIsObject11 = (STRING.toLowerCase(), new CLASS());
>resultIsObject11 : CLASS
>(STRING.toLowerCase(), new CLASS()) : CLASS
>STRING.toLowerCase(), new CLASS() : CLASS
>STRING.toLowerCase() : string
>类型别名 :=> 文字
>STRING.toLowerCase : () => string
>STRING : string
>类型别名 :=> 文字
>toLowerCase : () => string
>new CLASS() : CLASS
>CLASS : typeof CLASS

