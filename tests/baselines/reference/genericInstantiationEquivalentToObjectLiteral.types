=== tests/cases/conformance/types/namedTypes/genericInstantiationEquivalentToObjectLiteral.ts ===
interface Pair<T1, T2> { first: T1; second: T2; }
>Pair : Pair<T1, T2>
>T1 : T1
>T2 : T2
>first : T1
>T1 : T1
>second : T2
>T2 : T2

var x: Pair<string, number>
>x : Pair<文字, 数字>
>Pair : Pair<T1, T2>

var y: { first: string; second: number; }
>y : { first: 文字; second: 数字; }
>first : 文字
>类型别名 :=> 文字
>second : 数字
>类型别名 :=> 数字

x = y;
>x = y : { first: 文字; second: 数字; }
>x : Pair<文字, 数字>
>y : { first: 文字; second: 数字; }

y = x;
>y = x : Pair<文字, 数字>
>y : { first: 文字; second: 数字; }
>x : Pair<文字, 数字>

declare function f<T, U>(x: Pair<T, U>);
>f : <T, U>(x: Pair<T, U>) => 任意
>T : T
>U : U
>x : Pair<T, U>
>Pair : Pair<T1, T2>
>T : T
>U : U

declare function f2<T, U>(x: { first: T; second: U; });
>f2 : <T, U>(x: { first: T; second: U; }) => 任意
>T : T
>U : U
>x : { first: T; second: U; }
>first : T
>T : T
>second : U
>U : U

f(x);
>f(x) : 任意
>类型别名 :=> 任意
>f : <T, U>(x: Pair<T, U>) => 任意
>x : Pair<文字, 数字>

f(y);
>f(y) : 任意
>类型别名 :=> 任意
>f : <T, U>(x: Pair<T, U>) => 任意
>y : { first: 文字; second: 数字; }

f2(x);
>f2(x) : 任意
>类型别名 :=> 任意
>f2 : <T, U>(x: { first: T; second: U; }) => 任意
>x : Pair<文字, 数字>

f2(y);
>f2(y) : 任意
>类型别名 :=> 任意
>f2 : <T, U>(x: { first: T; second: U; }) => 任意
>y : { first: 文字; second: 数字; }

