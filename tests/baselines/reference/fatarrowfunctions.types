=== tests/cases/compiler/fatarrowfunctions.ts ===
function foo(x:any) {
>foo : (x: any) => any
>x : any
>类型别名 :=> 任意

	return x();
>x() : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
}


foo((x:number,y,z)=>{return x+y+z;});
>foo((x:number,y,z)=>{return x+y+z;}) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>(x:number,y,z)=>{return x+y+z;} : (x: number, y: any, z: any) => any
>x : number
>类型别名 :=> 数字
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意
>x+y+z : any
>类型别名 :=> 任意
>x+y : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

foo((x,y,z)=>{return x+y+z;});
>foo((x,y,z)=>{return x+y+z;}) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>(x,y,z)=>{return x+y+z;} : (x: any, y: any, z: any) => any
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意
>x+y+z : any
>类型别名 :=> 任意
>x+y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

foo((x,y:number,z)=>{return x+y+z;});
>foo((x,y:number,z)=>{return x+y+z;}) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>(x,y:number,z)=>{return x+y+z;} : (x: any, y: number, z: any) => any
>x : any
>类型别名 :=> 任意
>y : number
>类型别名 :=> 数字
>z : any
>类型别名 :=> 任意
>x+y+z : any
>类型别名 :=> 任意
>x+y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : number
>类型别名 :=> 数字
>z : any
>类型别名 :=> 任意

foo((x,y:number,z:number)=>{return x+y+z;});
>foo((x,y:number,z:number)=>{return x+y+z;}) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>(x,y:number,z:number)=>{return x+y+z;} : (x: any, y: number, z: number) => any
>x : any
>类型别名 :=> 任意
>y : number
>类型别名 :=> 数字
>z : number
>类型别名 :=> 数字
>x+y+z : any
>类型别名 :=> 任意
>x+y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : number
>类型别名 :=> 数字
>z : number
>类型别名 :=> 数字

foo((x,y,z:number)=>{return x+y+z;});
>foo((x,y,z:number)=>{return x+y+z;}) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>(x,y,z:number)=>{return x+y+z;} : (x: any, y: any, z: number) => any
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>x+y+z : any
>类型别名 :=> 任意
>x+y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字

foo(()=>{return 0;});
>foo(()=>{return 0;}) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>()=>{return 0;} : () => number
>0 : 0

foo((x:number,y,z)=>x+y+z);
>foo((x:number,y,z)=>x+y+z) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>(x:number,y,z)=>x+y+z : (x: number, y: any, z: any) => any
>x : number
>类型别名 :=> 数字
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意
>x+y+z : any
>类型别名 :=> 任意
>x+y : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

foo((x,y,z)=>x+y+z);
>foo((x,y,z)=>x+y+z) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>(x,y,z)=>x+y+z : (x: any, y: any, z: any) => any
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意
>x+y+z : any
>类型别名 :=> 任意
>x+y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

foo((x,y:number,z)=>{return x+y+z;});
>foo((x,y:number,z)=>{return x+y+z;}) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>(x,y:number,z)=>{return x+y+z;} : (x: any, y: number, z: any) => any
>x : any
>类型别名 :=> 任意
>y : number
>类型别名 :=> 数字
>z : any
>类型别名 :=> 任意
>x+y+z : any
>类型别名 :=> 任意
>x+y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : number
>类型别名 :=> 数字
>z : any
>类型别名 :=> 任意

foo((x,y:number,z:number)=>{return x+y+z;});
>foo((x,y:number,z:number)=>{return x+y+z;}) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>(x,y:number,z:number)=>{return x+y+z;} : (x: any, y: number, z: number) => any
>x : any
>类型别名 :=> 任意
>y : number
>类型别名 :=> 数字
>z : number
>类型别名 :=> 数字
>x+y+z : any
>类型别名 :=> 任意
>x+y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : number
>类型别名 :=> 数字
>z : number
>类型别名 :=> 数字

foo((x,y,z:number)=>{return x+y+z;});
>foo((x,y,z:number)=>{return x+y+z;}) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>(x,y,z:number)=>{return x+y+z;} : (x: any, y: any, z: number) => any
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字
>x+y+z : any
>类型别名 :=> 任意
>x+y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字

foo(()=>{return 0;});
>foo(()=>{return 0;}) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>()=>{return 0;} : () => number
>0 : 0


foo(((x) => x));
>foo(((x) => x)) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>((x) => x) : (x: any) => any
>(x) => x : (x: any) => any
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

foo(x => x*x);
>foo(x => x*x) : any
>类型别名 :=> 任意
>foo : (x: any) => any
>x => x*x : (x: any) => number
>x : any
>类型别名 :=> 任意
>x*x : number
>类型别名 :=> 数字
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

var y = x => x*x;
>y : (x: any) => number
>x => x*x : (x: any) => number
>x : any
>类型别名 :=> 任意
>x*x : number
>类型别名 :=> 数字
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

var z = (x:number) => x*x;
>z : (x: number) => number
>(x:number) => x*x : (x: number) => number
>x : number
>类型别名 :=> 数字
>x*x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

var w = () => 3;
>w : () => number
>() => 3 : () => number
>3 : 3

function ternaryTest(isWhile:boolean) {
>ternaryTest : (isWhile: boolean) => void
>isWhile : boolean
>类型别名 :=> 真假

                var f = isWhile ? function (n) { return n > 0; } : function (n) { return n === 0; };
>f : (n: any) => boolean
>isWhile ? function (n) { return n > 0; } : function (n) { return n === 0; } : (n: any) => boolean
>isWhile : boolean
>类型别名 :=> 真假
>function (n) { return n > 0; } : (n: any) => boolean
>n : any
>类型别名 :=> 任意
>n > 0 : boolean
>类型别名 :=> 真假
>n : any
>类型别名 :=> 任意
>0 : 0
>function (n) { return n === 0; } : (n: any) => boolean
>n : any
>类型别名 :=> 任意
>n === 0 : boolean
>类型别名 :=> 真假
>n : any
>类型别名 :=> 任意
>0 : 0

}

declare function setTimeout(expression: any, msec?: number, language?: any): number;
>setTimeout : (expression: any, msec?: number, language?: any) => number
>expression : any
>类型别名 :=> 任意
>msec : number
>类型别名 :=> 数字
>language : any
>类型别名 :=> 任意

var messenger = {
>messenger : { message: string; start: () => void; }
>{    message: "Hello World",    start: function() {        setTimeout(() => { this.message.toString(); }, 3000);    }} : { message: string; start: () => void; }

    message: "Hello World",
>message : string
>类型别名 :=> 文字
>"Hello World" : "Hello World"

    start: function() {
>start : () => void
>function() {        setTimeout(() => { this.message.toString(); }, 3000);    } : () => void

        setTimeout(() => { this.message.toString(); }, 3000);
>setTimeout(() => { this.message.toString(); }, 3000) : number
>类型别名 :=> 数字
>setTimeout : (expression: any, msec?: number, language?: any) => number
>() => { this.message.toString(); } : () => void
>this.message.toString() : any
>类型别名 :=> 任意
>this.message.toString : any
>类型别名 :=> 任意
>this.message : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>message : any
>类型别名 :=> 任意
>toString : any
>类型别名 :=> 任意
>3000 : 3000
    }
};

