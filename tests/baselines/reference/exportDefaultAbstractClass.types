=== tests/cases/compiler/a.ts ===
export default abstract class A { a: number; }
>A : A
>a : 数字
>类型别名 :=> 数字

class B extends A {}
>B : B
>A : A

new B().a.toExponential();
>new B().a.toExponential() : 文字
>类型别名 :=> 文字
>new B().a.toExponential : (fractionDigits?: 数字) => 文字
>new B().a : 数字
>类型别名 :=> 数字
>new B() : B
>B : 类为 B
>a : 数字
>类型别名 :=> 数字
>toExponential : (fractionDigits?: 数字) => 文字

=== tests/cases/compiler/b.ts ===
import A from './a';
>A : 类为 A

class C extends A {}
>C : C
>A : A

new C().a.toExponential();
>new C().a.toExponential() : 文字
>类型别名 :=> 文字
>new C().a.toExponential : (fractionDigits?: 数字) => 文字
>new C().a : 数字
>类型别名 :=> 数字
>new C() : C
>C : 类为 C
>a : 数字
>类型别名 :=> 数字
>toExponential : (fractionDigits?: 数字) => 文字

