=== tests/cases/compiler/file1.ts ===
"use strict";
>"use strict" : "use strict"

import * as MyModule from "./mymodule";
>MyModule : 类为 MyModule

export class BrokenClass {
>BrokenClass : BrokenClass

  constructor() {}

  public brokenMethod(field: string, value: string) {
>brokenMethod : (field: 文字, value: 文字) => Promise<MyModule.MyModel[]>
>field : 文字
>类型别名 :=> 文字
>value : 文字
>类型别名 :=> 文字

  return new Promise<Array<MyModule.MyModel>>((resolve, reject) => {
>new Promise<Array<MyModule.MyModel>>((resolve, reject) => {    let result: Array<MyModule.MyModel> = [];    let populateItems = (order) => {      return new Promise((resolve, reject) => {        this.doStuff(order.id)          .then((items) => {            order.items = items;            resolve(order);          });      });    };    return Promise.all(result.map(populateItems))      .then((orders: Array<MyModule.MyModel>) => {        resolve(orders);      });    }) : Promise<MyModule.MyModel[]>
>Promise : PromiseConstructor
>Array : T[]
>MyModule : 任意
>类型别名 :=> 任意
>MyModel : MyModule.MyModel
>(resolve, reject) => {    let result: Array<MyModule.MyModel> = [];    let populateItems = (order) => {      return new Promise((resolve, reject) => {        this.doStuff(order.id)          .then((items) => {            order.items = items;            resolve(order);          });      });    };    return Promise.all(result.map(populateItems))      .then((orders: Array<MyModule.MyModel>) => {        resolve(orders);      });    } : (resolve: (value?: MyModule.MyModel[] | PromiseLike<MyModule.MyModel[]>) => 无值, reject: (reason?: 任意) => 无值) => Promise<无值>
>resolve : (value?: MyModule.MyModel[] | PromiseLike<MyModule.MyModel[]>) => 无值
>reject : (reason?: 任意) => 无值

    let result: Array<MyModule.MyModel> = [];
>result : MyModule.MyModel[]
>Array : T[]
>MyModule : 任意
>类型别名 :=> 任意
>MyModel : MyModule.MyModel
>[] : 未定[]

    let populateItems = (order) => {
>populateItems : (order: 任意) => Promise<{}>
>(order) => {      return new Promise((resolve, reject) => {        this.doStuff(order.id)          .then((items) => {            order.items = items;            resolve(order);          });      });    } : (order: 任意) => Promise<{}>
>order : 任意
>类型别名 :=> 任意

      return new Promise((resolve, reject) => {
>new Promise((resolve, reject) => {        this.doStuff(order.id)          .then((items) => {            order.items = items;            resolve(order);          });      }) : Promise<{}>
>Promise : PromiseConstructor
>(resolve, reject) => {        this.doStuff(order.id)          .then((items) => {            order.items = items;            resolve(order);          });      } : (resolve: (value?: {} | PromiseLike<{}>) => 无值, reject: (reason?: 任意) => 无值) => 无值
>resolve : (value?: {} | PromiseLike<{}>) => 无值
>reject : (reason?: 任意) => 无值

        this.doStuff(order.id)
>this.doStuff(order.id)          .then((items) => {            order.items = items;            resolve(order);          }) : Promise<无值>
>this.doStuff(order.id)          .then : <TResult1 = 无值, TResult2 = 不及>(onfulfilled?: (value: 无值) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>this.doStuff(order.id) : Promise<无值>
>this.doStuff : (id: 数字) => Promise<无值>
>this : 本体
>doStuff : (id: 数字) => Promise<无值>
>order.id : 任意
>类型别名 :=> 任意
>order : 任意
>类型别名 :=> 任意
>id : 任意
>类型别名 :=> 任意

          .then((items) => {
>then : <TResult1 = 无值, TResult2 = 不及>(onfulfilled?: (value: 无值) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>(items) => {            order.items = items;            resolve(order);          } : (items: 无值) => 无值
>items : 无值
>类型别名 :=> 无值

            order.items = items;
>order.items = items : 无值
>类型别名 :=> 无值
>order.items : 任意
>类型别名 :=> 任意
>order : 任意
>类型别名 :=> 任意
>items : 任意
>类型别名 :=> 任意
>items : 无值
>类型别名 :=> 无值

            resolve(order);
>resolve(order) : 无值
>类型别名 :=> 无值
>resolve : (value?: {} | PromiseLike<{}>) => 无值
>order : 任意
>类型别名 :=> 任意

          });
      });
    };

    return Promise.all(result.map(populateItems))
>Promise.all(result.map(populateItems))      .then((orders: Array<MyModule.MyModel>) => {        resolve(orders);      }) : Promise<无值>
>Promise.all(result.map(populateItems))      .then : <TResult1 = {}[], TResult2 = 不及>(onfulfilled?: (value: {}[]) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>Promise.all(result.map(populateItems)) : Promise<{}[]>
>Promise.all : { <TAll>(values: Iterable<TAll | PromiseLike<TAll>>): Promise<TAll[]>; <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>, T10 | PromiseLike<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>; <T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>; <T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>; <T1, T2, T3, T4, T5, T6, T7>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>; <T1, T2, T3, T4, T5, T6>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>; <T1, T2, T3, T4, T5>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>]): Promise<[T1, T2, T3, T4, T5]>; <T1, T2, T3, T4>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]): Promise<[T1, T2, T3, T4]>; <T1, T2, T3>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]): Promise<[T1, T2, T3]>; <T1, T2>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): Promise<[T1, T2]>; <T>(values: (T | PromiseLike<T>)[]): Promise<T[]>; }
>Promise : PromiseConstructor
>all : { <TAll>(values: Iterable<TAll | PromiseLike<TAll>>): Promise<TAll[]>; <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>, T10 | PromiseLike<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>; <T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>; <T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>; <T1, T2, T3, T4, T5, T6, T7>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>; <T1, T2, T3, T4, T5, T6>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>; <T1, T2, T3, T4, T5>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>]): Promise<[T1, T2, T3, T4, T5]>; <T1, T2, T3, T4>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]): Promise<[T1, T2, T3, T4]>; <T1, T2, T3>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]): Promise<[T1, T2, T3]>; <T1, T2>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): Promise<[T1, T2]>; <T>(values: (T | PromiseLike<T>)[]): Promise<T[]>; }
>result.map(populateItems) : Promise<{}>[]
>result.map : <U>(callbackfn: (value: MyModule.MyModel, index: 数字, array: MyModule.MyModel[]) => U, thisArg?: 任意) => U[]
>result : MyModule.MyModel[]
>map : <U>(callbackfn: (value: MyModule.MyModel, index: 数字, array: MyModule.MyModel[]) => U, thisArg?: 任意) => U[]
>populateItems : (order: 任意) => Promise<{}>

      .then((orders: Array<MyModule.MyModel>) => {
>then : <TResult1 = {}[], TResult2 = 不及>(onfulfilled?: (value: {}[]) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>(orders: Array<MyModule.MyModel>) => {        resolve(orders);      } : (orders: MyModule.MyModel[]) => 无值
>orders : MyModule.MyModel[]
>Array : T[]
>MyModule : 任意
>类型别名 :=> 任意
>MyModel : MyModule.MyModel

        resolve(orders);
>resolve(orders) : 无值
>类型别名 :=> 无值
>resolve : (value?: MyModule.MyModel[] | PromiseLike<MyModule.MyModel[]>) => 无值
>orders : MyModule.MyModel[]

      });
    });
  }

  public async doStuff(id: number) {
>doStuff : (id: 数字) => Promise<无值>
>id : 数字
>类型别名 :=> 数字

    return;
  }
}

=== tests/cases/compiler/mymodule.ts ===
export interface MyModel {
>MyModel : MyModel

    id: number;
>id : 数字
>类型别名 :=> 数字
}
