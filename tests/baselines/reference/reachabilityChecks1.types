=== tests/cases/compiler/reachabilityChecks1.ts ===
while (true);
>true : true
>类型别名 :=> 为真

var x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

module A {
>A : typeof A

    while (true);
>true : true
>类型别名 :=> 为真

    let x;
>x : any
>类型别名 :=> 任意
}

module A1 {
>A1 : typeof A1

    do {} while(true);
>true : true
>类型别名 :=> 为真

    module A {
>A : any
>类型别名 :=> 任意

        interface F {}
>F : F
    }
}

module A2 {
>A2 : typeof A2

    while (true);
>true : true
>类型别名 :=> 为真

    module A {
>A : typeof A

        var x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1
    }
}

module A3 {
>A3 : typeof A3

    while (true);
>true : true
>类型别名 :=> 为真

    type T = string;
>T : string
>类型别名 :=> 文字
}

module A4 {
>A4 : typeof A4

    while (true);
>true : true
>类型别名 :=> 为真

    module A {
>A : typeof A

        const enum E { X }
>E : E
>X : E
    }
}

function f1(x) {
>f1 : (x: any) => void
>x : any
>类型别名 :=> 任意

    if (x) {
>x : any
>类型别名 :=> 任意

        return;
    }
    else {
        throw new Error("123");
>new Error("123") : Error
>Error : ErrorConstructor
>"123" : "123"
    }
    var x;
>x : any
>类型别名 :=> 任意
}

function f2() {
>f2 : () => void

    return;
    class A {
>A : A
    }
}

module B {
>B : typeof B

    for (; ;);
    module C {
>C : any
>类型别名 :=> 任意
    }
}

function f3() {
>f3 : () => void

    do {
    } while (true);
>true : true
>类型别名 :=> 为真

    enum E {
>E : E

        X = 1
>X : E
>1 : 1
    }
}

function f4() {
>f4 : () => void

    if (true) {
>true : true
>类型别名 :=> 为真

        throw new Error();
>new Error() : Error
>Error : ErrorConstructor
    }
    const enum E {
>E : E

        X = 1
>X : E
>1 : 1
    }
}


