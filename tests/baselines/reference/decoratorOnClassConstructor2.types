=== tests/cases/conformance/decorators/class/constructor/0.ts ===
export class base { }
>base : base

export function foo(target: Object, propertyKey: string | symbol, parameterIndex: number) { }
>foo : (target: Object, propertyKey: string | symbol, parameterIndex: number) => void
>target : Object
>Object : Object
>propertyKey : string | symbol
>parameterIndex : number
>类型别名 :=> 数字

=== tests/cases/conformance/decorators/class/constructor/2.ts ===
import {base} from "./0.ts"
>base : any
>类型别名 :=> 任意

import {foo} from "./0.ts"
>foo : any
>类型别名 :=> 任意

export class C  extends base{
>C : C
>base : any
>类型别名 :=> 任意

    constructor(@foo prop: any) {
>foo : any
>类型别名 :=> 任意
>prop : any
>类型别名 :=> 任意

        super();
>super() : void
>类型别名 :=> 无值
>super : any
>类型别名 :=> 任意
    }
}
