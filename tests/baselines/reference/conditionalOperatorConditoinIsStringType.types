=== tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditoinIsStringType.ts ===
//Cond ? Expr1 : Expr2,  Cond is of string type, Expr1 and Expr2 have the same type
var condString: string;
>condString : string
>类型别名 :=> 文字

var exprAny1: any;
>exprAny1 : any
>类型别名 :=> 任意

var exprBoolean1: boolean;
>exprBoolean1 : boolean
>类型别名 :=> 真假

var exprNumber1: number;
>exprNumber1 : number
>类型别名 :=> 数字

var exprString1: string;
>exprString1 : string
>类型别名 :=> 文字

var exprIsObject1: Object;
>exprIsObject1 : Object
>Object : Object

var exprAny2: any;
>exprAny2 : any
>类型别名 :=> 任意

var exprBoolean2: boolean;
>exprBoolean2 : boolean
>类型别名 :=> 真假

var exprNumber2: number;
>exprNumber2 : number
>类型别名 :=> 数字

var exprString2: string;
>exprString2 : string
>类型别名 :=> 文字

var exprIsObject2: Object;
>exprIsObject2 : Object
>Object : Object

//Cond is a string type variable
condString ? exprAny1 : exprAny2;
>condString ? exprAny1 : exprAny2 : any
>类型别名 :=> 任意
>condString : string
>类型别名 :=> 文字
>exprAny1 : any
>类型别名 :=> 任意
>exprAny2 : any
>类型别名 :=> 任意

condString ? exprBoolean1 : exprBoolean2;
>condString ? exprBoolean1 : exprBoolean2 : boolean
>类型别名 :=> 真假
>condString : string
>类型别名 :=> 文字
>exprBoolean1 : boolean
>类型别名 :=> 真假
>exprBoolean2 : boolean
>类型别名 :=> 真假

condString ? exprNumber1 : exprNumber2;
>condString ? exprNumber1 : exprNumber2 : number
>类型别名 :=> 数字
>condString : string
>类型别名 :=> 文字
>exprNumber1 : number
>类型别名 :=> 数字
>exprNumber2 : number
>类型别名 :=> 数字

condString ? exprString1 : exprString2;
>condString ? exprString1 : exprString2 : string
>类型别名 :=> 文字
>condString : string
>类型别名 :=> 文字
>exprString1 : string
>类型别名 :=> 文字
>exprString2 : string
>类型别名 :=> 文字

condString ? exprIsObject1 : exprIsObject2;
>condString ? exprIsObject1 : exprIsObject2 : Object
>condString : string
>类型别名 :=> 文字
>exprIsObject1 : Object
>exprIsObject2 : Object

condString ? exprString1 : exprBoolean1; // union
>condString ? exprString1 : exprBoolean1 : string | boolean
>condString : string
>类型别名 :=> 文字
>exprString1 : string
>类型别名 :=> 文字
>exprBoolean1 : boolean
>类型别名 :=> 真假

//Cond is a string type literal
"" ? exprAny1 : exprAny2;
>"" ? exprAny1 : exprAny2 : any
>类型别名 :=> 任意
>"" : ""
>exprAny1 : any
>类型别名 :=> 任意
>exprAny2 : any
>类型别名 :=> 任意

"string" ? exprBoolean1 : exprBoolean2;
>"string" ? exprBoolean1 : exprBoolean2 : boolean
>类型别名 :=> 真假
>"string" : "string"
>exprBoolean1 : boolean
>类型别名 :=> 真假
>exprBoolean2 : boolean
>类型别名 :=> 真假

'c' ? exprNumber1 : exprNumber2;
>'c' ? exprNumber1 : exprNumber2 : number
>类型别名 :=> 数字
>'c' : "c"
>exprNumber1 : number
>类型别名 :=> 数字
>exprNumber2 : number
>类型别名 :=> 数字

'string' ? exprString1 : exprString2;
>'string' ? exprString1 : exprString2 : string
>类型别名 :=> 文字
>'string' : "string"
>exprString1 : string
>类型别名 :=> 文字
>exprString2 : string
>类型别名 :=> 文字

"  " ? exprIsObject1 : exprIsObject2;
>"  " ? exprIsObject1 : exprIsObject2 : Object
>"  " : "  "
>exprIsObject1 : Object
>exprIsObject2 : Object

"hello " ? exprString1 : exprBoolean1; // union
>"hello " ? exprString1 : exprBoolean1 : string | boolean
>"hello " : "hello "
>exprString1 : string
>类型别名 :=> 文字
>exprBoolean1 : boolean
>类型别名 :=> 真假

//Cond is a string type expression
function foo() { return "string" };
>foo : () => string
>"string" : "string"

var array = ["1", "2", "3"];
>array : string[]
>["1", "2", "3"] : string[]
>"1" : "1"
>"2" : "2"
>"3" : "3"

typeof condString ? exprAny1 : exprAny2;
>typeof condString ? exprAny1 : exprAny2 : any
>类型别名 :=> 任意
>typeof condString : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>condString : string
>类型别名 :=> 文字
>exprAny1 : any
>类型别名 :=> 任意
>exprAny2 : any
>类型别名 :=> 任意

condString.toUpperCase ? exprBoolean1 : exprBoolean2;
>condString.toUpperCase ? exprBoolean1 : exprBoolean2 : boolean
>类型别名 :=> 真假
>condString.toUpperCase : () => string
>condString : string
>类型别名 :=> 文字
>toUpperCase : () => string
>exprBoolean1 : boolean
>类型别名 :=> 真假
>exprBoolean2 : boolean
>类型别名 :=> 真假

condString + "string" ? exprNumber1 : exprNumber2;
>condString + "string" ? exprNumber1 : exprNumber2 : number
>类型别名 :=> 数字
>condString + "string" : string
>类型别名 :=> 文字
>condString : string
>类型别名 :=> 文字
>"string" : "string"
>exprNumber1 : number
>类型别名 :=> 数字
>exprNumber2 : number
>类型别名 :=> 数字

foo() ? exprString1 : exprString2;
>foo() ? exprString1 : exprString2 : string
>类型别名 :=> 文字
>foo() : string
>类型别名 :=> 文字
>foo : () => string
>exprString1 : string
>类型别名 :=> 文字
>exprString2 : string
>类型别名 :=> 文字

array[1] ? exprIsObject1 : exprIsObject2;
>array[1] ? exprIsObject1 : exprIsObject2 : Object
>array[1] : string
>类型别名 :=> 文字
>array : string[]
>1 : 1
>exprIsObject1 : Object
>exprIsObject2 : Object

foo() ? exprString1 : exprBoolean1; // union
>foo() ? exprString1 : exprBoolean1 : string | boolean
>foo() : string
>类型别名 :=> 文字
>foo : () => string
>exprString1 : string
>类型别名 :=> 文字
>exprBoolean1 : boolean
>类型别名 :=> 真假

//Results shoud be same as Expr1 and Expr2
var resultIsAny1 = condString ? exprAny1 : exprAny2;
>resultIsAny1 : any
>类型别名 :=> 任意
>condString ? exprAny1 : exprAny2 : any
>类型别名 :=> 任意
>condString : string
>类型别名 :=> 文字
>exprAny1 : any
>类型别名 :=> 任意
>exprAny2 : any
>类型别名 :=> 任意

var resultIsBoolean1 = condString ? exprBoolean1 : exprBoolean2;
>resultIsBoolean1 : boolean
>类型别名 :=> 真假
>condString ? exprBoolean1 : exprBoolean2 : boolean
>类型别名 :=> 真假
>condString : string
>类型别名 :=> 文字
>exprBoolean1 : boolean
>类型别名 :=> 真假
>exprBoolean2 : boolean
>类型别名 :=> 真假

var resultIsNumber1 = condString ? exprNumber1 : exprNumber2;
>resultIsNumber1 : number
>类型别名 :=> 数字
>condString ? exprNumber1 : exprNumber2 : number
>类型别名 :=> 数字
>condString : string
>类型别名 :=> 文字
>exprNumber1 : number
>类型别名 :=> 数字
>exprNumber2 : number
>类型别名 :=> 数字

var resultIsString1 = condString ? exprString1 : exprString2;
>resultIsString1 : string
>类型别名 :=> 文字
>condString ? exprString1 : exprString2 : string
>类型别名 :=> 文字
>condString : string
>类型别名 :=> 文字
>exprString1 : string
>类型别名 :=> 文字
>exprString2 : string
>类型别名 :=> 文字

var resultIsObject1 = condString ? exprIsObject1 : exprIsObject2;
>resultIsObject1 : Object
>condString ? exprIsObject1 : exprIsObject2 : Object
>condString : string
>类型别名 :=> 文字
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean1 = condString ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean1 : string | boolean
>condString ? exprString1 : exprBoolean1 : string | boolean
>condString : string
>类型别名 :=> 文字
>exprString1 : string
>类型别名 :=> 文字
>exprBoolean1 : boolean
>类型别名 :=> 真假

var resultIsAny2 = "" ? exprAny1 : exprAny2;
>resultIsAny2 : any
>类型别名 :=> 任意
>"" ? exprAny1 : exprAny2 : any
>类型别名 :=> 任意
>"" : ""
>exprAny1 : any
>类型别名 :=> 任意
>exprAny2 : any
>类型别名 :=> 任意

var resultIsBoolean2 = "string" ? exprBoolean1 : exprBoolean2;
>resultIsBoolean2 : boolean
>类型别名 :=> 真假
>"string" ? exprBoolean1 : exprBoolean2 : boolean
>类型别名 :=> 真假
>"string" : "string"
>exprBoolean1 : boolean
>类型别名 :=> 真假
>exprBoolean2 : boolean
>类型别名 :=> 真假

var resultIsNumber2 = 'c' ? exprNumber1 : exprNumber2;
>resultIsNumber2 : number
>类型别名 :=> 数字
>'c' ? exprNumber1 : exprNumber2 : number
>类型别名 :=> 数字
>'c' : "c"
>exprNumber1 : number
>类型别名 :=> 数字
>exprNumber2 : number
>类型别名 :=> 数字

var resultIsString2 = 'string' ? exprString1 : exprString2;
>resultIsString2 : string
>类型别名 :=> 文字
>'string' ? exprString1 : exprString2 : string
>类型别名 :=> 文字
>'string' : "string"
>exprString1 : string
>类型别名 :=> 文字
>exprString2 : string
>类型别名 :=> 文字

var resultIsObject2 = "  " ? exprIsObject1 : exprIsObject2;
>resultIsObject2 : Object
>"  " ? exprIsObject1 : exprIsObject2 : Object
>"  " : "  "
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean2 = "hello" ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean2 : string | boolean
>"hello" ? exprString1 : exprBoolean1 : string | boolean
>"hello" : "hello"
>exprString1 : string
>类型别名 :=> 文字
>exprBoolean1 : boolean
>类型别名 :=> 真假

var resultIsAny3 = typeof condString ? exprAny1 : exprAny2;
>resultIsAny3 : any
>类型别名 :=> 任意
>typeof condString ? exprAny1 : exprAny2 : any
>类型别名 :=> 任意
>typeof condString : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>condString : string
>类型别名 :=> 文字
>exprAny1 : any
>类型别名 :=> 任意
>exprAny2 : any
>类型别名 :=> 任意

var resultIsBoolean3 = condString.toUpperCase ? exprBoolean1 : exprBoolean2;
>resultIsBoolean3 : boolean
>类型别名 :=> 真假
>condString.toUpperCase ? exprBoolean1 : exprBoolean2 : boolean
>类型别名 :=> 真假
>condString.toUpperCase : () => string
>condString : string
>类型别名 :=> 文字
>toUpperCase : () => string
>exprBoolean1 : boolean
>类型别名 :=> 真假
>exprBoolean2 : boolean
>类型别名 :=> 真假

var resultIsNumber3 = condString + "string" ? exprNumber1 : exprNumber2;
>resultIsNumber3 : number
>类型别名 :=> 数字
>condString + "string" ? exprNumber1 : exprNumber2 : number
>类型别名 :=> 数字
>condString + "string" : string
>类型别名 :=> 文字
>condString : string
>类型别名 :=> 文字
>"string" : "string"
>exprNumber1 : number
>类型别名 :=> 数字
>exprNumber2 : number
>类型别名 :=> 数字

var resultIsString3 = foo() ? exprString1 : exprString2;
>resultIsString3 : string
>类型别名 :=> 文字
>foo() ? exprString1 : exprString2 : string
>类型别名 :=> 文字
>foo() : string
>类型别名 :=> 文字
>foo : () => string
>exprString1 : string
>类型别名 :=> 文字
>exprString2 : string
>类型别名 :=> 文字

var resultIsObject3 = array[1] ? exprIsObject1 : exprIsObject2;
>resultIsObject3 : Object
>array[1] ? exprIsObject1 : exprIsObject2 : Object
>array[1] : string
>类型别名 :=> 文字
>array : string[]
>1 : 1
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean3 = typeof condString ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean3 : string | boolean
>typeof condString ? exprString1 : exprBoolean1 : string | boolean
>typeof condString : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>condString : string
>类型别名 :=> 文字
>exprString1 : string
>类型别名 :=> 文字
>exprBoolean1 : boolean
>类型别名 :=> 真假

var resultIsStringOrBoolean4 = condString.toUpperCase ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean4 : string | boolean
>condString.toUpperCase ? exprString1 : exprBoolean1 : string | boolean
>condString.toUpperCase : () => string
>condString : string
>类型别名 :=> 文字
>toUpperCase : () => string
>exprString1 : string
>类型别名 :=> 文字
>exprBoolean1 : boolean
>类型别名 :=> 真假

