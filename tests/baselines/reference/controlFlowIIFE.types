=== tests/cases/conformance/controlFlow/controlFlowIIFE.ts ===
declare function getStringOrNumber(): string | number;
>getStringOrNumber : () => 文字 | 数字

function f1() {
>f1 : () => 无值

    let x = getStringOrNumber();
>x : 文字 | 数字
>getStringOrNumber() : 文字 | 数字
>getStringOrNumber : () => 文字 | 数字

    if (typeof x === "string") {
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        let n = function() {
>n : 数字
>类型别名 :=> 数字
>function() {            return x.length;        }() : 数字
>类型别名 :=> 数字
>function() {            return x.length;        } : () => 数字

            return x.length;
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

        }();
    }
}

function f2() {
>f2 : () => 无值

    let x = getStringOrNumber();
>x : 文字 | 数字
>getStringOrNumber() : 文字 | 数字
>getStringOrNumber : () => 文字 | 数字

    if (typeof x === "string") {
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        let n = (function() {
>n : 数字
>类型别名 :=> 数字
>(function() {            return x.length;        })() : 数字
>类型别名 :=> 数字
>(function() {            return x.length;        }) : () => 数字
>function() {            return x.length;        } : () => 数字

            return x.length;
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

        })();
    }
}

function f3() {
>f3 : () => 无值

    let x = getStringOrNumber();
>x : 文字 | 数字
>getStringOrNumber() : 文字 | 数字
>getStringOrNumber : () => 文字 | 数字

    let y: number;
>y : 数字
>类型别名 :=> 数字

    if (typeof x === "string") {
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        let n = (z => x.length + y + z)(y = 1);
>n : 数字
>类型别名 :=> 数字
>(z => x.length + y + z)(y = 1) : 数字
>类型别名 :=> 数字
>(z => x.length + y + z) : (z: 数字) => 数字
>z => x.length + y + z : (z: 数字) => 数字
>z : 数字
>类型别名 :=> 数字
>x.length + y + z : 数字
>类型别名 :=> 数字
>x.length + y : 数字
>类型别名 :=> 数字
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
>y = 1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1
    }
}

// Repros from #8381

let maybeNumber: number | undefined;
>maybeNumber : 数字 | 未定

(function () {
>(function () {    maybeNumber = 1;})() : 无值
>类型别名 :=> 无值
>(function () {    maybeNumber = 1;}) : () => 无值
>function () {    maybeNumber = 1;} : () => 无值

    maybeNumber = 1;
>maybeNumber = 1 : 1
>maybeNumber : 数字 | 未定
>1 : 1

})();
maybeNumber++;
>maybeNumber++ : 数字
>类型别名 :=> 数字
>maybeNumber : 数字
>类型别名 :=> 数字

if (maybeNumber !== undefined) {
>maybeNumber !== undefined : 真假
>类型别名 :=> 真假
>maybeNumber : 数字
>类型别名 :=> 数字
>undefined : 未定
>类型别名 :=> 未定

    maybeNumber++;
>maybeNumber++ : 数字
>类型别名 :=> 数字
>maybeNumber : 数字
>类型别名 :=> 数字
}

let test: string | undefined;
>test : 文字 | 未定

if (!test) {
>!test : 真假
>类型别名 :=> 真假
>test : 文字 | 未定

    throw new Error('Test is not defined');
>new Error('Test is not defined') : Error
>Error : ErrorConstructor
>'Test is not defined' : "Test is not defined"
}
(() => {
>(() => {    test.slice(1); // No error})() : 无值
>类型别名 :=> 无值
>(() => {    test.slice(1); // No error}) : () => 无值
>() => {    test.slice(1); // No error} : () => 无值

    test.slice(1); // No error
>test.slice(1) : 文字
>类型别名 :=> 文字
>test.slice : (start?: 数字 | 未定, end?: 数字 | 未定) => 文字
>test : 文字
>类型别名 :=> 文字
>slice : (start?: 数字 | 未定, end?: 数字 | 未定) => 文字
>1 : 1

})();
