=== tests/cases/conformance/scanner/ecmascript5/scannertest1.ts ===
///<reference path='References.ts' />

class CharacterInfo {
>CharacterInfo : CharacterInfo

    public static isDecimalDigit(c: number): boolean {
>isDecimalDigit : (c: 数字) => 真假
>c : 数字
>类型别名 :=> 数字

        return c >= CharacterCodes._0 && c <= CharacterCodes._9;
>c >= CharacterCodes._0 && c <= CharacterCodes._9 : 真假
>类型别名 :=> 真假
>c >= CharacterCodes._0 : 真假
>类型别名 :=> 真假
>c : 数字
>类型别名 :=> 数字
>CharacterCodes._0 : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>_0 : 任意
>类型别名 :=> 任意
>c <= CharacterCodes._9 : 真假
>类型别名 :=> 真假
>c : 数字
>类型别名 :=> 数字
>CharacterCodes._9 : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>_9 : 任意
>类型别名 :=> 任意
    }

    public static isHexDigit(c: number): boolean {
>isHexDigit : (c: 数字) => 真假
>c : 数字
>类型别名 :=> 数字

        return isDecimalDigit(c) ||
>isDecimalDigit(c) ||               (c >= CharacterCodes.A && c <= CharacterCodes.F) ||               (c >= CharacterCodes.a && c <= CharacterCodes.f) : 任意
>类型别名 :=> 任意
>isDecimalDigit(c) ||               (c >= CharacterCodes.A && c <= CharacterCodes.F) : 任意
>类型别名 :=> 任意
>isDecimalDigit(c) : 任意
>类型别名 :=> 任意
>isDecimalDigit : 任意
>类型别名 :=> 任意
>c : 数字
>类型别名 :=> 数字

               (c >= CharacterCodes.A && c <= CharacterCodes.F) ||
>(c >= CharacterCodes.A && c <= CharacterCodes.F) : 真假
>类型别名 :=> 真假
>c >= CharacterCodes.A && c <= CharacterCodes.F : 真假
>类型别名 :=> 真假
>c >= CharacterCodes.A : 真假
>类型别名 :=> 真假
>c : 数字
>类型别名 :=> 数字
>CharacterCodes.A : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>A : 任意
>类型别名 :=> 任意
>c <= CharacterCodes.F : 真假
>类型别名 :=> 真假
>c : 数字
>类型别名 :=> 数字
>CharacterCodes.F : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>F : 任意
>类型别名 :=> 任意

               (c >= CharacterCodes.a && c <= CharacterCodes.f);
>(c >= CharacterCodes.a && c <= CharacterCodes.f) : 真假
>类型别名 :=> 真假
>c >= CharacterCodes.a && c <= CharacterCodes.f : 真假
>类型别名 :=> 真假
>c >= CharacterCodes.a : 真假
>类型别名 :=> 真假
>c : 数字
>类型别名 :=> 数字
>CharacterCodes.a : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>c <= CharacterCodes.f : 真假
>类型别名 :=> 真假
>c : 数字
>类型别名 :=> 数字
>CharacterCodes.f : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>f : 任意
>类型别名 :=> 任意
    }

    public static hexValue(c: number): number {
>hexValue : (c: 数字) => 数字
>c : 数字
>类型别名 :=> 数字

        Debug.assert(isHexDigit(c));
>Debug.assert(isHexDigit(c)) : 任意
>类型别名 :=> 任意
>Debug.assert : 任意
>类型别名 :=> 任意
>Debug : 任意
>类型别名 :=> 任意
>assert : 任意
>类型别名 :=> 任意
>isHexDigit(c) : 任意
>类型别名 :=> 任意
>isHexDigit : 任意
>类型别名 :=> 任意
>c : 数字
>类型别名 :=> 数字

        return isDecimalDigit(c)
>isDecimalDigit(c)            ? (c - CharacterCodes._0)            : (c >= CharacterCodes.A && c <= CharacterCodes.F)                ? c - CharacterCodes.A + 10                : c - CharacterCodes.a + 10 : 数字
>类型别名 :=> 数字
>isDecimalDigit(c) : 任意
>类型别名 :=> 任意
>isDecimalDigit : 任意
>类型别名 :=> 任意
>c : 数字
>类型别名 :=> 数字

            ? (c - CharacterCodes._0)
>(c - CharacterCodes._0) : 数字
>类型别名 :=> 数字
>c - CharacterCodes._0 : 数字
>类型别名 :=> 数字
>c : 数字
>类型别名 :=> 数字
>CharacterCodes._0 : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>_0 : 任意
>类型别名 :=> 任意

            : (c >= CharacterCodes.A && c <= CharacterCodes.F)
>(c >= CharacterCodes.A && c <= CharacterCodes.F)                ? c - CharacterCodes.A + 10                : c - CharacterCodes.a + 10 : 数字
>类型别名 :=> 数字
>(c >= CharacterCodes.A && c <= CharacterCodes.F) : 真假
>类型别名 :=> 真假
>c >= CharacterCodes.A && c <= CharacterCodes.F : 真假
>类型别名 :=> 真假
>c >= CharacterCodes.A : 真假
>类型别名 :=> 真假
>c : 数字
>类型别名 :=> 数字
>CharacterCodes.A : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>A : 任意
>类型别名 :=> 任意
>c <= CharacterCodes.F : 真假
>类型别名 :=> 真假
>c : 数字
>类型别名 :=> 数字
>CharacterCodes.F : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>F : 任意
>类型别名 :=> 任意

                ? c - CharacterCodes.A + 10
>c - CharacterCodes.A + 10 : 数字
>类型别名 :=> 数字
>c - CharacterCodes.A : 数字
>类型别名 :=> 数字
>c : 数字
>类型别名 :=> 数字
>CharacterCodes.A : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>A : 任意
>类型别名 :=> 任意
>10 : 10

                : c - CharacterCodes.a + 10;
>c - CharacterCodes.a + 10 : 数字
>类型别名 :=> 数字
>c - CharacterCodes.a : 数字
>类型别名 :=> 数字
>c : 数字
>类型别名 :=> 数字
>CharacterCodes.a : 任意
>类型别名 :=> 任意
>CharacterCodes : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>10 : 10
    }
}


