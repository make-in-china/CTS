=== tests/cases/compiler/ipromise4.ts ===
declare module Windows.Foundation {
>Windows : 任意
>类型别名 :=> 任意
>Foundation : 任意
>类型别名 :=> 任意

    export interface IPromise<T> {
>IPromise : IPromise<T>
>T : T

        then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>U : U
>success : (value: T) => IPromise<U>
>value : T
>T : T
>IPromise : IPromise<T>
>U : U
>error : (error: 任意) => IPromise<U>
>error : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>Windows : 任意
>类型别名 :=> 任意
>Foundation : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

        then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>U : U
>success : (value: T) => IPromise<U>
>value : T
>T : T
>IPromise : IPromise<T>
>U : U
>error : (error: 任意) => U
>error : 任意
>类型别名 :=> 任意
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>Windows : 任意
>类型别名 :=> 任意
>Foundation : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

        then<U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>U : U
>success : (value: T) => U
>value : T
>T : T
>U : U
>error : (error: 任意) => IPromise<U>
>error : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>Windows : 任意
>类型别名 :=> 任意
>Foundation : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

        then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => IPromise<U>, progress?: (progress: 任意) => 无值): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): IPromise<U>; }
>U : U
>success : (value: T) => U
>value : T
>T : T
>U : U
>error : (error: 任意) => U
>error : 任意
>类型别名 :=> 任意
>U : U
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
>Windows : 任意
>类型别名 :=> 任意
>Foundation : 任意
>类型别名 :=> 任意
>IPromise : IPromise<T>
>U : U

        done? <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void ): void;
>done : <U>(success?: (value: T) => 任意, error?: (error: 任意) => 任意, progress?: (progress: 任意) => 无值) => 无值
>U : U
>success : (value: T) => 任意
>value : T
>T : T
>error : (error: 任意) => 任意
>error : 任意
>类型别名 :=> 任意
>progress : (progress: 任意) => 无值
>progress : 任意
>类型别名 :=> 任意
    }
}
 
var p: Windows.Foundation.IPromise<number> = null;
>p : Windows.Foundation.IPromise<数字>
>Windows : 任意
>类型别名 :=> 任意
>Foundation : 任意
>类型别名 :=> 任意
>IPromise : Windows.Foundation.IPromise<T>
>null : 空值
>类型别名 :=> 空值
 
p.then(function (x) { } ); // should not error
>p.then(function (x) { } ) : Windows.Foundation.IPromise<无值>
>p.then : { <U>(success?: (value: 数字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; }
>p : Windows.Foundation.IPromise<数字>
>then : { <U>(success?: (value: 数字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; }
>function (x) { } : (x: 数字) => 无值
>x : 数字
>类型别名 :=> 数字

p.then(function (x) { return "hello"; } ).then(function (x) { return x } ); // should not error
>p.then(function (x) { return "hello"; } ).then(function (x) { return x } ) : Windows.Foundation.IPromise<文字>
>p.then(function (x) { return "hello"; } ).then : { <U>(success?: (value: 文字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 文字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; }
>p.then(function (x) { return "hello"; } ) : Windows.Foundation.IPromise<文字>
>p.then : { <U>(success?: (value: 数字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; }
>p : Windows.Foundation.IPromise<数字>
>then : { <U>(success?: (value: 数字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 数字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; }
>function (x) { return "hello"; } : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>"hello" : "hello"
>then : { <U>(success?: (value: 文字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 文字) => Windows.Foundation.IPromise<U>, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => Windows.Foundation.IPromise<U>, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; <U>(success?: (value: 文字) => U, error?: (error: 任意) => U, progress?: (progress: 任意) => 无值): Windows.Foundation.IPromise<U>; }
>function (x) { return x } : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
 

