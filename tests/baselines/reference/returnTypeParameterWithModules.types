=== tests/cases/compiler/returnTypeParameterWithModules.ts ===
module M1 {
>M1 : 类为 M1

    export function reduce<A>(ar, f, e?): Array<A> {
>reduce : <A>(ar: 任意, f: 任意, e?: 任意) => A[]
>A : A
>ar : 任意
>类型别名 :=> 任意
>f : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
>Array : T[]
>A : A

        return Array.prototype.reduce.apply(ar, e ? [f, e] : [f]);
>Array.prototype.reduce.apply(ar, e ? [f, e] : [f]) : 任意
>类型别名 :=> 任意
>Array.prototype.reduce.apply : (this: Function, thisArg: 任意, argArray?: 任意) => 任意
>Array.prototype.reduce : { (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意): 任意; (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意, initialValue: 任意): 任意; <U>(callbackfn: (previousValue: U, currentValue: 任意, currentIndex: 数字, array: 任意[]) => U, initialValue: U): U; }
>Array.prototype : 任意[]
>Array : ArrayConstructor
>prototype : 任意[]
>reduce : { (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意): 任意; (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意, initialValue: 任意): 任意; <U>(callbackfn: (previousValue: U, currentValue: 任意, currentIndex: 数字, array: 任意[]) => U, initialValue: U): U; }
>apply : (this: Function, thisArg: 任意, argArray?: 任意) => 任意
>ar : 任意
>类型别名 :=> 任意
>e ? [f, e] : [f] : 任意[]
>e : 任意
>类型别名 :=> 任意
>[f, e] : 任意[]
>f : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
>[f] : 任意[]
>f : 任意
>类型别名 :=> 任意

    };
};
module M2 {
>M2 : 类为 M2

  import A = M1
>A : 类为 A
>M1 : 类为 A

  export function compose() {
>compose : () => 无值

        A.reduce(arguments, compose2);
>A.reduce(arguments, compose2) : {}[]
>A.reduce : <A>(ar: 任意, f: 任意, e?: 任意) => A[]
>A : 类为 A
>reduce : <A>(ar: 任意, f: 任意, e?: 任意) => A[]
>arguments : IArguments
>compose2 : <B, C, D>(g: (x: B) => C, f: (x: D) => B) => (x: D) => C

    };
    export function compose2<B, C, D>(g: (x: B) => C, f: (x: D) => B): (x: D) => C {
>compose2 : <B, C, D>(g: (x: B) => C, f: (x: D) => B) => (x: D) => C
>B : B
>C : C
>D : D
>g : (x: B) => C
>x : B
>B : B
>C : C
>f : (x: D) => B
>x : D
>D : D
>B : B
>x : D
>D : D
>C : C

    return function (x) { return g(f(x)); }
>function (x) { return g(f(x)); } : (x: D) => C
>x : D
>g(f(x)) : C
>g : (x: B) => C
>f(x) : B
>f : (x: D) => B
>x : D

  };
};
