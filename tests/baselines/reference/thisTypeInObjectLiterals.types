=== tests/cases/conformance/types/thisType/thisTypeInObjectLiterals.ts ===
let o = {
>o : { d: 文字; m(): 数字; f: () => 数字; }
>{    d: "bar",    m() {        return this.d.length;    },    f: function() {        return this.d.length;    }} : { d: 文字; m(): 数字; f: () => 数字; }

    d: "bar",
>d : 文字
>类型别名 :=> 文字
>"bar" : "bar"

    m() {
>m : () => 数字

        return this.d.length;
>this.d.length : 数字
>类型别名 :=> 数字
>this.d : 文字
>类型别名 :=> 文字
>this : { d: 文字; m(): 数字; f: () => 数字; }
>d : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

    },
    f: function() {
>f : () => 数字
>function() {        return this.d.length;    } : () => 数字

        return this.d.length;
>this.d.length : 数字
>类型别名 :=> 数字
>this.d : 文字
>类型别名 :=> 文字
>this : { d: 文字; m(): 数字; f: () => 数字; }
>d : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
    }
}

let mutuallyRecursive = {
>mutuallyRecursive : { a: 数字; start(): 数字; passthrough(n: 数字): 数字; sub1(n: 数字): 数字; }
>{    a: 100,    start() {        return this.passthrough(this.a);    },    passthrough(n: number) {        return this.sub1(n);    },    sub1(n: number): number {        if (n > 0) {            return this.passthrough(n - 1);        }        return n;    }} : { a: 数字; start(): 数字; passthrough(n: 数字): 数字; sub1(n: 数字): 数字; }

    a: 100,
>a : 数字
>类型别名 :=> 数字
>100 : 100

    start() {
>start : () => 数字

        return this.passthrough(this.a);
>this.passthrough(this.a) : 数字
>类型别名 :=> 数字
>this.passthrough : (n: 数字) => 数字
>this : { a: 数字; start(): 数字; passthrough(n: 数字): 数字; sub1(n: 数字): 数字; }
>passthrough : (n: 数字) => 数字
>this.a : 数字
>类型别名 :=> 数字
>this : { a: 数字; start(): 数字; passthrough(n: 数字): 数字; sub1(n: 数字): 数字; }
>a : 数字
>类型别名 :=> 数字

    },
    passthrough(n: number) {
>passthrough : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字

        return this.sub1(n);
>this.sub1(n) : 数字
>类型别名 :=> 数字
>this.sub1 : (n: 数字) => 数字
>this : { a: 数字; start(): 数字; passthrough(n: 数字): 数字; sub1(n: 数字): 数字; }
>sub1 : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字

    },
    sub1(n: number): number {
>sub1 : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字

        if (n > 0) {
>n > 0 : 真假
>类型别名 :=> 真假
>n : 数字
>类型别名 :=> 数字
>0 : 0

            return this.passthrough(n - 1);
>this.passthrough(n - 1) : 数字
>类型别名 :=> 数字
>this.passthrough : (n: 数字) => 数字
>this : { a: 数字; start(): 数字; passthrough(n: 数字): 数字; sub1(n: 数字): 数字; }
>passthrough : (n: 数字) => 数字
>n - 1 : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字
>1 : 1
        }
        return n;
>n : 数字
>类型别名 :=> 数字
    }
}
var i: number = mutuallyRecursive.start();
>i : 数字
>类型别名 :=> 数字
>mutuallyRecursive.start() : 数字
>类型别名 :=> 数字
>mutuallyRecursive.start : () => 数字
>mutuallyRecursive : { a: 数字; start(): 数字; passthrough(n: 数字): 数字; sub1(n: 数字): 数字; }
>start : () => 数字

interface I {
>I : I

    a: number;
>a : 数字
>类型别名 :=> 数字

    start(): number;
>start : () => 数字

    passthrough(n: number): number;
>passthrough : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字

    sub1(n: number): number;
>sub1 : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
}
var impl: I = mutuallyRecursive;
>impl : I
>I : I
>mutuallyRecursive : { a: 数字; start(): 数字; passthrough(n: 数字): 数字; sub1(n: 数字): 数字; }

