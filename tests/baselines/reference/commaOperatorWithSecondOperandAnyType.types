=== tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandAnyType.ts ===
var ANY: any;
>ANY : 任意
>类型别名 :=> 任意

var BOOLEAN: boolean;
>BOOLEAN : 真假
>类型别名 :=> 真假

var NUMBER: number;
>NUMBER : 数字
>类型别名 :=> 数字

var STRING: string;
>STRING : 文字
>类型别名 :=> 文字

var OBJECT: Object;
>OBJECT : Object
>Object : Object

//The second operand type is any
ANY, ANY;
>ANY, ANY : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意

BOOLEAN, ANY;
>BOOLEAN, ANY : 任意
>类型别名 :=> 任意
>BOOLEAN : 真假
>类型别名 :=> 真假
>ANY : 任意
>类型别名 :=> 任意

NUMBER, ANY;
>NUMBER, ANY : 任意
>类型别名 :=> 任意
>NUMBER : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意

STRING, ANY;
>STRING, ANY : 任意
>类型别名 :=> 任意
>STRING : 文字
>类型别名 :=> 文字
>ANY : 任意
>类型别名 :=> 任意

OBJECT, ANY;
>OBJECT, ANY : 任意
>类型别名 :=> 任意
>OBJECT : Object
>ANY : 任意
>类型别名 :=> 任意

//Return type is any
var resultIsAny1 = (ANY, ANY);
>resultIsAny1 : 任意
>类型别名 :=> 任意
>(ANY, ANY) : 任意
>类型别名 :=> 任意
>ANY, ANY : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意

var resultIsAny2 = (BOOLEAN, ANY);
>resultIsAny2 : 任意
>类型别名 :=> 任意
>(BOOLEAN, ANY) : 任意
>类型别名 :=> 任意
>BOOLEAN, ANY : 任意
>类型别名 :=> 任意
>BOOLEAN : 真假
>类型别名 :=> 真假
>ANY : 任意
>类型别名 :=> 任意

var resultIsAny3 = (NUMBER, ANY);
>resultIsAny3 : 任意
>类型别名 :=> 任意
>(NUMBER, ANY) : 任意
>类型别名 :=> 任意
>NUMBER, ANY : 任意
>类型别名 :=> 任意
>NUMBER : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意

var resultIsAny4 = (STRING, ANY);
>resultIsAny4 : 任意
>类型别名 :=> 任意
>(STRING, ANY) : 任意
>类型别名 :=> 任意
>STRING, ANY : 任意
>类型别名 :=> 任意
>STRING : 文字
>类型别名 :=> 文字
>ANY : 任意
>类型别名 :=> 任意

var resultIsAny5 = (OBJECT, ANY);
>resultIsAny5 : 任意
>类型别名 :=> 任意
>(OBJECT, ANY) : 任意
>类型别名 :=> 任意
>OBJECT, ANY : 任意
>类型别名 :=> 任意
>OBJECT : Object
>ANY : 任意
>类型别名 :=> 任意

//Literal and expression
var x: any;
>x : 任意
>类型别名 :=> 任意

1, ANY;
>1, ANY : 任意
>类型别名 :=> 任意
>1 : 1
>ANY : 任意
>类型别名 :=> 任意

++NUMBER, ANY;
>++NUMBER, ANY : 任意
>类型别名 :=> 任意
>++NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意

"string", [null, 1];
>"string", [null, 1] : 数字[]
>"string" : "string"
>[null, 1] : 数字[]
>null : 空值
>类型别名 :=> 空值
>1 : 1

"string".charAt(0), [null, 1];
>"string".charAt(0), [null, 1] : 数字[]
>"string".charAt(0) : 文字
>类型别名 :=> 文字
>"string".charAt : (pos: 数字) => 文字
>"string" : "string"
>charAt : (pos: 数字) => 文字
>0 : 0
>[null, 1] : 数字[]
>null : 空值
>类型别名 :=> 空值
>1 : 1

true, x("any");
>true, x("any") : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>x("any") : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>"any" : "any"

!BOOLEAN, x.doSomeThing();
>!BOOLEAN, x.doSomeThing() : 任意
>类型别名 :=> 任意
>!BOOLEAN : 真假
>类型别名 :=> 真假
>BOOLEAN : 真假
>类型别名 :=> 真假
>x.doSomeThing() : 任意
>类型别名 :=> 任意
>x.doSomeThing : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>doSomeThing : 任意
>类型别名 :=> 任意

var resultIsAny6 = (1, ANY);
>resultIsAny6 : 任意
>类型别名 :=> 任意
>(1, ANY) : 任意
>类型别名 :=> 任意
>1, ANY : 任意
>类型别名 :=> 任意
>1 : 1
>ANY : 任意
>类型别名 :=> 任意

var resultIsAny7 = (++NUMBER, ANY);
>resultIsAny7 : 任意
>类型别名 :=> 任意
>(++NUMBER, ANY) : 任意
>类型别名 :=> 任意
>++NUMBER, ANY : 任意
>类型别名 :=> 任意
>++NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意

var resultIsAny8 = ("string", null);
>resultIsAny8 : 任意
>类型别名 :=> 任意
>("string", null) : 空值
>类型别名 :=> 空值
>"string", null : 空值
>类型别名 :=> 空值
>"string" : "string"
>null : 空值
>类型别名 :=> 空值

var resultIsAny9 = ("string".charAt(0), undefined);
>resultIsAny9 : 任意
>类型别名 :=> 任意
>("string".charAt(0), undefined) : 未定
>类型别名 :=> 未定
>"string".charAt(0), undefined : 未定
>类型别名 :=> 未定
>"string".charAt(0) : 文字
>类型别名 :=> 文字
>"string".charAt : (pos: 数字) => 文字
>"string" : "string"
>charAt : (pos: 数字) => 文字
>0 : 0
>undefined : 未定
>类型别名 :=> 未定

var resultIsAny10 = (true, x("any"));
>resultIsAny10 : 任意
>类型别名 :=> 任意
>(true, x("any")) : 任意
>类型别名 :=> 任意
>true, x("any") : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>x("any") : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>"any" : "any"

var resultIsAny11 = (!BOOLEAN, x.doSomeThing());
>resultIsAny11 : 任意
>类型别名 :=> 任意
>(!BOOLEAN, x.doSomeThing()) : 任意
>类型别名 :=> 任意
>!BOOLEAN, x.doSomeThing() : 任意
>类型别名 :=> 任意
>!BOOLEAN : 真假
>类型别名 :=> 真假
>BOOLEAN : 真假
>类型别名 :=> 真假
>x.doSomeThing() : 任意
>类型别名 :=> 任意
>x.doSomeThing : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>doSomeThing : 任意
>类型别名 :=> 任意

