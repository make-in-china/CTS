=== tests/cases/conformance/interfaces/declarationMerging/mergeTwoInterfaces2.ts ===
// two interfaces with the same root module should merge

// root module now multiple module declarations
module M2 {
>M2 : 类为 M2

    export interface A {
>A : A

        foo: string;
>foo : 文字
>类型别名 :=> 文字
    }

    var a: A;
>a : A
>A : A

    var r1 = a.foo
>r1 : 文字
>类型别名 :=> 文字
>a.foo : 文字
>类型别名 :=> 文字
>a : A
>foo : 文字
>类型别名 :=> 文字

    var r2 = a.bar;
>r2 : 数字
>类型别名 :=> 数字
>a.bar : 数字
>类型别名 :=> 数字
>a : A
>bar : 数字
>类型别名 :=> 数字
}

module M2 {
>M2 : 类为 M2

    export interface A {
>A : A

        bar: number;
>bar : 数字
>类型别名 :=> 数字
    }

    var a: A;
>a : A
>A : A

    var r1 = a.foo
>r1 : 文字
>类型别名 :=> 文字
>a.foo : 文字
>类型别名 :=> 文字
>a : A
>foo : 文字
>类型别名 :=> 文字

    var r2 = a.bar;
>r2 : 数字
>类型别名 :=> 数字
>a.bar : 数字
>类型别名 :=> 数字
>a : A
>bar : 数字
>类型别名 :=> 数字
}

// same as above but with an additional level of nesting
module M2 {
>M2 : 类为 M2

    export module M3 {
>M3 : 类为 M3

        export interface A {
>A : A

            foo: string;
>foo : 文字
>类型别名 :=> 文字
        }

        var a: A;
>a : A
>A : A

        var r1 = a.foo
>r1 : 文字
>类型别名 :=> 文字
>a.foo : 文字
>类型别名 :=> 文字
>a : A
>foo : 文字
>类型别名 :=> 文字

        var r2 = a.bar;
>r2 : 数字
>类型别名 :=> 数字
>a.bar : 数字
>类型别名 :=> 数字
>a : A
>bar : 数字
>类型别名 :=> 数字
    }
}

module M2 {
>M2 : 类为 M2

    export module M3 {
>M3 : 类为 M3

        export interface A {
>A : A

            bar: number;
>bar : 数字
>类型别名 :=> 数字
        }

        var a: A;
>a : A
>A : A

        var r1 = a.foo
>r1 : 文字
>类型别名 :=> 文字
>a.foo : 文字
>类型别名 :=> 文字
>a : A
>foo : 文字
>类型别名 :=> 文字

        var r2 = a.bar;
>r2 : 数字
>类型别名 :=> 数字
>a.bar : 数字
>类型别名 :=> 数字
>a : A
>bar : 数字
>类型别名 :=> 数字
    }
}
