=== tests/cases/compiler/noImplicitAnyIndexingSuppressed.ts ===
enum MyEmusEnum {
>MyEmusEnum : MyEmusEnum

    emu
>emu : MyEmusEnum
}

// Should be okay; should be a string.
var strRepresentation1 = MyEmusEnum[0]
>strRepresentation1 : string
>类型别名 :=> 文字
>MyEmusEnum[0] : string
>类型别名 :=> 文字
>MyEmusEnum : typeof MyEmusEnum
>0 : 0

// Should be okay; should be a string.
var strRepresentation2 = MyEmusEnum[MyEmusEnum.emu]
>strRepresentation2 : string
>类型别名 :=> 文字
>MyEmusEnum[MyEmusEnum.emu] : string
>类型别名 :=> 文字
>MyEmusEnum : typeof MyEmusEnum
>MyEmusEnum.emu : MyEmusEnum
>MyEmusEnum : typeof MyEmusEnum
>emu : MyEmusEnum

// Should be okay, as we suppress implicit 'any' property access checks
var strRepresentation3 = MyEmusEnum["monehh"];
>strRepresentation3 : any
>类型别名 :=> 任意
>MyEmusEnum["monehh"] : any
>类型别名 :=> 任意
>MyEmusEnum : typeof MyEmusEnum
>"monehh" : "monehh"

// Should be okay; should be a MyEmusEnum
var strRepresentation4 = MyEmusEnum["emu"];
>strRepresentation4 : MyEmusEnum
>MyEmusEnum["emu"] : MyEmusEnum
>MyEmusEnum : typeof MyEmusEnum
>"emu" : "emu"


// Should be okay, as we suppress implicit 'any' property access checks
var x = {}["hi"];
>x : any
>类型别名 :=> 任意
>{}["hi"] : any
>类型别名 :=> 任意
>{} : {}
>"hi" : "hi"

// Should be okay, as we suppress implicit 'any' property access checks
var y = {}[10];
>y : any
>类型别名 :=> 任意
>{}[10] : any
>类型别名 :=> 任意
>{} : {}
>10 : 10

var hi: any = "hi";
>hi : any
>类型别名 :=> 任意
>"hi" : "hi"

var emptyObj = {};
>emptyObj : {}
>{} : {}

// Should be okay, as we suppress implicit 'any' property access checks
var z1 = emptyObj[hi];
>z1 : any
>类型别名 :=> 任意
>emptyObj[hi] : any
>类型别名 :=> 任意
>emptyObj : {}
>hi : any
>类型别名 :=> 任意

var z2 = (<any>emptyObj)[hi];
>z2 : any
>类型别名 :=> 任意
>(<any>emptyObj)[hi] : any
>类型别名 :=> 任意
>(<any>emptyObj) : any
>类型别名 :=> 任意
><any>emptyObj : any
>类型别名 :=> 任意
>emptyObj : {}
>hi : any
>类型别名 :=> 任意

interface MyMap<T> {
>MyMap : MyMap<T>
>T : T

    [key: string]: T;
>key : string
>类型别名 :=> 文字
>T : T
}

var m: MyMap<number> = {
>m : MyMap<number>
>MyMap : MyMap<T>
>{    "0": 0,    "1": 1,    "2": 2,    "Okay that's enough for today.": NaN} : { "0": number; "1": number; "2": number; "Okay that's enough for today.": number; }

    "0": 0,
>0 : 0

    "1": 1,
>1 : 1

    "2": 2,
>2 : 2

    "Okay that's enough for today.": NaN
>NaN : number
>类型别名 :=> 数字

};

var mResult1 = m[MyEmusEnum.emu];
>mResult1 : number
>类型别名 :=> 数字
>m[MyEmusEnum.emu] : number
>类型别名 :=> 数字
>m : MyMap<number>
>MyEmusEnum.emu : MyEmusEnum
>MyEmusEnum : typeof MyEmusEnum
>emu : MyEmusEnum

var mResult2 = m[MyEmusEnum[MyEmusEnum.emu]];
>mResult2 : number
>类型别名 :=> 数字
>m[MyEmusEnum[MyEmusEnum.emu]] : number
>类型别名 :=> 数字
>m : MyMap<number>
>MyEmusEnum[MyEmusEnum.emu] : string
>类型别名 :=> 文字
>MyEmusEnum : typeof MyEmusEnum
>MyEmusEnum.emu : MyEmusEnum
>MyEmusEnum : typeof MyEmusEnum
>emu : MyEmusEnum

var mResult3 = m[hi];
>mResult3 : number
>类型别名 :=> 数字
>m[hi] : number
>类型别名 :=> 数字
>m : MyMap<number>
>hi : any
>类型别名 :=> 任意


