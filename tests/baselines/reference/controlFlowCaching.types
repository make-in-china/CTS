=== tests/cases/compiler/controlFlowCaching.ts ===
// Repro for #8401

function f(dim, offsets, arr, acommon, centerAnchorLimit, g, has, lin) {
>f : (dim: 任意, offsets: 任意, arr: 任意, acommon: 任意, centerAnchorLimit: 任意, g: 任意, has: 任意, lin: 任意) => 无值
>dim : 任意
>类型别名 :=> 任意
>offsets : 任意
>类型别名 :=> 任意
>arr : 任意
>类型别名 :=> 任意
>acommon : 任意
>类型别名 :=> 任意
>centerAnchorLimit : 任意
>类型别名 :=> 任意
>g : 任意
>类型别名 :=> 任意
>has : 任意
>类型别名 :=> 任意
>lin : 任意
>类型别名 :=> 任意

    var isRtl = this._isRtl();  // chart mirroring
>isRtl : 任意
>类型别名 :=> 任意
>this._isRtl() : 任意
>类型别名 :=> 任意
>this._isRtl : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>_isRtl : 任意
>类型别名 :=> 任意

    // prepare variable
    var o = this.opt, ta = this.chart.theme.axis, position = o.position,
>o : 任意
>类型别名 :=> 任意
>this.opt : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>opt : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>this.chart.theme.axis : 任意
>类型别名 :=> 任意
>this.chart.theme : 任意
>类型别名 :=> 任意
>this.chart : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>chart : 任意
>类型别名 :=> 任意
>theme : 任意
>类型别名 :=> 任意
>axis : 任意
>类型别名 :=> 任意
>position : 任意
>类型别名 :=> 任意
>o.position : 任意
>类型别名 :=> 任意
>o : 任意
>类型别名 :=> 任意
>position : 任意
>类型别名 :=> 任意

        leftBottom = position !== "rightOrTop", rotation = o.rotation % 360,
>leftBottom : 真假
>类型别名 :=> 真假
>position !== "rightOrTop" : 真假
>类型别名 :=> 真假
>position : 任意
>类型别名 :=> 任意
>"rightOrTop" : "rightOrTop"
>rotation : 数字
>类型别名 :=> 数字
>o.rotation % 360 : 数字
>类型别名 :=> 数字
>o.rotation : 任意
>类型别名 :=> 任意
>o : 任意
>类型别名 :=> 任意
>rotation : 任意
>类型别名 :=> 任意
>360 : 360

        start, stop, titlePos, titleRotation = 0, titleOffset, axisVector, tickVector, anchorOffset, labelOffset, labelAlign,
>start : 任意
>类型别名 :=> 任意
>stop : 任意
>类型别名 :=> 任意
>titlePos : 任意
>类型别名 :=> 任意
>titleRotation : 数字
>类型别名 :=> 数字
>0 : 0
>titleOffset : 任意
>类型别名 :=> 任意
>axisVector : 任意
>类型别名 :=> 任意
>tickVector : 任意
>类型别名 :=> 任意
>anchorOffset : 任意
>类型别名 :=> 任意
>labelOffset : 任意
>类型别名 :=> 任意
>labelAlign : 任意
>类型别名 :=> 任意

        labelGap = this.chart.theme.axis.tick.labelGap,
>labelGap : 任意
>类型别名 :=> 任意
>this.chart.theme.axis.tick.labelGap : 任意
>类型别名 :=> 任意
>this.chart.theme.axis.tick : 任意
>类型别名 :=> 任意
>this.chart.theme.axis : 任意
>类型别名 :=> 任意
>this.chart.theme : 任意
>类型别名 :=> 任意
>this.chart : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>chart : 任意
>类型别名 :=> 任意
>theme : 任意
>类型别名 :=> 任意
>axis : 任意
>类型别名 :=> 任意
>tick : 任意
>类型别名 :=> 任意
>labelGap : 任意
>类型别名 :=> 任意

        taFont = o.font || (ta.majorTick && ta.majorTick.font) || (ta.tick && ta.tick.font),
>taFont : 任意
>类型别名 :=> 任意
>o.font || (ta.majorTick && ta.majorTick.font) || (ta.tick && ta.tick.font) : 任意
>类型别名 :=> 任意
>o.font || (ta.majorTick && ta.majorTick.font) : 任意
>类型别名 :=> 任意
>o.font : 任意
>类型别名 :=> 任意
>o : 任意
>类型别名 :=> 任意
>font : 任意
>类型别名 :=> 任意
>(ta.majorTick && ta.majorTick.font) : 任意
>类型别名 :=> 任意
>ta.majorTick && ta.majorTick.font : 任意
>类型别名 :=> 任意
>ta.majorTick : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>majorTick : 任意
>类型别名 :=> 任意
>ta.majorTick.font : 任意
>类型别名 :=> 任意
>ta.majorTick : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>majorTick : 任意
>类型别名 :=> 任意
>font : 任意
>类型别名 :=> 任意
>(ta.tick && ta.tick.font) : 任意
>类型别名 :=> 任意
>ta.tick && ta.tick.font : 任意
>类型别名 :=> 任意
>ta.tick : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>tick : 任意
>类型别名 :=> 任意
>ta.tick.font : 任意
>类型别名 :=> 任意
>ta.tick : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>tick : 任意
>类型别名 :=> 任意
>font : 任意
>类型别名 :=> 任意

        taTitleFont = o.titleFont || (ta.title && ta.title.font),
>taTitleFont : 任意
>类型别名 :=> 任意
>o.titleFont || (ta.title && ta.title.font) : 任意
>类型别名 :=> 任意
>o.titleFont : 任意
>类型别名 :=> 任意
>o : 任意
>类型别名 :=> 任意
>titleFont : 任意
>类型别名 :=> 任意
>(ta.title && ta.title.font) : 任意
>类型别名 :=> 任意
>ta.title && ta.title.font : 任意
>类型别名 :=> 任意
>ta.title : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>title : 任意
>类型别名 :=> 任意
>ta.title.font : 任意
>类型别名 :=> 任意
>ta.title : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>title : 任意
>类型别名 :=> 任意
>font : 任意
>类型别名 :=> 任意

        taFontColor = o.fontColor || (ta.majorTick && ta.majorTick.fontColor) || (ta.tick && ta.tick.fontColor) || "black",
>taFontColor : 任意
>类型别名 :=> 任意
>o.fontColor || (ta.majorTick && ta.majorTick.fontColor) || (ta.tick && ta.tick.fontColor) || "black" : 任意
>类型别名 :=> 任意
>o.fontColor || (ta.majorTick && ta.majorTick.fontColor) || (ta.tick && ta.tick.fontColor) : 任意
>类型别名 :=> 任意
>o.fontColor || (ta.majorTick && ta.majorTick.fontColor) : 任意
>类型别名 :=> 任意
>o.fontColor : 任意
>类型别名 :=> 任意
>o : 任意
>类型别名 :=> 任意
>fontColor : 任意
>类型别名 :=> 任意
>(ta.majorTick && ta.majorTick.fontColor) : 任意
>类型别名 :=> 任意
>ta.majorTick && ta.majorTick.fontColor : 任意
>类型别名 :=> 任意
>ta.majorTick : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>majorTick : 任意
>类型别名 :=> 任意
>ta.majorTick.fontColor : 任意
>类型别名 :=> 任意
>ta.majorTick : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>majorTick : 任意
>类型别名 :=> 任意
>fontColor : 任意
>类型别名 :=> 任意
>(ta.tick && ta.tick.fontColor) : 任意
>类型别名 :=> 任意
>ta.tick && ta.tick.fontColor : 任意
>类型别名 :=> 任意
>ta.tick : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>tick : 任意
>类型别名 :=> 任意
>ta.tick.fontColor : 任意
>类型别名 :=> 任意
>ta.tick : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>tick : 任意
>类型别名 :=> 任意
>fontColor : 任意
>类型别名 :=> 任意
>"black" : "black"

        taTitleFontColor = o.titleFontColor || (ta.title && ta.title.fontColor) || "black",
>taTitleFontColor : 任意
>类型别名 :=> 任意
>o.titleFontColor || (ta.title && ta.title.fontColor) || "black" : 任意
>类型别名 :=> 任意
>o.titleFontColor || (ta.title && ta.title.fontColor) : 任意
>类型别名 :=> 任意
>o.titleFontColor : 任意
>类型别名 :=> 任意
>o : 任意
>类型别名 :=> 任意
>titleFontColor : 任意
>类型别名 :=> 任意
>(ta.title && ta.title.fontColor) : 任意
>类型别名 :=> 任意
>ta.title && ta.title.fontColor : 任意
>类型别名 :=> 任意
>ta.title : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>title : 任意
>类型别名 :=> 任意
>ta.title.fontColor : 任意
>类型别名 :=> 任意
>ta.title : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>title : 任意
>类型别名 :=> 任意
>fontColor : 任意
>类型别名 :=> 任意
>"black" : "black"

        taTitleGap = (o.titleGap == 0) ? 0 : o.titleGap || (ta.title && ta.title.gap) || 15,
>taTitleGap : 任意
>类型别名 :=> 任意
>(o.titleGap == 0) ? 0 : o.titleGap || (ta.title && ta.title.gap) || 15 : 任意
>类型别名 :=> 任意
>(o.titleGap == 0) : 真假
>类型别名 :=> 真假
>o.titleGap == 0 : 真假
>类型别名 :=> 真假
>o.titleGap : 任意
>类型别名 :=> 任意
>o : 任意
>类型别名 :=> 任意
>titleGap : 任意
>类型别名 :=> 任意
>0 : 0
>0 : 0
>o.titleGap || (ta.title && ta.title.gap) || 15 : 任意
>类型别名 :=> 任意
>o.titleGap || (ta.title && ta.title.gap) : 任意
>类型别名 :=> 任意
>o.titleGap : 任意
>类型别名 :=> 任意
>o : 任意
>类型别名 :=> 任意
>titleGap : 任意
>类型别名 :=> 任意
>(ta.title && ta.title.gap) : 任意
>类型别名 :=> 任意
>ta.title && ta.title.gap : 任意
>类型别名 :=> 任意
>ta.title : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>title : 任意
>类型别名 :=> 任意
>ta.title.gap : 任意
>类型别名 :=> 任意
>ta.title : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>title : 任意
>类型别名 :=> 任意
>gap : 任意
>类型别名 :=> 任意
>15 : 15

        taTitleOrientation = o.titleOrientation || (ta.title && ta.title.orientation) || "axis",
>taTitleOrientation : 任意
>类型别名 :=> 任意
>o.titleOrientation || (ta.title && ta.title.orientation) || "axis" : 任意
>类型别名 :=> 任意
>o.titleOrientation || (ta.title && ta.title.orientation) : 任意
>类型别名 :=> 任意
>o.titleOrientation : 任意
>类型别名 :=> 任意
>o : 任意
>类型别名 :=> 任意
>titleOrientation : 任意
>类型别名 :=> 任意
>(ta.title && ta.title.orientation) : 任意
>类型别名 :=> 任意
>ta.title && ta.title.orientation : 任意
>类型别名 :=> 任意
>ta.title : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>title : 任意
>类型别名 :=> 任意
>ta.title.orientation : 任意
>类型别名 :=> 任意
>ta.title : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>title : 任意
>类型别名 :=> 任意
>orientation : 任意
>类型别名 :=> 任意
>"axis" : "axis"

        taMajorTick = this.chart.theme.getTick("major", o),
>taMajorTick : 任意
>类型别名 :=> 任意
>this.chart.theme.getTick("major", o) : 任意
>类型别名 :=> 任意
>this.chart.theme.getTick : 任意
>类型别名 :=> 任意
>this.chart.theme : 任意
>类型别名 :=> 任意
>this.chart : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>chart : 任意
>类型别名 :=> 任意
>theme : 任意
>类型别名 :=> 任意
>getTick : 任意
>类型别名 :=> 任意
>"major" : "major"
>o : 任意
>类型别名 :=> 任意

        taMinorTick = this.chart.theme.getTick("minor", o),
>taMinorTick : 任意
>类型别名 :=> 任意
>this.chart.theme.getTick("minor", o) : 任意
>类型别名 :=> 任意
>this.chart.theme.getTick : 任意
>类型别名 :=> 任意
>this.chart.theme : 任意
>类型别名 :=> 任意
>this.chart : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>chart : 任意
>类型别名 :=> 任意
>theme : 任意
>类型别名 :=> 任意
>getTick : 任意
>类型别名 :=> 任意
>"minor" : "minor"
>o : 任意
>类型别名 :=> 任意

        taMicroTick = this.chart.theme.getTick("micro", o),
>taMicroTick : 任意
>类型别名 :=> 任意
>this.chart.theme.getTick("micro", o) : 任意
>类型别名 :=> 任意
>this.chart.theme.getTick : 任意
>类型别名 :=> 任意
>this.chart.theme : 任意
>类型别名 :=> 任意
>this.chart : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>chart : 任意
>类型别名 :=> 任意
>theme : 任意
>类型别名 :=> 任意
>getTick : 任意
>类型别名 :=> 任意
>"micro" : "micro"
>o : 任意
>类型别名 :=> 任意

        taStroke = "stroke" in o ? o.stroke : ta.stroke,
>taStroke : 任意
>类型别名 :=> 任意
>"stroke" in o ? o.stroke : ta.stroke : 任意
>类型别名 :=> 任意
>"stroke" in o : 真假
>类型别名 :=> 真假
>"stroke" : "stroke"
>o : 任意
>类型别名 :=> 任意
>o.stroke : 任意
>类型别名 :=> 任意
>o : 任意
>类型别名 :=> 任意
>stroke : 任意
>类型别名 :=> 任意
>ta.stroke : 任意
>类型别名 :=> 任意
>ta : 任意
>类型别名 :=> 任意
>stroke : 任意
>类型别名 :=> 任意

        size = taFont ? g.normalizedLength(g.splitFontString(taFont).size) : 0,
>size : 任意
>类型别名 :=> 任意
>taFont ? g.normalizedLength(g.splitFontString(taFont).size) : 0 : 任意
>类型别名 :=> 任意
>taFont : 任意
>类型别名 :=> 任意
>g.normalizedLength(g.splitFontString(taFont).size) : 任意
>类型别名 :=> 任意
>g.normalizedLength : 任意
>类型别名 :=> 任意
>g : 任意
>类型别名 :=> 任意
>normalizedLength : 任意
>类型别名 :=> 任意
>g.splitFontString(taFont).size : 任意
>类型别名 :=> 任意
>g.splitFontString(taFont) : 任意
>类型别名 :=> 任意
>g.splitFontString : 任意
>类型别名 :=> 任意
>g : 任意
>类型别名 :=> 任意
>splitFontString : 任意
>类型别名 :=> 任意
>taFont : 任意
>类型别名 :=> 任意
>size : 任意
>类型别名 :=> 任意
>0 : 0

        cosr = Math.abs(Math.cos(rotation * Math.PI / 180)),
>cosr : 数字
>类型别名 :=> 数字
>Math.abs(Math.cos(rotation * Math.PI / 180)) : 数字
>类型别名 :=> 数字
>Math.abs : (x: 数字) => 数字
>Math : Math
>abs : (x: 数字) => 数字
>Math.cos(rotation * Math.PI / 180) : 数字
>类型别名 :=> 数字
>Math.cos : (x: 数字) => 数字
>Math : Math
>cos : (x: 数字) => 数字
>rotation * Math.PI / 180 : 数字
>类型别名 :=> 数字
>rotation * Math.PI : 数字
>类型别名 :=> 数字
>rotation : 数字
>类型别名 :=> 数字
>Math.PI : 数字
>类型别名 :=> 数字
>Math : Math
>PI : 数字
>类型别名 :=> 数字
>180 : 180

        sinr = Math.abs(Math.sin(rotation * Math.PI / 180)),
>sinr : 数字
>类型别名 :=> 数字
>Math.abs(Math.sin(rotation * Math.PI / 180)) : 数字
>类型别名 :=> 数字
>Math.abs : (x: 数字) => 数字
>Math : Math
>abs : (x: 数字) => 数字
>Math.sin(rotation * Math.PI / 180) : 数字
>类型别名 :=> 数字
>Math.sin : (x: 数字) => 数字
>Math : Math
>sin : (x: 数字) => 数字
>rotation * Math.PI / 180 : 数字
>类型别名 :=> 数字
>rotation * Math.PI : 数字
>类型别名 :=> 数字
>rotation : 数字
>类型别名 :=> 数字
>Math.PI : 数字
>类型别名 :=> 数字
>Math : Math
>PI : 数字
>类型别名 :=> 数字
>180 : 180

        tsize = taTitleFont ? g.normalizedLength(g.splitFontString(taTitleFont).size) : 0;
>tsize : 任意
>类型别名 :=> 任意
>taTitleFont ? g.normalizedLength(g.splitFontString(taTitleFont).size) : 0 : 任意
>类型别名 :=> 任意
>taTitleFont : 任意
>类型别名 :=> 任意
>g.normalizedLength(g.splitFontString(taTitleFont).size) : 任意
>类型别名 :=> 任意
>g.normalizedLength : 任意
>类型别名 :=> 任意
>g : 任意
>类型别名 :=> 任意
>normalizedLength : 任意
>类型别名 :=> 任意
>g.splitFontString(taTitleFont).size : 任意
>类型别名 :=> 任意
>g.splitFontString(taTitleFont) : 任意
>类型别名 :=> 任意
>g.splitFontString : 任意
>类型别名 :=> 任意
>g : 任意
>类型别名 :=> 任意
>splitFontString : 任意
>类型别名 :=> 任意
>taTitleFont : 任意
>类型别名 :=> 任意
>size : 任意
>类型别名 :=> 任意
>0 : 0

    if (rotation < 0) {
>rotation < 0 : 真假
>类型别名 :=> 真假
>rotation : 数字
>类型别名 :=> 数字
>0 : 0

        rotation += 360;
>rotation += 360 : 数字
>类型别名 :=> 数字
>rotation : 数字
>类型别名 :=> 数字
>360 : 360
    }
    var cachedLabelW = this._getMaxLabelSize();
>cachedLabelW : 任意
>类型别名 :=> 任意
>this._getMaxLabelSize() : 任意
>类型别名 :=> 任意
>this._getMaxLabelSize : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>_getMaxLabelSize : 任意
>类型别名 :=> 任意

    cachedLabelW = cachedLabelW && cachedLabelW.majLabelW;
>cachedLabelW = cachedLabelW && cachedLabelW.majLabelW : 任意
>类型别名 :=> 任意
>cachedLabelW : 任意
>类型别名 :=> 任意
>cachedLabelW && cachedLabelW.majLabelW : 任意
>类型别名 :=> 任意
>cachedLabelW : 任意
>类型别名 :=> 任意
>cachedLabelW.majLabelW : 任意
>类型别名 :=> 任意
>cachedLabelW : 任意
>类型别名 :=> 任意
>majLabelW : 任意
>类型别名 :=> 任意

    titleOffset = size * cosr + (cachedLabelW || 0) * sinr + labelGap + Math.max(taMajorTick.length > 0 ? taMajorTick.length : 0,
>titleOffset = size * cosr + (cachedLabelW || 0) * sinr + labelGap + Math.max(taMajorTick.length > 0 ? taMajorTick.length : 0,        taMinorTick.length > 0 ? taMinorTick.length : 0) +        tsize + taTitleGap : 任意
>类型别名 :=> 任意
>titleOffset : 任意
>类型别名 :=> 任意
>size * cosr + (cachedLabelW || 0) * sinr + labelGap + Math.max(taMajorTick.length > 0 ? taMajorTick.length : 0,        taMinorTick.length > 0 ? taMinorTick.length : 0) +        tsize + taTitleGap : 任意
>类型别名 :=> 任意
>size * cosr + (cachedLabelW || 0) * sinr + labelGap + Math.max(taMajorTick.length > 0 ? taMajorTick.length : 0,        taMinorTick.length > 0 ? taMinorTick.length : 0) +        tsize : 任意
>类型别名 :=> 任意
>size * cosr + (cachedLabelW || 0) * sinr + labelGap + Math.max(taMajorTick.length > 0 ? taMajorTick.length : 0,        taMinorTick.length > 0 ? taMinorTick.length : 0) : 任意
>类型别名 :=> 任意
>size * cosr + (cachedLabelW || 0) * sinr + labelGap : 任意
>类型别名 :=> 任意
>size * cosr + (cachedLabelW || 0) * sinr : 数字
>类型别名 :=> 数字
>size * cosr : 数字
>类型别名 :=> 数字
>size : 任意
>类型别名 :=> 任意
>cosr : 数字
>类型别名 :=> 数字
>(cachedLabelW || 0) * sinr : 数字
>类型别名 :=> 数字
>(cachedLabelW || 0) : 任意
>类型别名 :=> 任意
>cachedLabelW || 0 : 任意
>类型别名 :=> 任意
>cachedLabelW : 任意
>类型别名 :=> 任意
>0 : 0
>sinr : 数字
>类型别名 :=> 数字
>labelGap : 任意
>类型别名 :=> 任意
>Math.max(taMajorTick.length > 0 ? taMajorTick.length : 0,        taMinorTick.length > 0 ? taMinorTick.length : 0) : 数字
>类型别名 :=> 数字
>Math.max : (...values: 数字[]) => 数字
>Math : Math
>max : (...values: 数字[]) => 数字
>taMajorTick.length > 0 ? taMajorTick.length : 0 : 任意
>类型别名 :=> 任意
>taMajorTick.length > 0 : 真假
>类型别名 :=> 真假
>taMajorTick.length : 任意
>类型别名 :=> 任意
>taMajorTick : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0
>taMajorTick.length : 任意
>类型别名 :=> 任意
>taMajorTick : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0

        taMinorTick.length > 0 ? taMinorTick.length : 0) +
>taMinorTick.length > 0 ? taMinorTick.length : 0 : 任意
>类型别名 :=> 任意
>taMinorTick.length > 0 : 真假
>类型别名 :=> 真假
>taMinorTick.length : 任意
>类型别名 :=> 任意
>taMinorTick : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0
>taMinorTick.length : 任意
>类型别名 :=> 任意
>taMinorTick : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0

        tsize + taTitleGap;
>tsize : 任意
>类型别名 :=> 任意
>taTitleGap : 任意
>类型别名 :=> 任意

    axisVector = { x: isRtl ? -1 : 1, y: 0 };     // chart mirroring
>axisVector = { x: isRtl ? -1 : 1, y: 0 } : { x: 数字; y: 数字; }
>axisVector : 任意
>类型别名 :=> 任意
>{ x: isRtl ? -1 : 1, y: 0 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>isRtl ? -1 : 1 : 1 | -1
>isRtl : 任意
>类型别名 :=> 任意
>-1 : -1
>1 : 1
>1 : 1
>y : 数字
>类型别名 :=> 数字
>0 : 0

    switch (rotation) {
>rotation : 数字
>类型别名 :=> 数字

        default:
            if (rotation < (90 - centerAnchorLimit)) {
>rotation < (90 - centerAnchorLimit) : 真假
>类型别名 :=> 真假
>rotation : 数字
>类型别名 :=> 数字
>(90 - centerAnchorLimit) : 数字
>类型别名 :=> 数字
>90 - centerAnchorLimit : 数字
>类型别名 :=> 数字
>90 : 90
>centerAnchorLimit : 任意
>类型别名 :=> 任意

                labelOffset.y = leftBottom ? size : 0;
>labelOffset.y = leftBottom ? size : 0 : 任意
>类型别名 :=> 任意
>labelOffset.y : 任意
>类型别名 :=> 任意
>labelOffset : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>leftBottom ? size : 0 : 任意
>类型别名 :=> 任意
>leftBottom : 真假
>类型别名 :=> 真假
>size : 任意
>类型别名 :=> 任意
>0 : 0

            } else if (rotation < (90 + centerAnchorLimit)) {
>rotation < (90 + centerAnchorLimit) : 真假
>类型别名 :=> 真假
>rotation : 数字
>类型别名 :=> 数字
>(90 + centerAnchorLimit) : 任意
>类型别名 :=> 任意
>90 + centerAnchorLimit : 任意
>类型别名 :=> 任意
>90 : 90
>centerAnchorLimit : 任意
>类型别名 :=> 任意

                labelOffset.x = -size * 0.4;
>labelOffset.x = -size * 0.4 : 数字
>类型别名 :=> 数字
>labelOffset.x : 任意
>类型别名 :=> 任意
>labelOffset : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>-size * 0.4 : 数字
>类型别名 :=> 数字
>-size : 数字
>类型别名 :=> 数字
>size : 任意
>类型别名 :=> 任意
>0.4 : 0.4

            } else if (rotation < 180) {
>rotation < 180 : 真假
>类型别名 :=> 真假
>rotation : 数字
>类型别名 :=> 数字
>180 : 180

                labelOffset.y = leftBottom ? 0 : -size;
>labelOffset.y = leftBottom ? 0 : -size : 数字
>类型别名 :=> 数字
>labelOffset.y : 任意
>类型别名 :=> 任意
>labelOffset : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>leftBottom ? 0 : -size : 数字
>类型别名 :=> 数字
>leftBottom : 真假
>类型别名 :=> 真假
>0 : 0
>-size : 数字
>类型别名 :=> 数字
>size : 任意
>类型别名 :=> 任意

            } else if (rotation < (270 - centerAnchorLimit)) {
>rotation < (270 - centerAnchorLimit) : 真假
>类型别名 :=> 真假
>rotation : 数字
>类型别名 :=> 数字
>(270 - centerAnchorLimit) : 数字
>类型别名 :=> 数字
>270 - centerAnchorLimit : 数字
>类型别名 :=> 数字
>270 : 270
>centerAnchorLimit : 任意
>类型别名 :=> 任意

                labelOffset.y = leftBottom ? 0 : -size;
>labelOffset.y = leftBottom ? 0 : -size : 数字
>类型别名 :=> 数字
>labelOffset.y : 任意
>类型别名 :=> 任意
>labelOffset : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>leftBottom ? 0 : -size : 数字
>类型别名 :=> 数字
>leftBottom : 真假
>类型别名 :=> 真假
>0 : 0
>-size : 数字
>类型别名 :=> 数字
>size : 任意
>类型别名 :=> 任意

            } else if (rotation < (270 + centerAnchorLimit)) {
>rotation < (270 + centerAnchorLimit) : 真假
>类型别名 :=> 真假
>rotation : 数字
>类型别名 :=> 数字
>(270 + centerAnchorLimit) : 任意
>类型别名 :=> 任意
>270 + centerAnchorLimit : 任意
>类型别名 :=> 任意
>270 : 270
>centerAnchorLimit : 任意
>类型别名 :=> 任意

                labelOffset.y = leftBottom ? size * 0.4 : 0;
>labelOffset.y = leftBottom ? size * 0.4 : 0 : 数字
>类型别名 :=> 数字
>labelOffset.y : 任意
>类型别名 :=> 任意
>labelOffset : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>leftBottom ? size * 0.4 : 0 : 数字
>类型别名 :=> 数字
>leftBottom : 真假
>类型别名 :=> 真假
>size * 0.4 : 数字
>类型别名 :=> 数字
>size : 任意
>类型别名 :=> 任意
>0.4 : 0.4
>0 : 0

            } else {
                labelOffset.y = leftBottom ? size : 0;
>labelOffset.y = leftBottom ? size : 0 : 任意
>类型别名 :=> 任意
>labelOffset.y : 任意
>类型别名 :=> 任意
>labelOffset : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>leftBottom ? size : 0 : 任意
>类型别名 :=> 任意
>leftBottom : 真假
>类型别名 :=> 真假
>size : 任意
>类型别名 :=> 任意
>0 : 0
            }
    }

    titleRotation = (taTitleOrientation && taTitleOrientation == "away") ? 180 : 0;
>titleRotation = (taTitleOrientation && taTitleOrientation == "away") ? 180 : 0 : 0 | 180
>titleRotation : 数字
>类型别名 :=> 数字
>(taTitleOrientation && taTitleOrientation == "away") ? 180 : 0 : 0 | 180
>(taTitleOrientation && taTitleOrientation == "away") : 真假
>类型别名 :=> 真假
>taTitleOrientation && taTitleOrientation == "away" : 真假
>类型别名 :=> 真假
>taTitleOrientation : 任意
>类型别名 :=> 任意
>taTitleOrientation == "away" : 真假
>类型别名 :=> 真假
>taTitleOrientation : 任意
>类型别名 :=> 任意
>"away" : "away"
>180 : 180
>0 : 0

    titlePos.y = offsets.t - titleOffset + (titleRotation ? 0 : tsize);
>titlePos.y = offsets.t - titleOffset + (titleRotation ? 0 : tsize) : 任意
>类型别名 :=> 任意
>titlePos.y : 任意
>类型别名 :=> 任意
>titlePos : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>offsets.t - titleOffset + (titleRotation ? 0 : tsize) : 任意
>类型别名 :=> 任意
>offsets.t - titleOffset : 数字
>类型别名 :=> 数字
>offsets.t : 任意
>类型别名 :=> 任意
>offsets : 任意
>类型别名 :=> 任意
>t : 任意
>类型别名 :=> 任意
>titleOffset : 任意
>类型别名 :=> 任意
>(titleRotation ? 0 : tsize) : 任意
>类型别名 :=> 任意
>titleRotation ? 0 : tsize : 任意
>类型别名 :=> 任意
>titleRotation : 数字
>类型别名 :=> 数字
>0 : 0
>tsize : 任意
>类型别名 :=> 任意

    switch (labelAlign) {
>labelAlign : 任意
>类型别名 :=> 任意

        case "start":
>"start" : "start"

            labelAlign = "end";
>labelAlign = "end" : "end"
>labelAlign : 任意
>类型别名 :=> 任意
>"end" : "end"

            break;
        case "end":
>"end" : "end"

            labelAlign = "start";
>labelAlign = "start" : "start"
>labelAlign : 任意
>类型别名 :=> 任意
>"start" : "start"

            break;
        case "middle":
>"middle" : "middle"

            labelOffset.y -= size;
>labelOffset.y -= size : 数字
>类型别名 :=> 数字
>labelOffset.y : 任意
>类型别名 :=> 任意
>labelOffset : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>size : 任意
>类型别名 :=> 任意

            break;
    }

    let _ = rotation;
>_ : 数字
>类型别名 :=> 数字
>rotation : 数字
>类型别名 :=> 数字
}

