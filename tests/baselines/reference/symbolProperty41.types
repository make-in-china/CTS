=== tests/cases/conformance/es6/Symbols/symbolProperty41.ts ===
class C {
>C : C

    [Symbol.iterator](x: string): { x: string };
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号
>x : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字

    [Symbol.iterator](x: "hello"): { x: string; hello: string };
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号
>x : "hello"
>x : 文字
>类型别名 :=> 文字
>hello : 文字
>类型别名 :=> 文字

    [Symbol.iterator](x: any) {
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号
>x : 任意
>类型别名 :=> 任意

        return undefined;
>undefined : 未定
>类型别名 :=> 未定
    }
}

var c = new C;
>c : C
>new C : C
>C : 类为 C

c[Symbol.iterator]("");
>c[Symbol.iterator]("") : { x: 文字; }
>c[Symbol.iterator] : { (x: 文字): { x: 文字; }; (x: "hello"): { x: 文字; hello: 文字; }; }
>c : C
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号
>"" : ""

c[Symbol.iterator]("hello");
>c[Symbol.iterator]("hello") : { x: 文字; hello: 文字; }
>c[Symbol.iterator] : { (x: 文字): { x: 文字; }; (x: "hello"): { x: 文字; hello: 文字; }; }
>c : C
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号
>"hello" : "hello"

