=== tests/cases/conformance/parser/ecmascript5/parserUsingConstructorAsIdentifier.ts ===
        function define(constructor, instanceMembers, staticMembers) {
>define : (constructor: 任意, instanceMembers: 任意, staticMembers: 任意) => 任意
>constructor : 任意
>类型别名 :=> 任意
>instanceMembers : 任意
>类型别名 :=> 任意
>staticMembers : 任意
>类型别名 :=> 任意

            constructor = constructor || function () { };
>constructor = constructor || function () { } : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>constructor || function () { } : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>function () { } : () => 无值

            PluginUtilities.Utilities.markSupportedForProcessing(constructor);
>PluginUtilities.Utilities.markSupportedForProcessing(constructor) : 任意
>类型别名 :=> 任意
>PluginUtilities.Utilities.markSupportedForProcessing : 任意
>类型别名 :=> 任意
>PluginUtilities.Utilities : 任意
>类型别名 :=> 任意
>PluginUtilities : 任意
>类型别名 :=> 任意
>Utilities : 任意
>类型别名 :=> 任意
>markSupportedForProcessing : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意

            if (instanceMembers) {
>instanceMembers : 任意
>类型别名 :=> 任意

                initializeProperties(constructor.prototype, instanceMembers);
>initializeProperties(constructor.prototype, instanceMembers) : 任意
>类型别名 :=> 任意
>initializeProperties : 任意
>类型别名 :=> 任意
>constructor.prototype : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>prototype : 任意
>类型别名 :=> 任意
>instanceMembers : 任意
>类型别名 :=> 任意
            }
            if (staticMembers) {
>staticMembers : 任意
>类型别名 :=> 任意

                initializeProperties(constructor, staticMembers);
>initializeProperties(constructor, staticMembers) : 任意
>类型别名 :=> 任意
>initializeProperties : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>staticMembers : 任意
>类型别名 :=> 任意
            }
            return constructor;
>constructor : 任意
>类型别名 :=> 任意
        }

        function derive(baseClass, constructor, instanceMembers, staticMembers) {
>derive : (baseClass: 任意, constructor: 任意, instanceMembers: 任意, staticMembers: 任意) => 任意
>baseClass : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>instanceMembers : 任意
>类型别名 :=> 任意
>staticMembers : 任意
>类型别名 :=> 任意

            if (baseClass) {
>baseClass : 任意
>类型别名 :=> 任意

                constructor = constructor || function () { };
>constructor = constructor || function () { } : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>constructor || function () { } : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>function () { } : () => 无值

                var basePrototype = baseClass.prototype;
>basePrototype : 任意
>类型别名 :=> 任意
>baseClass.prototype : 任意
>类型别名 :=> 任意
>baseClass : 任意
>类型别名 :=> 任意
>prototype : 任意
>类型别名 :=> 任意

                constructor.prototype = Object.create(basePrototype);
>constructor.prototype = Object.create(basePrototype) : 任意
>类型别名 :=> 任意
>constructor.prototype : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>prototype : 任意
>类型别名 :=> 任意
>Object.create(basePrototype) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例): 任意; (o: 实例, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>basePrototype : 任意
>类型别名 :=> 任意

                PluginUtilities.Utilities.markSupportedForProcessing(constructor);
>PluginUtilities.Utilities.markSupportedForProcessing(constructor) : 任意
>类型别名 :=> 任意
>PluginUtilities.Utilities.markSupportedForProcessing : 任意
>类型别名 :=> 任意
>PluginUtilities.Utilities : 任意
>类型别名 :=> 任意
>PluginUtilities : 任意
>类型别名 :=> 任意
>Utilities : 任意
>类型别名 :=> 任意
>markSupportedForProcessing : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意

                Object.defineProperty(constructor.prototype, "constructor", { value: constructor, writable: true, configurable: true, enumerable: true });
>Object.defineProperty(constructor.prototype, "constructor", { value: constructor, writable: true, configurable: true, enumerable: true }) : 任意
>类型别名 :=> 任意
>Object.defineProperty : (o: 任意, p: 文字, attributes: PropertyDescriptor & ThisType<任意>) => 任意
>Object : ObjectConstructor
>defineProperty : (o: 任意, p: 文字, attributes: PropertyDescriptor & ThisType<任意>) => 任意
>constructor.prototype : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>prototype : 任意
>类型别名 :=> 任意
>"constructor" : "constructor"
>{ value: constructor, writable: true, configurable: true, enumerable: true } : { value: 任意; writable: 为真; configurable: 为真; enumerable: 为真; }
>value : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>writable : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>configurable : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>enumerable : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

                if (instanceMembers) {
>instanceMembers : 任意
>类型别名 :=> 任意

                    initializeProperties(constructor.prototype, instanceMembers);
>initializeProperties(constructor.prototype, instanceMembers) : 任意
>类型别名 :=> 任意
>initializeProperties : 任意
>类型别名 :=> 任意
>constructor.prototype : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>prototype : 任意
>类型别名 :=> 任意
>instanceMembers : 任意
>类型别名 :=> 任意
                }
                if (staticMembers) {
>staticMembers : 任意
>类型别名 :=> 任意

                    initializeProperties(constructor, staticMembers);
>initializeProperties(constructor, staticMembers) : 任意
>类型别名 :=> 任意
>initializeProperties : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>staticMembers : 任意
>类型别名 :=> 任意
                }
                return constructor;
>constructor : 任意
>类型别名 :=> 任意

            } else {
                return define(constructor, instanceMembers, staticMembers);
>define(constructor, instanceMembers, staticMembers) : 任意
>类型别名 :=> 任意
>define : (constructor: 任意, instanceMembers: 任意, staticMembers: 任意) => 任意
>constructor : 任意
>类型别名 :=> 任意
>instanceMembers : 任意
>类型别名 :=> 任意
>staticMembers : 任意
>类型别名 :=> 任意
            }
        }

        function mix(constructor) {
>mix : (constructor: 任意) => 任意
>constructor : 任意
>类型别名 :=> 任意

            constructor = constructor || function () { };
>constructor = constructor || function () { } : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>constructor || function () { } : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>function () { } : () => 无值

            var i, len;
>i : 任意
>类型别名 :=> 任意
>len : 任意
>类型别名 :=> 任意

            for (i = 1, len = arguments.length; i < len; i++) {
>i = 1, len = arguments.length : 数字
>类型别名 :=> 数字
>i = 1 : 1
>i : 任意
>类型别名 :=> 任意
>1 : 1
>len = arguments.length : 数字
>类型别名 :=> 数字
>len : 任意
>类型别名 :=> 任意
>arguments.length : 数字
>类型别名 :=> 数字
>arguments : IArguments
>length : 数字
>类型别名 :=> 数字
>i < len : 真假
>类型别名 :=> 真假
>i : 任意
>类型别名 :=> 任意
>len : 任意
>类型别名 :=> 任意
>i++ : 数字
>类型别名 :=> 数字
>i : 任意
>类型别名 :=> 任意

                initializeProperties(constructor.prototype, arguments[i]);
>initializeProperties(constructor.prototype, arguments[i]) : 任意
>类型别名 :=> 任意
>initializeProperties : 任意
>类型别名 :=> 任意
>constructor.prototype : 任意
>类型别名 :=> 任意
>constructor : 任意
>类型别名 :=> 任意
>prototype : 任意
>类型别名 :=> 任意
>arguments[i] : 任意
>类型别名 :=> 任意
>arguments : IArguments
>i : 任意
>类型别名 :=> 任意
            }
            return constructor;
>constructor : 任意
>类型别名 :=> 任意
        }
