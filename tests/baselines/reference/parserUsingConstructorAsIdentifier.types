=== tests/cases/conformance/parser/ecmascript5/parserUsingConstructorAsIdentifier.ts ===
        function define(constructor, instanceMembers, staticMembers) {
>define : (constructor: any, instanceMembers: any, staticMembers: any) => any
>constructor : any
>类型别名 :=> 任意
>instanceMembers : any
>类型别名 :=> 任意
>staticMembers : any
>类型别名 :=> 任意

            constructor = constructor || function () { };
>constructor = constructor || function () { } : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>constructor || function () { } : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>function () { } : () => void

            PluginUtilities.Utilities.markSupportedForProcessing(constructor);
>PluginUtilities.Utilities.markSupportedForProcessing(constructor) : any
>类型别名 :=> 任意
>PluginUtilities.Utilities.markSupportedForProcessing : any
>类型别名 :=> 任意
>PluginUtilities.Utilities : any
>类型别名 :=> 任意
>PluginUtilities : any
>类型别名 :=> 任意
>Utilities : any
>类型别名 :=> 任意
>markSupportedForProcessing : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意

            if (instanceMembers) {
>instanceMembers : any
>类型别名 :=> 任意

                initializeProperties(constructor.prototype, instanceMembers);
>initializeProperties(constructor.prototype, instanceMembers) : any
>类型别名 :=> 任意
>initializeProperties : any
>类型别名 :=> 任意
>constructor.prototype : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>prototype : any
>类型别名 :=> 任意
>instanceMembers : any
>类型别名 :=> 任意
            }
            if (staticMembers) {
>staticMembers : any
>类型别名 :=> 任意

                initializeProperties(constructor, staticMembers);
>initializeProperties(constructor, staticMembers) : any
>类型别名 :=> 任意
>initializeProperties : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>staticMembers : any
>类型别名 :=> 任意
            }
            return constructor;
>constructor : any
>类型别名 :=> 任意
        }

        function derive(baseClass, constructor, instanceMembers, staticMembers) {
>derive : (baseClass: any, constructor: any, instanceMembers: any, staticMembers: any) => any
>baseClass : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>instanceMembers : any
>类型别名 :=> 任意
>staticMembers : any
>类型别名 :=> 任意

            if (baseClass) {
>baseClass : any
>类型别名 :=> 任意

                constructor = constructor || function () { };
>constructor = constructor || function () { } : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>constructor || function () { } : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>function () { } : () => void

                var basePrototype = baseClass.prototype;
>basePrototype : any
>类型别名 :=> 任意
>baseClass.prototype : any
>类型别名 :=> 任意
>baseClass : any
>类型别名 :=> 任意
>prototype : any
>类型别名 :=> 任意

                constructor.prototype = Object.create(basePrototype);
>constructor.prototype = Object.create(basePrototype) : any
>类型别名 :=> 任意
>constructor.prototype : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>prototype : any
>类型别名 :=> 任意
>Object.create(basePrototype) : any
>类型别名 :=> 任意
>Object.create : { (o: object): any; (o: object, properties: PropertyDescriptorMap & ThisType<any>): any; }
>Object : ObjectConstructor
>create : { (o: object): any; (o: object, properties: PropertyDescriptorMap & ThisType<any>): any; }
>basePrototype : any
>类型别名 :=> 任意

                PluginUtilities.Utilities.markSupportedForProcessing(constructor);
>PluginUtilities.Utilities.markSupportedForProcessing(constructor) : any
>类型别名 :=> 任意
>PluginUtilities.Utilities.markSupportedForProcessing : any
>类型别名 :=> 任意
>PluginUtilities.Utilities : any
>类型别名 :=> 任意
>PluginUtilities : any
>类型别名 :=> 任意
>Utilities : any
>类型别名 :=> 任意
>markSupportedForProcessing : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意

                Object.defineProperty(constructor.prototype, "constructor", { value: constructor, writable: true, configurable: true, enumerable: true });
>Object.defineProperty(constructor.prototype, "constructor", { value: constructor, writable: true, configurable: true, enumerable: true }) : any
>类型别名 :=> 任意
>Object.defineProperty : (o: any, p: string, attributes: PropertyDescriptor & ThisType<any>) => any
>Object : ObjectConstructor
>defineProperty : (o: any, p: string, attributes: PropertyDescriptor & ThisType<any>) => any
>constructor.prototype : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>prototype : any
>类型别名 :=> 任意
>"constructor" : "constructor"
>{ value: constructor, writable: true, configurable: true, enumerable: true } : { value: any; writable: true; configurable: true; enumerable: true; }
>value : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>writable : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>configurable : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>enumerable : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

                if (instanceMembers) {
>instanceMembers : any
>类型别名 :=> 任意

                    initializeProperties(constructor.prototype, instanceMembers);
>initializeProperties(constructor.prototype, instanceMembers) : any
>类型别名 :=> 任意
>initializeProperties : any
>类型别名 :=> 任意
>constructor.prototype : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>prototype : any
>类型别名 :=> 任意
>instanceMembers : any
>类型别名 :=> 任意
                }
                if (staticMembers) {
>staticMembers : any
>类型别名 :=> 任意

                    initializeProperties(constructor, staticMembers);
>initializeProperties(constructor, staticMembers) : any
>类型别名 :=> 任意
>initializeProperties : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>staticMembers : any
>类型别名 :=> 任意
                }
                return constructor;
>constructor : any
>类型别名 :=> 任意

            } else {
                return define(constructor, instanceMembers, staticMembers);
>define(constructor, instanceMembers, staticMembers) : any
>类型别名 :=> 任意
>define : (constructor: any, instanceMembers: any, staticMembers: any) => any
>constructor : any
>类型别名 :=> 任意
>instanceMembers : any
>类型别名 :=> 任意
>staticMembers : any
>类型别名 :=> 任意
            }
        }

        function mix(constructor) {
>mix : (constructor: any) => any
>constructor : any
>类型别名 :=> 任意

            constructor = constructor || function () { };
>constructor = constructor || function () { } : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>constructor || function () { } : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>function () { } : () => void

            var i, len;
>i : any
>类型别名 :=> 任意
>len : any
>类型别名 :=> 任意

            for (i = 1, len = arguments.length; i < len; i++) {
>i = 1, len = arguments.length : number
>类型别名 :=> 数字
>i = 1 : 1
>i : any
>类型别名 :=> 任意
>1 : 1
>len = arguments.length : number
>类型别名 :=> 数字
>len : any
>类型别名 :=> 任意
>arguments.length : number
>类型别名 :=> 数字
>arguments : IArguments
>length : number
>类型别名 :=> 数字
>i < len : boolean
>类型别名 :=> 真假
>i : any
>类型别名 :=> 任意
>len : any
>类型别名 :=> 任意
>i++ : number
>类型别名 :=> 数字
>i : any
>类型别名 :=> 任意

                initializeProperties(constructor.prototype, arguments[i]);
>initializeProperties(constructor.prototype, arguments[i]) : any
>类型别名 :=> 任意
>initializeProperties : any
>类型别名 :=> 任意
>constructor.prototype : any
>类型别名 :=> 任意
>constructor : any
>类型别名 :=> 任意
>prototype : any
>类型别名 :=> 任意
>arguments[i] : any
>类型别名 :=> 任意
>arguments : IArguments
>i : any
>类型别名 :=> 任意
            }
            return constructor;
>constructor : any
>类型别名 :=> 任意
        }
