=== tests/cases/conformance/types/primitives/undefined/validUndefinedAssignments.ts ===
var x: typeof undefined;
>x : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定

var a: number = x;
>a : number
>类型别名 :=> 数字
>x : any
>类型别名 :=> 任意

var b: boolean = x;
>b : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意

var c: string = x;
>c : string
>类型别名 :=> 文字
>x : any
>类型别名 :=> 任意

var d: void = x;
>d : void
>类型别名 :=> 无值
>x : any
>类型别名 :=> 任意

var e: typeof undefined = x;
>e : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>x : any
>类型别名 :=> 任意

e = x; // should work
>e = x : any
>类型别名 :=> 任意
>e : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

class C { foo: string }
>C : C
>foo : string
>类型别名 :=> 文字

var f: C;
>f : C
>C : C

f = x;
>f = x : any
>类型别名 :=> 任意
>f : C
>x : any
>类型别名 :=> 任意

interface I { foo: string }
>I : I
>foo : string
>类型别名 :=> 文字

var g: I;
>g : I
>I : I

g = x;
>g = x : any
>类型别名 :=> 任意
>g : I
>x : any
>类型别名 :=> 任意

var h: { f(): void } = x;
>h : { f(): void; }
>f : () => void
>x : any
>类型别名 :=> 任意

function i<T>(a: T) {
>i : <T>(a: T) => void
>T : T
>a : T
>T : T

    a = x;
>a = x : any
>类型别名 :=> 任意
>a : T
>x : any
>类型别名 :=> 任意
}
