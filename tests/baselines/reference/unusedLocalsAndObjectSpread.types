=== tests/cases/compiler/unusedLocalsAndObjectSpread.ts ===
declare var console: { log(a: any): void };
>console : { log(a: any): void; }
>log : (a: any) => void
>a : any
>类型别名 :=> 任意

function one() {
>one : () => void

    const foo = { a: 1, b: 2 };
>foo : { a: number; b: number; }
>{ a: 1, b: 2 } : { a: number; b: number; }
>a : number
>类型别名 :=> 数字
>1 : 1
>b : number
>类型别名 :=> 数字
>2 : 2

    // 'a' is declared but never used
    const {a, ...bar} = foo;
>a : number
>类型别名 :=> 数字
>bar : { b: number; }
>foo : { a: number; b: number; }

    console.log(bar);
>console.log(bar) : void
>类型别名 :=> 无值
>console.log : (a: any) => void
>console : { log(a: any): void; }
>log : (a: any) => void
>bar : { b: number; }
}

function two() {
>two : () => void

    const foo = { a: 1, b: 2 };
>foo : { a: number; b: number; }
>{ a: 1, b: 2 } : { a: number; b: number; }
>a : number
>类型别名 :=> 数字
>1 : 1
>b : number
>类型别名 :=> 数字
>2 : 2

    // '_' is declared but never used
    const {a: _, ...bar} = foo;
>a : any
>类型别名 :=> 任意
>_ : number
>类型别名 :=> 数字
>bar : { b: number; }
>foo : { a: number; b: number; }

    console.log(bar);
>console.log(bar) : void
>类型别名 :=> 无值
>console.log : (a: any) => void
>console : { log(a: any): void; }
>log : (a: any) => void
>bar : { b: number; }
}

function three() {
>three : () => void

    const foo = { a: 1, b: 2 };
>foo : { a: number; b: number; }
>{ a: 1, b: 2 } : { a: number; b: number; }
>a : number
>类型别名 :=> 数字
>1 : 1
>b : number
>类型别名 :=> 数字
>2 : 2

    // 'a' is declared but never used
    const {a, ...bar} = foo; // bar should be unused
>a : number
>类型别名 :=> 数字
>bar : { b: number; }
>foo : { a: number; b: number; }

    //console.log(bar);
}

function four() {
>four : () => void

    const foo = { a: 1, b: 2 };
>foo : { a: number; b: number; }
>{ a: 1, b: 2 } : { a: number; b: number; }
>a : number
>类型别名 :=> 数字
>1 : 1
>b : number
>类型别名 :=> 数字
>2 : 2

    // '_' is declared but never used
    const {a: _, ...bar} = foo; // bar should be unused
>a : any
>类型别名 :=> 任意
>_ : number
>类型别名 :=> 数字
>bar : { b: number; }
>foo : { a: number; b: number; }

    //console.log(bar);
}

