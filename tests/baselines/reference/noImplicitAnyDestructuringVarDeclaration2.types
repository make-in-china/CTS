=== tests/cases/compiler/noImplicitAnyDestructuringVarDeclaration2.ts ===
let [a, b, c] = [1, 2, 3]; // no error
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>[1, 2, 3] : [number, number, number]
>1 : 1
>2 : 2
>3 : 3

let [a1 = 10, b1 = 10, c1 = 10] = [1, 2, 3]; // no error
>a1 : number
>类型别名 :=> 数字
>10 : 10
>b1 : number
>类型别名 :=> 数字
>10 : 10
>c1 : number
>类型别名 :=> 数字
>10 : 10
>[1, 2, 3] : [number, number, number]
>1 : 1
>2 : 2
>3 : 3

let [a2 = undefined, b2 = undefined, c2 = undefined] = [1, 2, 3]; // no error
>a2 : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>b2 : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>c2 : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>[1, 2, 3] : [number, number, number]
>1 : 1
>2 : 2
>3 : 3

let [a3 = <any>undefined, b3 = <any>null, c3 = <any>undefined] = [1, 2, 3]; // no error
>a3 : any
>类型别名 :=> 任意
><any>undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>b3 : any
>类型别名 :=> 任意
><any>null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>c3 : any
>类型别名 :=> 任意
><any>undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>[1, 2, 3] : [number, number, number]
>1 : 1
>2 : 2
>3 : 3

let [a4] = [<any>undefined], [b4] = [<any>null], c4 = <any>undefined, d4 = <any>null; // no error
>a4 : any
>类型别名 :=> 任意
>[<any>undefined] : [any]
><any>undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>b4 : any
>类型别名 :=> 任意
>[<any>null] : [any]
><any>null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>c4 : any
>类型别名 :=> 任意
><any>undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>d4 : any
>类型别名 :=> 任意
><any>null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

let {x, y, z} = { x: 1, y: 2, z: 3 }; // no error
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>z : number
>类型别名 :=> 数字
>{ x: 1, y: 2, z: 3 } : { x: number; y: number; z: number; }
>x : number
>类型别名 :=> 数字
>1 : 1
>y : number
>类型别名 :=> 数字
>2 : 2
>z : number
>类型别名 :=> 数字
>3 : 3

let {x1 = 10, y1 = 10, z1 = 10} = { x1: 1, y1: 2, z1: 3 }; // no error
>x1 : number
>类型别名 :=> 数字
>10 : 10
>y1 : number
>类型别名 :=> 数字
>10 : 10
>z1 : number
>类型别名 :=> 数字
>10 : 10
>{ x1: 1, y1: 2, z1: 3 } : { x1?: number; y1?: number; z1?: number; }
>x1 : number
>类型别名 :=> 数字
>1 : 1
>y1 : number
>类型别名 :=> 数字
>2 : 2
>z1 : number
>类型别名 :=> 数字
>3 : 3

let {x2 = undefined, y2 = undefined, z2 = undefined} = { x2: 1, y2: 2, z2: 3 }; // no error
>x2 : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>y2 : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>z2 : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>{ x2: 1, y2: 2, z2: 3 } : { x2?: number; y2?: number; z2?: number; }
>x2 : number
>类型别名 :=> 数字
>1 : 1
>y2 : number
>类型别名 :=> 数字
>2 : 2
>z2 : number
>类型别名 :=> 数字
>3 : 3

let {x3 = <any>undefined, y3 = <any>null, z3 = <any>undefined} = { x3: 1, y3: 2, z3: 3 }; // no error
>x3 : any
>类型别名 :=> 任意
><any>undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>y3 : any
>类型别名 :=> 任意
><any>null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>z3 : any
>类型别名 :=> 任意
><any>undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>{ x3: 1, y3: 2, z3: 3 } : { x3?: number; y3?: number; z3?: number; }
>x3 : number
>类型别名 :=> 数字
>1 : 1
>y3 : number
>类型别名 :=> 数字
>2 : 2
>z3 : number
>类型别名 :=> 数字
>3 : 3

let {x4} = { x4: <any>undefined }, {y4} = { y4: <any>null }; // no error
>x4 : any
>类型别名 :=> 任意
>{ x4: <any>undefined } : { x4: any; }
>x4 : any
>类型别名 :=> 任意
><any>undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>y4 : any
>类型别名 :=> 任意
>{ y4: <any>null } : { y4: any; }
>y4 : any
>类型别名 :=> 任意
><any>null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

