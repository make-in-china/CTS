=== tests/cases/compiler/instanceAndStaticDeclarations1.ts ===
// from spec

class Point {
>Point : Point

    constructor(public x: number, public y: number) { }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    public distance(p: Point) {
>distance : (p: Point) => 数字
>p : Point
>Point : Point

        var dx = this.x - p.x;
>dx : 数字
>类型别名 :=> 数字
>this.x - p.x : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>p.x : 数字
>类型别名 :=> 数字
>p : Point
>x : 数字
>类型别名 :=> 数字

        var dy = this.y - p.y;
>dy : 数字
>类型别名 :=> 数字
>this.y - p.y : 数字
>类型别名 :=> 数字
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字
>p.y : 数字
>类型别名 :=> 数字
>p : Point
>y : 数字
>类型别名 :=> 数字

        return Math.sqrt(dx * dx + dy * dy);
>Math.sqrt(dx * dx + dy * dy) : 数字
>类型别名 :=> 数字
>Math.sqrt : (x: 数字) => 数字
>Math : Math
>sqrt : (x: 数字) => 数字
>dx * dx + dy * dy : 数字
>类型别名 :=> 数字
>dx * dx : 数字
>类型别名 :=> 数字
>dx : 数字
>类型别名 :=> 数字
>dx : 数字
>类型别名 :=> 数字
>dy * dy : 数字
>类型别名 :=> 数字
>dy : 数字
>类型别名 :=> 数字
>dy : 数字
>类型别名 :=> 数字
    }
    static origin = new Point(0, 0);
>origin : Point
>new Point(0, 0) : Point
>Point : 类为 Point
>0 : 0
>0 : 0

    static distance(p1: Point, p2: Point) { return p1.distance(p2); }
>distance : (p1: Point, p2: Point) => 数字
>p1 : Point
>Point : Point
>p2 : Point
>Point : Point
>p1.distance(p2) : 数字
>类型别名 :=> 数字
>p1.distance : (p: Point) => 数字
>p1 : Point
>distance : (p: Point) => 数字
>p2 : Point
}
