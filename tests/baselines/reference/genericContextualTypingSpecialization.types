=== tests/cases/compiler/genericContextualTypingSpecialization.ts ===
var b: number[];
>b : 数字[]

b.reduce<number>((c, d) => c + d, 0); // should not error on '+'
>b.reduce<number>((c, d) => c + d, 0) : 数字
>类型别名 :=> 数字
>b.reduce : { (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字): 数字; (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字, initialValue: 数字): 数字; <U>(callbackfn: (previousValue: U, currentValue: 数字, currentIndex: 数字, array: 数字[]) => U, initialValue: U): U; }
>b : 数字[]
>reduce : { (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字): 数字; (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字, initialValue: 数字): 数字; <U>(callbackfn: (previousValue: U, currentValue: 数字, currentIndex: 数字, array: 数字[]) => U, initialValue: U): U; }
>(c, d) => c + d : (c: 数字, d: 数字) => 数字
>c : 数字
>类型别名 :=> 数字
>d : 数字
>类型别名 :=> 数字
>c + d : 数字
>类型别名 :=> 数字
>c : 数字
>类型别名 :=> 数字
>d : 数字
>类型别名 :=> 数字
>0 : 0

