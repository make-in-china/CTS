=== tests/cases/compiler/genericContextualTypingSpecialization.ts ===
var b: number[];
>b : number[]

b.reduce<number>((c, d) => c + d, 0); // should not error on '+'
>b.reduce<number>((c, d) => c + d, 0) : number
>类型别名 :=> 数字
>b.reduce : { (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number): number; (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: number[]) => U, initialValue: U): U; }
>b : number[]
>reduce : { (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number): number; (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: number[]) => U, initialValue: U): U; }
>(c, d) => c + d : (c: number, d: number) => number
>c : number
>类型别名 :=> 数字
>d : number
>类型别名 :=> 数字
>c + d : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>d : number
>类型别名 :=> 数字
>0 : 0

