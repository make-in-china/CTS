=== tests/cases/conformance/expressions/contextualTyping/superCallParameterContextualTyping3.ts ===
interface ContextualType<T> {
>ContextualType : ContextualType<T>
>T : T

    method(parameter: T): void;
>method : (parameter: T) => 无值
>parameter : T
>T : T
}

class CBase<T>  {
>CBase : CBase<T>
>T : T

    constructor(param: ContextualType<T>) {
>param : ContextualType<T>
>ContextualType : ContextualType<T>
>T : T
    }

    foo(param: ContextualType<T>) {
>foo : (param: ContextualType<T>) => 无值
>param : ContextualType<T>
>ContextualType : ContextualType<T>
>T : T
    }
}

class C extends CBase<string> {
>C : C
>CBase : CBase<文字>

    constructor() {
        // Should be okay.
        // 'p' should have type 'string'.
        super({
>super({            method(p) {                p.length;            }        }) : 无值
>类型别名 :=> 无值
>super : 类为 CBase
>{            method(p) {                p.length;            }        } : { method(p: 文字): 无值; }

            method(p) {
>method : (p: 文字) => 无值
>p : 文字
>类型别名 :=> 文字

                p.length;
>p.length : 数字
>类型别名 :=> 数字
>p : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
            }
        });

        // Should be okay.
        // 'p' should have type 'string'.
        super.foo({
>super.foo({            method(p) {                p.length;            }        }) : 无值
>类型别名 :=> 无值
>super.foo : (param: ContextualType<文字>) => 无值
>super : CBase<文字>
>foo : (param: ContextualType<文字>) => 无值
>{            method(p) {                p.length;            }        } : { method(p: 文字): 无值; }

            method(p) {
>method : (p: 文字) => 无值
>p : 文字
>类型别名 :=> 文字

                p.length;
>p.length : 数字
>类型别名 :=> 数字
>p : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
            }
        });
    }
}
