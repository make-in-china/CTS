=== tests/cases/compiler/inferSecondaryParameter.ts ===
// type inference on 'bug' should give 'any'

interface Ib { m(test: string, fn: Function); }
>Ib : Ib
>m : (test: 文字, fn: Function) => 任意
>test : 文字
>类型别名 :=> 文字
>fn : Function
>Function : Function

var b: Ib = { m: function (test: string, fn: Function) { } };
>b : Ib
>Ib : Ib
>{ m: function (test: string, fn: Function) { } } : { m: (test: 文字, fn: Function) => 无值; }
>m : (test: 文字, fn: Function) => 无值
>function (test: string, fn: Function) { } : (test: 文字, fn: Function) => 无值
>test : 文字
>类型别名 :=> 文字
>fn : Function
>Function : Function

b.m("test", function (bug) {
>b.m("test", function (bug) {    var a: number = bug;}) : 任意
>类型别名 :=> 任意
>b.m : (test: 文字, fn: Function) => 任意
>b : Ib
>m : (test: 文字, fn: Function) => 任意
>"test" : "test"
>function (bug) {    var a: number = bug;} : (bug: 任意) => 无值
>bug : 任意
>类型别名 :=> 任意

    var a: number = bug;
>a : 数字
>类型别名 :=> 数字
>bug : 任意
>类型别名 :=> 任意

});
