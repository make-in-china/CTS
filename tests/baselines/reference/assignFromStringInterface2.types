=== tests/cases/conformance/types/primitives/string/assignFromStringInterface2.ts ===
interface String {
>String : String

    doStuff(): string;
>doStuff : () => 文字
}

interface NotString {
>NotString : NotString

    doStuff(): string;
>doStuff : () => 文字

    toString(): string;
>toString : () => 文字

    charAt(pos: number): string;
>charAt : (pos: 数字) => 文字
>pos : 数字
>类型别名 :=> 数字

    charCodeAt(index: number): number;
>charCodeAt : (index: 数字) => 数字
>index : 数字
>类型别名 :=> 数字

    concat(...strings: string[]): string;
>concat : (...strings: 文字[]) => 文字
>strings : 文字[]

    indexOf(searchString: string, position?: number): number;
>indexOf : (searchString: 文字, position?: 数字) => 数字
>searchString : 文字
>类型别名 :=> 文字
>position : 数字
>类型别名 :=> 数字

    lastIndexOf(searchString: string, position?: number): number;
>lastIndexOf : (searchString: 文字, position?: 数字) => 数字
>searchString : 文字
>类型别名 :=> 文字
>position : 数字
>类型别名 :=> 数字

    localeCompare(that: string): number;
>localeCompare : (that: 文字) => 数字
>that : 文字
>类型别名 :=> 文字

    match(regexp: string): string[];
>match : { (regexp: 文字): 文字[]; (regexp: RegExp): 文字[]; }
>regexp : 文字
>类型别名 :=> 文字

    match(regexp: RegExp): string[];
>match : { (regexp: 文字): 文字[]; (regexp: RegExp): 文字[]; }
>regexp : RegExp
>RegExp : RegExp

    replace(searchValue: string, replaceValue: string): string;
>replace : { (searchValue: 文字, replaceValue: 文字): 文字; (searchValue: 文字, replaceValue: (substring: 文字, ...args: 任意[]) => 文字): 文字; (searchValue: RegExp, replaceValue: 文字): 文字; (searchValue: RegExp, replaceValue: (substring: 文字, ...args: 任意[]) => 文字): 文字; }
>searchValue : 文字
>类型别名 :=> 文字
>replaceValue : 文字
>类型别名 :=> 文字

    replace(searchValue: string, replaceValue: (substring: string, ...args: any[]) => string): string;
>replace : { (searchValue: 文字, replaceValue: 文字): 文字; (searchValue: 文字, replaceValue: (substring: 文字, ...args: 任意[]) => 文字): 文字; (searchValue: RegExp, replaceValue: 文字): 文字; (searchValue: RegExp, replaceValue: (substring: 文字, ...args: 任意[]) => 文字): 文字; }
>searchValue : 文字
>类型别名 :=> 文字
>replaceValue : (substring: 文字, ...args: 任意[]) => 文字
>substring : 文字
>类型别名 :=> 文字
>args : 任意[]

    replace(searchValue: RegExp, replaceValue: string): string;
>replace : { (searchValue: 文字, replaceValue: 文字): 文字; (searchValue: 文字, replaceValue: (substring: 文字, ...args: 任意[]) => 文字): 文字; (searchValue: RegExp, replaceValue: 文字): 文字; (searchValue: RegExp, replaceValue: (substring: 文字, ...args: 任意[]) => 文字): 文字; }
>searchValue : RegExp
>RegExp : RegExp
>replaceValue : 文字
>类型别名 :=> 文字

    replace(searchValue: RegExp, replaceValue: (substring: string, ...args: any[]) => string): string;
>replace : { (searchValue: 文字, replaceValue: 文字): 文字; (searchValue: 文字, replaceValue: (substring: 文字, ...args: 任意[]) => 文字): 文字; (searchValue: RegExp, replaceValue: 文字): 文字; (searchValue: RegExp, replaceValue: (substring: 文字, ...args: 任意[]) => 文字): 文字; }
>searchValue : RegExp
>RegExp : RegExp
>replaceValue : (substring: 文字, ...args: 任意[]) => 文字
>substring : 文字
>类型别名 :=> 文字
>args : 任意[]

    search(regexp: string): number;
>search : { (regexp: 文字): 数字; (regexp: RegExp): 数字; }
>regexp : 文字
>类型别名 :=> 文字

    search(regexp: RegExp): number;
>search : { (regexp: 文字): 数字; (regexp: RegExp): 数字; }
>regexp : RegExp
>RegExp : RegExp

    slice(start?: number, end?: number): string;
>slice : (start?: 数字, end?: 数字) => 文字
>start : 数字
>类型别名 :=> 数字
>end : 数字
>类型别名 :=> 数字

    split(separator: string, limit?: number): string[];
>split : { (separator: 文字, limit?: 数字): 文字[]; (separator: RegExp, limit?: 数字): 文字[]; }
>separator : 文字
>类型别名 :=> 文字
>limit : 数字
>类型别名 :=> 数字

    split(separator: RegExp, limit?: number): string[];
>split : { (separator: 文字, limit?: 数字): 文字[]; (separator: RegExp, limit?: 数字): 文字[]; }
>separator : RegExp
>RegExp : RegExp
>limit : 数字
>类型别名 :=> 数字

    substring(start: number, end?: number): string;
>substring : (start: 数字, end?: 数字) => 文字
>start : 数字
>类型别名 :=> 数字
>end : 数字
>类型别名 :=> 数字

    toLowerCase(): string;
>toLowerCase : () => 文字

    toLocaleLowerCase(): string;
>toLocaleLowerCase : () => 文字

    toUpperCase(): string;
>toUpperCase : () => 文字

    toLocaleUpperCase(): string;
>toLocaleUpperCase : () => 文字

    trim(): string;
>trim : () => 文字

    length: number;
>length : 数字
>类型别名 :=> 数字

    substr(from: number, length?: number): string;
>substr : (from: 数字, length?: 数字) => 文字
>from : 数字
>类型别名 :=> 数字
>length : 数字
>类型别名 :=> 数字

    valueOf(): string;
>valueOf : () => 文字

    [index: number]: string;
>index : 数字
>类型别名 :=> 数字
}

var x = '';
>x : 文字
>类型别名 :=> 文字
>'' : ""

var a: String;
>a : String
>String : String

var b: NotString;
>b : NotString
>NotString : NotString

a = x; 
>a = x : 文字
>类型别名 :=> 文字
>a : String
>x : 文字
>类型别名 :=> 文字

a = b; 
>a = b : NotString
>a : String
>b : NotString

b = a; 
>b = a : String
>b : NotString
>a : String

b = x; 
>b = x : 文字
>类型别名 :=> 文字
>b : NotString
>x : 文字
>类型别名 :=> 文字

x = a; // expected error
>x = a : String
>x : 文字
>类型别名 :=> 文字
>a : String

x = b; // expected error
>x = b : NotString
>x : 文字
>类型别名 :=> 文字
>b : NotString


