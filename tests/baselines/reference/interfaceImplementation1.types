=== tests/cases/compiler/interfaceImplementation1.ts ===
interface I1 {
>I1 : I1

    iObj:{ };
>iObj : {}

    iNum:number;
>iNum : number
>类型别名 :=> 数字

    iAny:any;
>iAny : any
>类型别名 :=> 任意

    iFn():void;
>iFn : () => void
}

interface I2 {
>I2 : I2

	iFn(n:number, s:string):void;
>iFn : (n: number, s: string) => void
>n : number
>类型别名 :=> 数字
>s : string
>类型别名 :=> 文字
}

class C1 implements I1,I2 {
>C1 : C1
>I1 : I1
>I2 : I2

    private iFn();
>iFn : () => any

	private iFn(n?:number, s?:string) { }
>iFn : () => any
>n : number
>类型别名 :=> 数字
>s : string
>类型别名 :=> 文字

    private iAny:any;
>iAny : any
>类型别名 :=> 任意

    private iNum:number;
>iNum : number
>类型别名 :=> 数字

    private iObj:{ };
>iObj : {}
}

interface I3 {
>I3 : I3

    x: number;
>x : number
>类型别名 :=> 数字
}

interface I4 {
>I4 : I4

    ():I3;
>I3 : I3

    new ():I3;
>I3 : I3

    [call:number]:string;
>call : number
>类型别名 :=> 数字
}

class C2 implements I3 {
>C2 : C2
>I3 : I3

    public x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1
}

var a:I4 = function(){ 
>a : I4
>I4 : I4
>function(){     return new C2();} : () => C2

    return new C2();
>new C2() : C2
>C2 : typeof C2
}
new a();
>new a() : I3
>a : I4

/*var b:I4 = C2;
new b();
*/

var c:I4;
>c : I4
>I4 : I4

c[5];
>c[5] : string
>类型别名 :=> 文字
>c : I4
>5 : 5

c["foo"];
>c["foo"] : any
>类型别名 :=> 任意
>c : I4
>"foo" : "foo"

