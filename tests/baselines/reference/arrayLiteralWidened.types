=== tests/cases/conformance/types/typeRelationships/widenedTypes/arrayLiteralWidened.ts ===
// array literals are widened upon assignment according to their element type

var a = []; // any[]
>a : any[]
>[] : undefined[]

var a = [,,];
>a : any[]
>[,,] : undefined[]
> : undefined
>类型别名 :=> 未定
> : undefined
>类型别名 :=> 未定

var a = [null, null];
>a : any[]
>[null, null] : null[]
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

var a = [undefined, undefined];
>a : any[]
>[undefined, undefined] : undefined[]
>undefined : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

var b = [[], [null, null]]; // any[][]
>b : any[][]
>[[], [null, null]] : undefined[][]
>[] : undefined[]
>[null, null] : null[]
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

var b = [[], []];
>b : any[][]
>[[], []] : undefined[][]
>[] : undefined[]
>[] : undefined[]

var b = [[undefined, undefined]];
>b : any[][]
>[[undefined, undefined]] : undefined[][]
>[undefined, undefined] : undefined[]
>undefined : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

var c = [[[]]]; // any[][][]
>c : any[][][]
>[[[]]] : undefined[][][]
>[[]] : undefined[][]
>[] : undefined[]

var c = [[[null]],[undefined]]
>c : any[][][]
>[[[null]],[undefined]] : null[][][]
>[[null]] : null[][]
>[null] : null[]
>null : null
>类型别名 :=> 空值
>[undefined] : undefined[]
>undefined : undefined
>类型别名 :=> 未定

// no widening when one or more elements are non-widening

var x: undefined = undefined;
>x : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

var d = [x];
>d : undefined[]
>[x] : undefined[]
>x : undefined
>类型别名 :=> 未定

var d = [, x];
>d : undefined[]
>[, x] : undefined[]
> : undefined
>类型别名 :=> 未定
>x : undefined
>类型别名 :=> 未定

var d = [undefined, x];
>d : undefined[]
>[undefined, x] : undefined[]
>undefined : undefined
>类型别名 :=> 未定
>x : undefined
>类型别名 :=> 未定

