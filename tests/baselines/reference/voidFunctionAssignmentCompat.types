=== tests/cases/compiler/voidFunctionAssignmentCompat.ts ===
var fa = function(): any { return 3; }
>fa : () => 任意
>function(): any { return 3; } : () => 任意
>3 : 3

fa = function() { } // should not work
>fa = function() { } : () => 无值
>fa : () => 任意
>function() { } : () => 无值

var fv = function(): void {}
>fv : () => 无值
>function(): void {} : () => 无值

fv = function() { return 0; } // should work
>fv = function() { return 0; } : () => 数字
>fv : () => 无值
>function() { return 0; } : () => 数字
>0 : 0

function execAny(callback:(val:any)=>any) { return callback(0) }
>execAny : (callback: (val: 任意) => 任意) => 任意
>callback : (val: 任意) => 任意
>val : 任意
>类型别名 :=> 任意
>callback(0) : 任意
>类型别名 :=> 任意
>callback : (val: 任意) => 任意
>0 : 0

execAny(function () {}); // should work
>execAny(function () {}) : 任意
>类型别名 :=> 任意
>execAny : (callback: (val: 任意) => 任意) => 任意
>function () {} : () => 无值

function execVoid(callback:(val:any)=>void) { callback(0); }
>execVoid : (callback: (val: 任意) => 无值) => 无值
>callback : (val: 任意) => 无值
>val : 任意
>类型别名 :=> 任意
>callback(0) : 无值
>类型别名 :=> 无值
>callback : (val: 任意) => 无值
>0 : 0

execVoid(function () {return 0;}); // should work
>execVoid(function () {return 0;}) : 无值
>类型别名 :=> 无值
>execVoid : (callback: (val: 任意) => 无值) => 无值
>function () {return 0;} : () => 数字
>0 : 0

var fra: (v:any)=>any = function() { return function () {}; } // should work
>fra : (v: 任意) => 任意
>v : 任意
>类型别名 :=> 任意
>function() { return function () {}; } : () => () => 无值
>function () {} : () => 无值

var frv: (v:any)=>void = function() { return function () { return 0; } } // should work
>frv : (v: 任意) => 无值
>v : 任意
>类型别名 :=> 任意
>function() { return function () { return 0; } } : () => () => 数字
>function () { return 0; } : () => 数字
>0 : 0

var fra3: (v:any)=>string = (function() { return function (v:string) {return v;}; })() // should work
>fra3 : (v: 任意) => 文字
>v : 任意
>类型别名 :=> 任意
>(function() { return function (v:string) {return v;}; })() : (v: 文字) => 文字
>(function() { return function (v:string) {return v;}; }) : () => (v: 文字) => 文字
>function() { return function (v:string) {return v;}; } : () => (v: 文字) => 文字
>function (v:string) {return v;} : (v: 文字) => 文字
>v : 文字
>类型别名 :=> 文字
>v : 文字
>类型别名 :=> 文字

var frv3: (v:any)=>number = (function() { return function () { return 0; } })() // should work
>frv3 : (v: 任意) => 数字
>v : 任意
>类型别名 :=> 任意
>(function() { return function () { return 0; } })() : () => 数字
>(function() { return function () { return 0; } }) : () => () => 数字
>function() { return function () { return 0; } } : () => () => 数字
>function () { return 0; } : () => 数字
>0 : 0


