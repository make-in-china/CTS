=== tests/cases/compiler/optionalPropertiesTest.ts ===
var x: {p1:number; p2?:string; p3?:{():number;};};
>x : { p1: 数字; p2?: 文字; p3?: () => 数字; }
>p1 : 数字
>类型别名 :=> 数字
>p2 : 文字
>类型别名 :=> 文字
>p3 : () => 数字

interface IFoo
>IFoo : IFoo
{
    id: number;
>id : 数字
>类型别名 :=> 数字

    name?: string;
>name : 文字
>类型别名 :=> 文字

    print?(): void;
>print : () => 无值
}


var foo: IFoo;
>foo : IFoo
>IFoo : IFoo

foo = { id: 1234 };                // Ok
>foo = { id: 1234 } : { id: 数字; }
>foo : IFoo
>{ id: 1234 } : { id: 数字; }
>id : 数字
>类型别名 :=> 数字
>1234 : 1234

foo = { id: 1234, name: "test" };  // Ok
>foo = { id: 1234, name: "test" } : { id: 数字; name: 文字; }
>foo : IFoo
>{ id: 1234, name: "test" } : { id: 数字; name: 文字; }
>id : 数字
>类型别名 :=> 数字
>1234 : 1234
>name : 文字
>类型别名 :=> 文字
>"test" : "test"

foo = { name: "test" };            // Error, id missing
>foo = { name: "test" } : { name: 文字; }
>foo : IFoo
>{ name: "test" } : { name: 文字; }
>name : 文字
>类型别名 :=> 文字
>"test" : "test"

foo = {id: 1234, print:()=>{}}	   // Ok
>foo = {id: 1234, print:()=>{}} : { id: 数字; print: () => 无值; }
>foo : IFoo
>{id: 1234, print:()=>{}} : { id: 数字; print: () => 无值; }
>id : 数字
>类型别名 :=> 数字
>1234 : 1234
>print : () => 无值
>()=>{} : () => 无值

var s = foo.name || "default";
>s : 文字
>类型别名 :=> 文字
>foo.name || "default" : 文字
>类型别名 :=> 文字
>foo.name : 文字
>类型别名 :=> 文字
>foo : IFoo
>name : 文字
>类型别名 :=> 文字
>"default" : "default"

if (foo.print !== undefined) foo.print();
>foo.print !== undefined : 真假
>类型别名 :=> 真假
>foo.print : () => 无值
>foo : IFoo
>print : () => 无值
>undefined : 未定
>类型别名 :=> 未定
>foo.print() : 无值
>类型别名 :=> 无值
>foo.print : () => 无值
>foo : IFoo
>print : () => 无值

interface i1 { M: () => void; };
>i1 : i1
>M : () => 无值

interface i2 { M?: () => void; };
>i2 : i2
>M : () => 无值

interface i3 { M: number; };
>i3 : i3
>M : 数字
>类型别名 :=> 数字

interface i4 { M?: number; };
>i4 : i4
>M : 数字
>类型别名 :=> 数字

var test1: i1 = {};
>test1 : i1
>i1 : i1
>{} : {}

var test2: i3 = {};
>test2 : i3
>i3 : i3
>{} : {}

var test3: i2 = {};
>test3 : i2
>i2 : i2
>{} : {}

var test4: i4 = {};
>test4 : i4
>i4 : i4
>{} : {}

var test5: i1 = { M: function () { } };
>test5 : i1
>i1 : i1
>{ M: function () { } } : { M: () => 无值; }
>M : () => 无值
>function () { } : () => 无值

var test6: i3 = { M: 5 };
>test6 : i3
>i3 : i3
>{ M: 5 } : { M: 数字; }
>M : 数字
>类型别名 :=> 数字
>5 : 5

var test7: i2 = { M: function () { } };
>test7 : i2
>i2 : i2
>{ M: function () { } } : { M: () => 无值; }
>M : () => 无值
>function () { } : () => 无值

test7 = {};
>test7 = {} : {}
>test7 : i2
>{} : {}

var test8: i4 = { M: 5 }
>test8 : i4
>i4 : i4
>{ M: 5 } : { M: 数字; }
>M : 数字
>类型别名 :=> 数字
>5 : 5

test8 = {};
>test8 = {} : {}
>test8 : i4
>{} : {}

var test9_1: i2;
>test9_1 : i2
>i2 : i2

var test9_2: i1;
>test9_2 : i1
>i1 : i1

test9_1 = test9_2;
>test9_1 = test9_2 : i1
>test9_1 : i2
>test9_2 : i1

var test10_1: i1;
>test10_1 : i1
>i1 : i1

var test10_2: i2;
>test10_2 : i2
>i2 : i2

test10_1 = test10_2;
>test10_1 = test10_2 : i2
>test10_1 : i1
>test10_2 : i2

