=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallToOverloadedMethodWithOverloadedArguments.ts ===
module m1 {
>m1 : 类为 m1

    interface Promise<T> {
>Promise : Promise<T>
>T : T

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : <U>(cb: (x: T) => Promise<U>) => Promise<U>
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : (n: 数字) => Promise<数字>
>n : 数字
>类型别名 :=> 数字
>Promise : Promise<T>

    var numPromise: Promise<number>;
>numPromise : Promise<数字>
>Promise : Promise<T>

    var newPromise = numPromise.then(testFunction);
>newPromise : Promise<数字>
>numPromise.then(testFunction) : Promise<数字>
>numPromise.then : <U>(cb: (x: 数字) => Promise<U>) => Promise<U>
>numPromise : Promise<数字>
>then : <U>(cb: (x: 数字) => Promise<U>) => Promise<U>
>testFunction : (n: 数字) => Promise<数字>
}

//////////////////////////////////////

module m2 {
>m2 : 类为 m2

    interface Promise<T> {
>Promise : Promise<T>
>T : T

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : <U>(cb: (x: T) => Promise<U>) => Promise<U>
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; }
>n : 数字
>类型别名 :=> 数字
>Promise : Promise<T>

    declare function testFunction(s: string): Promise<string>;
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; }
>s : 文字
>类型别名 :=> 文字
>Promise : Promise<T>

    var numPromise: Promise<number>;
>numPromise : Promise<数字>
>Promise : Promise<T>

    var newPromise = numPromise.then(testFunction);
>newPromise : 任意
>类型别名 :=> 任意
>numPromise.then(testFunction) : 任意
>类型别名 :=> 任意
>numPromise.then : <U>(cb: (x: 数字) => Promise<U>) => Promise<U>
>numPromise : Promise<数字>
>then : <U>(cb: (x: 数字) => Promise<U>) => Promise<U>
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; }
}

//////////////////////////////////////

module m3 {
>m3 : 类为 m3

    interface Promise<T> {
>Promise : Promise<T>
>T : T

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : { <U>(cb: (x: T) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U

        then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
>then : { <U>(cb: (x: T) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>error : (error: 任意) => Promise<U>
>error : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : (n: 数字) => Promise<数字>
>n : 数字
>类型别名 :=> 数字
>Promise : Promise<T>

    var numPromise: Promise<number>;
>numPromise : Promise<数字>
>Promise : Promise<T>

    var newPromise = numPromise.then(testFunction);
>newPromise : Promise<数字>
>numPromise.then(testFunction) : Promise<数字>
>numPromise.then : { <U>(cb: (x: 数字) => Promise<U>): Promise<U>; <U>(cb: (x: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>numPromise : Promise<数字>
>then : { <U>(cb: (x: 数字) => Promise<U>): Promise<U>; <U>(cb: (x: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>testFunction : (n: 数字) => Promise<数字>
}

//////////////////////////////////////

module m4 {
>m4 : 类为 m4

    interface Promise<T> {
>Promise : Promise<T>
>T : T

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : { <U>(cb: (x: T) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U

        then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
>then : { <U>(cb: (x: T) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>error : (error: 任意) => Promise<U>
>error : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; }
>n : 数字
>类型别名 :=> 数字
>Promise : Promise<T>

    declare function testFunction(s: string): Promise<string>;
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; }
>s : 文字
>类型别名 :=> 文字
>Promise : Promise<T>

    var numPromise: Promise<number>;
>numPromise : Promise<数字>
>Promise : Promise<T>

    var newPromise = numPromise.then(testFunction);
>newPromise : 任意
>类型别名 :=> 任意
>numPromise.then(testFunction) : 任意
>类型别名 :=> 任意
>numPromise.then : { <U>(cb: (x: 数字) => Promise<U>): Promise<U>; <U>(cb: (x: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>numPromise : Promise<数字>
>then : { <U>(cb: (x: 数字) => Promise<U>): Promise<U>; <U>(cb: (x: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; }
}

//////////////////////////////////////

module m5 {
>m5 : 类为 m5

    interface Promise<T> {
>Promise : Promise<T>
>T : T

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : { <U>(cb: (x: T) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => U, progress?: (preservation: 任意) => 无值): Promise<U>; }
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U

        then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
>then : { <U>(cb: (x: T) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => U, progress?: (preservation: 任意) => 无值): Promise<U>; }
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>error : (error: 任意) => Promise<U>
>error : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U

        then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => U, progress?: (preservation: any) => void): Promise<U>;
>then : { <U>(cb: (x: T) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => U, progress?: (preservation: 任意) => 无值): Promise<U>; }
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>error : (error: 任意) => U
>error : 任意
>类型别名 :=> 任意
>U : U
>progress : (preservation: 任意) => 无值
>preservation : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; }
>n : 数字
>类型别名 :=> 数字
>Promise : Promise<T>

    declare function testFunction(s: string): Promise<string>;
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; }
>s : 文字
>类型别名 :=> 文字
>Promise : Promise<T>

    var numPromise: Promise<number>;
>numPromise : Promise<数字>
>Promise : Promise<T>

    var newPromise = numPromise.then(testFunction);
>newPromise : 任意
>类型别名 :=> 任意
>numPromise.then(testFunction) : 任意
>类型别名 :=> 任意
>numPromise.then : { <U>(cb: (x: 数字) => Promise<U>): Promise<U>; <U>(cb: (x: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; <U>(cb: (x: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (preservation: 任意) => 无值): Promise<U>; }
>numPromise : Promise<数字>
>then : { <U>(cb: (x: 数字) => Promise<U>): Promise<U>; <U>(cb: (x: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; <U>(cb: (x: 数字) => Promise<U>, error?: (error: 任意) => U, progress?: (preservation: 任意) => 无值): Promise<U>; }
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; }
}

//////////////////////////////////////

module m6 {
>m6 : 类为 m6

    interface Promise<T> {
>Promise : Promise<T>
>T : T

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : { <U>(cb: (x: T) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U

        then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
>then : { <U>(cb: (x: T) => Promise<U>): Promise<U>; <U>(cb: (x: T) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>error : (error: 任意) => Promise<U>
>error : 任意
>类型别名 :=> 任意
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; (b: 真假): Promise<真假>; }
>n : 数字
>类型别名 :=> 数字
>Promise : Promise<T>

    declare function testFunction(s: string): Promise<string>;
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; (b: 真假): Promise<真假>; }
>s : 文字
>类型别名 :=> 文字
>Promise : Promise<T>

    declare function testFunction(b: boolean): Promise<boolean>;
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; (b: 真假): Promise<真假>; }
>b : 真假
>类型别名 :=> 真假
>Promise : Promise<T>

    var numPromise: Promise<number>;
>numPromise : Promise<数字>
>Promise : Promise<T>

    var newPromise = numPromise.then(testFunction);
>newPromise : 任意
>类型别名 :=> 任意
>numPromise.then(testFunction) : 任意
>类型别名 :=> 任意
>numPromise.then : { <U>(cb: (x: 数字) => Promise<U>): Promise<U>; <U>(cb: (x: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>numPromise : Promise<数字>
>then : { <U>(cb: (x: 数字) => Promise<U>): Promise<U>; <U>(cb: (x: 数字) => Promise<U>, error?: (error: 任意) => Promise<U>): Promise<U>; }
>testFunction : { (n: 数字): Promise<数字>; (s: 文字): Promise<文字>; (b: 真假): Promise<真假>; }
}

