=== tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithStringType.ts ===
// void  operator on string type
var STRING: string;
>STRING : string
>类型别名 :=> 文字

var STRING1: string[] = ["", "abc"];
>STRING1 : string[]
>["", "abc"] : string[]
>"" : ""
>"abc" : "abc"

function foo(): string { return "abc"; }
>foo : () => string
>"abc" : "abc"

class A {
>A : A

    public a: string;
>a : string
>类型别名 :=> 文字

    static foo() { return ""; }
>foo : () => string
>"" : ""
}
module M {
>M : typeof M

    export var n: string;
>n : string
>类型别名 :=> 文字
}

var objA = new A();
>objA : A
>new A() : A
>A : typeof A

// string type var
var ResultIsAny1 = void STRING;
>ResultIsAny1 : any
>类型别名 :=> 任意
>void STRING : undefined
>类型别名 :=> 未定
>STRING : string
>类型别名 :=> 文字

var ResultIsAny2 = void STRING1;
>ResultIsAny2 : any
>类型别名 :=> 任意
>void STRING1 : undefined
>类型别名 :=> 未定
>STRING1 : string[]

// string type literal
var ResultIsAny3 = void "";
>ResultIsAny3 : any
>类型别名 :=> 任意
>void "" : undefined
>类型别名 :=> 未定
>"" : ""

var ResultIsAny4 = void { x: "", y: "" };
>ResultIsAny4 : any
>类型别名 :=> 任意
>void { x: "", y: "" } : undefined
>类型别名 :=> 未定
>{ x: "", y: "" } : { x: string; y: string; }
>x : string
>类型别名 :=> 文字
>"" : ""
>y : string
>类型别名 :=> 文字
>"" : ""

var ResultIsAny5 = void { x: "", y: (s: string) => { return s; } };
>ResultIsAny5 : any
>类型别名 :=> 任意
>void { x: "", y: (s: string) => { return s; } } : undefined
>类型别名 :=> 未定
>{ x: "", y: (s: string) => { return s; } } : { x: string; y: (s: string) => string; }
>x : string
>类型别名 :=> 文字
>"" : ""
>y : (s: string) => string
>(s: string) => { return s; } : (s: string) => string
>s : string
>类型别名 :=> 文字
>s : string
>类型别名 :=> 文字

// string type expressions
var ResultIsAny6 = void objA.a;
>ResultIsAny6 : any
>类型别名 :=> 任意
>void objA.a : undefined
>类型别名 :=> 未定
>objA.a : string
>类型别名 :=> 文字
>objA : A
>a : string
>类型别名 :=> 文字

var ResultIsAny7 = void M.n;
>ResultIsAny7 : any
>类型别名 :=> 任意
>void M.n : undefined
>类型别名 :=> 未定
>M.n : string
>类型别名 :=> 文字
>M : typeof M
>n : string
>类型别名 :=> 文字

var ResultIsAny8 = void STRING1[0];
>ResultIsAny8 : any
>类型别名 :=> 任意
>void STRING1[0] : undefined
>类型别名 :=> 未定
>STRING1[0] : string
>类型别名 :=> 文字
>STRING1 : string[]
>0 : 0

var ResultIsAny9 = void foo();
>ResultIsAny9 : any
>类型别名 :=> 任意
>void foo() : undefined
>类型别名 :=> 未定
>foo() : string
>类型别名 :=> 文字
>foo : () => string

var ResultIsAny10 = void A.foo();
>ResultIsAny10 : any
>类型别名 :=> 任意
>void A.foo() : undefined
>类型别名 :=> 未定
>A.foo() : string
>类型别名 :=> 文字
>A.foo : () => string
>A : typeof A
>foo : () => string

var ResultIsAny11 = void (STRING + STRING);
>ResultIsAny11 : any
>类型别名 :=> 任意
>void (STRING + STRING) : undefined
>类型别名 :=> 未定
>(STRING + STRING) : string
>类型别名 :=> 文字
>STRING + STRING : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字

var ResultIsAny12 = void STRING.charAt(0);
>ResultIsAny12 : any
>类型别名 :=> 任意
>void STRING.charAt(0) : undefined
>类型别名 :=> 未定
>STRING.charAt(0) : string
>类型别名 :=> 文字
>STRING.charAt : (pos: number) => string
>STRING : string
>类型别名 :=> 文字
>charAt : (pos: number) => string
>0 : 0

// multiple void  operators
var ResultIsAny13 = void void STRING;
>ResultIsAny13 : any
>类型别名 :=> 任意
>void void STRING : undefined
>类型别名 :=> 未定
>void STRING : undefined
>类型别名 :=> 未定
>STRING : string
>类型别名 :=> 文字

var ResultIsAny14 = void void void (STRING + STRING);
>ResultIsAny14 : any
>类型别名 :=> 任意
>void void void (STRING + STRING) : undefined
>类型别名 :=> 未定
>void void (STRING + STRING) : undefined
>类型别名 :=> 未定
>void (STRING + STRING) : undefined
>类型别名 :=> 未定
>(STRING + STRING) : string
>类型别名 :=> 文字
>STRING + STRING : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字

// miss assignment operators
void "";
>void "" : undefined
>类型别名 :=> 未定
>"" : ""

void STRING;
>void STRING : undefined
>类型别名 :=> 未定
>STRING : string
>类型别名 :=> 文字

void STRING1;
>void STRING1 : undefined
>类型别名 :=> 未定
>STRING1 : string[]

void foo();
>void foo() : undefined
>类型别名 :=> 未定
>foo() : string
>类型别名 :=> 文字
>foo : () => string

void objA.a,M.n;
>void objA.a,M.n : string
>类型别名 :=> 文字
>void objA.a : undefined
>类型别名 :=> 未定
>objA.a : string
>类型别名 :=> 文字
>objA : A
>a : string
>类型别名 :=> 文字
>M.n : string
>类型别名 :=> 文字
>M : typeof M
>n : string
>类型别名 :=> 文字

