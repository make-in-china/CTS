=== tests/cases/compiler/main.ts ===
/// <reference path="modules.d.ts"/>

// import-equals
import z1 = require("interface");
>z1 : 任意
>类型别名 :=> 任意

import z2 = require("variable");
>z2 : { a: 数字; b: 数字; }

import z3 = require("interface-variable");
>z3 : { a: 数字; b: 数字; }

import z4 = require("module");
>z4 : 类为 z4

import z5 = require("interface-module");
>z5 : 类为 z5

import z6 = require("variable-module");
>z6 : { a: 数字; b: 数字; }

import z7 = require("function");
>z7 : () => 任意

import z8 = require("function-module");
>z8 : 类为 z8

import z9 = require("class");
>z9 : 类为 z9

import z0 = require("class-module");
>z0 : 类为 z0

z1.a;
>z1.a : 任意
>类型别名 :=> 任意
>z1 : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

z2.a;
>z2.a : 数字
>类型别名 :=> 数字
>z2 : { a: 数字; b: 数字; }
>a : 数字
>类型别名 :=> 数字

z3.a;
>z3.a : 数字
>类型别名 :=> 数字
>z3 : { a: 数字; b: 数字; }
>a : 数字
>类型别名 :=> 数字

z4.a;
>z4.a : 数字
>类型别名 :=> 数字
>z4 : 类为 z4
>a : 数字
>类型别名 :=> 数字

z5.a;
>z5.a : 数字
>类型别名 :=> 数字
>z5 : 类为 z5
>a : 数字
>类型别名 :=> 数字

z6.a;
>z6.a : 数字
>类型别名 :=> 数字
>z6 : { a: 数字; b: 数字; }
>a : 数字
>类型别名 :=> 数字

z7.a;
>z7.a : 任意
>类型别名 :=> 任意
>z7 : () => 任意
>a : 任意
>类型别名 :=> 任意

z8.a;
>z8.a : 数字
>类型别名 :=> 数字
>z8 : 类为 z8
>a : 数字
>类型别名 :=> 数字

z9.a;
>z9.a : 任意
>类型别名 :=> 任意
>z9 : 类为 z9
>a : 任意
>类型别名 :=> 任意

z0.a;
>z0.a : 数字
>类型别名 :=> 数字
>z0 : 类为 z0
>a : 数字
>类型别名 :=> 数字

// default import
import x1 from "interface";
>x1 : 任意
>类型别名 :=> 任意

import x2 from "variable";
>x2 : 任意
>类型别名 :=> 任意

import x3 from "interface-variable";
>x3 : 任意
>类型别名 :=> 任意

import x4 from "module";
>x4 : 任意
>类型别名 :=> 任意

import x5 from "interface-module";
>x5 : 任意
>类型别名 :=> 任意

import x6 from "variable-module";
>x6 : 任意
>类型别名 :=> 任意

import x7 from "function";
>x7 : 任意
>类型别名 :=> 任意

import x8 from "function-module";
>x8 : 任意
>类型别名 :=> 任意

import x9 from "class";
>x9 : 任意
>类型别名 :=> 任意

import x0 from "class-module";
>x0 : 任意
>类型别名 :=> 任意

// namespace import
import * as y1 from "interface";
>y1 : 任意
>类型别名 :=> 任意

import * as y2 from "variable";
>y2 : { a: 数字; b: 数字; }

import * as y3 from "interface-variable";
>y3 : { a: 数字; b: 数字; }

import * as y4 from "module";
>y4 : 类为 z4

import * as y5 from "interface-module";
>y5 : 类为 z5

import * as y6 from "variable-module";
>y6 : { a: 数字; b: 数字; }

import * as y7 from "function";
>y7 : () => 任意

import * as y8 from "function-module";
>y8 : 类为 z8

import * as y9 from "class";
>y9 : 类为 z9

import * as y0 from "class-module";
>y0 : 类为 z0

y1.a;
>y1.a : 任意
>类型别名 :=> 任意
>y1 : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

y2.a;
>y2.a : 数字
>类型别名 :=> 数字
>y2 : { a: 数字; b: 数字; }
>a : 数字
>类型别名 :=> 数字

y3.a;
>y3.a : 数字
>类型别名 :=> 数字
>y3 : { a: 数字; b: 数字; }
>a : 数字
>类型别名 :=> 数字

y4.a;
>y4.a : 数字
>类型别名 :=> 数字
>y4 : 类为 z4
>a : 数字
>类型别名 :=> 数字

y5.a;
>y5.a : 数字
>类型别名 :=> 数字
>y5 : 类为 z5
>a : 数字
>类型别名 :=> 数字

y6.a;
>y6.a : 数字
>类型别名 :=> 数字
>y6 : { a: 数字; b: 数字; }
>a : 数字
>类型别名 :=> 数字

y7.a;
>y7.a : 任意
>类型别名 :=> 任意
>y7 : () => 任意
>a : 任意
>类型别名 :=> 任意

y8.a;
>y8.a : 数字
>类型别名 :=> 数字
>y8 : 类为 z8
>a : 数字
>类型别名 :=> 数字

y9.a;
>y9.a : 任意
>类型别名 :=> 任意
>y9 : 类为 z9
>a : 任意
>类型别名 :=> 任意

y0.a;
>y0.a : 数字
>类型别名 :=> 数字
>y0 : 类为 z0
>a : 数字
>类型别名 :=> 数字

// named import
import { a as a1 } from "interface";
>a : 任意
>类型别名 :=> 任意
>a1 : 任意
>类型别名 :=> 任意

import { a as a2 } from "variable";
>a : 数字
>类型别名 :=> 数字
>a2 : 数字
>类型别名 :=> 数字

import { a as a3 } from "interface-variable";
>a : 数字
>类型别名 :=> 数字
>a3 : 数字
>类型别名 :=> 数字

import { a as a4 } from "module";
>a : 数字
>类型别名 :=> 数字
>a4 : 数字
>类型别名 :=> 数字

import { a as a5 } from "interface-module";
>a : 数字
>类型别名 :=> 数字
>a5 : 数字
>类型别名 :=> 数字

import { a as a6 } from "variable-module";
>a : 数字
>类型别名 :=> 数字
>a6 : 数字
>类型别名 :=> 数字

import { a as a7 } from "function";
>a : 任意
>类型别名 :=> 任意
>a7 : 任意
>类型别名 :=> 任意

import { a as a8 } from "function-module";
>a : 数字
>类型别名 :=> 数字
>a8 : 数字
>类型别名 :=> 数字

import { a as a9 } from "class";
>a : 任意
>类型别名 :=> 任意
>a9 : 任意
>类型别名 :=> 任意

import { a as a0 } from "class-module";
>a : 数字
>类型别名 :=> 数字
>a0 : 数字
>类型别名 :=> 数字

a1;
>a1 : 任意
>类型别名 :=> 任意

a2;
>a2 : 数字
>类型别名 :=> 数字

a3;
>a3 : 数字
>类型别名 :=> 数字

a4;
>a4 : 数字
>类型别名 :=> 数字

a5;
>a5 : 数字
>类型别名 :=> 数字

a6;
>a6 : 数字
>类型别名 :=> 数字

a7;
>a7 : 任意
>类型别名 :=> 任意

a8;
>a8 : 数字
>类型别名 :=> 数字

a9;
>a9 : 任意
>类型别名 :=> 任意

a0;
>a0 : 数字
>类型别名 :=> 数字

// named export
export { a as a1 } from "interface";
>a : 任意
>类型别名 :=> 任意
>a1 : 任意
>类型别名 :=> 任意

export { a as a2 } from "variable";
>a : 数字
>类型别名 :=> 数字
>a2 : 数字
>类型别名 :=> 数字

export { a as a3 } from "interface-variable";
>a : 数字
>类型别名 :=> 数字
>a3 : 数字
>类型别名 :=> 数字

export { a as a4 } from "module";
>a : 数字
>类型别名 :=> 数字
>a4 : 数字
>类型别名 :=> 数字

export { a as a5 } from "interface-module";
>a : 数字
>类型别名 :=> 数字
>a5 : 数字
>类型别名 :=> 数字

export { a as a6 } from "variable-module";
>a : 数字
>类型别名 :=> 数字
>a6 : 数字
>类型别名 :=> 数字

export { a as a7 } from "function";
>a : 任意
>类型别名 :=> 任意
>a7 : 任意
>类型别名 :=> 任意

export { a as a8 } from "function-module";
>a : 数字
>类型别名 :=> 数字
>a8 : 数字
>类型别名 :=> 数字

export { a as a9 } from "class";
>a : 任意
>类型别名 :=> 任意
>a9 : 任意
>类型别名 :=> 任意

export { a as a0 } from "class-module";
>a : 数字
>类型别名 :=> 数字
>a0 : 数字
>类型别名 :=> 数字

// export-star
export * from "interface";
export * from "variable";
export * from "interface-variable";
export * from "module";
export * from "interface-module";
export * from "variable-module";
export * from "function";
export * from "function-module";
export * from "class";
export * from "class-module";

=== tests/cases/compiler/modules.d.ts ===
declare module "interface" {
    interface Foo {
>Foo : Foo

        x: number;
>x : 数字
>类型别名 :=> 数字

        y: number;
>y : 数字
>类型别名 :=> 数字
    }
    export = Foo;
>Foo : Foo
}

declare module "variable" {
    var Foo: {
>Foo : { a: 数字; b: 数字; }

        a: number;
>a : 数字
>类型别名 :=> 数字

        b: number;
>b : 数字
>类型别名 :=> 数字
    }
    export = Foo;
>Foo : { a: 数字; b: 数字; }
}

declare module "interface-variable" {
    interface Foo {
>Foo : Foo

        x: number;
>x : 数字
>类型别名 :=> 数字

        y: number;
>y : 数字
>类型别名 :=> 数字
    }
    var Foo: {
>Foo : { a: 数字; b: 数字; }

        a: number;
>a : 数字
>类型别名 :=> 数字

        b: number;
>b : 数字
>类型别名 :=> 数字
    }
    export = Foo;
>Foo : Foo
}

declare module "module" {
    module Foo {
>Foo : 类为 Foo

        export var a: number;
>a : 数字
>类型别名 :=> 数字

        export var b: number;
>b : 数字
>类型别名 :=> 数字
    }
    export = Foo;
>Foo : 类为 Foo
}

declare module "interface-module" {
    interface Foo {
>Foo : Foo

        x: number;
>x : 数字
>类型别名 :=> 数字

        y: number;
>y : 数字
>类型别名 :=> 数字
    }
    module Foo {
>Foo : 类为 Foo

        export var a: number;
>a : 数字
>类型别名 :=> 数字

        export var b: number;
>b : 数字
>类型别名 :=> 数字
    }
    export = Foo;
>Foo : Foo
}

declare module "variable-module" {
    module Foo {
>Foo : { a: 数字; b: 数字; }

        interface Bar {
>Bar : Bar

            x: number;
>x : 数字
>类型别名 :=> 数字

            y: number;
>y : 数字
>类型别名 :=> 数字
        }
    }
    var Foo: {
>Foo : { a: 数字; b: 数字; }

        a: number;
>a : 数字
>类型别名 :=> 数字

        b: number;
>b : 数字
>类型别名 :=> 数字
    }
    export = Foo;
>Foo : { a: 数字; b: 数字; }
}

declare module "function" {
    function foo();
>foo : () => 任意

    export = foo;
>foo : () => 任意
}

declare module "function-module" {
    function foo();
>foo : 类为 foo

    module foo {
>foo : 类为 foo

        export var a: number;
>a : 数字
>类型别名 :=> 数字

        export var b: number;
>b : 数字
>类型别名 :=> 数字
    }
    export = foo;
>foo : 类为 foo
}

declare module "class" {
    class Foo {
>Foo : Foo

        x: number;
>x : 数字
>类型别名 :=> 数字

        y: number;
>y : 数字
>类型别名 :=> 数字
    }
    export = Foo;
>Foo : Foo
}

declare module "class-module" {
    class Foo {
>Foo : Foo

        x: number;
>x : 数字
>类型别名 :=> 数字

        y: number;
>y : 数字
>类型别名 :=> 数字
    }
    module Foo {
>Foo : 类为 Foo

        export var a: number;
>a : 数字
>类型别名 :=> 数字

        export var b: number;
>b : 数字
>类型别名 :=> 数字
    }
    export = Foo;
>Foo : Foo
}

