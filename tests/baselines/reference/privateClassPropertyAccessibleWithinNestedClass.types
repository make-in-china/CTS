=== tests/cases/conformance/classes/members/accessibility/privateClassPropertyAccessibleWithinNestedClass.ts ===
// no errors

class C {
>C : C

    private x: string;
>x : 文字
>类型别名 :=> 文字

    private get y() { return this.x; }
>y : 文字
>类型别名 :=> 文字
>this.x : 文字
>类型别名 :=> 文字
>this : 本体
>x : 文字
>类型别名 :=> 文字

    private set y(x) { this.y = this.x; }
>y : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>this.y = this.x : 文字
>类型别名 :=> 文字
>this.y : 文字
>类型别名 :=> 文字
>this : 本体
>y : 文字
>类型别名 :=> 文字
>this.x : 文字
>类型别名 :=> 文字
>this : 本体
>x : 文字
>类型别名 :=> 文字

    private foo() { return this.foo; }
>foo : () => 任意
>this.foo : () => 任意
>this : 本体
>foo : () => 任意

    private static x: string;
>x : 文字
>类型别名 :=> 文字

    private static get y() { return this.x; }
>y : 文字
>类型别名 :=> 文字
>this.x : 文字
>类型别名 :=> 文字
>this : 类为 C
>x : 文字
>类型别名 :=> 文字

    private static set y(x) { this.y = this.x; }
>y : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>this.y = this.x : 文字
>类型别名 :=> 文字
>this.y : 文字
>类型别名 :=> 文字
>this : 类为 C
>y : 文字
>类型别名 :=> 文字
>this.x : 文字
>类型别名 :=> 文字
>this : 类为 C
>x : 文字
>类型别名 :=> 文字

    private static foo() { return this.foo; }
>foo : () => 类为 C.foo
>this.foo : () => 类为 C.foo
>this : 类为 C
>foo : () => 类为 C.foo

    private static bar() { this.foo(); }
>bar : () => 无值
>this.foo() : () => 类为 C.foo
>this.foo : () => 类为 C.foo
>this : 类为 C
>foo : () => 类为 C.foo

    private bar() {
>bar : () => 无值

        class C2 {
>C2 : C2

            private foo() {
>foo : () => 无值

                let x: C;
>x : C
>C : C

                var x1 = x.foo;
>x1 : () => 任意
>x.foo : () => 任意
>x : C
>foo : () => 任意

                var x2 = x.bar;
>x2 : () => 无值
>x.bar : () => 无值
>x : C
>bar : () => 无值

                var x3 = x.x;
>x3 : 文字
>类型别名 :=> 文字
>x.x : 文字
>类型别名 :=> 文字
>x : C
>x : 文字
>类型别名 :=> 文字

                var x4 = x.y;
>x4 : 文字
>类型别名 :=> 文字
>x.y : 文字
>类型别名 :=> 文字
>x : C
>y : 文字
>类型别名 :=> 文字

                var sx1 = C.x;
>sx1 : 文字
>类型别名 :=> 文字
>C.x : 文字
>类型别名 :=> 文字
>C : 类为 C
>x : 文字
>类型别名 :=> 文字

                var sx2 = C.y;
>sx2 : 文字
>类型别名 :=> 文字
>C.y : 文字
>类型别名 :=> 文字
>C : 类为 C
>y : 文字
>类型别名 :=> 文字

                var sx3 = C.bar;
>sx3 : () => 无值
>C.bar : () => 无值
>C : 类为 C
>bar : () => 无值

                var sx4 = C.foo;
>sx4 : () => 类为 C.foo
>C.foo : () => 类为 C.foo
>C : 类为 C
>foo : () => 类为 C.foo

                let y = new C();
>y : C
>new C() : C
>C : 类为 C

                var y1 = y.foo;
>y1 : () => 任意
>y.foo : () => 任意
>y : C
>foo : () => 任意

                var y2 = y.bar;
>y2 : () => 无值
>y.bar : () => 无值
>y : C
>bar : () => 无值

                var y3 = y.x;
>y3 : 文字
>类型别名 :=> 文字
>y.x : 文字
>类型别名 :=> 文字
>y : C
>x : 文字
>类型别名 :=> 文字

                var y4 = y.y;
>y4 : 文字
>类型别名 :=> 文字
>y.y : 文字
>类型别名 :=> 文字
>y : C
>y : 文字
>类型别名 :=> 文字
            }
        }
    }
}
