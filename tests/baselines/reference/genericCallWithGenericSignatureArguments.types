=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithGenericSignatureArguments.ts ===
// When a function expression is inferentially typed (section 4.9.3) and a type assigned to a parameter in that expression references type parameters for which inferences are being made, 
// the corresponding inferred type arguments to become fixed and no further candidate inferences are made for them.

function foo<T>(a: (x: T) => T, b: (x: T) => T) {
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>T : T
>a : (x: T) => T
>x : T
>T : T
>T : T
>b : (x: T) => T
>x : T
>T : T
>T : T

    var r: (x: T) => T;
>r : (x: T) => T
>x : T
>T : T
>T : T

    return r;
>r : (x: T) => T
}

//var r1 = foo((x: number) => 1, (x: string) => ''); // error
var r1b = foo((x) => 1, (x) => ''); // {} => {}
>r1b : (x: {}) => {}
>foo((x) => 1, (x) => '') : (x: {}) => {}
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(x) => 1 : (x: {}) => 数字
>x : {}
>1 : 1
>(x) => '' : (x: {}) => 文字
>x : {}
>'' : ""

var r2 = foo((x: Object) => null, (x: string) => ''); // Object => Object
>r2 : (x: 任意) => 任意
>foo((x: Object) => null, (x: string) => '') : (x: 任意) => 任意
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(x: Object) => null : (x: Object) => 任意
>x : Object
>Object : Object
>null : 空值
>类型别名 :=> 空值
>(x: string) => '' : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>'' : ""

var r3 = foo((x: number) => 1, (x: Object) => null); // number => number
>r3 : (x: 任意) => 任意
>foo((x: number) => 1, (x: Object) => null) : (x: 任意) => 任意
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1
>(x: Object) => null : (x: Object) => 任意
>x : Object
>Object : Object
>null : 空值
>类型别名 :=> 空值

var r3ii = foo((x: number) => 1, (x: number) => 1); // number => number
>r3ii : (x: 数字) => 数字
>foo((x: number) => 1, (x: number) => 1) : (x: 数字) => 数字
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

var a: { x: number; y?: number; };
>a : { x: 数字; y?: 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

var b: { x: number; z?: number; };
>b : { x: 数字; z?: 数字; }
>x : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字

var r4 = foo((x: typeof a) => a, (x: typeof b) => b); // typeof a => typeof a
>r4 : (x: { x: 数字; y?: 数字; }) => { x: 数字; y?: 数字; }
>foo((x: typeof a) => a, (x: typeof b) => b) : (x: { x: 数字; y?: 数字; }) => { x: 数字; y?: 数字; }
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(x: typeof a) => a : (x: { x: 数字; y?: 数字; }) => { x: 数字; y?: 数字; }
>x : { x: 数字; y?: 数字; }
>a : { x: 数字; y?: 数字; }
>a : { x: 数字; y?: 数字; }
>(x: typeof b) => b : (x: { x: 数字; z?: 数字; }) => { x: 数字; z?: 数字; }
>x : { x: 数字; z?: 数字; }
>b : { x: 数字; z?: 数字; }
>b : { x: 数字; z?: 数字; }

var r5 = foo((x: typeof b) => b, (x: typeof a) => a); // typeof b => typeof b
>r5 : (x: { x: 数字; z?: 数字; }) => { x: 数字; z?: 数字; }
>foo((x: typeof b) => b, (x: typeof a) => a) : (x: { x: 数字; z?: 数字; }) => { x: 数字; z?: 数字; }
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(x: typeof b) => b : (x: { x: 数字; z?: 数字; }) => { x: 数字; z?: 数字; }
>x : { x: 数字; z?: 数字; }
>b : { x: 数字; z?: 数字; }
>b : { x: 数字; z?: 数字; }
>(x: typeof a) => a : (x: { x: 数字; y?: 数字; }) => { x: 数字; y?: 数字; }
>x : { x: 数字; y?: 数字; }
>a : { x: 数字; y?: 数字; }
>a : { x: 数字; y?: 数字; }

function other<T>(x: T) {
>other : <T>(x: T) => 无值
>T : T
>x : T
>T : T

    var r6 = foo((a: T) => a, (b: T) => b); // T => T
>r6 : (x: T) => T
>foo((a: T) => a, (b: T) => b) : (x: T) => T
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(a: T) => a : (a: T) => T
>a : T
>T : T
>a : T
>(b: T) => b : (b: T) => T
>b : T
>T : T
>b : T

    var r6b = foo((a) => a, (b) => b); // {} => {}
>r6b : (x: {}) => {}
>foo((a) => a, (b) => b) : (x: {}) => {}
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(a) => a : (a: {}) => {}
>a : {}
>a : {}
>(b) => b : (b: {}) => {}
>b : {}
>b : {}
}

function other2<T extends Date>(x: T) {
>other2 : <T 扩展 Date>(x: T) => 无值
>T : T
>Date : Date
>x : T
>T : T

    var r7 = foo((a: T) => a, (b: T) => b); // T => T
>r7 : (x: T) => T
>foo((a: T) => a, (b: T) => b) : (x: T) => T
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(a: T) => a : (a: T) => T
>a : T
>T : T
>a : T
>(b: T) => b : (b: T) => T
>b : T
>T : T
>b : T

    var r7b = foo((a) => a, (b) => b); // {} => {}
>r7b : (x: {}) => {}
>foo((a) => a, (b) => b) : (x: {}) => {}
>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(a) => a : (a: {}) => {}
>a : {}
>a : {}
>(b) => b : (b: {}) => {}
>b : {}
>b : {}

    var r8 = r7(null);
>r8 : T
>r7(null) : T
>r7 : (x: T) => T
>null : 空值
>类型别名 :=> 空值

    // BUG 835518
    //var r9 = r7(new Date());
}


function foo2<T extends Date>(a: (x: T) => T, b: (x: T) => T) {
>foo2 : <T 扩展 Date>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>T : T
>Date : Date
>a : (x: T) => T
>x : T
>T : T
>T : T
>b : (x: T) => T
>x : T
>T : T
>T : T

    var r: (x: T) => T;
>r : (x: T) => T
>x : T
>T : T
>T : T

    return r;
>r : (x: T) => T
}

function other3<T extends RegExp>(x: T) {
>other3 : <T 扩展 RegExp>(x: T) => 无值
>T : T
>RegExp : RegExp
>x : T
>T : T

    var r8 = foo2((a: Date) => a, (b: Date) => b); // Date => Date
>r8 : (x: Date) => Date
>foo2((a: Date) => a, (b: Date) => b) : (x: Date) => Date
>foo2 : <T 扩展 Date>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>(a: Date) => a : (a: Date) => Date
>a : Date
>Date : Date
>a : Date
>(b: Date) => b : (b: Date) => Date
>b : Date
>Date : Date
>b : Date
}
