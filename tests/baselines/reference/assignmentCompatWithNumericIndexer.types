=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithNumericIndexer.ts ===
// Derived type indexer must be subtype of base type indexer

interface Base { foo: string; }
>Base : Base
>foo : 文字
>类型别名 :=> 文字

interface Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : 文字
>类型别名 :=> 文字

interface Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : 文字
>类型别名 :=> 文字

class A {
>A : A

    [x: number]: Base;
>x : 数字
>类型别名 :=> 数字
>Base : Base
}

var a: A;
>a : A
>A : A

var b: { [x: number]: Derived; }
>b : { [x: 数字]: Derived; }
>x : 数字
>类型别名 :=> 数字
>Derived : Derived

a = b;
>a = b : { [x: 数字]: Derived; }
>a : A
>b : { [x: 数字]: Derived; }

b = a; // error
>b = a : A
>b : { [x: 数字]: Derived; }
>a : A

var b2: { [x: number]: Derived2; }
>b2 : { [x: 数字]: Derived2; }
>x : 数字
>类型别名 :=> 数字
>Derived2 : Derived2

a = b2;
>a = b2 : { [x: 数字]: Derived2; }
>a : A
>b2 : { [x: 数字]: Derived2; }

b2 = a; // error
>b2 = a : A
>b2 : { [x: 数字]: Derived2; }
>a : A

module Generics {
>Generics : 类为 Generics

    class A<T extends Base> {
>A : A<T>
>T : T
>Base : Base

        [x: number]: T;
>x : 数字
>类型别名 :=> 数字
>T : T
    }

    class B extends A<Base> {
>B : B
>A : A<Base>
>Base : Base

        [x: number]: Derived; // ok
>x : 数字
>类型别名 :=> 数字
>Derived : Derived
    }

    function foo<T extends Base>() {
>foo : <T 扩展 Base>() => 无值
>T : T
>Base : Base

        var a: A<T>;
>a : A<T>
>A : A<T>
>T : T

        var b: { [x: number]: Derived; }
>b : { [x: 数字]: Derived; }
>x : 数字
>类型别名 :=> 数字
>Derived : Derived

        a = b; // error
>a = b : { [x: 数字]: Derived; }
>a : A<T>
>b : { [x: 数字]: Derived; }

        b = a; // error
>b = a : A<T>
>b : { [x: 数字]: Derived; }
>a : A<T>

        var b2: { [x: number]: Derived2; }
>b2 : { [x: 数字]: Derived2; }
>x : 数字
>类型别名 :=> 数字
>Derived2 : Derived2

        a = b2; // error
>a = b2 : { [x: 数字]: Derived2; }
>a : A<T>
>b2 : { [x: 数字]: Derived2; }

        b2 = a; // error
>b2 = a : A<T>
>b2 : { [x: 数字]: Derived2; }
>a : A<T>

        var b3: { [x: number]: T; }
>b3 : { [x: 数字]: T; }
>x : 数字
>类型别名 :=> 数字
>T : T

        a = b3; // ok
>a = b3 : { [x: 数字]: T; }
>a : A<T>
>b3 : { [x: 数字]: T; }

        b3 = a; // ok
>b3 = a : A<T>
>b3 : { [x: 数字]: T; }
>a : A<T>
    }
}
