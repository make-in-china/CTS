=== tests/cases/compiler/contextualTypingWithFixedTypeParameters1.ts ===
var f10: <T>(x: T, b: () => (a: T) => void, y: T) => T;
>f10 : <T>(x: T, b: () => (a: T) => 无值, y: T) => T
>T : T
>x : T
>T : T
>b : () => (a: T) => 无值
>a : T
>T : T
>y : T
>T : T
>T : T

f10('', () => a => a.foo, ''); // a is ""
>f10('', () => a => a.foo, '') : 文字
>类型别名 :=> 文字
>f10 : <T>(x: T, b: () => (a: T) => 无值, y: T) => T
>'' : ""
>() => a => a.foo : () => (a: 文字) => 任意
>a => a.foo : (a: 文字) => 任意
>a : 文字
>类型别名 :=> 文字
>a.foo : 任意
>类型别名 :=> 任意
>a : 文字
>类型别名 :=> 文字
>foo : 任意
>类型别名 :=> 任意
>'' : ""

var r9 = f10('', () => (a => a.foo), 1); // error
>r9 : 任意
>类型别名 :=> 任意
>f10('', () => (a => a.foo), 1) : 任意
>类型别名 :=> 任意
>f10 : <T>(x: T, b: () => (a: T) => 无值, y: T) => T
>'' : ""
>() => (a => a.foo) : () => (a: "") => 任意
>(a => a.foo) : (a: "") => 任意
>a => a.foo : (a: "") => 任意
>a : ""
>a.foo : 任意
>类型别名 :=> 任意
>a : ""
>foo : 任意
>类型别名 :=> 任意
>1 : 1

