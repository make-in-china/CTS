=== tests/cases/compiler/unusedIdentifiersConsolidated1.ts ===
function greeter(person: string) {
>greeter : (person: string) => void
>person : string
>类型别名 :=> 文字

    var unused = 20;
>unused : number
>类型别名 :=> 数字
>20 : 20
}

class Dummy<usedtypeparameter, unusedtypeparameter> {
>Dummy : Dummy<usedtypeparameter, unusedtypeparameter>
>usedtypeparameter : usedtypeparameter
>unusedtypeparameter : unusedtypeparameter

    private unusedprivatevariable: string;
>unusedprivatevariable : string
>类型别名 :=> 文字

    private greeting: string;
>greeting : string
>类型别名 :=> 文字

    public unusedpublicvariable: string;
>unusedpublicvariable : string
>类型别名 :=> 文字

    public typedvariable: usedtypeparameter;
>typedvariable : usedtypeparameter
>usedtypeparameter : usedtypeparameter

    constructor(message: string) {
>message : string
>类型别名 :=> 文字

        var unused2 = 22;
>unused2 : number
>类型别名 :=> 数字
>22 : 22

        this.greeting = "Dummy Message";
>this.greeting = "Dummy Message" : "Dummy Message"
>this.greeting : string
>类型别名 :=> 文字
>this : this
>greeting : string
>类型别名 :=> 文字
>"Dummy Message" : "Dummy Message"
    }

    public greeter(person: string) {
>greeter : (person: string) => void
>person : string
>类型别名 :=> 文字

        var unused = 20;
>unused : number
>类型别名 :=> 数字
>20 : 20

        this.usedPrivateFunction();
>this.usedPrivateFunction() : void
>类型别名 :=> 无值
>this.usedPrivateFunction : () => void
>this : this
>usedPrivateFunction : () => void
    }

    private usedPrivateFunction() {
>usedPrivateFunction : () => void
    }

    private unUsedPrivateFunction() {
>unUsedPrivateFunction : () => void
    }
}

var user = "Jane User";
>user : string
>类型别名 :=> 文字
>"Jane User" : "Jane User"

var user2 = "Jane2 User2";
>user2 : string
>类型别名 :=> 文字
>"Jane2 User2" : "Jane2 User2"

namespace Validation {
>Validation : typeof Validation

    export interface StringValidator {
>StringValidator : StringValidator

        isAcceptable(s: string): boolean;
>isAcceptable : (s: string) => boolean
>s : string
>类型别名 :=> 文字
    }

    const lettersRegexp = /^[A-Za-z]+$/;
>lettersRegexp : RegExp
>/^[A-Za-z]+$/ : RegExp

    const numberRegexp = /^[0-9]+$/;
>numberRegexp : RegExp
>/^[0-9]+$/ : RegExp

    export class LettersOnlyValidator implements StringValidator {
>LettersOnlyValidator : LettersOnlyValidator
>StringValidator : StringValidator

        isAcceptable(s2: string) {
>isAcceptable : (s2: string) => boolean
>s2 : string
>类型别名 :=> 文字

            return lettersRegexp.test(s2);
>lettersRegexp.test(s2) : boolean
>类型别名 :=> 真假
>lettersRegexp.test : (string: string) => boolean
>lettersRegexp : RegExp
>test : (string: string) => boolean
>s2 : string
>类型别名 :=> 文字
        }

        private unUsedPrivateFunction() {
>unUsedPrivateFunction : () => void
        }
    }

    export class ZipCodeValidator implements StringValidator {
>ZipCodeValidator : ZipCodeValidator
>StringValidator : StringValidator

        isAcceptable(s3: string) {
>isAcceptable : (s3: string) => boolean
>s3 : string
>类型别名 :=> 文字

            return s3.length === 5;
>s3.length === 5 : boolean
>类型别名 :=> 真假
>s3.length : number
>类型别名 :=> 数字
>s3 : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
>5 : 5
        }
    }

    interface usedLocallyInterface {
>usedLocallyInterface : usedLocallyInterface
    }

    interface usedLocallyInterface2 {
>usedLocallyInterface2 : usedLocallyInterface2

        someFunction(s1: string): void;
>someFunction : (s1: string) => void
>s1 : string
>类型别名 :=> 文字
    }

    export interface exportedInterface {
>exportedInterface : exportedInterface
    }

    class dummy implements usedLocallyInterface {
>dummy : dummy
>usedLocallyInterface : usedLocallyInterface
    }

    interface unusedInterface {
>unusedInterface : unusedInterface
    }
}


namespace Greeter {
>Greeter : typeof Greeter

    class class1 {
>class1 : class1
    }

    export class class2 extends class1 {
>class2 : class2
>class1 : class1
    }

    class class3 {
>class3 : class3
    }

    export class class4 {
>class4 : class4
    }

    interface interface1 {
>interface1 : interface1
    }

    export interface interface2 extends interface1 {
>interface2 : interface2
>interface1 : interface1
    }

    interface interface3 {
>interface3 : interface3
    }

    export interface interface4 {
>interface4 : interface4
    }

    export let a: interface3;
>a : interface3
>interface3 : interface3

    interface interface5 {
>interface5 : interface5
    }
}
