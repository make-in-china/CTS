=== tests/cases/compiler/letDeclarations-validContexts.ts ===
// Control flow statements with blocks
if (true) { 
>true : 为真
>类型别名 :=> 为真

    let l1 = 0;
>l1 : 数字
>类型别名 :=> 数字
>0 : 0
}
else { 
    let l2 = 0;
>l2 : 数字
>类型别名 :=> 数字
>0 : 0
}

while (true) { 
>true : 为真
>类型别名 :=> 为真

    let l3 = 0;
>l3 : 数字
>类型别名 :=> 数字
>0 : 0
}

do { 
    let l4 = 0;
>l4 : 数字
>类型别名 :=> 数字
>0 : 0

} while (true);
>true : 为真
>类型别名 :=> 为真

var obj;
>obj : 任意
>类型别名 :=> 任意

with (obj) {
>obj : 任意
>类型别名 :=> 任意

    let l5 = 0;
>l5 : 任意
>类型别名 :=> 任意
>0 : 任意
>类型别名 :=> 任意
}

for (var i = 0; i < 10; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 10 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>10 : 10
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    let l6 = 0;
>l6 : 数字
>类型别名 :=> 数字
>0 : 0
}

for (var i2 in {}) {
>i2 : 文字
>类型别名 :=> 文字
>{} : {}

    let l7 = 0;
>l7 : 数字
>类型别名 :=> 数字
>0 : 0
}

if (true) {
>true : 为真
>类型别名 :=> 为真

    label: let l8 = 0;
>label : 任意
>类型别名 :=> 任意
>l8 : 数字
>类型别名 :=> 数字
>0 : 0
}

while (false) {
>false : 为假
>类型别名 :=> 为假

    label2: label3: label4: let l9 = 0;
>label2 : 任意
>类型别名 :=> 任意
>label3 : 任意
>类型别名 :=> 任意
>label4 : 任意
>类型别名 :=> 任意
>l9 : 数字
>类型别名 :=> 数字
>0 : 0
}

// Try/catch/finally
try {
    let l10 = 0;
>l10 : 数字
>类型别名 :=> 数字
>0 : 0
}
catch (e) {
>e : 任意
>类型别名 :=> 任意

    let l11 = 0;
>l11 : 数字
>类型别名 :=> 数字
>0 : 0
}
finally {
    let l12 = 0;
>l12 : 数字
>类型别名 :=> 数字
>0 : 0
}

// Switch
switch (0) {
>0 : 0

    case 0:
>0 : 0

        let l13 = 0;
>l13 : 数字
>类型别名 :=> 数字
>0 : 0

        break;
    default:
        let l14 = 0;
>l14 : 数字
>类型别名 :=> 数字
>0 : 0

        break;
}

// blocks
{
    let l15 = 0;
>l15 : 数字
>类型别名 :=> 数字
>0 : 0
    {
        let l16 = 0
>l16 : 数字
>类型别名 :=> 数字
>0 : 0

        label17: let l17 = 0;
>label17 : 任意
>类型别名 :=> 任意
>l17 : 数字
>类型别名 :=> 数字
>0 : 0
    }
}

// global
let l18 = 0;
>l18 : 数字
>类型别名 :=> 数字
>0 : 0

// functions
function F() {
>F : () => 无值

    let l19 = 0;
>l19 : 数字
>类型别名 :=> 数字
>0 : 0
}

var F2 = () => {
>F2 : () => 无值
>() => {    let l20 = 0;} : () => 无值

    let l20 = 0;
>l20 : 数字
>类型别名 :=> 数字
>0 : 0

};

var F3 = function () {
>F3 : () => 无值
>function () {    let l21 = 0;} : () => 无值

    let l21 = 0;
>l21 : 数字
>类型别名 :=> 数字
>0 : 0

};

// modules
module m {
>m : 类为 m

    let l22 = 0;
>l22 : 数字
>类型别名 :=> 数字
>0 : 0

    {
          let l23 = 0;
>l23 : 数字
>类型别名 :=> 数字
>0 : 0
    }
}

// methods
class C {
>C : C

    constructor() {
        let l24 = 0;
>l24 : 数字
>类型别名 :=> 数字
>0 : 0
    }

    method() {
>method : () => 无值

        let l25 = 0;
>l25 : 数字
>类型别名 :=> 数字
>0 : 0
    }

    get v() {
>v : 数字
>类型别名 :=> 数字

        let l26 = 0;
>l26 : 数字
>类型别名 :=> 数字
>0 : 0

        return l26; 
>l26 : 数字
>类型别名 :=> 数字
    }

    set v(value) {
>v : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字

        let l27 = value;
>l27 : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字
    }
}

// object literals
var o = {
>o : { f(): 无值; f2: () => 无值; }
>{    f() {        let l28 = 0;    },    f2: () => {        let l29 = 0;    }} : { f(): 无值; f2: () => 无值; }

    f() {
>f : () => 无值

        let l28 = 0;
>l28 : 数字
>类型别名 :=> 数字
>0 : 0

    },
    f2: () => {
>f2 : () => 无值
>() => {        let l29 = 0;    } : () => 无值

        let l29 = 0;
>l29 : 数字
>类型别名 :=> 数字
>0 : 0
    }
}

// labels
label: let l30 = 0;
>label : 任意
>类型别名 :=> 任意
>l30 : 数字
>类型别名 :=> 数字
>0 : 0
{
    label2: let l31 = 0;
>label2 : 任意
>类型别名 :=> 任意
>l31 : 数字
>类型别名 :=> 数字
>0 : 0
}

function f3() {
>f3 : () => 无值

    label: let l32 = 0;
>label : 任意
>类型别名 :=> 任意
>l32 : 数字
>类型别名 :=> 数字
>0 : 0
    {
        label2: let l33 = 0;
>label2 : 任意
>类型别名 :=> 任意
>l33 : 数字
>类型别名 :=> 数字
>0 : 0
    }
}

module m3 {
>m3 : 类为 m3

    label: let l34 = 0;
>label : 任意
>类型别名 :=> 任意
>l34 : 数字
>类型别名 :=> 数字
>0 : 0
    {
        label2: let l35 = 0;
>label2 : 任意
>类型别名 :=> 任意
>l35 : 数字
>类型别名 :=> 数字
>0 : 0
    }
}
