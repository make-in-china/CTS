=== tests/cases/compiler/chainedSpecializationToObjectTypeLiteral.ts ===
interface Sequence<T> {
>Sequence : Sequence<T>
>T : T

    each(iterator: (value: T) => void): void;
>each : (iterator: (value: T) => 无值) => 无值
>iterator : (value: T) => 无值
>value : T
>T : T

    map<U>(iterator: (value: T) => U): Sequence<U>;
>map : <U>(iterator: (value: T) => U) => Sequence<U>
>U : U
>iterator : (value: T) => U
>value : T
>T : T
>U : U
>Sequence : Sequence<T>
>U : U

    filter(iterator: (value: T) => boolean): Sequence<T>;
>filter : (iterator: (value: T) => 真假) => Sequence<T>
>iterator : (value: T) => 真假
>value : T
>T : T
>Sequence : Sequence<T>
>T : T

    groupBy<K>(keySelector: (value: T) => K): Sequence<{ key: K; items: T[]; }>;
>groupBy : <K>(keySelector: (value: T) => K) => Sequence<{ key: K; items: T[]; }>
>K : K
>keySelector : (value: T) => K
>value : T
>T : T
>K : K
>Sequence : Sequence<T>
>key : K
>K : K
>items : T[]
>T : T
}

var s: Sequence<string>;
>s : Sequence<文字>
>Sequence : Sequence<T>

var s2 = s.groupBy(s => s.length);
>s2 : Sequence<{ key: 数字; items: 文字[]; }>
>s.groupBy(s => s.length) : Sequence<{ key: 数字; items: 文字[]; }>
>s.groupBy : <K>(keySelector: (value: 文字) => K) => Sequence<{ key: K; items: 文字[]; }>
>s : Sequence<文字>
>groupBy : <K>(keySelector: (value: 文字) => K) => Sequence<{ key: K; items: 文字[]; }>
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

var s3 = s2.each(x => { x.key /* Type is K, should be number */ });
>s3 : 无值
>类型别名 :=> 无值
>s2.each(x => { x.key /* Type is K, should be number */ }) : 无值
>类型别名 :=> 无值
>s2.each : (iterator: (value: { key: 数字; items: 文字[]; }) => 无值) => 无值
>s2 : Sequence<{ key: 数字; items: 文字[]; }>
>each : (iterator: (value: { key: 数字; items: 文字[]; }) => 无值) => 无值
>x => { x.key /* Type is K, should be number */ } : (x: { key: 数字; items: 文字[]; }) => 无值
>x : { key: 数字; items: 文字[]; }
>x.key : 数字
>类型别名 :=> 数字
>x : { key: 数字; items: 文字[]; }
>key : 数字
>类型别名 :=> 数字

