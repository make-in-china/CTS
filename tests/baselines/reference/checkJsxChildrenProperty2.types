=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : 类为 React

interface Prop {
>Prop : Prop

    a: number,
>a : 数字
>类型别名 :=> 数字

    b: string,
>b : 文字
>类型别名 :=> 文字

    children: string | JSX.Element
>children : 文字 | JSX.Element
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element
}

function Comp(p: Prop) {
>Comp : (p: Prop) => JSX.Element
>p : Prop
>Prop : Prop

    return <div>{p.b}</div>;
><div>{p.b}</div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>p.b : 文字
>类型别名 :=> 文字
>p : Prop
>b : 文字
>类型别名 :=> 文字
>div : 任意
>类型别名 :=> 任意
}

// Error: missing children
let k = <Comp a={10} b="hi" />;
>k : JSX.Element
><Comp a={10} b="hi" /> : JSX.Element
>Comp : (p: Prop) => JSX.Element
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 文字
>类型别名 :=> 文字

let k0 =
>k0 : JSX.Element

    <Comp a={10} b="hi" children="Random" >
><Comp a={10} b="hi" children="Random" >        hi hi hi!    </Comp> : JSX.Element
>Comp : (p: Prop) => JSX.Element
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 文字
>类型别名 :=> 文字
>children : 文字
>类型别名 :=> 文字

        hi hi hi!
    </Comp>;
>Comp : (p: Prop) => JSX.Element

let o = {
>o : { children: 文字; }
>{     children:"Random"} : { children: 文字; }

     children:"Random"
>children : 文字
>类型别名 :=> 文字
>"Random" : "Random"
}
let k1 =
>k1 : JSX.Element

    <Comp a={10} b="hi" {...o} >
><Comp a={10} b="hi" {...o} >        hi hi hi!    </Comp> : JSX.Element
>Comp : (p: Prop) => JSX.Element
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 文字
>类型别名 :=> 文字
>o : { children: 文字; }

        hi hi hi!
    </Comp>;
>Comp : (p: Prop) => JSX.Element

// Error: incorrect type
let k2 =
>k2 : JSX.Element

    <Comp a={10} b="hi">
><Comp a={10} b="hi">        <div> My Div </div>        {(name: string) => <div> My name {name} </div>}    </Comp> : JSX.Element
>Comp : (p: Prop) => JSX.Element
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 文字
>类型别名 :=> 文字

        <div> My Div </div>
><div> My Div </div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意

        {(name: string) => <div> My name {name} </div>}
>(name: string) => <div> My name {name} </div> : (name: 文字) => JSX.Element
>name : 文字
>类型别名 :=> 文字
><div> My name {name} </div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>name : 文字
>类型别名 :=> 文字
>div : 任意
>类型别名 :=> 任意

    </Comp>;
>Comp : (p: Prop) => JSX.Element

let k3 =
>k3 : JSX.Element

    <Comp a={10} b="hi">
><Comp a={10} b="hi">        <div> My Div </div>        {1000000}    </Comp> : JSX.Element
>Comp : (p: Prop) => JSX.Element
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 文字
>类型别名 :=> 文字

        <div> My Div </div>
><div> My Div </div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意

        {1000000}
>1000000 : 1000000

    </Comp>;
>Comp : (p: Prop) => JSX.Element

let k4 =
>k4 : JSX.Element

    <Comp a={10} b="hi" >
><Comp a={10} b="hi" >        <div> My Div </div>        hi hi hi!    </Comp> : JSX.Element
>Comp : (p: Prop) => JSX.Element
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 文字
>类型别名 :=> 文字

        <div> My Div </div>
><div> My Div </div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意

        hi hi hi!
    </Comp>;
>Comp : (p: Prop) => JSX.Element

let k5 =
>k5 : JSX.Element

    <Comp a={10} b="hi" >
><Comp a={10} b="hi" >        <div> My Div </div>        <div> My Div </div>    </Comp> : JSX.Element
>Comp : (p: Prop) => JSX.Element
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 文字
>类型别名 :=> 文字

        <div> My Div </div>
><div> My Div </div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意

        <div> My Div </div>
><div> My Div </div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意

    </Comp>;
>Comp : (p: Prop) => JSX.Element

