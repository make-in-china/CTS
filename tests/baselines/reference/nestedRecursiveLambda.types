=== tests/cases/compiler/nestedRecursiveLambda.ts ===
function f(a:any) {
>f : (a: any) => void
>a : any
>类型别名 :=> 任意

void (r =>(r => r));
>void (r =>(r => r)) : undefined
>类型别名 :=> 未定
>(r =>(r => r)) : (r: any) => (r: any) => any
>r =>(r => r) : (r: any) => (r: any) => any
>r : any
>类型别名 :=> 任意
>(r => r) : (r: any) => any
>r => r : (r: any) => any
>r : any
>类型别名 :=> 任意
>r : any
>类型别名 :=> 任意
}
f((r =>(r => r)));
>f((r =>(r => r))) : void
>类型别名 :=> 无值
>f : (a: any) => void
>(r =>(r => r)) : (r: any) => (r: any) => any
>r =>(r => r) : (r: any) => (r: any) => any
>r : any
>类型别名 :=> 任意
>(r => r) : (r: any) => any
>r => r : (r: any) => any
>r : any
>类型别名 :=> 任意
>r : any
>类型别名 :=> 任意

void(r =>(r => r));
>void(r =>(r => r)) : undefined
>类型别名 :=> 未定
>(r =>(r => r)) : (r: any) => (r: any) => any
>r =>(r => r) : (r: any) => (r: any) => any
>r : any
>类型别名 :=> 任意
>(r => r) : (r: any) => any
>r => r : (r: any) => any
>r : any
>类型别名 :=> 任意
>r : any
>类型别名 :=> 任意

[(r =>(r => r))]
>[(r =>(r => r))] : ((r: any) => (r: any) => any)[]
>(r =>(r => r)) : (r: any) => (r: any) => any
>r =>(r => r) : (r: any) => (r: any) => any
>r : any
>类型别名 :=> 任意
>(r => r) : (r: any) => any
>r => r : (r: any) => any
>r : any
>类型别名 :=> 任意
>r : any
>类型别名 :=> 任意

