=== tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithAnyOtherType.ts ===
// + operator on any type

var ANY: any;
>ANY : 任意
>类型别名 :=> 任意

var ANY1;
>ANY1 : 任意
>类型别名 :=> 任意

var ANY2: any[] = ["", ""];
>ANY2 : 任意[]
>["", ""] : 文字[]
>"" : ""
>"" : ""

var obj: () => {}
>obj : () => {}

var obj1 = { x: (s: string) => { }, y: (s1) => { }};
>obj1 : { x: (s: 文字) => 无值; y: (s1: 任意) => 无值; }
>{ x: (s: string) => { }, y: (s1) => { }} : { x: (s: 文字) => 无值; y: (s1: 任意) => 无值; }
>x : (s: 文字) => 无值
>(s: string) => { } : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字
>y : (s1: 任意) => 无值
>(s1) => { } : (s1: 任意) => 无值
>s1 : 任意
>类型别名 :=> 任意

function foo(): any {
>foo : () => 任意

    var a;
>a : 任意
>类型别名 :=> 任意

    return a;
>a : 任意
>类型别名 :=> 任意
}
class A {
>A : A

    public a: any;
>a : 任意
>类型别名 :=> 任意

    static foo() {
>foo : () => 任意

        var a;
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }
}
module M {
>M : 类为 M

    export var n: any;
>n : 任意
>类型别名 :=> 任意
}
var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// any other type var
var ResultIsNumber1 = +ANY1;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>+ANY1 : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意

var ResultIsNumber2 = +ANY2;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>+ANY2 : 数字
>类型别名 :=> 数字
>ANY2 : 任意[]

var ResultIsNumber3 = +A;
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>+A : 数字
>类型别名 :=> 数字
>A : 类为 A

var ResultIsNumber4 = +M;
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>+M : 数字
>类型别名 :=> 数字
>M : 类为 M

var ResultIsNumber5 = +obj;
>ResultIsNumber5 : 数字
>类型别名 :=> 数字
>+obj : 数字
>类型别名 :=> 数字
>obj : () => {}

var ResultIsNumber6 = +obj1;
>ResultIsNumber6 : 数字
>类型别名 :=> 数字
>+obj1 : 数字
>类型别名 :=> 数字
>obj1 : { x: (s: 文字) => 无值; y: (s1: 任意) => 无值; }

// any type literal
var ResultIsNumber7 = +undefined;
>ResultIsNumber7 : 数字
>类型别名 :=> 数字
>+undefined : 数字
>类型别名 :=> 数字
>undefined : 未定
>类型别名 :=> 未定

var ResultIsNumber8 = +null;
>ResultIsNumber8 : 数字
>类型别名 :=> 数字
>+null : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

// any type expressions
var ResultIsNumber9 = +ANY2[0];
>ResultIsNumber9 : 数字
>类型别名 :=> 数字
>+ANY2[0] : 数字
>类型别名 :=> 数字
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0

var ResultIsNumber10 = +obj1.x;
>ResultIsNumber10 : 数字
>类型别名 :=> 数字
>+obj1.x : 数字
>类型别名 :=> 数字
>obj1.x : (s: 文字) => 无值
>obj1 : { x: (s: 文字) => 无值; y: (s1: 任意) => 无值; }
>x : (s: 文字) => 无值

var ResultIsNumber11 = +obj1.y;
>ResultIsNumber11 : 数字
>类型别名 :=> 数字
>+obj1.y : 数字
>类型别名 :=> 数字
>obj1.y : (s1: 任意) => 无值
>obj1 : { x: (s: 文字) => 无值; y: (s1: 任意) => 无值; }
>y : (s1: 任意) => 无值

var ResultIsNumber12 = +objA.a;
>ResultIsNumber12 : 数字
>类型别名 :=> 数字
>+objA.a : 数字
>类型别名 :=> 数字
>objA.a : 任意
>类型别名 :=> 任意
>objA : A
>a : 任意
>类型别名 :=> 任意

var ResultIsNumber13 = +M.n;
>ResultIsNumber13 : 数字
>类型别名 :=> 数字
>+M.n : 数字
>类型别名 :=> 数字
>M.n : 任意
>类型别名 :=> 任意
>M : 类为 M
>n : 任意
>类型别名 :=> 任意

var ResultIsNumber14 = +foo();
>ResultIsNumber14 : 数字
>类型别名 :=> 数字
>+foo() : 数字
>类型别名 :=> 数字
>foo() : 任意
>类型别名 :=> 任意
>foo : () => 任意

var ResultIsNumber15 = +A.foo();
>ResultIsNumber15 : 数字
>类型别名 :=> 数字
>+A.foo() : 数字
>类型别名 :=> 数字
>A.foo() : 任意
>类型别名 :=> 任意
>A.foo : () => 任意
>A : 类为 A
>foo : () => 任意

var ResultIsNumber16 = +(ANY + ANY1);
>ResultIsNumber16 : 数字
>类型别名 :=> 数字
>+(ANY + ANY1) : 数字
>类型别名 :=> 数字
>(ANY + ANY1) : 任意
>类型别名 :=> 任意
>ANY + ANY1 : 任意
>类型别名 :=> 任意
>ANY : 任意
>类型别名 :=> 任意
>ANY1 : 任意
>类型别名 :=> 任意

var ResultIsNumber17 = +(null + undefined);
>ResultIsNumber17 : 数字
>类型别名 :=> 数字
>+(null + undefined) : 数字
>类型别名 :=> 数字
>(null + undefined) : 任意
>类型别名 :=> 任意
>null + undefined : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

var ResultIsNumber18 = +(null + null);
>ResultIsNumber18 : 数字
>类型别名 :=> 数字
>+(null + null) : 数字
>类型别名 :=> 数字
>(null + null) : 任意
>类型别名 :=> 任意
>null + null : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

var ResultIsNumber19 = +(undefined + undefined);
>ResultIsNumber19 : 数字
>类型别名 :=> 数字
>+(undefined + undefined) : 数字
>类型别名 :=> 数字
>(undefined + undefined) : 任意
>类型别名 :=> 任意
>undefined + undefined : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

// miss assignment operators
+ANY;
>+ANY : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意

+ANY1;
>+ANY1 : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意

+ANY2[0];
>+ANY2[0] : 数字
>类型别名 :=> 数字
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0

+ANY, ANY1;
>+ANY, ANY1 : 任意
>类型别名 :=> 任意
>+ANY : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意
>ANY1 : 任意
>类型别名 :=> 任意

+objA.a;
>+objA.a : 数字
>类型别名 :=> 数字
>objA.a : 任意
>类型别名 :=> 任意
>objA : A
>a : 任意
>类型别名 :=> 任意

+M.n;
>+M.n : 数字
>类型别名 :=> 数字
>M.n : 任意
>类型别名 :=> 任意
>M : 类为 M
>n : 任意
>类型别名 :=> 任意

