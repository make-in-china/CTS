=== tests/cases/compiler/objectLiteralParameterResolution.ts ===
interface Foo{
>Foo : Foo

    extend<T>(target: T, ...objs: any[]): T;
>extend : { <T>(target: T, ...objs: any[]): T; <T>(deep: boolean, target: T, ...objs: any[]): T; }
>T : T
>target : T
>T : T
>objs : any[]
>T : T

    extend<T>(deep: boolean, target: T, ...objs: any[]): T;
>extend : { <T>(target: T, ...objs: any[]): T; <T>(deep: boolean, target: T, ...objs: any[]): T; }
>T : T
>deep : boolean
>类型别名 :=> 真假
>target : T
>T : T
>objs : any[]
>T : T
}
declare var $: Foo;
>$ : Foo
>Foo : Foo

var s = $.extend({
>s : { type: string; data: string; success: any; error: any; dataType: string; converters: { "text json": string; }; traditional: boolean; timeout: number; }
>$.extend({    type: "GET" ,    data: "data" ,    success: wrapSuccessCallback(requestContext, callback) ,    error: wrapErrorCallback(requestContext, errorCallback) ,    dataType: "json" ,    converters: { "text json": "" },    traditional: true ,    timeout: 12,    }, "") : { type: string; data: string; success: any; error: any; dataType: string; converters: { "text json": string; }; traditional: boolean; timeout: number; }
>$.extend : { <T>(target: T, ...objs: any[]): T; <T>(deep: boolean, target: T, ...objs: any[]): T; }
>$ : Foo
>extend : { <T>(target: T, ...objs: any[]): T; <T>(deep: boolean, target: T, ...objs: any[]): T; }
>{    type: "GET" ,    data: "data" ,    success: wrapSuccessCallback(requestContext, callback) ,    error: wrapErrorCallback(requestContext, errorCallback) ,    dataType: "json" ,    converters: { "text json": "" },    traditional: true ,    timeout: 12,    } : { type: string; data: string; success: any; error: any; dataType: string; converters: { "text json": string; }; traditional: true; timeout: number; }

    type: "GET" ,
>type : string
>类型别名 :=> 文字
>"GET" : "GET"

    data: "data" ,
>data : string
>类型别名 :=> 文字
>"data" : "data"

    success: wrapSuccessCallback(requestContext, callback) ,
>success : any
>类型别名 :=> 任意
>wrapSuccessCallback(requestContext, callback) : any
>类型别名 :=> 任意
>wrapSuccessCallback : any
>类型别名 :=> 任意
>requestContext : any
>类型别名 :=> 任意
>callback : any
>类型别名 :=> 任意

    error: wrapErrorCallback(requestContext, errorCallback) ,
>error : any
>类型别名 :=> 任意
>wrapErrorCallback(requestContext, errorCallback) : any
>类型别名 :=> 任意
>wrapErrorCallback : any
>类型别名 :=> 任意
>requestContext : any
>类型别名 :=> 任意
>errorCallback : any
>类型别名 :=> 任意

    dataType: "json" ,
>dataType : string
>类型别名 :=> 文字
>"json" : "json"

    converters: { "text json": "" },
>converters : { "text json": string; }
>{ "text json": "" } : { "text json": string; }
>"" : ""

    traditional: true ,
>traditional : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

    timeout: 12,
>timeout : number
>类型别名 :=> 数字
>12 : 12

    }, "");
>"" : ""

