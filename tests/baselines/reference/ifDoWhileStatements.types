=== tests/cases/conformance/statements/ifDoWhileStatements/ifDoWhileStatements.ts ===
interface I {
>I : I

    id: number;
>id : 数字
>类型别名 :=> 数字
}

class C implements I {
>C : C
>I : I

    id: number;
>id : 数字
>类型别名 :=> 数字

    name: string;
>name : 文字
>类型别名 :=> 文字
}

class C2 extends C {
>C2 : C2
>C : C

    valid: boolean;
>valid : 真假
>类型别名 :=> 真假
}

class D<T>{
>D : D<T>
>T : T

    source: T;
>source : T
>T : T

    recurse: D<T>;
>recurse : D<T>
>D : D<T>
>T : T

    wrapped: D<D<T>>
>wrapped : D<D<T>>
>D : D<T>
>D : D<T>
>T : T
}

function F(x: string): number { return 42; }
>F : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>42 : 42

function F2(x: number): boolean { return x < 42; }
>F2 : (x: 数字) => 真假
>x : 数字
>类型别名 :=> 数字
>x < 42 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>42 : 42

module M {
>M : 类为 M

    export class A {
>A : A

        name: string;
>name : 文字
>类型别名 :=> 文字
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : (radix?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
}

module N {
>N : 类为 N

    export class A {
>A : A

        id: number;
>id : 数字
>类型别名 :=> 数字
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : (radix?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
}

// literals
if (true) { }
>true : 为真
>类型别名 :=> 为真

while (true) { }
>true : 为真
>类型别名 :=> 为真

do { }while(true)
>true : 为真
>类型别名 :=> 为真

if (null) { }
>null : 空值
>类型别名 :=> 空值

while (null) { }
>null : 空值
>类型别名 :=> 空值

do { }while(null)
>null : 空值
>类型别名 :=> 空值

if (undefined) { }
>undefined : 未定
>类型别名 :=> 未定

while (undefined) { }
>undefined : 未定
>类型别名 :=> 未定

do { }while(undefined)
>undefined : 未定
>类型别名 :=> 未定

if (0.0) { }
>0.0 : 0

while (0.0) { }
>0.0 : 0

do { }while(0.0)
>0.0 : 0

if ('a string') { }
>'a string' : "a string"

while ('a string') { }
>'a string' : "a string"

do { }while('a string')
>'a string' : "a string"

if ('') { }
>'' : ""

while ('') { }
>'' : ""

do { }while('')
>'' : ""

if (/[a-z]/) { }
>/[a-z]/ : RegExp

while (/[a-z]/) { }
>/[a-z]/ : RegExp

do { }while(/[a-z]/)
>/[a-z]/ : RegExp

if ([]) { }
>[] : 未定[]

while ([]) { }
>[] : 未定[]

do { }while([])
>[] : 未定[]

if ([1, 2]) { }
>[1, 2] : 数字[]
>1 : 1
>2 : 2

while ([1, 2]) { }
>[1, 2] : 数字[]
>1 : 1
>2 : 2

do { }while([1, 2])
>[1, 2] : 数字[]
>1 : 1
>2 : 2

if ({}) { }
>{} : {}

while ({}) { }
>{} : {}

do { }while({})
>{} : {}

if ({ x: 1, y: 'a' }) { }
>{ x: 1, y: 'a' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 文字
>类型别名 :=> 文字
>'a' : "a"

while ({ x: 1, y: 'a' }) { }
>{ x: 1, y: 'a' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 文字
>类型别名 :=> 文字
>'a' : "a"

do { }while({ x: 1, y: 'a' })
>{ x: 1, y: 'a' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 文字
>类型别名 :=> 文字
>'a' : "a"

if (() => 43) { }
>() => 43 : () => 数字
>43 : 43

while (() => 43) { }
>() => 43 : () => 数字
>43 : 43

do { }while(() => 43)
>() => 43 : () => 数字
>43 : 43

if (new C()) { }
>new C() : C
>C : 类为 C

while (new C()) { }
>new C() : C
>C : 类为 C

do { }while(new C())
>new C() : C
>C : 类为 C

if (new D<C>()) { }
>new D<C>() : D<C>
>D : 类为 D
>C : C

while (new D<C>()) { }
>new D<C>() : D<C>
>D : 类为 D
>C : C

do { }while(new D<C>())
>new D<C>() : D<C>
>D : 类为 D
>C : C

// references
var a = true;
>a : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

if (a) { }
>a : 真假
>类型别名 :=> 真假

while (a) { }
>a : 真假
>类型别名 :=> 真假

do { }while(a)
>a : 真假
>类型别名 :=> 真假

var b = null;
>b : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

if (b) { }
>b : 任意
>类型别名 :=> 任意

while (b) { }
>b : 任意
>类型别名 :=> 任意

do { }while(b)
>b : 任意
>类型别名 :=> 任意

var c = undefined;
>c : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

if (c) { }
>c : 任意
>类型别名 :=> 任意

while (c) { }
>c : 任意
>类型别名 :=> 任意

do { }while(c)
>c : 任意
>类型别名 :=> 任意

var d = 0.0;
>d : 数字
>类型别名 :=> 数字
>0.0 : 0

if (d) { }
>d : 数字
>类型别名 :=> 数字

while (d) { }
>d : 数字
>类型别名 :=> 数字

do { }while(d)
>d : 数字
>类型别名 :=> 数字

var e = 'a string';
>e : 文字
>类型别名 :=> 文字
>'a string' : "a string"

if (e) { }
>e : 文字
>类型别名 :=> 文字

while (e) { }
>e : 文字
>类型别名 :=> 文字

do { }while(e)
>e : 文字
>类型别名 :=> 文字

var f = '';
>f : 文字
>类型别名 :=> 文字
>'' : ""

if (f) { }
>f : 文字
>类型别名 :=> 文字

while (f) { }
>f : 文字
>类型别名 :=> 文字

do { }while(f)
>f : 文字
>类型别名 :=> 文字

var g = /[a-z]/
>g : RegExp
>/[a-z]/ : RegExp

if (g) { }
>g : RegExp

while (g) { }
>g : RegExp

do { }while(g)
>g : RegExp

var h = [];
>h : 任意[]
>[] : 未定[]

if (h) { }
>h : 任意[]

while (h) { }
>h : 任意[]

do { }while(h)
>h : 任意[]

var i = [1, 2];
>i : 数字[]
>[1, 2] : 数字[]
>1 : 1
>2 : 2

if (i) { }
>i : 数字[]

while (i) { }
>i : 数字[]

do { }while(i)
>i : 数字[]

var j = {};
>j : {}
>{} : {}

if (j) { }
>j : {}

while (j) { }
>j : {}

do { }while(j)
>j : {}

var k = { x: 1, y: 'a' };
>k : { x: 数字; y: 文字; }
>{ x: 1, y: 'a' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 文字
>类型别名 :=> 文字
>'a' : "a"

if (k) { }
>k : { x: 数字; y: 文字; }

while (k) { }
>k : { x: 数字; y: 文字; }

do { }while(k)
>k : { x: 数字; y: 文字; }

function fn(x?: string): I { return null; }
>fn : (x?: 文字) => I
>x : 文字
>类型别名 :=> 文字
>I : I
>null : 空值
>类型别名 :=> 空值

if (fn()) { }
>fn() : I
>fn : (x?: 文字) => I

while (fn()) { }
>fn() : I
>fn : (x?: 文字) => I

do { }while(fn())
>fn() : I
>fn : (x?: 文字) => I

if (fn) { }
>fn : (x?: 文字) => I

while (fn) { }
>fn : (x?: 文字) => I

do { }while(fn)
>fn : (x?: 文字) => I



