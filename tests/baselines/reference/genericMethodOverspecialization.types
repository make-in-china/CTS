=== tests/cases/compiler/genericMethodOverspecialization.ts ===
var names = ["list", "table1", "table2", "table3", "summary"];
>names : 文字[]
>["list", "table1", "table2", "table3", "summary"] : 文字[]
>"list" : "list"
>"table1" : "table1"
>"table2" : "table2"
>"table3" : "table3"
>"summary" : "summary"

interface HTMLElement {
>HTMLElement : HTMLElement

    clientWidth: number;
>clientWidth : 数字
>类型别名 :=> 数字

    isDisabled: boolean;
>isDisabled : 真假
>类型别名 :=> 真假
}

declare var document: Document;
>document : Document
>Document : Document

interface Document {
>Document : Document

    getElementById(elementId: string): HTMLElement;
>getElementById : (elementId: 文字) => HTMLElement
>elementId : 文字
>类型别名 :=> 文字
>HTMLElement : HTMLElement
}

var elements = names.map(function (name) {
>elements : HTMLElement[]
>names.map(function (name) {    return document.getElementById(name);}) : HTMLElement[]
>names.map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>names : 文字[]
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>function (name) {    return document.getElementById(name);} : (name: 文字) => HTMLElement
>name : 文字
>类型别名 :=> 文字

    return document.getElementById(name);
>document.getElementById(name) : HTMLElement
>document.getElementById : (elementId: 文字) => HTMLElement
>document : Document
>getElementById : (elementId: 文字) => HTMLElement
>name : 文字
>类型别名 :=> 文字

});


var xxx = elements.filter(function (e) {
>xxx : HTMLElement[]
>elements.filter(function (e) {    return !e.isDisabled;}) : HTMLElement[]
>elements.filter : { <S 扩展 HTMLElement>(callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => value 作为 S, thisArg?: 任意): S[]; (callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => 任意, thisArg?: 任意): HTMLElement[]; }
>elements : HTMLElement[]
>filter : { <S 扩展 HTMLElement>(callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => value 作为 S, thisArg?: 任意): S[]; (callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => 任意, thisArg?: 任意): HTMLElement[]; }
>function (e) {    return !e.isDisabled;} : (e: HTMLElement) => 真假
>e : HTMLElement

    return !e.isDisabled;
>!e.isDisabled : 真假
>类型别名 :=> 真假
>e.isDisabled : 真假
>类型别名 :=> 真假
>e : HTMLElement
>isDisabled : 真假
>类型别名 :=> 真假

});

var widths:number[] = elements.map(function (e) { // should not error
>widths : 数字[]
>elements.map(function (e) { // should not error    return e.clientWidth;}) : 数字[]
>elements.map : <U>(callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => U, thisArg?: 任意) => U[]
>elements : HTMLElement[]
>map : <U>(callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => U, thisArg?: 任意) => U[]
>function (e) { // should not error    return e.clientWidth;} : (e: HTMLElement) => 数字
>e : HTMLElement

    return e.clientWidth;
>e.clientWidth : 数字
>类型别名 :=> 数字
>e : HTMLElement
>clientWidth : 数字
>类型别名 :=> 数字

});


