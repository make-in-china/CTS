=== tests/cases/compiler/crashIntypeCheckInvocationExpression.ts ===
var nake;
>nake : any
>类型别名 :=> 任意

function doCompile<P0, P1, P2>(fileset: P0, moduleType: P1) {
>doCompile : <P0, P1, P2>(fileset: P0, moduleType: P1) => any
>P0 : P0
>P1 : P1
>P2 : P2
>fileset : P0
>P0 : P0
>moduleType : P1
>P1 : P1

    return undefined;
>undefined : undefined
>类型别名 :=> 未定
}
export var compileServer = task<number, number, any>(<P0, P1, P2>() => {
>compileServer : any
>类型别名 :=> 任意
>task<number, number, any>(<P0, P1, P2>() => {    var folder = path.join(),        fileset = nake.fileSetSync<number, number, any>(folder)  return doCompile<number, number, any>(fileset, moduleType);}) : any
>类型别名 :=> 任意
>task : any
>类型别名 :=> 任意
><P0, P1, P2>() => {    var folder = path.join(),        fileset = nake.fileSetSync<number, number, any>(folder)  return doCompile<number, number, any>(fileset, moduleType);} : <P0, P1, P2>() => any
>P0 : P0
>P1 : P1
>P2 : P2

    var folder = path.join(),
>folder : any
>类型别名 :=> 任意
>path.join() : any
>类型别名 :=> 任意
>path.join : any
>类型别名 :=> 任意
>path : any
>类型别名 :=> 任意
>join : any
>类型别名 :=> 任意

        fileset = nake.fileSetSync<number, number, any>(folder)
>fileset : any
>类型别名 :=> 任意
>nake.fileSetSync<number, number, any>(folder) : any
>类型别名 :=> 任意
>nake.fileSetSync : any
>类型别名 :=> 任意
>nake : any
>类型别名 :=> 任意
>fileSetSync : any
>类型别名 :=> 任意
>folder : any
>类型别名 :=> 任意

  return doCompile<number, number, any>(fileset, moduleType);
>doCompile<number, number, any>(fileset, moduleType) : any
>类型别名 :=> 任意
>doCompile : <P0, P1, P2>(fileset: P0, moduleType: P1) => any
>fileset : any
>类型别名 :=> 任意
>moduleType : any
>类型别名 :=> 任意

});

