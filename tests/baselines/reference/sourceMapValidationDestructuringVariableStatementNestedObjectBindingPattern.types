=== tests/cases/compiler/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPattern.ts ===
declare var console: {
>console : { log(msg: 文字): 无值; }

    log(msg: string): void;
>log : (msg: 文字) => 无值
>msg : 文字
>类型别名 :=> 文字
}
interface Robot {
>Robot : Robot

    name: string;
>name : 文字
>类型别名 :=> 文字

    skills: {
>skills : { primary: 文字; secondary: 文字; }

        primary: string;
>primary : 文字
>类型别名 :=> 文字

        secondary: string;
>secondary : 文字
>类型别名 :=> 文字

    };
}
var robotA: Robot = { name: "mower", skills: { primary: "mowing", secondary: "none" } };
>robotA : Robot
>Robot : Robot
>{ name: "mower", skills: { primary: "mowing", secondary: "none" } } : { name: 文字; skills: { primary: 文字; secondary: 文字; }; }
>name : 文字
>类型别名 :=> 文字
>"mower" : "mower"
>skills : { primary: 文字; secondary: 文字; }
>{ primary: "mowing", secondary: "none" } : { primary: 文字; secondary: 文字; }
>primary : 文字
>类型别名 :=> 文字
>"mowing" : "mowing"
>secondary : 文字
>类型别名 :=> 文字
>"none" : "none"

var robotB: Robot = { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } };
>robotB : Robot
>Robot : Robot
>{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } } : { name: 文字; skills: { primary: 文字; secondary: 文字; }; }
>name : 文字
>类型别名 :=> 文字
>"trimmer" : "trimmer"
>skills : { primary: 文字; secondary: 文字; }
>{ primary: "trimming", secondary: "edging" } : { primary: 文字; secondary: 文字; }
>primary : 文字
>类型别名 :=> 文字
>"trimming" : "trimming"
>secondary : 文字
>类型别名 :=> 文字
>"edging" : "edging"

var { skills: { primary: primaryA, secondary: secondaryA } } = robotA;
>skills : 任意
>类型别名 :=> 任意
>primary : 任意
>类型别名 :=> 任意
>primaryA : 文字
>类型别名 :=> 文字
>secondary : 任意
>类型别名 :=> 任意
>secondaryA : 文字
>类型别名 :=> 文字
>robotA : Robot

var { name: nameB, skills: { primary: primaryB, secondary: secondaryB } } = robotB;
>name : 任意
>类型别名 :=> 任意
>nameB : 文字
>类型别名 :=> 文字
>skills : 任意
>类型别名 :=> 任意
>primary : 任意
>类型别名 :=> 任意
>primaryB : 文字
>类型别名 :=> 文字
>secondary : 任意
>类型别名 :=> 任意
>secondaryB : 文字
>类型别名 :=> 文字
>robotB : Robot

var { name: nameC, skills: { primary: primaryB, secondary: secondaryB } } = { name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } };
>name : 任意
>类型别名 :=> 任意
>nameC : 文字
>类型别名 :=> 文字
>skills : 任意
>类型别名 :=> 任意
>primary : 任意
>类型别名 :=> 任意
>primaryB : 文字
>类型别名 :=> 文字
>secondary : 任意
>类型别名 :=> 任意
>secondaryB : 文字
>类型别名 :=> 文字
>{ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } } : { name: 文字; skills: { primary: 文字; secondary: 文字; }; }
>name : 文字
>类型别名 :=> 文字
>"Edger" : "Edger"
>skills : { primary: 文字; secondary: 文字; }
>{ primary: "edging", secondary: "branch trimming" } : { primary: 文字; secondary: 文字; }
>primary : 文字
>类型别名 :=> 文字
>"edging" : "edging"
>secondary : 文字
>类型别名 :=> 文字
>"branch trimming" : "branch trimming"

if (nameB == nameB) {
>nameB == nameB : 真假
>类型别名 :=> 真假
>nameB : 文字
>类型别名 :=> 文字
>nameB : 文字
>类型别名 :=> 文字

    console.log(nameC);
>console.log(nameC) : 无值
>类型别名 :=> 无值
>console.log : (msg: 文字) => 无值
>console : { log(msg: 文字): 无值; }
>log : (msg: 文字) => 无值
>nameC : 文字
>类型别名 :=> 文字
}
else {
    console.log(nameC);
>console.log(nameC) : 无值
>类型别名 :=> 无值
>console.log : (msg: 文字) => 无值
>console : { log(msg: 文字): 无值; }
>log : (msg: 文字) => 无值
>nameC : 文字
>类型别名 :=> 文字
}
