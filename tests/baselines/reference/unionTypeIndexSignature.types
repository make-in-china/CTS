=== tests/cases/conformance/types/union/unionTypeIndexSignature.ts ===
var numOrDate: number | Date;
>numOrDate : number | Date
>Date : Date

var anyVar: number;
>anyVar : number
>类型别名 :=> 数字

// If each type in U has a string index signature, 
// U has a string index signature of a union type of the types of the string index signatures from each type in U.

var unionOfDifferentReturnType: { [a: string]: number; } | { [a: string]: Date; };
>unionOfDifferentReturnType : { [a: string]: number; } | { [a: string]: Date; }
>a : string
>类型别名 :=> 文字
>a : string
>类型别名 :=> 文字
>Date : Date

numOrDate = unionOfDifferentReturnType["hello"]; // number | Date
>numOrDate = unionOfDifferentReturnType["hello"] : number | Date
>numOrDate : number | Date
>unionOfDifferentReturnType["hello"] : number | Date
>unionOfDifferentReturnType : { [a: string]: number; } | { [a: string]: Date; }
>"hello" : "hello"

numOrDate = unionOfDifferentReturnType[10]; // number | Date
>numOrDate = unionOfDifferentReturnType[10] : number | Date
>numOrDate : number | Date
>unionOfDifferentReturnType[10] : number | Date
>unionOfDifferentReturnType : { [a: string]: number; } | { [a: string]: Date; }
>10 : 10

var unionOfTypesWithAndWithoutStringSignature: { [a: string]: number; } | boolean;
>unionOfTypesWithAndWithoutStringSignature : boolean | { [a: string]: number; }
>a : string
>类型别名 :=> 文字

anyVar = unionOfTypesWithAndWithoutStringSignature["hello"]; // any
>anyVar = unionOfTypesWithAndWithoutStringSignature["hello"] : any
>类型别名 :=> 任意
>anyVar : number
>类型别名 :=> 数字
>unionOfTypesWithAndWithoutStringSignature["hello"] : any
>类型别名 :=> 任意
>unionOfTypesWithAndWithoutStringSignature : boolean | { [a: string]: number; }
>"hello" : "hello"

anyVar = unionOfTypesWithAndWithoutStringSignature[10]; // any
>anyVar = unionOfTypesWithAndWithoutStringSignature[10] : any
>类型别名 :=> 任意
>anyVar : number
>类型别名 :=> 数字
>unionOfTypesWithAndWithoutStringSignature[10] : any
>类型别名 :=> 任意
>unionOfTypesWithAndWithoutStringSignature : boolean | { [a: string]: number; }
>10 : 10

// If each type in U has a numeric index signature, 
// U has a numeric index signature of a union type of the types of the numeric index signatures from each type in U.
var unionOfDifferentReturnType1: { [a: number]: number; } | { [a: number]: Date; };
>unionOfDifferentReturnType1 : { [a: number]: number; } | { [a: number]: Date; }
>a : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字
>Date : Date

numOrDate = unionOfDifferentReturnType1["hello"]; // any
>numOrDate = unionOfDifferentReturnType1["hello"] : any
>类型别名 :=> 任意
>numOrDate : number | Date
>unionOfDifferentReturnType1["hello"] : any
>类型别名 :=> 任意
>unionOfDifferentReturnType1 : { [a: number]: number; } | { [a: number]: Date; }
>"hello" : "hello"

numOrDate = unionOfDifferentReturnType1[10]; // number | Date
>numOrDate = unionOfDifferentReturnType1[10] : number | Date
>numOrDate : number | Date
>unionOfDifferentReturnType1[10] : number | Date
>unionOfDifferentReturnType1 : { [a: number]: number; } | { [a: number]: Date; }
>10 : 10

var unionOfTypesWithAndWithoutStringSignature1: { [a: number]: number; } | boolean;
>unionOfTypesWithAndWithoutStringSignature1 : boolean | { [a: number]: number; }
>a : number
>类型别名 :=> 数字

anyVar = unionOfTypesWithAndWithoutStringSignature1["hello"]; // any
>anyVar = unionOfTypesWithAndWithoutStringSignature1["hello"] : any
>类型别名 :=> 任意
>anyVar : number
>类型别名 :=> 数字
>unionOfTypesWithAndWithoutStringSignature1["hello"] : any
>类型别名 :=> 任意
>unionOfTypesWithAndWithoutStringSignature1 : boolean | { [a: number]: number; }
>"hello" : "hello"

anyVar = unionOfTypesWithAndWithoutStringSignature1[10]; // any
>anyVar = unionOfTypesWithAndWithoutStringSignature1[10] : any
>类型别名 :=> 任意
>anyVar : number
>类型别名 :=> 数字
>unionOfTypesWithAndWithoutStringSignature1[10] : any
>类型别名 :=> 任意
>unionOfTypesWithAndWithoutStringSignature1 : boolean | { [a: number]: number; }
>10 : 10

