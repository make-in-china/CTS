=== tests/cases/compiler/emitAccessExpressionOfCastedObjectLiteralExpressionInArrowFunctionES6.ts ===
(x) => ({ "1": "one", "2": "two" } as { [key: string]: string })[x];
>(x) => ({ "1": "one", "2": "two" } as { [key: string]: string })[x] : (x: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>({ "1": "one", "2": "two" } as { [key: string]: string })[x] : 文字
>类型别名 :=> 文字
>({ "1": "one", "2": "two" } as { [key: string]: string }) : { [key: 文字]: 文字; }
>{ "1": "one", "2": "two" } as { [key: string]: string } : { [key: 文字]: 文字; }
>{ "1": "one", "2": "two" } : { "1": 文字; "2": 文字; }
>"one" : "one"
>"two" : "two"
>key : 文字
>类型别名 :=> 文字
>x : 任意
>类型别名 :=> 任意

(x) => ({ "1": "one", "2": "two" } as { [key: string]: string }).x;
>(x) => ({ "1": "one", "2": "two" } as { [key: string]: string }).x : (x: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>({ "1": "one", "2": "two" } as { [key: string]: string }).x : 文字
>类型别名 :=> 文字
>({ "1": "one", "2": "two" } as { [key: string]: string }) : { [key: 文字]: 文字; }
>{ "1": "one", "2": "two" } as { [key: string]: string } : { [key: 文字]: 文字; }
>{ "1": "one", "2": "two" } : { "1": 文字; "2": 文字; }
>"one" : "one"
>"two" : "two"
>key : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字

