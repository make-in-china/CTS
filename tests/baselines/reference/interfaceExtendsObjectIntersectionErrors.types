=== tests/cases/conformance/interfaces/interfaceDeclarations/interfaceExtendsObjectIntersectionErrors.ts ===
type T1 = { a: number };
>T1 : T1
>a : 数字
>类型别名 :=> 数字

type T2 = T1 & { b: number };
>T2 : T2
>T1 : T1
>b : 数字
>类型别名 :=> 数字

type T3 = number[];
>T3 : 数字[]

type T4 = [string, number];
>T4 : [文字, 数字]

type T5 = { [P in 'a' | 'b' | 'c']: string };
>T5 : T5
>P : P

interface I1 extends T1 { a: string }
>I1 : I1
>T1 : T1
>a : 文字
>类型别名 :=> 文字

interface I2 extends T2 { b: string }
>I2 : I2
>T2 : T2
>b : 文字
>类型别名 :=> 文字

interface I3 extends T3 { length: string }
>I3 : I3
>T3 : 数字[]
>length : 文字
>类型别名 :=> 文字

interface I4 extends T4 { 0: number }
>I4 : I4
>T4 : [文字, 数字]

interface I5 extends T5 { c: number }
>I5 : I5
>T5 : T5
>c : 数字
>类型别名 :=> 数字

type Constructor<T> = new () => T;
>Constructor : Constructor<T>
>T : T
>T : T

declare function Constructor<T>(): Constructor<T>;
>Constructor : <T>() => Constructor<T>
>T : T
>Constructor : Constructor<T>
>T : T

class C1 extends Constructor<T1>() { a: string }
>C1 : C1
>Constructor<T1>() : T1
>Constructor : <T>() => Constructor<T>
>T1 : T1
>a : 文字
>类型别名 :=> 文字

class C2 extends Constructor<T2>() { b: string }
>C2 : C2
>Constructor<T2>() : T2
>Constructor : <T>() => Constructor<T>
>T2 : T2
>b : 文字
>类型别名 :=> 文字

class C3 extends Constructor<T3>() { length: string }
>C3 : C3
>Constructor<T3>() : 数字[]
>Constructor : <T>() => Constructor<T>
>T3 : 数字[]
>length : 文字
>类型别名 :=> 文字

class C4 extends Constructor<T4>() { 0: number }
>C4 : C4
>Constructor<T4>() : [文字, 数字]
>Constructor : <T>() => Constructor<T>
>T4 : [文字, 数字]

class C5 extends Constructor<T5>() { c: number }
>C5 : C5
>Constructor<T5>() : T5
>Constructor : <T>() => Constructor<T>
>T5 : T5
>c : 数字
>类型别名 :=> 数字

declare class CX { static a: string }
>CX : CX
>a : 文字
>类型别名 :=> 文字

declare enum EX { A, B, C }
>EX : EX
>A : EX
>B : EX
>C : EX

declare namespace NX { export const a = "hello" }
>NX : 类为 NX
>a : "hello"
>"hello" : "hello"

type TCX = typeof CX;
>TCX : 类为 CX
>CX : 类为 CX

type TEX = typeof EX;
>TEX : 类为 EX
>EX : 类为 EX

type TNX = typeof NX;
>TNX : 类为 NX
>NX : 类为 NX

interface I10 extends TCX { a: number }
>I10 : I10
>TCX : 类为 CX
>a : 数字
>类型别名 :=> 数字

interface I11 extends TEX { C: string }
>I11 : I11
>TEX : 类为 EX
>C : 文字
>类型别名 :=> 文字

interface I12 extends TNX { a: number }
>I12 : I12
>TNX : 类为 NX
>a : 数字
>类型别名 :=> 数字

interface I14 extends TCX { [x: string]: number }
>I14 : I14
>TCX : 类为 CX
>x : 文字
>类型别名 :=> 文字

interface I15 extends TEX { [x: string]: number }
>I15 : I15
>TEX : 类为 EX
>x : 文字
>类型别名 :=> 文字

interface I16 extends TNX { [x: string]: number }
>I16 : I16
>TNX : 类为 NX
>x : 文字
>类型别名 :=> 文字

type Identifiable<T> = { _id: string } & T;
>Identifiable : Identifiable<T>
>T : T
>_id : 文字
>类型别名 :=> 文字
>T : T

interface I20 extends Partial<T1> { a: string }
>I20 : I20
>Partial : Partial<T>
>T1 : T1
>a : 文字
>类型别名 :=> 文字

interface I21 extends Readonly<T1> { a: string }
>I21 : I21
>Readonly : Readonly<T>
>T1 : T1
>a : 文字
>类型别名 :=> 文字

interface I22 extends Identifiable<T1> { a: string }
>I22 : I22
>Identifiable : Identifiable<T>
>T1 : T1
>a : 文字
>类型别名 :=> 文字

interface I23 extends Identifiable<T1 & { b: number}> { a: string }
>I23 : I23
>Identifiable : Identifiable<T>
>T1 : T1
>b : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字

type U = { a: number } | { b: string };
>U : U
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

interface I30 extends U { x: string }
>I30 : I30
>U : U
>x : 文字
>类型别名 :=> 文字

interface I31<T> extends T { x: string }
>I31 : I31<T>
>T : T
>T : T
>x : 文字
>类型别名 :=> 文字

