=== tests/cases/compiler/contextualTyping.ts ===
// DEFAULT INTERFACES
interface IFoo {
>IFoo : IFoo

    n: number;
>n : 数字
>类型别名 :=> 数字

    s: string;
>s : 文字
>类型别名 :=> 文字

    f(i: number, s: string): string;
>f : (i: 数字, s: 文字) => 文字
>i : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

    a: number[];
>a : 数字[]
}

interface IBar {
>IBar : IBar

    foo: IFoo;
>foo : IFoo
>IFoo : IFoo
}

// CONTEXT: Class property declaration
class C1T5 {
>C1T5 : C1T5

    foo: (i: number, s: string) => number = function(i) {
>foo : (i: 数字, s: 文字) => 数字
>i : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>function(i) {        return i;    } : (i: 数字) => 数字
>i : 数字
>类型别名 :=> 数字

        return i;
>i : 数字
>类型别名 :=> 数字
    }
}

// CONTEXT: Module property declaration
module C2T5 {
>C2T5 : 类为 C2T5

    export var foo: (i: number, s: string) => number = function(i) {
>foo : (i: 数字, s: 文字) => 数字
>i : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>function(i) {        return i;    } : (i: 数字) => 数字
>i : 数字
>类型别名 :=> 数字

        return i;
>i : 数字
>类型别名 :=> 数字
    }
}

// CONTEXT: Variable declaration
var c3t1: (s: string) => string = (function(s) { return s });
>c3t1 : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>(function(s) { return s }) : (s: 文字) => 文字
>function(s) { return s } : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

var c3t2 = <IFoo>({
>c3t2 : IFoo
><IFoo>({    n: 1}) : IFoo
>IFoo : IFoo
>({    n: 1}) : { n: 数字; }
>{    n: 1} : { n: 数字; }

    n: 1
>n : 数字
>类型别名 :=> 数字
>1 : 1

})
var c3t3: number[] = [];
>c3t3 : 数字[]
>[] : 未定[]

var c3t4: () => IFoo = function() { return <IFoo>({}) };
>c3t4 : () => IFoo
>IFoo : IFoo
>function() { return <IFoo>({}) } : () => IFoo
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

var c3t5: (n: number) => IFoo = function(n) { return <IFoo>({}) };
>c3t5 : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
>IFoo : IFoo
>function(n) { return <IFoo>({}) } : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

var c3t6: (n: number, s: string) => IFoo = function(n, s) { return <IFoo>({}) };
>c3t6 : (n: 数字, s: 文字) => IFoo
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>IFoo : IFoo
>function(n, s) { return <IFoo>({}) } : (n: 数字, s: 文字) => IFoo
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

var c3t7: {
>c3t7 : { (n: 数字): 数字; (s1: 文字): 数字; }

    (n: number): number;    
>n : 数字
>类型别名 :=> 数字

    (s1: string): number;
>s1 : 文字
>类型别名 :=> 文字

} = function(n) { return n; };
>function(n) { return n; } : (n: 任意) => 任意
>n : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

var c3t8: (n: number, s: string) => number = function(n) { return n; };
>c3t8 : (n: 数字, s: 文字) => 数字
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>function(n) { return n; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

var c3t9: number[][] = [[],[]];
>c3t9 : 数字[][]
>[[],[]] : 未定[][]
>[] : 未定[]
>[] : 未定[]

var c3t10: IFoo[] = [<IFoo>({}),<IFoo>({})];
>c3t10 : IFoo[]
>IFoo : IFoo
>[<IFoo>({}),<IFoo>({})] : IFoo[]
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

var c3t11: {(n: number, s: string): string;}[] = [function(n, s) { return s; }];
>c3t11 : ((n: 数字, s: 文字) => 文字)[]
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>[function(n, s) { return s; }] : ((n: 数字, s: 文字) => 文字)[]
>function(n, s) { return s; } : (n: 数字, s: 文字) => 文字
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

var c3t12: IBar = {
>c3t12 : IBar
>IBar : IBar
>{    foo: <IFoo>({})} : { foo: IFoo; }

    foo: <IFoo>({})
>foo : IFoo
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}
}
var c3t13 = <IFoo>({
>c3t13 : IFoo
><IFoo>({    f: function(i, s) { return s; }}) : IFoo
>IFoo : IFoo
>({    f: function(i, s) { return s; }}) : { f: (i: 数字, s: 文字) => 文字; }
>{    f: function(i, s) { return s; }} : { f: (i: 数字, s: 文字) => 文字; }

    f: function(i, s) { return s; }
>f : (i: 数字, s: 文字) => 文字
>function(i, s) { return s; } : (i: 数字, s: 文字) => 文字
>i : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

})
var c3t14 = <IFoo>({
>c3t14 : IFoo
><IFoo>({    a: []}) : IFoo
>IFoo : IFoo
>({    a: []}) : { a: 未定[]; }
>{    a: []} : { a: 未定[]; }

    a: []
>a : 未定[]
>[] : 未定[]

})

// CONTEXT: Class property assignment
class C4T5 {
>C4T5 : C4T5

    foo: (i: number, s: string) => string;
>foo : (i: 数字, s: 文字) => 文字
>i : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

    constructor() {
        this.foo = function(i, s) {
>this.foo = function(i, s) {            return s;        } : (i: 数字, s: 文字) => 文字
>this.foo : (i: 数字, s: 文字) => 文字
>this : 本体
>foo : (i: 数字, s: 文字) => 文字
>function(i, s) {            return s;        } : (i: 数字, s: 文字) => 文字
>i : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

            return s;
>s : 文字
>类型别名 :=> 文字
        }
    }
}

// CONTEXT: Module property assignment
module C5T5 {
>C5T5 : 类为 C5T5

    export var foo: (i: number, s: string) => string;
>foo : (i: 数字, s: 文字) => 文字
>i : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

    foo = function(i, s) {
>foo = function(i, s) {        return s;    } : (i: 数字, s: 文字) => 文字
>foo : (i: 数字, s: 文字) => 文字
>function(i, s) {        return s;    } : (i: 数字, s: 文字) => 文字
>i : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

        return s;
>s : 文字
>类型别名 :=> 文字
    }
}

// CONTEXT: Variable assignment
var c6t5: (n: number) => IFoo;
>c6t5 : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
>IFoo : IFoo

c6t5 = <(n: number) => IFoo>function(n) { return <IFoo>({}) };
>c6t5 = <(n: number) => IFoo>function(n) { return <IFoo>({}) } : (n: 数字) => IFoo
>c6t5 : (n: 数字) => IFoo
><(n: number) => IFoo>function(n) { return <IFoo>({}) } : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
>IFoo : IFoo
>function(n) { return <IFoo>({}) } : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

// CONTEXT: Array index assignment
var c7t2: IFoo[];
>c7t2 : IFoo[]
>IFoo : IFoo

c7t2[0] = <IFoo>({n: 1});
>c7t2[0] = <IFoo>({n: 1}) : IFoo
>c7t2[0] : IFoo
>c7t2 : IFoo[]
>0 : 0
><IFoo>({n: 1}) : IFoo
>IFoo : IFoo
>({n: 1}) : { n: 数字; }
>{n: 1} : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>1 : 1

// CONTEXT: Object property assignment
interface IPlaceHolder {
>IPlaceHolder : IPlaceHolder

    t1: (s: string) => string;
>t1 : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字

    t2: IFoo;
>t2 : IFoo
>IFoo : IFoo

    t3: number[];
>t3 : 数字[]

    t4: () => IFoo;
>t4 : () => IFoo
>IFoo : IFoo

    t5: (n: number) => IFoo;
>t5 : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
>IFoo : IFoo

    t6: (n: number, s: string) => IFoo;
>t6 : (n: 数字, s: 文字) => IFoo
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>IFoo : IFoo

    t7: {
>t7 : (n: 数字, s: 文字) => 数字

            (n: number, s: string): number;    
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

            //(s1: string, s2: string): number;
        };
    t8: (n: number, s: string) => number;
>t8 : (n: 数字, s: 文字) => 数字
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

    t9: number[][];
>t9 : 数字[][]

    t10: IFoo[];
>t10 : IFoo[]
>IFoo : IFoo

    t11: {(n: number, s: string): string;}[];
>t11 : ((n: 数字, s: 文字) => 文字)[]
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

    t12: IBar;
>t12 : IBar
>IBar : IBar

    t13: IFoo;
>t13 : IFoo
>IFoo : IFoo

    t14: IFoo;
>t14 : IFoo
>IFoo : IFoo
    }

var objc8: {
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }

    t1: (s: string) => string;
>t1 : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字

    t2: IFoo;
>t2 : IFoo
>IFoo : IFoo

    t3: number[];
>t3 : 数字[]

    t4: () => IFoo;
>t4 : () => IFoo
>IFoo : IFoo

    t5: (n: number) => IFoo;
>t5 : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
>IFoo : IFoo

    t6: (n: number, s: string) => IFoo;
>t6 : (n: 数字, s: 文字) => IFoo
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>IFoo : IFoo

    t7: {
>t7 : (n: 数字, s: 文字) => 数字

            (n: number, s: string): number;    
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

            //(s1: string, s2: string): number;
        };
    t8: (n: number, s: string) => number;
>t8 : (n: 数字, s: 文字) => 数字
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

    t9: number[][];
>t9 : 数字[][]

    t10: IFoo[];
>t10 : IFoo[]
>IFoo : IFoo

    t11: {(n: number, s: string): string;}[];
>t11 : ((n: 数字, s: 文字) => 文字)[]
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

    t12: IBar;
>t12 : IBar
>IBar : IBar

    t13: IFoo;
>t13 : IFoo
>IFoo : IFoo

    t14: IFoo;
>t14 : IFoo
>IFoo : IFoo

} = <IPlaceHolder>({});
><IPlaceHolder>({}) : IPlaceHolder
>IPlaceHolder : IPlaceHolder
>({}) : {}
>{} : {}

objc8.t1 = (function(s) { return s });
>objc8.t1 = (function(s) { return s }) : (s: 文字) => 文字
>objc8.t1 : (s: 文字) => 文字
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t1 : (s: 文字) => 文字
>(function(s) { return s }) : (s: 文字) => 文字
>function(s) { return s } : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

objc8.t2 = <IFoo>({
>objc8.t2 = <IFoo>({    n: 1}) : IFoo
>objc8.t2 : IFoo
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t2 : IFoo
><IFoo>({    n: 1}) : IFoo
>IFoo : IFoo
>({    n: 1}) : { n: 数字; }
>{    n: 1} : { n: 数字; }

    n: 1
>n : 数字
>类型别名 :=> 数字
>1 : 1

});
objc8.t3 = [];
>objc8.t3 = [] : 未定[]
>objc8.t3 : 数字[]
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t3 : 数字[]
>[] : 未定[]

objc8.t4 = function() { return <IFoo>({}) };
>objc8.t4 = function() { return <IFoo>({}) } : () => IFoo
>objc8.t4 : () => IFoo
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t4 : () => IFoo
>function() { return <IFoo>({}) } : () => IFoo
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

objc8.t5 = function(n) { return <IFoo>({}) };
>objc8.t5 = function(n) { return <IFoo>({}) } : (n: 数字) => IFoo
>objc8.t5 : (n: 数字) => IFoo
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t5 : (n: 数字) => IFoo
>function(n) { return <IFoo>({}) } : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

objc8.t6 = function(n, s) { return <IFoo>({}) };
>objc8.t6 = function(n, s) { return <IFoo>({}) } : (n: 数字, s: 文字) => IFoo
>objc8.t6 : (n: 数字, s: 文字) => IFoo
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t6 : (n: 数字, s: 文字) => IFoo
>function(n, s) { return <IFoo>({}) } : (n: 数字, s: 文字) => IFoo
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

objc8.t7 = function(n: number) { return n };
>objc8.t7 = function(n: number) { return n } : (n: 数字) => 数字
>objc8.t7 : (n: 数字, s: 文字) => 数字
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t7 : (n: 数字, s: 文字) => 数字
>function(n: number) { return n } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

objc8.t8 = function(n) { return n; };
>objc8.t8 = function(n) { return n; } : (n: 数字) => 数字
>objc8.t8 : (n: 数字, s: 文字) => 数字
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t8 : (n: 数字, s: 文字) => 数字
>function(n) { return n; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

objc8.t9 = [[],[]];
>objc8.t9 = [[],[]] : 未定[][]
>objc8.t9 : 数字[][]
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t9 : 数字[][]
>[[],[]] : 未定[][]
>[] : 未定[]
>[] : 未定[]

objc8.t10 = [<IFoo>({}),<IFoo>({})];
>objc8.t10 = [<IFoo>({}),<IFoo>({})] : IFoo[]
>objc8.t10 : IFoo[]
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t10 : IFoo[]
>[<IFoo>({}),<IFoo>({})] : IFoo[]
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

objc8.t11 = [function(n, s) { return s; }];
>objc8.t11 = [function(n, s) { return s; }] : ((n: 数字, s: 文字) => 文字)[]
>objc8.t11 : ((n: 数字, s: 文字) => 文字)[]
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t11 : ((n: 数字, s: 文字) => 文字)[]
>[function(n, s) { return s; }] : ((n: 数字, s: 文字) => 文字)[]
>function(n, s) { return s; } : (n: 数字, s: 文字) => 文字
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

objc8.t12 = {
>objc8.t12 = {    foo: <IFoo>({})} : { foo: IFoo; }
>objc8.t12 : IBar
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t12 : IBar
>{    foo: <IFoo>({})} : { foo: IFoo; }

    foo: <IFoo>({})
>foo : IFoo
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}
}
objc8.t13 = <IFoo>({
>objc8.t13 = <IFoo>({    f: function(i, s) { return s; }}) : IFoo
>objc8.t13 : IFoo
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t13 : IFoo
><IFoo>({    f: function(i, s) { return s; }}) : IFoo
>IFoo : IFoo
>({    f: function(i, s) { return s; }}) : { f: (i: 数字, s: 文字) => 文字; }
>{    f: function(i, s) { return s; }} : { f: (i: 数字, s: 文字) => 文字; }

    f: function(i, s) { return s; }
>f : (i: 数字, s: 文字) => 文字
>function(i, s) { return s; } : (i: 数字, s: 文字) => 文字
>i : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

})
objc8.t14 = <IFoo>({
>objc8.t14 = <IFoo>({    a: []}) : IFoo
>objc8.t14 : IFoo
>objc8 : { t1: (s: 文字) => 文字; t2: IFoo; t3: 数字[]; t4: () => IFoo; t5: (n: 数字) => IFoo; t6: (n: 数字, s: 文字) => IFoo; t7: (n: 数字, s: 文字) => 数字; t8: (n: 数字, s: 文字) => 数字; t9: 数字[][]; t10: IFoo[]; t11: ((n: 数字, s: 文字) => 文字)[]; t12: IBar; t13: IFoo; t14: IFoo; }
>t14 : IFoo
><IFoo>({    a: []}) : IFoo
>IFoo : IFoo
>({    a: []}) : { a: 未定[]; }
>{    a: []} : { a: 未定[]; }

    a: []
>a : 未定[]
>[] : 未定[]

})
// CONTEXT: Function call
function c9t5(f: (n: number) => IFoo) {};
>c9t5 : (f: (n: 数字) => IFoo) => 无值
>f : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
>IFoo : IFoo

c9t5(function(n) {
>c9t5(function(n) {    return <IFoo>({});}) : 无值
>类型别名 :=> 无值
>c9t5 : (f: (n: 数字) => IFoo) => 无值
>function(n) {    return <IFoo>({});} : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字

    return <IFoo>({});
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

});

// CONTEXT: Return statement
var c10t5: () => (n: number) => IFoo = function() { return function(n) { return <IFoo>({}) } };
>c10t5 : () => (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
>IFoo : IFoo
>function() { return function(n) { return <IFoo>({}) } } : () => (n: 数字) => IFoo
>function(n) { return <IFoo>({}) } : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

// CONTEXT: Newing a class
class C11t5 { constructor(f: (n: number) => IFoo) { } };
>C11t5 : C11t5
>f : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
>IFoo : IFoo

var i = new C11t5(function(n) { return <IFoo>({}) });
>i : C11t5
>new C11t5(function(n) { return <IFoo>({}) }) : C11t5
>C11t5 : 类为 C11t5
>function(n) { return <IFoo>({}) } : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

// CONTEXT: Type annotated expression
var c12t1 = <(s: string) => string> (function(s) { return s });
>c12t1 : (s: 文字) => 文字
><(s: string) => string> (function(s) { return s }) : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>(function(s) { return s }) : (s: 文字) => 文字
>function(s) { return s } : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

var c12t2 = <IFoo> ({
>c12t2 : IFoo
><IFoo> ({    n: 1}) : IFoo
>IFoo : IFoo
>({    n: 1}) : { n: 数字; }
>{    n: 1} : { n: 数字; }

    n: 1
>n : 数字
>类型别名 :=> 数字
>1 : 1

});
var c12t3 = <number[]> [];
>c12t3 : 数字[]
><number[]> [] : 数字[]
>[] : 未定[]

var c12t4 = <() => IFoo> function() { return <IFoo>({}) };
>c12t4 : () => IFoo
><() => IFoo> function() { return <IFoo>({}) } : () => IFoo
>IFoo : IFoo
>function() { return <IFoo>({}) } : () => IFoo
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

var c12t5 = <(n: number) => IFoo> function(n) { return <IFoo>({}) };
>c12t5 : (n: 数字) => IFoo
><(n: number) => IFoo> function(n) { return <IFoo>({}) } : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
>IFoo : IFoo
>function(n) { return <IFoo>({}) } : (n: 数字) => IFoo
>n : 数字
>类型别名 :=> 数字
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

var c12t6 = <(n: number, s: string) => IFoo> function(n, s) { return <IFoo>({}) };
>c12t6 : (n: 数字, s: 文字) => IFoo
><(n: number, s: string) => IFoo> function(n, s) { return <IFoo>({}) } : (n: 数字, s: 文字) => IFoo
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>IFoo : IFoo
>function(n, s) { return <IFoo>({}) } : (n: 数字, s: 文字) => IFoo
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

var c12t7 = <{
>c12t7 : (n: 数字, s: 文字) => 数字
><{    (n: number, s: string): number;        //(s1: string, s2: string): number;}> function(n:number) { return n } : (n: 数字, s: 文字) => 数字

    (n: number, s: string): number;    
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

    //(s1: string, s2: string): number;
}> function(n:number) { return n };
>function(n:number) { return n } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

var c12t8 = <(n: number, s: string) => number> function(n) { return n; };
>c12t8 : (n: 数字, s: 文字) => 数字
><(n: number, s: string) => number> function(n) { return n; } : (n: 数字, s: 文字) => 数字
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>function(n) { return n; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

var c12t9 = <number[][]> [[],[]];
>c12t9 : 数字[][]
><number[][]> [[],[]] : 数字[][]
>[[],[]] : 未定[][]
>[] : 未定[]
>[] : 未定[]

var c12t10 = <IFoo[]> [<IFoo>({}),<IFoo>({})];
>c12t10 : IFoo[]
><IFoo[]> [<IFoo>({}),<IFoo>({})] : IFoo[]
>IFoo : IFoo
>[<IFoo>({}),<IFoo>({})] : IFoo[]
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}

var c12t11 = <{(n: number, s: string): string;}[]> [function(n, s) { return s; }];
>c12t11 : ((n: 数字, s: 文字) => 文字)[]
><{(n: number, s: string): string;}[]> [function(n, s) { return s; }] : ((n: 数字, s: 文字) => 文字)[]
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>[function(n, s) { return s; }] : ((n: 数字, s: 文字) => 文字)[]
>function(n, s) { return s; } : (n: 数字, s: 文字) => 文字
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

var c12t12 = <IBar> {
>c12t12 : IBar
><IBar> {    foo: <IFoo>({})} : IBar
>IBar : IBar
>{    foo: <IFoo>({})} : { foo: IFoo; }

    foo: <IFoo>({})
>foo : IFoo
><IFoo>({}) : IFoo
>IFoo : IFoo
>({}) : {}
>{} : {}
}
var c12t13 = <IFoo> ({
>c12t13 : IFoo
><IFoo> ({    f: function(i, s) { return s; }}) : IFoo
>IFoo : IFoo
>({    f: function(i, s) { return s; }}) : { f: (i: 数字, s: 文字) => 文字; }
>{    f: function(i, s) { return s; }} : { f: (i: 数字, s: 文字) => 文字; }

    f: function(i, s) { return s; }
>f : (i: 数字, s: 文字) => 文字
>function(i, s) { return s; } : (i: 数字, s: 文字) => 文字
>i : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

})
var c12t14 = <IFoo> ({
>c12t14 : IFoo
><IFoo> ({    a: []}) : IFoo
>IFoo : IFoo
>({    a: []}) : { a: 未定[]; }
>{    a: []} : { a: 未定[]; }

    a: []
>a : 未定[]
>[] : 未定[]

})

// CONTEXT: Contextual typing declarations

// contextually typing function declarations
declare function EF1(a:number, b:number):number;
>EF1 : (a: 数字, b: 数字) => 数字
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字

function EF1(a,b) { return a+b; }
>EF1 : (a: 数字, b: 数字) => 数字
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>a+b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

var efv = EF1(1,2);
>efv : 数字
>类型别名 :=> 数字
>EF1(1,2) : 数字
>类型别名 :=> 数字
>EF1 : (a: 数字, b: 数字) => 数字
>1 : 1
>2 : 2


// contextually typing from ambient class declarations
declare class Point
>Point : Point
{
      constructor(x: number, y: number);
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

      x: number;
>x : 数字
>类型别名 :=> 数字

      y: number;
>y : 数字
>类型别名 :=> 数字

      add(dx: number, dy: number): Point;
>add : (dx: 数字, dy: 数字) => Point
>dx : 数字
>类型别名 :=> 数字
>dy : 数字
>类型别名 :=> 数字
>Point : Point

      static origin: Point;
>origin : Point
>Point : Point

}

function Point(x, y) {
>Point : (x: 任意, y: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    this.x = x;
>this.x = x : 任意
>类型别名 :=> 任意
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    this.y = y;
>this.y = y : 任意
>类型别名 :=> 任意
>this.y : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    return this;
>this : 任意
>类型别名 :=> 任意
}

Point.origin = new Point(0, 0);
>Point.origin = new Point(0, 0) : Point
>Point.origin : Point
>Point : 类为 Point
>origin : Point
>new Point(0, 0) : Point
>Point : 类为 Point
>0 : 0
>0 : 0

Point.prototype.add = function(dx, dy) {
>Point.prototype.add = function(dx, dy) {    return new Point(this.x + dx, this.y + dy);} : (dx: 数字, dy: 数字) => Point
>Point.prototype.add : (dx: 数字, dy: 数字) => Point
>Point.prototype : Point
>Point : 类为 Point
>prototype : Point
>add : (dx: 数字, dy: 数字) => Point
>function(dx, dy) {    return new Point(this.x + dx, this.y + dy);} : (dx: 数字, dy: 数字) => Point
>dx : 数字
>类型别名 :=> 数字
>dy : 数字
>类型别名 :=> 数字

    return new Point(this.x + dx, this.y + dy);
>new Point(this.x + dx, this.y + dy) : Point
>Point : 类为 Point
>this.x + dx : 任意
>类型别名 :=> 任意
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>dx : 数字
>类型别名 :=> 数字
>this.y + dy : 任意
>类型别名 :=> 任意
>this.y : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>dy : 数字
>类型别名 :=> 数字

};

Point.prototype = {
>Point.prototype = {    x: 0,    y: 0,    add: function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    }} : { x: 数字; y: 数字; add: (dx: 数字, dy: 数字) => Point; }
>Point.prototype : Point
>Point : 类为 Point
>prototype : Point
>{    x: 0,    y: 0,    add: function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    }} : { x: 数字; y: 数字; add: (dx: 数字, dy: 数字) => Point; }

    x: 0,
>x : 数字
>类型别名 :=> 数字
>0 : 0

    y: 0,
>y : 数字
>类型别名 :=> 数字
>0 : 0

    add: function(dx, dy) {
>add : (dx: 数字, dy: 数字) => Point
>function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    } : (dx: 数字, dy: 数字) => Point
>dx : 数字
>类型别名 :=> 数字
>dy : 数字
>类型别名 :=> 数字

        return new Point(this.x + dx, this.y + dy);
>new Point(this.x + dx, this.y + dy) : Point
>Point : 类为 Point
>this.x + dx : 任意
>类型别名 :=> 任意
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>dx : 数字
>类型别名 :=> 数字
>this.y + dy : 任意
>类型别名 :=> 任意
>this.y : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>dy : 数字
>类型别名 :=> 数字
    }
};

interface A { x: string; }
>A : A
>x : 文字
>类型别名 :=> 文字

interface B extends A { }
>B : B
>A : A

var x: B = { };
>x : B
>B : B
>{ } : {}

