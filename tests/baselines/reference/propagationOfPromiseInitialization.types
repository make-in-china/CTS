=== tests/cases/compiler/propagationOfPromiseInitialization.ts ===
interface IPromise<T> {
>IPromise : IPromise<T>
>T : T

    then<TResult>(successCallback: (promiseValue: T) => TResult, errorCallback?: (reason: any) => TResult): IPromise<TResult>;
>then : <TResult>(successCallback: (promiseValue: T) => TResult, errorCallback?: (reason: 任意) => TResult) => IPromise<TResult>
>TResult : TResult
>successCallback : (promiseValue: T) => TResult
>promiseValue : T
>T : T
>TResult : TResult
>errorCallback : (reason: 任意) => TResult
>reason : 任意
>类型别名 :=> 任意
>TResult : TResult
>IPromise : IPromise<T>
>TResult : TResult
}

var foo: IPromise<number>;
>foo : IPromise<数字>
>IPromise : IPromise<T>

foo.then((x) => {
>foo.then((x) => {    // x is inferred to be a number    return "asdf";}).then((x) => {    // x is inferred to be string    x.length;    return 123;}) : IPromise<数字>
>foo.then((x) => {    // x is inferred to be a number    return "asdf";}).then : <TResult>(successCallback: (promiseValue: 文字) => TResult, errorCallback?: (reason: 任意) => TResult) => IPromise<TResult>
>foo.then((x) => {    // x is inferred to be a number    return "asdf";}) : IPromise<文字>
>foo.then : <TResult>(successCallback: (promiseValue: 数字) => TResult, errorCallback?: (reason: 任意) => TResult) => IPromise<TResult>
>foo : IPromise<数字>
>then : <TResult>(successCallback: (promiseValue: 数字) => TResult, errorCallback?: (reason: 任意) => TResult) => IPromise<TResult>
>(x) => {    // x is inferred to be a number    return "asdf";} : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字

    // x is inferred to be a number
    return "asdf";
>"asdf" : "asdf"

}).then((x) => {
>then : <TResult>(successCallback: (promiseValue: 文字) => TResult, errorCallback?: (reason: 任意) => TResult) => IPromise<TResult>
>(x) => {    // x is inferred to be string    x.length;    return 123;} : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字

    // x is inferred to be string
    x.length;
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

    return 123;
>123 : 123

});

