=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments.ts ===
// Generic functions used as arguments for function typed parameters are not used to make inferences from
// Using function arguments, no errors expected

function foo<T>(x: (a: T) => T) {
>foo : <T>(x: (a: T) => T) => T
>T : T
>x : (a: T) => T
>a : T
>T : T
>T : T

    return x(null);
>x(null) : T
>x : (a: T) => T
>null : 空值
>类型别名 :=> 空值
}

var r = foo(<U>(x: U) => ''); // {}
>r : {}
>foo(<U>(x: U) => '') : {}
>foo : <T>(x: (a: T) => T) => T
><U>(x: U) => '' : <U>(x: U) => 文字
>U : U
>x : U
>U : U
>'' : ""

var r2 = foo<string>(<U>(x: U) => ''); // string 
>r2 : 文字
>类型别名 :=> 文字
>foo<string>(<U>(x: U) => '') : 文字
>类型别名 :=> 文字
>foo : <T>(x: (a: T) => T) => T
><U>(x: U) => '' : <U>(x: U) => 文字
>U : U
>x : U
>U : U
>'' : ""

var r3 = foo(x => ''); // {}
>r3 : {}
>foo(x => '') : {}
>foo : <T>(x: (a: T) => T) => T
>x => '' : (x: {}) => 文字
>x : {}
>'' : ""

function foo2<T, U>(x: T, cb: (a: T) => U) {
>foo2 : <T, U>(x: T, cb: (a: T) => U) => U
>T : T
>U : U
>x : T
>T : T
>cb : (a: T) => U
>a : T
>T : T
>U : U

    return cb(x);
>cb(x) : U
>cb : (a: T) => U
>x : T
}

var r4 = foo2(1, function <Z>(a: Z) { return '' }); // string, contextual signature instantiation is applied to generic functions
>r4 : 文字
>类型别名 :=> 文字
>foo2(1, function <Z>(a: Z) { return '' }) : 文字
>类型别名 :=> 文字
>foo2 : <T, U>(x: T, cb: (a: T) => U) => U
>1 : 1
>function <Z>(a: Z) { return '' } : <Z>(a: Z) => 文字
>Z : Z
>a : Z
>Z : Z
>'' : ""

var r5 = foo2(1, (a) => ''); // string
>r5 : 文字
>类型别名 :=> 文字
>foo2(1, (a) => '') : 文字
>类型别名 :=> 文字
>foo2 : <T, U>(x: T, cb: (a: T) => U) => U
>1 : 1
>(a) => '' : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>'' : ""

var r6 = foo2<string, number>('', <Z>(a: Z) => 1);
>r6 : 数字
>类型别名 :=> 数字
>foo2<string, number>('', <Z>(a: Z) => 1) : 数字
>类型别名 :=> 数字
>foo2 : <T, U>(x: T, cb: (a: T) => U) => U
>'' : ""
><Z>(a: Z) => 1 : <Z>(a: Z) => 数字
>Z : Z
>a : Z
>Z : Z
>1 : 1

function foo3<T, U>(x: T, cb: (a: T) => U, y: U) {
>foo3 : <T, U>(x: T, cb: (a: T) => U, y: U) => U
>T : T
>U : U
>x : T
>T : T
>cb : (a: T) => U
>a : T
>T : T
>U : U
>y : U
>U : U

    return cb(x);
>cb(x) : U
>cb : (a: T) => U
>x : T
}

var r7 = foo3(1, <Z>(a: Z) => '', ''); // string
>r7 : 文字
>类型别名 :=> 文字
>foo3(1, <Z>(a: Z) => '', '') : 文字
>类型别名 :=> 文字
>foo3 : <T, U>(x: T, cb: (a: T) => U, y: U) => U
>1 : 1
><Z>(a: Z) => '' : <Z>(a: Z) => 文字
>Z : Z
>a : Z
>Z : Z
>'' : ""
>'' : ""

var r8 = foo3(1, function (a) { return '' }, 1); // error
>r8 : 任意
>类型别名 :=> 任意
>foo3(1, function (a) { return '' }, 1) : 任意
>类型别名 :=> 任意
>foo3 : <T, U>(x: T, cb: (a: T) => U, y: U) => U
>1 : 1
>function (a) { return '' } : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>'' : ""
>1 : 1

var r9 = foo3<number, string>(1, (a) => '', ''); // string
>r9 : 文字
>类型别名 :=> 文字
>foo3<number, string>(1, (a) => '', '') : 文字
>类型别名 :=> 文字
>foo3 : <T, U>(x: T, cb: (a: T) => U, y: U) => U
>1 : 1
>(a) => '' : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>'' : ""
>'' : ""

function other<T, U>(t: T, u: U) {
>other : <T, U>(t: T, u: U) => 无值
>T : T
>U : U
>t : T
>T : T
>u : U
>U : U

    var r10 = foo2(1, (x: T) => ''); // error
>r10 : 任意
>类型别名 :=> 任意
>foo2(1, (x: T) => '') : 任意
>类型别名 :=> 任意
>foo2 : <T, U>(x: T, cb: (a: T) => U) => U
>1 : 1
>(x: T) => '' : (x: T) => 文字
>x : T
>T : T
>'' : ""

    var r10 = foo2(1, (x) => ''); // string
>r10 : 任意
>类型别名 :=> 任意
>foo2(1, (x) => '') : 文字
>类型别名 :=> 文字
>foo2 : <T, U>(x: T, cb: (a: T) => U) => U
>1 : 1
>(x) => '' : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>'' : ""

    var r11 = foo3(1, (x: T) => '', ''); // error
>r11 : 任意
>类型别名 :=> 任意
>foo3(1, (x: T) => '', '') : 任意
>类型别名 :=> 任意
>foo3 : <T, U>(x: T, cb: (a: T) => U, y: U) => U
>1 : 1
>(x: T) => '' : (x: T) => 文字
>x : T
>T : T
>'' : ""
>'' : ""

    var r11b = foo3(1, (x: T) => '', 1); // error
>r11b : 任意
>类型别名 :=> 任意
>foo3(1, (x: T) => '', 1) : 任意
>类型别名 :=> 任意
>foo3 : <T, U>(x: T, cb: (a: T) => U, y: U) => U
>1 : 1
>(x: T) => '' : (x: T) => 文字
>x : T
>T : T
>'' : ""
>1 : 1

    var r12 = foo3(1, function (a) { return '' }, 1); // error
>r12 : 任意
>类型别名 :=> 任意
>foo3(1, function (a) { return '' }, 1) : 任意
>类型别名 :=> 任意
>foo3 : <T, U>(x: T, cb: (a: T) => U, y: U) => U
>1 : 1
>function (a) { return '' } : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>'' : ""
>1 : 1
}
