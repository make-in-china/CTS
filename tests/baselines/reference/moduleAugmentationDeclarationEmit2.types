=== tests/cases/compiler/map.ts ===
import { Observable } from "./observable"
>Observable : typeof Observable

(<any>Observable.prototype).map = function() { }
>(<any>Observable.prototype).map = function() { } : () => void
>(<any>Observable.prototype).map : any
>类型别名 :=> 任意
>(<any>Observable.prototype) : any
>类型别名 :=> 任意
><any>Observable.prototype : any
>类型别名 :=> 任意
>Observable.prototype : Observable<any>
>Observable : typeof Observable
>prototype : Observable<any>
>map : any
>类型别名 :=> 任意
>function() { } : () => void

declare module "./observable" {
    interface Observable<T> {
>Observable : Observable<T>
>T : T

        map<U>(proj: (e:T) => U): Observable<U>
>map : <U>(proj: (e: T) => U) => Observable<U>
>U : U
>proj : (e: T) => U
>e : T
>T : T
>U : U
>Observable : Observable<T>
>U : U
    }
    namespace Observable {
>Observable : typeof Observable

        let someAnotherValue: string;
>someAnotherValue : string
>类型别名 :=> 文字
    }
}

=== tests/cases/compiler/observable.ts ===
export declare class Observable<T> {
>Observable : Observable<T>
>T : T

    filter(pred: (e:T) => boolean): Observable<T>;
>filter : (pred: (e: T) => boolean) => Observable<T>
>pred : (e: T) => boolean
>e : T
>T : T
>Observable : Observable<T>
>T : T
}

export namespace Observable {
>Observable : typeof Observable

    export let someValue: number;
>someValue : number
>类型别名 :=> 数字
}


=== tests/cases/compiler/main.ts ===
import { Observable } from "./observable"
>Observable : typeof Observable

import "./map";

let x: Observable<number>;
>x : Observable<number>
>Observable : Observable<T>

let y = x.map(x => x + 1);
>y : Observable<number>
>x.map(x => x + 1) : Observable<number>
>x.map : <U>(proj: (e: number) => U) => Observable<U>
>x : Observable<number>
>map : <U>(proj: (e: number) => U) => Observable<U>
>x => x + 1 : (x: number) => number
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1

let z1 = Observable.someValue.toFixed();
>z1 : string
>类型别名 :=> 文字
>Observable.someValue.toFixed() : string
>类型别名 :=> 文字
>Observable.someValue.toFixed : (fractionDigits?: number) => string
>Observable.someValue : number
>类型别名 :=> 数字
>Observable : typeof Observable
>someValue : number
>类型别名 :=> 数字
>toFixed : (fractionDigits?: number) => string

let z2 = Observable.someAnotherValue.toLowerCase();
>z2 : string
>类型别名 :=> 文字
>Observable.someAnotherValue.toLowerCase() : string
>类型别名 :=> 文字
>Observable.someAnotherValue.toLowerCase : () => string
>Observable.someAnotherValue : string
>类型别名 :=> 文字
>Observable : typeof Observable
>someAnotherValue : string
>类型别名 :=> 文字
>toLowerCase : () => string

