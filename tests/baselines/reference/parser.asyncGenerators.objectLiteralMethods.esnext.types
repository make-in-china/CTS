=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/methodIsOk.ts ===
const o1 = {
>o1 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitMethodNameIsOk.ts ===
const o2 = {
>o2 : { await(): AsyncIterableIterator<任意>; }
>{    async * await() {    }} : { await(): AsyncIterableIterator<任意>; }

    async * await() {
>await : () => AsyncIterableIterator<任意>
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldMethodNameIsOk.ts ===
const o3 = {
>o3 : { yield(): AsyncIterableIterator<任意>; }
>{    async * yield() {    }} : { yield(): AsyncIterableIterator<任意>; }

    async * yield() {
>yield : () => AsyncIterableIterator<任意>
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitParameterIsError.ts ===
const o4 = {
>o4 : { f(): 任意; await: 任意; }
>{    async * f(await) : { f(): 任意; await: 任意; }

    async * f(await) {
>f : () => 任意
>await : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldParameterIsError.ts ===
const o5 = {
>o5 : { f(): 任意; yield: 任意; }
>{    async * f(yield) : { f(): 任意; yield: 任意; }

    async * f(yield) {
>f : () => 任意
>yield : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitInParameterInitializerIsError.ts ===
const o6 = {
>o6 : { f(a?: 数字): AsyncIterableIterator<任意>; }
>{    async * f(a = await 1) {    }} : { f(a?: 数字): AsyncIterableIterator<任意>; }

    async * f(a = await 1) {
>f : (a?: 数字) => AsyncIterableIterator<任意>
>a : 数字
>类型别名 :=> 数字
>await 1 : 1
>1 : 1
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldInParameterInitializerIsError.ts ===
const o7 = {
>o7 : { f(a?: 任意): AsyncIterableIterator<任意>; }
>{    async * f(a = yield) {    }} : { f(a?: 任意): AsyncIterableIterator<任意>; }

    async * f(a = yield) {
>f : (a?: 任意) => AsyncIterableIterator<任意>
>a : 任意
>类型别名 :=> 任意
>yield : 任意
>类型别名 :=> 任意
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedAsyncGeneratorIsOk.ts ===
const o8 = {
>o8 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        async function * g() {        }    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        async function * g() {
>g : () => AsyncIterableIterator<任意>
        }
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionDeclarationNamedYieldIsError.ts ===
const o9 = {
>o9 : { f(): AsyncIterableIterator<() => 无值>; }
>{    async * f() {        function yield() {        }    }} : { f(): AsyncIterableIterator<() => 无值>; }

    async * f() {
>f : () => AsyncIterableIterator<() => 无值>

        function yield() {
> : () => 任意
>yield() {        } : 任意
>类型别名 :=> 任意
>() {        } : () => 无值
        }
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionExpressionNamedYieldIsError.ts ===
const o10 = {
>o10 : { f(): AsyncIterableIterator<() => 无值>; }
>{    async * f() {        const x = function yield() {        };    }} : { f(): AsyncIterableIterator<() => 无值>; }

    async * f() {
>f : () => AsyncIterableIterator<() => 无值>

        const x = function yield() {
>x : () => 任意
>function : () => 任意
>yield() {        } : 任意
>类型别名 :=> 任意
>() {        } : () => 无值

        };
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionDeclarationNamedAwaitIsError.ts ===
const o11 = {
>o11 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        function await() {        }    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        function await() {
> : () => 任意
>await() : 任意
>类型别名 :=> 任意
>() : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
        }
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionExpressionNamedAwaitIsError.ts ===
const o12 = {
>o12 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        const x = function await() {        };    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        const x = function await() {
>x : () => 任意
>function : () => 任意
>await() : 任意
>类型别名 :=> 任意
>() : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

        };
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldIsOk.ts ===
const o13 = {
>o13 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        yield;    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        yield;
>yield : 任意
>类型别名 :=> 任意
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldWithValueIsOk.ts ===
const o14 = {
>o14 : { f(): AsyncIterableIterator<1>; }
>{    async * f() {        yield 1;    }} : { f(): AsyncIterableIterator<1>; }

    async * f() {
>f : () => AsyncIterableIterator<1>

        yield 1;
>yield 1 : 任意
>类型别名 :=> 任意
>1 : 1
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldStarMissingValueIsError.ts ===
const o15 = {
>o15 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        yield *;    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        yield *;
>yield * : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldStarWithValueIsOk.ts ===
const o16 = {
>o16 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        yield * [];    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        yield * [];
>yield * [] : 任意
>类型别名 :=> 任意
>[] : 未定[]
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitWithValueIsOk.ts ===
const o17 = {
>o17 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        await 1;    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        await 1;
>await 1 : 1
>1 : 1
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitMissingValueIsError.ts ===
const o18 = {
>o18 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        await;    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        await;
>await : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitAsTypeIsOk.ts ===
interface await {}
>await : await

const o19 = {
>o19 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        let x: await;    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        let x: await;
>x : await
>await : await
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldAsTypeIsOk.ts ===
interface yield {}
>yield : yield

const o20 = {
>o20 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        let x: yield;    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        let x: yield;
>x : yield
>yield : yield
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldInNestedComputedPropertyIsOk.ts ===
const o21 = {
>o21 : { f(): AsyncIterableIterator<任意>; }
>{    async * f() {        const x = { [yield]: 1 };    }} : { f(): AsyncIterableIterator<任意>; }

    async * f() {
>f : () => AsyncIterableIterator<任意>

        const x = { [yield]: 1 };
>x : { [x: 数字]: 数字; }
>{ [yield]: 1 } : { [x: 数字]: 数字; }
>yield : 任意
>类型别名 :=> 任意
>1 : 1
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/asyncGeneratorGetAccessorIsError.ts ===
const o22 = {
>o22 : { get(): 任意; x(): 数字; }
>{    async * get x() {        return 1;    }} : { get(): 任意; x(): 数字; }

    async * get x() {
>get : () => 任意
>x : () => 数字

        return 1;
>1 : 1
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/asyncGeneratorSetAccessorIsError.ts ===
const o23 = {
>o23 : { set(): 任意; x(value: 数字): 无值; }
>{    async * set x(value: number) {    }} : { set(): 任意; x(value: 数字): 无值; }

    async * set x(value: number) {
>set : () => 任意
>x : (value: 数字) => 无值
>value : 数字
>类型别名 :=> 数字
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/asyncGeneratorPropertyIsError.ts ===
const o24 = {
>o24 : { x(): 1; }
>{    async * x: 1;} : { x(): 1; }

    async * x: 1;
>x : () => 1

};
