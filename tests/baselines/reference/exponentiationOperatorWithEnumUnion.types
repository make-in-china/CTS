=== tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithEnumUnion.ts ===
// operands of an enum type are treated as having the primitive type Number.

enum E {
>E : E

    a,
>a : E.a

    b
>b : E.b
}
enum F {
>F : F

    c,
>c : F.c

    d
>d : F.d
}

var a: any;
>a : 任意
>类型别名 :=> 任意

var b: number;
>b : 数字
>类型别名 :=> 数字

var c: E | F;
>c : E | F
>E : E
>F : F

// operator **
var r1 = c ** a;
>r1 : 数字
>类型别名 :=> 数字
>c ** a : 数字
>类型别名 :=> 数字
>c : E | F
>a : 任意
>类型别名 :=> 任意

var r2 = c ** b;
>r2 : 数字
>类型别名 :=> 数字
>c ** b : 数字
>类型别名 :=> 数字
>c : E | F
>b : 数字
>类型别名 :=> 数字

var r3 = c ** c;
>r3 : 数字
>类型别名 :=> 数字
>c ** c : 数字
>类型别名 :=> 数字
>c : E | F
>c : E | F

var r4 = a ** c;
>r4 : 数字
>类型别名 :=> 数字
>a ** c : 数字
>类型别名 :=> 数字
>a : 任意
>类型别名 :=> 任意
>c : E | F

var r5 = b ** c;
>r5 : 数字
>类型别名 :=> 数字
>b ** c : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>c : E | F

var r6 = E.a ** a;
>r6 : 数字
>类型别名 :=> 数字
>E.a ** a : 数字
>类型别名 :=> 数字
>E.a : E.a
>E : 类为 E
>a : E.a
>a : 任意
>类型别名 :=> 任意

var r7 = E.a ** b;
>r7 : 数字
>类型别名 :=> 数字
>E.a ** b : 数字
>类型别名 :=> 数字
>E.a : E.a
>E : 类为 E
>a : E.a
>b : 数字
>类型别名 :=> 数字

var r8 = E.a ** E.b;
>r8 : 数字
>类型别名 :=> 数字
>E.a ** E.b : 数字
>类型别名 :=> 数字
>E.a : E.a
>E : 类为 E
>a : E.a
>E.b : E.b
>E : 类为 E
>b : E.b

var r9 = E.a ** 1;
>r9 : 数字
>类型别名 :=> 数字
>E.a ** 1 : 数字
>类型别名 :=> 数字
>E.a : E.a
>E : 类为 E
>a : E.a
>1 : 1

var r10 = a ** E.b;
>r10 : 数字
>类型别名 :=> 数字
>a ** E.b : 数字
>类型别名 :=> 数字
>a : 任意
>类型别名 :=> 任意
>E.b : E.b
>E : 类为 E
>b : E.b

var r11 = b ** E.b;
>r11 : 数字
>类型别名 :=> 数字
>b ** E.b : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>E.b : E.b
>E : 类为 E
>b : E.b

var r12 = 1 ** E.b;
>r12 : 数字
>类型别名 :=> 数字
>1 ** E.b : 数字
>类型别名 :=> 数字
>1 : 1
>E.b : E.b
>E : 类为 E
>b : E.b

