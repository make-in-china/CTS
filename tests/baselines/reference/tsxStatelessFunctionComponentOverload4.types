=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react')
>React : 类为 React

declare function OneThing(): JSX.Element;
>OneThing : { (): JSX.Element; (l: { yy: 数字; yy1: 文字; }): JSX.Element; }
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

declare function OneThing(l: {yy: number, yy1: string}): JSX.Element;
>OneThing : { (): JSX.Element; (l: { yy: 数字; yy1: 文字; }): JSX.Element; }
>l : { yy: 数字; yy1: 文字; }
>yy : 数字
>类型别名 :=> 数字
>yy1 : 文字
>类型别名 :=> 文字
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

let obj = {
>obj : { yy: 数字; yy1: 文字; }
>{    yy: 10,    yy1: "hello"} : { yy: 数字; yy1: 文字; }

    yy: 10,
>yy : 数字
>类型别名 :=> 数字
>10 : 10

    yy1: "hello"
>yy1 : 文字
>类型别名 :=> 文字
>"hello" : "hello"
}
let obj2: any;
>obj2 : 任意
>类型别名 :=> 任意

// Error
const c0 = <OneThing extraProp />;  // extra property;
>c0 : JSX.Element
><OneThing extraProp /> : JSX.Element
>OneThing : { (): JSX.Element; (l: { yy: 数字; yy1: 文字; }): JSX.Element; }
>extraProp : 为真
>类型别名 :=> 为真

const c1 = <OneThing yy={10}/>;  // missing property;
>c1 : JSX.Element
><OneThing yy={10}/> : JSX.Element
>OneThing : { (): JSX.Element; (l: { yy: 数字; yy1: 文字; }): JSX.Element; }
>yy : 数字
>类型别名 :=> 数字
>10 : 10

const c2 = <OneThing {...obj} yy1 />; // type incompatible;
>c2 : JSX.Element
><OneThing {...obj} yy1 /> : JSX.Element
>OneThing : { (): JSX.Element; (l: { yy: 数字; yy1: 文字; }): JSX.Element; }
>obj : { yy: 数字; yy1: 文字; }
>yy1 : 为真
>类型别名 :=> 为真

const c3 = <OneThing {...obj} {...{extra: "extra attr"}} />;  //  This is OK becuase all attribute are spread
>c3 : JSX.Element
><OneThing {...obj} {...{extra: "extra attr"}} /> : JSX.Element
>OneThing : { (): JSX.Element; (l: { yy: 数字; yy1: 文字; }): JSX.Element; }
>obj : { yy: 数字; yy1: 文字; }
>{extra: "extra attr"} : { extra: 文字; }
>extra : 文字
>类型别名 :=> 文字
>"extra attr" : "extra attr"

const c4 = <OneThing {...obj} y1={10000} />;  // extra property;
>c4 : JSX.Element
><OneThing {...obj} y1={10000} /> : JSX.Element
>OneThing : { (): JSX.Element; (l: { yy: 数字; yy1: 文字; }): JSX.Element; }
>obj : { yy: 数字; yy1: 文字; }
>y1 : 数字
>类型别名 :=> 数字
>10000 : 10000

const c5 = <OneThing {...obj} {...{yy: true}} />;  // type incompatible;
>c5 : JSX.Element
><OneThing {...obj} {...{yy: true}} /> : JSX.Element
>OneThing : { (): JSX.Element; (l: { yy: 数字; yy1: 文字; }): JSX.Element; }
>obj : { yy: 数字; yy1: 文字; }
>{yy: true} : { yy: 真假; }
>yy : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

const c6 = <OneThing {...obj2} {...{extra: "extra attr"}} />;  // Should error as there is extra attribute that doesn't match any. Current it is not
>c6 : JSX.Element
><OneThing {...obj2} {...{extra: "extra attr"}} /> : JSX.Element
>OneThing : { (): JSX.Element; (l: { yy: 数字; yy1: 文字; }): JSX.Element; }
>obj2 : 任意
>类型别名 :=> 任意
>{extra: "extra attr"} : { extra: 文字; }
>extra : 文字
>类型别名 :=> 文字
>"extra attr" : "extra attr"

const c7 = <OneThing {...obj2} yy />;  // Should error as there is extra attribute that doesn't match any. Current it is not
>c7 : JSX.Element
><OneThing {...obj2} yy /> : JSX.Element
>OneThing : { (): JSX.Element; (l: { yy: 数字; yy1: 文字; }): JSX.Element; }
>obj2 : 任意
>类型别名 :=> 任意
>yy : 为真
>类型别名 :=> 为真

declare function TestingOneThing(j: {"extra-data": string}): JSX.Element;
>TestingOneThing : { (j: { "extra-data": 文字; }): JSX.Element; (n: { yy: 文字; direction?: 数字; }): JSX.Element; }
>j : { "extra-data": 文字; }
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

declare function TestingOneThing(n: {yy: string, direction?: number}): JSX.Element;
>TestingOneThing : { (j: { "extra-data": 文字; }): JSX.Element; (n: { yy: 文字; direction?: 数字; }): JSX.Element; }
>n : { yy: 文字; direction?: 数字; }
>yy : 文字
>类型别名 :=> 文字
>direction : 数字
>类型别名 :=> 数字
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

// Error
const d1 = <TestingOneThing extra-data />
>d1 : JSX.Element
><TestingOneThing extra-data /> : JSX.Element
>TestingOneThing : { (j: { "extra-data": 文字; }): JSX.Element; (n: { yy: 文字; direction?: 数字; }): JSX.Element; }
>extra-data : 为真
>类型别名 :=> 为真

const d2 = <TestingOneThing yy="hello" direction="left" />
>d2 : JSX.Element
><TestingOneThing yy="hello" direction="left" /> : JSX.Element
>TestingOneThing : { (j: { "extra-data": 文字; }): JSX.Element; (n: { yy: 文字; direction?: 数字; }): JSX.Element; }
>yy : 文字
>类型别名 :=> 文字
>direction : 文字
>类型别名 :=> 文字

declare function TestingOptional(a: {y1?: string, y2?: number}): JSX.Element;
>TestingOptional : { (a: { y1?: 文字; y2?: 数字; }): JSX.Element; (a: { y1?: 文字; y2?: 数字; children: JSX.Element; }): JSX.Element; (a: { y1: 真假; y2?: 数字; y3: 真假; }): JSX.Element; }
>a : { y1?: 文字; y2?: 数字; }
>y1 : 文字
>类型别名 :=> 文字
>y2 : 数字
>类型别名 :=> 数字
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

declare function TestingOptional(a: {y1?: string, y2?: number, children: JSX.Element}): JSX.Element;
>TestingOptional : { (a: { y1?: 文字; y2?: 数字; }): JSX.Element; (a: { y1?: 文字; y2?: 数字; children: JSX.Element; }): JSX.Element; (a: { y1: 真假; y2?: 数字; y3: 真假; }): JSX.Element; }
>a : { y1?: 文字; y2?: 数字; children: JSX.Element; }
>y1 : 文字
>类型别名 :=> 文字
>y2 : 数字
>类型别名 :=> 数字
>children : JSX.Element
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

declare function TestingOptional(a: {y1: boolean, y2?: number, y3: boolean}): JSX.Element;
>TestingOptional : { (a: { y1?: 文字; y2?: 数字; }): JSX.Element; (a: { y1?: 文字; y2?: 数字; children: JSX.Element; }): JSX.Element; (a: { y1: 真假; y2?: 数字; y3: 真假; }): JSX.Element; }
>a : { y1: 真假; y2?: 数字; y3: 真假; }
>y1 : 真假
>类型别名 :=> 真假
>y2 : 数字
>类型别名 :=> 数字
>y3 : 真假
>类型别名 :=> 真假
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

// Error
const e1 = <TestingOptional y1 y3="hello"/>
>e1 : JSX.Element
><TestingOptional y1 y3="hello"/> : JSX.Element
>TestingOptional : { (a: { y1?: 文字; y2?: 数字; }): JSX.Element; (a: { y1?: 文字; y2?: 数字; children: JSX.Element; }): JSX.Element; (a: { y1: 真假; y2?: 数字; y3: 真假; }): JSX.Element; }
>y1 : 为真
>类型别名 :=> 为真
>y3 : 文字
>类型别名 :=> 文字

const e2 = <TestingOptional y1="hello" y2={1000} y3 />
>e2 : JSX.Element
><TestingOptional y1="hello" y2={1000} y3 /> : JSX.Element
>TestingOptional : { (a: { y1?: 文字; y2?: 数字; }): JSX.Element; (a: { y1?: 文字; y2?: 数字; children: JSX.Element; }): JSX.Element; (a: { y1: 真假; y2?: 数字; y3: 真假; }): JSX.Element; }
>y1 : 文字
>类型别名 :=> 文字
>y2 : 数字
>类型别名 :=> 数字
>1000 : 1000
>y3 : 为真
>类型别名 :=> 为真

const e3 = <TestingOptional y1="hello" y2={1000} children="hi" />
>e3 : JSX.Element
><TestingOptional y1="hello" y2={1000} children="hi" /> : JSX.Element
>TestingOptional : { (a: { y1?: 文字; y2?: 数字; }): JSX.Element; (a: { y1?: 文字; y2?: 数字; children: JSX.Element; }): JSX.Element; (a: { y1: 真假; y2?: 数字; y3: 真假; }): JSX.Element; }
>y1 : 文字
>类型别名 :=> 文字
>y2 : 数字
>类型别名 :=> 数字
>1000 : 1000
>children : 文字
>类型别名 :=> 文字

const e4 = <TestingOptional y1="hello" y2={1000}>Hi</TestingOptional>
>e4 : JSX.Element
><TestingOptional y1="hello" y2={1000}>Hi</TestingOptional> : JSX.Element
>TestingOptional : { (a: { y1?: 文字; y2?: 数字; }): JSX.Element; (a: { y1?: 文字; y2?: 数字; children: JSX.Element; }): JSX.Element; (a: { y1: 真假; y2?: 数字; y3: 真假; }): JSX.Element; }
>y1 : 文字
>类型别名 :=> 文字
>y2 : 数字
>类型别名 :=> 数字
>1000 : 1000
>TestingOptional : { (a: { y1?: 文字; y2?: 数字; }): JSX.Element; (a: { y1?: 文字; y2?: 数字; children: JSX.Element; }): JSX.Element; (a: { y1: 真假; y2?: 数字; y3: 真假; }): JSX.Element; }

