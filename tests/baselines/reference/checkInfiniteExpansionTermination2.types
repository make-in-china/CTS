=== tests/cases/compiler/checkInfiniteExpansionTermination2.ts ===
// Regression test for #1002
// Before fix this code would cause infinite loop

interface IObservable<T> {
>IObservable : IObservable<T>
>T : T

    n: IObservable<T[]>;
>n : IObservable<T[]>
>IObservable : IObservable<T>
>T : T
}
interface ISubject<T> extends IObservable<T> { }
>ISubject : ISubject<T>
>T : T
>IObservable : IObservable<T>
>T : T

declare function combineLatest<TOther>(x: IObservable<TOther>[]): void;
>combineLatest : { <TOther>(x: IObservable<TOther>[]): 无值; (): 无值; }
>TOther : TOther
>x : IObservable<TOther>[]
>IObservable : IObservable<T>
>TOther : TOther

declare function combineLatest(): void;
>combineLatest : { <TOther>(x: IObservable<TOther>[]): 无值; (): 无值; }

function fn<T>() {
>fn : <T>() => 无值
>T : T

    var values: ISubject<any>[] = [];
>values : ISubject<任意>[]
>ISubject : ISubject<T>
>[] : 未定[]

    // Hang when using <T>, but not <any>
    combineLatest<T>(values);
>combineLatest<T>(values) : 无值
>类型别名 :=> 无值
>combineLatest : { <TOther>(x: IObservable<TOther>[]): 无值; (): 无值; }
>T : T
>values : ISubject<任意>[]
}

