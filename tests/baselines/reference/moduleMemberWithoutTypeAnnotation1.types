=== tests/cases/compiler/moduleMemberWithoutTypeAnnotation1.ts ===
module TypeScript.Parser {
>TypeScript : 类为 TypeScript
>Parser : 类为 Parser

    class SyntaxCursor {
>SyntaxCursor : SyntaxCursor

        public currentNode(): SyntaxNode {
>currentNode : () => SyntaxNode
>SyntaxNode : SyntaxNode

            return null;
>null : 空值
>类型别名 :=> 空值
        }
    }
}

module TypeScript {
>TypeScript : 类为 TypeScript

    export interface ISyntaxElement { };
>ISyntaxElement : ISyntaxElement

    export interface ISyntaxToken { };
>ISyntaxToken : ISyntaxToken

    export class PositionedElement {
>PositionedElement : PositionedElement

        public childIndex(child: ISyntaxElement) {
>childIndex : (child: ISyntaxElement) => 无值
>child : ISyntaxElement
>ISyntaxElement : ISyntaxElement

            return Syntax.childIndex();
>Syntax.childIndex() : 无值
>类型别名 :=> 无值
>Syntax.childIndex : () => 无值
>Syntax : 类为 Syntax
>childIndex : () => 无值
        }
    }

    export class PositionedToken {
>PositionedToken : PositionedToken

        constructor(parent: PositionedElement, token: ISyntaxToken, fullStart: number) {
>parent : PositionedElement
>PositionedElement : PositionedElement
>token : ISyntaxToken
>ISyntaxToken : ISyntaxToken
>fullStart : 数字
>类型别名 :=> 数字
        }
    }
}

module TypeScript {
>TypeScript : 类为 TypeScript

    export class SyntaxNode {
>SyntaxNode : SyntaxNode

        public findToken(position: number, includeSkippedTokens: boolean = false): PositionedToken {
>findToken : (position: 数字, includeSkippedTokens?: 真假) => PositionedToken
>position : 数字
>类型别名 :=> 数字
>includeSkippedTokens : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>PositionedToken : PositionedToken

            var positionedToken = this.findTokenInternal(null, position, 0);
>positionedToken : 任意
>类型别名 :=> 任意
>this.findTokenInternal(null, position, 0) : 任意
>类型别名 :=> 任意
>this.findTokenInternal : (x: 任意, y: 任意, z: 任意) => 任意
>this : 本体
>findTokenInternal : (x: 任意, y: 任意, z: 任意) => 任意
>null : 空值
>类型别名 :=> 空值
>position : 数字
>类型别名 :=> 数字
>0 : 0

            return null;
>null : 空值
>类型别名 :=> 空值
        }
        findTokenInternal(x, y, z) {
>findTokenInternal : (x: 任意, y: 任意, z: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

            return null;
>null : 空值
>类型别名 :=> 空值
        }
    }
}

module TypeScript.Syntax {
>TypeScript : 类为 TypeScript
>Syntax : 类为 Syntax

    export function childIndex() { }
>childIndex : () => 无值

    export class VariableWidthTokenWithTrailingTrivia implements ISyntaxToken {
>VariableWidthTokenWithTrailingTrivia : VariableWidthTokenWithTrailingTrivia
>ISyntaxToken : ISyntaxToken

        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number) {
>findTokenInternal : (parent: PositionedElement, position: 数字, fullStart: 数字) => PositionedToken
>parent : PositionedElement
>PositionedElement : PositionedElement
>position : 数字
>类型别名 :=> 数字
>fullStart : 数字
>类型别名 :=> 数字

            return new PositionedToken(parent, this, fullStart);
>new PositionedToken(parent, this, fullStart) : PositionedToken
>PositionedToken : 类为 PositionedToken
>parent : PositionedElement
>this : 本体
>fullStart : 数字
>类型别名 :=> 数字
        }
    }
}

