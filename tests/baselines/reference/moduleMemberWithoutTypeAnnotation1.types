=== tests/cases/compiler/moduleMemberWithoutTypeAnnotation1.ts ===
module TypeScript.Parser {
>TypeScript : typeof TypeScript
>Parser : typeof Parser

    class SyntaxCursor {
>SyntaxCursor : SyntaxCursor

        public currentNode(): SyntaxNode {
>currentNode : () => SyntaxNode
>SyntaxNode : SyntaxNode

            return null;
>null : null
>类型别名 :=> 空值
        }
    }
}

module TypeScript {
>TypeScript : typeof TypeScript

    export interface ISyntaxElement { };
>ISyntaxElement : ISyntaxElement

    export interface ISyntaxToken { };
>ISyntaxToken : ISyntaxToken

    export class PositionedElement {
>PositionedElement : PositionedElement

        public childIndex(child: ISyntaxElement) {
>childIndex : (child: ISyntaxElement) => void
>child : ISyntaxElement
>ISyntaxElement : ISyntaxElement

            return Syntax.childIndex();
>Syntax.childIndex() : void
>类型别名 :=> 无值
>Syntax.childIndex : () => void
>Syntax : typeof Syntax
>childIndex : () => void
        }
    }

    export class PositionedToken {
>PositionedToken : PositionedToken

        constructor(parent: PositionedElement, token: ISyntaxToken, fullStart: number) {
>parent : PositionedElement
>PositionedElement : PositionedElement
>token : ISyntaxToken
>ISyntaxToken : ISyntaxToken
>fullStart : number
>类型别名 :=> 数字
        }
    }
}

module TypeScript {
>TypeScript : typeof TypeScript

    export class SyntaxNode {
>SyntaxNode : SyntaxNode

        public findToken(position: number, includeSkippedTokens: boolean = false): PositionedToken {
>findToken : (position: number, includeSkippedTokens?: boolean) => PositionedToken
>position : number
>类型别名 :=> 数字
>includeSkippedTokens : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>PositionedToken : PositionedToken

            var positionedToken = this.findTokenInternal(null, position, 0);
>positionedToken : any
>类型别名 :=> 任意
>this.findTokenInternal(null, position, 0) : any
>类型别名 :=> 任意
>this.findTokenInternal : (x: any, y: any, z: any) => any
>this : this
>findTokenInternal : (x: any, y: any, z: any) => any
>null : null
>类型别名 :=> 空值
>position : number
>类型别名 :=> 数字
>0 : 0

            return null;
>null : null
>类型别名 :=> 空值
        }
        findTokenInternal(x, y, z) {
>findTokenInternal : (x: any, y: any, z: any) => any
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

            return null;
>null : null
>类型别名 :=> 空值
        }
    }
}

module TypeScript.Syntax {
>TypeScript : typeof TypeScript
>Syntax : typeof Syntax

    export function childIndex() { }
>childIndex : () => void

    export class VariableWidthTokenWithTrailingTrivia implements ISyntaxToken {
>VariableWidthTokenWithTrailingTrivia : VariableWidthTokenWithTrailingTrivia
>ISyntaxToken : ISyntaxToken

        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number) {
>findTokenInternal : (parent: PositionedElement, position: number, fullStart: number) => PositionedToken
>parent : PositionedElement
>PositionedElement : PositionedElement
>position : number
>类型别名 :=> 数字
>fullStart : number
>类型别名 :=> 数字

            return new PositionedToken(parent, this, fullStart);
>new PositionedToken(parent, this, fullStart) : PositionedToken
>PositionedToken : typeof PositionedToken
>parent : PositionedElement
>this : this
>fullStart : number
>类型别名 :=> 数字
        }
    }
}

