=== tests/cases/conformance/types/typeRelationships/comparable/equalityWithUnionTypes01.ts ===
interface I1 {
>I1 : I1

    p1: number
>p1 : number
>类型别名 :=> 数字
}

interface I2 extends I1 {
>I2 : I2
>I1 : I1

    p2: number;
>p2 : number
>类型别名 :=> 数字
}

var x = { p1: 10, p2: 20 };
>x : { p1: number; p2: number; }
>{ p1: 10, p2: 20 } : { p1: number; p2: number; }
>p1 : number
>类型别名 :=> 数字
>10 : 10
>p2 : number
>类型别名 :=> 数字
>20 : 20

var y: number | I2 = x;
>y : number | I2
>I2 : I2
>x : { p1: number; p2: number; }

var z: I1 = x;
>z : I1
>I1 : I1
>x : { p1: number; p2: number; }

if (y === z || z === y) {
>y === z || z === y : boolean
>类型别名 :=> 真假
>y === z : boolean
>类型别名 :=> 真假
>y : I2
>z : I1
>z === y : boolean
>类型别名 :=> 真假
>z : I1
>y : I2
}
else if (y !== z || z !== y) {
>y !== z || z !== y : boolean
>类型别名 :=> 真假
>y !== z : boolean
>类型别名 :=> 真假
>y : I2
>z : I1
>z !== y : boolean
>类型别名 :=> 真假
>z : I1
>y : I2
}
else if (y == z || z == y) {
>y == z || z == y : boolean
>类型别名 :=> 真假
>y == z : boolean
>类型别名 :=> 真假
>y : I2
>z : I1
>z == y : boolean
>类型别名 :=> 真假
>z : I1
>y : I2
}
else if (y != z || z != y) {
>y != z || z != y : boolean
>类型别名 :=> 真假
>y != z : boolean
>类型别名 :=> 真假
>y : I2
>z : I1
>z != y : boolean
>类型别名 :=> 真假
>z : I1
>y : I2
}
