=== tests/cases/conformance/expressions/typeGuards/typeGuardsDefeat.ts ===
// Also note that it is possible to defeat a type guard by calling a function that changes the 
// type of the guarded variable.
function foo(x: number | string) {
>foo : (x: 文字 | 数字) => 数字
>x : 文字 | 数字

    function f() {
>f : () => 无值

        x = 10;
>x = 10 : 10
>x : 文字 | 数字
>10 : 10
    }
    if (typeof x === "string") {
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        f();
>f() : 无值
>类型别名 :=> 无值
>f : () => 无值

        return x.length; // string
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
    }
    else {
        return x++; // number
>x++ : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
    }
}
function foo2(x: number | string) {
>foo2 : (x: 文字 | 数字) => 数字
>x : 文字 | 数字

    if (typeof x === "string") {
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        return x.length; // string
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
    }
    else {
        var f = function () {
>f : () => 数字
>function () {            return x * x;        } : () => 数字

            return x * x;
>x * x : 数字
>类型别名 :=> 数字
>x : 文字 | 数字
>x : 文字 | 数字

        };
    }
    x = "hello";
>x = "hello" : "hello"
>x : 文字 | 数字
>"hello" : "hello"

    f();
>f() : 数字
>类型别名 :=> 数字
>f : () => 数字
}
function foo3(x: number | string) {
>foo3 : (x: 文字 | 数字) => 数字
>x : 文字 | 数字

    if (typeof x === "string") {
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        return x.length; // string
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
    }
    else {
        var f = () => x * x;
>f : () => 数字
>() => x * x : () => 数字
>x * x : 数字
>类型别名 :=> 数字
>x : 文字 | 数字
>x : 文字 | 数字
    }
    x = "hello";
>x = "hello" : "hello"
>x : 文字 | 数字
>"hello" : "hello"

    f();
>f() : 数字
>类型别名 :=> 数字
>f : () => 数字
}

