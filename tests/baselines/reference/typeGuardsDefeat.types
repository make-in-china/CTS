=== tests/cases/conformance/expressions/typeGuards/typeGuardsDefeat.ts ===
// Also note that it is possible to defeat a type guard by calling a function that changes the 
// type of the guarded variable.
function foo(x: number | string) {
>foo : (x: string | number) => number
>x : string | number

    function f() {
>f : () => void

        x = 10;
>x = 10 : 10
>x : string | number
>10 : 10
    }
    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        f();
>f() : void
>类型别名 :=> 无值
>f : () => void

        return x.length; // string
>x.length : number
>类型别名 :=> 数字
>x : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
    }
    else {
        return x++; // number
>x++ : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
    }
}
function foo2(x: number | string) {
>foo2 : (x: string | number) => number
>x : string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        return x.length; // string
>x.length : number
>类型别名 :=> 数字
>x : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
    }
    else {
        var f = function () {
>f : () => number
>function () {            return x * x;        } : () => number

            return x * x;
>x * x : number
>类型别名 :=> 数字
>x : string | number
>x : string | number

        };
    }
    x = "hello";
>x = "hello" : "hello"
>x : string | number
>"hello" : "hello"

    f();
>f() : number
>类型别名 :=> 数字
>f : () => number
}
function foo3(x: number | string) {
>foo3 : (x: string | number) => number
>x : string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        return x.length; // string
>x.length : number
>类型别名 :=> 数字
>x : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
    }
    else {
        var f = () => x * x;
>f : () => number
>() => x * x : () => number
>x * x : number
>类型别名 :=> 数字
>x : string | number
>x : string | number
    }
    x = "hello";
>x = "hello" : "hello"
>x : string | number
>"hello" : "hello"

    f();
>f() : number
>类型别名 :=> 数字
>f : () => number
}

