=== tests/cases/conformance/expressions/superCalls/superCalls.ts ===
class Base {
>Base : Base

    x = 43;
>x : 数字
>类型别名 :=> 数字
>43 : 43

    constructor(n: string) {
>n : 文字
>类型别名 :=> 文字

    }
}

function v(): void { }
>v : () => 无值

class Derived extends Base {
>Derived : Derived
>Base : Base

    //super call in class constructor of derived type
    constructor(public q: number) {
>q : 数字
>类型别名 :=> 数字

        super('');
>super('') : 无值
>类型别名 :=> 无值
>super : 类为 Base
>'' : ""

        //type of super call expression is void
        var p = super('');
>p : 无值
>类型别名 :=> 无值
>super('') : 无值
>类型别名 :=> 无值
>super : 类为 Base
>'' : ""

        var p = v();
>p : 无值
>类型别名 :=> 无值
>v() : 无值
>类型别名 :=> 无值
>v : () => 无值
    }
}

class OtherBase {
>OtherBase : OtherBase

}

class OtherDerived extends OtherBase {
>OtherDerived : OtherDerived
>OtherBase : OtherBase

    constructor() {
        var p = '';
>p : 文字
>类型别名 :=> 文字
>'' : ""

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 OtherBase
    }
}

