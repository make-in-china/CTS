=== tests/cases/conformance/expressions/superCalls/superCalls.ts ===
class Base {
>Base : Base

    x = 43;
>x : number
>类型别名 :=> 数字
>43 : 43

    constructor(n: string) {
>n : string
>类型别名 :=> 文字

    }
}

function v(): void { }
>v : () => void

class Derived extends Base {
>Derived : Derived
>Base : Base

    //super call in class constructor of derived type
    constructor(public q: number) {
>q : number
>类型别名 :=> 数字

        super('');
>super('') : void
>类型别名 :=> 无值
>super : typeof Base
>'' : ""

        //type of super call expression is void
        var p = super('');
>p : void
>类型别名 :=> 无值
>super('') : void
>类型别名 :=> 无值
>super : typeof Base
>'' : ""

        var p = v();
>p : void
>类型别名 :=> 无值
>v() : void
>类型别名 :=> 无值
>v : () => void
    }
}

class OtherBase {
>OtherBase : OtherBase

}

class OtherDerived extends OtherBase {
>OtherDerived : OtherDerived
>OtherBase : OtherBase

    constructor() {
        var p = '';
>p : string
>类型别名 :=> 文字
>'' : ""

        super();
>super() : void
>类型别名 :=> 无值
>super : typeof OtherBase
    }
}

