=== tests/cases/compiler/promiseChaining1.ts ===
// same example but with constraints on each type parameter
class Chain2<T extends { length: number }> {
>Chain2 : Chain2<T>
>T : T
>length : 数字
>类型别名 :=> 数字

    constructor(public value: T) { }
>value : T
>T : T

    then<S extends Function>(cb: (x: T) => S): Chain2<S> {
>then : <S 扩展 Function>(cb: (x: T) => S) => Chain2<S>
>S : S
>Function : Function
>cb : (x: T) => S
>x : T
>T : T
>S : S
>Chain2 : Chain2<T>
>S : S

        var result = cb(this.value);
>result : S
>cb(this.value) : S
>cb : (x: T) => S
>this.value : T
>this : 本体
>value : T

        // should get a fresh type parameter which each then call
        var z = this.then(x => result)/*S*/.then(x => "abc")/*Function*/.then(x => x.length)/*number*/; // Should error on "abc" because it is not a Function
>z : 任意
>类型别名 :=> 任意
>this.then(x => result)/*S*/.then(x => "abc")/*Function*/.then(x => x.length) : 任意
>类型别名 :=> 任意
>this.then(x => result)/*S*/.then(x => "abc")/*Function*/.then : 任意
>类型别名 :=> 任意
>this.then(x => result)/*S*/.then(x => "abc") : 任意
>类型别名 :=> 任意
>this.then(x => result)/*S*/.then : <S 扩展 Function>(cb: (x: S) => S) => Chain2<S>
>this.then(x => result) : Chain2<S>
>this.then : <S 扩展 Function>(cb: (x: T) => S) => Chain2<S>
>this : 本体
>then : <S 扩展 Function>(cb: (x: T) => S) => Chain2<S>
>x => result : (x: T) => S
>x : T
>result : S
>then : <S 扩展 Function>(cb: (x: S) => S) => Chain2<S>
>x => "abc" : (x: S) => 文字
>x : S
>"abc" : "abc"
>then : 任意
>类型别名 :=> 任意
>x => x.length : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x.length : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意

        return new Chain2(result);
>new Chain2(result) : Chain2<S>
>Chain2 : 类为 Chain2
>result : S
    }
}
