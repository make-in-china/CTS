=== tests/cases/compiler/file1.ts ===
import * as moduleB from "./file2"
>moduleB : 类为 moduleB

declare function use(v: any): void;
>use : (v: 任意) => 无值
>v : 任意
>类型别名 :=> 任意

use(moduleB.value);
>use(moduleB.value) : 无值
>类型别名 :=> 无值
>use : (v: 任意) => 无值
>moduleB.value : 文字
>类型别名 :=> 文字
>moduleB : 类为 moduleB
>value : 文字
>类型别名 :=> 文字

use(moduleB.moduleC);
>use(moduleB.moduleC) : 无值
>类型别名 :=> 无值
>use : (v: 任意) => 无值
>moduleB.moduleC : 文字
>类型别名 :=> 文字
>moduleB : 类为 moduleB
>moduleC : 文字
>类型别名 :=> 文字

use(moduleB.moduleCStar);
>use(moduleB.moduleCStar) : 无值
>类型别名 :=> 无值
>use : (v: 任意) => 无值
>moduleB.moduleCStar : 类为 "tests/cases/compiler/file3"
>moduleB : 类为 moduleB
>moduleCStar : 类为 "tests/cases/compiler/file3"

=== tests/cases/compiler/file2.ts ===
import * as moduleCStar from "./file3"
>moduleCStar : 类为 moduleCStar

import {value2} from "./file4"
>value2 : 文字
>类型别名 :=> 文字

import moduleC from "./file3"
>moduleC : 文字
>类型别名 :=> 文字

import {value} from "./file3"
>value : 文字
>类型别名 :=> 文字

export {
    moduleCStar,
>moduleCStar : 类为 moduleCStar

    moduleC,
>moduleC : 文字
>类型别名 :=> 文字

    value
>value : 文字
>类型别名 :=> 文字
}

=== tests/cases/compiler/file3.ts ===
export var value = "youpi";
>value : 文字
>类型别名 :=> 文字
>"youpi" : "youpi"

export default value;
>value : 文字
>类型别名 :=> 文字

=== tests/cases/compiler/file4.ts ===
export var value2 = "v";
>value2 : 文字
>类型别名 :=> 文字
>"v" : "v"

