=== tests/cases/compiler/file1.ts ===
import * as moduleB from "./file2"
>moduleB : typeof moduleB

declare function use(v: any): void;
>use : (v: any) => void
>v : any
>类型别名 :=> 任意

use(moduleB.value);
>use(moduleB.value) : void
>类型别名 :=> 无值
>use : (v: any) => void
>moduleB.value : string
>类型别名 :=> 文字
>moduleB : typeof moduleB
>value : string
>类型别名 :=> 文字

use(moduleB.moduleC);
>use(moduleB.moduleC) : void
>类型别名 :=> 无值
>use : (v: any) => void
>moduleB.moduleC : string
>类型别名 :=> 文字
>moduleB : typeof moduleB
>moduleC : string
>类型别名 :=> 文字

use(moduleB.moduleCStar);
>use(moduleB.moduleCStar) : void
>类型别名 :=> 无值
>use : (v: any) => void
>moduleB.moduleCStar : typeof "tests/cases/compiler/file3"
>moduleB : typeof moduleB
>moduleCStar : typeof "tests/cases/compiler/file3"

=== tests/cases/compiler/file2.ts ===
import * as moduleCStar from "./file3"
>moduleCStar : typeof moduleCStar

import {value2} from "./file4"
>value2 : string
>类型别名 :=> 文字

import moduleC from "./file3"
>moduleC : string
>类型别名 :=> 文字

import {value} from "./file3"
>value : string
>类型别名 :=> 文字

export {
    moduleCStar,
>moduleCStar : typeof moduleCStar

    moduleC,
>moduleC : string
>类型别名 :=> 文字

    value
>value : string
>类型别名 :=> 文字
}

=== tests/cases/compiler/file3.ts ===
export var value = "youpi";
>value : string
>类型别名 :=> 文字
>"youpi" : "youpi"

export default value;
>value : string
>类型别名 :=> 文字

=== tests/cases/compiler/file4.ts ===
export var value2 = "v";
>value2 : string
>类型别名 :=> 文字
>"v" : "v"

