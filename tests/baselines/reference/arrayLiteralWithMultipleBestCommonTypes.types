=== tests/cases/conformance/types/typeRelationships/bestCommonType/arrayLiteralWithMultipleBestCommonTypes.ts ===
// when multiple best common types exist we will choose the first candidate

var a: { x: number; y?: number };
>a : { x: 数字; y?: 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

var b: { x: number; z?: number };
>b : { x: 数字; z?: 数字; }
>x : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字

var c: { x: number; a?: number };
>c : { x: 数字; a?: 数字; }
>x : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

var as = [a, b]; // { x: number; y?: number };[]
>as : ({ x: 数字; y?: 数字; } | { x: 数字; z?: 数字; })[]
>[a, b] : ({ x: 数字; y?: 数字; } | { x: 数字; z?: 数字; })[]
>a : { x: 数字; y?: 数字; }
>b : { x: 数字; z?: 数字; }

var bs = [b, a]; // { x: number; z?: number };[]
>bs : ({ x: 数字; y?: 数字; } | { x: 数字; z?: 数字; })[]
>[b, a] : ({ x: 数字; y?: 数字; } | { x: 数字; z?: 数字; })[]
>b : { x: 数字; z?: 数字; }
>a : { x: 数字; y?: 数字; }

var cs = [a, b, c]; // { x: number; y?: number };[]
>cs : ({ x: 数字; y?: 数字; } | { x: 数字; z?: 数字; } | { x: 数字; a?: 数字; })[]
>[a, b, c] : ({ x: 数字; y?: 数字; } | { x: 数字; z?: 数字; } | { x: 数字; a?: 数字; })[]
>a : { x: 数字; y?: 数字; }
>b : { x: 数字; z?: 数字; }
>c : { x: 数字; a?: 数字; }

var ds = [(x: Object) => 1, (x: string) => 2]; // { (x:Object) => number }[]
>ds : ((x: Object) => 数字)[]
>[(x: Object) => 1, (x: string) => 2] : ((x: Object) => 数字)[]
>(x: Object) => 1 : (x: Object) => 数字
>x : Object
>Object : Object
>1 : 1
>(x: string) => 2 : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>2 : 2

var es = [(x: string) => 2, (x: Object) => 1]; // { (x:string) => number }[]
>es : ((x: 文字) => 数字)[]
>[(x: string) => 2, (x: Object) => 1] : ((x: 文字) => 数字)[]
>(x: string) => 2 : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>2 : 2
>(x: Object) => 1 : (x: Object) => 数字
>x : Object
>Object : Object
>1 : 1

var fs = [(a: { x: number; y?: number }) => 1, (b: { x: number; z?: number }) => 2]; // (a: { x: number; y?: number }) => number[]
>fs : (((a: { x: 数字; y?: 数字; }) => 数字) | ((b: { x: 数字; z?: 数字; }) => 数字))[]
>[(a: { x: number; y?: number }) => 1, (b: { x: number; z?: number }) => 2] : (((a: { x: 数字; y?: 数字; }) => 数字) | ((b: { x: 数字; z?: 数字; }) => 数字))[]
>(a: { x: number; y?: number }) => 1 : (a: { x: 数字; y?: 数字; }) => 数字
>a : { x: 数字; y?: 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1
>(b: { x: number; z?: number }) => 2 : (b: { x: 数字; z?: 数字; }) => 数字
>b : { x: 数字; z?: 数字; }
>x : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
>2 : 2

var gs = [(b: { x: number; z?: number }) => 2, (a: { x: number; y?: number }) => 1]; // (b: { x: number; z?: number }) => number[]
>gs : (((b: { x: 数字; z?: 数字; }) => 数字) | ((a: { x: 数字; y?: 数字; }) => 数字))[]
>[(b: { x: number; z?: number }) => 2, (a: { x: number; y?: number }) => 1] : (((b: { x: 数字; z?: 数字; }) => 数字) | ((a: { x: 数字; y?: 数字; }) => 数字))[]
>(b: { x: number; z?: number }) => 2 : (b: { x: 数字; z?: 数字; }) => 数字
>b : { x: 数字; z?: 数字; }
>x : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
>2 : 2
>(a: { x: number; y?: number }) => 1 : (a: { x: 数字; y?: 数字; }) => 数字
>a : { x: 数字; y?: 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

