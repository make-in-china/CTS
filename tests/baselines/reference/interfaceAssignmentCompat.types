=== tests/cases/compiler/interfaceAssignmentCompat.ts ===
module M {
>M : 类为 M

    export enum Color {
>Color : Color

        Green,
>Green : Color.Green

        Blue,
>Blue : Color.Blue

        Brown,
>Brown : Color.Brown
    }

    export interface IEye {
>IEye : IEye

        color:number;
>color : 数字
>类型别名 :=> 数字
    }

    export interface IFrenchEye {
>IFrenchEye : IFrenchEye

        coleur:number;
>coleur : 数字
>类型别名 :=> 数字
    }

    export function CompareEyes(a:IEye,b:IEye):number {
>CompareEyes : (a: IEye, b: IEye) => 数字
>a : IEye
>IEye : IEye
>b : IEye
>IEye : IEye

        return a.color-b.color;
>a.color-b.color : 数字
>类型别名 :=> 数字
>a.color : 数字
>类型别名 :=> 数字
>a : IEye
>color : 数字
>类型别名 :=> 数字
>b.color : 数字
>类型别名 :=> 数字
>b : IEye
>color : 数字
>类型别名 :=> 数字
    }

    export function CompareYeux(a:IFrenchEye,b:IFrenchEye):number {
>CompareYeux : (a: IFrenchEye, b: IFrenchEye) => 数字
>a : IFrenchEye
>IFrenchEye : IFrenchEye
>b : IFrenchEye
>IFrenchEye : IFrenchEye

        return a.coleur-b.coleur;
>a.coleur-b.coleur : 数字
>类型别名 :=> 数字
>a.coleur : 数字
>类型别名 :=> 数字
>a : IFrenchEye
>coleur : 数字
>类型别名 :=> 数字
>b.coleur : 数字
>类型别名 :=> 数字
>b : IFrenchEye
>coleur : 数字
>类型别名 :=> 数字
    }

    export function test() {
>test : () => 文字

        var x:IEye[]= [];
>x : IEye[]
>IEye : IEye
>[] : 未定[]

        var result="";
>result : 文字
>类型别名 :=> 文字
>"" : ""
    
        x[0]={ color:Color.Brown };
>x[0]={ color:Color.Brown } : { color: Color; }
>x[0] : IEye
>x : IEye[]
>0 : 0
>{ color:Color.Brown } : { color: Color; }
>color : Color
>Color.Brown : Color.Brown
>Color : 类为 Color
>Brown : Color.Brown

        x[1]={ color:Color.Blue };
>x[1]={ color:Color.Blue } : { color: Color; }
>x[1] : IEye
>x : IEye[]
>1 : 1
>{ color:Color.Blue } : { color: Color; }
>color : Color
>Color.Blue : Color.Blue
>Color : 类为 Color
>Blue : Color.Blue

        x[2]={ color:Color.Green };
>x[2]={ color:Color.Green } : { color: Color; }
>x[2] : IEye
>x : IEye[]
>2 : 2
>{ color:Color.Green } : { color: Color; }
>color : Color
>Color.Green : Color.Green
>Color : 类为 Color
>Green : Color.Green

        x=x.sort(CompareYeux); // parameter mismatch
>x=x.sort(CompareYeux) : 任意
>类型别名 :=> 任意
>x : IEye[]
>x.sort(CompareYeux) : IEye[]
>x.sort : (compareFn?: (a: IEye, b: IEye) => 数字) => IEye[]
>x : IEye[]
>sort : (compareFn?: (a: IEye, b: IEye) => 数字) => IEye[]
>CompareYeux : (a: IFrenchEye, b: IFrenchEye) => 数字

        // type of z inferred from specialized array type
        var z=x.sort(CompareEyes); // ok
>z : IEye[]
>x.sort(CompareEyes) : IEye[]
>x.sort : (compareFn?: (a: IEye, b: IEye) => 数字) => IEye[]
>x : IEye[]
>sort : (compareFn?: (a: IEye, b: IEye) => 数字) => IEye[]
>CompareEyes : (a: IEye, b: IEye) => 数字

        for (var i=0,len=z.length;i<len;i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>len : 数字
>类型别名 :=> 数字
>z.length : 数字
>类型别名 :=> 数字
>z : IEye[]
>length : 数字
>类型别名 :=> 数字
>i<len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

            result+=((Color._map[z[i].color])+"\r\n");
>result+=((Color._map[z[i].color])+"\r\n") : 文字
>类型别名 :=> 文字
>result : 文字
>类型别名 :=> 文字
>((Color._map[z[i].color])+"\r\n") : 文字
>类型别名 :=> 文字
>(Color._map[z[i].color])+"\r\n" : 文字
>类型别名 :=> 文字
>(Color._map[z[i].color]) : 任意
>类型别名 :=> 任意
>Color._map[z[i].color] : 任意
>类型别名 :=> 任意
>Color._map : 任意
>类型别名 :=> 任意
>Color : 类为 Color
>_map : 任意
>类型别名 :=> 任意
>z[i].color : 数字
>类型别名 :=> 数字
>z[i] : IEye
>z : IEye[]
>i : 数字
>类型别名 :=> 数字
>color : 数字
>类型别名 :=> 数字
>"\r\n" : "\r\n"
        }

        var eeks:IFrenchEye[] = [];
>eeks : IFrenchEye[]
>IFrenchEye : IFrenchEye
>[] : 未定[]

        for (var j=z.length=1;j>=0;j--) {
>j : 数字
>类型别名 :=> 数字
>z.length=1 : 1
>z.length : 数字
>类型别名 :=> 数字
>z : IEye[]
>length : 数字
>类型别名 :=> 数字
>1 : 1
>j>=0 : 真假
>类型别名 :=> 真假
>j : 数字
>类型别名 :=> 数字
>0 : 0
>j-- : 数字
>类型别名 :=> 数字
>j : 数字
>类型别名 :=> 数字

            eeks[j]=z[j];  // nope: element assignment
>eeks[j]=z[j] : IEye
>eeks[j] : IFrenchEye
>eeks : IFrenchEye[]
>j : 数字
>类型别名 :=> 数字
>z[j] : IEye
>z : IEye[]
>j : 数字
>类型别名 :=> 数字
        }
        eeks=z; // nope: array assignment
>eeks=z : IEye[]
>eeks : IFrenchEye[]
>z : IEye[]

        return result;
>result : 文字
>类型别名 :=> 文字
    }
}

M.test();
>M.test() : 文字
>类型别名 :=> 文字
>M.test : () => 文字
>M : 类为 M
>test : () => 文字



