=== tests/cases/compiler/inferentialTypingWithFunctionTypeSyntacticScenarios.ts ===
declare function map<T, U>(array: T, func: (x: T) => U): U;
>map : <T, U>(array: T, func: (x: T) => U) => U
>T : T
>U : U
>array : T
>T : T
>func : (x: T) => U
>x : T
>T : T
>U : U
>U : U

declare function identity<V>(y: V): V;
>identity : <V>(y: V) => V
>V : V
>y : V
>V : V
>V : V

var s: string;
>s : 文字
>类型别名 :=> 文字

// dotted name
var dottedIdentity = { x: identity };
>dottedIdentity : { x: <V>(y: V) => V; }
>{ x: identity } : { x: <V>(y: V) => V; }
>x : <V>(y: V) => V
>identity : <V>(y: V) => V

s = map("", dottedIdentity.x);
>s = map("", dottedIdentity.x) : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字
>map("", dottedIdentity.x) : 文字
>类型别名 :=> 文字
>map : <T, U>(array: T, func: (x: T) => U) => U
>"" : ""
>dottedIdentity.x : <V>(y: V) => V
>dottedIdentity : { x: <V>(y: V) => V; }
>x : <V>(y: V) => V

// index expression
s = map("", dottedIdentity['x']);
>s = map("", dottedIdentity['x']) : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字
>map("", dottedIdentity['x']) : 文字
>类型别名 :=> 文字
>map : <T, U>(array: T, func: (x: T) => U) => U
>"" : ""
>dottedIdentity['x'] : <V>(y: V) => V
>dottedIdentity : { x: <V>(y: V) => V; }
>'x' : "x"

// function call
s = map("", (() => identity)());
>s = map("", (() => identity)()) : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字
>map("", (() => identity)()) : 文字
>类型别名 :=> 文字
>map : <T, U>(array: T, func: (x: T) => U) => U
>"" : ""
>(() => identity)() : <V>(y: V) => V
>(() => identity) : () => <V>(y: V) => V
>() => identity : () => <V>(y: V) => V
>identity : <V>(y: V) => V

// construct
interface IdentityConstructor {
>IdentityConstructor : IdentityConstructor

    new (): typeof identity;
>identity : <V>(y: V) => V
}
var ic: IdentityConstructor;
>ic : IdentityConstructor
>IdentityConstructor : IdentityConstructor

s = map("", new ic());
>s = map("", new ic()) : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字
>map("", new ic()) : 文字
>类型别名 :=> 文字
>map : <T, U>(array: T, func: (x: T) => U) => U
>"" : ""
>new ic() : <V>(y: V) => V
>ic : IdentityConstructor

// assignment
var t;
>t : 任意
>类型别名 :=> 任意

s = map("", t = identity);
>s = map("", t = identity) : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字
>map("", t = identity) : 文字
>类型别名 :=> 文字
>map : <T, U>(array: T, func: (x: T) => U) => U
>"" : ""
>t = identity : <V>(y: V) => V
>t : 任意
>类型别名 :=> 任意
>identity : <V>(y: V) => V

// type assertion
s = map("", <typeof identity>identity);
>s = map("", <typeof identity>identity) : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字
>map("", <typeof identity>identity) : 文字
>类型别名 :=> 文字
>map : <T, U>(array: T, func: (x: T) => U) => U
>"" : ""
><typeof identity>identity : <V>(y: V) => V
>identity : <V>(y: V) => V
>identity : <V>(y: V) => V

// parenthesized expression
s = map("", (identity));
>s = map("", (identity)) : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字
>map("", (identity)) : 文字
>类型别名 :=> 文字
>map : <T, U>(array: T, func: (x: T) => U) => U
>"" : ""
>(identity) : <V>(y: V) => V
>identity : <V>(y: V) => V

// comma
s = map("", ("", identity));
>s = map("", ("", identity)) : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字
>map("", ("", identity)) : 文字
>类型别名 :=> 文字
>map : <T, U>(array: T, func: (x: T) => U) => U
>"" : ""
>("", identity) : <V>(y: V) => V
>"", identity : <V>(y: V) => V
>"" : ""
>identity : <V>(y: V) => V

