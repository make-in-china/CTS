=== tests/cases/conformance/functions/parameterInitializersForwardReferencing.ts ===
function left(a, b = a, c = b) {
>left : (a: 任意, b?: 任意, c?: 任意) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

    a;
>a : 任意
>类型别名 :=> 任意

    b;
>b : 任意
>类型别名 :=> 任意
}

function right(a = b, b = a) {
>right : (a?: 任意, b?: 任意) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

    a;
>a : 任意
>类型别名 :=> 任意

    b;
>b : 任意
>类型别名 :=> 任意
}

function right2(a = b, b = c, c = a) {
>right2 : (a?: 任意, b?: 任意, c?: 任意) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

    a;
>a : 任意
>类型别名 :=> 任意

    b;
>b : 任意
>类型别名 :=> 任意

    c;
>c : 任意
>类型别名 :=> 任意
}

function inside(a = b) {
>inside : (a?: 任意) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

    var b;
>b : 任意
>类型别名 :=> 任意
}

function outside() {
>outside : () => 无值

    var b;
>b : 任意
>类型别名 :=> 任意

    function inside(a = b) { // Still an error because b is declared inside the function
>inside : (a?: 任意) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

        var b;
>b : 任意
>类型别名 :=> 任意
    }
}

function defaultArgFunction(a = function () { return b; }, b = 1) { }
>defaultArgFunction : (a?: () => 数字, b?: 数字) => 无值
>a : () => 数字
>function () { return b; } : () => 数字
>b : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>1 : 1

function defaultArgArrow(a = () => () => b, b = 3) { }
>defaultArgArrow : (a?: () => () => 数字, b?: 数字) => 无值
>a : () => () => 数字
>() => () => b : () => () => 数字
>() => b : () => 数字
>b : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>3 : 3

class C {
>C : C

    constructor(a = b, b = 1) { }
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>1 : 1

    method(a = b, b = 1) { }
>method : (a?: 数字, b?: 数字) => 无值
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>1 : 1
}

// Function expressions
var x = (a = b, b = c, c = d) => { var d; };
>x : (a?: 任意, b?: 任意, c?: 任意) => 无值
>(a = b, b = c, c = d) => { var d; } : (a?: 任意, b?: 任意, c?: 任意) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意

// Should not produce errors - can reference later parameters if they occur within a function expression initializer.
function f(a, b = function () { return c; }, c = b()) {
>f : (a: 任意, b?: () => 任意, c?: 任意) => 无值
>a : 任意
>类型别名 :=> 任意
>b : () => 任意
>function () { return c; } : () => 任意
>c : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>b() : 任意
>类型别名 :=> 任意
>b : () => 任意
}
