=== tests/cases/compiler/decls.d.ts ===
declare function f0<T>(x?: T): T;
>f0 : <T>(x?: T) => T
>T : T
>x : T
>T : T
>T : T

declare function f1<T, U = number>(x?: T): [T, U];
>f1 : <T, U = 数字>(x?: T) => [T, U]
>T : T
>U : U
>x : T
>T : T
>T : T
>U : U

declare class C0<T> {
>C0 : C0<T>
>T : T

    y: T;
>y : T
>T : T

    constructor(x?: T);
>x : T
>T : T
}
declare class C1<T, U = number> {
>C1 : C1<T, U>
>T : T
>U : U

    y: [T, U];
>y : [T, U]
>T : T
>U : U

    constructor(x?: T);
>x : T
>T : T
}
=== tests/cases/compiler/main.js ===
const f0_v0 = f0();
>f0_v0 : 任意
>类型别名 :=> 任意
>f0() : 任意
>类型别名 :=> 任意
>f0 : <T>(x?: T) => T

const f0_v1 = f0(1);
>f0_v1 : 1
>f0(1) : 1
>f0 : <T>(x?: T) => T
>1 : 1

const f1_c0 = f1();
>f1_c0 : [任意, 数字]
>f1() : [任意, 数字]
>f1 : <T, U = 数字>(x?: T) => [T, U]

const f1_c1 = f1(1);
>f1_c1 : [数字, 数字]
>f1(1) : [数字, 数字]
>f1 : <T, U = 数字>(x?: T) => [T, U]
>1 : 1

const C0_v0 = new C0();
>C0_v0 : C0<任意>
>new C0() : C0<任意>
>C0 : 类为 C0

const C0_v0_y = C0_v0.y;
>C0_v0_y : 任意
>类型别名 :=> 任意
>C0_v0.y : 任意
>类型别名 :=> 任意
>C0_v0 : C0<任意>
>y : 任意
>类型别名 :=> 任意

const C0_v1 = new C0(1);
>C0_v1 : C0<数字>
>new C0(1) : C0<数字>
>C0 : 类为 C0
>1 : 1

const C0_v1_y = C0_v1.y;
>C0_v1_y : 数字
>类型别名 :=> 数字
>C0_v1.y : 数字
>类型别名 :=> 数字
>C0_v1 : C0<数字>
>y : 数字
>类型别名 :=> 数字

const C1_v0 = new C1();
>C1_v0 : C1<任意, 数字>
>new C1() : C1<任意, 数字>
>C1 : 类为 C1

const C1_v0_y = C1_v0.y;
>C1_v0_y : [任意, 数字]
>C1_v0.y : [任意, 数字]
>C1_v0 : C1<任意, 数字>
>y : [任意, 数字]

const C1_v1 = new C1(1);
>C1_v1 : C1<数字, 数字>
>new C1(1) : C1<数字, 数字>
>C1 : 类为 C1
>1 : 1

const C1_v1_y = C1_v1.y;
>C1_v1_y : [数字, 数字]
>C1_v1.y : [数字, 数字]
>C1_v1 : C1<数字, 数字>
>y : [数字, 数字]

class C0_B0 extends C0 {}
>C0_B0 : C0_B0
>C0 : C0<任意>

class C0_B1 extends C0 {
>C0_B1 : C0_B1
>C0 : C0<任意>

    constructor() {
        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 C0
    }
}
class C0_B2 extends C0 {
>C0_B2 : C0_B2
>C0 : C0<任意>

    constructor() {
        super(1);
>super(1) : 无值
>类型别名 :=> 无值
>super : 类为 C0
>1 : 1
    }
}

const C0_B0_v0 = new C0_B0();
>C0_B0_v0 : C0_B0
>new C0_B0() : C0_B0
>C0_B0 : 类为 C0_B0

const C0_B0_v0_y = C0_B0_v0.y;
>C0_B0_v0_y : 任意
>类型别名 :=> 任意
>C0_B0_v0.y : 任意
>类型别名 :=> 任意
>C0_B0_v0 : C0_B0
>y : 任意
>类型别名 :=> 任意

const C0_B0_v1 = new C0_B0(1);
>C0_B0_v1 : C0_B0
>new C0_B0(1) : C0_B0
>C0_B0 : 类为 C0_B0
>1 : 1

const C0_B0_v1_y = C0_B0_v1.y;
>C0_B0_v1_y : 任意
>类型别名 :=> 任意
>C0_B0_v1.y : 任意
>类型别名 :=> 任意
>C0_B0_v1 : C0_B0
>y : 任意
>类型别名 :=> 任意

const C0_B1_v0 = new C0_B1();
>C0_B1_v0 : C0_B1
>new C0_B1() : C0_B1
>C0_B1 : 类为 C0_B1

const C0_B1_v0_y = C0_B1_v0.y;
>C0_B1_v0_y : 任意
>类型别名 :=> 任意
>C0_B1_v0.y : 任意
>类型别名 :=> 任意
>C0_B1_v0 : C0_B1
>y : 任意
>类型别名 :=> 任意

const C0_B2_v0 = new C0_B2();
>C0_B2_v0 : C0_B2
>new C0_B2() : C0_B2
>C0_B2 : 类为 C0_B2

const C0_B2_v0_y = C0_B2_v0.y;
>C0_B2_v0_y : 任意
>类型别名 :=> 任意
>C0_B2_v0.y : 任意
>类型别名 :=> 任意
>C0_B2_v0 : C0_B2
>y : 任意
>类型别名 :=> 任意

class C1_B0 extends C1 {}
>C1_B0 : C1_B0
>C1 : C1<任意, 数字>

class C1_B1 extends C1 {
>C1_B1 : C1_B1
>C1 : C1<任意, 数字>

    constructor() {
        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 C1
    }
}
class C1_B2 extends C1 {
>C1_B2 : C1_B2
>C1 : C1<任意, 数字>

    constructor() {
        super(1);
>super(1) : 无值
>类型别名 :=> 无值
>super : 类为 C1
>1 : 1
    }
}

const C1_B0_v0 = new C1_B0();
>C1_B0_v0 : C1_B0
>new C1_B0() : C1_B0
>C1_B0 : 类为 C1_B0

const C1_B0_v0_y = C1_B0_v0.y;
>C1_B0_v0_y : [任意, 数字]
>C1_B0_v0.y : [任意, 数字]
>C1_B0_v0 : C1_B0
>y : [任意, 数字]

const C1_B0_v1 = new C1_B0(1);
>C1_B0_v1 : C1_B0
>new C1_B0(1) : C1_B0
>C1_B0 : 类为 C1_B0
>1 : 1

const C1_B0_v1_y = C1_B0_v1.y;
>C1_B0_v1_y : [任意, 数字]
>C1_B0_v1.y : [任意, 数字]
>C1_B0_v1 : C1_B0
>y : [任意, 数字]

const C1_B1_v0 = new C1_B1();
>C1_B1_v0 : C1_B1
>new C1_B1() : C1_B1
>C1_B1 : 类为 C1_B1

const C1_B1_v0_y = C1_B1_v0.y;
>C1_B1_v0_y : [任意, 数字]
>C1_B1_v0.y : [任意, 数字]
>C1_B1_v0 : C1_B1
>y : [任意, 数字]

const C1_B2_v0 = new C1_B2();
>C1_B2_v0 : C1_B2
>new C1_B2() : C1_B2
>C1_B2 : 类为 C1_B2

const C1_B2_v0_y = C1_B2_v0.y;
>C1_B2_v0_y : [任意, 数字]
>C1_B2_v0.y : [任意, 数字]
>C1_B2_v0 : C1_B2
>y : [任意, 数字]

