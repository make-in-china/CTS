=== tests/cases/compiler/reachabilityChecks6.ts ===
function f0(x) {
>f0 : (x: any) => void
>x : any
>类型别名 :=> 任意

    while (true);
>true : true
>类型别名 :=> 为真
}

function f1(x) {
>f1 : (x: any) => number
>x : any
>类型别名 :=> 任意

    if (x) {
>x : any
>类型别名 :=> 任意

        return 1
>1 : 1
    }
}

function f2(x) {
>f2 : (x: any) => number
>x : any
>类型别名 :=> 任意

    while (x) {
>x : any
>类型别名 :=> 任意

        throw new Error();
>new Error() : Error
>Error : ErrorConstructor
    }
    return 1;
>1 : 1
}

function f3(x) {
>f3 : (x: any) => void
>x : any
>类型别名 :=> 任意

    while (x) {
>x : any
>类型别名 :=> 任意

        throw new Error();
>new Error() : Error
>Error : ErrorConstructor
    }
}

function f3_1 (x) {
>f3_1 : (x: any) => void
>x : any
>类型别名 :=> 任意

    while (x) {
>x : any
>类型别名 :=> 任意
    }
    throw new Error();
>new Error() : Error
>Error : ErrorConstructor
}

function f4(x) {
>f4 : (x: any) => number
>x : any
>类型别名 :=> 任意

    try {
        if (x) {
>x : any
>类型别名 :=> 任意

            return 1;
>1 : 1
        }
    }
    catch (e) {
>e : any
>类型别名 :=> 任意
    }
}

function f5(x) {
>f5 : (x: any) => 1 | 2
>x : any
>类型别名 :=> 任意

    try {
        if (x) {
>x : any
>类型别名 :=> 任意

            return 1;
>1 : 1
        }
    }
    catch (e) {
>e : any
>类型别名 :=> 任意

        return 2;
>2 : 2
    }
}

function f6(x) {
>f6 : (x: any) => number
>x : any
>类型别名 :=> 任意

    try {
        if (x) {
>x : any
>类型别名 :=> 任意

            return 1;
>1 : 1
        }
        else 
        {
            throw new Error();
>new Error() : Error
>Error : ErrorConstructor
        }
    }
    catch (e) {
>e : any
>类型别名 :=> 任意
    }
}

function f7(x) {
>f7 : (x: any) => number
>x : any
>类型别名 :=> 任意

    try {
        if (x) {
>x : any
>类型别名 :=> 任意

            return 1;
>1 : 1
        }
        else {
            throw new Error();
>new Error() : Error
>Error : ErrorConstructor
        }
    }
    catch (e) {
>e : any
>类型别名 :=> 任意

        return 1;
>1 : 1
    }
}

function f8(x) {
>f8 : (x: any) => number
>x : any
>类型别名 :=> 任意

    try {
        if (true) {
>true : true
>类型别名 :=> 为真

            x++;
>x++ : number
>类型别名 :=> 数字
>x : any
>类型别名 :=> 任意
        }
        else {
            return 1;
>1 : 1
        }
    }
    catch (e) {
>e : any
>类型别名 :=> 任意

        return 1;
>1 : 1
    }
}

function f9(x) {
>f9 : (x: any) => number
>x : any
>类型别名 :=> 任意

    try {
        while (false) {
>false : false
>类型别名 :=> 为假

            return 1;
>1 : 1
        }
    }
    catch (e) {
>e : any
>类型别名 :=> 任意

        return 1;
>1 : 1
    }
}

function f10(x) {
>f10 : (x: any) => number
>x : any
>类型别名 :=> 任意

    try {
        do {
            x++;
>x++ : number
>类型别名 :=> 数字
>x : any
>类型别名 :=> 任意

        } while (true);
>true : true
>类型别名 :=> 为真
    }
    catch (e) {
>e : any
>类型别名 :=> 任意

        return 1;
>1 : 1
    }
}

function f11(x) {
>f11 : (x: any) => number
>x : any
>类型别名 :=> 任意

    test:
>test : any
>类型别名 :=> 任意

    try {
        do {
            do {
                break test;
>test : any
>类型别名 :=> 任意

            } while (true);
>true : true
>类型别名 :=> 为真

            x++;
>x++ : number
>类型别名 :=> 数字
>x : any
>类型别名 :=> 任意

        } while (true);
>true : true
>类型别名 :=> 为真
    }
    catch (e) {
>e : any
>类型别名 :=> 任意

        return 1;
>1 : 1
    }
}
