=== tests/cases/compiler/promiseTest.ts ===
interface Promise<T> {
>Promise : Promise<T>
>T : T

    then<A>(success?: (value: T) => Promise<A>): Promise<A>;
>then : { <TResult1 = T, TResult2 = 不及>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <A>(success?: (value: T) => Promise<A>): Promise<A>; <B>(success?: (value: T) => B): Promise<B>; }
>A : A
>success : (value: T) => Promise<A>
>value : T
>T : T
>Promise : Promise<T>
>A : A
>Promise : Promise<T>
>A : A

    then<B>(success?: (value: T) => B): Promise<B>;
>then : { <TResult1 = T, TResult2 = 不及>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <A>(success?: (value: T) => Promise<A>): Promise<A>; <B>(success?: (value: T) => B): Promise<B>; }
>B : B
>success : (value: T) => B
>value : T
>T : T
>B : B
>Promise : Promise<T>
>B : B

    data: T;
>data : T
>T : T
}

var p: Promise<number> = null;
>p : Promise<数字>
>Promise : Promise<T>
>null : 空值
>类型别名 :=> 空值

var p2 = p.then(function (x) {
>p2 : Promise<数字>
>p.then(function (x) {    return p;} ) : Promise<数字>
>p.then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <A>(success?: (value: 数字) => Promise<A>): Promise<A>; <B>(success?: (value: 数字) => B): Promise<B>; }
>p : Promise<数字>
>then : { <TResult1 = 数字, TResult2 = 不及>(onfulfilled?: (value: 数字) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <A>(success?: (value: 数字) => Promise<A>): Promise<A>; <B>(success?: (value: 数字) => B): Promise<B>; }
>function (x) {    return p;} : (x: 数字) => Promise<数字>
>x : 数字
>类型别名 :=> 数字

    return p;
>p : Promise<数字>

} );

var x = p2.data; // number
>x : 数字
>类型别名 :=> 数字
>p2.data : 数字
>类型别名 :=> 数字
>p2 : Promise<数字>
>data : 数字
>类型别名 :=> 数字


