=== tests/cases/compiler/targetTypeCastTest.ts ===
declare var Point: { new(x:number, y:number): {x: number; y: number; }; }
>Point : new (x: number, y: number) => { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

function Point(x, y) {
>Point : (x: any, y: any) => void
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    this.x = x;
>this.x = x : any
>类型别名 :=> 任意
>this.x : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

    this.y = y;   
>this.y = y : any
>类型别名 :=> 任意
>this.y : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
}

interface Adder {
>Adder : Adder

    (x: number, y: number): number;   
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
}

var add = <Adder>function(x,y) {    return x+ y;   }
>add : Adder
><Adder>function(x,y) {    return x+ y;   } : Adder
>Adder : Adder
>function(x,y) {    return x+ y;   } : (x: number, y: number) => number
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>x+ y : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字


interface Adder2 {
>Adder2 : Adder2

    (x: number, y: number): number;   
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
}

var add2: Adder2 = function(x,y) {
>add2 : Adder2
>Adder2 : Adder2
>function(x,y) {    return 0;} : (x: number, y: number) => number
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

    return 0;
>0 : 0
}

function add3(x,y) {x}
>add3 : (x: any, y: any) => void
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

