=== tests/cases/compiler/targetTypeCastTest.ts ===
declare var Point: { new(x:number, y:number): {x: number; y: number; }; }
>Point : 新建 (x: 数字, y: 数字) => { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

function Point(x, y) {
>Point : (x: 任意, y: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    this.x = x;
>this.x = x : 任意
>类型别名 :=> 任意
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    this.y = y;   
>this.y = y : 任意
>类型别名 :=> 任意
>this.y : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

interface Adder {
>Adder : Adder

    (x: number, y: number): number;   
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
}

var add = <Adder>function(x,y) {    return x+ y;   }
>add : Adder
><Adder>function(x,y) {    return x+ y;   } : Adder
>Adder : Adder
>function(x,y) {    return x+ y;   } : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>x+ y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字


interface Adder2 {
>Adder2 : Adder2

    (x: number, y: number): number;   
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
}

var add2: Adder2 = function(x,y) {
>add2 : Adder2
>Adder2 : Adder2
>function(x,y) {    return 0;} : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    return 0;
>0 : 0
}

function add3(x,y) {x}
>add3 : (x: 任意, y: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

