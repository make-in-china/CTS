=== tests/cases/conformance/types/nonPrimitive/nonPrimitiveInFunction.ts ===
function takeObject(o: object) {}
>takeObject : (o: 实例) => 无值
>o : 实例
>类型别名 :=> 实例

function returnObject(): object {
>returnObject : () => 实例

    return {};
>{} : {}
}

var nonPrimitive: object;
>nonPrimitive : 实例
>类型别名 :=> 实例

var primitive: boolean;
>primitive : 真假
>类型别名 :=> 真假

takeObject(nonPrimitive);
>takeObject(nonPrimitive) : 无值
>类型别名 :=> 无值
>takeObject : (o: 实例) => 无值
>nonPrimitive : 实例
>类型别名 :=> 实例

nonPrimitive = returnObject();
>nonPrimitive = returnObject() : 实例
>类型别名 :=> 实例
>nonPrimitive : 实例
>类型别名 :=> 实例
>returnObject() : 实例
>类型别名 :=> 实例
>returnObject : () => 实例

takeObject(primitive); // expect error
>takeObject(primitive) : 无值
>类型别名 :=> 无值
>takeObject : (o: 实例) => 无值
>primitive : 真假
>类型别名 :=> 真假

primitive = returnObject(); // expect error
>primitive = returnObject() : 实例
>类型别名 :=> 实例
>primitive : 真假
>类型别名 :=> 真假
>returnObject() : 实例
>类型别名 :=> 实例
>returnObject : () => 实例

function returnError(): object {
>returnError : () => 实例

    var ret = 123;
>ret : 数字
>类型别名 :=> 数字
>123 : 123

    return ret; // expect error
>ret : 数字
>类型别名 :=> 数字
}

