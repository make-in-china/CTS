=== tests/cases/conformance/expressions/arrayLiterals/arrayLiterals3.ts ===
// Each element expression in a non-empty array literal is processed as follows:
//    - If the array literal contains no spread elements, and if the array literal is contextually typed (section 4.19)
//      by a type T and T has a property with the numeric name N, where N is the index of the element expression in the array literal,
//      the element expression is contextually typed by the type of that property.

// The resulting type an array literal expression is determined as follows:
//     - If the array literal contains no spread elements and is contextually typed by a tuple-like type,
//       the resulting type is a tuple type constructed from the types of the element expressions.

var a0: [any, any, any] = [];                             // Error
>a0 : [任意, 任意, 任意]
>[] : 未定[]

var a1: [boolean, string, number] = ["string", 1, true];  // Error
>a1 : [真假, 文字, 数字]
>["string", 1, true] : ["string", 数字, 真假]
>"string" : "string"
>1 : 1
>true : 为真
>类型别名 :=> 为真

// The resulting type an array literal expression is determined as follows:
//     - If the array literal contains no spread elements and is an array assignment pattern in a destructuring assignment (section 4.17.1),
//       the resulting type is a tuple type constructed from the types of the element expressions.

var [b1, b2]: [number, number] = [1, 2, "string", true];
>b1 : 数字
>类型别名 :=> 数字
>b2 : 数字
>类型别名 :=> 数字
>[1, 2, "string", true] : [数字, 数字, 文字, 真假]
>1 : 1
>2 : 2
>"string" : "string"
>true : 为真
>类型别名 :=> 为真

// The resulting type an array literal expression is determined as follows:
//      - the resulting type is an array type with an element type that is the union of the types of the
//        non - spread element expressions and the numeric index signature types of the spread element expressions
var temp = ["s", "t", "r"];
>temp : 文字[]
>["s", "t", "r"] : 文字[]
>"s" : "s"
>"t" : "t"
>"r" : "r"

var temp1 = [1, 2, 3];
>temp1 : 数字[]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

var temp2: [number[], string[]] = [[1, 2, 3], ["hello", "string"]];
>temp2 : [数字[], 文字[]]
>[[1, 2, 3], ["hello", "string"]] : [数字[], 文字[]]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>["hello", "string"] : 文字[]
>"hello" : "hello"
>"string" : "string"

interface tup {
>tup : tup

    0: number[]|string[];
    1: number[]|string[];
}
interface myArray extends Array<Number> { }
>myArray : myArray
>Array : T[]
>Number : Number

interface myArray2 extends Array<Number|String> { }
>myArray2 : myArray2
>Array : T[]
>Number : Number
>String : String

var c0: tup = [...temp2];                         // Error
>c0 : tup
>tup : tup
>[...temp2] : (数字[] | 文字[])[]
>...temp2 : 数字[] | 文字[]
>temp2 : [数字[], 文字[]]

var c1: [number, number, number] = [...temp1];    // Error cannot assign number[] to [number, number, number]
>c1 : [数字, 数字, 数字]
>[...temp1] : 数字[]
>...temp1 : 数字
>类型别名 :=> 数字
>temp1 : 数字[]

var c2: myArray = [...temp1, ...temp];            // Error cannot assign (number|string)[] to number[]
>c2 : myArray
>myArray : myArray
>[...temp1, ...temp] : (文字 | 数字)[]
>...temp1 : 数字
>类型别名 :=> 数字
>temp1 : 数字[]
>...temp : 文字
>类型别名 :=> 文字
>temp : 文字[]

