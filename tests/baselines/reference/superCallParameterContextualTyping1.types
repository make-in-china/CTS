=== tests/cases/conformance/expressions/contextualTyping/superCallParameterContextualTyping1.ts ===
class A<T1, T2> {
>A : A<T1, T2>
>T1 : T1
>T2 : T2

    constructor(private map: (value: T1) => T2) {
>map : (value: T1) => T2
>value : T1
>T1 : T1
>T2 : T2

    }
}

class B extends A<number, string> {
>B : B
>A : A<数字, 文字>

    // Ensure 'value' is of type 'number (and not '{}') by using its 'toExponential()' method.
    constructor() { super(value => String(value.toExponential())); }
>super(value => String(value.toExponential())) : 无值
>类型别名 :=> 无值
>super : 类为 A
>value => String(value.toExponential()) : (value: 数字) => 文字
>value : 数字
>类型别名 :=> 数字
>String(value.toExponential()) : 文字
>类型别名 :=> 文字
>String : StringConstructor
>value.toExponential() : 文字
>类型别名 :=> 文字
>value.toExponential : (fractionDigits?: 数字) => 文字
>value : 数字
>类型别名 :=> 数字
>toExponential : (fractionDigits?: 数字) => 文字
}

