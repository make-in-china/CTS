=== tests/cases/compiler/anyInferenceAnonymousFunctions.ts ===
var paired: any[];
>paired : 任意[]

paired.reduce(function (a1, a2) {
>paired.reduce(function (a1, a2) {    return a1.concat({});} , []) : 任意
>类型别名 :=> 任意
>paired.reduce : { (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意): 任意; (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意, initialValue: 任意): 任意; <U>(callbackfn: (previousValue: U, currentValue: 任意, currentIndex: 数字, array: 任意[]) => U, initialValue: U): U; }
>paired : 任意[]
>reduce : { (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意): 任意; (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意, initialValue: 任意): 任意; <U>(callbackfn: (previousValue: U, currentValue: 任意, currentIndex: 数字, array: 任意[]) => U, initialValue: U): U; }
>function (a1, a2) {    return a1.concat({});} : (a1: 任意, a2: 任意) => 任意
>a1 : 任意
>类型别名 :=> 任意
>a2 : 任意
>类型别名 :=> 任意

    return a1.concat({});
>a1.concat({}) : 任意
>类型别名 :=> 任意
>a1.concat : 任意
>类型别名 :=> 任意
>a1 : 任意
>类型别名 :=> 任意
>concat : 任意
>类型别名 :=> 任意
>{} : {}

} , []);
>[] : 未定[]

paired.reduce((b1, b2) => {
>paired.reduce((b1, b2) => {    return b1.concat({});} , []) : 任意
>类型别名 :=> 任意
>paired.reduce : { (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意): 任意; (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意, initialValue: 任意): 任意; <U>(callbackfn: (previousValue: U, currentValue: 任意, currentIndex: 数字, array: 任意[]) => U, initialValue: U): U; }
>paired : 任意[]
>reduce : { (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意): 任意; (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意, initialValue: 任意): 任意; <U>(callbackfn: (previousValue: U, currentValue: 任意, currentIndex: 数字, array: 任意[]) => U, initialValue: U): U; }
>(b1, b2) => {    return b1.concat({});} : (b1: 任意, b2: 任意) => 任意
>b1 : 任意
>类型别名 :=> 任意
>b2 : 任意
>类型别名 :=> 任意

    return b1.concat({});
>b1.concat({}) : 任意
>类型别名 :=> 任意
>b1.concat : 任意
>类型别名 :=> 任意
>b1 : 任意
>类型别名 :=> 任意
>concat : 任意
>类型别名 :=> 任意
>{} : {}

} , []);
>[] : 未定[]

paired.reduce((b3, b4) => b3.concat({}), []);
>paired.reduce((b3, b4) => b3.concat({}), []) : 任意
>类型别名 :=> 任意
>paired.reduce : { (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意): 任意; (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意, initialValue: 任意): 任意; <U>(callbackfn: (previousValue: U, currentValue: 任意, currentIndex: 数字, array: 任意[]) => U, initialValue: U): U; }
>paired : 任意[]
>reduce : { (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意): 任意; (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意, initialValue: 任意): 任意; <U>(callbackfn: (previousValue: U, currentValue: 任意, currentIndex: 数字, array: 任意[]) => U, initialValue: U): U; }
>(b3, b4) => b3.concat({}) : (b3: 任意, b4: 任意) => 任意
>b3 : 任意
>类型别名 :=> 任意
>b4 : 任意
>类型别名 :=> 任意
>b3.concat({}) : 任意
>类型别名 :=> 任意
>b3.concat : 任意
>类型别名 :=> 任意
>b3 : 任意
>类型别名 :=> 任意
>concat : 任意
>类型别名 :=> 任意
>{} : {}
>[] : 未定[]

paired.map((c1) => c1.count);
>paired.map((c1) => c1.count) : 任意[]
>paired.map : <U>(callbackfn: (value: 任意, index: 数字, array: 任意[]) => U, thisArg?: 任意) => U[]
>paired : 任意[]
>map : <U>(callbackfn: (value: 任意, index: 数字, array: 任意[]) => U, thisArg?: 任意) => U[]
>(c1) => c1.count : (c1: 任意) => 任意
>c1 : 任意
>类型别名 :=> 任意
>c1.count : 任意
>类型别名 :=> 任意
>c1 : 任意
>类型别名 :=> 任意
>count : 任意
>类型别名 :=> 任意

paired.map(function (c2) { return c2.count; });
>paired.map(function (c2) { return c2.count; }) : 任意[]
>paired.map : <U>(callbackfn: (value: 任意, index: 数字, array: 任意[]) => U, thisArg?: 任意) => U[]
>paired : 任意[]
>map : <U>(callbackfn: (value: 任意, index: 数字, array: 任意[]) => U, thisArg?: 任意) => U[]
>function (c2) { return c2.count; } : (c2: 任意) => 任意
>c2 : 任意
>类型别名 :=> 任意
>c2.count : 任意
>类型别名 :=> 任意
>c2 : 任意
>类型别名 :=> 任意
>count : 任意
>类型别名 :=> 任意

