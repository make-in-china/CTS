=== tests/cases/compiler/complexClassRelationships.ts ===
// There should be no errors in this file
class Derived extends Base {
>Derived : Derived
>Base : Base

    public static createEmpty(): Derived {
>createEmpty : () => Derived
>Derived : Derived

        var item = new Derived();
>item : Derived
>new Derived() : Derived
>Derived : 类为 Derived

        return item;
>item : Derived
    }
}
class BaseCollection<T extends Base> {
>BaseCollection : BaseCollection<T>
>T : T
>Base : Base

    constructor(f: () => T) {
>f : () => T
>T : T

        (item: Thing) => { return [item.Components]; };
>(item: Thing) => { return [item.Components]; } : (item: Thing) => ComponentCollection<任意>[]
>item : Thing
>Thing : Thing
>[item.Components] : ComponentCollection<任意>[]
>item.Components : ComponentCollection<任意>
>item : Thing
>Components : ComponentCollection<任意>
    }
}
class Base {
>Base : Base

    ownerCollection: BaseCollection<Base>;
>ownerCollection : BaseCollection<Base>
>BaseCollection : BaseCollection<T>
>Base : Base
}

class Thing {
>Thing : Thing

    public get Components(): ComponentCollection<any> { return null }
>Components : ComponentCollection<任意>
>ComponentCollection : ComponentCollection<T>
>null : 空值
>类型别名 :=> 空值
}

class ComponentCollection<T> {
>ComponentCollection : ComponentCollection<T>
>T : T

    private static sortComponents(p: Foo) {
>sortComponents : (p: Foo) => GenericType<文字>
>p : Foo
>Foo : Foo

        return p.prop1;
>p.prop1 : GenericType<文字>
>p : Foo
>prop1 : GenericType<文字>
    }
}

class Foo {
>Foo : Foo

    public get prop1() {
>prop1 : GenericType<文字>

        return new GenericType<string>(this);
>new GenericType<string>(this) : GenericType<文字>
>GenericType : 类为 GenericType
>this : 本体
    }
    public populate() {
>populate : () => 无值

        this.prop2;
>this.prop2 : BaseCollection<Derived>
>this : 本体
>prop2 : BaseCollection<Derived>
    }
    public get prop2(): BaseCollection<Derived> {
>prop2 : BaseCollection<Derived>
>BaseCollection : BaseCollection<T>
>Derived : Derived

        return new BaseCollection<Derived>(Derived.createEmpty);
>new BaseCollection<Derived>(Derived.createEmpty) : BaseCollection<Derived>
>BaseCollection : 类为 BaseCollection
>Derived : Derived
>Derived.createEmpty : () => Derived
>Derived : 类为 Derived
>createEmpty : () => Derived
    }
}

class GenericType<T> {
>GenericType : GenericType<T>
>T : T

    constructor(parent: FooBase) { }
>parent : FooBase
>FooBase : FooBase
}

class FooBase {
>FooBase : FooBase

    public populate() {
>populate : () => 无值

    }
}
