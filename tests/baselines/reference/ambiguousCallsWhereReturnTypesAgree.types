=== tests/cases/compiler/ambiguousCallsWhereReturnTypesAgree.ts ===
class TestClass {
>TestClass : TestClass

    public bar(x: string): void;
>bar : { (x: 文字): 无值; (x: 文字[]): 无值; }
>x : 文字
>类型别名 :=> 文字

    public bar(x: string[]): void;
>bar : { (x: 文字): 无值; (x: 文字[]): 无值; }
>x : 文字[]

    public bar(x: any): void {
>bar : { (x: 文字): 无值; (x: 文字[]): 无值; }
>x : 任意
>类型别名 :=> 任意
        
    }
 
    public foo(x: string): void;
>foo : { (x: 文字): 无值; (x: 文字[]): 无值; }
>x : 文字
>类型别名 :=> 文字

    public foo(x: string[]): void;
>foo : { (x: 文字): 无值; (x: 文字[]): 无值; }
>x : 文字[]

    public foo(x: any): void {
>foo : { (x: 文字): 无值; (x: 文字[]): 无值; }
>x : 任意
>类型别名 :=> 任意

        this.bar(x); // should not error
>this.bar(x) : 无值
>类型别名 :=> 无值
>this.bar : { (x: 文字): 无值; (x: 文字[]): 无值; }
>this : 本体
>bar : { (x: 文字): 无值; (x: 文字[]): 无值; }
>x : 任意
>类型别名 :=> 任意
    }
}

class TestClass2 {
>TestClass2 : TestClass2

    public bar(x: string): number;
>bar : { (x: 文字): 数字; (x: 文字[]): 数字; }
>x : 文字
>类型别名 :=> 文字

    public bar(x: string[]): number;
>bar : { (x: 文字): 数字; (x: 文字[]): 数字; }
>x : 文字[]

    public bar(x: any): number {
>bar : { (x: 文字): 数字; (x: 文字[]): 数字; }
>x : 任意
>类型别名 :=> 任意

        return 0;
>0 : 0
    }
 
    public foo(x: string): number;
>foo : { (x: 文字): 数字; (x: 文字[]): 数字; }
>x : 文字
>类型别名 :=> 文字

    public foo(x: string[]): number;
>foo : { (x: 文字): 数字; (x: 文字[]): 数字; }
>x : 文字[]

    public foo(x: any): number {
>foo : { (x: 文字): 数字; (x: 文字[]): 数字; }
>x : 任意
>类型别名 :=> 任意

        return this.bar(x); // should not error
>this.bar(x) : 数字
>类型别名 :=> 数字
>this.bar : { (x: 文字): 数字; (x: 文字[]): 数字; }
>this : 本体
>bar : { (x: 文字): 数字; (x: 文字[]): 数字; }
>x : 任意
>类型别名 :=> 任意
    }
}

