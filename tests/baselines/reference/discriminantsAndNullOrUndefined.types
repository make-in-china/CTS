=== tests/cases/compiler/discriminantsAndNullOrUndefined.ts ===
// Repro from #10228

interface A { kind: 'A'; }
>A : A
>kind : "A"

interface B { kind: 'B'; }
>B : B
>kind : "B"

type C = A | B | undefined;
>C : C
>A : A
>B : B

function never(_: never): never {
>never : (_: 不及) => 不及
>_ : 不及
>类型别名 :=> 不及

    throw new Error();
>new Error() : Error
>Error : ErrorConstructor
}

function useA(_: A): void { }
>useA : (_: A) => 无值
>_ : A
>A : A

function useB(_: B): void { }
>useB : (_: B) => 无值
>_ : B
>B : B

declare var c: C;
>c : C
>C : C

if (c !== undefined) {
>c !== undefined : 真假
>类型别名 :=> 真假
>c : C
>undefined : 未定
>类型别名 :=> 未定

    switch (c.kind) {
>c.kind : "A" | "B"
>c : A | B
>kind : "A" | "B"

        case 'A': useA(c); break;
>'A' : "A"
>useA(c) : 无值
>类型别名 :=> 无值
>useA : (_: A) => 无值
>c : A

        case 'B': useB(c); break;
>'B' : "B"
>useB(c) : 无值
>类型别名 :=> 无值
>useB : (_: B) => 无值
>c : B

        default: never(c);
>never(c) : 不及
>类型别名 :=> 不及
>never : (_: 不及) => 不及
>c : 不及
>类型别名 :=> 不及
    }
}
