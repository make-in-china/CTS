=== tests/cases/conformance/es6/arrowFunction/emitArrowFunctionES6.ts ===
var f1 = () => { }
>f1 : () => 无值
>() => { } : () => 无值

var f2 = (x: string, y: string) => { }
>f2 : (x: 文字, y: 文字) => 无值
>(x: string, y: string) => { } : (x: 文字, y: 文字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 文字
>类型别名 :=> 文字

var f3 = (x: string, y: number, ...rest) => { }
>f3 : (x: 文字, y: 数字, ...rest: 任意[]) => 无值
>(x: string, y: number, ...rest) => { } : (x: 文字, y: 数字, ...rest: 任意[]) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>rest : 任意[]

var f4 = (x: string, y: number, z=10) => { }
>f4 : (x: 文字, y: 数字, z?: 数字) => 无值
>(x: string, y: number, z=10) => { } : (x: 文字, y: 数字, z?: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
>10 : 10

function foo(func: () => boolean) { }
>foo : (func: () => 真假) => 无值
>func : () => 真假

foo(() => true);
>foo(() => true) : 无值
>类型别名 :=> 无值
>foo : (func: () => 真假) => 无值
>() => true : () => 为真
>true : 为真
>类型别名 :=> 为真

foo(() => { return false; });
>foo(() => { return false; }) : 无值
>类型别名 :=> 无值
>foo : (func: () => 真假) => 无值
>() => { return false; } : () => 为假
>false : 为假
>类型别名 :=> 为假

// Binding patterns in arrow functions
var p1 = ([a]) => { };
>p1 : ([a]: [任意]) => 无值
>([a]) => { } : ([a]: [任意]) => 无值
>a : 任意
>类型别名 :=> 任意

var p2 = ([...a]) => { };
>p2 : ([...a]: Iterable<任意>) => 无值
>([...a]) => { } : ([...a]: Iterable<任意>) => 无值
>a : 任意[]

var p3 = ([, a]) => { };
>p3 : ([, a]: [任意, 任意]) => 无值
>([, a]) => { } : ([, a]: [任意, 任意]) => 无值
> : 未定
>类型别名 :=> 未定
>a : 任意
>类型别名 :=> 任意

var p4 = ([, ...a]) => { };
>p4 : ([, ...a]: Iterable<任意>) => 无值
>([, ...a]) => { } : ([, ...a]: Iterable<任意>) => 无值
> : 未定
>类型别名 :=> 未定
>a : 任意[]

var p5 = ([a = 1]) => { };
>p5 : ([a]: [数字]) => 无值
>([a = 1]) => { } : ([a]: [数字]) => 无值
>a : 数字
>类型别名 :=> 数字
>1 : 1

var p6 = ({ a }) => { };
>p6 : ({ a }: { a: 任意; }) => 无值
>({ a }) => { } : ({ a }: { a: 任意; }) => 无值
>a : 任意
>类型别名 :=> 任意

var p7 = ({ a: { b } }) => { };
>p7 : ({ a: { b } }: { a: { b: 任意; }; }) => 无值
>({ a: { b } }) => { } : ({ a: { b } }: { a: { b: 任意; }; }) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

var p8 = ({ a = 1 }) => { };
>p8 : ({ a }: { a?: 数字; }) => 无值
>({ a = 1 }) => { } : ({ a }: { a?: 数字; }) => 无值
>a : 数字
>类型别名 :=> 数字
>1 : 1

var p9 = ({ a: { b = 1 } = { b: 1 } }) => { };
>p9 : ({ a: { b } }: { a?: { b?: 数字; }; }) => 无值
>({ a: { b = 1 } = { b: 1 } }) => { } : ({ a: { b } }: { a?: { b?: 数字; }; }) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 数字
>类型别名 :=> 数字
>1 : 1
>{ b: 1 } : { b?: 数字; }
>b : 数字
>类型别名 :=> 数字
>1 : 1

var p10 = ([{ value, done }]) => { };
>p10 : ([{ value, done }]: [{ value: 任意; done: 任意; }]) => 无值
>([{ value, done }]) => { } : ([{ value, done }]: [{ value: 任意; done: 任意; }]) => 无值
>value : 任意
>类型别名 :=> 任意
>done : 任意
>类型别名 :=> 任意

