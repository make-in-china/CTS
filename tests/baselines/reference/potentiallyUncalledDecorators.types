=== tests/cases/compiler/potentiallyUncalledDecorators.ts ===
// Angular-style Input/Output API:
declare function Input(bindingPropertyName?: string): any;
>Input : (bindingPropertyName?: string) => any
>bindingPropertyName : string
>类型别名 :=> 文字

class FooComponent {
>FooComponent : FooComponent

    @Input foo: string;
>Input : (bindingPropertyName?: string) => any
>foo : string
>类型别名 :=> 文字
}

// Glimmer-style tracked API:
declare const tracked: PropertyDecorator & { (...watchedProperties: string[]): any; }
>tracked : PropertyDecorator & ((...watchedProperties: string[]) => any)
>PropertyDecorator : PropertyDecorator
>watchedProperties : string[]

class Person {
>Person : Person

    @tracked person; any;
>tracked : PropertyDecorator & ((...watchedProperties: string[]) => any)
>person : any
>类型别名 :=> 任意
>any : any
>类型别名 :=> 任意
}

class MultiplyByTwo {
>MultiplyByTwo : MultiplyByTwo

    args: any;
>args : any
>类型别名 :=> 任意

    @tracked('args')
>tracked('args') : any
>类型别名 :=> 任意
>tracked : PropertyDecorator & ((...watchedProperties: string[]) => any)
>'args' : "args"

    get multiplied() {
>multiplied : number
>类型别名 :=> 数字

        return this.args.number * 2;
>this.args.number * 2 : number
>类型别名 :=> 数字
>this.args.number : any
>类型别名 :=> 任意
>this.args : any
>类型别名 :=> 任意
>this : this
>args : any
>类型别名 :=> 任意
>number : any
>类型别名 :=> 任意
>2 : 2
    }
}

// Other fun stuff.

interface OmniDecorator extends MethodDecorator, ClassDecorator, PropertyDecorator {
>OmniDecorator : OmniDecorator
>MethodDecorator : MethodDecorator
>ClassDecorator : ClassDecorator
>PropertyDecorator : PropertyDecorator
}

declare function noArgs(): OmniDecorator;
>noArgs : () => OmniDecorator
>OmniDecorator : OmniDecorator

declare function allRest(...args: any[]): OmniDecorator;
>allRest : (...args: any[]) => OmniDecorator
>args : any[]
>OmniDecorator : OmniDecorator

declare function oneOptional(x?: any): OmniDecorator;
>oneOptional : (x?: any) => OmniDecorator
>x : any
>类型别名 :=> 任意
>OmniDecorator : OmniDecorator

declare function twoOptional(x?: any, y?: any): OmniDecorator;
>twoOptional : (x?: any, y?: any) => OmniDecorator
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>OmniDecorator : OmniDecorator

declare function threeOptional(x?: any, y?: any, z?: any): OmniDecorator;
>threeOptional : (x?: any, y?: any, z?: any) => OmniDecorator
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意
>OmniDecorator : OmniDecorator

declare function oneOptionalWithRest(x?: any, ...args: any[]): OmniDecorator;
>oneOptionalWithRest : (x?: any, ...args: any[]) => OmniDecorator
>x : any
>类型别名 :=> 任意
>args : any[]
>OmniDecorator : OmniDecorator

declare const anyDec: any;
>anyDec : any
>类型别名 :=> 任意

@noArgs
>noArgs : () => OmniDecorator

class A {
>A : A

    @noArgs foo: any;
>noArgs : () => OmniDecorator
>foo : any
>类型别名 :=> 任意

    @noArgs bar() { }
>noArgs : () => OmniDecorator
>bar : () => void
}

@allRest
>allRest : (...args: any[]) => OmniDecorator

class B {
>B : B

    @allRest foo: any;
>allRest : (...args: any[]) => OmniDecorator
>foo : any
>类型别名 :=> 任意

    @allRest bar() { }
>allRest : (...args: any[]) => OmniDecorator
>bar : () => void
}

@oneOptional
>oneOptional : (x?: any) => OmniDecorator

class C {
>C : C

    @oneOptional foo: any;
>oneOptional : (x?: any) => OmniDecorator
>foo : any
>类型别名 :=> 任意

    @oneOptional bar() { }
>oneOptional : (x?: any) => OmniDecorator
>bar : () => void
}

@twoOptional
>twoOptional : (x?: any, y?: any) => OmniDecorator

class D {
>D : D

    @twoOptional foo: any;
>twoOptional : (x?: any, y?: any) => OmniDecorator
>foo : any
>类型别名 :=> 任意

    @twoOptional bar() { }
>twoOptional : (x?: any, y?: any) => OmniDecorator
>bar : () => void
}

@threeOptional
>threeOptional : (x?: any, y?: any, z?: any) => OmniDecorator

class E {
>E : E

    @threeOptional foo: any;
>threeOptional : (x?: any, y?: any, z?: any) => OmniDecorator
>foo : any
>类型别名 :=> 任意

    @threeOptional bar() { }
>threeOptional : (x?: any, y?: any, z?: any) => OmniDecorator
>bar : () => void
}

@oneOptionalWithRest
>oneOptionalWithRest : (x?: any, ...args: any[]) => OmniDecorator

class F {
>F : F

    @oneOptionalWithRest foo: any;
>oneOptionalWithRest : (x?: any, ...args: any[]) => OmniDecorator
>foo : any
>类型别名 :=> 任意

    @oneOptionalWithRest bar() { }
>oneOptionalWithRest : (x?: any, ...args: any[]) => OmniDecorator
>bar : () => void
}

@anyDec
>anyDec : any
>类型别名 :=> 任意

class G {
>G : G

    @anyDec foo: any;
>anyDec : any
>类型别名 :=> 任意
>foo : any
>类型别名 :=> 任意

    @anyDec bar() { }
>anyDec : any
>类型别名 :=> 任意
>bar : () => void
}

export { };

