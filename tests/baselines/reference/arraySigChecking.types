=== tests/cases/compiler/arraySigChecking.ts ===
declare module M {
>M : typeof M

    interface iBar { t: any; }
>iBar : iBar
>t : any
>类型别名 :=> 任意

    interface iFoo extends iBar {
>iFoo : iFoo
>iBar : iBar

        s: any;
>s : any
>类型别名 :=> 任意
    }

    class cFoo {
>cFoo : cFoo

        t: any;
>t : any
>类型别名 :=> 任意
    }

    var foo: { [index: any]; }; // expect an error here
>foo : {}
>index : any
>类型别名 :=> 任意
}

interface myInt {
>myInt : myInt

    voidFn(): void;
>voidFn : () => void
}
var myVar: myInt;
>myVar : myInt
>myInt : myInt

var strArray: string[] = [myVar.voidFn()];
>strArray : string[]
>[myVar.voidFn()] : void[]
>myVar.voidFn() : void
>类型别名 :=> 无值
>myVar.voidFn : () => void
>myVar : myInt
>voidFn : () => void


var myArray: number[][][];
>myArray : number[][][]

myArray = [[1, 2]];
>myArray = [[1, 2]] : number[][]
>myArray : number[][][]
>[[1, 2]] : number[][]
>[1, 2] : number[]
>1 : 1
>2 : 2

function isEmpty(l: { length: number }) {
>isEmpty : (l: { length: number; }) => boolean
>l : { length: number; }
>length : number
>类型别名 :=> 数字

    return l.length === 0;
>l.length === 0 : boolean
>类型别名 :=> 真假
>l.length : number
>类型别名 :=> 数字
>l : { length: number; }
>length : number
>类型别名 :=> 数字
>0 : 0
}

isEmpty([]);
>isEmpty([]) : boolean
>类型别名 :=> 真假
>isEmpty : (l: { length: number; }) => boolean
>[] : undefined[]

isEmpty(new Array(3));
>isEmpty(new Array(3)) : boolean
>类型别名 :=> 真假
>isEmpty : (l: { length: number; }) => boolean
>new Array(3) : any[]
>Array : ArrayConstructor
>3 : 3

isEmpty(new Array<string>(3));
>isEmpty(new Array<string>(3)) : boolean
>类型别名 :=> 真假
>isEmpty : (l: { length: number; }) => boolean
>new Array<string>(3) : string[]
>Array : ArrayConstructor
>3 : 3

isEmpty(['a']);
>isEmpty(['a']) : boolean
>类型别名 :=> 真假
>isEmpty : (l: { length: number; }) => boolean
>['a'] : string[]
>'a' : "a"

