=== tests/cases/compiler/arraySigChecking.ts ===
declare module M {
>M : 类为 M

    interface iBar { t: any; }
>iBar : iBar
>t : 任意
>类型别名 :=> 任意

    interface iFoo extends iBar {
>iFoo : iFoo
>iBar : iBar

        s: any;
>s : 任意
>类型别名 :=> 任意
    }

    class cFoo {
>cFoo : cFoo

        t: any;
>t : 任意
>类型别名 :=> 任意
    }

    var foo: { [index: any]; }; // expect an error here
>foo : {}
>index : 任意
>类型别名 :=> 任意
}

interface myInt {
>myInt : myInt

    voidFn(): void;
>voidFn : () => 无值
}
var myVar: myInt;
>myVar : myInt
>myInt : myInt

var strArray: string[] = [myVar.voidFn()];
>strArray : 文字[]
>[myVar.voidFn()] : 无值[]
>myVar.voidFn() : 无值
>类型别名 :=> 无值
>myVar.voidFn : () => 无值
>myVar : myInt
>voidFn : () => 无值


var myArray: number[][][];
>myArray : 数字[][][]

myArray = [[1, 2]];
>myArray = [[1, 2]] : 数字[][]
>myArray : 数字[][][]
>[[1, 2]] : 数字[][]
>[1, 2] : 数字[]
>1 : 1
>2 : 2

function isEmpty(l: { length: number }) {
>isEmpty : (l: { length: 数字; }) => 真假
>l : { length: 数字; }
>length : 数字
>类型别名 :=> 数字

    return l.length === 0;
>l.length === 0 : 真假
>类型别名 :=> 真假
>l.length : 数字
>类型别名 :=> 数字
>l : { length: 数字; }
>length : 数字
>类型别名 :=> 数字
>0 : 0
}

isEmpty([]);
>isEmpty([]) : 真假
>类型别名 :=> 真假
>isEmpty : (l: { length: 数字; }) => 真假
>[] : 未定[]

isEmpty(new Array(3));
>isEmpty(new Array(3)) : 真假
>类型别名 :=> 真假
>isEmpty : (l: { length: 数字; }) => 真假
>new Array(3) : 任意[]
>Array : ArrayConstructor
>3 : 3

isEmpty(new Array<string>(3));
>isEmpty(new Array<string>(3)) : 真假
>类型别名 :=> 真假
>isEmpty : (l: { length: 数字; }) => 真假
>new Array<string>(3) : 文字[]
>Array : ArrayConstructor
>3 : 3

isEmpty(['a']);
>isEmpty(['a']) : 真假
>类型别名 :=> 真假
>isEmpty : (l: { length: 数字; }) => 真假
>['a'] : 文字[]
>'a' : "a"

