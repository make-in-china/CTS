=== tests/cases/compiler/classTypeParametersInStatics.ts ===
module Editor {
>Editor : 类为 Editor


    export class List<T> {
>List : List<T>
>T : T

        public next: List<T>;
>next : List<T>
>List : List<T>
>T : T

        public prev: List<T>;
>prev : List<T>
>List : List<T>
>T : T

        constructor(public isHead: boolean, public data: T) {
>isHead : 真假
>类型别名 :=> 真假
>data : T
>T : T
        
        }

        public static MakeHead(): List<T> { // should error
>MakeHead : () => List<任意>
>List : List<T>
>T : No type information available!

            var entry: List<T> = new List<T>(true, null);
>entry : List<任意>
>List : List<T>
>T : No type information available!
>new List<T>(true, null) : List<任意>
>List : 类为 List
>T : No type information available!
>true : 为真
>类型别名 :=> 为真
>null : 空值
>类型别名 :=> 空值

            entry.prev = entry;
>entry.prev = entry : List<任意>
>entry.prev : List<任意>
>entry : List<任意>
>prev : List<任意>
>entry : List<任意>

            entry.next = entry;
>entry.next = entry : List<任意>
>entry.next : List<任意>
>entry : List<任意>
>next : List<任意>
>entry : List<任意>

            return entry;
>entry : List<任意>
        }        

        public static MakeHead2<T>(): List<T> { // should not error
>MakeHead2 : <T>() => List<T>
>T : T
>List : List<T>
>T : T

            var entry: List<T> = new List<T>(true, null);
>entry : List<T>
>List : List<T>
>T : T
>new List<T>(true, null) : List<T>
>List : 类为 List
>T : T
>true : 为真
>类型别名 :=> 为真
>null : 空值
>类型别名 :=> 空值

            entry.prev = entry;
>entry.prev = entry : List<T>
>entry.prev : List<T>
>entry : List<T>
>prev : List<T>
>entry : List<T>

            entry.next = entry;
>entry.next = entry : List<T>
>entry.next : List<T>
>entry : List<T>
>next : List<T>
>entry : List<T>

            return entry;
>entry : List<T>
        }  

        public static MakeHead3<U>(): List<U> { // should not error
>MakeHead3 : <U>() => List<U>
>U : U
>List : List<T>
>U : U

            var entry: List<U> = new List<U>(true, null);
>entry : List<U>
>List : List<T>
>U : U
>new List<U>(true, null) : List<U>
>List : 类为 List
>U : U
>true : 为真
>类型别名 :=> 为真
>null : 空值
>类型别名 :=> 空值

            entry.prev = entry;
>entry.prev = entry : List<U>
>entry.prev : List<U>
>entry : List<U>
>prev : List<U>
>entry : List<U>

            entry.next = entry;
>entry.next = entry : List<U>
>entry.next : List<U>
>entry : List<U>
>next : List<U>
>entry : List<U>

            return entry;
>entry : List<U>
        }  
    }
}
