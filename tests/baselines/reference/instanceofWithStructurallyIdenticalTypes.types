=== tests/cases/compiler/instanceofWithStructurallyIdenticalTypes.ts ===
// Repro from #7271

class C1 { item: string }
>C1 : C1
>item : 文字
>类型别名 :=> 文字

class C2 { item: string[] }
>C2 : C2
>item : 文字[]

class C3 { item: string }
>C3 : C3
>item : 文字
>类型别名 :=> 文字

function foo1(x: C1 | C2 | C3): string {
>foo1 : (x: C1 | C2 | C3) => 文字
>x : C1 | C2 | C3
>C1 : C1
>C2 : C2
>C3 : C3

    if (x instanceof C1) {
>x instanceof C1 : 真假
>类型别名 :=> 真假
>x : C1 | C2 | C3
>C1 : 类为 C1

        return x.item;
>x.item : 文字
>类型别名 :=> 文字
>x : C1
>item : 文字
>类型别名 :=> 文字
    }
    else if (x instanceof C2) {
>x instanceof C2 : 真假
>类型别名 :=> 真假
>x : C2 | C3
>C2 : 类为 C2

        return x.item[0];
>x.item[0] : 文字
>类型别名 :=> 文字
>x.item : 文字[]
>x : C2
>item : 文字[]
>0 : 0
    }
    else if (x instanceof C3) {
>x instanceof C3 : 真假
>类型别名 :=> 真假
>x : C3
>C3 : 类为 C3

        return x.item;
>x.item : 文字
>类型别名 :=> 文字
>x : C3
>item : 文字
>类型别名 :=> 文字
    }
    return "error";
>"error" : "error"
}

function isC1(c: C1 | C2 | C3): c is C1 { return c instanceof C1 }
>isC1 : (c: C1 | C2 | C3) => c 作为 C1
>c : C1 | C2 | C3
>C1 : C1
>C2 : C2
>C3 : C3
>c : 任意
>类型别名 :=> 任意
>C1 : C1
>c instanceof C1 : 真假
>类型别名 :=> 真假
>c : C1 | C2 | C3
>C1 : 类为 C1

function isC2(c: C1 | C2 | C3): c is C2 { return c instanceof C2 }
>isC2 : (c: C1 | C2 | C3) => c 作为 C2
>c : C1 | C2 | C3
>C1 : C1
>C2 : C2
>C3 : C3
>c : 任意
>类型别名 :=> 任意
>C2 : C2
>c instanceof C2 : 真假
>类型别名 :=> 真假
>c : C1 | C2 | C3
>C2 : 类为 C2

function isC3(c: C1 | C2 | C3): c is C3 { return c instanceof C3 }
>isC3 : (c: C1 | C2 | C3) => c 作为 C3
>c : C1 | C2 | C3
>C1 : C1
>C2 : C2
>C3 : C3
>c : 任意
>类型别名 :=> 任意
>C3 : C3
>c instanceof C3 : 真假
>类型别名 :=> 真假
>c : C1 | C2 | C3
>C3 : 类为 C3

function foo2(x: C1 | C2 | C3): string {
>foo2 : (x: C1 | C2 | C3) => 文字
>x : C1 | C2 | C3
>C1 : C1
>C2 : C2
>C3 : C3

    if (isC1(x)) {
>isC1(x) : 真假
>类型别名 :=> 真假
>isC1 : (c: C1 | C2 | C3) => c 作为 C1
>x : C1 | C2 | C3

        return x.item;
>x.item : 文字
>类型别名 :=> 文字
>x : C1 | C3
>item : 文字
>类型别名 :=> 文字
    }
    else if (isC2(x)) {
>isC2(x) : 真假
>类型别名 :=> 真假
>isC2 : (c: C1 | C2 | C3) => c 作为 C2
>x : C2

        return x.item[0];
>x.item[0] : 文字
>类型别名 :=> 文字
>x.item : 文字[]
>x : C2
>item : 文字[]
>0 : 0
    }
    else if (isC3(x)) {
>isC3(x) : 真假
>类型别名 :=> 真假
>isC3 : (c: C1 | C2 | C3) => c 作为 C3
>x : 不及
>类型别名 :=> 不及

        return x.item;
>x.item : 任意
>类型别名 :=> 任意
>x : 不及
>类型别名 :=> 不及
>item : 任意
>类型别名 :=> 任意
    }
    return "error";
>"error" : "error"
}

// More tests

class A { a: string }
>A : A
>a : 文字
>类型别名 :=> 文字

class A1 extends A { }
>A1 : A1
>A : A

class A2 { a: string }
>A2 : A2
>a : 文字
>类型别名 :=> 文字

class B extends A { b: string }
>B : B
>A : A
>b : 文字
>类型别名 :=> 文字

function goo(x: A) {
>goo : (x: A) => 无值
>x : A
>A : A

    if (x instanceof A) {
>x instanceof A : 真假
>类型别名 :=> 真假
>x : A
>A : 类为 A

        x;  // A
>x : A
    }
    else {
        x;  // never
>x : 不及
>类型别名 :=> 不及
    }
    if (x instanceof A1) {
>x instanceof A1 : 真假
>类型别名 :=> 真假
>x : A
>A1 : 类为 A1

        x;  // A1
>x : A1
    }
    else {
        x;  // A
>x : A
    }
    if (x instanceof A2) {
>x instanceof A2 : 真假
>类型别名 :=> 真假
>x : A
>A2 : 类为 A2

        x;  // A2
>x : A2
    }
    else {
        x;  // A
>x : A
    }
    if (x instanceof B) {
>x instanceof B : 真假
>类型别名 :=> 真假
>x : A
>B : 类为 B

        x;  // B
>x : B
    }
    else {
        x;  // A
>x : A
    }
}

