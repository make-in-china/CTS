=== tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithStringAndEveryType.ts ===
enum E { a, b, c }
>E : E
>a : E.a
>b : E.b
>c : E.c

var a: any;
>a : any
>类型别名 :=> 任意

var b: boolean;
>b : boolean
>类型别名 :=> 真假

var c: number;
>c : number
>类型别名 :=> 数字

var d: string;
>d : string
>类型别名 :=> 文字

var e: Object;
>e : Object
>Object : Object

var f: void;
>f : void
>类型别名 :=> 无值

var g: E;
>g : E
>E : E

var x: string;
>x : string
>类型别名 :=> 文字

// string could plus every type, and the result is always string
// string as left operand
var r1 = x + a;
>r1 : string
>类型别名 :=> 文字
>x + a : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>a : any
>类型别名 :=> 任意

var r2 = x + b;
>r2 : string
>类型别名 :=> 文字
>x + b : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>b : boolean
>类型别名 :=> 真假

var r3 = x + c;
>r3 : string
>类型别名 :=> 文字
>x + c : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>c : number
>类型别名 :=> 数字

var r4 = x + d;
>r4 : string
>类型别名 :=> 文字
>x + d : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>d : string
>类型别名 :=> 文字

var r5 = x + e;
>r5 : string
>类型别名 :=> 文字
>x + e : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>e : Object

var r6 = x + f;
>r6 : string
>类型别名 :=> 文字
>x + f : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>f : void
>类型别名 :=> 无值

var r7 = x + g;
>r7 : string
>类型别名 :=> 文字
>x + g : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>g : E

// string as right operand
var r8 = a + x;
>r8 : string
>类型别名 :=> 文字
>a + x : string
>类型别名 :=> 文字
>a : any
>类型别名 :=> 任意
>x : string
>类型别名 :=> 文字

var r9 = b + x;
>r9 : string
>类型别名 :=> 文字
>b + x : string
>类型别名 :=> 文字
>b : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字

var r10 = c + x;
>r10 : string
>类型别名 :=> 文字
>c + x : string
>类型别名 :=> 文字
>c : number
>类型别名 :=> 数字
>x : string
>类型别名 :=> 文字

var r11 = d + x;
>r11 : string
>类型别名 :=> 文字
>d + x : string
>类型别名 :=> 文字
>d : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

var r12 = e + x;
>r12 : string
>类型别名 :=> 文字
>e + x : string
>类型别名 :=> 文字
>e : Object
>x : string
>类型别名 :=> 文字

var r13 = f + x;
>r13 : string
>类型别名 :=> 文字
>f + x : string
>类型别名 :=> 文字
>f : void
>类型别名 :=> 无值
>x : string
>类型别名 :=> 文字

var r14 = g + x;
>r14 : string
>类型别名 :=> 文字
>g + x : string
>类型别名 :=> 文字
>g : E
>x : string
>类型别名 :=> 文字

// other cases
var r15 = x + E;
>r15 : string
>类型别名 :=> 文字
>x + E : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>E : typeof E

var r16 = x + E.a;
>r16 : string
>类型别名 :=> 文字
>x + E.a : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>E.a : E.a
>E : typeof E
>a : E.a

var r17 = x + '';
>r17 : string
>类型别名 :=> 文字
>x + '' : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>'' : ""

var r18 = x + 0;
>r18 : string
>类型别名 :=> 文字
>x + 0 : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>0 : 0

var r19 = x + { a: '' };
>r19 : string
>类型别名 :=> 文字
>x + { a: '' } : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>{ a: '' } : { a: string; }
>a : string
>类型别名 :=> 文字
>'' : ""

var r20 = x + [];
>r20 : string
>类型别名 :=> 文字
>x + [] : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>[] : undefined[]

