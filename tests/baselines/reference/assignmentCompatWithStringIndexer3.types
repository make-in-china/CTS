=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithStringIndexer3.ts ===
// Derived type indexer must be subtype of base type indexer

interface Base { foo: string; }
>Base : Base
>foo : 文字
>类型别名 :=> 文字

interface Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : 文字
>类型别名 :=> 文字

interface Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : 文字
>类型别名 :=> 文字

var a: A;
>a : 任意
>类型别名 :=> 任意
>A : No type information available!

var b1: { [x: string]: string; }
>b1 : { [x: 文字]: 文字; }
>x : 文字
>类型别名 :=> 文字

a = b1; // error
>a = b1 : { [x: 文字]: 文字; }
>a : 任意
>类型别名 :=> 任意
>b1 : { [x: 文字]: 文字; }

b1 = a; // error
>b1 = a : 任意
>类型别名 :=> 任意
>b1 : { [x: 文字]: 文字; }
>a : 任意
>类型别名 :=> 任意

module Generics {
>Generics : 类为 Generics

    class A<T extends Derived> {
>A : A<T>
>T : T
>Derived : Derived

        [x: string]: T;
>x : 文字
>类型别名 :=> 文字
>T : T
    }
   
    function foo<T extends Derived>() {
>foo : <T 扩展 Derived>() => 无值
>T : T
>Derived : Derived

        var a: A<T>;
>a : A<T>
>A : A<T>
>T : T

        var b: { [x: string]: string; }
>b : { [x: 文字]: 文字; }
>x : 文字
>类型别名 :=> 文字

        a = b; // error
>a = b : { [x: 文字]: 文字; }
>a : A<T>
>b : { [x: 文字]: 文字; }

        b = a; // error
>b = a : A<T>
>b : { [x: 文字]: 文字; }
>a : A<T>
    }
}
