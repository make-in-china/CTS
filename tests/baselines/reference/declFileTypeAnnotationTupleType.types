=== tests/cases/compiler/declFileTypeAnnotationTupleType.ts ===
class c {
>c : c
}
module m {
>m : 类为 m

    export class c {
>c : c
    }
    export class g<T> {
>g : g<T>
>T : T
    }
}
class g<T> {
>g : g<T>
>T : T
}

// Just the name
var k: [c, m.c] = [new c(), new m.c()];
>k : [c, m.c]
>c : c
>m : 任意
>类型别名 :=> 任意
>c : m.c
>[new c(), new m.c()] : [c, m.c]
>new c() : c
>c : 类为 c
>new m.c() : m.c
>m.c : 类为 m.c
>m : 类为 m
>c : 类为 m.c

var l = k;
>l : [c, m.c]
>k : [c, m.c]

var x: [g<string>, m.g<number>, () => c] = [new g<string>(), new m.g<number>(), () => new c()];
>x : [g<文字>, m.g<数字>, () => c]
>g : g<T>
>m : 任意
>类型别名 :=> 任意
>g : m.g<T>
>c : c
>[new g<string>(), new m.g<number>(), () => new c()] : [g<文字>, m.g<数字>, () => c]
>new g<string>() : g<文字>
>g : 类为 g
>new m.g<number>() : m.g<数字>
>m.g : 类为 m.g
>m : 类为 m
>g : 类为 m.g
>() => new c() : () => c
>new c() : c
>c : 类为 c

var y = x;
>y : [g<文字>, m.g<数字>, () => c]
>x : [g<文字>, m.g<数字>, () => c]

