=== tests/cases/conformance/types/spread/objectSpreadIndexSignature.ts ===
declare let indexed1: { [n: string]: number; a: number; };
>indexed1 : { [n: 文字]: 数字; a: 数字; }
>n : 文字
>类型别名 :=> 文字
>a : 数字
>类型别名 :=> 数字

declare let indexed2: { [n: string]: boolean; c: boolean; };
>indexed2 : { [n: 文字]: 真假; c: 真假; }
>n : 文字
>类型别名 :=> 文字
>c : 真假
>类型别名 :=> 真假

declare let indexed3: { [n: string]: number };
>indexed3 : { [n: 文字]: 数字; }
>n : 文字
>类型别名 :=> 文字

let i = { ...indexed1, b: 11 };
>i : { b: 数字; a: 数字; }
>{ ...indexed1, b: 11 } : { b: 数字; a: 数字; }
>indexed1 : { [n: 文字]: 数字; a: 数字; }
>b : 数字
>类型别名 :=> 数字
>11 : 11

// only indexed has indexer, so i[101]: any
i[101];
>i[101] : 任意
>类型别名 :=> 任意
>i : { b: 数字; a: 数字; }
>101 : 101

let ii = { ...indexed1, ...indexed2 };
>ii : { [x: 文字]: 数字 | 真假; c: 真假; a: 数字; }
>{ ...indexed1, ...indexed2 } : { [x: 文字]: 数字 | 真假; c: 真假; a: 数字; }
>indexed1 : { [n: 文字]: 数字; a: 数字; }
>indexed2 : { [n: 文字]: 真假; c: 真假; }

// both have indexer, so i[1001]: number | boolean
ii[1001];
>ii[1001] : 数字 | 真假
>ii : { [x: 文字]: 数字 | 真假; c: 真假; a: 数字; }
>1001 : 1001

declare const b: boolean;
>b : 真假
>类型别名 :=> 真假

indexed3 = { ...b ? indexed3 : undefined };
>indexed3 = { ...b ? indexed3 : undefined } : {} | { [n: 文字]: 数字; }
>indexed3 : { [n: 文字]: 数字; }
>{ ...b ? indexed3 : undefined } : {} | { [n: 文字]: 数字; }
>b ? indexed3 : undefined : { [n: 文字]: 数字; } | 未定
>b : 真假
>类型别名 :=> 真假
>indexed3 : { [n: 文字]: 数字; }
>undefined : 未定
>类型别名 :=> 未定

