=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/enumIsNotASubtypeOfAnythingButNumber.ts ===
// enums are only subtypes of number, any and no other types

enum E { A }
>E : E
>A : E

interface I {
>I : I

    [x: string]: any;
>x : 文字
>类型别名 :=> 文字

    foo: E; // ok
>foo : E
>E : E
}


interface I2 {
>I2 : I2

    [x: string]: number;
>x : 文字
>类型别名 :=> 文字

    foo: E; // ok
>foo : E
>E : E
}

// error cases
interface I3 {
>I3 : I3

    [x: string]: string;
>x : 文字
>类型别名 :=> 文字

    foo: E;
>foo : E
>E : E
}


interface I4 {
>I4 : I4

    [x: string]: boolean;
>x : 文字
>类型别名 :=> 文字

    foo: E;
>foo : E
>E : E
}


interface I5 {
>I5 : I5

    [x: string]: Date;
>x : 文字
>类型别名 :=> 文字
>Date : Date

    foo: E;
>foo : E
>E : E
}


interface I6 {
>I6 : I6

    [x: string]: RegExp;
>x : 文字
>类型别名 :=> 文字
>RegExp : RegExp

    foo: E;
>foo : E
>E : E
}


interface I7 {
>I7 : I7

    [x: string]: { bar: number };
>x : 文字
>类型别名 :=> 文字
>bar : 数字
>类型别名 :=> 数字

    foo: E;
>foo : E
>E : E
}


interface I8 {
>I8 : I8

    [x: string]: number[];
>x : 文字
>类型别名 :=> 文字

    foo: E;
>foo : E
>E : E
}


interface I9 {
>I9 : I9

    [x: string]: I8;
>x : 文字
>类型别名 :=> 文字
>I8 : I8

    foo: E;
>foo : E
>E : E
}

class A { foo: number; }
>A : A
>foo : 数字
>类型别名 :=> 数字

interface I10 {
>I10 : I10

    [x: string]: A;
>x : 文字
>类型别名 :=> 文字
>A : A

    foo: E;
>foo : E
>E : E
}

class A2<T> { foo: T; }
>A2 : A2<T>
>T : T
>foo : T
>T : T

interface I11 {
>I11 : I11

    [x: string]: A2<number>;
>x : 文字
>类型别名 :=> 文字
>A2 : A2<T>

    foo: E;
>foo : E
>E : E
}


interface I12 {
>I12 : I12

    [x: string]: (x) => number;
>x : 文字
>类型别名 :=> 文字
>x : 任意
>类型别名 :=> 任意

    foo: E;
>foo : E
>E : E
}


interface I13 {
>I13 : I13

    [x: string]: <T>(x: T) => T;
>x : 文字
>类型别名 :=> 文字
>T : T
>x : T
>T : T
>T : T

    foo: E;
>foo : E
>E : E
}


enum E2 { A }
>E2 : E2
>A : E2

interface I14 {
>I14 : I14

    [x: string]: E2;
>x : 文字
>类型别名 :=> 文字
>E2 : E2

    foo: E;
>foo : E
>E : E
}


function f() { }
>f : 类为 f

module f {
>f : 类为 f

    export var bar = 1;
>bar : 数字
>类型别名 :=> 数字
>1 : 1
}
interface I15 {
>I15 : I15

    [x: string]: typeof f;
>x : 文字
>类型别名 :=> 文字
>f : 类为 f

    foo: E;
>foo : E
>E : E
}


class c { baz: string }
>c : c
>baz : 文字
>类型别名 :=> 文字

module c {
>c : 类为 c

    export var bar = 1;
>bar : 数字
>类型别名 :=> 数字
>1 : 1
}
interface I16 {
>I16 : I16

    [x: string]: typeof c;
>x : 文字
>类型别名 :=> 文字
>c : 类为 c

    foo: E;
>foo : E
>E : E
}


interface I17<T> {
>I17 : I17<T>
>T : T

    [x: string]: T;
>x : 文字
>类型别名 :=> 文字
>T : T

    foo: E;
>foo : E
>E : E
}


interface I18<T, U extends T> {
>I18 : I18<T, U>
>T : T
>U : U
>T : T

    [x: string]: U;
>x : 文字
>类型别名 :=> 文字
>U : U

    foo: E;
>foo : E
>E : E
}


interface I19 {
>I19 : I19

    [x: string]: Object;
>x : 文字
>类型别名 :=> 文字
>Object : Object

    foo: E; // BUG 831833
>foo : E
>E : E
}


interface I20 {
>I20 : I20

    [x: string]: {};
>x : 文字
>类型别名 :=> 文字

    foo: E; // BUG 831833
>foo : E
>E : E
}
