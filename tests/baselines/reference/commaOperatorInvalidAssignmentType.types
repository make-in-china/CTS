=== tests/cases/conformance/expressions/commaOperator/commaOperatorInvalidAssignmentType.ts ===
var BOOLEAN: boolean;
>BOOLEAN : boolean
>类型别名 :=> 真假

var NUMBER: number;
>NUMBER : number
>类型别名 :=> 数字

var STRING: string;
>STRING : string
>类型别名 :=> 文字

var resultIsBoolean: boolean
>resultIsBoolean : boolean
>类型别名 :=> 真假

var resultIsNumber: number
>resultIsNumber : number
>类型别名 :=> 数字

var resultIsString: string
>resultIsString : string
>类型别名 :=> 文字

//Expect errors when the results type is different form the second operand
resultIsBoolean = (BOOLEAN, STRING);
>resultIsBoolean = (BOOLEAN, STRING) : string
>类型别名 :=> 文字
>resultIsBoolean : boolean
>类型别名 :=> 真假
>(BOOLEAN, STRING) : string
>类型别名 :=> 文字
>BOOLEAN, STRING : string
>类型别名 :=> 文字
>BOOLEAN : boolean
>类型别名 :=> 真假
>STRING : string
>类型别名 :=> 文字

resultIsBoolean = (BOOLEAN, NUMBER);
>resultIsBoolean = (BOOLEAN, NUMBER) : number
>类型别名 :=> 数字
>resultIsBoolean : boolean
>类型别名 :=> 真假
>(BOOLEAN, NUMBER) : number
>类型别名 :=> 数字
>BOOLEAN, NUMBER : number
>类型别名 :=> 数字
>BOOLEAN : boolean
>类型别名 :=> 真假
>NUMBER : number
>类型别名 :=> 数字

resultIsNumber = (NUMBER, BOOLEAN);
>resultIsNumber = (NUMBER, BOOLEAN) : boolean
>类型别名 :=> 真假
>resultIsNumber : number
>类型别名 :=> 数字
>(NUMBER, BOOLEAN) : boolean
>类型别名 :=> 真假
>NUMBER, BOOLEAN : boolean
>类型别名 :=> 真假
>NUMBER : number
>类型别名 :=> 数字
>BOOLEAN : boolean
>类型别名 :=> 真假

resultIsNumber = (NUMBER, STRING);
>resultIsNumber = (NUMBER, STRING) : string
>类型别名 :=> 文字
>resultIsNumber : number
>类型别名 :=> 数字
>(NUMBER, STRING) : string
>类型别名 :=> 文字
>NUMBER, STRING : string
>类型别名 :=> 文字
>NUMBER : number
>类型别名 :=> 数字
>STRING : string
>类型别名 :=> 文字

resultIsString = (STRING, BOOLEAN);
>resultIsString = (STRING, BOOLEAN) : boolean
>类型别名 :=> 真假
>resultIsString : string
>类型别名 :=> 文字
>(STRING, BOOLEAN) : boolean
>类型别名 :=> 真假
>STRING, BOOLEAN : boolean
>类型别名 :=> 真假
>STRING : string
>类型别名 :=> 文字
>BOOLEAN : boolean
>类型别名 :=> 真假

resultIsString = (STRING, NUMBER);
>resultIsString = (STRING, NUMBER) : number
>类型别名 :=> 数字
>resultIsString : string
>类型别名 :=> 文字
>(STRING, NUMBER) : number
>类型别名 :=> 数字
>STRING, NUMBER : number
>类型别名 :=> 数字
>STRING : string
>类型别名 :=> 文字
>NUMBER : number
>类型别名 :=> 数字

