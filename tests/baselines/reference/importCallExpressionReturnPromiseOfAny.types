=== tests/cases/conformance/dynamicImport/defaultPath.ts ===
export class C {}
>C : C

=== tests/cases/conformance/dynamicImport/1.ts ===
import * as defaultModule from "./defaultPath";
>defaultModule : typeof defaultModule

declare function getSpecifier(): string;
>getSpecifier : () => string

declare function ValidSomeCondition(): boolean;
>ValidSomeCondition : () => boolean

declare var whatToLoad: boolean;
>whatToLoad : boolean
>类型别名 :=> 真假

declare const directory: string;
>directory : string
>类型别名 :=> 文字

declare const moduleFile: number;
>moduleFile : number
>类型别名 :=> 数字

import(`${directory}\${moduleFile}`);
>import(`${directory}\${moduleFile}`) : Promise<any>
>`${directory}\${moduleFile}` : string
>类型别名 :=> 文字
>directory : string
>类型别名 :=> 文字

import(getSpecifier());
>import(getSpecifier()) : Promise<any>
>getSpecifier() : string
>类型别名 :=> 文字
>getSpecifier : () => string

var p1 = import(ValidSomeCondition() ? "./0" : "externalModule");
>p1 : Promise<any>
>import(ValidSomeCondition() ? "./0" : "externalModule") : Promise<any>
>ValidSomeCondition() ? "./0" : "externalModule" : "./0" | "externalModule"
>ValidSomeCondition() : boolean
>类型别名 :=> 真假
>ValidSomeCondition : () => boolean
>"./0" : "./0"
>"externalModule" : "externalModule"

var p1: Promise<any> = import(getSpecifier());
>p1 : Promise<any>
>Promise : Promise<T>
>import(getSpecifier()) : Promise<any>
>getSpecifier() : string
>类型别名 :=> 文字
>getSpecifier : () => string

var p11: Promise<typeof defaultModule> = import(getSpecifier());
>p11 : Promise<typeof defaultModule>
>Promise : Promise<T>
>defaultModule : typeof defaultModule
>import(getSpecifier()) : Promise<any>
>getSpecifier() : string
>类型别名 :=> 文字
>getSpecifier : () => string

const p2 = import(whatToLoad ? getSpecifier() : "defaulPath") as Promise<typeof defaultModule>;
>p2 : Promise<typeof defaultModule>
>import(whatToLoad ? getSpecifier() : "defaulPath") as Promise<typeof defaultModule> : Promise<typeof defaultModule>
>import(whatToLoad ? getSpecifier() : "defaulPath") : Promise<any>
>whatToLoad ? getSpecifier() : "defaulPath" : string
>类型别名 :=> 文字
>whatToLoad : boolean
>类型别名 :=> 真假
>getSpecifier() : string
>类型别名 :=> 文字
>getSpecifier : () => string
>"defaulPath" : "defaulPath"
>Promise : Promise<T>
>defaultModule : typeof defaultModule

p1.then(zero => {
>p1.then(zero => {    return zero.foo();  // ok, zero is any}) : Promise<any>
>p1.then : <TResult1 = any, TResult2 = never>(onfulfilled?: (value: any) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p1 : Promise<any>
>then : <TResult1 = any, TResult2 = never>(onfulfilled?: (value: any) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>zero => {    return zero.foo();  // ok, zero is any} : (zero: any) => any
>zero : any
>类型别名 :=> 任意

    return zero.foo();  // ok, zero is any
>zero.foo() : any
>类型别名 :=> 任意
>zero.foo : any
>类型别名 :=> 任意
>zero : any
>类型别名 :=> 任意
>foo : any
>类型别名 :=> 任意

});

let j: string;
>j : string
>类型别名 :=> 文字

var p3: Promise<typeof defaultModule> = import(j=getSpecifier());
>p3 : Promise<typeof defaultModule>
>Promise : Promise<T>
>defaultModule : typeof defaultModule
>import(j=getSpecifier()) : Promise<any>
>j=getSpecifier() : string
>类型别名 :=> 文字
>j : string
>类型别名 :=> 文字
>getSpecifier() : string
>类型别名 :=> 文字
>getSpecifier : () => string

function * loadModule(directories: string[]) {
>loadModule : (directories: string[]) => IterableIterator<string>
>directories : string[]

    for (const directory of directories) {
>directory : string
>类型别名 :=> 文字
>directories : string[]

        const path = `${directory}\moduleFile`;
>path : string
>类型别名 :=> 文字
>`${directory}\moduleFile` : string
>类型别名 :=> 文字
>directory : string
>类型别名 :=> 文字

        import(yield path);
>import(yield path) : Promise<any>
>yield path : any
>类型别名 :=> 任意
>path : string
>类型别名 :=> 文字
    }
}

