=== tests/cases/compiler/noImplicitAnyParametersInInterface.ts ===
interface I {
>I : I

    // Implicit-'any' errors for first two call signatures, x1, x2, z2.
    ();
    (x1);
>x1 : any
>类型别名 :=> 任意

    (x2, y2: string, z2): any;
>x2 : any
>类型别名 :=> 任意
>y2 : string
>类型别名 :=> 文字
>z2 : any
>类型别名 :=> 任意

    // No implicit-'any' errors.
    f1(): void;
>f1 : () => void

    // Implicit-'any' errors for x.
    f2(x): void;
>f2 : (x: any) => void
>x : any
>类型别名 :=> 任意

    // No implicit-'any' errors.
    f3(x: any): void;
>f3 : (x: any) => void
>x : any
>类型别名 :=> 任意

    // Implicit-'any' errors for x, y, and z.
    f4(x, y, z): void;
>f4 : (x: any, y: any, z: any) => void
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

    // Implicit-'any' errors for x, and z.
    f5(x, y: any, z): void;
>f5 : (x: any, y: any, z: any) => void
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

    // Implicit-'any[]' errors for r.
    f6(...r): void;
>f6 : (...r: any[]) => void
>r : any[]

    // Implicit-'any'/'any[]' errors for x, r.
    f7(x, ...r): void;
>f7 : (x: any, ...r: any[]) => void
>x : any
>类型别名 :=> 任意
>r : any[]

    // Implicit-'any' errors for x1, y2, x3, and y3.
    f8(x1, y1: number): any;
>f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; (x3: any, y3: any): any; }
>x1 : any
>类型别名 :=> 任意
>y1 : number
>类型别名 :=> 数字

    f8(x2: string, y2): any;
>f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; (x3: any, y3: any): any; }
>x2 : string
>类型别名 :=> 文字
>y2 : any
>类型别名 :=> 任意

    f8(x3, y3): any;
>f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; (x3: any, y3: any): any; }
>x3 : any
>类型别名 :=> 任意
>y3 : any
>类型别名 :=> 任意

    // No implicit-'any' errors.
    f9: () => string;
>f9 : () => string

    // Implicit-'any' errors for x.
    f10: (x) => string;
>f10 : (x: any) => string
>x : any
>类型别名 :=> 任意

    // Implicit-'any' errors for x, y, and z.
    f11: (x, y, z) => string;
>f11 : (x: any, y: any, z: any) => string
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

    // Implicit-'any' errors for x and z.
    f12: (x, y: any, z) => string;
>f12 : (x: any, y: any, z: any) => string
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意

    // Implicit-'any[]' error for r.
    f13: (...r) => string;
>f13 : (...r: any[]) => string
>r : any[]

    // Implicit-'any'/'any[]' errors for x, r.
    f14: (x, ...r) => string;
>f14 : (x: any, ...r: any[]) => string
>x : any
>类型别名 :=> 任意
>r : any[]
}
