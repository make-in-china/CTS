=== tests/cases/conformance/types/thisType/thisTypeInTuples.ts ===
interface Array<T> {
>Array : T[]
>T : T

    slice(): this;
>slice : { (start?: 数字, end?: 数字): T[]; (): 本体; }
}

let t: [number, string] = [42, "hello"];
>t : [数字, 文字]
>[42, "hello"] : [数字, 文字]
>42 : 42
>"hello" : "hello"

let a = t.slice();
>a : [数字, 文字]
>t.slice() : [数字, 文字]
>t.slice : { (start?: 数字, end?: 数字): (文字 | 数字)[]; (): [数字, 文字]; }
>t : [数字, 文字]
>slice : { (start?: 数字, end?: 数字): (文字 | 数字)[]; (): [数字, 文字]; }

let b = t.slice(1);
>b : (文字 | 数字)[]
>t.slice(1) : (文字 | 数字)[]
>t.slice : { (start?: 数字, end?: 数字): (文字 | 数字)[]; (): [数字, 文字]; }
>t : [数字, 文字]
>slice : { (start?: 数字, end?: 数字): (文字 | 数字)[]; (): [数字, 文字]; }
>1 : 1

let c = t.slice(0, 1);
>c : (文字 | 数字)[]
>t.slice(0, 1) : (文字 | 数字)[]
>t.slice : { (start?: 数字, end?: 数字): (文字 | 数字)[]; (): [数字, 文字]; }
>t : [数字, 文字]
>slice : { (start?: 数字, end?: 数字): (文字 | 数字)[]; (): [数字, 文字]; }
>0 : 0
>1 : 1

