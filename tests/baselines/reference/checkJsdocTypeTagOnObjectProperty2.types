=== tests/cases/conformance/jsdoc/0.js ===
// @ts-check
var lol;
>lol : any
>类型别名 :=> 任意

const obj = {
>obj : { [x: string]: any; bar: string | undefined; method1(arg0: number): number; method2: (arg0: number) => number; arrowFunc: (arg0: number) => number; lol: string; }
>{  /** @type {string|undefined} */  bar: 42,  /** @type {function(number): number} */  method1(n1) {      return "42";  },  /** @type {function(number): number} */  method2: (n1) => "lol",  /** @type {function(number): number} */  arrowFunc: (num="0") => num + 42,  /** @type {string} */  lol} : { [x: string]: any; bar: string | undefined; method1(arg0: number): number; method2: (arg0: number) => number; arrowFunc: (arg0: number) => number; lol: string; }

  /** @type {string|undefined} */
  bar: 42,
>bar : string | undefined
>42 : 42

  /** @type {function(number): number} */
  method1(n1) {
>method1 : (n1: any) => string
>n1 : any
>类型别名 :=> 任意

      return "42";
>"42" : "42"

  },
  /** @type {function(number): number} */
  method2: (n1) => "lol",
>method2 : (arg0: number) => number
>(n1) => "lol" : (n1: any) => string
>n1 : any
>类型别名 :=> 任意
>"lol" : "lol"

  /** @type {function(number): number} */
  arrowFunc: (num="0") => num + 42,
>arrowFunc : (arg0: number) => number
>(num="0") => num + 42 : (num?: string) => string
>num : string
>类型别名 :=> 文字
>"0" : "0"
>num + 42 : string
>类型别名 :=> 文字
>num : string
>类型别名 :=> 文字
>42 : 42

  /** @type {string} */
  lol
>lol : string
>类型别名 :=> 文字
}
lol = "string"
>lol = "string" : "string"
>lol : any
>类型别名 :=> 任意
>"string" : "string"

/** @type {string} */
var s = obj.method1(0);
>s : string
>类型别名 :=> 文字
>obj.method1(0) : number
>类型别名 :=> 数字
>obj.method1 : (arg0: number) => number
>obj : { [x: string]: any; bar: string | undefined; method1(arg0: number): number; method2: (arg0: number) => number; arrowFunc: (arg0: number) => number; lol: string; }
>method1 : (arg0: number) => number
>0 : 0

/** @type {string} */
var s1 = obj.method2("0");
>s1 : string
>类型别名 :=> 文字
>obj.method2("0") : number
>类型别名 :=> 数字
>obj.method2 : (arg0: number) => number
>obj : { [x: string]: any; bar: string | undefined; method1(arg0: number): number; method2: (arg0: number) => number; arrowFunc: (arg0: number) => number; lol: string; }
>method2 : (arg0: number) => number
>"0" : "0"

