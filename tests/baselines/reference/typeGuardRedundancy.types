=== tests/cases/conformance/expressions/typeGuards/typeGuardRedundancy.ts ===
var x: string|number;
>x : 文字 | 数字

var r1 = typeof x === "string" && typeof x === "string" ? x.substr : x.toFixed;
>r1 : (from: 数字, length?: 数字) => 文字
>typeof x === "string" && typeof x === "string" ? x.substr : x.toFixed : (from: 数字, length?: 数字) => 文字
>typeof x === "string" && typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字
>类型别名 :=> 文字
>"string" : "string"
>x.substr : (from: 数字, length?: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>substr : (from: 数字, length?: 数字) => 文字
>x.toFixed : (fractionDigits?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

var r2 = !(typeof x === "string" && typeof x === "string") ? x.toFixed : x.substr;
>r2 : (from: 数字, length?: 数字) => 文字
>!(typeof x === "string" && typeof x === "string") ? x.toFixed : x.substr : (from: 数字, length?: 数字) => 文字
>!(typeof x === "string" && typeof x === "string") : 真假
>类型别名 :=> 真假
>(typeof x === "string" && typeof x === "string") : 真假
>类型别名 :=> 真假
>typeof x === "string" && typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字
>类型别名 :=> 文字
>"string" : "string"
>x.toFixed : (fractionDigits?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字
>x.substr : (from: 数字, length?: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>substr : (from: 数字, length?: 数字) => 文字

var r3 = typeof x === "string" || typeof x === "string" ? x.substr : x.toFixed;
>r3 : (from: 数字, length?: 数字) => 文字
>typeof x === "string" || typeof x === "string" ? x.substr : x.toFixed : (from: 数字, length?: 数字) => 文字
>typeof x === "string" || typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字
>类型别名 :=> 数字
>"string" : "string"
>x.substr : (from: 数字, length?: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>substr : (from: 数字, length?: 数字) => 文字
>x.toFixed : (fractionDigits?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

var r4 = !(typeof x === "string" || typeof x === "string") ? x.toFixed : x.substr;
>r4 : (from: 数字, length?: 数字) => 文字
>!(typeof x === "string" || typeof x === "string") ? x.toFixed : x.substr : (from: 数字, length?: 数字) => 文字
>!(typeof x === "string" || typeof x === "string") : 真假
>类型别名 :=> 真假
>(typeof x === "string" || typeof x === "string") : 真假
>类型别名 :=> 真假
>typeof x === "string" || typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字
>类型别名 :=> 数字
>"string" : "string"
>x.toFixed : (fractionDigits?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字
>x.substr : (from: 数字, length?: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>substr : (from: 数字, length?: 数字) => 文字

