=== tests/cases/compiler/file1.ts ===
interface I { }
>I : I

class C1 { }
>C1 : C1

class C2 { }
>C2 : C2

function f() { }
>f : () => void

var v = 3;
>v : number
>类型别名 :=> 数字
>3 : 3

class Foo {
>Foo : Foo

    static x: number;
>x : number
>类型别名 :=> 数字
}

module N {
>N : typeof N

    export module F {
>F : typeof F

        var t;
>t : any
>类型别名 :=> 任意
    }
}

=== tests/cases/compiler/file2.ts ===
class I { } // error -- cannot merge interface with non-ambient class
>I : I

interface C1 { } // error -- cannot merge interface with non-ambient class
>C1 : C1

function C2() { } // error -- cannot merge function with non-ambient class
>C2 : () => void

class f { } // error -- cannot merge function with non-ambient class
>f : f

var v = 3;
>v : number
>类型别名 :=> 数字
>3 : 3

module Foo {
>Foo : typeof Foo

    export var x: number; // error for redeclaring var in a different parent
>x : number
>类型别名 :=> 数字
}

declare module N {
>N : typeof N

    export function F(); // no error because function is ambient
>F : typeof F
}

