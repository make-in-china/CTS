=== tests/cases/compiler/genericChainedCalls.ts ===
interface I1<T> {
>I1 : I1<T>
>T : T

    func<U>(callback: (value: T) => U): I1<T>;
>func : <U>(callback: (value: T) => U) => I1<T>
>U : U
>callback : (value: T) => U
>value : T
>T : T
>U : U
>I1 : I1<T>
>T : T
}
 
declare var v1: I1<number>;
>v1 : I1<数字>
>I1 : I1<T>
 
var r1 = v1.func(num => num.toString()) 
>r1 : I1<数字>
>v1.func(num => num.toString())            .func(str => str.length) // error, number doesn't have a length           .func(num => num.toString()) : I1<数字>
>v1.func(num => num.toString())            .func(str => str.length) // error, number doesn't have a length           .func : <U>(callback: (value: 数字) => U) => I1<数字>
>v1.func(num => num.toString())            .func(str => str.length) : I1<数字>
>v1.func(num => num.toString())            .func : <U>(callback: (value: 数字) => U) => I1<数字>
>v1.func(num => num.toString()) : I1<数字>
>v1.func : <U>(callback: (value: 数字) => U) => I1<数字>
>v1 : I1<数字>
>func : <U>(callback: (value: 数字) => U) => I1<数字>
>num => num.toString() : (num: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>num.toString() : 文字
>类型别名 :=> 文字
>num.toString : (radix?: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

           .func(str => str.length) // error, number doesn't have a length
>func : <U>(callback: (value: 数字) => U) => I1<数字>
>str => str.length : (str: 数字) => 任意
>str : 数字
>类型别名 :=> 数字
>str.length : 任意
>类型别名 :=> 任意
>str : 数字
>类型别名 :=> 数字
>length : 任意
>类型别名 :=> 任意

           .func(num => num.toString())
>func : <U>(callback: (value: 数字) => U) => I1<数字>
>num => num.toString() : (num: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>num.toString() : 文字
>类型别名 :=> 文字
>num.toString : (radix?: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
 
var s1 = v1.func(num => num.toString()) 
>s1 : I1<数字>
>v1.func(num => num.toString()) : I1<数字>
>v1.func : <U>(callback: (value: 数字) => U) => I1<数字>
>v1 : I1<数字>
>func : <U>(callback: (value: 数字) => U) => I1<数字>
>num => num.toString() : (num: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>num.toString() : 文字
>类型别名 :=> 文字
>num.toString : (radix?: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

var s2 = s1.func(str => str.length) // should also error
>s2 : I1<数字>
>s1.func(str => str.length) : I1<数字>
>s1.func : <U>(callback: (value: 数字) => U) => I1<数字>
>s1 : I1<数字>
>func : <U>(callback: (value: 数字) => U) => I1<数字>
>str => str.length : (str: 数字) => 任意
>str : 数字
>类型别名 :=> 数字
>str.length : 任意
>类型别名 :=> 任意
>str : 数字
>类型别名 :=> 数字
>length : 任意
>类型别名 :=> 任意

var s3 = s2.func(num => num.toString())
>s3 : I1<数字>
>s2.func(num => num.toString()) : I1<数字>
>s2.func : <U>(callback: (value: 数字) => U) => I1<数字>
>s2 : I1<数字>
>func : <U>(callback: (value: 数字) => U) => I1<数字>
>num => num.toString() : (num: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>num.toString() : 文字
>类型别名 :=> 文字
>num.toString : (radix?: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

