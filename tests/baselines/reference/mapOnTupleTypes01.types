=== tests/cases/compiler/mapOnTupleTypes01.ts ===
export let mapOnLooseArrayLiteral = [1, 2, 3, 4].map(n => n * n);
>mapOnLooseArrayLiteral : 数字[]
>[1, 2, 3, 4].map(n => n * n) : 数字[]
>[1, 2, 3, 4].map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>[1, 2, 3, 4] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>n => n * n : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n * n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

// Length 1

let numTuple: [number] = [1];
>numTuple : [数字]
>[1] : [数字]
>1 : 1

export let a = numTuple.map(x => x * x);
>a : 数字[]
>numTuple.map(x => x * x) : 数字[]
>numTuple.map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>numTuple : [数字]
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>x => x * x : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>x * x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

// Length 2

let numNum: [number, number] = [    100,     100];
>numNum : [数字, 数字]
>[    100,     100] : [数字, 数字]
>100 : 100
>100 : 100

let strStr: [string, string] = ["hello", "hello"];
>strStr : [文字, 文字]
>["hello", "hello"] : [文字, 文字]
>"hello" : "hello"
>"hello" : "hello"

let numStr: [number, string] = [    100, "hello"];
>numStr : [数字, 文字]
>[    100, "hello"] : [数字, 文字]
>100 : 100
>"hello" : "hello"

export let b = numNum.map(n => n * n);
>b : 数字[]
>numNum.map(n => n * n) : 数字[]
>numNum.map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>numNum : [数字, 数字]
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>n => n * n : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n * n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

export let c = strStr.map(s => s.charCodeAt(0));
>c : 数字[]
>strStr.map(s => s.charCodeAt(0)) : 数字[]
>strStr.map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>strStr : [文字, 文字]
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>s => s.charCodeAt(0) : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.charCodeAt(0) : 数字
>类型别名 :=> 数字
>s.charCodeAt : (index: 数字) => 数字
>s : 文字
>类型别名 :=> 文字
>charCodeAt : (index: 数字) => 数字
>0 : 0

export let d = numStr.map(x => x);
>d : (文字 | 数字)[]
>numStr.map(x => x) : (文字 | 数字)[]
>numStr.map : <U>(callbackfn: (value: 文字 | 数字, index: 数字, array: (文字 | 数字)[]) => U, thisArg?: 任意) => U[]
>numStr : [数字, 文字]
>map : <U>(callbackfn: (value: 文字 | 数字, index: 数字, array: (文字 | 数字)[]) => U, thisArg?: 任意) => U[]
>x => x : (x: 文字 | 数字) => 文字 | 数字
>x : 文字 | 数字
>x : 文字 | 数字

// Length 3

let numNumNum: [number, number, number] = [1, 2, 3];
>numNumNum : [数字, 数字, 数字]
>[1, 2, 3] : [数字, 数字, 数字]
>1 : 1
>2 : 2
>3 : 3

export let e = numNumNum.map(n => n * n);
>e : 数字[]
>numNumNum.map(n => n * n) : 数字[]
>numNumNum.map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>numNumNum : [数字, 数字, 数字]
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>n => n * n : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n * n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

// Length 4

let numNumNumNum: [number, number, number, number] = [1, 2, 3, 4];
>numNumNumNum : [数字, 数字, 数字, 数字]
>[1, 2, 3, 4] : [数字, 数字, 数字, 数字]
>1 : 1
>2 : 2
>3 : 3
>4 : 4

export let f = numNumNumNum.map(n => n * n);
>f : 数字[]
>numNumNumNum.map(n => n * n) : 数字[]
>numNumNumNum.map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>numNumNumNum : [数字, 数字, 数字, 数字]
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>n => n * n : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n * n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

// Length 5

let numNumNumNumNum: [number, number, number, number, number] = [1, 2, 3, 4, 5];
>numNumNumNumNum : [数字, 数字, 数字, 数字, 数字]
>[1, 2, 3, 4, 5] : [数字, 数字, 数字, 数字, 数字]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>5 : 5

export let g = numNumNumNumNum.map(n => n * n);
>g : 数字[]
>numNumNumNumNum.map(n => n * n) : 数字[]
>numNumNumNumNum.map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>numNumNumNumNum : [数字, 数字, 数字, 数字, 数字]
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>n => n * n : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n * n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字


// Length 6

let numNumNumNumNumNum: [number, number, number, number, number, number] = [1, 2, 3, 4, 5, 6];
>numNumNumNumNumNum : [数字, 数字, 数字, 数字, 数字, 数字]
>[1, 2, 3, 4, 5, 6] : [数字, 数字, 数字, 数字, 数字, 数字]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>5 : 5
>6 : 6

export let h = numNumNumNumNum.map(n => n * n);
>h : 数字[]
>numNumNumNumNum.map(n => n * n) : 数字[]
>numNumNumNumNum.map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>numNumNumNumNum : [数字, 数字, 数字, 数字, 数字]
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>n => n * n : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n * n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

