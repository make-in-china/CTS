=== tests/cases/compiler/typeInferenceLiteralUnion.ts ===
// Repro from #10901
/**
 * Administrivia: JavaScript primitive types and Date
 */
export type Primitive = number | string | boolean | Date;
>Primitive : Primitive
>Date : Date

/**
 * Administrivia: anything with a valueOf(): number method is comparable, so we allow it in numeric operations
 */
interface Numeric {
>Numeric : Numeric

    valueOf(): number;
>valueOf : () => 数字
}

// Not very useful, but meets Numeric
class NumCoercible {
>NumCoercible : NumCoercible

    public a: number;
>a : 数字
>类型别名 :=> 数字

    constructor(a: number) {
>a : 数字
>类型别名 :=> 数字

        this.a = a;
>this.a = a : 数字
>类型别名 :=> 数字
>this.a : 数字
>类型别名 :=> 数字
>this : 本体
>a : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字
    }
    public valueOf() {
>valueOf : () => 数字

        return this.a;
>this.a : 数字
>类型别名 :=> 数字
>this : 本体
>a : 数字
>类型别名 :=> 数字
    }
}

/**
 * Return the min and max simultaneously.
 */
export function extent<T extends Numeric>(array: Array<T | Primitive>): [T | Primitive, T | Primitive] | [undefined, undefined] {
>extent : <T 扩展 Numeric>(array: (文字 | 数字 | 真假 | Date | T)[]) => [文字 | 数字 | 真假 | Date | T, 文字 | 数字 | 真假 | Date | T] | [未定, 未定]
>T : T
>Numeric : Numeric
>array : (文字 | 数字 | 真假 | Date | T)[]
>Array : T[]
>T : T
>Primitive : Primitive
>T : T
>Primitive : Primitive
>T : T
>Primitive : Primitive

    return [undefined, undefined];
>[undefined, undefined] : [未定, 未定]
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定
}


let extentMixed: [Primitive | NumCoercible, Primitive | NumCoercible] | [undefined, undefined];
>extentMixed : [未定, 未定] | [文字 | 数字 | 真假 | Date | NumCoercible, 文字 | 数字 | 真假 | Date | NumCoercible]
>Primitive : Primitive
>NumCoercible : NumCoercible
>Primitive : Primitive
>NumCoercible : NumCoercible

extentMixed = extent([new NumCoercible(10), 13, '12', true]);
>extentMixed = extent([new NumCoercible(10), 13, '12', true]) : [未定, 未定] | [文字 | 数字 | 真假 | Date | NumCoercible, 文字 | 数字 | 真假 | Date | NumCoercible]
>extentMixed : [未定, 未定] | [文字 | 数字 | 真假 | Date | NumCoercible, 文字 | 数字 | 真假 | Date | NumCoercible]
>extent([new NumCoercible(10), 13, '12', true]) : [未定, 未定] | [文字 | 数字 | 真假 | Date | NumCoercible, 文字 | 数字 | 真假 | Date | NumCoercible]
>extent : <T 扩展 Numeric>(array: (文字 | 数字 | 真假 | Date | T)[]) => [文字 | 数字 | 真假 | Date | T, 文字 | 数字 | 真假 | Date | T] | [未定, 未定]
>[new NumCoercible(10), 13, '12', true] : (为真 | NumCoercible | 13 | "12")[]
>new NumCoercible(10) : NumCoercible
>NumCoercible : 类为 NumCoercible
>10 : 10
>13 : 13
>'12' : "12"
>true : 为真
>类型别名 :=> 为真

