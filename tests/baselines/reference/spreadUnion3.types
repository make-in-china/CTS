=== tests/cases/conformance/types/spread/spreadUnion3.ts ===
function f(x: { y: string } | undefined): { y: string } {
>f : (x: { y: 文字; } | 未定) => { y: 文字; }
>x : { y: 文字; } | 未定
>y : 文字
>类型别名 :=> 文字
>y : 文字
>类型别名 :=> 文字

    return { y: 123, ...x } // y: string | number
>{ y: 123, ...x } : { y: 数字; } | { y: 文字; }
>y : 数字
>类型别名 :=> 数字
>123 : 123
>x : { y: 文字; } | 未定
}
f(undefined)
>f(undefined) : { y: 文字; }
>f : (x: { y: 文字; } | 未定) => { y: 文字; }
>undefined : 未定
>类型别名 :=> 未定


function g(t?: { a: number } | null): void {
>g : (t?: { a: 数字; } | 空值 | 未定) => 无值
>t : { a: 数字; } | 空值 | 未定
>a : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

    let b = { ...t };
>b : {} | {} | { a: 数字; }
>{ ...t } : {} | {} | { a: 数字; }
>t : { a: 数字; } | 空值 | 未定

    let c: number = b.a;  // might not have 'a'
>c : 数字
>类型别名 :=> 数字
>b.a : 任意
>类型别名 :=> 任意
>b : {} | {} | { a: 数字; }
>a : 任意
>类型别名 :=> 任意
}
g()
>g() : 无值
>类型别名 :=> 无值
>g : (t?: { a: 数字; } | 空值 | 未定) => 无值

g(undefined)
>g(undefined) : 无值
>类型别名 :=> 无值
>g : (t?: { a: 数字; } | 空值 | 未定) => 无值
>undefined : 未定
>类型别名 :=> 未定

g(null)
>g(null) : 无值
>类型别名 :=> 无值
>g : (t?: { a: 数字; } | 空值 | 未定) => 无值
>null : 空值
>类型别名 :=> 空值

// spreading nothing but null and undefined is not allowed
declare const nullAndUndefinedUnion: null | undefined;
>nullAndUndefinedUnion : 空值 | 未定
>null : 空值
>类型别名 :=> 空值

var x = { ...nullAndUndefinedUnion, ...nullAndUndefinedUnion };
>x : 任意
>类型别名 :=> 任意
>{ ...nullAndUndefinedUnion, ...nullAndUndefinedUnion } : 任意
>类型别名 :=> 任意
>nullAndUndefinedUnion : 空值 | 未定
>nullAndUndefinedUnion : 空值 | 未定

var y = { ...nullAndUndefinedUnion };
>y : 任意
>类型别名 :=> 任意
>{ ...nullAndUndefinedUnion } : 任意
>类型别名 :=> 任意
>nullAndUndefinedUnion : 空值 | 未定

