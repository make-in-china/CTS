=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormIsType.ts ===
class C1 {
>C1 : C1

    p1: string;
>p1 : string
>类型别名 :=> 文字
}
class C2 {
>C2 : C2

    p2: number;
>p2 : number
>类型别名 :=> 数字
}
class D1 extends C1 {
>D1 : D1
>C1 : C1

    p3: number;
>p3 : number
>类型别名 :=> 数字
}
var str: string;
>str : string
>类型别名 :=> 文字

var num: number;
>num : number
>类型别名 :=> 数字

var strOrNum: string | number;
>strOrNum : string | number

function isC1(x: any): x is C1 {
>isC1 : (x: any) => x is C1
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>C1 : C1

    return true;
>true : true
>类型别名 :=> 为真
}

function isC2(x: any): x is C2 {
>isC2 : (x: any) => x is C2
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>C2 : C2

    return true;
>true : true
>类型别名 :=> 为真
}

function isD1(x: any): x is D1 {
>isD1 : (x: any) => x is D1
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>D1 : D1

    return true;
>true : true
>类型别名 :=> 为真
}

var c1Orc2: C1 | C2;
>c1Orc2 : C1 | C2
>C1 : C1
>C2 : C2

str = isC1(c1Orc2) && c1Orc2.p1; // C1
>str = isC1(c1Orc2) && c1Orc2.p1 : string
>类型别名 :=> 文字
>str : string
>类型别名 :=> 文字
>isC1(c1Orc2) && c1Orc2.p1 : string
>类型别名 :=> 文字
>isC1(c1Orc2) : boolean
>类型别名 :=> 真假
>isC1 : (x: any) => x is C1
>c1Orc2 : C1 | C2
>c1Orc2.p1 : string
>类型别名 :=> 文字
>c1Orc2 : C1
>p1 : string
>类型别名 :=> 文字

num = isC2(c1Orc2) && c1Orc2.p2; // C2
>num = isC2(c1Orc2) && c1Orc2.p2 : number
>类型别名 :=> 数字
>num : number
>类型别名 :=> 数字
>isC2(c1Orc2) && c1Orc2.p2 : number
>类型别名 :=> 数字
>isC2(c1Orc2) : boolean
>类型别名 :=> 真假
>isC2 : (x: any) => x is C2
>c1Orc2 : C1 | C2
>c1Orc2.p2 : number
>类型别名 :=> 数字
>c1Orc2 : C2
>p2 : number
>类型别名 :=> 数字

str = isD1(c1Orc2) && c1Orc2.p1; // D1
>str = isD1(c1Orc2) && c1Orc2.p1 : string
>类型别名 :=> 文字
>str : string
>类型别名 :=> 文字
>isD1(c1Orc2) && c1Orc2.p1 : string
>类型别名 :=> 文字
>isD1(c1Orc2) : boolean
>类型别名 :=> 真假
>isD1 : (x: any) => x is D1
>c1Orc2 : C1 | C2
>c1Orc2.p1 : string
>类型别名 :=> 文字
>c1Orc2 : D1
>p1 : string
>类型别名 :=> 文字

num = isD1(c1Orc2) && c1Orc2.p3; // D1
>num = isD1(c1Orc2) && c1Orc2.p3 : number
>类型别名 :=> 数字
>num : number
>类型别名 :=> 数字
>isD1(c1Orc2) && c1Orc2.p3 : number
>类型别名 :=> 数字
>isD1(c1Orc2) : boolean
>类型别名 :=> 真假
>isD1 : (x: any) => x is D1
>c1Orc2 : C1 | C2
>c1Orc2.p3 : number
>类型别名 :=> 数字
>c1Orc2 : D1
>p3 : number
>类型别名 :=> 数字

var c2Ord1: C2 | D1;
>c2Ord1 : C2 | D1
>C2 : C2
>D1 : D1

num = isC2(c2Ord1) && c2Ord1.p2; // C2
>num = isC2(c2Ord1) && c2Ord1.p2 : number
>类型别名 :=> 数字
>num : number
>类型别名 :=> 数字
>isC2(c2Ord1) && c2Ord1.p2 : number
>类型别名 :=> 数字
>isC2(c2Ord1) : boolean
>类型别名 :=> 真假
>isC2 : (x: any) => x is C2
>c2Ord1 : C2 | D1
>c2Ord1.p2 : number
>类型别名 :=> 数字
>c2Ord1 : C2
>p2 : number
>类型别名 :=> 数字

num = isD1(c2Ord1) && c2Ord1.p3; // D1
>num = isD1(c2Ord1) && c2Ord1.p3 : number
>类型别名 :=> 数字
>num : number
>类型别名 :=> 数字
>isD1(c2Ord1) && c2Ord1.p3 : number
>类型别名 :=> 数字
>isD1(c2Ord1) : boolean
>类型别名 :=> 真假
>isD1 : (x: any) => x is D1
>c2Ord1 : C2 | D1
>c2Ord1.p3 : number
>类型别名 :=> 数字
>c2Ord1 : D1
>p3 : number
>类型别名 :=> 数字

str = isD1(c2Ord1) && c2Ord1.p1; // D1
>str = isD1(c2Ord1) && c2Ord1.p1 : string
>类型别名 :=> 文字
>str : string
>类型别名 :=> 文字
>isD1(c2Ord1) && c2Ord1.p1 : string
>类型别名 :=> 文字
>isD1(c2Ord1) : boolean
>类型别名 :=> 真假
>isD1 : (x: any) => x is D1
>c2Ord1 : C2 | D1
>c2Ord1.p1 : string
>类型别名 :=> 文字
>c2Ord1 : D1
>p1 : string
>类型别名 :=> 文字

var r2: C2 | D1 = isC1(c2Ord1) && c2Ord1; // C2 | D1
>r2 : C2 | D1
>C2 : C2
>D1 : D1
>isC1(c2Ord1) && c2Ord1 : D1
>isC1(c2Ord1) : boolean
>类型别名 :=> 真假
>isC1 : (x: any) => x is C1
>c2Ord1 : C2 | D1
>c2Ord1 : D1

