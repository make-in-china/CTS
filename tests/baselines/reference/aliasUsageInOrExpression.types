=== tests/cases/compiler/aliasUsageInOrExpression_main.ts ===
import Backbone = require("./aliasUsageInOrExpression_backbone");
>Backbone : 类为 Backbone

import moduleA = require("./aliasUsageInOrExpression_moduleA");
>moduleA : 类为 moduleA

interface IHasVisualizationModel {
>IHasVisualizationModel : IHasVisualizationModel

    VisualizationModel: typeof Backbone.Model;
>VisualizationModel : 类为 Backbone.Model
>Backbone.Model : 类为 Backbone.Model
>Backbone : 类为 Backbone
>Model : 类为 Backbone.Model
}
var i: IHasVisualizationModel;
>i : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel

var d1 = i || moduleA;
>d1 : IHasVisualizationModel
>i || moduleA : IHasVisualizationModel
>i : IHasVisualizationModel
>moduleA : 类为 moduleA

var d2: IHasVisualizationModel = i || moduleA;
>d2 : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel
>i || moduleA : IHasVisualizationModel
>i : IHasVisualizationModel
>moduleA : 类为 moduleA

var d2: IHasVisualizationModel = moduleA || i;
>d2 : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel
>moduleA || i : IHasVisualizationModel
>moduleA : 类为 moduleA
>i : IHasVisualizationModel

var e: { x: IHasVisualizationModel } = <{ x: IHasVisualizationModel }>null || { x: moduleA };
>e : { x: IHasVisualizationModel; }
>x : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel
><{ x: IHasVisualizationModel }>null || { x: moduleA } : { x: IHasVisualizationModel; }
><{ x: IHasVisualizationModel }>null : { x: IHasVisualizationModel; }
>x : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel
>null : 空值
>类型别名 :=> 空值
>{ x: moduleA } : { x: 类为 moduleA; }
>x : 类为 moduleA
>moduleA : 类为 moduleA

var f: { x: IHasVisualizationModel } = <{ x: IHasVisualizationModel }>null ? { x: moduleA } : null;
>f : { x: IHasVisualizationModel; }
>x : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel
><{ x: IHasVisualizationModel }>null ? { x: moduleA } : null : { x: 类为 moduleA; }
><{ x: IHasVisualizationModel }>null : { x: IHasVisualizationModel; }
>x : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel
>null : 空值
>类型别名 :=> 空值
>{ x: moduleA } : { x: 类为 moduleA; }
>x : 类为 moduleA
>moduleA : 类为 moduleA
>null : 空值
>类型别名 :=> 空值

=== tests/cases/compiler/aliasUsageInOrExpression_backbone.ts ===
export class Model {
>Model : Model

    public someData: string;
>someData : 文字
>类型别名 :=> 文字
}

=== tests/cases/compiler/aliasUsageInOrExpression_moduleA.ts ===
import Backbone = require("./aliasUsageInOrExpression_backbone");
>Backbone : 类为 Backbone

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : VisualizationModel
>Backbone.Model : Backbone.Model
>Backbone : 类为 Backbone
>Model : 类为 Backbone.Model

    // interesting stuff here
}

