=== tests/cases/conformance/expressions/functionCalls/typeArgumentInferenceWithObjectLiteral.ts ===
interface Computed<T> {
>Computed : Computed<T>
>T : T

    read(): T;
>read : () => T
>T : T

    write(value: T);
>write : (value: T) => any
>value : T
>T : T
}

function foo<T>(x: Computed<T>) { }
>foo : <T>(x: Computed<T>) => void
>T : T
>x : Computed<T>
>Computed : Computed<T>
>T : T

var s: string;
>s : string
>类型别名 :=> 文字

// Calls below should infer string for T and then assign that type to the value parameter
foo({
>foo({    read: () => s,    write: value => s = value}) : void
>类型别名 :=> 无值
>foo : <T>(x: Computed<T>) => void
>{    read: () => s,    write: value => s = value} : { read: () => string; write: (value: string) => string; }

    read: () => s,
>read : () => string
>() => s : () => string
>s : string
>类型别名 :=> 文字

    write: value => s = value
>write : (value: string) => string
>value => s = value : (value: string) => string
>value : string
>类型别名 :=> 文字
>s = value : string
>类型别名 :=> 文字
>s : string
>类型别名 :=> 文字
>value : string
>类型别名 :=> 文字

});
foo({
>foo({    write: value => s = value,    read: () => s}) : void
>类型别名 :=> 无值
>foo : <T>(x: Computed<T>) => void
>{    write: value => s = value,    read: () => s} : { write: (value: string) => string; read: () => string; }

    write: value => s = value,
>write : (value: string) => string
>value => s = value : (value: string) => string
>value : string
>类型别名 :=> 文字
>s = value : string
>类型别名 :=> 文字
>s : string
>类型别名 :=> 文字
>value : string
>类型别名 :=> 文字

    read: () => s
>read : () => string
>() => s : () => string
>s : string
>类型别名 :=> 文字

});

enum E1 { X }
>E1 : E1
>X : E1

enum E2 { X }
>E2 : E2
>X : E2

// Check that we infer from both a.r and b before fixing T in a.w

declare function f1<T, U>(a: { w: (x: T) => U; r: () => T; }, b: T): U;
>f1 : <T, U>(a: { w: (x: T) => U; r: () => T; }, b: T) => U
>T : T
>U : U
>a : { w: (x: T) => U; r: () => T; }
>w : (x: T) => U
>x : T
>T : T
>U : U
>r : () => T
>T : T
>b : T
>T : T
>U : U

var v1: number;
>v1 : number
>类型别名 :=> 数字

var v1 = f1({ w: x => x, r: () => 0 }, 0);
>v1 : number
>类型别名 :=> 数字
>f1({ w: x => x, r: () => 0 }, 0) : number
>类型别名 :=> 数字
>f1 : <T, U>(a: { w: (x: T) => U; r: () => T; }, b: T) => U
>{ w: x => x, r: () => 0 } : { w: (x: number) => number; r: () => number; }
>w : (x: number) => number
>x => x : (x: number) => number
>x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>r : () => number
>() => 0 : () => number
>0 : 0
>0 : 0

var v1 = f1({ w: x => x, r: () => 0 }, E1.X);
>v1 : number
>类型别名 :=> 数字
>f1({ w: x => x, r: () => 0 }, E1.X) : number
>类型别名 :=> 数字
>f1 : <T, U>(a: { w: (x: T) => U; r: () => T; }, b: T) => U
>{ w: x => x, r: () => 0 } : { w: (x: number) => number; r: () => number; }
>w : (x: number) => number
>x => x : (x: number) => number
>x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>r : () => number
>() => 0 : () => number
>0 : 0
>E1.X : E1
>E1 : typeof E1
>X : E1

var v1 = f1({ w: x => x, r: () => E1.X }, 0);
>v1 : number
>类型别名 :=> 数字
>f1({ w: x => x, r: () => E1.X }, 0) : number
>类型别名 :=> 数字
>f1 : <T, U>(a: { w: (x: T) => U; r: () => T; }, b: T) => U
>{ w: x => x, r: () => E1.X } : { w: (x: 0) => number; r: () => E1; }
>w : (x: 0) => number
>x => x : (x: 0) => number
>x : 0
>x : 0
>r : () => E1
>() => E1.X : () => E1
>E1.X : E1
>E1 : typeof E1
>X : E1
>0 : 0

var v2: E1;
>v2 : E1
>E1 : E1

var v2 = f1({ w: x => x, r: () => E1.X }, E1.X);
>v2 : E1
>f1({ w: x => x, r: () => E1.X }, E1.X) : E1
>f1 : <T, U>(a: { w: (x: T) => U; r: () => T; }, b: T) => U
>{ w: x => x, r: () => E1.X } : { w: (x: E1) => E1; r: () => E1; }
>w : (x: E1) => E1
>x => x : (x: E1) => E1
>x : E1
>x : E1
>r : () => E1
>() => E1.X : () => E1
>E1.X : E1
>E1 : typeof E1
>X : E1
>E1.X : E1
>E1 : typeof E1
>X : E1

var v3 = f1({ w: x => x, r: () => E1.X }, E2.X);  // Error
>v3 : any
>类型别名 :=> 任意
>f1({ w: x => x, r: () => E1.X }, E2.X) : any
>类型别名 :=> 任意
>f1 : <T, U>(a: { w: (x: T) => U; r: () => T; }, b: T) => U
>{ w: x => x, r: () => E1.X } : { w: (x: E1) => E1; r: () => E1; }
>w : (x: E1) => E1
>x => x : (x: E1) => E1
>x : E1
>x : E1
>r : () => E1
>() => E1.X : () => E1
>E1.X : E1
>E1 : typeof E1
>X : E1
>E2.X : E2
>E2 : typeof E2
>X : E2

