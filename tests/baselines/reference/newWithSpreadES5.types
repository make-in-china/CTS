=== tests/cases/conformance/expressions/functionCalls/newWithSpreadES5.ts ===
function f(x: number, y: number, ...z: string[]) {
>f : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 文字[]
}

function f2(...x: string[]) {}
>f2 : (...x: 文字[]) => 无值
>x : 文字[]

interface A {
>A : A

    f: {
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意

        new (x: number, y: number, ...z: string[]);
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 文字[]
    }
}

class B {
>B : B

    constructor(x: number, y: number, ...z: string[]) {}
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 文字[]
}

interface C {
>C : C

    "a-b": typeof B;
>B : 类为 B
}

interface D {
>D : D

    1: typeof B;
>B : 类为 B
}

var a: string[];
>a : 文字[]

var b: A;
>b : A
>A : A

var c: C;
>c : C
>C : C

var d: A[];
>d : A[]
>A : A

var e: { [key: string]: A };
>e : { [key: 文字]: A; }
>key : 文字
>类型别名 :=> 文字
>A : A

var g: C[];
>g : C[]
>C : C

var h: { [key: string]: C };
>h : { [key: 文字]: C; }
>key : 文字
>类型别名 :=> 文字
>C : C

var i: C[][];
>i : C[][]
>C : C

// Basic expression
new f(1, 2, "string");
>new f(1, 2, "string") : 任意
>类型别名 :=> 任意
>f : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>"string" : "string"

new f(1, 2, ...a);
>new f(1, 2, ...a) : 任意
>类型别名 :=> 任意
>f : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new f(1, 2, ...a, "string");
>new f(1, 2, ...a, "string") : 任意
>类型别名 :=> 任意
>f : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Multiple spreads arguments
new f2(...a, ...a);
>new f2(...a, ...a) : 任意
>类型别名 :=> 任意
>f2 : (...x: 文字[]) => 无值
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new f(1 ,2, ...a, ...a);
>new f(1 ,2, ...a, ...a) : 任意
>类型别名 :=> 任意
>f : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

// Call expression
new f(1, 2, "string")();
>new f(1, 2, "string")() : 任意
>类型别名 :=> 任意
>new f(1, 2, "string") : 任意
>类型别名 :=> 任意
>f : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>"string" : "string"

new f(1, 2, ...a)();
>new f(1, 2, ...a)() : 任意
>类型别名 :=> 任意
>new f(1, 2, ...a) : 任意
>类型别名 :=> 任意
>f : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new f(1, 2, ...a, "string")();
>new f(1, 2, ...a, "string")() : 任意
>类型别名 :=> 任意
>new f(1, 2, ...a, "string") : 任意
>类型别名 :=> 任意
>f : (x: 数字, y: 数字, ...z: 文字[]) => 无值
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Property access expression
new b.f(1, 2, "string");
>new b.f(1, 2, "string") : 任意
>类型别名 :=> 任意
>b.f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>b : A
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>"string" : "string"

new b.f(1, 2, ...a);
>new b.f(1, 2, ...a) : 任意
>类型别名 :=> 任意
>b.f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>b : A
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new b.f(1, 2, ...a, "string"); 
>new b.f(1, 2, ...a, "string") : 任意
>类型别名 :=> 任意
>b.f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>b : A
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Parenthesised expression
new (b.f)(1, 2, "string");
>new (b.f)(1, 2, "string") : 任意
>类型别名 :=> 任意
>(b.f) : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>b.f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>b : A
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>"string" : "string"

new (b.f)(1, 2, ...a);
>new (b.f)(1, 2, ...a) : 任意
>类型别名 :=> 任意
>(b.f) : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>b.f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>b : A
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new (b.f)(1, 2, ...a, "string"); 
>new (b.f)(1, 2, ...a, "string") : 任意
>类型别名 :=> 任意
>(b.f) : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>b.f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>b : A
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Element access expression
new d[1].f(1, 2, "string");
>new d[1].f(1, 2, "string") : 任意
>类型别名 :=> 任意
>d[1].f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>d[1] : A
>d : A[]
>1 : 1
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>"string" : "string"

new d[1].f(1, 2, ...a);
>new d[1].f(1, 2, ...a) : 任意
>类型别名 :=> 任意
>d[1].f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>d[1] : A
>d : A[]
>1 : 1
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new d[1].f(1, 2, ...a, "string");
>new d[1].f(1, 2, ...a, "string") : 任意
>类型别名 :=> 任意
>d[1].f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>d[1] : A
>d : A[]
>1 : 1
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Element access expression with a punctuated key
new e["a-b"].f(1, 2, "string");
>new e["a-b"].f(1, 2, "string") : 任意
>类型别名 :=> 任意
>e["a-b"].f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>e["a-b"] : A
>e : { [key: 文字]: A; }
>"a-b" : "a-b"
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>"string" : "string"

new e["a-b"].f(1, 2, ...a);
>new e["a-b"].f(1, 2, ...a) : 任意
>类型别名 :=> 任意
>e["a-b"].f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>e["a-b"] : A
>e : { [key: 文字]: A; }
>"a-b" : "a-b"
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new e["a-b"].f(1, 2, ...a, "string");
>new e["a-b"].f(1, 2, ...a, "string") : 任意
>类型别名 :=> 任意
>e["a-b"].f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>e["a-b"] : A
>e : { [key: 文字]: A; }
>"a-b" : "a-b"
>f : 新建 (x: 数字, y: 数字, ...z: 文字[]) => 任意
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Basic expression
new B(1, 2, "string");
>new B(1, 2, "string") : B
>B : 类为 B
>1 : 1
>2 : 2
>"string" : "string"

new B(1, 2, ...a);
>new B(1, 2, ...a) : B
>B : 类为 B
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new B(1, 2, ...a, "string");
>new B(1, 2, ...a, "string") : B
>B : 类为 B
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Property access expression
new c["a-b"](1, 2, "string");
>new c["a-b"](1, 2, "string") : B
>c["a-b"] : 类为 B
>c : C
>"a-b" : "a-b"
>1 : 1
>2 : 2
>"string" : "string"

new c["a-b"](1, 2, ...a);
>new c["a-b"](1, 2, ...a) : B
>c["a-b"] : 类为 B
>c : C
>"a-b" : "a-b"
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new c["a-b"](1, 2, ...a, "string");
>new c["a-b"](1, 2, ...a, "string") : B
>c["a-b"] : 类为 B
>c : C
>"a-b" : "a-b"
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Parenthesised expression
new (c["a-b"])(1, 2, "string");
>new (c["a-b"])(1, 2, "string") : B
>(c["a-b"]) : 类为 B
>c["a-b"] : 类为 B
>c : C
>"a-b" : "a-b"
>1 : 1
>2 : 2
>"string" : "string"

new (c["a-b"])(1, 2, ...a);
>new (c["a-b"])(1, 2, ...a) : B
>(c["a-b"]) : 类为 B
>c["a-b"] : 类为 B
>c : C
>"a-b" : "a-b"
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new (c["a-b"])(1, 2, ...a, "string");
>new (c["a-b"])(1, 2, ...a, "string") : B
>(c["a-b"]) : 类为 B
>c["a-b"] : 类为 B
>c : C
>"a-b" : "a-b"
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Element access expression
new g[1]["a-b"](1, 2, "string");
>new g[1]["a-b"](1, 2, "string") : B
>g[1]["a-b"] : 类为 B
>g[1] : C
>g : C[]
>1 : 1
>"a-b" : "a-b"
>1 : 1
>2 : 2
>"string" : "string"

new g[1]["a-b"](1, 2, ...a);
>new g[1]["a-b"](1, 2, ...a) : B
>g[1]["a-b"] : 类为 B
>g[1] : C
>g : C[]
>1 : 1
>"a-b" : "a-b"
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new g[1]["a-b"](1, 2, ...a, "string");
>new g[1]["a-b"](1, 2, ...a, "string") : B
>g[1]["a-b"] : 类为 B
>g[1] : C
>g : C[]
>1 : 1
>"a-b" : "a-b"
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Element access expression with a punctuated key
new h["a-b"]["a-b"](1, 2, "string");
>new h["a-b"]["a-b"](1, 2, "string") : B
>h["a-b"]["a-b"] : 类为 B
>h["a-b"] : C
>h : { [key: 文字]: C; }
>"a-b" : "a-b"
>"a-b" : "a-b"
>1 : 1
>2 : 2
>"string" : "string"

new h["a-b"]["a-b"](1, 2, ...a);
>new h["a-b"]["a-b"](1, 2, ...a) : B
>h["a-b"]["a-b"] : 类为 B
>h["a-b"] : C
>h : { [key: 文字]: C; }
>"a-b" : "a-b"
>"a-b" : "a-b"
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new h["a-b"]["a-b"](1, 2, ...a, "string");
>new h["a-b"]["a-b"](1, 2, ...a, "string") : B
>h["a-b"]["a-b"] : 类为 B
>h["a-b"] : C
>h : { [key: 文字]: C; }
>"a-b" : "a-b"
>"a-b" : "a-b"
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

// Element access expression with a number
new i["a-b"][1](1, 2, "string");
>new i["a-b"][1](1, 2, "string") : 任意
>类型别名 :=> 任意
>i["a-b"][1] : 任意
>类型别名 :=> 任意
>i["a-b"] : 任意
>类型别名 :=> 任意
>i : C[][]
>"a-b" : "a-b"
>1 : 1
>1 : 1
>2 : 2
>"string" : "string"

new i["a-b"][1](1, 2, ...a);
>new i["a-b"][1](1, 2, ...a) : 任意
>类型别名 :=> 任意
>i["a-b"][1] : 任意
>类型别名 :=> 任意
>i["a-b"] : 任意
>类型别名 :=> 任意
>i : C[][]
>"a-b" : "a-b"
>1 : 1
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]

new i["a-b"][1](1, 2, ...a, "string");
>new i["a-b"][1](1, 2, ...a, "string") : 任意
>类型别名 :=> 任意
>i["a-b"][1] : 任意
>类型别名 :=> 任意
>i["a-b"] : 任意
>类型别名 :=> 任意
>i : C[][]
>"a-b" : "a-b"
>1 : 1
>1 : 1
>2 : 2
>...a : 文字
>类型别名 :=> 文字
>a : 文字[]
>"string" : "string"

