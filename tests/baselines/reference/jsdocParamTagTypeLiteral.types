=== tests/cases/conformance/jsdoc/0.js ===
/**
 * @param {Object} notSpecial
 * @param {string} unrelated - not actually related because it's not notSpecial.unrelated
 */
function normal(notSpecial) {
>normal : (notSpecial: any) => void
>notSpecial : any
>类型别名 :=> 任意

    notSpecial; // should just be 'any'
>notSpecial : any
>类型别名 :=> 任意
}
normal(12);
>normal(12) : void
>类型别名 :=> 无值
>normal : (notSpecial: any) => void
>12 : 12

/**
 * @param {Object} opts1 doc1
 * @param {string} opts1.x doc2
 * @param {string=} opts1.y doc3
 * @param {string} [opts1.z] doc4
 * @param {string} [opts1.w="hi"] doc5
 */
function foo1(opts1) {
>foo1 : (opts1: { x: string; y?: string; z?: string; w?: string; }) => void
>opts1 : { x: string; y?: string; z?: string; w?: string; }

    opts1.x;
>opts1.x : string
>类型别名 :=> 文字
>opts1 : { x: string; y?: string; z?: string; w?: string; }
>x : string
>类型别名 :=> 文字
}

foo1({x: 'abc'});
>foo1({x: 'abc'}) : void
>类型别名 :=> 无值
>foo1 : (opts1: { x: string; y?: string; z?: string; w?: string; }) => void
>{x: 'abc'} : { x: string; }
>x : string
>类型别名 :=> 文字
>'abc' : "abc"

/**
 * @param {Object[]} opts2
 * @param {string} opts2[].anotherX
 * @param {string=} opts2[].anotherY
 */
function foo2(/** @param opts2 bad idea theatre! */opts2) {
>foo2 : (opts2: { anotherX: string; anotherY?: string; }[]) => void
>opts2 : { anotherX: string; anotherY?: string; }[]

    opts2[0].anotherX;
>opts2[0].anotherX : string
>类型别名 :=> 文字
>opts2[0] : { anotherX: string; anotherY?: string; }
>opts2 : { anotherX: string; anotherY?: string; }[]
>0 : 0
>anotherX : string
>类型别名 :=> 文字
}

foo2([{anotherX: "world"}]);
>foo2([{anotherX: "world"}]) : void
>类型别名 :=> 无值
>foo2 : (opts2: { anotherX: string; anotherY?: string; }[]) => void
>[{anotherX: "world"}] : { anotherX: string; }[]
>{anotherX: "world"} : { anotherX: string; }
>anotherX : string
>类型别名 :=> 文字
>"world" : "world"

/**
 * @param {object} opts3
 * @param {string} opts3.x
 */
function foo3(opts3) {
>foo3 : (opts3: { x: string; }) => void
>opts3 : { x: string; }

    opts3.x;
>opts3.x : string
>类型别名 :=> 文字
>opts3 : { x: string; }
>x : string
>类型别名 :=> 文字
}
foo3({x: 'abc'});
>foo3({x: 'abc'}) : void
>类型别名 :=> 无值
>foo3 : (opts3: { x: string; }) => void
>{x: 'abc'} : { x: string; }
>x : string
>类型别名 :=> 文字
>'abc' : "abc"

/**
 * @param {object[]} opts4
 * @param {string} opts4[].x
 * @param {string=} opts4[].y
 * @param {string} [opts4[].z]
 * @param {string} [opts4[].w="hi"]
 */
function foo4(opts4) {
>foo4 : (opts4: { x: string; y?: string; z?: string; w?: string; }[]) => void
>opts4 : { x: string; y?: string; z?: string; w?: string; }[]

    opts4[0].x;
>opts4[0].x : string
>类型别名 :=> 文字
>opts4[0] : { x: string; y?: string; z?: string; w?: string; }
>opts4 : { x: string; y?: string; z?: string; w?: string; }[]
>0 : 0
>x : string
>类型别名 :=> 文字
}

foo4([{ x: 'hi' }]);
>foo4([{ x: 'hi' }]) : void
>类型别名 :=> 无值
>foo4 : (opts4: { x: string; y?: string; z?: string; w?: string; }[]) => void
>[{ x: 'hi' }] : { x: string; }[]
>{ x: 'hi' } : { x: string; }
>x : string
>类型别名 :=> 文字
>'hi' : "hi"

/**
 * @param {object[]} opts5 - Let's test out some multiple nesting levels
 * @param {string} opts5[].help - (This one is just normal)
 * @param {object} opts5[].what - Look at us go! Here's the first nest!
 * @param {string} opts5[].what.a - (Another normal one)
 * @param {Object[]} opts5[].what.bad - Now we're nesting inside a nested type
 * @param {string} opts5[].what.bad[].idea - I don't think you can get back out of this level...
 * @param {boolean} opts5[].what.bad[].oh - Oh ... that's how you do it.
 * @param {number} opts5[].unnest - Here we are almost all the way back at the beginning.
 */
function foo5(opts5) {
>foo5 : (opts5: { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }[]) => void
>opts5 : { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }[]

    opts5[0].what.bad[0].idea;
>opts5[0].what.bad[0].idea : string
>类型别名 :=> 文字
>opts5[0].what.bad[0] : { idea: string; oh: boolean; }
>opts5[0].what.bad : { idea: string; oh: boolean; }[]
>opts5[0].what : { a: string; bad: { idea: string; oh: boolean; }[]; }
>opts5[0] : { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }
>opts5 : { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }[]
>0 : 0
>what : { a: string; bad: { idea: string; oh: boolean; }[]; }
>bad : { idea: string; oh: boolean; }[]
>0 : 0
>idea : string
>类型别名 :=> 文字

    opts5[0].unnest;
>opts5[0].unnest : number
>类型别名 :=> 数字
>opts5[0] : { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }
>opts5 : { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }[]
>0 : 0
>unnest : number
>类型别名 :=> 数字
}

foo5([{ help: "help", what: { a: 'a', bad: [{ idea: 'idea', oh: false }] }, unnest: 1 }]);
>foo5([{ help: "help", what: { a: 'a', bad: [{ idea: 'idea', oh: false }] }, unnest: 1 }]) : void
>类型别名 :=> 无值
>foo5 : (opts5: { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }[]) => void
>[{ help: "help", what: { a: 'a', bad: [{ idea: 'idea', oh: false }] }, unnest: 1 }] : { help: string; what: { a: string; bad: { idea: string; oh: false; }[]; }; unnest: number; }[]
>{ help: "help", what: { a: 'a', bad: [{ idea: 'idea', oh: false }] }, unnest: 1 } : { help: string; what: { a: string; bad: { idea: string; oh: false; }[]; }; unnest: number; }
>help : string
>类型别名 :=> 文字
>"help" : "help"
>what : { a: string; bad: { idea: string; oh: false; }[]; }
>{ a: 'a', bad: [{ idea: 'idea', oh: false }] } : { a: string; bad: { idea: string; oh: false; }[]; }
>a : string
>类型别名 :=> 文字
>'a' : "a"
>bad : { idea: string; oh: false; }[]
>[{ idea: 'idea', oh: false }] : { idea: string; oh: false; }[]
>{ idea: 'idea', oh: false } : { idea: string; oh: false; }
>idea : string
>类型别名 :=> 文字
>'idea' : "idea"
>oh : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>unnest : number
>类型别名 :=> 数字
>1 : 1

