=== tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandNumberType.ts ===
var ANY: any;
>ANY : 任意
>类型别名 :=> 任意

var BOOLEAN: boolean;
>BOOLEAN : 真假
>类型别名 :=> 真假

var NUMBER: number;
>NUMBER : 数字
>类型别名 :=> 数字

var STRING: string;
>STRING : 文字
>类型别名 :=> 文字

var OBJECT: Object;
>OBJECT : Object
>Object : Object

//The second operand type is number
ANY, NUMBER;
>ANY, NUMBER : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意
>NUMBER : 数字
>类型别名 :=> 数字

BOOLEAN, NUMBER;
>BOOLEAN, NUMBER : 数字
>类型别名 :=> 数字
>BOOLEAN : 真假
>类型别名 :=> 真假
>NUMBER : 数字
>类型别名 :=> 数字

NUMBER, NUMBER;
>NUMBER, NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

STRING, NUMBER;
>STRING, NUMBER : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字
>NUMBER : 数字
>类型别名 :=> 数字

OBJECT, NUMBER;
>OBJECT, NUMBER : 数字
>类型别名 :=> 数字
>OBJECT : Object
>NUMBER : 数字
>类型别名 :=> 数字

//Return type is number
var resultIsNumber1 = (ANY, NUMBER);
>resultIsNumber1 : 数字
>类型别名 :=> 数字
>(ANY, NUMBER) : 数字
>类型别名 :=> 数字
>ANY, NUMBER : 数字
>类型别名 :=> 数字
>ANY : 任意
>类型别名 :=> 任意
>NUMBER : 数字
>类型别名 :=> 数字

var resultIsNumber2 = (BOOLEAN, NUMBER);
>resultIsNumber2 : 数字
>类型别名 :=> 数字
>(BOOLEAN, NUMBER) : 数字
>类型别名 :=> 数字
>BOOLEAN, NUMBER : 数字
>类型别名 :=> 数字
>BOOLEAN : 真假
>类型别名 :=> 真假
>NUMBER : 数字
>类型别名 :=> 数字

var resultIsNumber3 = (NUMBER, NUMBER);
>resultIsNumber3 : 数字
>类型别名 :=> 数字
>(NUMBER, NUMBER) : 数字
>类型别名 :=> 数字
>NUMBER, NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

var resultIsNumber4 = (STRING, NUMBER);
>resultIsNumber4 : 数字
>类型别名 :=> 数字
>(STRING, NUMBER) : 数字
>类型别名 :=> 数字
>STRING, NUMBER : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字
>NUMBER : 数字
>类型别名 :=> 数字

var resultIsNumber5 = (OBJECT, NUMBER);
>resultIsNumber5 : 数字
>类型别名 :=> 数字
>(OBJECT, NUMBER) : 数字
>类型别名 :=> 数字
>OBJECT, NUMBER : 数字
>类型别名 :=> 数字
>OBJECT : Object
>NUMBER : 数字
>类型别名 :=> 数字

//Literal and expression
null, NUMBER;
>null, NUMBER : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值
>NUMBER : 数字
>类型别名 :=> 数字

ANY = undefined, NUMBER;
>ANY = undefined, NUMBER : 数字
>类型别名 :=> 数字
>ANY = undefined : 未定
>类型别名 :=> 未定
>ANY : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>NUMBER : 数字
>类型别名 :=> 数字

true, 1;
>true, 1 : 1
>true : 为真
>类型别名 :=> 为真
>1 : 1

BOOLEAN = false, 1;
>BOOLEAN = false, 1 : 1
>BOOLEAN = false : 为假
>类型别名 :=> 为假
>BOOLEAN : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>1 : 1

"", NUMBER = 1;
>"", NUMBER = 1 : 1
>"" : ""
>NUMBER = 1 : 1
>NUMBER : 数字
>类型别名 :=> 数字
>1 : 1

STRING.trim(), NUMBER = 1;
>STRING.trim(), NUMBER = 1 : 1
>STRING.trim() : 文字
>类型别名 :=> 文字
>STRING.trim : () => 文字
>STRING : 文字
>类型别名 :=> 文字
>trim : () => 文字
>NUMBER = 1 : 1
>NUMBER : 数字
>类型别名 :=> 数字
>1 : 1

var resultIsNumber6 = (null, NUMBER);
>resultIsNumber6 : 数字
>类型别名 :=> 数字
>(null, NUMBER) : 数字
>类型别名 :=> 数字
>null, NUMBER : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值
>NUMBER : 数字
>类型别名 :=> 数字

var resultIsNumber7 = (ANY = undefined, NUMBER);
>resultIsNumber7 : 数字
>类型别名 :=> 数字
>(ANY = undefined, NUMBER) : 数字
>类型别名 :=> 数字
>ANY = undefined, NUMBER : 数字
>类型别名 :=> 数字
>ANY = undefined : 未定
>类型别名 :=> 未定
>ANY : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>NUMBER : 数字
>类型别名 :=> 数字

var resultIsNumber8 = (true, 1);
>resultIsNumber8 : 数字
>类型别名 :=> 数字
>(true, 1) : 1
>true, 1 : 1
>true : 为真
>类型别名 :=> 为真
>1 : 1

var resultIsNumber9 = (BOOLEAN = false, 1);
>resultIsNumber9 : 数字
>类型别名 :=> 数字
>(BOOLEAN = false, 1) : 1
>BOOLEAN = false, 1 : 1
>BOOLEAN = false : 为假
>类型别名 :=> 为假
>BOOLEAN : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>1 : 1

var resultIsNumber10 = ("", NUMBER = 1);
>resultIsNumber10 : 数字
>类型别名 :=> 数字
>("", NUMBER = 1) : 1
>"", NUMBER = 1 : 1
>"" : ""
>NUMBER = 1 : 1
>NUMBER : 数字
>类型别名 :=> 数字
>1 : 1

var resultIsNumber11 = (STRING.trim(), NUMBER = 1);
>resultIsNumber11 : 数字
>类型别名 :=> 数字
>(STRING.trim(), NUMBER = 1) : 1
>STRING.trim(), NUMBER = 1 : 1
>STRING.trim() : 文字
>类型别名 :=> 文字
>STRING.trim : () => 文字
>STRING : 文字
>类型别名 :=> 文字
>trim : () => 文字
>NUMBER = 1 : 1
>NUMBER : 数字
>类型别名 :=> 数字
>1 : 1

