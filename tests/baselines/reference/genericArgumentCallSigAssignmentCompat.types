=== tests/cases/compiler/genericArgumentCallSigAssignmentCompat.ts ===
module Underscore {
>Underscore : 任意
>类型别名 :=> 任意

    export interface Iterator<T, U> {
>Iterator : Iterator<T, U>
>T : T
>U : U

        (value: T, index: any, list: any): U;
>value : T
>T : T
>index : 任意
>类型别名 :=> 任意
>list : 任意
>类型别名 :=> 任意
>U : U
    }
 
    export interface Static {
>Static : Static

        all<T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean;
>all : <T>(list: T[], iterator?: Iterator<T, 真假>, context?: 任意) => 真假
>T : T
>list : T[]
>T : T
>iterator : Iterator<T, 真假>
>Iterator : Iterator<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        identity<T>(value: T): T;
>identity : <T>(value: T) => T
>T : T
>value : T
>T : T
>T : T
    }
}
 
declare var _: Underscore.Static;
>_ : Underscore.Static
>Underscore : 任意
>类型别名 :=> 任意
>Static : Underscore.Static
 
// No error, Call signatures of types '<T>(value: T) => T' and 'Underscore.Iterator<{}, boolean>' are compatible when instantiated with any.
// Ideally, we would not have a generic signature here, because it should be instantiated with {} during inferential typing
_.all([true, 1, null, 'yes'], _.identity);
>_.all([true, 1, null, 'yes'], _.identity) : 任意
>类型别名 :=> 任意
>_.all : <T>(list: T[], iterator?: Underscore.Iterator<T, 真假>, context?: 任意) => 真假
>_ : Underscore.Static
>all : <T>(list: T[], iterator?: Underscore.Iterator<T, 真假>, context?: 任意) => 真假
>[true, 1, null, 'yes'] : (文字 | 数字 | 真假)[]
>true : 为真
>类型别名 :=> 为真
>1 : 1
>null : 空值
>类型别名 :=> 空值
>'yes' : "yes"
>_.identity : <T>(value: T) => T
>_ : Underscore.Static
>identity : <T>(value: T) => T
 
// Ok, because fixing makes us infer boolean for T
_.all([true], _.identity);
>_.all([true], _.identity) : 真假
>类型别名 :=> 真假
>_.all : <T>(list: T[], iterator?: Underscore.Iterator<T, 真假>, context?: 任意) => 真假
>_ : Underscore.Static
>all : <T>(list: T[], iterator?: Underscore.Iterator<T, 真假>, context?: 任意) => 真假
>[true] : 为真[]
>true : 为真
>类型别名 :=> 为真
>_.identity : <T>(value: T) => T
>_ : Underscore.Static
>identity : <T>(value: T) => T

