=== tests/cases/compiler/targetTypeBaseCalls.ts ===
function foo(x: (s: string) => void) { }
>foo : (x: (s: 文字) => 无值) => 无值
>x : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字
 
 
 
class Foo { constructor(x: (s: string) => void){} }
>Foo : Foo
>x : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字
 
 
 
foo(function(s) { s = 5 });  // Error, can’t assign number to string
>foo(function(s) { s = 5 }) : 无值
>类型别名 :=> 无值
>foo : (x: (s: 文字) => 无值) => 无值
>function(s) { s = 5 } : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字
>s = 5 : 5
>s : 文字
>类型别名 :=> 文字
>5 : 5
 
 
 
new Foo(function(s) { s = 5 });  // error, if types are applied correctly
>new Foo(function(s) { s = 5 }) : Foo
>Foo : 类为 Foo
>function(s) { s = 5 } : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字
>s = 5 : 5
>s : 文字
>类型别名 :=> 文字
>5 : 5
 
 
 
class Bar extends Foo { constructor() { super(function(s) { s = 5 }) } }  // error, if types are applied correctly
>Bar : Bar
>Foo : Foo
>super(function(s) { s = 5 }) : 无值
>类型别名 :=> 无值
>super : 类为 Foo
>function(s) { s = 5 } : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字
>s = 5 : 5
>s : 文字
>类型别名 :=> 文字
>5 : 5

