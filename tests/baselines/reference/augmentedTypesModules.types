=== tests/cases/compiler/augmentedTypesModules.ts ===
// module then var
module m1 { }
>m1 : 数字
>类型别名 :=> 数字

var m1 = 1; // Should be allowed
>m1 : 数字
>类型别名 :=> 数字
>1 : 1

module m1a { var y = 2; } // error
>m1a : 类为 m1a
>y : 数字
>类型别名 :=> 数字
>2 : 2

var m1a = 1; // error
>m1a : 数字
>类型别名 :=> 数字
>1 : 1

module m1b { export var y = 2; } // error
>m1b : 类为 m1b
>y : 数字
>类型别名 :=> 数字
>2 : 2

var m1b = 1; // error
>m1b : 数字
>类型别名 :=> 数字
>1 : 1

module m1c {
>m1c : 数字
>类型别名 :=> 数字

    export interface I { foo(): void; }
>I : I
>foo : () => 无值
}
var m1c = 1; // Should be allowed
>m1c : 数字
>类型别名 :=> 数字
>1 : 1

module m1d { // error
>m1d : 类为 m1d

    export class I { foo() { } }
>I : I
>foo : () => 无值
}
var m1d = 1; // error
>m1d : 数字
>类型别名 :=> 数字
>1 : 1

// module then function
module m2 { }
>m2 : () => 无值

function m2() { }; // ok since the module is not instantiated
>m2 : () => 无值

module m2a { var y = 2; }
>m2a : 类为 m2a
>y : 数字
>类型别名 :=> 数字
>2 : 2

function m2a() { }; // error since the module is instantiated
>m2a : 类为 m2a

module m2b { export var y = 2; }
>m2b : 类为 m2b
>y : 数字
>类型别名 :=> 数字
>2 : 2

function m2b() { };  // error since the module is instantiated
>m2b : 类为 m2b

// should be errors to have function first
function m2c() { }; 
>m2c : 类为 m2c

module m2c { export var y = 2; } 
>m2c : 类为 m2c
>y : 数字
>类型别名 :=> 数字
>2 : 2

module m2d { }
>m2d : () => 无值

declare function m2d(): void; 
>m2d : () => 无值

declare function m2e(): void; 
>m2e : () => 无值

module m2e { }
>m2e : () => 无值

function m2f() { };
>m2f : () => 无值

module m2f { export interface I { foo(): void } } 
>m2f : () => 无值
>I : I
>foo : () => 无值

function m2g() { };
>m2g : 类为 m2g

module m2g { export class C { foo() { } } } 
>m2g : 类为 m2g
>C : C
>foo : () => 无值

// module then class
module m3 { }
>m3 : 类为 m3

class m3 { } // ok since the module is not instantiated
>m3 : m3

module m3a { var y = 2; }
>m3a : 类为 m3a
>y : 数字
>类型别名 :=> 数字
>2 : 2

class m3a { foo() { } } // error, class isn't ambient or declared before the module
>m3a : m3a
>foo : () => 无值

class m3b { foo() { } }
>m3b : m3b
>foo : () => 无值

module m3b { var y = 2; }
>m3b : 类为 m3b
>y : 数字
>类型别名 :=> 数字
>2 : 2

class m3c { foo() { } }
>m3c : m3c
>foo : () => 无值

module m3c { export var y = 2; } 
>m3c : 类为 m3c
>y : 数字
>类型别名 :=> 数字
>2 : 2

declare class m3d { foo(): void }
>m3d : m3d
>foo : () => 无值

module m3d { export var y = 2; } 
>m3d : 类为 m3d
>y : 数字
>类型别名 :=> 数字
>2 : 2

module m3e { export var y = 2; } 
>m3e : 类为 m3e
>y : 数字
>类型别名 :=> 数字
>2 : 2

declare class m3e { foo(): void } 
>m3e : m3e
>foo : () => 无值

declare class m3f { foo(): void }
>m3f : m3f
>foo : () => 无值

module m3f { export interface I { foo(): void } }
>m3f : 类为 m3f
>I : I
>foo : () => 无值

declare class m3g { foo(): void }
>m3g : m3g
>foo : () => 无值

module m3g { export class C { foo() { } } }
>m3g : 类为 m3g
>C : C
>foo : () => 无值

// module then enum
// should be errors
module m4 { }
>m4 : 类为 m4

enum m4 { }
>m4 : m4

module m4a { var y = 2; }
>m4a : 类为 m4a
>y : 数字
>类型别名 :=> 数字
>2 : 2

enum m4a { One }
>m4a : m4a
>One : m4a

module m4b { export var y = 2; }
>m4b : 类为 m4b
>y : 数字
>类型别名 :=> 数字
>2 : 2

enum m4b { One }
>m4b : m4b
>One : m4b

module m4c { interface I { foo(): void } }
>m4c : 类为 m4c
>I : I
>foo : () => 无值

enum m4c { One }
>m4c : m4c
>One : m4c

module m4d { class C { foo() { } } }
>m4d : 类为 m4d
>C : C
>foo : () => 无值

enum m4d { One }
>m4d : m4d
>One : m4d

//// module then module

module m5 { export var y = 2; }
>m5 : 类为 m5
>y : 数字
>类型别名 :=> 数字
>2 : 2

module m5 { export interface I { foo(): void } } // should already be reasonably well covered
>m5 : 类为 m5
>I : I
>foo : () => 无值

// module then import
module m6 { export var y = 2; }
>m6 : 类为 m6
>y : 数字
>类型别名 :=> 数字
>2 : 2

//import m6 = require('');

