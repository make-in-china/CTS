=== tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck46.ts ===
declare function foo<T, U>(x: T, fun: () => Iterable<(x: T) => U>, fun2: (y: U) => T): T;
>foo : <T, U>(x: T, fun: () => Iterable<(x: T) => U>, fun2: (y: U) => T) => T
>T : T
>U : U
>x : T
>T : T
>fun : () => Iterable<(x: T) => U>
>Iterable : Iterable<T>
>x : T
>T : T
>U : U
>fun2 : (y: U) => T
>y : U
>U : U
>T : T
>T : T

foo("", function* () {
>foo("", function* () {    yield* {        *[Symbol.iterator]() {            yield x => x.length        }    }}, p => undefined) : 文字
>类型别名 :=> 文字
>foo : <T, U>(x: T, fun: () => Iterable<(x: T) => U>, fun2: (y: U) => T) => T
>"" : ""
>function* () {    yield* {        *[Symbol.iterator]() {            yield x => x.length        }    }} : () => IterableIterator<任意>

    yield* {
>yield* {        *[Symbol.iterator]() {            yield x => x.length        }    } : 任意
>类型别名 :=> 任意
>{        *[Symbol.iterator]() {            yield x => x.length        }    } : { [Symbol.iterator](): IterableIterator<(x: 文字) => 数字>; }

        *[Symbol.iterator]() {
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号

            yield x => x.length
>yield x => x.length : 任意
>类型别名 :=> 任意
>x => x.length : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
        }
    }
}, p => undefined); // T is fixed, should be string
>p => undefined : (p: {}) => 任意
>p : {}
>undefined : 未定
>类型别名 :=> 未定

