=== tests/cases/compiler/constructorWithCapturedSuper.ts ===
let oneA: A;
>oneA : A
>A : A

class A {
>A : A

    constructor() {
        return oneA;
>oneA : A
    }
}

class B extends A {
>B : B
>A : A

    constructor(x: number) {
>x : 数字
>类型别名 :=> 数字

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 A

        if (x === 1) {
>x === 1 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>1 : 1

            return;
        }
        while (x < 2) {
>x < 2 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>2 : 2

            return;
        }
        try {
            return
        }
        catch (e) {
>e : 任意
>类型别名 :=> 任意

            return;
        }
        finally {
            return;
        }
    }
}

class C extends A {
>C : C
>A : A

    constructor(x: number) {
>x : 数字
>类型别名 :=> 数字

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 A

        for (let i = 0; i < 10; ++i) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 10 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>10 : 10
>++i : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

            () => i + x;
>() => i + x : () => 数字
>i + x : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

            if (x === 1) {
>x === 1 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>1 : 1

                return;
            } 
        }
    }
}

class D extends A {
>D : D
>A : A

    constructor(x: number) {
>x : 数字
>类型别名 :=> 数字

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 A

        () => {
>() => {            return;        } : () => 无值

            return;
        }
        function foo() {
>foo : () => 无值

            return;
        }
    }
}
