=== tests/cases/conformance/interfaces/declarationMerging/twoInterfacesDifferentRootModule2.ts ===
// two interfaces with different root modules should not merge

module M {
>M : typeof M

    export interface A {
>A : A

        foo: string;
>foo : string
>类型别名 :=> 文字
    }

    export interface B<T> {
>B : B<T>
>T : T

        foo: T;
>foo : T
>T : T
    }

    module M2 {
>M2 : typeof M2

        export interface A {
>A : A

            bar: number;
>bar : number
>类型别名 :=> 数字
        }

        var a: A;
>a : A
>A : A

        var r1 = a.foo; // error
>r1 : any
>类型别名 :=> 任意
>a.foo : any
>类型别名 :=> 任意
>a : A
>foo : any
>类型别名 :=> 任意

        var r2 = a.bar;
>r2 : number
>类型别名 :=> 数字
>a.bar : number
>类型别名 :=> 数字
>a : A
>bar : number
>类型别名 :=> 数字

        export interface B<T> {
>B : B<T>
>T : T

            bar: T;
>bar : T
>T : T
        }

        var b: B<string>;
>b : B<string>
>B : B<T>

        var r3 = b.foo; // error
>r3 : any
>类型别名 :=> 任意
>b.foo : any
>类型别名 :=> 任意
>b : B<string>
>foo : any
>类型别名 :=> 任意

        var r4 = b.bar;
>r4 : string
>类型别名 :=> 文字
>b.bar : string
>类型别名 :=> 文字
>b : B<string>
>bar : string
>类型别名 :=> 文字
    }

    var a: A;
>a : A
>A : A

    var r1 = a.foo; 
>r1 : string
>类型别名 :=> 文字
>a.foo : string
>类型别名 :=> 文字
>a : A
>foo : string
>类型别名 :=> 文字

    var r2 = a.bar; // error
>r2 : any
>类型别名 :=> 任意
>a.bar : any
>类型别名 :=> 任意
>a : A
>bar : any
>类型别名 :=> 任意

    var b: B<string>;
>b : B<string>
>B : B<T>

    var r3 = b.foo; 
>r3 : string
>类型别名 :=> 文字
>b.foo : string
>类型别名 :=> 文字
>b : B<string>
>foo : string
>类型别名 :=> 文字

    var r4 = b.bar; // error
>r4 : any
>类型别名 :=> 任意
>b.bar : any
>类型别名 :=> 任意
>b : B<string>
>bar : any
>类型别名 :=> 任意
}
