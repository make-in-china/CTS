=== tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithAnyOtherTypeInvalidOperations.ts ===
// -- operator on any type
var ANY1: any;
>ANY1 : 任意
>类型别名 :=> 任意

var ANY2: any[] = ["", ""];
>ANY2 : 任意[]
>["", ""] : 文字[]
>"" : ""
>"" : ""

var obj: () => {}
>obj : () => {}

var obj1 = { x: "", y: () => { } };
>obj1 : { x: 文字; y: () => 无值; }
>{ x: "", y: () => { } } : { x: 文字; y: () => 无值; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : () => 无值
>() => { } : () => 无值

function foo(): any {
>foo : () => 任意

    var a;
>a : 任意
>类型别名 :=> 任意

    return a;
>a : 任意
>类型别名 :=> 任意
}
class A {
>A : A

    public a: any;
>a : 任意
>类型别名 :=> 任意

    static foo(): any {
>foo : () => 任意

        var a;
>a : 任意
>类型别名 :=> 任意

        return a;
>a : 任意
>类型别名 :=> 任意
    }
}
module M {
>M : 类为 M

    export var n: any;
>n : 任意
>类型别名 :=> 任意
}
var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// any type var
var ResultIsNumber1 = --ANY2;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>--ANY2 : 数字
>类型别名 :=> 数字
>ANY2 : 任意[]

var ResultIsNumber2 = --A;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>--A : 数字
>类型别名 :=> 数字
>A : 任意
>类型别名 :=> 任意

var ResultIsNumber3 = --M;
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>--M : 数字
>类型别名 :=> 数字
>M : 任意
>类型别名 :=> 任意

var ResultIsNumber4 = --obj;
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>--obj : 数字
>类型别名 :=> 数字
>obj : () => {}

var ResultIsNumber5 = --obj1;
>ResultIsNumber5 : 数字
>类型别名 :=> 数字
>--obj1 : 数字
>类型别名 :=> 数字
>obj1 : { x: 文字; y: () => 无值; }

var ResultIsNumber6 = ANY2--;
>ResultIsNumber6 : 数字
>类型别名 :=> 数字
>ANY2-- : 数字
>类型别名 :=> 数字
>ANY2 : 任意[]

var ResultIsNumber7 = A--;
>ResultIsNumber7 : 数字
>类型别名 :=> 数字
>A-- : 数字
>类型别名 :=> 数字
>A : 任意
>类型别名 :=> 任意

var ResultIsNumber8 = M--;
>ResultIsNumber8 : 数字
>类型别名 :=> 数字
>M-- : 数字
>类型别名 :=> 数字
>M : 任意
>类型别名 :=> 任意

var ResultIsNumber9 = obj--;
>ResultIsNumber9 : 数字
>类型别名 :=> 数字
>obj-- : 数字
>类型别名 :=> 数字
>obj : () => {}

var ResultIsNumber10 = obj1--;
>ResultIsNumber10 : 数字
>类型别名 :=> 数字
>obj1-- : 数字
>类型别名 :=> 数字
>obj1 : { x: 文字; y: () => 无值; }

// any type literal
var ResultIsNumber11 = --{};
>ResultIsNumber11 : 数字
>类型别名 :=> 数字
>--{} : 数字
>类型别名 :=> 数字
>{} : {}

var ResultIsNumber12 = --null;
>ResultIsNumber12 : 数字
>类型别名 :=> 数字
>--null : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

var ResultIsNumber13 = --undefined;
>ResultIsNumber13 : 数字
>类型别名 :=> 数字
>--undefined : 数字
>类型别名 :=> 数字
>undefined : 任意
>类型别名 :=> 任意

var ResultIsNumber14 = null--;
>ResultIsNumber14 : 数字
>类型别名 :=> 数字
>null-- : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

var ResultIsNumber15 = {}--;
>ResultIsNumber15 : 数字
>类型别名 :=> 数字
>{}-- : 数字
>类型别名 :=> 数字
>{} : {}

var ResultIsNumber16 = undefined--;
>ResultIsNumber16 : 数字
>类型别名 :=> 数字
>undefined-- : 数字
>类型别名 :=> 数字
>undefined : 任意
>类型别名 :=> 任意

// any type expressions
var ResultIsNumber17 = --foo();
>ResultIsNumber17 : 数字
>类型别名 :=> 数字
>--foo() : 数字
>类型别名 :=> 数字
>foo() : 任意
>类型别名 :=> 任意
>foo : () => 任意

var ResultIsNumber18 = --A.foo();
>ResultIsNumber18 : 数字
>类型别名 :=> 数字
>--A.foo() : 数字
>类型别名 :=> 数字
>A.foo() : 任意
>类型别名 :=> 任意
>A.foo : () => 任意
>A : 类为 A
>foo : () => 任意

var ResultIsNumber19 = --(null + undefined);
>ResultIsNumber19 : 数字
>类型别名 :=> 数字
>--(null + undefined) : 数字
>类型别名 :=> 数字
>(null + undefined) : 任意
>类型别名 :=> 任意
>null + undefined : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

var ResultIsNumber20 = --(null + null);
>ResultIsNumber20 : 数字
>类型别名 :=> 数字
>--(null + null) : 数字
>类型别名 :=> 数字
>(null + null) : 任意
>类型别名 :=> 任意
>null + null : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

var ResultIsNumber21 = --(undefined + undefined);
>ResultIsNumber21 : 数字
>类型别名 :=> 数字
>--(undefined + undefined) : 数字
>类型别名 :=> 数字
>(undefined + undefined) : 任意
>类型别名 :=> 任意
>undefined + undefined : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

var ResultIsNumber22 = --obj1.x;
>ResultIsNumber22 : 数字
>类型别名 :=> 数字
>--obj1.x : 数字
>类型别名 :=> 数字
>obj1.x : 文字
>类型别名 :=> 文字
>obj1 : { x: 文字; y: () => 无值; }
>x : 文字
>类型别名 :=> 文字

var ResultIsNumber23 = --obj1.y;
>ResultIsNumber23 : 数字
>类型别名 :=> 数字
>--obj1.y : 数字
>类型别名 :=> 数字
>obj1.y : () => 无值
>obj1 : { x: 文字; y: () => 无值; }
>y : () => 无值

var ResultIsNumber24 = foo()--;
>ResultIsNumber24 : 数字
>类型别名 :=> 数字
>foo()-- : 数字
>类型别名 :=> 数字
>foo() : 任意
>类型别名 :=> 任意
>foo : () => 任意

var ResultIsNumber25 = A.foo()--;
>ResultIsNumber25 : 数字
>类型别名 :=> 数字
>A.foo()-- : 数字
>类型别名 :=> 数字
>A.foo() : 任意
>类型别名 :=> 任意
>A.foo : () => 任意
>A : 类为 A
>foo : () => 任意

var ResultIsNumber26 = (null + undefined)--;
>ResultIsNumber26 : 数字
>类型别名 :=> 数字
>(null + undefined)-- : 数字
>类型别名 :=> 数字
>(null + undefined) : 任意
>类型别名 :=> 任意
>null + undefined : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

var ResultIsNumber27 = (null + null)--;
>ResultIsNumber27 : 数字
>类型别名 :=> 数字
>(null + null)-- : 数字
>类型别名 :=> 数字
>(null + null) : 任意
>类型别名 :=> 任意
>null + null : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

var ResultIsNumber28 = (undefined + undefined)--;
>ResultIsNumber28 : 数字
>类型别名 :=> 数字
>(undefined + undefined)-- : 数字
>类型别名 :=> 数字
>(undefined + undefined) : 任意
>类型别名 :=> 任意
>undefined + undefined : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

var ResultIsNumber29 = obj1.x--;
>ResultIsNumber29 : 数字
>类型别名 :=> 数字
>obj1.x-- : 数字
>类型别名 :=> 数字
>obj1.x : 文字
>类型别名 :=> 文字
>obj1 : { x: 文字; y: () => 无值; }
>x : 文字
>类型别名 :=> 文字

var ResultIsNumber30 = obj1.y--;
>ResultIsNumber30 : 数字
>类型别名 :=> 数字
>obj1.y-- : 数字
>类型别名 :=> 数字
>obj1.y : () => 无值
>obj1 : { x: 文字; y: () => 无值; }
>y : () => 无值

// miss assignment operators
--ANY2;
>--ANY2 : 数字
>类型别名 :=> 数字
>ANY2 : 任意[]

ANY2--;
>ANY2-- : 数字
>类型别名 :=> 数字
>ANY2 : 任意[]

--ANY1--;
>--ANY1 : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意
>-- : 数字
>类型别名 :=> 数字
> : 任意
>类型别名 :=> 任意

--ANY1++;
>--ANY1 : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意
>++ : 数字
>类型别名 :=> 数字
> : 任意
>类型别名 :=> 任意

++ANY1--;
>++ANY1 : 数字
>类型别名 :=> 数字
>ANY1 : 任意
>类型别名 :=> 任意
>-- : 数字
>类型别名 :=> 数字
> : 任意
>类型别名 :=> 任意

--ANY2[0]--;
>--ANY2[0] : 数字
>类型别名 :=> 数字
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0
>-- : 数字
>类型别名 :=> 数字
> : 任意
>类型别名 :=> 任意

--ANY2[0]++;
>--ANY2[0] : 数字
>类型别名 :=> 数字
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0
>++ : 数字
>类型别名 :=> 数字
> : 任意
>类型别名 :=> 任意

++ANY2[0]--;
>++ANY2[0] : 数字
>类型别名 :=> 数字
>ANY2[0] : 任意
>类型别名 :=> 任意
>ANY2 : 任意[]
>0 : 0
>-- : 数字
>类型别名 :=> 数字
> : 任意
>类型别名 :=> 任意

