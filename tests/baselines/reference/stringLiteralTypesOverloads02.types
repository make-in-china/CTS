=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads02.ts ===
function getFalsyPrimitive(x: "string"): string;
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>x : "string"

function getFalsyPrimitive(x: "number"): number;
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>x : "number"

function getFalsyPrimitive(x: "boolean"): boolean;
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>x : "boolean"

function getFalsyPrimitive(x: "boolean" | "string"): boolean | string;
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>x : "string" | "boolean"

function getFalsyPrimitive(x: "boolean" | "number"): boolean | number;
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>x : "number" | "boolean"

function getFalsyPrimitive(x: "number" | "string"): number | string;
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>x : "string" | "number"

function getFalsyPrimitive(x: "number" | "string" | "boolean"): number | string | boolean;
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>x : "string" | "number" | "boolean"

function getFalsyPrimitive(x: string): string | number | boolean {
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>x : 文字
>类型别名 :=> 文字

    if (x === "string") {
>x === "string" : 真假
>类型别名 :=> 真假
>x : 文字
>类型别名 :=> 文字
>"string" : "string"

        return "";
>"" : ""
    }
    if (x === "number") {
>x === "number" : 真假
>类型别名 :=> 真假
>x : 文字
>类型别名 :=> 文字
>"number" : "number"

        return 0;
>0 : 0
    }
    if (x === "boolean") {
>x === "boolean" : 真假
>类型别名 :=> 真假
>x : 文字
>类型别名 :=> 文字
>"boolean" : "boolean"

        return false;
>false : 为假
>类型别名 :=> 为假
    }

    // Should be unreachable.
    throw "Invalid value";
>"Invalid value" : "Invalid value"
}

namespace Consts1 {
>Consts1 : 类为 Consts1

    const EMPTY_STRING = getFalsyPrimitive("string");
>EMPTY_STRING : 文字
>类型别名 :=> 文字
>getFalsyPrimitive("string") : 文字
>类型别名 :=> 文字
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>"string" : "string"

    const ZERO = getFalsyPrimitive('number');
>ZERO : 数字
>类型别名 :=> 数字
>getFalsyPrimitive('number') : 数字
>类型别名 :=> 数字
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>'number' : "number"

    const FALSE = getFalsyPrimitive("boolean");
>FALSE : 真假
>类型别名 :=> 真假
>getFalsyPrimitive("boolean") : 真假
>类型别名 :=> 真假
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>"boolean" : "boolean"
}

const string = "string"
>string : "string"
>"string" : "string"

const number = "number"
>number : "number"
>"number" : "number"

const boolean = "boolean"
>boolean : "boolean"
>"boolean" : "boolean"

const stringOrNumber = string || number;
>stringOrNumber : "string" | "number"
>string || number : "string" | "number"
>string : "string"
>number : "number"

const stringOrBoolean = string || boolean;
>stringOrBoolean : "string" | "boolean"
>string || boolean : "string" | "boolean"
>string : "string"
>boolean : "boolean"

const booleanOrNumber = number || boolean;
>booleanOrNumber : "number" | "boolean"
>number || boolean : "number" | "boolean"
>number : "number"
>boolean : "boolean"

const stringOrBooleanOrNumber = stringOrBoolean || number;
>stringOrBooleanOrNumber : "string" | "number" | "boolean"
>stringOrBoolean || number : "string" | "number" | "boolean"
>stringOrBoolean : "string" | "boolean"
>number : "number"

namespace Consts2 {
>Consts2 : 类为 Consts2

    const EMPTY_STRING = getFalsyPrimitive(string);
>EMPTY_STRING : 文字
>类型别名 :=> 文字
>getFalsyPrimitive(string) : 文字
>类型别名 :=> 文字
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>string : "string"

    const ZERO = getFalsyPrimitive(number);
>ZERO : 数字
>类型别名 :=> 数字
>getFalsyPrimitive(number) : 数字
>类型别名 :=> 数字
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>number : "number"

    const FALSE = getFalsyPrimitive(boolean);
>FALSE : 真假
>类型别名 :=> 真假
>getFalsyPrimitive(boolean) : 真假
>类型别名 :=> 真假
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>boolean : "boolean"

    const a = getFalsyPrimitive(stringOrNumber);
>a : 文字 | 数字
>getFalsyPrimitive(stringOrNumber) : 文字 | 数字
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>stringOrNumber : "string" | "number"

    const b = getFalsyPrimitive(stringOrBoolean);
>b : 文字 | 真假
>getFalsyPrimitive(stringOrBoolean) : 文字 | 真假
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>stringOrBoolean : "string" | "boolean"

    const c = getFalsyPrimitive(booleanOrNumber);
>c : 数字 | 真假
>getFalsyPrimitive(booleanOrNumber) : 数字 | 真假
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>booleanOrNumber : "number" | "boolean"

    const d = getFalsyPrimitive(stringOrBooleanOrNumber);
>d : 文字 | 数字 | 真假
>getFalsyPrimitive(stringOrBooleanOrNumber) : 文字 | 数字 | 真假
>getFalsyPrimitive : { (x: "string"): 文字; (x: "number"): 数字; (x: "boolean"): 真假; (x: "string" | "boolean"): 文字 | 真假; (x: "number" | "boolean"): 数字 | 真假; (x: "string" | "number"): 文字 | 数字; (x: "string" | "number" | "boolean"): 文字 | 数字 | 真假; }
>stringOrBooleanOrNumber : "string" | "number" | "boolean"
}



