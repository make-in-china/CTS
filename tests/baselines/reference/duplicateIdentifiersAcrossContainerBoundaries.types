=== tests/cases/compiler/duplicateIdentifiersAcrossContainerBoundaries.ts ===
module M {
>M : typeof M

    export interface I { }
>I : I
}
module M {
>M : typeof M

    export class I { }
>I : I
}

module M {
>M : typeof M

    export function f() { }
>f : () => void
}
module M {
>M : typeof M

    export class f { } // error
>f : M.f
}

module M {
>M : typeof M

    function g() { }
>g : () => void
}
module M {
>M : typeof M

    export class g { } // no error
>g : g
}

module M {
>M : typeof M

    export class C { }
>C : C
}
module M {
>M : typeof M

    function C() { } // no error
>C : () => void
}

module M {
>M : typeof M

    export var v = 3;
>v : number
>类型别名 :=> 数字
>3 : 3
}
module M {
>M : typeof M

    export var v = 3; // error for redeclaring var in a different parent
>v : number
>类型别名 :=> 数字
>3 : 3
}

class Foo {
>Foo : Foo

    static x: number;
>x : number
>类型别名 :=> 数字
}

module Foo {
>Foo : typeof Foo

    export var x: number; // error for redeclaring var in a different parent
>x : number
>类型别名 :=> 数字
}

module N {
>N : typeof N

    export module F {
>F : typeof F

        var t;
>t : any
>类型别名 :=> 任意
    }
}
declare module N {
>N : typeof N

    export function F(); // no error because function is ambient
>F : typeof F
}

