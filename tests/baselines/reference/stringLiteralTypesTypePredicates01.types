=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesTypePredicates01.ts ===
type Kind = "A" | "B"
>Kind : Kind

function kindIs(kind: Kind, is: "A"): kind is "A";
>kindIs : { (kind: Kind, is: "A"): kind 作为 "A"; (kind: Kind, is: "B"): kind 作为 "B"; }
>kind : Kind
>Kind : Kind
>is : "A"
>kind : 任意
>类型别名 :=> 任意

function kindIs(kind: Kind, is: "B"): kind is "B";
>kindIs : { (kind: Kind, is: "A"): kind 作为 "A"; (kind: Kind, is: "B"): kind 作为 "B"; }
>kind : Kind
>Kind : Kind
>is : "B"
>kind : 任意
>类型别名 :=> 任意

function kindIs(kind: Kind, is: Kind): boolean {
>kindIs : { (kind: Kind, is: "A"): kind 作为 "A"; (kind: Kind, is: "B"): kind 作为 "B"; }
>kind : Kind
>Kind : Kind
>is : Kind
>Kind : Kind

    return kind === is;
>kind === is : 真假
>类型别名 :=> 真假
>kind : Kind
>is : Kind
}

var x: Kind = undefined;
>x : Kind
>Kind : Kind
>undefined : 未定
>类型别名 :=> 未定

if (kindIs(x, "A")) {
>kindIs(x, "A") : 真假
>类型别名 :=> 真假
>kindIs : { (kind: Kind, is: "A"): kind 作为 "A"; (kind: Kind, is: "B"): kind 作为 "B"; }
>x : Kind
>"A" : "A"

    let a = x;
>a : "A"
>x : "A"
}
else {
    let b = x;
>b : "B"
>x : "B"
}

if (!kindIs(x, "B")) {
>!kindIs(x, "B") : 真假
>类型别名 :=> 真假
>kindIs(x, "B") : 真假
>类型别名 :=> 真假
>kindIs : { (kind: Kind, is: "A"): kind 作为 "A"; (kind: Kind, is: "B"): kind 作为 "B"; }
>x : Kind
>"B" : "B"

    let c = x;
>c : "A"
>x : "A"
}
else {
    let d = x;
>d : "B"
>x : "B"
}
