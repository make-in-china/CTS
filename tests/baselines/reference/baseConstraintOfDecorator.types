=== tests/cases/compiler/baseConstraintOfDecorator.ts ===
export function classExtender<TFunction>(superClass: TFunction, _instanceModifier: (instance: any, args: any[]) => void): TFunction {
>classExtender : <TFunction>(superClass: TFunction, _instanceModifier: (instance: 任意, args: 任意[]) => 无值) => TFunction
>TFunction : TFunction
>superClass : TFunction
>TFunction : TFunction
>_instanceModifier : (instance: 任意, args: 任意[]) => 无值
>instance : 任意
>类型别名 :=> 任意
>args : 任意[]
>TFunction : TFunction

    return class decoratorFunc extends superClass {
>class decoratorFunc extends superClass {        constructor(...args: any[]) {            super(...args);            _instanceModifier(this, args);        }    } : 类为 decoratorFunc
>decoratorFunc : 类为 decoratorFunc
>superClass : TFunction

        constructor(...args: any[]) {
>args : 任意[]

            super(...args);
>super(...args) : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
>...args : 任意
>类型别名 :=> 任意
>args : 任意[]

            _instanceModifier(this, args);
>_instanceModifier(this, args) : 无值
>类型别名 :=> 无值
>_instanceModifier : (instance: 任意, args: 任意[]) => 无值
>this : 本体
>args : 任意[]
        }
    };
}

