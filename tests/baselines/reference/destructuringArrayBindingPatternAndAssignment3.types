=== tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment3.ts ===
const [a, b = a] = [1]; // ok
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>[1] : [数字, 任意]
>1 : 1

const [c, d = c, e = e] = [1]; // error for e = e
>c : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
>[1] : [数字, 任意, 任意]
>1 : 1

const [f, g = f, h = i, i = f] = [1]; // error for h = i
>f : 任意
>类型别名 :=> 任意
>g : 任意
>类型别名 :=> 任意
>f : 任意
>类型别名 :=> 任意
>h : 任意
>类型别名 :=> 任意
>i : 任意
>类型别名 :=> 任意
>i : 任意
>类型别名 :=> 任意
>f : 任意
>类型别名 :=> 任意
>[1] : [数字, 任意, 任意, 任意]
>1 : 1

(function ([a, b = a]) { // ok
>(function ([a, b = a]) { // ok})([1]) : 无值
>类型别名 :=> 无值
>(function ([a, b = a]) { // ok}) : ([a, b]: 数字[]) => 无值
>function ([a, b = a]) { // ok} : ([a, b]: 数字[]) => 无值
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

})([1]);
>[1] : 数字[]
>1 : 1

(function ([c, d = c, e = e]) { // error for e = e
>(function ([c, d = c, e = e]) { // error for e = e})([1]) : 无值
>类型别名 :=> 无值
>(function ([c, d = c, e = e]) { // error for e = e}) : ([c, d, e]: 数字[]) => 无值
>function ([c, d = c, e = e]) { // error for e = e} : ([c, d, e]: 数字[]) => 无值
>c : 数字
>类型别名 :=> 数字
>d : 数字
>类型别名 :=> 数字
>c : 数字
>类型别名 :=> 数字
>e : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意

})([1]);
>[1] : 数字[]
>1 : 1

(function ([f, g = f, h = i, i = f]) { // error for h = i
>(function ([f, g = f, h = i, i = f]) { // error for h = i})([1]) : 无值
>类型别名 :=> 无值
>(function ([f, g = f, h = i, i = f]) { // error for h = i}) : ([f, g, h, i]: 数字[]) => 无值
>function ([f, g = f, h = i, i = f]) { // error for h = i} : ([f, g, h, i]: 数字[]) => 无值
>f : 数字
>类型别名 :=> 数字
>g : 数字
>类型别名 :=> 数字
>f : 数字
>类型别名 :=> 数字
>h : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
>f : 数字
>类型别名 :=> 数字

})([1])
>[1] : 数字[]
>1 : 1

