=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithArrayLiteralArgs.ts ===
function foo<T>(t: T) {
>foo : <T>(t: T) => T
>T : T
>t : T
>T : T

    return t;
>t : T
}

var r = foo([1, 2]); // number[]
>r : 数字[]
>foo([1, 2]) : 数字[]
>foo : <T>(t: T) => T
>[1, 2] : 数字[]
>1 : 1
>2 : 2

var r = foo<number[]>([1, 2]); // number[]
>r : 数字[]
>foo<number[]>([1, 2]) : 数字[]
>foo : <T>(t: T) => T
>[1, 2] : 数字[]
>1 : 1
>2 : 2

var ra = foo<any[]>([1, 2]); // any[]
>ra : 任意[]
>foo<any[]>([1, 2]) : 任意[]
>foo : <T>(t: T) => T
>[1, 2] : 数字[]
>1 : 1
>2 : 2

var r2 = foo([]); // any[]
>r2 : 任意[]
>foo([]) : 任意[]
>foo : <T>(t: T) => T
>[] : 未定[]

var r3 = foo<number[]>([]); // number[]
>r3 : 数字[]
>foo<number[]>([]) : 数字[]
>foo : <T>(t: T) => T
>[] : 未定[]

var r4 = foo([1, '']); // {}[]
>r4 : (文字 | 数字)[]
>foo([1, '']) : (文字 | 数字)[]
>foo : <T>(t: T) => T
>[1, ''] : (文字 | 数字)[]
>1 : 1
>'' : ""

var r5 = foo<any[]>([1, '']); // any[]
>r5 : 任意[]
>foo<any[]>([1, '']) : 任意[]
>foo : <T>(t: T) => T
>[1, ''] : (文字 | 数字)[]
>1 : 1
>'' : ""

var r6 = foo<Object[]>([1, '']); // Object[]
>r6 : Object[]
>foo<Object[]>([1, '']) : Object[]
>foo : <T>(t: T) => T
>Object : Object
>[1, ''] : (文字 | 数字)[]
>1 : 1
>'' : ""

