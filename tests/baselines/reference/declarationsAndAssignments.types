=== tests/cases/conformance/es6/destructuring/declarationsAndAssignments.ts ===
function f0() {
>f0 : () => void

    var [] = [1, "hello"];
>[1, "hello"] : (string | number)[]
>1 : 1
>"hello" : "hello"

    var [x] = [1, "hello"];
>x : number
>类型别名 :=> 数字
>[1, "hello"] : [number, string]
>1 : 1
>"hello" : "hello"

    var [x, y] = [1, "hello"];
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字
>[1, "hello"] : [number, string]
>1 : 1
>"hello" : "hello"

    var [x, y, z] = [1, "hello"];
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字
>z : any
>类型别名 :=> 任意
>[1, "hello"] : [number, string, any]
>1 : 1
>"hello" : "hello"

    var [,, x] = [0, 1, 2];
> : undefined
>类型别名 :=> 未定
> : undefined
>类型别名 :=> 未定
>x : number
>类型别名 :=> 数字
>[0, 1, 2] : [number, number, number]
>0 : 0
>1 : 1
>2 : 2

    var x: number;
>x : number
>类型别名 :=> 数字

    var y: string;
>y : string
>类型别名 :=> 文字
}

function f1() {
>f1 : () => void

    var a = [1, "hello"];
>a : (string | number)[]
>[1, "hello"] : (string | number)[]
>1 : 1
>"hello" : "hello"

    var [x] = a;
>x : string | number
>a : (string | number)[]

    var [x, y] = a;
>x : string | number
>y : string | number
>a : (string | number)[]

    var [x, y, z] = a;
>x : string | number
>y : string | number
>z : string | number
>a : (string | number)[]

    var x: number | string;
>x : string | number

    var y: number | string;
>y : string | number

    var z: number | string;
>z : string | number
}

function f2() {
>f2 : () => void

    var { } = { x: 5, y: "hello" };       // Error, no x and y in target
>{ x: 5, y: "hello" } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : string
>类型别名 :=> 文字
>"hello" : "hello"

    var { x } = { x: 5, y: "hello" };     // Error, no y in target
>x : number
>类型别名 :=> 数字
>{ x: 5, y: "hello" } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : string
>类型别名 :=> 文字
>"hello" : "hello"

    var { y } = { x: 5, y: "hello" };     // Error, no x in target
>y : string
>类型别名 :=> 文字
>{ x: 5, y: "hello" } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : string
>类型别名 :=> 文字
>"hello" : "hello"

    var { x, y } = { x: 5, y: "hello" };
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字
>{ x: 5, y: "hello" } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : string
>类型别名 :=> 文字
>"hello" : "hello"

    var x: number;
>x : number
>类型别名 :=> 数字

    var y: string;
>y : string
>类型别名 :=> 文字

    var { x: a } = { x: 5, y: "hello" };  // Error, no y in target
>x : any
>类型别名 :=> 任意
>a : number
>类型别名 :=> 数字
>{ x: 5, y: "hello" } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : string
>类型别名 :=> 文字
>"hello" : "hello"

    var { y: b } = { x: 5, y: "hello" };  // Error, no x in target
>y : any
>类型别名 :=> 任意
>b : string
>类型别名 :=> 文字
>{ x: 5, y: "hello" } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : string
>类型别名 :=> 文字
>"hello" : "hello"

    var { x: a, y: b } = { x: 5, y: "hello" };
>x : any
>类型别名 :=> 任意
>a : number
>类型别名 :=> 数字
>y : any
>类型别名 :=> 任意
>b : string
>类型别名 :=> 文字
>{ x: 5, y: "hello" } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : string
>类型别名 :=> 文字
>"hello" : "hello"

    var a: number;
>a : number
>类型别名 :=> 数字

    var b: string;
>b : string
>类型别名 :=> 文字
}

function f3() {
>f3 : () => void

    var [x, [y, [z]]] = [1, ["hello", [true]]];
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字
>z : boolean
>类型别名 :=> 真假
>[1, ["hello", [true]]] : [number, [string, [boolean]]]
>1 : 1
>["hello", [true]] : [string, [boolean]]
>"hello" : "hello"
>[true] : [boolean]
>true : true
>类型别名 :=> 为真

    var x: number;
>x : number
>类型别名 :=> 数字

    var y: string;
>y : string
>类型别名 :=> 文字

    var z: boolean;
>z : boolean
>类型别名 :=> 真假
}

function f4() {
>f4 : () => void

    var { a: x, b: { a: y, b: { a: z }}} = { a: 1, b: { a: "hello", b: { a: true } } };
>a : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字
>b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>y : string
>类型别名 :=> 文字
>b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>z : boolean
>类型别名 :=> 真假
>{ a: 1, b: { a: "hello", b: { a: true } } } : { a: number; b: { a: string; b: { a: boolean; }; }; }
>a : number
>类型别名 :=> 数字
>1 : 1
>b : { a: string; b: { a: boolean; }; }
>{ a: "hello", b: { a: true } } : { a: string; b: { a: boolean; }; }
>a : string
>类型别名 :=> 文字
>"hello" : "hello"
>b : { a: boolean; }
>{ a: true } : { a: boolean; }
>a : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

    var x: number;
>x : number
>类型别名 :=> 数字

    var y: string;
>y : string
>类型别名 :=> 文字

    var z: boolean;
>z : boolean
>类型别名 :=> 真假
}

function f6() {
>f6 : () => void

    var [x = 0, y = ""] = [1, "hello"];
>x : number
>类型别名 :=> 数字
>0 : 0
>y : string
>类型别名 :=> 文字
>"" : ""
>[1, "hello"] : [number, string]
>1 : 1
>"hello" : "hello"

    var x: number;
>x : number
>类型别名 :=> 数字

    var y: string;
>y : string
>类型别名 :=> 文字
}

function f7() {
>f7 : () => void

    var [x = 0, y = 1] = [1, "hello"];  // Error, initializer for y must be string
>x : number
>类型别名 :=> 数字
>0 : 0
>y : string | 1
>1 : 1
>[1, "hello"] : [number, string]
>1 : 1
>"hello" : "hello"

    var x: number;
>x : number
>类型别名 :=> 数字

    var y: string;
>y : string | 1
}

function f8() {
>f8 : () => void

    var [a, b, c] = [];   // Ok, [] is an array
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>[] : [any, any, any]

    var [d, e, f] = [1];  // Error, [1] is a tuple
>d : number
>类型别名 :=> 数字
>e : any
>类型别名 :=> 任意
>f : any
>类型别名 :=> 任意
>[1] : [number, any, any]
>1 : 1
}

function f9() {
>f9 : () => void

    var [a, b] = {};                // Error, not array type
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>{} : {}

    var [c, d] = { 0: 10, 1: 20 };  // Error, not array type
>c : number
>类型别名 :=> 数字
>d : number
>类型别名 :=> 数字
>{ 0: 10, 1: 20 } : { 0: number; 1: number; }
>10 : 10
>20 : 20

    var [e, f] = [10, 20];
>e : number
>类型别名 :=> 数字
>f : number
>类型别名 :=> 数字
>[10, 20] : [number, number]
>10 : 10
>20 : 20
}

function f10() {
>f10 : () => void

    var { a, b } = {};  // Error
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>{} : { a: any; b: any; }

    var { a, b } = [];  // Error
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>[] : undefined[]
}

function f11() {
>f11 : () => void

    var { x: a, y: b } = { x: 10, y: "hello" };
>x : any
>类型别名 :=> 任意
>a : number
>类型别名 :=> 数字
>y : any
>类型别名 :=> 任意
>b : string
>类型别名 :=> 文字
>{ x: 10, y: "hello" } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>10 : 10
>y : string
>类型别名 :=> 文字
>"hello" : "hello"

    var { 0: a, 1: b } = { 0: 10, 1: "hello" };
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字
>{ 0: 10, 1: "hello" } : { 0: number; 1: string; }
>10 : 10
>"hello" : "hello"

    var { "<": a, ">": b } = { "<": 10, ">": "hello" };
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字
>{ "<": 10, ">": "hello" } : { "<": number; ">": string; }
>10 : 10
>"hello" : "hello"

    var { 0: a, 1: b } = [10, "hello"];
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字
>[10, "hello"] : [number, string]
>10 : 10
>"hello" : "hello"

    var a: number;
>a : number
>类型别名 :=> 数字

    var b: string;
>b : string
>类型别名 :=> 文字
}

function f12() {
>f12 : () => void

    var [a, [b, { x, y: c }] = ["abc", { x: 10, y: false }]] = [1, ["hello", { x: 5, y: true }]];
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字
>x : number
>类型别名 :=> 数字
>y : any
>类型别名 :=> 任意
>c : boolean
>类型别名 :=> 真假
>["abc", { x: 10, y: false }] : [string, { x: number; y: boolean; }]
>"abc" : "abc"
>{ x: 10, y: false } : { x: number; y: boolean; }
>x : number
>类型别名 :=> 数字
>10 : 10
>y : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>[1, ["hello", { x: 5, y: true }]] : [number, [string, { x: number; y: true; }]]
>1 : 1
>["hello", { x: 5, y: true }] : [string, { x: number; y: true; }]
>"hello" : "hello"
>{ x: 5, y: true } : { x: number; y: true; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

    var a: number;
>a : number
>类型别名 :=> 数字

    var b: string;
>b : string
>类型别名 :=> 文字

    var x: number;
>x : number
>类型别名 :=> 数字

    var c: boolean;
>c : boolean
>类型别名 :=> 真假
}

function f13() {
>f13 : () => void

    var [x, y] = [1, "hello"];
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字
>[1, "hello"] : [number, string]
>1 : 1
>"hello" : "hello"

    var [a, b] = [[x, y], { x: x, y: y }];
>a : (string | number)[]
>b : { x: number; y: string; }
>[[x, y], { x: x, y: y }] : [(string | number)[], { x: number; y: string; }]
>[x, y] : (string | number)[]
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字
>{ x: x, y: y } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字
>y : string
>类型别名 :=> 文字
}

function f14([a = 1, [b = "hello", { x, y: c = false }]]) {
>f14 : ([a, [b, { x, y: c }]]: [number, [string, { x: any; y?: boolean; }]]) => void
>a : number
>类型别名 :=> 数字
>1 : 1
>b : string
>类型别名 :=> 文字
>"hello" : "hello"
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>c : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

    var a: number;
>a : number
>类型别名 :=> 数字

    var b: string;
>b : string
>类型别名 :=> 文字

    var c: boolean;
>c : boolean
>类型别名 :=> 真假
}
f14([2, ["abc", { x: 0, y: true }]]);
>f14([2, ["abc", { x: 0, y: true }]]) : void
>类型别名 :=> 无值
>f14 : ([a, [b, { x, y: c }]]: [number, [string, { x: any; y?: boolean; }]]) => void
>[2, ["abc", { x: 0, y: true }]] : [number, [string, { x: number; y: true; }]]
>2 : 2
>["abc", { x: 0, y: true }] : [string, { x: number; y: true; }]
>"abc" : "abc"
>{ x: 0, y: true } : { x: number; y: true; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

f14([2, ["abc", { x: 0 }]]);
>f14([2, ["abc", { x: 0 }]]) : void
>类型别名 :=> 无值
>f14 : ([a, [b, { x, y: c }]]: [number, [string, { x: any; y?: boolean; }]]) => void
>[2, ["abc", { x: 0 }]] : [number, [string, { x: number; }]]
>2 : 2
>["abc", { x: 0 }] : [string, { x: number; }]
>"abc" : "abc"
>{ x: 0 } : { x: number; }
>x : number
>类型别名 :=> 数字
>0 : 0

f14([2, ["abc", { y: false }]]);  // Error, no x
>f14([2, ["abc", { y: false }]]) : void
>类型别名 :=> 无值
>f14 : ([a, [b, { x, y: c }]]: [number, [string, { x: any; y?: boolean; }]]) => void
>[2, ["abc", { y: false }]] : (number | (string | { y: boolean; })[])[]
>2 : 2
>["abc", { y: false }] : (string | { y: boolean; })[]
>"abc" : "abc"
>{ y: false } : { y: boolean; }
>y : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

module M {
>M : typeof M

    export var [a, b] = [1, 2];
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>[1, 2] : [number, number]
>1 : 1
>2 : 2
}

function f15() {
>f15 : () => { a: string; b: number; c: boolean; }

    var a = "hello";
>a : string
>类型别名 :=> 文字
>"hello" : "hello"

    var b = 1;
>b : number
>类型别名 :=> 数字
>1 : 1

    var c = true;
>c : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

    return { a, b, c };
>{ a, b, c } : { a: string; b: number; c: boolean; }
>a : string
>类型别名 :=> 文字
>b : number
>类型别名 :=> 数字
>c : true
>类型别名 :=> 为真
}

function f16() {
>f16 : () => void

    var { a, b, c } = f15();
>a : string
>类型别名 :=> 文字
>b : number
>类型别名 :=> 数字
>c : boolean
>类型别名 :=> 真假
>f15() : { a: string; b: number; c: boolean; }
>f15 : () => { a: string; b: number; c: boolean; }
}

function f17({ a = "", b = 0, c = false }) {
>f17 : ({ a, b, c }: { a?: string; b?: number; c?: boolean; }) => void
>a : string
>类型别名 :=> 文字
>"" : ""
>b : number
>类型别名 :=> 数字
>0 : 0
>c : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
}

f17({});
>f17({}) : void
>类型别名 :=> 无值
>f17 : ({ a, b, c }: { a?: string; b?: number; c?: boolean; }) => void
>{} : {}

f17({ a: "hello" });
>f17({ a: "hello" }) : void
>类型别名 :=> 无值
>f17 : ({ a, b, c }: { a?: string; b?: number; c?: boolean; }) => void
>{ a: "hello" } : { a: string; }
>a : string
>类型别名 :=> 文字
>"hello" : "hello"

f17({ c: true });
>f17({ c: true }) : void
>类型别名 :=> 无值
>f17 : ({ a, b, c }: { a?: string; b?: number; c?: boolean; }) => void
>{ c: true } : { c: true; }
>c : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

f17(f15());
>f17(f15()) : void
>类型别名 :=> 无值
>f17 : ({ a, b, c }: { a?: string; b?: number; c?: boolean; }) => void
>f15() : { a: string; b: number; c: boolean; }
>f15 : () => { a: string; b: number; c: boolean; }

function f18() {
>f18 : () => void

    var a: number;
>a : number
>类型别名 :=> 数字

    var b: string;
>b : string
>类型别名 :=> 文字

    var aa: number[];
>aa : number[]

    ({ a, b } = { a, b });
>({ a, b } = { a, b }) : { a: number; b: string; }
>{ a, b } = { a, b } : { a: number; b: string; }
>{ a, b } : { a: number; b: string; }
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字
>{ a, b } : { a: number; b: string; }
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字

    ({ a, b } = { b, a });
>({ a, b } = { b, a }) : { b: string; a: number; }
>{ a, b } = { b, a } : { b: string; a: number; }
>{ a, b } : { a: number; b: string; }
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字
>{ b, a } : { b: string; a: number; }
>b : string
>类型别名 :=> 文字
>a : number
>类型别名 :=> 数字

    [aa[0], b] = [a, b];
>[aa[0], b] = [a, b] : [number, string]
>[aa[0], b] : [number, string]
>aa[0] : number
>类型别名 :=> 数字
>aa : number[]
>0 : 0
>b : string
>类型别名 :=> 文字
>[a, b] : [number, string]
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字

    [a, b] = [b, a];  // Error
>[a, b] = [b, a] : [string, number]
>[a, b] : [number, string]
>a : number
>类型别名 :=> 数字
>b : string
>类型别名 :=> 文字
>[b, a] : [string, number]
>b : string
>类型别名 :=> 文字
>a : number
>类型别名 :=> 数字

    [a = 1, b = "abc"] = [2, "def"];
>[a = 1, b = "abc"] = [2, "def"] : [number, string]
>[a = 1, b = "abc"] : [number, string]
>a = 1 : 1
>a : number
>类型别名 :=> 数字
>1 : 1
>b = "abc" : "abc"
>b : string
>类型别名 :=> 文字
>"abc" : "abc"
>[2, "def"] : [number, string]
>2 : 2
>"def" : "def"
}

function f19() {
>f19 : () => void

    var a, b;
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

    [a, b] = [1, 2];
>[a, b] = [1, 2] : [number, number]
>[a, b] : [any, any]
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>[1, 2] : [number, number]
>1 : 1
>2 : 2

    [a, b] = [b, a];
>[a, b] = [b, a] : [any, any]
>[a, b] : [any, any]
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>[b, a] : [any, any]
>b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

    ({ a, b } = { b, a });
>({ a, b } = { b, a }) : { b: any; a: any; }
>{ a, b } = { b, a } : { b: any; a: any; }
>{ a, b } : { a: any; b: any; }
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>{ b, a } : { b: any; a: any; }
>b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

    [[a, b] = [1, 2]] = [[2, 3]];
>[[a, b] = [1, 2]] = [[2, 3]] : [[number, number]]
>[[a, b] = [1, 2]] : [[number, number]]
>[a, b] = [1, 2] : [number, number]
>[a, b] : [any, any]
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>[1, 2] : [number, number]
>1 : 1
>2 : 2
>[[2, 3]] : [[number, number]]
>[2, 3] : [number, number]
>2 : 2
>3 : 3

    var x = ([a, b] = [1, 2]);
>x : [number, number]
>([a, b] = [1, 2]) : [number, number]
>[a, b] = [1, 2] : [number, number]
>[a, b] : [any, any]
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>[1, 2] : [number, number]
>1 : 1
>2 : 2
}

function f20() {
>f20 : () => void

    var a: number[];
>a : number[]

    var x: number;
>x : number
>类型别名 :=> 数字

    var y: number;
>y : number
>类型别名 :=> 数字

    var z: number;
>z : number
>类型别名 :=> 数字

    var [...a] = [1, 2, 3];
>a : number[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

    var [x, ...a] = [1, 2, 3];
>x : number
>类型别名 :=> 数字
>a : number[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

    var [x, y, ...a] = [1, 2, 3];
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>a : number[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

    var [x, y, z, ...a] = [1, 2, 3];
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>z : number
>类型别名 :=> 数字
>a : number[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

    [...a] = [1, 2, 3];
>[...a] = [1, 2, 3] : number[]
>[...a] : number[]
>...a : number
>类型别名 :=> 数字
>a : number[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

    [x, ...a] = [1, 2, 3];
>[x, ...a] = [1, 2, 3] : number[]
>[x, ...a] : number[]
>x : number
>类型别名 :=> 数字
>...a : number
>类型别名 :=> 数字
>a : number[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

    [x, y, ...a] = [1, 2, 3];
>[x, y, ...a] = [1, 2, 3] : number[]
>[x, y, ...a] : number[]
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>...a : number
>类型别名 :=> 数字
>a : number[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

    [x, y, z, ...a] = [1, 2, 3];
>[x, y, z, ...a] = [1, 2, 3] : number[]
>[x, y, z, ...a] : number[]
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>z : number
>类型别名 :=> 数字
>...a : number
>类型别名 :=> 数字
>a : number[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3
}

function f21() {
>f21 : () => void

    var a: (number | string | boolean)[];
>a : (string | number | boolean)[]

    var x: number | string | boolean;
>x : string | number | boolean

    var y: number | string | boolean;
>y : string | number | boolean

    var z: number | string | boolean;
>z : string | number | boolean

    var [...a] = [1, "hello", true];
>a : (string | number | boolean)[]
>[1, "hello", true] : (string | number | boolean)[]
>1 : 1
>"hello" : "hello"
>true : true
>类型别名 :=> 为真

    var [x, ...a] = [1, "hello", true];
>x : string | number | boolean
>a : (string | number | boolean)[]
>[1, "hello", true] : (string | number | boolean)[]
>1 : 1
>"hello" : "hello"
>true : true
>类型别名 :=> 为真

    var [x, y, ...a] = [1, "hello", true];
>x : string | number | boolean
>y : string | number | boolean
>a : (string | number | boolean)[]
>[1, "hello", true] : (string | number | boolean)[]
>1 : 1
>"hello" : "hello"
>true : true
>类型别名 :=> 为真

    var [x, y, z, ...a] = [1, "hello", true];
>x : string | number | boolean
>y : string | number | boolean
>z : string | number | boolean
>a : (string | number | boolean)[]
>[1, "hello", true] : (string | number | boolean)[]
>1 : 1
>"hello" : "hello"
>true : true
>类型别名 :=> 为真

    [...a] = [1, "hello", true];
>[...a] = [1, "hello", true] : (true | 1 | "hello")[]
>[...a] : (string | number | boolean)[]
>...a : string | number | boolean
>a : (string | number | boolean)[]
>[1, "hello", true] : (true | 1 | "hello")[]
>1 : 1
>"hello" : "hello"
>true : true
>类型别名 :=> 为真

    [x, ...a] = [1, "hello", true];
>[x, ...a] = [1, "hello", true] : (true | 1 | "hello")[]
>[x, ...a] : (string | number | boolean)[]
>x : string | number | boolean
>...a : string | number | boolean
>a : (string | number | boolean)[]
>[1, "hello", true] : (true | 1 | "hello")[]
>1 : 1
>"hello" : "hello"
>true : true
>类型别名 :=> 为真

    [x, y, ...a] = [1, "hello", true];
>[x, y, ...a] = [1, "hello", true] : (true | 1 | "hello")[]
>[x, y, ...a] : (string | number | boolean)[]
>x : string | number | boolean
>y : string | number | boolean
>...a : string | number | boolean
>a : (string | number | boolean)[]
>[1, "hello", true] : (true | 1 | "hello")[]
>1 : 1
>"hello" : "hello"
>true : true
>类型别名 :=> 为真

    [x, y, z, ...a] = [1, "hello", true];
>[x, y, z, ...a] = [1, "hello", true] : (true | 1 | "hello")[]
>[x, y, z, ...a] : (string | number | boolean)[]
>x : string | number | boolean
>y : string | number | boolean
>z : string | number | boolean
>...a : string | number | boolean
>a : (string | number | boolean)[]
>[1, "hello", true] : (true | 1 | "hello")[]
>1 : 1
>"hello" : "hello"
>true : true
>类型别名 :=> 为真
}

