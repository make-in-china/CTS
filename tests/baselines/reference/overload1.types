=== tests/cases/compiler/overload1.ts ===
module O {
>O : 类为 O

    export class A {
>A : A
        
    }

    export class B extends A {
>B : B
>A : A
    }

    export class C extends B {
>C : C
>B : B
        
    }

    export interface I {
>I : I

        f(s:string):number;
>f : { (s: 文字): 数字; (n: 数字): 文字; }
>s : 文字
>类型别名 :=> 文字

        f(n:number):string;
>f : { (s: 文字): 数字; (n: 数字): 文字; }
>n : 数字
>类型别名 :=> 数字

        g(n1:number,n2:number):number;
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: A): C; (c: C): 文字; }
>n1 : 数字
>类型别名 :=> 数字
>n2 : 数字
>类型别名 :=> 数字

        g(n:number):string;
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: A): C; (c: C): 文字; }
>n : 数字
>类型别名 :=> 数字

        g(a:A):C;
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: A): C; (c: C): 文字; }
>a : A
>A : A
>C : C

        g(c:C):string;
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: A): C; (c: C): 文字; }
>c : C
>C : C

        h(s1:string,s2:number):string;
>h : { (s1: 文字, s2: 数字): 文字; (s1: 数字, s2: 文字): 数字; }
>s1 : 文字
>类型别名 :=> 文字
>s2 : 数字
>类型别名 :=> 数字

        h(s1:number,s2:string):number;
>h : { (s1: 文字, s2: 数字): 文字; (s1: 数字, s2: 文字): 数字; }
>s1 : 数字
>类型别名 :=> 数字
>s2 : 文字
>类型别名 :=> 文字
    }
}

declare var x:O.I;
>x : O.I
>O : 任意
>类型别名 :=> 任意
>I : O.I

var e:string=x.g(new O.A()); // matches overload but bad assignment
>e : 文字
>类型别名 :=> 文字
>x.g(new O.A()) : O.C
>x.g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>x : O.I
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>new O.A() : O.A
>O.A : 类为 O.A
>O : 类为 O
>A : 类为 O.A

var y:string=x.f(3); // good
>y : 文字
>类型别名 :=> 文字
>x.f(3) : 文字
>类型别名 :=> 文字
>x.f : { (s: 文字): 数字; (n: 数字): 文字; }
>x : O.I
>f : { (s: 文字): 数字; (n: 数字): 文字; }
>3 : 3

y=x.f("nope"); // can't assign number to string
>y=x.f("nope") : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字
>x.f("nope") : 数字
>类型别名 :=> 数字
>x.f : { (s: 文字): 数字; (n: 数字): 文字; }
>x : O.I
>f : { (s: 文字): 数字; (n: 数字): 文字; }
>"nope" : "nope"

var z:string=x.g(x.g(3,3)); // good
>z : 文字
>类型别名 :=> 文字
>x.g(x.g(3,3)) : 文字
>类型别名 :=> 文字
>x.g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>x : O.I
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>x.g(3,3) : 数字
>类型别名 :=> 数字
>x.g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>x : O.I
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>3 : 3
>3 : 3

z=x.g(2,2,2); // no match
>z=x.g(2,2,2) : 任意
>类型别名 :=> 任意
>z : 文字
>类型别名 :=> 文字
>x.g(2,2,2) : 任意
>类型别名 :=> 任意
>x.g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>x : O.I
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>2 : 2
>2 : 2
>2 : 2

z=x.g(); // no match
>z=x.g() : 任意
>类型别名 :=> 任意
>z : 文字
>类型别名 :=> 文字
>x.g() : 任意
>类型别名 :=> 任意
>x.g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>x : O.I
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }

z=x.g(new O.B()); // ambiguous (up and down conversion)
>z=x.g(new O.B()) : O.C
>z : 文字
>类型别名 :=> 文字
>x.g(new O.B()) : O.C
>x.g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>x : O.I
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>new O.B() : O.B
>O.B : 类为 O.B
>O : 类为 O
>B : 类为 O.B

z=x.h(2,2); // no match
>z=x.h(2,2) : 任意
>类型别名 :=> 任意
>z : 文字
>类型别名 :=> 文字
>x.h(2,2) : 任意
>类型别名 :=> 任意
>x.h : { (s1: 文字, s2: 数字): 文字; (s1: 数字, s2: 文字): 数字; }
>x : O.I
>h : { (s1: 文字, s2: 数字): 文字; (s1: 数字, s2: 文字): 数字; }
>2 : 2
>2 : 2

z=x.h("hello",0); // good
>z=x.h("hello",0) : 文字
>类型别名 :=> 文字
>z : 文字
>类型别名 :=> 文字
>x.h("hello",0) : 文字
>类型别名 :=> 文字
>x.h : { (s1: 文字, s2: 数字): 文字; (s1: 数字, s2: 文字): 数字; }
>x : O.I
>h : { (s1: 文字, s2: 数字): 文字; (s1: 数字, s2: 文字): 数字; }
>"hello" : "hello"
>0 : 0

var v=x.g;
>v : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>x.g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }
>x : O.I
>g : { (n1: 数字, n2: 数字): 数字; (n: 数字): 文字; (a: O.A): O.C; (c: O.C): 文字; }


