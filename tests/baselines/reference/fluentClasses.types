=== tests/cases/conformance/types/thisType/fluentClasses.ts ===
class A {
>A : A

    foo() {
>foo : () => 本体

        return this;
>this : 本体
    }
}
class B extends A {
>B : B
>A : A

    bar() {
>bar : () => 本体

        return this;
>this : 本体
    }
}
class C extends B {
>C : C
>B : B

    baz() {
>baz : () => 本体

        return this;
>this : 本体
    }
}
var c: C;
>c : C
>C : C

var z = c.foo().bar().baz();  // Fluent pattern
>z : C
>c.foo().bar().baz() : C
>c.foo().bar().baz : () => C
>c.foo().bar() : C
>c.foo().bar : () => C
>c.foo() : C
>c.foo : () => C
>c : C
>foo : () => C
>bar : () => C
>baz : () => C

