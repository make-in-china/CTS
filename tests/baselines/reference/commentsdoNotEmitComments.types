=== tests/cases/compiler/commentsdoNotEmitComments.ts ===
/** Variable comments*/
var myVariable = 10;
>myVariable : number
>类型别名 :=> 数字
>10 : 10

/** function comments*/
function foo(/** parameter comment*/p: number) {
>foo : (p: number) => void
>p : number
>类型别名 :=> 数字
}

/** variable with function type comment*/
var fooVar: () => void;
>fooVar : () => void

foo(50);
>foo(50) : void
>类型别名 :=> 无值
>foo : (p: number) => void
>50 : 50

fooVar();
>fooVar() : void
>类型别名 :=> 无值
>fooVar : () => void

/**class comment*/
class c {
>c : c

    /** constructor comment*/
    constructor() {
    }

    /** property comment */
    public b = 10;
>b : number
>类型别名 :=> 数字
>10 : 10

    /** function comment */
    public myFoo() {
>myFoo : () => number

        return this.b;
>this.b : number
>类型别名 :=> 数字
>this : this
>b : number
>类型别名 :=> 数字
    }

    /** getter comment*/
    public get prop1() {
>prop1 : number
>类型别名 :=> 数字

        return this.b;
>this.b : number
>类型别名 :=> 数字
>this : this
>b : number
>类型别名 :=> 数字
    }

    /** setter comment*/
    public set prop1(val: number) {
>prop1 : number
>类型别名 :=> 数字
>val : number
>类型别名 :=> 数字

        this.b = val;
>this.b = val : number
>类型别名 :=> 数字
>this.b : number
>类型别名 :=> 数字
>this : this
>b : number
>类型别名 :=> 数字
>val : number
>类型别名 :=> 数字
    }

    /** overload signature1*/
    public foo1(a: number): string;
>foo1 : { (a: number): string; (b: string): string; }
>a : number
>类型别名 :=> 数字

    /** Overload signature 2*/
    public foo1(b: string): string;
>foo1 : { (a: number): string; (b: string): string; }
>b : string
>类型别名 :=> 文字

    /** overload implementation signature*/
    public foo1(aOrb) {
>foo1 : { (a: number): string; (b: string): string; }
>aOrb : any
>类型别名 :=> 任意

        return aOrb.toString();
>aOrb.toString() : any
>类型别名 :=> 任意
>aOrb.toString : any
>类型别名 :=> 任意
>aOrb : any
>类型别名 :=> 任意
>toString : any
>类型别名 :=> 任意
    }
}

/**instance comment*/
var i = new c();
>i : c
>new c() : c
>c : typeof c

/** interface comments*/
interface i1 {
>i1 : i1

    /** caller comments*/
    (a: number): number;
>a : number
>类型别名 :=> 数字

    /** new comments*/
    new (b: string);
>b : string
>类型别名 :=> 文字

    /**indexer property*/
    [a: number]: string;
>a : number
>类型别名 :=> 数字

    /** function property;*/
    myFoo(/*param prop*/a: number): string;
>myFoo : (a: number) => string
>a : number
>类型别名 :=> 数字

    /** prop*/
    prop: string;
>prop : string
>类型别名 :=> 文字
}

/**interface instance comments*/
var i1_i: i1;
>i1_i : i1
>i1 : i1

/** this is module comment*/
module m1 {
>m1 : typeof m1

    /** class b */
    export class b {
>b : b

        constructor(public x: number) {
>x : number
>类型别名 :=> 数字
           
        }
    }

    /// module m2
    export module m2 {
>m2 : any
>类型别名 :=> 任意
    }
}

/// this is x
declare var x;
>x : any
>类型别名 :=> 任意


/** const enum member value comment (generated by TS) */
const enum color { red, green, blue }
>color : color
>red : color.red
>green : color.green
>blue : color.blue

var shade: color = color.green;
>shade : color
>color : color
>color.green : color.green
>color : typeof color
>green : color.green

