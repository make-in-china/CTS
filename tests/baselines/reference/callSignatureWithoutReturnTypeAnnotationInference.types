=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignatureWithoutReturnTypeAnnotationInference.ts ===
// Call signatures without a return type should infer one from the function body (if present)

// Simple types
function foo(x) {
>foo : (x: 任意) => 数字
>x : 任意
>类型别名 :=> 任意

    return 1;
>1 : 1
}
var r = foo(1);
>r : 数字
>类型别名 :=> 数字
>foo(1) : 数字
>类型别名 :=> 数字
>foo : (x: 任意) => 数字
>1 : 1

function foo2(x) {
>foo2 : (x: 任意) => 数字
>x : 任意
>类型别名 :=> 任意

    return foo(x);
>foo(x) : 数字
>类型别名 :=> 数字
>foo : (x: 任意) => 数字
>x : 任意
>类型别名 :=> 任意
}
var r2 = foo2(1);
>r2 : 数字
>类型别名 :=> 数字
>foo2(1) : 数字
>类型别名 :=> 数字
>foo2 : (x: 任意) => 数字
>1 : 1

function foo3() {
>foo3 : () => 任意

    return foo3();
>foo3() : 任意
>类型别名 :=> 任意
>foo3 : () => 任意
}
var r3 = foo3();
>r3 : 任意
>类型别名 :=> 任意
>foo3() : 任意
>类型别名 :=> 任意
>foo3 : () => 任意

function foo4<T>(x: T) {
>foo4 : <T>(x: T) => T
>T : T
>x : T
>T : T

    return x;
>x : T
}
var r4 = foo4(1);
>r4 : 数字
>类型别名 :=> 数字
>foo4(1) : 1
>foo4 : <T>(x: T) => T
>1 : 1

function foo5(x) {
>foo5 : (x: 任意) => 1 | 2
>x : 任意
>类型别名 :=> 任意

    if (true) {
>true : 为真
>类型别名 :=> 为真

        return 1;
>1 : 1

    } else {
        return 2;
>2 : 2
    }
}
var r5 = foo5(1);
>r5 : 数字
>类型别名 :=> 数字
>foo5(1) : 1 | 2
>foo5 : (x: 任意) => 1 | 2
>1 : 1

function foo6(x) {
>foo6 : (x: 任意) => 任意[]
>x : 任意
>类型别名 :=> 任意

    try {
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        return [];
>[] : 未定[]
    }
    finally {
        return [];
>[] : 未定[]
    }
}
var r6 = foo6(1);
>r6 : 任意[]
>foo6(1) : 任意[]
>foo6 : (x: 任意) => 任意[]
>1 : 1

function foo7(x) {
>foo7 : (x: 任意) => "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 任意
>类型别名 :=> 任意

    return typeof x;
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 任意
>类型别名 :=> 任意
}
var r7 = foo7(1);
>r7 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>foo7(1) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>foo7 : (x: 任意) => "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>1 : 1

// object types
function foo8(x: number) {
>foo8 : (x: 数字) => { x: 数字; }
>x : 数字
>类型别名 :=> 数字

    return { x: x };
>{ x: x } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
}
var r8 = foo8(1);
>r8 : { x: 数字; }
>foo8(1) : { x: 数字; }
>foo8 : (x: 数字) => { x: 数字; }
>1 : 1

interface I {
>I : I

    foo: string;
>foo : 文字
>类型别名 :=> 文字
}
function foo9(x: number) {
>foo9 : (x: 数字) => I
>x : 数字
>类型别名 :=> 数字

    var i: I;
>i : I
>I : I

    return i;    
>i : I
}
var r9 = foo9(1);
>r9 : I
>foo9(1) : I
>foo9 : (x: 数字) => I
>1 : 1

class C {
>C : C

    foo: string;
>foo : 文字
>类型别名 :=> 文字
}
function foo10(x: number) {
>foo10 : (x: 数字) => C
>x : 数字
>类型别名 :=> 数字

    var c: C;
>c : C
>C : C

    return c;
>c : C
}
var r10 = foo10(1);
>r10 : C
>foo10(1) : C
>foo10 : (x: 数字) => C
>1 : 1

module M {
>M : 类为 M

    export var x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1

    export class C { foo: string }
>C : C
>foo : 文字
>类型别名 :=> 文字
}
function foo11() {
>foo11 : () => 类为 M

    return M;
>M : 类为 M
}
var r11 = foo11();
>r11 : 类为 M
>foo11() : 类为 M
>foo11 : () => 类为 M

// merged declarations
interface I2 {
>I2 : I2

    x: number;
>x : 数字
>类型别名 :=> 数字
}
interface I2 {
>I2 : I2

    y: number;
>y : 数字
>类型别名 :=> 数字
}
function foo12() {
>foo12 : () => I2

    var i2: I2;
>i2 : I2
>I2 : I2

    return i2;
>i2 : I2
}
var r12 = foo12();
>r12 : I2
>foo12() : I2
>foo12 : () => I2

function m1() { return 1; }
>m1 : 类为 m1
>1 : 1

module m1 { export var y = 2; }
>m1 : 类为 m1
>y : 数字
>类型别名 :=> 数字
>2 : 2

function foo13() {
>foo13 : () => 类为 m1

    return m1;
>m1 : 类为 m1
}
var r13 = foo13();
>r13 : 类为 m1
>foo13() : 类为 m1
>foo13 : () => 类为 m1

class c1 {
>c1 : c1

    foo: string;
>foo : 文字
>类型别名 :=> 文字

    constructor(x) { }
>x : 任意
>类型别名 :=> 任意
}
module c1 {
>c1 : 类为 c1

    export var x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1
}
function foo14() {
>foo14 : () => 类为 c1

    return c1;
>c1 : 类为 c1
}
var r14 = foo14();
>r14 : 类为 c1
>foo14() : 类为 c1
>foo14 : () => 类为 c1

enum e1 { A }
>e1 : e1
>A : e1

module e1 { export var y = 1; }
>e1 : 类为 e1
>y : 数字
>类型别名 :=> 数字
>1 : 1

function foo15() {
>foo15 : () => 类为 e1

    return e1;
>e1 : 类为 e1
}
var r15 = foo15();
>r15 : 类为 e1
>foo15() : 类为 e1
>foo15 : () => 类为 e1

