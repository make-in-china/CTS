=== tests/cases/conformance/types/rest/objectRest2.ts ===
// test for #12203
declare function connectionFromArray(objects: number, args: any): {};
>connectionFromArray : (objects: 数字, args: 任意) => {}
>objects : 数字
>类型别名 :=> 数字
>args : 任意
>类型别名 :=> 任意

function rootConnection(name: string) {
>rootConnection : (name: 文字) => { resolve: (context: 任意, args: 任意) => Promise<{}>; }
>name : 文字
>类型别名 :=> 文字

  return {
>{    resolve: async (context, args) => {        const { objects } = await { objects: 12 };      return {        ...connectionFromArray(objects, args)      };    }  } : { resolve: (context: 任意, args: 任意) => Promise<{}>; }

    resolve: async (context, args) => {
>resolve : (context: 任意, args: 任意) => Promise<{}>
>async (context, args) => {        const { objects } = await { objects: 12 };      return {        ...connectionFromArray(objects, args)      };    } : (context: 任意, args: 任意) => Promise<{}>
>context : 任意
>类型别名 :=> 任意
>args : 任意
>类型别名 :=> 任意

        const { objects } = await { objects: 12 };
>objects : 数字
>类型别名 :=> 数字
>await { objects: 12 } : { objects: 数字; }
>{ objects: 12 } : { objects: 数字; }
>objects : 数字
>类型别名 :=> 数字
>12 : 12

      return {
>{        ...connectionFromArray(objects, args)      } : {}

        ...connectionFromArray(objects, args)
>connectionFromArray(objects, args) : {}
>connectionFromArray : (objects: 数字, args: 任意) => {}
>objects : 数字
>类型别名 :=> 数字
>args : 任意
>类型别名 :=> 任意

      };
    }
  };
}
rootConnection('test');
>rootConnection('test') : { resolve: (context: 任意, args: 任意) => Promise<{}>; }
>rootConnection : (name: 文字) => { resolve: (context: 任意, args: 任意) => Promise<{}>; }
>'test' : "test"

