=== tests/cases/conformance/types/specifyingTypes/typeLiterals/functionLiteralForOverloads2.ts ===
// basic uses of function literals with constructor overloads

class C {
>C : C

    constructor(x: string);
>x : 文字
>类型别名 :=> 文字

    constructor(x: number);
>x : 数字
>类型别名 :=> 数字

    constructor(x) { }
>x : 任意
>类型别名 :=> 任意
}

class D<T> {
>D : D<T>
>T : T

    constructor(x: string);
>x : 文字
>类型别名 :=> 文字

    constructor(x: number);
>x : 数字
>类型别名 :=> 数字

    constructor(x) { }
>x : 任意
>类型别名 :=> 任意
}

var f: {
>f : { 新建 (x: 文字): C; 新建 (x: 数字): C; }

    new(x: string): C;
>x : 文字
>类型别名 :=> 文字
>C : C

    new(x: number): C;
>x : 数字
>类型别名 :=> 数字
>C : C

} = C;
>C : 类为 C

var f2: {
>f2 : { 新建 <T>(x: 文字): C; 新建 <T>(x: 数字): C; }

    new<T>(x: string): C;
>T : T
>x : 文字
>类型别名 :=> 文字
>C : C

    new<T>(x: number): C;
>T : T
>x : 数字
>类型别名 :=> 数字
>C : C

} = C;
>C : 类为 C

var f3: {
>f3 : { 新建 <T>(x: 文字): D<T>; 新建 <T>(x: 数字): D<T>; }

    new<T>(x: string): D<T>;
>T : T
>x : 文字
>类型别名 :=> 文字
>D : D<T>
>T : T

    new<T>(x: number): D<T>;
>T : T
>x : 数字
>类型别名 :=> 数字
>D : D<T>
>T : T

} = D;
>D : 类为 D

