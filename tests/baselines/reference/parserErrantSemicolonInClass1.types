=== tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserErrantSemicolonInClass1.ts ===
class a {
>a : a

    //constructor ();
    constructor (n: number);
>n : number
>类型别名 :=> 数字

    constructor (s: string);
>s : string
>类型别名 :=> 文字

    constructor (ns: any) {
>ns : any
>类型别名 :=> 任意

    }

    public pgF() { };
>pgF : () => void

    public pv;
>pv : any
>类型别名 :=> 任意

    public get d() {
>d : number
>类型别名 :=> 数字

        return 30;
>30 : 30
    }
    public set d() {
>d : number
>类型别名 :=> 数字
    }

    public static get p2() {
>p2 : { x: number; y: number; }

        return { x: 30, y: 40 };
>{ x: 30, y: 40 } : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>30 : 30
>y : number
>类型别名 :=> 数字
>40 : 40
    }

    private static d2() {
>d2 : () => void
    }
    private static get p3() {
>p3 : string
>类型别名 :=> 文字

        return "string";
>"string" : "string"
    }
    private pv3;
>pv3 : any
>类型别名 :=> 任意

    private foo(n: number): string;
>foo : { (n: number): string; (s: string): string; }
>n : number
>类型别名 :=> 数字

    private foo(s: string): string;
>foo : { (n: number): string; (s: string): string; }
>s : string
>类型别名 :=> 文字

    private foo(ns: any) {
>foo : { (n: number): string; (s: string): string; }
>ns : any
>类型别名 :=> 任意

        return ns.toString();
>ns.toString() : any
>类型别名 :=> 任意
>ns.toString : any
>类型别名 :=> 任意
>ns : any
>类型别名 :=> 任意
>toString : any
>类型别名 :=> 任意
    }
}

