=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/unionTypesAssignability.ts ===
var unionNumberString: number | string;
>unionNumberString : 文字 | 数字

class C { }
>C : C

class D extends C { foo1() { } }
>D : D
>C : C
>foo1 : () => 无值

class E extends C { foo2() { } }
>E : E
>C : C
>foo2 : () => 无值

var unionDE: D | E;
>unionDE : D | E
>D : D
>E : E

var num: number;
>num : 数字
>类型别名 :=> 数字

var str: string;
>str : 文字
>类型别名 :=> 文字

var c: C;
>c : C
>C : C

var d: D;
>d : D
>D : D

var e: E;
>e : E
>E : E

// A union type U is assignable to a type T if each type in U is assignable to T
c = d;
>c = d : D
>c : C
>d : D

c = e;
>c = e : E
>c : C
>e : E

c = unionDE; // ok
>c = unionDE : D | E
>c : C
>unionDE : D | E

d = d;
>d = d : D
>d : D
>d : D

d = e;
>d = e : E
>d : D
>e : E

d = unionDE; // error e is not assignable to d
>d = unionDE : D | E
>d : D
>unionDE : D | E

e = d;
>e = d : D
>e : E
>d : D

e = e;
>e = e : E
>e : E
>e : E

e = unionDE; // error d is not assignable to e
>e = unionDE : D | E
>e : E
>unionDE : D | E

num = num;
>num = num : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字

num = str;
>num = str : 文字
>类型别名 :=> 文字
>num : 数字
>类型别名 :=> 数字
>str : 文字
>类型别名 :=> 文字

num = unionNumberString; // error string is not assignable to number
>num = unionNumberString : 文字 | 数字
>num : 数字
>类型别名 :=> 数字
>unionNumberString : 文字 | 数字

str = num;
>str = num : 数字
>类型别名 :=> 数字
>str : 文字
>类型别名 :=> 文字
>num : 数字
>类型别名 :=> 数字

str = str;
>str = str : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字

str = unionNumberString; // error since number is not assignable to string
>str = unionNumberString : 文字 | 数字
>str : 文字
>类型别名 :=> 文字
>unionNumberString : 文字 | 数字

// A type T is assignable to a union type U if T is assignable to any type in U
d = c;
>d = c : C
>d : D
>c : C

e = c;
>e = c : C
>e : E
>c : C

unionDE = c; // error since C is not assinable to either D or E
>unionDE = c : C
>unionDE : D | E
>c : C

d = d;
>d = d : D
>d : D
>d : D

e = d;
>e = d : D
>e : E
>d : D

unionDE = d; // ok
>unionDE = d : D
>unionDE : D | E
>d : D

d = e;
>d = e : E
>d : D
>e : E

e = e;
>e = e : E
>e : E
>e : E

unionDE = e; // ok
>unionDE = e : E
>unionDE : D | E
>e : E

num = num;
>num = num : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字

str = num;
>str = num : 数字
>类型别名 :=> 数字
>str : 文字
>类型别名 :=> 文字
>num : 数字
>类型别名 :=> 数字

unionNumberString = num; // ok 
>unionNumberString = num : 数字
>类型别名 :=> 数字
>unionNumberString : 文字 | 数字
>num : 数字
>类型别名 :=> 数字

num = str;
>num = str : 文字
>类型别名 :=> 文字
>num : 数字
>类型别名 :=> 数字
>str : 文字
>类型别名 :=> 文字

str = str;
>str = str : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字

unionNumberString = str; // ok
>unionNumberString = str : 文字
>类型别名 :=> 文字
>unionNumberString : 文字 | 数字
>str : 文字
>类型别名 :=> 文字

// Any
var anyVar: any;
>anyVar : 任意
>类型别名 :=> 任意

anyVar = unionDE;
>anyVar = unionDE : E
>anyVar : 任意
>类型别名 :=> 任意
>unionDE : E

anyVar = unionNumberString;
>anyVar = unionNumberString : 文字
>类型别名 :=> 文字
>anyVar : 任意
>类型别名 :=> 任意
>unionNumberString : 文字
>类型别名 :=> 文字

unionDE = anyVar;
>unionDE = anyVar : 任意
>类型别名 :=> 任意
>unionDE : D | E
>anyVar : 任意
>类型别名 :=> 任意

unionNumberString = anyVar;
>unionNumberString = anyVar : 任意
>类型别名 :=> 任意
>unionNumberString : 文字 | 数字
>anyVar : 任意
>类型别名 :=> 任意

// null
unionDE = null;
>unionDE = null : 空值
>类型别名 :=> 空值
>unionDE : D | E
>null : 空值
>类型别名 :=> 空值

unionNumberString = null;
>unionNumberString = null : 空值
>类型别名 :=> 空值
>unionNumberString : 文字 | 数字
>null : 空值
>类型别名 :=> 空值

// undefined
unionDE = undefined;
>unionDE = undefined : 未定
>类型别名 :=> 未定
>unionDE : D | E
>undefined : 未定
>类型别名 :=> 未定

unionNumberString = undefined;
>unionNumberString = undefined : 未定
>类型别名 :=> 未定
>unionNumberString : 文字 | 数字
>undefined : 未定
>类型别名 :=> 未定

// type parameters
function foo<T, U>(t: T, u: U) {
>foo : <T, U>(t: T, u: U) => 无值
>T : T
>U : U
>t : T
>T : T
>u : U
>U : U

    t = u; // error
>t = u : U
>t : T
>u : U

    u = t; // error
>u = t : T
>u : U
>t : T

    var x : T | U;
>x : T | U
>T : T
>U : U

    x = t; // ok
>x = t : T
>x : T | U
>t : T

    x = u; // ok
>x = u : U
>x : T | U
>u : U

    x = undefined;
>x = undefined : 未定
>类型别名 :=> 未定
>x : T | U
>undefined : 未定
>类型别名 :=> 未定

    t = x; // error U not assignable to T
>t = x : T | U
>t : T
>x : T | U

    u = x; // error T not assignable to U
>u = x : T | U
>u : U
>x : T | U
}

