=== tests/cases/compiler/unionPropertyExistence.ts ===
interface A {
>A : A

    inAll: string;
>inAll : string
>类型别名 :=> 文字

    notInB: string;
>notInB : string
>类型别名 :=> 文字

    notInC: string;
>notInC : string
>类型别名 :=> 文字
}

interface B {
>B : B

    inAll: boolean;
>inAll : boolean
>类型别名 :=> 真假

    onlyInB: number;
>onlyInB : number
>类型别名 :=> 数字

    notInC: string;
>notInC : string
>类型别名 :=> 文字
}

interface C {
>C : C

    inAll: number;
>inAll : number
>类型别名 :=> 数字

    notInB: string;
>notInB : string
>类型别名 :=> 文字
}

type AB = A | B;
>AB : AB
>A : A
>B : B

type ABC = C | AB;
>ABC : ABC
>C : C
>AB : AB

var ab: AB;
>ab : AB
>AB : AB

var abc: ABC;
>abc : ABC
>ABC : ABC

declare const x: "foo" | "bar";
>x : "foo" | "bar"

declare const bFoo: B | "foo";
>bFoo : B | "foo"
>B : B

x.nope();
>x.nope() : any
>类型别名 :=> 任意
>x.nope : any
>类型别名 :=> 任意
>x : "foo" | "bar"
>nope : any
>类型别名 :=> 任意

bFoo.onlyInB;
>bFoo.onlyInB : any
>类型别名 :=> 任意
>bFoo : B | "foo"
>onlyInB : any
>类型别名 :=> 任意

x.length; // Ok
>x.length : number
>类型别名 :=> 数字
>x : "foo" | "bar"
>length : number
>类型别名 :=> 数字

bFoo.length;
>bFoo.length : any
>类型别名 :=> 任意
>bFoo : B | "foo"
>length : any
>类型别名 :=> 任意

ab.onlyInB;
>ab.onlyInB : any
>类型别名 :=> 任意
>ab : AB
>onlyInB : any
>类型别名 :=> 任意

ab.notInC; // Ok
>ab.notInC : string
>类型别名 :=> 文字
>ab : AB
>notInC : string
>类型别名 :=> 文字

abc.notInC;
>abc.notInC : any
>类型别名 :=> 任意
>abc : ABC
>notInC : any
>类型别名 :=> 任意

ab.notInB;
>ab.notInB : any
>类型别名 :=> 任意
>ab : AB
>notInB : any
>类型别名 :=> 任意

abc.notInB;
>abc.notInB : any
>类型别名 :=> 任意
>abc : ABC
>notInB : any
>类型别名 :=> 任意

abc.inAll; // Ok
>abc.inAll : string | number | boolean
>abc : ABC
>inAll : string | number | boolean

abc.inNone;
>abc.inNone : any
>类型别名 :=> 任意
>abc : ABC
>inNone : any
>类型别名 :=> 任意

