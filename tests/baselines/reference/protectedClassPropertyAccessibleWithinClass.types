=== tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinClass.ts ===
// no errors

class C {
>C : C

    protected x: string;
>x : string
>类型别名 :=> 文字

    protected get y() { return this.x; }
>y : string
>类型别名 :=> 文字
>this.x : string
>类型别名 :=> 文字
>this : this
>x : string
>类型别名 :=> 文字

    protected set y(x) { this.y = this.x; }
>y : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>this.y = this.x : string
>类型别名 :=> 文字
>this.y : string
>类型别名 :=> 文字
>this : this
>y : string
>类型别名 :=> 文字
>this.x : string
>类型别名 :=> 文字
>this : this
>x : string
>类型别名 :=> 文字

    protected foo() { return this.foo; }
>foo : () => any
>this.foo : () => any
>this : this
>foo : () => any

    protected static x: string;
>x : string
>类型别名 :=> 文字

    protected static get y() { return this.x; }
>y : string
>类型别名 :=> 文字
>this.x : string
>类型别名 :=> 文字
>this : typeof C
>x : string
>类型别名 :=> 文字

    protected static set y(x) { this.y = this.x; }
>y : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>this.y = this.x : string
>类型别名 :=> 文字
>this.y : string
>类型别名 :=> 文字
>this : typeof C
>y : string
>类型别名 :=> 文字
>this.x : string
>类型别名 :=> 文字
>this : typeof C
>x : string
>类型别名 :=> 文字

    protected static foo() { return this.foo; }
>foo : () => typeof C.foo
>this.foo : () => typeof C.foo
>this : typeof C
>foo : () => typeof C.foo

    protected static bar() { this.foo(); }
>bar : () => void
>this.foo() : () => typeof C.foo
>this.foo : () => typeof C.foo
>this : typeof C
>foo : () => typeof C.foo
}

// added level of function nesting
class C2 {
>C2 : C2

    protected x: string;
>x : string
>类型别名 :=> 文字

    protected get y() { () => this.x; return null; }
>y : any
>类型别名 :=> 任意
>() => this.x : () => string
>this.x : string
>类型别名 :=> 文字
>this : this
>x : string
>类型别名 :=> 文字
>null : null
>类型别名 :=> 空值

    protected set y(x) { () => { this.y = this.x; } }
>y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>() => { this.y = this.x; } : () => void
>this.y = this.x : string
>类型别名 :=> 文字
>this.y : any
>类型别名 :=> 任意
>this : this
>y : any
>类型别名 :=> 任意
>this.x : string
>类型别名 :=> 文字
>this : this
>x : string
>类型别名 :=> 文字

    protected foo() { () => this.foo; }
>foo : () => void
>() => this.foo : () => () => void
>this.foo : () => void
>this : this
>foo : () => void

    protected static x: string;
>x : string
>类型别名 :=> 文字

    protected static get y() { () => this.x; return null; }
>y : any
>类型别名 :=> 任意
>() => this.x : () => string
>this.x : string
>类型别名 :=> 文字
>this : typeof C2
>x : string
>类型别名 :=> 文字
>null : null
>类型别名 :=> 空值

    protected static set y(x) {
>y : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

        () => { this.y = this.x; }
>() => { this.y = this.x; } : () => void
>this.y = this.x : string
>类型别名 :=> 文字
>this.y : any
>类型别名 :=> 任意
>this : typeof C2
>y : any
>类型别名 :=> 任意
>this.x : string
>类型别名 :=> 文字
>this : typeof C2
>x : string
>类型别名 :=> 文字
     }
    protected static foo() { () => this.foo; }
>foo : () => void
>() => this.foo : () => () => void
>this.foo : () => void
>this : typeof C2
>foo : () => void

    protected static bar() { () => this.foo(); }
>bar : () => void
>() => this.foo() : () => void
>this.foo() : void
>类型别名 :=> 无值
>this.foo : () => void
>this : typeof C2
>foo : () => void
}

