=== tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinSubclass.ts ===
// no errors

class B {
>B : B

    protected x: string;
>x : string
>类型别名 :=> 文字

    protected static x: string;
>x : string
>类型别名 :=> 文字
}

class C extends B {
>C : C
>B : B

    protected get y() { return this.x; }
>y : string
>类型别名 :=> 文字
>this.x : string
>类型别名 :=> 文字
>this : this
>x : string
>类型别名 :=> 文字

    protected set y(x) { this.y = this.x; }
>y : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>this.y = this.x : string
>类型别名 :=> 文字
>this.y : string
>类型别名 :=> 文字
>this : this
>y : string
>类型别名 :=> 文字
>this.x : string
>类型别名 :=> 文字
>this : this
>x : string
>类型别名 :=> 文字

    protected foo() { return this.x; }
>foo : () => string
>this.x : string
>类型别名 :=> 文字
>this : this
>x : string
>类型别名 :=> 文字

    protected bar() { return this.foo(); }
>bar : () => string
>this.foo() : string
>类型别名 :=> 文字
>this.foo : () => string
>this : this
>foo : () => string

    protected static get y() { return this.x; }
>y : string
>类型别名 :=> 文字
>this.x : string
>类型别名 :=> 文字
>this : typeof C
>x : string
>类型别名 :=> 文字

    protected static set y(x) { this.y = this.x; }
>y : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>this.y = this.x : string
>类型别名 :=> 文字
>this.y : string
>类型别名 :=> 文字
>this : typeof C
>y : string
>类型别名 :=> 文字
>this.x : string
>类型别名 :=> 文字
>this : typeof C
>x : string
>类型别名 :=> 文字

    protected static foo() { return this.x; }
>foo : () => string
>this.x : string
>类型别名 :=> 文字
>this : typeof C
>x : string
>类型别名 :=> 文字

    protected static bar() { this.foo(); }
>bar : () => void
>this.foo() : string
>类型别名 :=> 文字
>this.foo : () => string
>this : typeof C
>foo : () => string
}

