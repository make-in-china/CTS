=== tests/cases/compiler/autolift3.ts ===
class B {
>B : B

    constructor() {
        function foo() {  }
>foo : () => 无值

        foo();
>foo() : 无值
>类型别名 :=> 无值
>foo : () => 无值

        var a = 0;
>a : 数字
>类型别名 :=> 数字
>0 : 0

        var inner: any = (function() {
>inner : 任意
>类型别名 :=> 任意
>(function() {            var CScriptIO = (function() {                var fso = 0                return {                    readFile: function(path: string): string {                        return fso.toString();                    }                }            })();            return inner;        })() : 任意
>类型别名 :=> 任意
>(function() {            var CScriptIO = (function() {                var fso = 0                return {                    readFile: function(path: string): string {                        return fso.toString();                    }                }            })();            return inner;        }) : () => 任意
>function() {            var CScriptIO = (function() {                var fso = 0                return {                    readFile: function(path: string): string {                        return fso.toString();                    }                }            })();            return inner;        } : () => 任意

            var CScriptIO = (function() {
>CScriptIO : { readFile: (path: 文字) => 文字; }
>(function() {                var fso = 0                return {                    readFile: function(path: string): string {                        return fso.toString();                    }                }            })() : { readFile: (path: 文字) => 文字; }
>(function() {                var fso = 0                return {                    readFile: function(path: string): string {                        return fso.toString();                    }                }            }) : () => { readFile: (path: 文字) => 文字; }
>function() {                var fso = 0                return {                    readFile: function(path: string): string {                        return fso.toString();                    }                }            } : () => { readFile: (path: 文字) => 文字; }

                var fso = 0
>fso : 数字
>类型别名 :=> 数字
>0 : 0

                return {
>{                    readFile: function(path: string): string {                        return fso.toString();                    }                } : { readFile: (path: 文字) => 文字; }

                    readFile: function(path: string): string {
>readFile : (path: 文字) => 文字
>function(path: string): string {                        return fso.toString();                    } : (path: 文字) => 文字
>path : 文字
>类型别名 :=> 文字

                        return fso.toString();
>fso.toString() : 文字
>类型别名 :=> 文字
>fso.toString : (radix?: 数字) => 文字
>fso : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
                    }
                }
            })();
            return inner;
>inner : 任意
>类型别名 :=> 任意

        })();
    }
}

var b = new B();
>b : B
>new B() : B
>B : 类为 B

b.foo();
>b.foo() : 任意
>类型别名 :=> 任意
>b.foo : 任意
>类型别名 :=> 任意
>b : B
>foo : 任意
>类型别名 :=> 任意




