=== tests/cases/compiler/genericInference2.ts ===
    declare module ko { 
>ko : 类为 ko

       export interface Observable<T> { 
>Observable : Observable<T>
>T : T

           (): T; 
>T : T

           (value: T): any; 
>value : T
>T : T

           N: number; 
>N : 数字
>类型别名 :=> 数字

           g: boolean; 
>g : 真假
>类型别名 :=> 真假

           r: T; 
>r : T
>T : T
       } 
       export function observable<T>(value: T): Observable<T>; 
>observable : <T>(value: T) => Observable<T>
>T : T
>value : T
>T : T
>Observable : Observable<T>
>T : T
    } 
    var o = { 
>o : { name: ko.Observable<文字>; age: ko.Observable<数字>; }
>{        name: ko.observable("Bob"),        age: ko.observable(37)     } : { name: ko.Observable<文字>; age: ko.Observable<数字>; }

       name: ko.observable("Bob"), 
>name : ko.Observable<文字>
>ko.observable("Bob") : ko.Observable<文字>
>ko.observable : <T>(value: T) => ko.Observable<T>
>ko : 类为 ko
>observable : <T>(value: T) => ko.Observable<T>
>"Bob" : "Bob"

       age: ko.observable(37) 
>age : ko.Observable<数字>
>ko.observable(37) : ko.Observable<数字>
>ko.observable : <T>(value: T) => ko.Observable<T>
>ko : 类为 ko
>observable : <T>(value: T) => ko.Observable<T>
>37 : 37

    }; 
    var x_v = o.name().length;  // should be 'number'
>x_v : 数字
>类型别名 :=> 数字
>o.name().length : 数字
>类型别名 :=> 数字
>o.name() : 文字
>类型别名 :=> 文字
>o.name : ko.Observable<文字>
>o : { name: ko.Observable<文字>; age: ko.Observable<数字>; }
>name : ko.Observable<文字>
>length : 数字
>类型别名 :=> 数字

    var age_v = o.age();  // should be 'number'
>age_v : 数字
>类型别名 :=> 数字
>o.age() : 数字
>类型别名 :=> 数字
>o.age : ko.Observable<数字>
>o : { name: ko.Observable<文字>; age: ko.Observable<数字>; }
>age : ko.Observable<数字>

    var name_v = o.name("Robert");  // should be 'any'
>name_v : 任意
>类型别名 :=> 任意
>o.name("Robert") : 任意
>类型别名 :=> 任意
>o.name : ko.Observable<文字>
>o : { name: ko.Observable<文字>; age: ko.Observable<数字>; }
>name : ko.Observable<文字>
>"Robert" : "Robert"

    var zz_v = o.name.N;  // should be 'number'
>zz_v : 数字
>类型别名 :=> 数字
>o.name.N : 数字
>类型别名 :=> 数字
>o.name : ko.Observable<文字>
>o : { name: ko.Observable<文字>; age: ko.Observable<数字>; }
>name : ko.Observable<文字>
>N : 数字
>类型别名 :=> 数字

    var yy_v = o.name.g;  // should be 'boolean'
>yy_v : 真假
>类型别名 :=> 真假
>o.name.g : 真假
>类型别名 :=> 真假
>o.name : ko.Observable<文字>
>o : { name: ko.Observable<文字>; age: ko.Observable<数字>; }
>name : ko.Observable<文字>
>g : 真假
>类型别名 :=> 真假

    var rr_v = o.name.r;  // should be 'string'
>rr_v : 文字
>类型别名 :=> 文字
>o.name.r : 文字
>类型别名 :=> 文字
>o.name : ko.Observable<文字>
>o : { name: ko.Observable<文字>; age: ko.Observable<数字>; }
>name : ko.Observable<文字>
>r : 文字
>类型别名 :=> 文字

