=== tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithBooleanType.ts ===
// delete  operator on boolean type
var BOOLEAN: boolean;
>BOOLEAN : boolean
>类型别名 :=> 真假

function foo(): boolean { return true; }
>foo : () => boolean
>true : true
>类型别名 :=> 为真

class A {
>A : A

    public a: boolean;
>a : boolean
>类型别名 :=> 真假

    static foo() { return false; }
>foo : () => boolean
>false : false
>类型别名 :=> 为假
}
module M {
>M : typeof M

    export var n: boolean;
>n : boolean
>类型别名 :=> 真假
}

var objA = new A();
>objA : A
>new A() : A
>A : typeof A

// boolean type var
var ResultIsBoolean1 = delete BOOLEAN;
>ResultIsBoolean1 : boolean
>类型别名 :=> 真假
>delete BOOLEAN : boolean
>类型别名 :=> 真假
>BOOLEAN : boolean
>类型别名 :=> 真假

// boolean type literal
var ResultIsBoolean2 = delete true;
>ResultIsBoolean2 : boolean
>类型别名 :=> 真假
>delete true : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

var ResultIsBoolean3 = delete { x: true, y: false };
>ResultIsBoolean3 : boolean
>类型别名 :=> 真假
>delete { x: true, y: false } : boolean
>类型别名 :=> 真假
>{ x: true, y: false } : { x: boolean; y: boolean; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>y : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

// boolean type expressions
var ResultIsBoolean4 = delete objA.a;
>ResultIsBoolean4 : boolean
>类型别名 :=> 真假
>delete objA.a : boolean
>类型别名 :=> 真假
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假

var ResultIsBoolean5 = delete M.n;
>ResultIsBoolean5 : boolean
>类型别名 :=> 真假
>delete M.n : boolean
>类型别名 :=> 真假
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

var ResultIsBoolean6 = delete foo();
>ResultIsBoolean6 : boolean
>类型别名 :=> 真假
>delete foo() : boolean
>类型别名 :=> 真假
>foo() : boolean
>类型别名 :=> 真假
>foo : () => boolean

var ResultIsBoolean7 = delete A.foo();
>ResultIsBoolean7 : boolean
>类型别名 :=> 真假
>delete A.foo() : boolean
>类型别名 :=> 真假
>A.foo() : boolean
>类型别名 :=> 真假
>A.foo : () => boolean
>A : typeof A
>foo : () => boolean

// multiple delete  operator
var ResultIsBoolean8 = delete delete BOOLEAN;
>ResultIsBoolean8 : boolean
>类型别名 :=> 真假
>delete delete BOOLEAN : boolean
>类型别名 :=> 真假
>delete BOOLEAN : boolean
>类型别名 :=> 真假
>BOOLEAN : boolean
>类型别名 :=> 真假

// miss assignment operators
delete true;
>delete true : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

delete BOOLEAN;
>delete BOOLEAN : boolean
>类型别名 :=> 真假
>BOOLEAN : boolean
>类型别名 :=> 真假

delete foo();
>delete foo() : boolean
>类型别名 :=> 真假
>foo() : boolean
>类型别名 :=> 真假
>foo : () => boolean

delete true, false;
>delete true, false : false
>类型别名 :=> 为假
>delete true : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

delete objA.a;
>delete objA.a : boolean
>类型别名 :=> 真假
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假

delete M.n;
>delete M.n : boolean
>类型别名 :=> 真假
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

