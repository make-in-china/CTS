=== tests/cases/conformance/classes/members/accessibility/privateClassPropertyAccessibleWithinClass.ts ===
// no errors

class C {
>C : C

    private x: string;
>x : 文字
>类型别名 :=> 文字

    private get y() { return this.x; }
>y : 文字
>类型别名 :=> 文字
>this.x : 文字
>类型别名 :=> 文字
>this : 本体
>x : 文字
>类型别名 :=> 文字

    private set y(x) { this.y = this.x; }
>y : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>this.y = this.x : 文字
>类型别名 :=> 文字
>this.y : 文字
>类型别名 :=> 文字
>this : 本体
>y : 文字
>类型别名 :=> 文字
>this.x : 文字
>类型别名 :=> 文字
>this : 本体
>x : 文字
>类型别名 :=> 文字

    private foo() { return this.foo; }
>foo : () => 任意
>this.foo : () => 任意
>this : 本体
>foo : () => 任意

    private static x: string;
>x : 文字
>类型别名 :=> 文字

    private static get y() { return this.x; }
>y : 文字
>类型别名 :=> 文字
>this.x : 文字
>类型别名 :=> 文字
>this : 类为 C
>x : 文字
>类型别名 :=> 文字

    private static set y(x) { this.y = this.x; }
>y : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>this.y = this.x : 文字
>类型别名 :=> 文字
>this.y : 文字
>类型别名 :=> 文字
>this : 类为 C
>y : 文字
>类型别名 :=> 文字
>this.x : 文字
>类型别名 :=> 文字
>this : 类为 C
>x : 文字
>类型别名 :=> 文字

    private static foo() { return this.foo; }
>foo : () => 类为 C.foo
>this.foo : () => 类为 C.foo
>this : 类为 C
>foo : () => 类为 C.foo

    private static bar() { this.foo(); }
>bar : () => 无值
>this.foo() : () => 类为 C.foo
>this.foo : () => 类为 C.foo
>this : 类为 C
>foo : () => 类为 C.foo
}

// added level of function nesting
class C2 {
>C2 : C2

    private x: string;
>x : 文字
>类型别名 :=> 文字

    private get y() { () => this.x; return null; }
>y : 任意
>类型别名 :=> 任意
>() => this.x : () => 文字
>this.x : 文字
>类型别名 :=> 文字
>this : 本体
>x : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

    private set y(x) { () => { this.y = this.x; } }
>y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>() => { this.y = this.x; } : () => 无值
>this.y = this.x : 文字
>类型别名 :=> 文字
>this.y : 任意
>类型别名 :=> 任意
>this : 本体
>y : 任意
>类型别名 :=> 任意
>this.x : 文字
>类型别名 :=> 文字
>this : 本体
>x : 文字
>类型别名 :=> 文字

    private foo() { () => this.foo; }
>foo : () => 无值
>() => this.foo : () => () => 无值
>this.foo : () => 无值
>this : 本体
>foo : () => 无值

    private static x: string;
>x : 文字
>类型别名 :=> 文字

    private static get y() { () => this.x; return null; }
>y : 任意
>类型别名 :=> 任意
>() => this.x : () => 文字
>this.x : 文字
>类型别名 :=> 文字
>this : 类为 C2
>x : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

    private static set y(x) {
>y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

        () => { this.y = this.x; }
>() => { this.y = this.x; } : () => 无值
>this.y = this.x : 文字
>类型别名 :=> 文字
>this.y : 任意
>类型别名 :=> 任意
>this : 类为 C2
>y : 任意
>类型别名 :=> 任意
>this.x : 文字
>类型别名 :=> 文字
>this : 类为 C2
>x : 文字
>类型别名 :=> 文字
     }
    private static foo() { () => this.foo; }
>foo : () => 无值
>() => this.foo : () => () => 无值
>this.foo : () => 无值
>this : 类为 C2
>foo : () => 无值

    private static bar() { () => this.foo(); }
>bar : () => 无值
>() => this.foo() : () => 无值
>this.foo() : 无值
>类型别名 :=> 无值
>this.foo : () => 无值
>this : 类为 C2
>foo : () => 无值
}

