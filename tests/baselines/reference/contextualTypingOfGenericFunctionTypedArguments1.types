=== tests/cases/compiler/contextualTypingOfGenericFunctionTypedArguments1.ts ===
interface Collection<T> {
>Collection : Collection<T>
>T : T

    length: number;
>length : number
>类型别名 :=> 数字

    add(x: T): void;
>add : (x: T) => void
>x : T
>T : T

    remove(x: T): boolean;
>remove : (x: T) => boolean
>x : T
>T : T
}

interface Combinators {
>Combinators : Combinators

    forEach<T>(c: Collection<T>, f: (x: T) => Date): void;
>forEach : <T>(c: Collection<T>, f: (x: T) => Date) => void
>T : T
>c : Collection<T>
>Collection : Collection<T>
>T : T
>f : (x: T) => Date
>x : T
>T : T
>Date : Date
}

var c2: Collection<number>;
>c2 : Collection<number>
>Collection : Collection<T>

var _: Combinators;
>_ : Combinators
>Combinators : Combinators

// errors on all 3 lines, bug was that r5 was the only line with errors
var f = (x: number) => { return x.toFixed() };
>f : (x: number) => string
>(x: number) => { return x.toFixed() } : (x: number) => string
>x : number
>类型别名 :=> 数字
>x.toFixed() : string
>类型别名 :=> 文字
>x.toFixed : (fractionDigits?: number) => string
>x : number
>类型别名 :=> 数字
>toFixed : (fractionDigits?: number) => string

var r5 = _.forEach<number>(c2, f); 
>r5 : any
>类型别名 :=> 任意
>_.forEach<number>(c2, f) : any
>类型别名 :=> 任意
>_.forEach : <T>(c: Collection<T>, f: (x: T) => Date) => void
>_ : Combinators
>forEach : <T>(c: Collection<T>, f: (x: T) => Date) => void
>c2 : Collection<number>
>f : (x: number) => string

var r6 = _.forEach<number>(c2, (x) => { return x.toFixed() }); 
>r6 : any
>类型别名 :=> 任意
>_.forEach<number>(c2, (x) => { return x.toFixed() }) : any
>类型别名 :=> 任意
>_.forEach : <T>(c: Collection<T>, f: (x: T) => Date) => void
>_ : Combinators
>forEach : <T>(c: Collection<T>, f: (x: T) => Date) => void
>c2 : Collection<number>
>(x) => { return x.toFixed() } : (x: number) => string
>x : number
>类型别名 :=> 数字
>x.toFixed() : string
>类型别名 :=> 文字
>x.toFixed : (fractionDigits?: number) => string
>x : number
>类型别名 :=> 数字
>toFixed : (fractionDigits?: number) => string

