=== tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassWithPrivateInstanceShadowingPublicInstance.ts ===
class Base {
>Base : Base

    public x: string;
>x : 文字
>类型别名 :=> 文字

    public fn(): string {
>fn : () => 文字

        return '';
>'' : ""
    }

    public get a() { return 1; }
>a : 数字
>类型别名 :=> 数字
>1 : 1

    public set a(v) { }
>a : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字
}

// error, not a subtype
class Derived extends Base {
>Derived : Derived
>Base : Base

    private x: string; 
>x : 文字
>类型别名 :=> 文字

    private fn(): string {
>fn : () => 文字

        return '';
>'' : ""
    }

    private get a() { return 1; }
>a : 数字
>类型别名 :=> 数字
>1 : 1

    private set a(v) { }
>a : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字
}

var r = Base.x; // ok
>r : 任意
>类型别名 :=> 任意
>Base.x : 任意
>类型别名 :=> 任意
>Base : 类为 Base
>x : 任意
>类型别名 :=> 任意

var r2 = Derived.x; // error
>r2 : 任意
>类型别名 :=> 任意
>Derived.x : 任意
>类型别名 :=> 任意
>Derived : 类为 Derived
>x : 任意
>类型别名 :=> 任意

var r3 = Base.fn(); // ok
>r3 : 任意
>类型别名 :=> 任意
>Base.fn() : 任意
>类型别名 :=> 任意
>Base.fn : 任意
>类型别名 :=> 任意
>Base : 类为 Base
>fn : 任意
>类型别名 :=> 任意

var r4 = Derived.fn(); // error
>r4 : 任意
>类型别名 :=> 任意
>Derived.fn() : 任意
>类型别名 :=> 任意
>Derived.fn : 任意
>类型别名 :=> 任意
>Derived : 类为 Derived
>fn : 任意
>类型别名 :=> 任意

var r5 = Base.a; // ok
>r5 : 任意
>类型别名 :=> 任意
>Base.a : 任意
>类型别名 :=> 任意
>Base : 类为 Base
>a : 任意
>类型别名 :=> 任意

Base.a = 2; // ok
>Base.a = 2 : 2
>Base.a : 任意
>类型别名 :=> 任意
>Base : 类为 Base
>a : 任意
>类型别名 :=> 任意
>2 : 2

var r6 = Derived.a; // error
>r6 : 任意
>类型别名 :=> 任意
>Derived.a : 任意
>类型别名 :=> 任意
>Derived : 类为 Derived
>a : 任意
>类型别名 :=> 任意

Derived.a = 2; // error
>Derived.a = 2 : 2
>Derived.a : 任意
>类型别名 :=> 任意
>Derived : 类为 Derived
>a : 任意
>类型别名 :=> 任意
>2 : 2

