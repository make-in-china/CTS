=== tests/cases/compiler/numericLiteralsWithTrailingDecimalPoints01.ts ===
1..toString();
>1..toString() : string
>类型别名 :=> 文字
>1..toString : (radix?: number) => string
>1. : 1
>toString : (radix?: number) => string

1.0.toString();
>1.0.toString() : string
>类型别名 :=> 文字
>1.0.toString : (radix?: number) => string
>1.0 : 1
>toString : (radix?: number) => string

1.toString();
>1. : 1
>toString() : any
>类型别名 :=> 任意
>toString : any
>类型别名 :=> 任意

1.+2.0 + 3. ;
>1.+2.0 + 3. : number
>类型别名 :=> 数字
>1.+2.0 : number
>类型别名 :=> 数字
>1. : 1
>2.0 : 2
>3. : 3

// Preserve whitespace where important for JS compatibility
var i: number = 1;
>i : number
>类型别名 :=> 数字
>1 : 1

var test1 = i.toString();  
>test1 : string
>类型别名 :=> 文字
>i.toString() : string
>类型别名 :=> 文字
>i.toString : (radix?: number) => string
>i : number
>类型别名 :=> 数字
>toString : (radix?: number) => string

var test2 = 2.toString();
>test2 : number
>类型别名 :=> 数字
>2. : 2
>toString : any
>类型别名 :=> 任意
>() : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意

var test3 = 3 .toString();
>test3 : string
>类型别名 :=> 文字
>3 .toString() : string
>类型别名 :=> 文字
>3 .toString : (radix?: number) => string
>3 : 3
>toString : (radix?: number) => string

var test4 = 3    .toString();
>test4 : string
>类型别名 :=> 文字
>3    .toString() : string
>类型别名 :=> 文字
>3    .toString : (radix?: number) => string
>3 : 3
>toString : (radix?: number) => string

var test5 = 3	.toString(); 
>test5 : string
>类型别名 :=> 文字
>3	.toString() : string
>类型别名 :=> 文字
>3	.toString : (radix?: number) => string
>3 : 3
>toString : (radix?: number) => string

var test6 = 3.['toString']();
>test6 : string
>类型别名 :=> 文字
>3.['toString']() : string
>类型别名 :=> 文字
>3.['toString'] : (radix?: number) => string
>3. : 3
>'toString' : "toString"

var test7 = 3
>test7 : string
>类型别名 :=> 文字
>3.toString() : string
>类型别名 :=> 文字
>3.toString : (radix?: number) => string
>3 : 3

.toString();
>toString : (radix?: number) => string

var test8 = new Number(4).toString();
>test8 : string
>类型别名 :=> 文字
>new Number(4).toString() : string
>类型别名 :=> 文字
>new Number(4).toString : (radix?: number) => string
>new Number(4) : Number
>Number : NumberConstructor
>4 : 4
>toString : (radix?: number) => string

var test9 = 3. + 3.
>test9 : number
>类型别名 :=> 数字
>3. + 3. : number
>类型别名 :=> 数字
>3. : 3
>3. : 3

