=== tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints2.ts ===
// generic types should behave as if they have properties of their constraint type

class A {
>A : A

    foo(): string { return ''; }
>foo : () => 文字
>'' : ""
}

class B extends A {
>B : B
>A : A

    bar(): string {
>bar : () => 文字

        return '';
>'' : ""
    }
}

class C<U extends A, T extends A> {
>C : C<U, T>
>U : U
>A : A
>T : T
>A : A

    f() {
>f : () => 文字

        var x: U;
>x : U
>U : U

        var a = x['foo'](); // should be string
>a : 文字
>类型别名 :=> 文字
>x['foo']() : 文字
>类型别名 :=> 文字
>x['foo'] : () => 文字
>x : U
>'foo' : "foo"

        return a + x.foo();
>a + x.foo() : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>x.foo() : 文字
>类型别名 :=> 文字
>x.foo : () => 文字
>x : U
>foo : () => 文字
    }

    g(x: U) {
>g : (x: U) => 文字
>x : U
>U : U

        var a = x['foo'](); // should be string
>a : 文字
>类型别名 :=> 文字
>x['foo']() : 文字
>类型别名 :=> 文字
>x['foo'] : () => 文字
>x : U
>'foo' : "foo"

        return a + x.foo();
>a + x.foo() : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>x.foo() : 文字
>类型别名 :=> 文字
>x.foo : () => 文字
>x : U
>foo : () => 文字
    }
}
//class C<U extends T, T extends A> {
//    f() {
//        var x: U;
//        var a = x['foo'](); // should be string
//        return a + x.foo();
//    }

//    g(x: U) {
//        var a = x['foo'](); // should be string
//        return a + x.foo();
//    }
//}

var r1 = (new C<B, A>()).f();
>r1 : 文字
>类型别名 :=> 文字
>(new C<B, A>()).f() : 文字
>类型别名 :=> 文字
>(new C<B, A>()).f : () => 文字
>(new C<B, A>()) : C<B, A>
>new C<B, A>() : C<B, A>
>C : 类为 C
>B : B
>A : A
>f : () => 文字

var r1b = (new C<B, A>()).g(new B());
>r1b : 文字
>类型别名 :=> 文字
>(new C<B, A>()).g(new B()) : 文字
>类型别名 :=> 文字
>(new C<B, A>()).g : (x: B) => 文字
>(new C<B, A>()) : C<B, A>
>new C<B, A>() : C<B, A>
>C : 类为 C
>B : B
>A : A
>g : (x: B) => 文字
>new B() : B
>B : 类为 B

interface I<U extends A, T extends A> {
>I : I<U, T>
>U : U
>A : A
>T : T
>A : A

    foo: U;
>foo : U
>U : U
}
//interface I<U extends T, T extends A> {
//    foo: U;
//}
var i: I<B, A>;
>i : I<B, A>
>I : I<U, T>
>B : B
>A : A

var r2 = i.foo.foo();
>r2 : 文字
>类型别名 :=> 文字
>i.foo.foo() : 文字
>类型别名 :=> 文字
>i.foo.foo : () => 文字
>i.foo : B
>i : I<B, A>
>foo : B
>foo : () => 文字

var r2b = i.foo['foo']();
>r2b : 文字
>类型别名 :=> 文字
>i.foo['foo']() : 文字
>类型别名 :=> 文字
>i.foo['foo'] : () => 文字
>i.foo : B
>i : I<B, A>
>foo : B
>'foo' : "foo"

var a: {
>a : { <U 扩展 A, T 扩展 A>(): U; <U 扩展 A, T 扩展 A>(x: U): U; <U 扩展 A, T 扩展 A>(x: U, y: T): U; }

    <U extends A, T extends A>(): U;
>U : U
>A : A
>T : T
>A : A
>U : U

    <U extends A, T extends A>(x: U): U;
>U : U
>A : A
>T : T
>A : A
>x : U
>U : U
>U : U

    <U extends A, T extends A>(x: U, y: T): U;
>U : U
>A : A
>T : T
>A : A
>x : U
>U : U
>y : T
>T : T
>U : U
}
//var a: {
//    <U extends T, T extends A>(): U;
//    <U extends T, T extends A>(x: U): U;
//    <U extends T, T extends A>(x: U, y: T): U;
//}
var r3 = a<A, A>().foo(); 
>r3 : 文字
>类型别名 :=> 文字
>a<A, A>().foo() : 文字
>类型别名 :=> 文字
>a<A, A>().foo : () => 文字
>a<A, A>() : A
>a : { <U 扩展 A, T 扩展 A>(): U; <U 扩展 A, T 扩展 A>(x: U): U; <U 扩展 A, T 扩展 A>(x: U, y: T): U; }
>A : A
>A : A
>foo : () => 文字

var r3b = a()['foo']();
>r3b : 文字
>类型别名 :=> 文字
>a()['foo']() : 文字
>类型别名 :=> 文字
>a()['foo'] : () => 文字
>a() : A
>a : { <U 扩展 A, T 扩展 A>(): U; <U 扩展 A, T 扩展 A>(x: U): U; <U 扩展 A, T 扩展 A>(x: U, y: T): U; }
>'foo' : "foo"

// parameter supplied for type argument inference to succeed
var aB = new B();
>aB : B
>new B() : B
>B : 类为 B

var r3c = a(aB, aB).foo(); 
>r3c : 文字
>类型别名 :=> 文字
>a(aB, aB).foo() : 文字
>类型别名 :=> 文字
>a(aB, aB).foo : () => 文字
>a(aB, aB) : B
>a : { <U 扩展 A, T 扩展 A>(): U; <U 扩展 A, T 扩展 A>(x: U): U; <U 扩展 A, T 扩展 A>(x: U, y: T): U; }
>aB : B
>aB : B
>foo : () => 文字

var r3d = a(aB, aB)['foo']();
>r3d : 文字
>类型别名 :=> 文字
>a(aB, aB)['foo']() : 文字
>类型别名 :=> 文字
>a(aB, aB)['foo'] : () => 文字
>a(aB, aB) : B
>a : { <U 扩展 A, T 扩展 A>(): U; <U 扩展 A, T 扩展 A>(x: U): U; <U 扩展 A, T 扩展 A>(x: U, y: T): U; }
>aB : B
>aB : B
>'foo' : "foo"

var b = {
>b : { foo: <U 扩展 A, T 扩展 A>(x: U, y: T) => 文字; }
>{    foo: <U extends A, T extends A>(x: U, y: T) => {        var a = x['foo'](); // should be string        return a + x.foo();    }} : { foo: <U 扩展 A, T 扩展 A>(x: U, y: T) => 文字; }

    foo: <U extends A, T extends A>(x: U, y: T) => {
>foo : <U 扩展 A, T 扩展 A>(x: U, y: T) => 文字
><U extends A, T extends A>(x: U, y: T) => {        var a = x['foo'](); // should be string        return a + x.foo();    } : <U 扩展 A, T 扩展 A>(x: U, y: T) => 文字
>U : U
>A : A
>T : T
>A : A
>x : U
>U : U
>y : T
>T : T

        var a = x['foo'](); // should be string
>a : 文字
>类型别名 :=> 文字
>x['foo']() : 文字
>类型别名 :=> 文字
>x['foo'] : () => 文字
>x : U
>'foo' : "foo"

        return a + x.foo();
>a + x.foo() : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>x.foo() : 文字
>类型别名 :=> 文字
>x.foo : () => 文字
>x : U
>foo : () => 文字
    }
}
//var b = {
//    foo: <U extends T, T extends A>(x: U, y: T) => {
//        var a = x['foo'](); // should be string
//        return a + x.foo();
//    }
//}

var r4 = b.foo(aB, aB); // no inferences for T so constraint isn't satisfied, error
>r4 : 文字
>类型别名 :=> 文字
>b.foo(aB, aB) : 文字
>类型别名 :=> 文字
>b.foo : <U 扩展 A, T 扩展 A>(x: U, y: T) => 文字
>b : { foo: <U 扩展 A, T 扩展 A>(x: U, y: T) => 文字; }
>foo : <U 扩展 A, T 扩展 A>(x: U, y: T) => 文字
>aB : B
>aB : B

