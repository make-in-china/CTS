=== tests/cases/compiler/mergedDeclarations1.ts ===
interface Point {
>Point : Point

    x: number;
>x : number
>类型别名 :=> 数字

    y: number;
>y : number
>类型别名 :=> 数字
}
function point(x: number, y: number): Point {
>point : typeof point
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>Point : Point

    return { x: x, y: y };
>{ x: x, y: y } : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
}
module point {
>point : typeof point

    export var origin = point(0, 0);
>origin : Point
>point(0, 0) : Point
>point : typeof point
>0 : 0
>0 : 0

    export function equals(p1: Point, p2: Point) {
>equals : (p1: Point, p2: Point) => boolean
>p1 : Point
>Point : Point
>p2 : Point
>Point : Point

        return p1.x == p2.x && p1.y == p2.y;
>p1.x == p2.x && p1.y == p2.y : boolean
>类型别名 :=> 真假
>p1.x == p2.x : boolean
>类型别名 :=> 真假
>p1.x : number
>类型别名 :=> 数字
>p1 : Point
>x : number
>类型别名 :=> 数字
>p2.x : number
>类型别名 :=> 数字
>p2 : Point
>x : number
>类型别名 :=> 数字
>p1.y == p2.y : boolean
>类型别名 :=> 真假
>p1.y : number
>类型别名 :=> 数字
>p1 : Point
>y : number
>类型别名 :=> 数字
>p2.y : number
>类型别名 :=> 数字
>p2 : Point
>y : number
>类型别名 :=> 数字
    }
}
var p1 = point(0, 0);
>p1 : Point
>point(0, 0) : Point
>point : typeof point
>0 : 0
>0 : 0

var p2 = point.origin;
>p2 : Point
>point.origin : Point
>point : typeof point
>origin : Point

var b = point.equals(p1, p2);
>b : boolean
>类型别名 :=> 真假
>point.equals(p1, p2) : boolean
>类型别名 :=> 真假
>point.equals : (p1: Point, p2: Point) => boolean
>point : typeof point
>equals : (p1: Point, p2: Point) => boolean
>p1 : Point
>p2 : Point

