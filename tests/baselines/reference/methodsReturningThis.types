=== tests/cases/conformance/salsa/input.js ===
function Class()
>Class : () => 无值
{
}

// error: 'Class' doesn't have property 'notPresent'
Class.prototype.containsError = function () { return this.notPresent; };
>Class.prototype.containsError = function () { return this.notPresent; } : () => 任意
>Class.prototype.containsError : 任意
>类型别名 :=> 任意
>Class.prototype : 任意
>类型别名 :=> 任意
>Class : () => 无值
>prototype : 任意
>类型别名 :=> 任意
>containsError : 任意
>类型别名 :=> 任意
>function () { return this.notPresent; } : () => 任意
>this.notPresent : 任意
>类型别名 :=> 任意
>this : { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>notPresent : 任意
>类型别名 :=> 任意

// lots of methods that return this, which caused out-of-memory in #9527
Class.prototype.m1 = function (a, b, c, d, tx, ty) { return this; };
>Class.prototype.m1 = function (a, b, c, d, tx, ty) { return this; } : (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => { containsError: () => 任意; m1: 任意; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>Class.prototype.m1 : 任意
>类型别名 :=> 任意
>Class.prototype : 任意
>类型别名 :=> 任意
>Class : () => 无值
>prototype : 任意
>类型别名 :=> 任意
>m1 : 任意
>类型别名 :=> 任意
>function (a, b, c, d, tx, ty) { return this; } : (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => { containsError: () => 任意; m1: 任意; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意
>tx : 任意
>类型别名 :=> 任意
>ty : 任意
>类型别名 :=> 任意
>this : { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }

Class.prototype.m2 = function (x, y) { return this; };
>Class.prototype.m2 = function (x, y) { return this; } : (x: 任意, y: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: 任意; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>Class.prototype.m2 : 任意
>类型别名 :=> 任意
>Class.prototype : 任意
>类型别名 :=> 任意
>Class : () => 无值
>prototype : 任意
>类型别名 :=> 任意
>m2 : 任意
>类型别名 :=> 任意
>function (x, y) { return this; } : (x: 任意, y: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: 任意; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>this : { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }

Class.prototype.m3 = function (x, y) { return this; };
>Class.prototype.m3 = function (x, y) { return this; } : (x: 任意, y: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: 任意; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>Class.prototype.m3 : 任意
>类型别名 :=> 任意
>Class.prototype : 任意
>类型别名 :=> 任意
>Class : () => 无值
>prototype : 任意
>类型别名 :=> 任意
>m3 : 任意
>类型别名 :=> 任意
>function (x, y) { return this; } : (x: 任意, y: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: 任意; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>this : { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }

Class.prototype.m4 = function (angle) { return this; };
>Class.prototype.m4 = function (angle) { return this; } : (angle: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: 任意; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>Class.prototype.m4 : 任意
>类型别名 :=> 任意
>Class.prototype : 任意
>类型别名 :=> 任意
>Class : () => 无值
>prototype : 任意
>类型别名 :=> 任意
>m4 : 任意
>类型别名 :=> 任意
>function (angle) { return this; } : (angle: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: 任意; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>angle : 任意
>类型别名 :=> 任意
>this : { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }

Class.prototype.m5 = function (matrix) { return this; };
>Class.prototype.m5 = function (matrix) { return this; } : (matrix: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: 任意; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>Class.prototype.m5 : 任意
>类型别名 :=> 任意
>Class.prototype : 任意
>类型别名 :=> 任意
>Class : () => 无值
>prototype : 任意
>类型别名 :=> 任意
>m5 : 任意
>类型别名 :=> 任意
>function (matrix) { return this; } : (matrix: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: 任意; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>matrix : 任意
>类型别名 :=> 任意
>this : { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }

Class.prototype.m6 = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; };
>Class.prototype.m6 = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; } : (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: 任意; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>Class.prototype.m6 : 任意
>类型别名 :=> 任意
>Class.prototype : 任意
>类型别名 :=> 任意
>Class : () => 无值
>prototype : 任意
>类型别名 :=> 任意
>m6 : 任意
>类型别名 :=> 任意
>function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; } : (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: 任意; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>pivotX : 任意
>类型别名 :=> 任意
>pivotY : 任意
>类型别名 :=> 任意
>scaleX : 任意
>类型别名 :=> 任意
>scaleY : 任意
>类型别名 :=> 任意
>rotation : 任意
>类型别名 :=> 任意
>skewX : 任意
>类型别名 :=> 任意
>skewY : 任意
>类型别名 :=> 任意
>this : { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }

Class.prototype.m7 = function(matrix) { return this; };
>Class.prototype.m7 = function(matrix) { return this; } : (matrix: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: 任意; m8: () => 类为 Class; m9: () => 类为 Class; }
>Class.prototype.m7 : 任意
>类型别名 :=> 任意
>Class.prototype : 任意
>类型别名 :=> 任意
>Class : () => 无值
>prototype : 任意
>类型别名 :=> 任意
>m7 : 任意
>类型别名 :=> 任意
>function(matrix) { return this; } : (matrix: 任意) => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: 任意; m8: () => 类为 Class; m9: () => 类为 Class; }
>matrix : 任意
>类型别名 :=> 任意
>this : { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }

Class.prototype.m8 = function() { return this; };
>Class.prototype.m8 = function() { return this; } : () => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: 任意; m9: () => 类为 Class; }
>Class.prototype.m8 : 任意
>类型别名 :=> 任意
>Class.prototype : 任意
>类型别名 :=> 任意
>Class : () => 无值
>prototype : 任意
>类型别名 :=> 任意
>m8 : 任意
>类型别名 :=> 任意
>function() { return this; } : () => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: 任意; m9: () => 类为 Class; }
>this : { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }

Class.prototype.m9 = function () { return this; };
>Class.prototype.m9 = function () { return this; } : () => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: 任意; }
>Class.prototype.m9 : 任意
>类型别名 :=> 任意
>Class.prototype : 任意
>类型别名 :=> 任意
>Class : () => 无值
>prototype : 任意
>类型别名 :=> 任意
>m9 : 任意
>类型别名 :=> 任意
>function () { return this; } : () => { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: 任意; }
>this : { containsError: () => 任意; m1: (a: 任意, b: 任意, c: 任意, d: 任意, tx: 任意, ty: 任意) => 类为 Class; m2: (x: 任意, y: 任意) => 类为 Class; m3: (x: 任意, y: 任意) => 类为 Class; m4: (angle: 任意) => 类为 Class; m5: (matrix: 任意) => 类为 Class; m6: (x: 任意, y: 任意, pivotX: 任意, pivotY: 任意, scaleX: 任意, scaleY: 任意, rotation: 任意, skewX: 任意, skewY: 任意) => 类为 Class; m7: (matrix: 任意) => 类为 Class; m8: () => 类为 Class; m9: () => 类为 Class; }


