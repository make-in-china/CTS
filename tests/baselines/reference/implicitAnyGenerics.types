=== tests/cases/compiler/implicitAnyGenerics.ts ===
class C<T> {
>C : C<T>
>T : T

    x: T;
>x : T
>T : T
}

var c = new C();
>c : C<{}>
>new C() : C<{}>
>C : 类为 C

var c2 = new C<any>();
>c2 : C<任意>
>new C<any>() : C<任意>
>C : 类为 C

var c3 = new C<number>();
>c3 : C<数字>
>new C<number>() : C<数字>
>C : 类为 C

var c4: C<any> = new C();
>c4 : C<任意>
>C : C<T>
>new C() : C<任意>
>C : 类为 C

class D<T> {
>D : D<T>
>T : T

    constructor(x: T) { }
>x : T
>T : T
}

var d = new D(null);
>d : D<任意>
>new D(null) : D<任意>
>D : 类为 D
>null : 空值
>类型别名 :=> 空值

var d2 = new D(1);
>d2 : D<数字>
>new D(1) : D<数字>
>D : 类为 D
>1 : 1

var d3 = new D<any>(1);
>d3 : D<任意>
>new D<any>(1) : D<任意>
>D : 类为 D
>1 : 1

var d4 = new D(<any>1);
>d4 : D<任意>
>new D(<any>1) : D<任意>
>D : 类为 D
><any>1 : 任意
>类型别名 :=> 任意
>1 : 1

var d5: D<any> = new D(null);
>d5 : D<任意>
>D : D<T>
>new D(null) : D<任意>
>D : 类为 D
>null : 空值
>类型别名 :=> 空值

function foo<T>(): T { return null; };
>foo : <T>() => T
>T : T
>T : T
>null : 空值
>类型别名 :=> 空值

foo() 
>foo() : {}
>foo : <T>() => T

foo<any>();
>foo<any>() : 任意
>类型别名 :=> 任意
>foo : <T>() => T


    
