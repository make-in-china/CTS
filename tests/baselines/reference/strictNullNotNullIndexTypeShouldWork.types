=== tests/cases/compiler/strictNullNotNullIndexTypeShouldWork.ts ===
interface A {
>A : A

    params?: { name: string; };
>params : { name: 文字; } | 未定
>name : 文字
>类型别名 :=> 文字
}

class Test<T extends A> {
>Test : Test<T>
>T : T
>A : A

    attrs: Readonly<T>;
>attrs : Readonly<T>
>Readonly : Readonly<T>
>T : T

    m() {
>m : () => 无值

        this.attrs.params!.name;
>this.attrs.params!.name : 文字
>类型别名 :=> 文字
>this.attrs.params! : { name: 文字; }
>this.attrs.params : T["params"]
>this.attrs : Readonly<T>
>this : 本体
>attrs : Readonly<T>
>params : T["params"]
>name : 文字
>类型别名 :=> 文字
    }
}

interface Foo {
>Foo : Foo

    foo?: number;
>foo : 数字 | 未定
}

class FooClass<P extends Foo = Foo> {
>FooClass : FooClass<P>
>P : P
>Foo : Foo
>Foo : Foo

    properties: Readonly<P>;
>properties : Readonly<P>
>Readonly : Readonly<T>
>P : P

    foo(): number {
>foo : () => 数字

        const { foo = 42 } = this.properties;
>foo : 数字
>类型别名 :=> 数字
>42 : 42
>this.properties : Readonly<P>
>this : 本体
>properties : Readonly<P>

        return foo;
>foo : 数字
>类型别名 :=> 数字
    }
}

class Test2<T extends A> {
>Test2 : Test2<T>
>T : T
>A : A

    attrs: Readonly<T>;
>attrs : Readonly<T>
>Readonly : Readonly<T>
>T : T

    m() {
>m : () => { name: 文字; }

        return this.attrs.params!; // Return type should maintain relationship with `T` after being not-null-asserted, ideally
>this.attrs.params! : { name: 文字; }
>this.attrs.params : T["params"]
>this.attrs : Readonly<T>
>this : 本体
>attrs : Readonly<T>
>params : T["params"]
    }
}
