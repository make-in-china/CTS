=== tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts ===
function f0(a, [a, [b]], {b}) { }
>f0 : (a: 任意, [a, [b]]: [任意, [任意]], { b }: { b: 任意; }) => 无值
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

function f1([a, a]) { }
>f1 : ([a, a]: [任意, 任意]) => 无值
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

function f2({b}, {b}) { }
>f2 : ({ b }: { b: 任意; }, { b }: { b: 任意; }) => 无值
>b : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

function f3([c,[c],[[c]]]) { }
>f3 : ([c, [c], [[c]]]: [任意, [任意], [[任意]]]) => 无值
>c : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

function f4({d, d:{d}}) { }
>f4 : ({ d, d: { d } }: { d: { d: 任意; }; }) => 无值
>d : { d: 任意; }
>d : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意

function f5({e, e: {e}}, {e}, [d,e, [[e]]], ...e) { }
>f5 : ({ e, e: { e } }: { e: { e: 任意; }; }, { e }: { e: 任意; }, [d, e, [[e]]]: [任意, 任意, [[任意]]], ...e: 任意[]) => 无值
>e : { e: 任意; }
>e : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
>e : 任意[]

function f6([f, ...f]) { }
>f6 : ([f, ...f]: 任意[]) => 无值
>f : 任意
>类型别名 :=> 任意
>f : 任意[]

function f7(a, func = (a) => { return 1 }) { }  // not error
>f7 : (a: 任意, func?: (a: 任意) => 数字) => 无值
>a : 任意
>类型别名 :=> 任意
>func : (a: 任意) => 数字
>(a) => { return 1 } : (a: 任意) => 数字
>a : 任意
>类型别名 :=> 任意
>1 : 1

