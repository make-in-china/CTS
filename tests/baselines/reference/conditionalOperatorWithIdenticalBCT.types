=== tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorWithIdenticalBCT.ts ===
//Cond ? Expr1 : Expr2,  Expr1 and Expr2 have identical best common type
class X { propertyX: any; propertyX1: number; propertyX2: string };
>X : X
>propertyX : 任意
>类型别名 :=> 任意
>propertyX1 : 数字
>类型别名 :=> 数字
>propertyX2 : 文字
>类型别名 :=> 文字

class A extends X { propertyA: number };
>A : A
>X : X
>propertyA : 数字
>类型别名 :=> 数字

class B extends X { propertyB: string };
>B : B
>X : X
>propertyB : 文字
>类型别名 :=> 文字

var x: X;
>x : X
>X : X

var a: A;
>a : A
>A : A

var b: B;
>b : B
>B : B

//Cond ? Expr1 : Expr2,  Expr1 is supertype
//Be Not contextually typed
true ? x : a;
>true ? x : a : X
>true : 为真
>类型别名 :=> 为真
>x : X
>a : A

var result1 = true ? x : a;
>result1 : X
>true ? x : a : X
>true : 为真
>类型别名 :=> 为真
>x : X
>a : A

//Expr1 and Expr2 are literals
true ? {} : 1;
>true ? {} : 1 : {}
>true : 为真
>类型别名 :=> 为真
>{} : {}
>1 : 1

true ? { a: 1 } : { a: 2, b: 'string' };
>true ? { a: 1 } : { a: 2, b: 'string' } : { a: 数字; } | { a: 数字; b: 文字; }
>true : 为真
>类型别名 :=> 为真
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>{ a: 2, b: 'string' } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>2 : 2
>b : 文字
>类型别名 :=> 文字
>'string' : "string"

var result2 = true ? {} : 1;
>result2 : {}
>true ? {} : 1 : {}
>true : 为真
>类型别名 :=> 为真
>{} : {}
>1 : 1

var result3 = true ? { a: 1 } : { a: 2, b: 'string' };
>result3 : { a: 数字; } | { a: 数字; b: 文字; }
>true ? { a: 1 } : { a: 2, b: 'string' } : { a: 数字; } | { a: 数字; b: 文字; }
>true : 为真
>类型别名 :=> 为真
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>{ a: 2, b: 'string' } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>2 : 2
>b : 文字
>类型别名 :=> 文字
>'string' : "string"

//Contextually typed
var resultIsX1: X = true ? x : a;
>resultIsX1 : X
>X : X
>true ? x : a : X
>true : 为真
>类型别名 :=> 为真
>x : X
>a : A

var result4: (t: A) => any = true ? (m) => m.propertyX : (n) => n.propertyA;
>result4 : (t: A) => 任意
>t : A
>A : A
>true ? (m) => m.propertyX : (n) => n.propertyA : (m: A) => 任意
>true : 为真
>类型别名 :=> 为真
>(m) => m.propertyX : (m: A) => 任意
>m : A
>m.propertyX : 任意
>类型别名 :=> 任意
>m : A
>propertyX : 任意
>类型别名 :=> 任意
>(n) => n.propertyA : (n: A) => 数字
>n : A
>n.propertyA : 数字
>类型别名 :=> 数字
>n : A
>propertyA : 数字
>类型别名 :=> 数字

//Cond ? Expr1 : Expr2,  Expr2 is supertype
//Be Not contextually typed
true ? a : x;
>true ? a : x : X
>true : 为真
>类型别名 :=> 为真
>a : A
>x : X

var result5 = true ? a : x;
>result5 : X
>true ? a : x : X
>true : 为真
>类型别名 :=> 为真
>a : A
>x : X

//Expr1 and Expr2 are literals
true ? 1 : {};
>true ? 1 : {} : {}
>true : 为真
>类型别名 :=> 为真
>1 : 1
>{} : {}

true ? { a: 2, b: 'string' } : { a: 1 };
>true ? { a: 2, b: 'string' } : { a: 1 } : { a: 数字; b: 文字; } | { a: 数字; }
>true : 为真
>类型别名 :=> 为真
>{ a: 2, b: 'string' } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>2 : 2
>b : 文字
>类型别名 :=> 文字
>'string' : "string"
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1

var result6 = true ? 1 : {};
>result6 : {}
>true ? 1 : {} : {}
>true : 为真
>类型别名 :=> 为真
>1 : 1
>{} : {}

var result7 = true ? { a: 2, b: 'string' } : { a: 1 };
>result7 : { a: 数字; b: 文字; } | { a: 数字; }
>true ? { a: 2, b: 'string' } : { a: 1 } : { a: 数字; b: 文字; } | { a: 数字; }
>true : 为真
>类型别名 :=> 为真
>{ a: 2, b: 'string' } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>2 : 2
>b : 文字
>类型别名 :=> 文字
>'string' : "string"
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1

//Contextually typed
var resultIsX2: X = true ? x : a;
>resultIsX2 : X
>X : X
>true ? x : a : X
>true : 为真
>类型别名 :=> 为真
>x : X
>a : A

var result8: (t: A) => any = true ? (m) => m.propertyA : (n) => n.propertyX;
>result8 : (t: A) => 任意
>t : A
>A : A
>true ? (m) => m.propertyA : (n) => n.propertyX : (n: A) => 任意
>true : 为真
>类型别名 :=> 为真
>(m) => m.propertyA : (m: A) => 数字
>m : A
>m.propertyA : 数字
>类型别名 :=> 数字
>m : A
>propertyA : 数字
>类型别名 :=> 数字
>(n) => n.propertyX : (n: A) => 任意
>n : A
>n.propertyX : 任意
>类型别名 :=> 任意
>n : A
>propertyX : 任意
>类型别名 :=> 任意

//Result = Cond ? Expr1 : Expr2,  Result is supertype
//Contextually typed
var resultIsX3: X = true ? a : b;
>resultIsX3 : X
>X : X
>true ? a : b : A | B
>true : 为真
>类型别名 :=> 为真
>a : A
>b : B

var result10: (t: X) => any = true ? (m) => m.propertyX1 : (n) => n.propertyX2;
>result10 : (t: X) => 任意
>t : X
>X : X
>true ? (m) => m.propertyX1 : (n) => n.propertyX2 : ((m: X) => 数字) | ((n: X) => 文字)
>true : 为真
>类型别名 :=> 为真
>(m) => m.propertyX1 : (m: X) => 数字
>m : X
>m.propertyX1 : 数字
>类型别名 :=> 数字
>m : X
>propertyX1 : 数字
>类型别名 :=> 数字
>(n) => n.propertyX2 : (n: X) => 文字
>n : X
>n.propertyX2 : 文字
>类型别名 :=> 文字
>n : X
>propertyX2 : 文字
>类型别名 :=> 文字

//Expr1 and Expr2 are literals
var result11: any = true ? 1 : 'string';
>result11 : 任意
>类型别名 :=> 任意
>true ? 1 : 'string' : 1 | "string"
>true : 为真
>类型别名 :=> 为真
>1 : 1
>'string' : "string"

