=== tests/cases/compiler/controlFlowNoImplicitAny.ts ===
declare let cond: boolean;
>cond : 真假
>类型别名 :=> 真假

// CFA for 'let' with no type annotation and initializer
function f1() {
>f1 : () => 无值

    let x;
>x : 任意
>类型别名 :=> 任意

    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
    }
    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = "hello";
>x = "hello" : "hello"
>x : 任意
>类型别名 :=> 任意
>"hello" : "hello"
    }
    const y = x;  // string | number | undefined
>y : 文字 | 数字 | 未定
>x : 文字 | 数字 | 未定
}

// CFA for 'let' with no type annotation and 'undefined' initializer
function f2() {
>f2 : () => 无值

    let x = undefined;
>x : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
    }
    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = "hello";
>x = "hello" : "hello"
>x : 任意
>类型别名 :=> 任意
>"hello" : "hello"
    }
    const y = x;  // string | number | undefined
>y : 文字 | 数字 | 未定
>x : 文字 | 数字 | 未定
}

// CFA for 'let' with no type annotation and 'null' initializer
function f3() {
>f3 : () => 无值

    let x = null;
>x : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
    }
    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = "hello";
>x = "hello" : "hello"
>x : 任意
>类型别名 :=> 任意
>"hello" : "hello"
    }
    const y = x;  // string | number | null
>y : 文字 | 数字 | 空值
>x : 文字 | 数字 | 空值
}

// No CFA for 'let' with with type annotation
function f4() {
>f4 : () => 无值

    let x: any;
>x : 任意
>类型别名 :=> 任意

    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
    }
    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = "hello";
>x = "hello" : "hello"
>x : 任意
>类型别名 :=> 任意
>"hello" : "hello"
    }
    const y = x;  // any
>y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
}

// CFA for 'var' with no type annotation and initializer
function f5() {
>f5 : () => 无值

    var x;
>x : 任意
>类型别名 :=> 任意

    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
    }
    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = "hello";
>x = "hello" : "hello"
>x : 任意
>类型别名 :=> 任意
>"hello" : "hello"
    }
    const y = x;  // string | number | undefined
>y : 文字 | 数字 | 未定
>x : 文字 | 数字 | 未定
}

// CFA for 'var' with no type annotation and 'undefined' initializer
function f6() {
>f6 : () => 无值

    var x = undefined;
>x : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
    }
    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = "hello";
>x = "hello" : "hello"
>x : 任意
>类型别名 :=> 任意
>"hello" : "hello"
    }
    const y = x;  // string | number | undefined
>y : 文字 | 数字 | 未定
>x : 文字 | 数字 | 未定
}

// CFA for 'var' with no type annotation and 'null' initializer
function f7() {
>f7 : () => 无值

    var x = null;
>x : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
    }
    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = "hello";
>x = "hello" : "hello"
>x : 任意
>类型别名 :=> 任意
>"hello" : "hello"
    }
    const y = x;  // string | number | null
>y : 文字 | 数字 | 空值
>x : 文字 | 数字 | 空值
}

// No CFA for 'var' with with type annotation
function f8() {
>f8 : () => 无值

    var x: any;
>x : 任意
>类型别名 :=> 任意

    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
    }
    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = "hello";
>x = "hello" : "hello"
>x : 任意
>类型别名 :=> 任意
>"hello" : "hello"
    }
    const y = x;  // any
>y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
}

// No CFA for captured outer variables
function f9() {
>f9 : () => 无值

    let x;
>x : 任意
>类型别名 :=> 任意

    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
    }
    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = "hello";
>x = "hello" : "hello"
>x : 任意
>类型别名 :=> 任意
>"hello" : "hello"
    }
    const y = x;  // string | number | undefined
>y : 文字 | 数字 | 未定
>x : 文字 | 数字 | 未定

    function f() {
>f : () => 无值

        const z = x;  // any
>z : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
}

// No CFA for captured outer variables
function f10() {
>f10 : () => 无值

    let x;
>x : 任意
>类型别名 :=> 任意

    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = 1;
>x = 1 : 1
>x : 任意
>类型别名 :=> 任意
>1 : 1
    }
    if (cond) {
>cond : 真假
>类型别名 :=> 真假

        x = "hello";
>x = "hello" : "hello"
>x : 任意
>类型别名 :=> 任意
>"hello" : "hello"
    }
    const y = x;  // string | number | undefined
>y : 文字 | 数字 | 未定
>x : 文字 | 数字 | 未定

    const f = () => {
>f : () => 无值
>() => {        const z = x;  // any    } : () => 无值

        const z = x;  // any
>z : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    };
}
