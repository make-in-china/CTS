=== tests/cases/compiler/inferentialTypingUsingApparentType3.ts ===
interface Field<T> {
>Field : Field<T>
>T : T

    clean(input: T): T
>clean : (input: T) => T
>input : T
>T : T
>T : T
}

class CharField implements Field<string> {
>CharField : CharField
>Field : Field<T>

    clean(input: string) {
>clean : (input: 文字) => 文字
>input : 文字
>类型别名 :=> 文字

        return "Yup";
>"Yup" : "Yup"
    }
}

class NumberField implements Field<number> {
>NumberField : NumberField
>Field : Field<T>

    clean(input: number) {
>clean : (input: 数字) => 数字
>input : 数字
>类型别名 :=> 数字

        return 123;
>123 : 123
    }
}

class ObjectField<A, T extends { [name: string]: Field<any> }> {
>ObjectField : ObjectField<A, T>
>A : A
>T : T
>name : 文字
>类型别名 :=> 文字
>Field : Field<T>

    constructor(public fields: T) { }
>fields : T
>T : T
}

var person = new ObjectField({
>person : ObjectField<{}, { id: NumberField; name: CharField; }>
>new ObjectField({    id: new NumberField(),    name: new CharField()}) : ObjectField<{}, { id: NumberField; name: CharField; }>
>ObjectField : 类为 ObjectField
>{    id: new NumberField(),    name: new CharField()} : { id: NumberField; name: CharField; }

    id: new NumberField(),
>id : NumberField
>new NumberField() : NumberField
>NumberField : 类为 NumberField

    name: new CharField()
>name : CharField
>new CharField() : CharField
>CharField : 类为 CharField

});

person.fields.id;
>person.fields.id : NumberField
>person.fields : { id: NumberField; name: CharField; }
>person : ObjectField<{}, { id: NumberField; name: CharField; }>
>fields : { id: NumberField; name: CharField; }
>id : NumberField

