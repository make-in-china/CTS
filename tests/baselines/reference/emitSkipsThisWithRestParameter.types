=== tests/cases/compiler/emitSkipsThisWithRestParameter.ts ===
function rebase(fn: (base: any, ...args: any[]) => any): (...args: any[]) => any {
>rebase : (fn: (base: any, ...args: any[]) => any) => (...args: any[]) => any
>fn : (base: any, ...args: any[]) => any
>base : any
>类型别名 :=> 任意
>args : any[]
>args : any[]

    return function(this: any, ...args: any[]) {
>function(this: any, ...args: any[]) {        return fn.apply(this, [ this ].concat(args));    } : (this: any, ...args: any[]) => any
>this : any
>类型别名 :=> 任意
>args : any[]

        return fn.apply(this, [ this ].concat(args));
>fn.apply(this, [ this ].concat(args)) : any
>类型别名 :=> 任意
>fn.apply : (this: Function, thisArg: any, argArray?: any) => any
>fn : (base: any, ...args: any[]) => any
>apply : (this: Function, thisArg: any, argArray?: any) => any
>this : any
>类型别名 :=> 任意
>[ this ].concat(args) : any[]
>[ this ].concat : { (...items: ReadonlyArray<any>[]): any[]; (...items: any[]): any[]; }
>[ this ] : any[]
>this : any
>类型别名 :=> 任意
>concat : { (...items: ReadonlyArray<any>[]): any[]; (...items: any[]): any[]; }
>args : any[]

    };
}

