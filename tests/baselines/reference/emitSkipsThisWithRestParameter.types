=== tests/cases/compiler/emitSkipsThisWithRestParameter.ts ===
function rebase(fn: (base: any, ...args: any[]) => any): (...args: any[]) => any {
>rebase : (fn: (base: 任意, ...args: 任意[]) => 任意) => (...args: 任意[]) => 任意
>fn : (base: 任意, ...args: 任意[]) => 任意
>base : 任意
>类型别名 :=> 任意
>args : 任意[]
>args : 任意[]

    return function(this: any, ...args: any[]) {
>function(this: any, ...args: any[]) {        return fn.apply(this, [ this ].concat(args));    } : (this: 任意, ...args: 任意[]) => 任意
>this : 任意
>类型别名 :=> 任意
>args : 任意[]

        return fn.apply(this, [ this ].concat(args));
>fn.apply(this, [ this ].concat(args)) : 任意
>类型别名 :=> 任意
>fn.apply : (this: Function, thisArg: 任意, argArray?: 任意) => 任意
>fn : (base: 任意, ...args: 任意[]) => 任意
>apply : (this: Function, thisArg: 任意, argArray?: 任意) => 任意
>this : 任意
>类型别名 :=> 任意
>[ this ].concat(args) : 任意[]
>[ this ].concat : { (...items: ReadonlyArray<任意>[]): 任意[]; (...items: 任意[]): 任意[]; }
>[ this ] : 任意[]
>this : 任意
>类型别名 :=> 任意
>concat : { (...items: ReadonlyArray<任意>[]): 任意[]; (...items: 任意[]): 任意[]; }
>args : 任意[]

    };
}

