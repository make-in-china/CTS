=== tests/cases/conformance/classes/members/classTypes/staticPropertyNotInClassType.ts ===
module NonGeneric {
>NonGeneric : typeof NonGeneric

    class C {
>C : C

        fn() { return this; }
>fn : () => this
>this : this

        static get x() { return 1; }
>x : number
>类型别名 :=> 数字
>1 : 1

        static set x(v) { }
>x : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字

        constructor(public a: number, private b: number) { }
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字

        static foo: string; // not reflected in class type
>foo : string
>类型别名 :=> 文字
    }

    module C {
>C : typeof C

        export var bar = ''; // not reflected in class type
>bar : string
>类型别名 :=> 文字
>'' : ""
    }

    var c = new C(1, 2);
>c : C
>new C(1, 2) : C
>C : typeof C
>1 : 1
>2 : 2

    var r = c.fn();
>r : C
>c.fn() : C
>c.fn : () => C
>c : C
>fn : () => C

    var r4 = c.foo; // error
>r4 : any
>类型别名 :=> 任意
>c.foo : any
>类型别名 :=> 任意
>c : C
>foo : any
>类型别名 :=> 任意

    var r5 = c.bar; // error
>r5 : any
>类型别名 :=> 任意
>c.bar : any
>类型别名 :=> 任意
>c : C
>bar : any
>类型别名 :=> 任意

    var r6 = c.x; // error
>r6 : any
>类型别名 :=> 任意
>c.x : any
>类型别名 :=> 任意
>c : C
>x : any
>类型别名 :=> 任意
}

module Generic {
>Generic : typeof Generic

    class C<T, U> {
>C : C<T, U>
>T : T
>U : U

        fn() { return this; }
>fn : () => this
>this : this

        static get x() { return 1; }
>x : number
>类型别名 :=> 数字
>1 : 1

        static set x(v) { }
>x : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字

        constructor(public a: T, private b: U) { }
>a : T
>T : T
>b : U
>U : U

        static foo: T; // not reflected in class type
>foo : any
>类型别名 :=> 任意
>T : No type information available!
    }

    module C {
>C : typeof C

        export var bar = ''; // not reflected in class type
>bar : string
>类型别名 :=> 文字
>'' : ""
    }

    var c = new C(1, '');
>c : C<number, string>
>new C(1, '') : C<number, string>
>C : typeof C
>1 : 1
>'' : ""

    var r = c.fn();
>r : C<number, string>
>c.fn() : C<number, string>
>c.fn : () => C<number, string>
>c : C<number, string>
>fn : () => C<number, string>

    var r4 = c.foo; // error
>r4 : any
>类型别名 :=> 任意
>c.foo : any
>类型别名 :=> 任意
>c : C<number, string>
>foo : any
>类型别名 :=> 任意

    var r5 = c.bar; // error
>r5 : any
>类型别名 :=> 任意
>c.bar : any
>类型别名 :=> 任意
>c : C<number, string>
>bar : any
>类型别名 :=> 任意

    var r6 = c.x; // error
>r6 : any
>类型别名 :=> 任意
>c.x : any
>类型别名 :=> 任意
>c : C<number, string>
>x : any
>类型别名 :=> 任意
}
