=== tests/cases/compiler/assignmentNonObjectTypeConstraints.ts ===
const enum E { A, B, C }
>E : E
>A : E.A
>B : E.B
>C : E.C

function foo<T extends number>(x: T) {
>foo : <T 扩展 数字>(x: T) => 无值
>T : T
>x : T
>T : T

    var y: number = x;  // Ok
>y : 数字
>类型别名 :=> 数字
>x : T
}

foo(5);
>foo(5) : 无值
>类型别名 :=> 无值
>foo : <T 扩展 数字>(x: T) => 无值
>5 : 5

foo(E.A);
>foo(E.A) : 无值
>类型别名 :=> 无值
>foo : <T 扩展 数字>(x: T) => 无值
>E.A : E.A
>E : 类为 E
>A : E.A

class A { a }
>A : A
>a : 任意
>类型别名 :=> 任意

class B { b }
>B : B
>b : 任意
>类型别名 :=> 任意

function bar<T extends A | B>(x: T) {
>bar : <T 扩展 A | B>(x: T) => 无值
>T : T
>A : A
>B : B
>x : T
>T : T

    var y: A | B = x;  // Ok
>y : A | B
>A : A
>B : B
>x : T
}

bar(new A);
>bar(new A) : 无值
>类型别名 :=> 无值
>bar : <T 扩展 A | B>(x: T) => 无值
>new A : A
>A : 类为 A

bar(new B);
>bar(new B) : 无值
>类型别名 :=> 无值
>bar : <T 扩展 A | B>(x: T) => 无值
>new B : B
>B : 类为 B

