=== tests/cases/compiler/fatarrowfunctionsOptionalArgsErrors4.ts ===
    false ? (arg?: number = 0) => 47 : null;
>false ? (arg?: number = 0) => 47 : null : (arg?: number) => number
>false : false
>类型别名 :=> 为假
>(arg?: number = 0) => 47 : (arg?: number) => number
>arg : number
>类型别名 :=> 数字
>0 : 0
>47 : 47
>null : null
>类型别名 :=> 空值

    false ? ((arg?: number = 0) => 57) : null;
>false ? ((arg?: number = 0) => 57) : null : (arg?: number) => number
>false : false
>类型别名 :=> 为假
>((arg?: number = 0) => 57) : (arg?: number) => number
>(arg?: number = 0) => 57 : (arg?: number) => number
>arg : number
>类型别名 :=> 数字
>0 : 0
>57 : 57
>null : null
>类型别名 :=> 空值

    false ? null : (arg?: number = 0) => 67;
>false ? null : (arg?: number = 0) => 67 : (arg?: number) => number
>false : false
>类型别名 :=> 为假
>null : null
>类型别名 :=> 空值
>(arg?: number = 0) => 67 : (arg?: number) => number
>arg : number
>类型别名 :=> 数字
>0 : 0
>67 : 67

    ((arg?:number = 1) => 0) + '' + ((arg?:number = 2) => 106);
>((arg?:number = 1) => 0) + '' + ((arg?:number = 2) => 106) : string
>类型别名 :=> 文字
>((arg?:number = 1) => 0) + '' : string
>类型别名 :=> 文字
>((arg?:number = 1) => 0) : (arg?: number) => number
>(arg?:number = 1) => 0 : (arg?: number) => number
>arg : number
>类型别名 :=> 数字
>1 : 1
>0 : 0
>'' : ""
>((arg?:number = 2) => 106) : (arg?: number) => number
>(arg?:number = 2) => 106 : (arg?: number) => number
>arg : number
>类型别名 :=> 数字
>2 : 2
>106 : 106

    foo(
>foo(        (a) => 110,         ((a) => 111),         (a) => {            return 112;        },        (a? ) => 113,         (a, b? ) => 114,         (a: number) => 115,         (a: number = 0) => 116,         (a = 0) => 117,         (a?: number = 0) => 118,         (...a: number[]) => 119,         (a, b? = 0, ...c: number[]) => 120,        (a) => (b) => (c) => 121,        false? (a) => 0 : (b) => 122    ) : any
>类型别名 :=> 任意
>foo : any
>类型别名 :=> 任意

        (a) => 110, 
>(a) => 110 : (a: any) => number
>a : any
>类型别名 :=> 任意
>110 : 110

        ((a) => 111), 
>((a) => 111) : (a: any) => number
>(a) => 111 : (a: any) => number
>a : any
>类型别名 :=> 任意
>111 : 111

        (a) => {
>(a) => {            return 112;        } : (a: any) => number
>a : any
>类型别名 :=> 任意

            return 112;
>112 : 112

        },
        (a? ) => 113, 
>(a? ) => 113 : (a?: any) => number
>a : any
>类型别名 :=> 任意
>113 : 113

        (a, b? ) => 114, 
>(a, b? ) => 114 : (a: any, b?: any) => number
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>114 : 114

        (a: number) => 115, 
>(a: number) => 115 : (a: number) => number
>a : number
>类型别名 :=> 数字
>115 : 115

        (a: number = 0) => 116, 
>(a: number = 0) => 116 : (a?: number) => number
>a : number
>类型别名 :=> 数字
>0 : 0
>116 : 116

        (a = 0) => 117, 
>(a = 0) => 117 : (a?: number) => number
>a : number
>类型别名 :=> 数字
>0 : 0
>117 : 117

        (a?: number = 0) => 118, 
>(a?: number = 0) => 118 : (a?: number) => number
>a : number
>类型别名 :=> 数字
>0 : 0
>118 : 118

        (...a: number[]) => 119, 
>(...a: number[]) => 119 : (...a: number[]) => number
>a : number[]
>119 : 119

        (a, b? = 0, ...c: number[]) => 120,
>(a, b? = 0, ...c: number[]) => 120 : (a: any, b?: number, ...c: number[]) => number
>a : any
>类型别名 :=> 任意
>b : number
>类型别名 :=> 数字
>0 : 0
>c : number[]
>120 : 120

        (a) => (b) => (c) => 121,
>(a) => (b) => (c) => 121 : (a: any) => (b: any) => (c: any) => number
>a : any
>类型别名 :=> 任意
>(b) => (c) => 121 : (b: any) => (c: any) => number
>b : any
>类型别名 :=> 任意
>(c) => 121 : (c: any) => number
>c : any
>类型别名 :=> 任意
>121 : 121

        false? (a) => 0 : (b) => 122
>false? (a) => 0 : (b) => 122 : (a: any) => number
>false : false
>类型别名 :=> 为假
>(a) => 0 : (a: any) => number
>a : any
>类型别名 :=> 任意
>0 : 0
>(b) => 122 : (b: any) => number
>b : any
>类型别名 :=> 任意
>122 : 122

    );
