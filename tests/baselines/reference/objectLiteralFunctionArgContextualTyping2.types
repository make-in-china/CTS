=== tests/cases/compiler/objectLiteralFunctionArgContextualTyping2.ts ===
interface I2 {
>I2 : I2

    value: string;
>value : 文字
>类型别名 :=> 文字

    doStuff: (t: string) => string;
>doStuff : (t: 文字) => 文字
>t : 文字
>类型别名 :=> 文字
}

function f2(args: I2) { }
>f2 : (args: I2) => 无值
>args : I2
>I2 : I2

f2({ hello: 1 }) 
>f2({ hello: 1 }) : 无值
>类型别名 :=> 无值
>f2 : (args: I2) => 无值
>{ hello: 1 } : { hello: 数字; }
>hello : 数字
>类型别名 :=> 数字
>1 : 1

f2({ value: '' })
>f2({ value: '' }) : 无值
>类型别名 :=> 无值
>f2 : (args: I2) => 无值
>{ value: '' } : { value: 文字; }
>value : 文字
>类型别名 :=> 文字
>'' : ""

f2({ value: '', what: 1 }) 
>f2({ value: '', what: 1 }) : 无值
>类型别名 :=> 无值
>f2 : (args: I2) => 无值
>{ value: '', what: 1 } : { value: 文字; what: 数字; }
>value : 文字
>类型别名 :=> 文字
>'' : ""
>what : 数字
>类型别名 :=> 数字
>1 : 1

f2({ toString: (s) => s }) 
>f2({ toString: (s) => s }) : 无值
>类型别名 :=> 无值
>f2 : (args: I2) => 无值
>{ toString: (s) => s } : { toString: (s: 任意) => 任意; }
>toString : (s: 任意) => 任意
>(s) => s : (s: 任意) => 任意
>s : 任意
>类型别名 :=> 任意
>s : 任意
>类型别名 :=> 任意

f2({ toString: (s: string) => s }) 
>f2({ toString: (s: string) => s }) : 无值
>类型别名 :=> 无值
>f2 : (args: I2) => 无值
>{ toString: (s: string) => s } : { toString: (s: 文字) => 文字; }
>toString : (s: 文字) => 文字
>(s: string) => s : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

f2({ value: '', toString: (s) => s.uhhh }) 
>f2({ value: '', toString: (s) => s.uhhh }) : 无值
>类型别名 :=> 无值
>f2 : (args: I2) => 无值
>{ value: '', toString: (s) => s.uhhh } : { value: 文字; toString: (s: 任意) => 任意; }
>value : 文字
>类型别名 :=> 文字
>'' : ""
>toString : (s: 任意) => 任意
>(s) => s.uhhh : (s: 任意) => 任意
>s : 任意
>类型别名 :=> 任意
>s.uhhh : 任意
>类型别名 :=> 任意
>s : 任意
>类型别名 :=> 任意
>uhhh : 任意
>类型别名 :=> 任意

