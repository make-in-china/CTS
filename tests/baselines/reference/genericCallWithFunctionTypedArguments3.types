=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments3.ts ===
// No inference is made from function typed arguments which have multiple call signatures

var a: {
>a : { (x: boolean): boolean; (x: string): any; }

    (x: boolean): boolean;
>x : boolean
>类型别名 :=> 真假

    (x: string): any;
>x : string
>类型别名 :=> 文字
}

function foo4<T, U>(cb: (x: T) => U) {
>foo4 : <T, U>(cb: (x: T) => U) => U
>T : T
>U : U
>cb : (x: T) => U
>x : T
>T : T
>U : U

    var u: U;
>u : U
>U : U

    return u;
>u : U
}

var r = foo4(a); // T is {} (candidates boolean and string), U is any (candidates any and boolean)
>r : any
>类型别名 :=> 任意
>foo4(a) : any
>类型别名 :=> 任意
>foo4 : <T, U>(cb: (x: T) => U) => U
>a : { (x: boolean): boolean; (x: string): any; }

var b: {
>b : { <T>(x: boolean): T; <T>(x: T): any; }

    <T>(x: boolean): T;
>T : T
>x : boolean
>类型别名 :=> 真假
>T : T

    <T>(x: T): any;
>T : T
>x : T
>T : T
}

var r2 = foo4(b); // T is {} (candidates boolean and {}), U is any (candidates any and {})
>r2 : any
>类型别名 :=> 任意
>foo4(b) : any
>类型别名 :=> 任意
>foo4 : <T, U>(cb: (x: T) => U) => U
>b : { <T>(x: boolean): T; <T>(x: T): any; }

