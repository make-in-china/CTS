=== tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithConstructSignatures2.ts ===
// object types are identical structurally

class B {
>B : B

    constructor(x: number) { return null; }
>x : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值
}

class C<T> {
>C : C<T>
>T : T

    constructor(x: T) { return null; }
>x : T
>T : T
>null : 空值
>类型别名 :=> 空值
}

interface I {
>I : I

    new(x: boolean): string;
>x : 真假
>类型别名 :=> 真假
}

interface I2<T> {
>I2 : I2<T>
>T : T

    new(x: T): T;
>x : T
>T : T
>T : T
}

var a: { new(x: Date): string }
>a : 新建 (x: Date) => 文字
>x : Date
>Date : Date

var b = { new(x: RegExp) { return ''; } }; // not a construct signature, function called new
>b : { new(x: RegExp): 文字; }
>{ new(x: RegExp) { return ''; } } : { new(x: RegExp): 文字; }
>new : (x: RegExp) => 文字
>x : RegExp
>RegExp : RegExp
>'' : ""

function foo1b(x: B);
>foo1b : { (x: B): 任意; (x: B): 任意; }
>x : B
>B : B

function foo1b(x: B); // error
>foo1b : { (x: B): 任意; (x: B): 任意; }
>x : B
>B : B

function foo1b(x: any) { }
>foo1b : { (x: B): 任意; (x: B): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo1c(x: C<string>);
>foo1c : { (x: C<文字>): 任意; (x: C<文字>): 任意; }
>x : C<文字>
>C : C<T>

function foo1c(x: C<string>); // error
>foo1c : { (x: C<文字>): 任意; (x: C<文字>): 任意; }
>x : C<文字>
>C : C<T>

function foo1c(x: any) { }
>foo1c : { (x: C<文字>): 任意; (x: C<文字>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo2(x: I);
>foo2 : { (x: I): 任意; (x: I): 任意; }
>x : I
>I : I

function foo2(x: I); // error
>foo2 : { (x: I): 任意; (x: I): 任意; }
>x : I
>I : I

function foo2(x: any) { }
>foo2 : { (x: I): 任意; (x: I): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo3(x: typeof a);
>foo3 : { (x: 新建 (x: Date) => 文字): 任意; (x: 新建 (x: Date) => 文字): 任意; }
>x : 新建 (x: Date) => 文字
>a : 新建 (x: Date) => 文字

function foo3(x: typeof a); // error
>foo3 : { (x: 新建 (x: Date) => 文字): 任意; (x: 新建 (x: Date) => 文字): 任意; }
>x : 新建 (x: Date) => 文字
>a : 新建 (x: Date) => 文字

function foo3(x: any) { }
>foo3 : { (x: 新建 (x: Date) => 文字): 任意; (x: 新建 (x: Date) => 文字): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo4(x: typeof b);
>foo4 : { (x: { new(x: RegExp): 文字; }): 任意; (x: { new(x: RegExp): 文字; }): 任意; }
>x : { new(x: RegExp): 文字; }
>b : { new(x: RegExp): 文字; }

function foo4(x: typeof b); // error
>foo4 : { (x: { new(x: RegExp): 文字; }): 任意; (x: { new(x: RegExp): 文字; }): 任意; }
>x : { new(x: RegExp): 文字; }
>b : { new(x: RegExp): 文字; }

function foo4(x: any) { }
>foo4 : { (x: { new(x: RegExp): 文字; }): 任意; (x: { new(x: RegExp): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo8(x: B);
>foo8 : { (x: B): 任意; (x: I): 任意; }
>x : B
>B : B

function foo8(x: I); // ok
>foo8 : { (x: B): 任意; (x: I): 任意; }
>x : I
>I : I

function foo8(x: any) { }
>foo8 : { (x: B): 任意; (x: I): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo9(x: B);
>foo9 : { (x: B): 任意; (x: C<文字>): 任意; }
>x : B
>B : B

function foo9(x: C<string>); // error, types are structurally equal
>foo9 : { (x: B): 任意; (x: C<文字>): 任意; }
>x : C<文字>
>C : C<T>

function foo9(x: any) { }
>foo9 : { (x: B): 任意; (x: C<文字>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo10(x: B);
>foo10 : { (x: B): 任意; (x: 新建 (x: Date) => 文字): 任意; }
>x : B
>B : B

function foo10(x: typeof a); // ok
>foo10 : { (x: B): 任意; (x: 新建 (x: Date) => 文字): 任意; }
>x : 新建 (x: Date) => 文字
>a : 新建 (x: Date) => 文字

function foo10(x: any) { }
>foo10 : { (x: B): 任意; (x: 新建 (x: Date) => 文字): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo11(x: B);
>foo11 : { (x: B): 任意; (x: { new(x: RegExp): 文字; }): 任意; }
>x : B
>B : B

function foo11(x: typeof b); // ok
>foo11 : { (x: B): 任意; (x: { new(x: RegExp): 文字; }): 任意; }
>x : { new(x: RegExp): 文字; }
>b : { new(x: RegExp): 文字; }

function foo11(x: any) { }
>foo11 : { (x: B): 任意; (x: { new(x: RegExp): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo12(x: I);
>foo12 : { (x: I): 任意; (x: C<文字>): 任意; }
>x : I
>I : I

function foo12(x: C<string>); // ok
>foo12 : { (x: I): 任意; (x: C<文字>): 任意; }
>x : C<文字>
>C : C<T>

function foo12(x: any) { }
>foo12 : { (x: I): 任意; (x: C<文字>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo12b(x: I2<string>);
>foo12b : { (x: I2<文字>): 任意; (x: C<文字>): 任意; }
>x : I2<文字>
>I2 : I2<T>

function foo12b(x: C<string>); // ok
>foo12b : { (x: I2<文字>): 任意; (x: C<文字>): 任意; }
>x : C<文字>
>C : C<T>

function foo12b(x: any) { }
>foo12b : { (x: I2<文字>): 任意; (x: C<文字>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo13(x: I);
>foo13 : { (x: I): 任意; (x: 新建 (x: Date) => 文字): 任意; }
>x : I
>I : I

function foo13(x: typeof a); // ok
>foo13 : { (x: I): 任意; (x: 新建 (x: Date) => 文字): 任意; }
>x : 新建 (x: Date) => 文字
>a : 新建 (x: Date) => 文字

function foo13(x: any) { }
>foo13 : { (x: I): 任意; (x: 新建 (x: Date) => 文字): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo14(x: I);
>foo14 : { (x: I): 任意; (x: { new(x: RegExp): 文字; }): 任意; }
>x : I
>I : I

function foo14(x: typeof b); // ok
>foo14 : { (x: I): 任意; (x: { new(x: RegExp): 文字; }): 任意; }
>x : { new(x: RegExp): 文字; }
>b : { new(x: RegExp): 文字; }

function foo14(x: any) { }
>foo14 : { (x: I): 任意; (x: { new(x: RegExp): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo15(x: I2<string>);
>foo15 : { (x: I2<文字>): 任意; (x: C<数字>): 任意; }
>x : I2<文字>
>I2 : I2<T>

function foo15(x: C<number>); // ok
>foo15 : { (x: I2<文字>): 任意; (x: C<数字>): 任意; }
>x : C<数字>
>C : C<T>

function foo15(x: any) { }
>foo15 : { (x: I2<文字>): 任意; (x: C<数字>): 任意; }
>x : 任意
>类型别名 :=> 任意

