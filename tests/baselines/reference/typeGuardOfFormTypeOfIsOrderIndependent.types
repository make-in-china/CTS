=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfIsOrderIndependent.ts ===
var strOrNum: string | number;
>strOrNum : 文字 | 数字

var strOrBool: string | boolean;
>strOrBool : 文字 | 真假

var strOrFunc: string | (() => void);
>strOrFunc : 文字 | (() => 无值)

var numOrBool: number | boolean
>numOrBool : 数字 | 真假

var str: string;
>str : 文字
>类型别名 :=> 文字

var num: number;
>num : 数字
>类型别名 :=> 数字

var bool: boolean;
>bool : 真假
>类型别名 :=> 真假

var func: () => void;
>func : () => 无值

if ("string" === typeof strOrNum) {
>"string" === typeof strOrNum : 真假
>类型别名 :=> 真假
>"string" : "string"
>typeof strOrNum : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNum : 文字 | 数字

    str = strOrNum;
>str = strOrNum : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>strOrNum : 文字
>类型别名 :=> 文字
}
else {
    num = strOrNum;
>num = strOrNum : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>strOrNum : 数字
>类型别名 :=> 数字
}
if ("function" === typeof strOrFunc) {
>"function" === typeof strOrFunc : 真假
>类型别名 :=> 真假
>"function" : "function"
>typeof strOrFunc : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrFunc : 文字 | (() => 无值)

    func = strOrFunc;
>func = strOrFunc : () => 无值
>func : () => 无值
>strOrFunc : () => 无值
}
else {
    str = strOrFunc;
>str = strOrFunc : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>strOrFunc : 文字
>类型别名 :=> 文字
}
if ("number" === typeof numOrBool) {
>"number" === typeof numOrBool : 真假
>类型别名 :=> 真假
>"number" : "number"
>typeof numOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>numOrBool : 数字 | 真假

    num = numOrBool;
>num = numOrBool : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>numOrBool : 数字
>类型别名 :=> 数字
}
else {
    bool = numOrBool;
>bool = numOrBool : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>numOrBool : 真假
>类型别名 :=> 真假
}
if ("boolean" === typeof strOrBool) {
>"boolean" === typeof strOrBool : 真假
>类型别名 :=> 真假
>"boolean" : "boolean"
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假

    bool = strOrBool;
>bool = strOrBool : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>strOrBool : 真假
>类型别名 :=> 真假
}
else {
    str = strOrBool;
>str = strOrBool : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>strOrBool : 文字
>类型别名 :=> 文字
}

