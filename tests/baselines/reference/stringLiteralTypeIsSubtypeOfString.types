=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/stringLiteralTypeIsSubtypeOfString.ts ===
// string literal types are subtypes of string, any

// ok
function f1(x: 'a');
>f1 : { (x: "a"): any; (x: string): any; }
>x : "a"

function f1(x: string);
>f1 : { (x: "a"): any; (x: string): any; }
>x : string
>类型别名 :=> 文字

function f1(x: string) { }
>f1 : { (x: "a"): any; (x: string): any; }
>x : string
>类型别名 :=> 文字

// ok
function f2(x: 'a');
>f2 : { (x: "a"): any; (x: any): any; }
>x : "a"

function f2(x: any);
>f2 : { (x: "a"): any; (x: any): any; }
>x : any
>类型别名 :=> 任意

function f2(x: any) { }
>f2 : { (x: "a"): any; (x: any): any; }
>x : any
>类型别名 :=> 任意

// errors
function f3(x: 'a');
>f3 : { (x: "a"): any; (x: Object): any; }
>x : "a"

function f3(x: Object);
>f3 : { (x: "a"): any; (x: Object): any; }
>x : Object
>Object : Object

function f3(x: any) { }
>f3 : { (x: "a"): any; (x: Object): any; }
>x : any
>类型别名 :=> 任意

function f4(x: 'a');
>f4 : { (x: "a"): any; (x: {}): any; }
>x : "a"

function f4(x: {});
>f4 : { (x: "a"): any; (x: {}): any; }
>x : {}

function f4(x: any) { }
>f4 : { (x: "a"): any; (x: {}): any; }
>x : any
>类型别名 :=> 任意

function f5(x: 'a');
>f5 : { (x: "a"): any; (x: number): any; }
>x : "a"

function f5(x: number);
>f5 : { (x: "a"): any; (x: number): any; }
>x : number
>类型别名 :=> 数字

function f5(x: any) { }
>f5 : { (x: "a"): any; (x: number): any; }
>x : any
>类型别名 :=> 任意

function f6(x: 'a');
>f6 : { (x: "a"): any; (x: boolean): any; }
>x : "a"

function f6(x: boolean);
>f6 : { (x: "a"): any; (x: boolean): any; }
>x : boolean
>类型别名 :=> 真假

function f6(x: any) { }
>f6 : { (x: "a"): any; (x: boolean): any; }
>x : any
>类型别名 :=> 任意

function f7(x: 'a');
>f7 : { (x: "a"): any; (x: Date): any; }
>x : "a"

function f7(x: Date);
>f7 : { (x: "a"): any; (x: Date): any; }
>x : Date
>Date : Date

function f7(x: any) { }
>f7 : { (x: "a"): any; (x: Date): any; }
>x : any
>类型别名 :=> 任意

function f8(x: 'a');
>f8 : { (x: "a"): any; (x: RegExp): any; }
>x : "a"

function f8(x: RegExp);
>f8 : { (x: "a"): any; (x: RegExp): any; }
>x : RegExp
>RegExp : RegExp

function f8(x: any) { }
>f8 : { (x: "a"): any; (x: RegExp): any; }
>x : any
>类型别名 :=> 任意

function f9(x: 'a');
>f9 : { (x: "a"): any; (x: () => {}): any; }
>x : "a"

function f9(x: () => {});
>f9 : { (x: "a"): any; (x: () => {}): any; }
>x : () => {}

function f9(x: any) { }
>f9 : { (x: "a"): any; (x: () => {}): any; }
>x : any
>类型别名 :=> 任意

class C implements String {
>C : C
>String : String

    toString(): string { return null; }
>toString : () => string
>null : null
>类型别名 :=> 空值

    charAt(pos: number): string { return null; }
>charAt : (pos: number) => string
>pos : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

    charCodeAt(index: number): number { return null; }
>charCodeAt : (index: number) => number
>index : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

    concat(...strings: string[]): string { return null; }
>concat : (...strings: string[]) => string
>strings : string[]
>null : null
>类型别名 :=> 空值

    indexOf(searchString: string, position?: number): number { return null; }
>indexOf : (searchString: string, position?: number) => number
>searchString : string
>类型别名 :=> 文字
>position : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

    lastIndexOf(searchString: string, position?: number): number { return null; }
>lastIndexOf : (searchString: string, position?: number) => number
>searchString : string
>类型别名 :=> 文字
>position : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

    localeCompare(that: string): number { return null; }
>localeCompare : (that: string) => number
>that : string
>类型别名 :=> 文字
>null : null
>类型别名 :=> 空值

    match(regexp: any): string[] { return null; }
>match : (regexp: any) => string[]
>regexp : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

    replace(searchValue: any, replaceValue: any): string { return null; }
>replace : (searchValue: any, replaceValue: any) => string
>searchValue : any
>类型别名 :=> 任意
>replaceValue : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

    search(regexp: any): number { return null; }
>search : (regexp: any) => number
>regexp : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

    slice(start?: number, end?: number): string { return null; }
>slice : (start?: number, end?: number) => string
>start : number
>类型别名 :=> 数字
>end : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

    split(separator: any, limit?: number): string[] { return null; }
>split : (separator: any, limit?: number) => string[]
>separator : any
>类型别名 :=> 任意
>limit : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

    substring(start: number, end?: number): string { return null; }
>substring : (start: number, end?: number) => string
>start : number
>类型别名 :=> 数字
>end : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

    toLowerCase(): string { return null; }
>toLowerCase : () => string
>null : null
>类型别名 :=> 空值

    toLocaleLowerCase(): string { return null; }
>toLocaleLowerCase : () => string
>null : null
>类型别名 :=> 空值

    toUpperCase(): string { return null; }
>toUpperCase : () => string
>null : null
>类型别名 :=> 空值

    toLocaleUpperCase(): string { return null; }
>toLocaleUpperCase : () => string
>null : null
>类型别名 :=> 空值

    trim(): string { return null; }
>trim : () => string
>null : null
>类型别名 :=> 空值

    length: number;
>length : number
>类型别名 :=> 数字

    substr(from: number, length?: number): string { return null; }
>substr : (from: number, length?: number) => string
>from : number
>类型别名 :=> 数字
>length : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

    valueOf(): string { return null; }
>valueOf : () => string
>null : null
>类型别名 :=> 空值

    [index: number]: string;
>index : number
>类型别名 :=> 数字
}
 
// BUG 831846
function f10(x: 'a');
>f10 : { (x: "a"): any; (x: C): any; }
>x : "a"

function f10(x: C);
>f10 : { (x: "a"): any; (x: C): any; }
>x : C
>C : C

function f10(x: any) { }
>f10 : { (x: "a"): any; (x: C): any; }
>x : any
>类型别名 :=> 任意

interface I extends String {
>I : I
>String : String

    foo: string;
>foo : string
>类型别名 :=> 文字
}

// BUG 831846
function f11(x: 'a');
>f11 : { (x: "a"): any; (x: I): any; }
>x : "a"

function f11(x: I);
>f11 : { (x: "a"): any; (x: I): any; }
>x : I
>I : I

function f11(x: any) { }
>f11 : { (x: "a"): any; (x: I): any; }
>x : any
>类型别名 :=> 任意

function f12<T>(x: 'a');
>f12 : { <T>(x: "a"): any; <T>(x: T): any; }
>T : T
>x : "a"

function f12<T>(x: T);
>f12 : { <T>(x: "a"): any; <T>(x: T): any; }
>T : T
>x : T
>T : T

function f12<T>(x: any) { }
>f12 : { <T>(x: "a"): any; <T>(x: T): any; }
>T : T
>x : any
>类型别名 :=> 任意

function f13<T extends String>(x: 'a');
>f13 : { <T extends String>(x: "a"): any; <T extends String>(x: T): any; }
>T : T
>String : String
>x : "a"

function f13<T extends String>(x: T);
>f13 : { <T extends String>(x: "a"): any; <T extends String>(x: T): any; }
>T : T
>String : String
>x : T
>T : T

function f13<T extends String>(x: any) { }
>f13 : { <T extends String>(x: "a"): any; <T extends String>(x: T): any; }
>T : T
>String : String
>x : any
>类型别名 :=> 任意

enum E { A }
>E : E
>A : E

function f14(x: 'a');
>f14 : { (x: "a"): any; (x: E): any; }
>x : "a"

function f14(x: E);
>f14 : { (x: "a"): any; (x: E): any; }
>x : E
>E : E

function f14(x: any) { }
>f14 : { (x: "a"): any; (x: E): any; }
>x : any
>类型别名 :=> 任意

function f15<T, U extends T>(x: 'a');
>f15 : { <T, U extends T>(x: "a"): any; <T, U extends T>(x: U): any; }
>T : T
>U : U
>T : T
>x : "a"

function f15<T, U extends T>(x: U);
>f15 : { <T, U extends T>(x: "a"): any; <T, U extends T>(x: U): any; }
>T : T
>U : U
>T : T
>x : U
>U : U

function f15<T, U extends T>(x: any) { }
>f15 : { <T, U extends T>(x: "a"): any; <T, U extends T>(x: U): any; }
>T : T
>U : U
>T : T
>x : any
>类型别名 :=> 任意

function f16<T extends String, U extends T>(x: 'a');
>f16 : { <T extends String, U extends T>(x: "a"): any; <T extends String, U extends T>(x: U): any; }
>T : T
>String : String
>U : U
>T : T
>x : "a"

function f16<T extends String, U extends T>(x: U);
>f16 : { <T extends String, U extends T>(x: "a"): any; <T extends String, U extends T>(x: U): any; }
>T : T
>String : String
>U : U
>T : T
>x : U
>U : U

function f16<T extends String, U extends T>(x: any) { }
>f16 : { <T extends String, U extends T>(x: "a"): any; <T extends String, U extends T>(x: U): any; }
>T : T
>String : String
>U : U
>T : T
>x : any
>类型别名 :=> 任意

