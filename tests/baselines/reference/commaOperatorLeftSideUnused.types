=== tests/cases/compiler/commaOperatorLeftSideUnused.ts ===
var xx: any;
>xx : 任意
>类型别名 :=> 任意

var yy: any;
>yy : 任意
>类型别名 :=> 任意

function fn() {
>fn : () => "zero or one" | "more than one"

  let arr: any[] = [];
>arr : 任意[]
>[] : 未定[]

  switch(arr.length) {
>arr.length : 数字
>类型别名 :=> 数字
>arr : 任意[]
>length : 数字
>类型别名 :=> 数字

    // Should error
    case 0, 1:
>0, 1 : 1
>0 : 0
>1 : 1

      return 'zero or one';
>'zero or one' : "zero or one"

    default:
      return 'more than one';
>'more than one' : "more than one"
  }
}

// Should error
let x = Math.pow((3, 5), 2);
>x : 数字
>类型别名 :=> 数字
>Math.pow((3, 5), 2) : 数字
>类型别名 :=> 数字
>Math.pow : (x: 数字, y: 数字) => 数字
>Math : Math
>pow : (x: 数字, y: 数字) => 数字
>(3, 5) : 5
>3, 5 : 5
>3 : 3
>5 : 5
>2 : 2

// Should error
let a = [(3 + 4), ((1 + 1, 8) * 4)];
>a : 数字[]
>[(3 + 4), ((1 + 1, 8) * 4)] : 数字[]
>(3 + 4) : 数字
>类型别名 :=> 数字
>3 + 4 : 数字
>类型别名 :=> 数字
>3 : 3
>4 : 4
>((1 + 1, 8) * 4) : 数字
>类型别名 :=> 数字
>(1 + 1, 8) * 4 : 数字
>类型别名 :=> 数字
>(1 + 1, 8) : 8
>1 + 1, 8 : 8
>1 + 1 : 数字
>类型别名 :=> 数字
>1 : 1
>1 : 1
>8 : 8
>4 : 4

// Error cases
xx = (1, 2);
>xx = (1, 2) : 2
>xx : 任意
>类型别名 :=> 任意
>(1, 2) : 2
>1, 2 : 2
>1 : 1
>2 : 2

xx = ('', xx);
>xx = ('', xx) : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意
>('', xx) : 任意
>类型别名 :=> 任意
>'', xx : 任意
>类型别名 :=> 任意
>'' : ""
>xx : 任意
>类型别名 :=> 任意

xx = (/323/, 5);
>xx = (/323/, 5) : 5
>xx : 任意
>类型别名 :=> 任意
>(/323/, 5) : 5
>/323/, 5 : 5
>/323/ : RegExp
>5 : 5

xx = (`wat`, 'ok'),
>xx = (`wat`, 'ok'),xx = (true, false) : 为假
>类型别名 :=> 为假
>xx = (`wat`, 'ok') : "ok"
>xx : 任意
>类型别名 :=> 任意
>(`wat`, 'ok') : "ok"
>`wat`, 'ok' : "ok"
>`wat` : "wat"
>'ok' : "ok"

xx = (true, false);
>xx = (true, false) : 为假
>类型别名 :=> 为假
>xx : 任意
>类型别名 :=> 任意
>(true, false) : 为假
>类型别名 :=> 为假
>true, false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

xx = (false, true);
>xx = (false, true) : 为真
>类型别名 :=> 为真
>xx : 任意
>类型别名 :=> 任意
>(false, true) : 为真
>类型别名 :=> 为真
>false, true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真

xx = (null, xx);
>xx = (null, xx) : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意
>(null, xx) : 任意
>类型别名 :=> 任意
>null, xx : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>xx : 任意
>类型别名 :=> 任意

xx = (undefined, 10);
>xx = (undefined, 10) : 10
>xx : 任意
>类型别名 :=> 任意
>(undefined, 10) : 10
>undefined, 10 : 10
>undefined : 未定
>类型别名 :=> 未定
>10 : 10

xx = (() => {}, 'no');
>xx = (() => {}, 'no') : "no"
>xx : 任意
>类型别名 :=> 任意
>(() => {}, 'no') : "no"
>() => {}, 'no' : "no"
>() => {} : () => 无值
>'no' : "no"

xx = (function() { }, 100);
>xx = (function() { }, 100) : 100
>xx : 任意
>类型别名 :=> 任意
>(function() { }, 100) : 100
>function() { }, 100 : 100
>function() { } : () => 无值
>100 : 100

xx = ({}, {});
>xx = ({}, {}) : {}
>xx : 任意
>类型别名 :=> 任意
>({}, {}) : {}
>{}, {} : {}
>{} : {}
>{} : {}

xx = (typeof xx, 'unused');
>xx = (typeof xx, 'unused') : "unused"
>xx : 任意
>类型别名 :=> 任意
>(typeof xx, 'unused') : "unused"
>typeof xx, 'unused' : "unused"
>typeof xx : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>xx : 任意
>类型别名 :=> 任意
>'unused' : "unused"

xx = ([1, 2, x++], xx);
>xx = ([1, 2, x++], xx) : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意
>([1, 2, x++], xx) : 任意
>类型别名 :=> 任意
>[1, 2, x++], xx : 任意
>类型别名 :=> 任意
>[1, 2, x++] : 数字[]
>1 : 1
>2 : 2
>x++ : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>xx : 任意
>类型别名 :=> 任意

xx = (xx!, xx);
>xx = (xx!, xx) : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意
>(xx!, xx) : 任意
>类型别名 :=> 任意
>xx!, xx : 任意
>类型别名 :=> 任意
>xx! : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意

xx = (xx ? 3 : 4, 10);
>xx = (xx ? 3 : 4, 10) : 10
>xx : 任意
>类型别名 :=> 任意
>(xx ? 3 : 4, 10) : 10
>xx ? 3 : 4, 10 : 10
>xx ? 3 : 4 : 3 | 4
>xx : 任意
>类型别名 :=> 任意
>3 : 3
>4 : 4
>10 : 10

xx = (3 + 4, 10);
>xx = (3 + 4, 10) : 10
>xx : 任意
>类型别名 :=> 任意
>(3 + 4, 10) : 10
>3 + 4, 10 : 10
>3 + 4 : 数字
>类型别名 :=> 数字
>3 : 3
>4 : 4
>10 : 10

xx = (!xx, 10);
>xx = (!xx, 10) : 10
>xx : 任意
>类型别名 :=> 任意
>(!xx, 10) : 10
>!xx, 10 : 10
>!xx : 真假
>类型别名 :=> 真假
>xx : 任意
>类型别名 :=> 任意
>10 : 10

xx = (~xx, 10);
>xx = (~xx, 10) : 10
>xx : 任意
>类型别名 :=> 任意
>(~xx, 10) : 10
>~xx, 10 : 10
>~xx : 数字
>类型别名 :=> 数字
>xx : 任意
>类型别名 :=> 任意
>10 : 10

xx = (-xx, 10);
>xx = (-xx, 10) : 10
>xx : 任意
>类型别名 :=> 任意
>(-xx, 10) : 10
>-xx, 10 : 10
>-xx : 数字
>类型别名 :=> 数字
>xx : 任意
>类型别名 :=> 任意
>10 : 10

xx = (+xx, 10);
>xx = (+xx, 10) : 10
>xx : 任意
>类型别名 :=> 任意
>(+xx, 10) : 10
>+xx, 10 : 10
>+xx : 数字
>类型别名 :=> 数字
>xx : 任意
>类型别名 :=> 任意
>10 : 10

// OK cases
xx = (xx ? x++ : 4, 10);
>xx = (xx ? x++ : 4, 10) : 10
>xx : 任意
>类型别名 :=> 任意
>(xx ? x++ : 4, 10) : 10
>xx ? x++ : 4, 10 : 10
>xx ? x++ : 4 : 数字
>类型别名 :=> 数字
>xx : 任意
>类型别名 :=> 任意
>x++ : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>4 : 4
>10 : 10

xx = (--xx, 3);
>xx = (--xx, 3) : 3
>xx : 任意
>类型别名 :=> 任意
>(--xx, 3) : 3
>--xx, 3 : 3
>--xx : 数字
>类型别名 :=> 数字
>xx : 任意
>类型别名 :=> 任意
>3 : 3

xx = (xx = 3, 1);
>xx = (xx = 3, 1) : 1
>xx : 任意
>类型别名 :=> 任意
>(xx = 3, 1) : 1
>xx = 3, 1 : 1
>xx = 3 : 3
>xx : 任意
>类型别名 :=> 任意
>3 : 3
>1 : 1

xx = ((xx = 3), 5);
>xx = ((xx = 3), 5) : 5
>xx : 任意
>类型别名 :=> 任意
>((xx = 3), 5) : 5
>(xx = 3), 5 : 5
>(xx = 3) : 3
>xx = 3 : 3
>xx : 任意
>类型别名 :=> 任意
>3 : 3
>5 : 5

xx = (xx+= 4, xx);
>xx = (xx+= 4, xx) : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意
>(xx+= 4, xx) : 任意
>类型别名 :=> 任意
>xx+= 4, xx : 任意
>类型别名 :=> 任意
>xx+= 4 : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意
>4 : 4
>xx : 任意
>类型别名 :=> 任意

xx = ((xx+= 4), xx);
>xx = ((xx+= 4), xx) : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意
>((xx+= 4), xx) : 任意
>类型别名 :=> 任意
>(xx+= 4), xx : 任意
>类型别名 :=> 任意
>(xx+= 4) : 任意
>类型别名 :=> 任意
>xx+= 4 : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意
>4 : 4
>xx : 任意
>类型别名 :=> 任意

xx = (Math.pow(3, 2), 4);
>xx = (Math.pow(3, 2), 4) : 4
>xx : 任意
>类型别名 :=> 任意
>(Math.pow(3, 2), 4) : 4
>Math.pow(3, 2), 4 : 4
>Math.pow(3, 2) : 数字
>类型别名 :=> 数字
>Math.pow : (x: 数字, y: 数字) => 数字
>Math : Math
>pow : (x: 数字, y: 数字) => 数字
>3 : 3
>2 : 2
>4 : 4

xx = (void xx, 10);
>xx = (void xx, 10) : 10
>xx : 任意
>类型别名 :=> 任意
>(void xx, 10) : 10
>void xx, 10 : 10
>void xx : 未定
>类型别名 :=> 未定
>xx : 任意
>类型别名 :=> 任意
>10 : 10

xx = (xx as any, 100);
>xx = (xx as any, 100) : 100
>xx : 任意
>类型别名 :=> 任意
>(xx as any, 100) : 100
>xx as any, 100 : 100
>xx as any : 任意
>类型别名 :=> 任意
>xx : 任意
>类型别名 :=> 任意
>100 : 100

