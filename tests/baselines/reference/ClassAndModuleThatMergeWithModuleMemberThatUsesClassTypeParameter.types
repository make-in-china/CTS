=== tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithModuleMemberThatUsesClassTypeParameter.ts ===
// all expected to be errors

class clodule1<T>{
>clodule1 : clodule1<T>
>T : T

    id: string;
>id : string
>类型别名 :=> 文字

    value: T;
>value : T
>T : T
}

module clodule1 {
>clodule1 : typeof clodule1

    function f(x: T) { }
>f : (x: any) => void
>x : any
>类型别名 :=> 任意
>T : No type information available!
}

class clodule2<T>{
>clodule2 : clodule2<T>
>T : T

    id: string;
>id : string
>类型别名 :=> 文字

    value: T;
>value : T
>T : T
}

module clodule2 {
>clodule2 : typeof clodule2

    var x: T;
>x : any
>类型别名 :=> 任意
>T : No type information available!

    class D<U extends T>{
>D : D<U>
>U : U
>T : No type information available!

        id: string;
>id : string
>类型别名 :=> 文字

        value: U;
>value : U
>U : U
    }
}

class clodule3<T>{
>clodule3 : clodule3<T>
>T : T

    id: string;
>id : string
>类型别名 :=> 文字

    value: T;
>value : T
>T : T
}

module clodule3 {
>clodule3 : typeof clodule3

    export var y = { id: T };
>y : { id: any; }
>{ id: T } : { id: any; }
>id : any
>类型别名 :=> 任意
>T : any
>类型别名 :=> 任意
}

class clodule4<T>{
>clodule4 : clodule4<T>
>T : T

    id: string;
>id : string
>类型别名 :=> 文字

    value: T;
>value : T
>T : T
}

module clodule4 {
>clodule4 : typeof clodule4

    class D {
>D : D

        name: T;
>name : any
>类型别名 :=> 任意
>T : No type information available!
    }
}

