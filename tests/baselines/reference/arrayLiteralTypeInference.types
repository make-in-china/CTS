=== tests/cases/compiler/arrayLiteralTypeInference.ts ===
class Action {
>Action : Action

    id: number;
>id : number
>类型别名 :=> 数字
}

class ActionA extends Action {
>ActionA : ActionA
>Action : Action

    value: string;
>value : string
>类型别名 :=> 文字
}

class ActionB extends Action {
>ActionB : ActionB
>Action : Action

    trueNess: boolean;
>trueNess : boolean
>类型别名 :=> 真假
}

var x1: Action[] = [
>x1 : Action[]
>Action : Action
>[    { id: 2, trueness: false },    { id: 3, name: "three" }] : ({ id: number; trueness: boolean; } | { id: number; name: string; })[]

    { id: 2, trueness: false },
>{ id: 2, trueness: false } : { id: number; trueness: boolean; }
>id : number
>类型别名 :=> 数字
>2 : 2
>trueness : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

    { id: 3, name: "three" }
>{ id: 3, name: "three" } : { id: number; name: string; }
>id : number
>类型别名 :=> 数字
>3 : 3
>name : string
>类型别名 :=> 文字
>"three" : "three"

]

var x2: Action[] = [
>x2 : Action[]
>Action : Action
>[    new ActionA(),    new ActionB()] : (ActionA | ActionB)[]

    new ActionA(),
>new ActionA() : ActionA
>ActionA : typeof ActionA

    new ActionB()
>new ActionB() : ActionB
>ActionB : typeof ActionB

]

var x3: Action[] = [
>x3 : Action[]
>Action : Action
>[    new Action(),    new ActionA(),    new ActionB()] : Action[]

    new Action(),
>new Action() : Action
>Action : typeof Action

    new ActionA(),
>new ActionA() : ActionA
>ActionA : typeof ActionA

    new ActionB()
>new ActionB() : ActionB
>ActionB : typeof ActionB

]

var z1: { id: number }[] =
>z1 : { id: number; }[]
>id : number
>类型别名 :=> 数字

    [
>[        { id: 2, trueness: false },        { id: 3, name: "three" }    ] : ({ id: number; trueness: boolean; } | { id: number; name: string; })[]

        { id: 2, trueness: false },
>{ id: 2, trueness: false } : { id: number; trueness: boolean; }
>id : number
>类型别名 :=> 数字
>2 : 2
>trueness : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

        { id: 3, name: "three" }
>{ id: 3, name: "three" } : { id: number; name: string; }
>id : number
>类型别名 :=> 数字
>3 : 3
>name : string
>类型别名 :=> 文字
>"three" : "three"

    ]

var z2: { id: number }[] =
>z2 : { id: number; }[]
>id : number
>类型别名 :=> 数字

    [
>[        new ActionA(),        new ActionB()    ] : (ActionA | ActionB)[]

        new ActionA(),
>new ActionA() : ActionA
>ActionA : typeof ActionA

        new ActionB()
>new ActionB() : ActionB
>ActionB : typeof ActionB

    ]

var z3: { id: number }[] =
>z3 : { id: number; }[]
>id : number
>类型别名 :=> 数字

    [
>[        new Action(),        new ActionA(),        new ActionB()    ] : Action[]

        new Action(),
>new Action() : Action
>Action : typeof Action

        new ActionA(),
>new ActionA() : ActionA
>ActionA : typeof ActionA

        new ActionB()
>new ActionB() : ActionB
>ActionB : typeof ActionB

    ]





