=== tests/cases/conformance/classes/members/classTypes/instancePropertyInClassType.ts ===
module NonGeneric {
>NonGeneric : typeof NonGeneric

    class C {
>C : C

        x: string;
>x : string
>类型别名 :=> 文字

        get y() {
>y : number
>类型别名 :=> 数字

            return 1;
>1 : 1
        }
        set y(v) { }
>y : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字

        fn() { return this; }
>fn : () => this
>this : this

        constructor(public a: number, private b: number) { }
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
    }

    var c = new C(1, 2);
>c : C
>new C(1, 2) : C
>C : typeof C
>1 : 1
>2 : 2

    var r = c.fn();
>r : C
>c.fn() : C
>c.fn : () => C
>c : C
>fn : () => C

    var r2 = r.x;
>r2 : string
>类型别名 :=> 文字
>r.x : string
>类型别名 :=> 文字
>r : C
>x : string
>类型别名 :=> 文字

    var r3 = r.y;
>r3 : number
>类型别名 :=> 数字
>r.y : number
>类型别名 :=> 数字
>r : C
>y : number
>类型别名 :=> 数字

    r.y = 4;
>r.y = 4 : 4
>r.y : number
>类型别名 :=> 数字
>r : C
>y : number
>类型别名 :=> 数字
>4 : 4

    var r6 = c.y(); // error
>r6 : any
>类型别名 :=> 任意
>c.y() : any
>类型别名 :=> 任意
>c.y : number
>类型别名 :=> 数字
>c : C
>y : number
>类型别名 :=> 数字

}

module Generic {
>Generic : typeof Generic

    class C<T,U> {
>C : C<T, U>
>T : T
>U : U

        x: T;
>x : T
>T : T

        get y() {
>y : U

            return null;
>null : null
>类型别名 :=> 空值
        }
        set y(v: U) { }
>y : U
>v : U
>U : U

        fn() { return this; }
>fn : () => this
>this : this

        constructor(public a: T, private b: U) { }
>a : T
>T : T
>b : U
>U : U
    }

    var c = new C(1, '');
>c : C<number, string>
>new C(1, '') : C<number, string>
>C : typeof C
>1 : 1
>'' : ""

    var r = c.fn();
>r : C<number, string>
>c.fn() : C<number, string>
>c.fn : () => C<number, string>
>c : C<number, string>
>fn : () => C<number, string>

    var r2 = r.x;
>r2 : number
>类型别名 :=> 数字
>r.x : number
>类型别名 :=> 数字
>r : C<number, string>
>x : number
>类型别名 :=> 数字

    var r3 = r.y;
>r3 : string
>类型别名 :=> 文字
>r.y : string
>类型别名 :=> 文字
>r : C<number, string>
>y : string
>类型别名 :=> 文字

    r.y = '';
>r.y = '' : ""
>r.y : string
>类型别名 :=> 文字
>r : C<number, string>
>y : string
>类型别名 :=> 文字
>'' : ""

    var r6 = c.y(); // error
>r6 : any
>类型别名 :=> 任意
>c.y() : any
>类型别名 :=> 任意
>c.y : string
>类型别名 :=> 文字
>c : C<number, string>
>y : string
>类型别名 :=> 文字
}
