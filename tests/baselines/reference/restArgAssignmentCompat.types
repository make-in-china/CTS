=== tests/cases/compiler/restArgAssignmentCompat.ts ===
function f(...x: number[]) {
>f : (...x: number[]) => void
>x : number[]

    x.forEach((n, i) => void ('item ' + i + ' = ' + n));
>x.forEach((n, i) => void ('item ' + i + ' = ' + n)) : void
>类型别名 :=> 无值
>x.forEach : (callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void
>x : number[]
>forEach : (callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void
>(n, i) => void ('item ' + i + ' = ' + n) : (n: number, i: number) => any
>n : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>void ('item ' + i + ' = ' + n) : undefined
>类型别名 :=> 未定
>('item ' + i + ' = ' + n) : string
>类型别名 :=> 文字
>'item ' + i + ' = ' + n : string
>类型别名 :=> 文字
>'item ' + i + ' = ' : string
>类型别名 :=> 文字
>'item ' + i : string
>类型别名 :=> 文字
>'item ' : "item "
>i : number
>类型别名 :=> 数字
>' = ' : " = "
>n : number
>类型别名 :=> 数字
}
function g(x: number[], y: string) { }
>g : (x: number[], y: string) => void
>x : number[]
>y : string
>类型别名 :=> 文字

var n = g;
>n : (x: number[], y: string) => void
>g : (x: number[], y: string) => void

n = f;
>n = f : (...x: number[]) => void
>n : (x: number[], y: string) => void
>f : (...x: number[]) => void

n([4], 'foo');
>n([4], 'foo') : void
>类型别名 :=> 无值
>n : (x: number[], y: string) => void
>[4] : number[]
>4 : 4
>'foo' : "foo"

