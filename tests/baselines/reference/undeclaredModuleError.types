=== tests/cases/compiler/undeclaredModuleError.ts ===
import fs = require('fs');
>fs : 任意
>类型别名 :=> 任意

function readdir(path: string, accept: (stat: fs.Stats, name: string) => boolean, callback: (error: Error, results: { name: string; stat: fs.Stats; }[]) => void ) {}
>readdir : (path: 文字, accept: (stat: 任意, name: 文字) => 真假, callback: (error: Error, results: { name: 文字; stat: 任意; }[]) => 无值) => 无值
>path : 文字
>类型别名 :=> 文字
>accept : (stat: 任意, name: 文字) => 真假
>stat : 任意
>类型别名 :=> 任意
>fs : 任意
>类型别名 :=> 任意
>Stats : 任意
>类型别名 :=> 任意
>name : 文字
>类型别名 :=> 文字
>callback : (error: Error, results: { name: 文字; stat: 任意; }[]) => 无值
>error : Error
>Error : Error
>results : { name: 文字; stat: 任意; }[]
>name : 文字
>类型别名 :=> 文字
>stat : 任意
>类型别名 :=> 任意
>fs : 任意
>类型别名 :=> 任意
>Stats : 任意
>类型别名 :=> 任意

function join(...paths: string[]) {}
>join : (...paths: 文字[]) => 无值
>paths : 文字[]

function instrumentFile(covFileDir: string, covFileName: string, originalFilePath: string) {
>instrumentFile : (covFileDir: 文字, covFileName: 文字, originalFilePath: 文字) => 无值
>covFileDir : 文字
>类型别名 :=> 文字
>covFileName : 文字
>类型别名 :=> 文字
>originalFilePath : 文字
>类型别名 :=> 文字

    fs.readFile(originalFilePath, () => {       
>fs.readFile(originalFilePath, () => {               readdir(covFileDir, () => {        } , (error: Error, files: {}[]) => {                files.forEach((file) => {                    var fullPath = join(IDoNotExist);                } );            } );    } ) : 任意
>类型别名 :=> 任意
>fs.readFile : 任意
>类型别名 :=> 任意
>fs : 任意
>类型别名 :=> 任意
>readFile : 任意
>类型别名 :=> 任意
>originalFilePath : 文字
>类型别名 :=> 文字
>() => {               readdir(covFileDir, () => {        } , (error: Error, files: {}[]) => {                files.forEach((file) => {                    var fullPath = join(IDoNotExist);                } );            } );    } : () => 无值

        readdir(covFileDir, () => {
>readdir(covFileDir, () => {        } , (error: Error, files: {}[]) => {                files.forEach((file) => {                    var fullPath = join(IDoNotExist);                } );            } ) : 无值
>类型别名 :=> 无值
>readdir : (path: 文字, accept: (stat: 任意, name: 文字) => 真假, callback: (error: Error, results: { name: 文字; stat: 任意; }[]) => 无值) => 无值
>covFileDir : 文字
>类型别名 :=> 文字
>() => {        } : () => 无值

        } , (error: Error, files: {}[]) => {
>(error: Error, files: {}[]) => {                files.forEach((file) => {                    var fullPath = join(IDoNotExist);                } );            } : (error: Error, files: {}[]) => 无值
>error : Error
>Error : Error
>files : {}[]

                files.forEach((file) => {
>files.forEach((file) => {                    var fullPath = join(IDoNotExist);                } ) : 无值
>类型别名 :=> 无值
>files.forEach : (callbackfn: (value: {}, index: 数字, array: {}[]) => 无值, thisArg?: 任意) => 无值
>files : {}[]
>forEach : (callbackfn: (value: {}, index: 数字, array: {}[]) => 无值, thisArg?: 任意) => 无值
>(file) => {                    var fullPath = join(IDoNotExist);                } : (file: {}) => 无值
>file : {}

                    var fullPath = join(IDoNotExist);
>fullPath : 无值
>类型别名 :=> 无值
>join(IDoNotExist) : 无值
>类型别名 :=> 无值
>join : (...paths: 文字[]) => 无值
>IDoNotExist : 任意
>类型别名 :=> 任意

                } );
            } );
    } );
}
