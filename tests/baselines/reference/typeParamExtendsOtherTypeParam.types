=== tests/cases/compiler/typeParamExtendsOtherTypeParam.ts ===
class A<T, U extends T> { }
>A : A<T, U>
>T : T
>U : U
>T : T

class B<T extends Object, U extends T> {
>B : B<T, U>
>T : T
>Object : Object
>U : U
>T : T

    data: A<Object, Object>;
>data : A<Object, Object>
>A : A<T, U>
>Object : Object
>Object : Object
}

// Below 2 should compile without error 
var x: A< { a: string }, { a: string; b: number }>;
>x : A<{ a: 文字; }, { a: 文字; b: 数字; }>
>A : A<T, U>
>a : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字

var y: B< { a: string }, { a: string; b: number }>;
>y : B<{ a: 文字; }, { a: 文字; b: 数字; }>
>B : B<T, U>
>a : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字


// Below should be in error
var x1: A<{ a: string;}, { b: string }>;
>x1 : A<{ a: 文字; }, { b: 文字; }>
>A : A<T, U>
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字

var x2: A<{ a: string;}, { a: number }>;
>x2 : A<{ a: 文字; }, { a: 数字; }>
>A : A<T, U>
>a : 文字
>类型别名 :=> 文字
>a : 数字
>类型别名 :=> 数字

var x3: B<{ a: string;}, { b: string }>;
>x3 : B<{ a: 文字; }, { b: 文字; }>
>B : B<T, U>
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字

var x4: B<{ a: string;}, { a: number }>;
>x4 : B<{ a: 文字; }, { a: 数字; }>
>B : B<T, U>
>a : 文字
>类型别名 :=> 文字
>a : 数字
>类型别名 :=> 数字

var x5: A<{ a: string; b: number }, { a: string }>;
>x5 : A<{ a: 文字; b: 数字; }, { a: 文字; }>
>A : A<T, U>
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字

var x6: B<{ a: string; b: number }, { a: string }>;
>x6 : B<{ a: 文字; b: 数字; }, { a: 文字; }>
>B : B<T, U>
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字

interface I1 {
>I1 : I1

    a: string;
>a : 文字
>类型别名 :=> 文字
}

interface I2 {
>I2 : I2

    a: string;
>a : 文字
>类型别名 :=> 文字

    b: number;
>b : 数字
>类型别名 :=> 数字
}

var x7: A<I2, I1>;
>x7 : A<I2, I1>
>A : A<T, U>
>I2 : I2
>I1 : I1

var x8: B<I2, I1>;
>x8 : B<I2, I1>
>B : B<T, U>
>I2 : I2
>I1 : I1

