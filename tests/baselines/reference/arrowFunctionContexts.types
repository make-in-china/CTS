=== tests/cases/conformance/expressions/functions/arrowFunctionContexts.ts ===
// Arrow function used in with statement
with (window) {
>window : any
>类型别名 :=> 任意

    var p = () => this;
>p : any
>类型别名 :=> 任意
>() => this : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
}

// Arrow function as argument to super call
class Base {
>Base : Base

    constructor(n: any) { }
>n : any
>类型别名 :=> 任意
}

class Derived extends Base {
>Derived : Derived
>Base : Base

    constructor() {
        super(() => this);
>super(() => this) : void
>类型别名 :=> 无值
>super : typeof Base
>() => this : () => this
>this : this
    }
}

// Arrow function as function argument
window.setTimeout(() => null, 100);
>window.setTimeout(() => null, 100) : any
>类型别名 :=> 任意
>window.setTimeout : any
>类型别名 :=> 任意
>window : any
>类型别名 :=> 任意
>setTimeout : any
>类型别名 :=> 任意
>() => null : () => any
>null : null
>类型别名 :=> 空值
>100 : 100

// Arrow function as value in array literal

var obj = (n: number) => '';
>obj : (n: number) => string
>(n: number) => '' : (n: number) => string
>n : number
>类型别名 :=> 数字
>'' : ""

var obj: { (n: number): string; }; // OK
>obj : (n: number) => string
>n : number
>类型别名 :=> 数字

var arr = [(n: number) => ''];
>arr : ((n: number) => string)[]
>[(n: number) => ''] : ((n: number) => string)[]
>(n: number) => '' : (n: number) => string
>n : number
>类型别名 :=> 数字
>'' : ""

var arr: { (n: number): string; }[]; // Incorrect error here (bug 829597)
>arr : ((n: number) => string)[]
>n : number
>类型别名 :=> 数字

// Arrow function as enum value
enum E {
>E : E

    x = () => 4, // Error expected
>x : E
>() => 4 : () => number
>4 : 4

    y = (() => this).length // error, can't use this in enum
>y : E
>(() => this).length : number
>类型别名 :=> 数字
>(() => this) : () => any
>() => this : () => any
>this : any
>类型别名 :=> 任意
>length : number
>类型别名 :=> 数字
}

// Arrow function as module variable initializer
module M {
>M : typeof M

    export var a = (s) => '';
>a : (s: any) => string
>(s) => '' : (s: any) => string
>s : any
>类型别名 :=> 任意
>'' : ""

    var b = (s) => s;
>b : (s: any) => any
>(s) => s : (s: any) => any
>s : any
>类型别名 :=> 任意
>s : any
>类型别名 :=> 任意
}

// Repeat above for module members that are functions? (necessary to redo all of them?)
module M2 {
>M2 : typeof M2

    // Arrow function used in with statement
    with (window) {
>window : any
>类型别名 :=> 任意

        var p = () => this;
>p : any
>类型别名 :=> 任意
>() => this : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
    }

    // Arrow function as argument to super call
    class Base {
>Base : Base

        constructor(n: any) { }
>n : any
>类型别名 :=> 任意
    }

    class Derived extends Base {
>Derived : Derived
>Base : Base

        constructor() {
            super(() => this);
>super(() => this) : void
>类型别名 :=> 无值
>super : typeof Base
>() => this : () => this
>this : this
        }
    }

    // Arrow function as function argument
    window.setTimeout(() => null, 100);
>window.setTimeout(() => null, 100) : any
>类型别名 :=> 任意
>window.setTimeout : any
>类型别名 :=> 任意
>window : any
>类型别名 :=> 任意
>setTimeout : any
>类型别名 :=> 任意
>() => null : () => any
>null : null
>类型别名 :=> 空值
>100 : 100

    // Arrow function as value in array literal

    var obj = (n: number) => '';
>obj : (n: number) => string
>(n: number) => '' : (n: number) => string
>n : number
>类型别名 :=> 数字
>'' : ""

    var obj: { (n: number): string; }; // OK
>obj : (n: number) => string
>n : number
>类型别名 :=> 数字

    var arr = [(n: number) => ''];
>arr : ((n: number) => string)[]
>[(n: number) => ''] : ((n: number) => string)[]
>(n: number) => '' : (n: number) => string
>n : number
>类型别名 :=> 数字
>'' : ""

    var arr: { (n: number): string; }[]; // Incorrect error here (bug 829597)
>arr : ((n: number) => string)[]
>n : number
>类型别名 :=> 数字

    // Arrow function as enum value
    enum E {
>E : E

        x = () => 4, // Error expected
>x : E
>() => 4 : () => number
>4 : 4

        y = (() => this).length
>y : E
>(() => this).length : number
>类型别名 :=> 数字
>(() => this) : () => any
>() => this : () => any
>this : any
>类型别名 :=> 任意
>length : number
>类型别名 :=> 数字
    }

    // Arrow function as module variable initializer
    module M {
>M : typeof M

        export var a = (s) => '';
>a : (s: any) => string
>(s) => '' : (s: any) => string
>s : any
>类型别名 :=> 任意
>'' : ""

        var b = (s) => s;
>b : (s: any) => any
>(s) => s : (s: any) => any
>s : any
>类型别名 :=> 任意
>s : any
>类型别名 :=> 任意
    }

}

// <Identifier>(ParamList) => { ... } is a generic arrow function
var generic1 = <T>(n: T) => [n];
>generic1 : <T>(n: T) => T[]
><T>(n: T) => [n] : <T>(n: T) => T[]
>T : T
>n : T
>T : T
>[n] : T[]
>n : T

var generic1: { <T>(n: T): T[] }; // Incorrect error, Bug 829597
>generic1 : <T>(n: T) => T[]
>T : T
>n : T
>T : T
>T : T

var generic2 = <T>(n: T) => { return [n]; };
>generic2 : <T>(n: T) => T[]
><T>(n: T) => { return [n]; } : <T>(n: T) => T[]
>T : T
>n : T
>T : T
>[n] : T[]
>n : T

var generic2: { <T>(n: T): T[] };
>generic2 : <T>(n: T) => T[]
>T : T
>n : T
>T : T
>T : T

// <Identifier> ((ParamList) => { ... } ) is a type assertion to an arrow function
var asserted1 = <any>((n) => [n]);
>asserted1 : any
>类型别名 :=> 任意
><any>((n) => [n]) : any
>类型别名 :=> 任意
>((n) => [n]) : (n: any) => any[]
>(n) => [n] : (n: any) => any[]
>n : any
>类型别名 :=> 任意
>[n] : any[]
>n : any
>类型别名 :=> 任意

var asserted1: any;
>asserted1 : any
>类型别名 :=> 任意

var asserted2 = <any>((n) => { return n; });
>asserted2 : any
>类型别名 :=> 任意
><any>((n) => { return n; }) : any
>类型别名 :=> 任意
>((n) => { return n; }) : (n: any) => any
>(n) => { return n; } : (n: any) => any
>n : any
>类型别名 :=> 任意
>n : any
>类型别名 :=> 任意

var asserted2: any;
>asserted2 : any
>类型别名 :=> 任意


