=== tests/cases/conformance/types/members/typesWithOptionalProperty.ts ===
// basic uses of optional properties without errors

interface I {
>I : I

    foo: string;
>foo : 文字
>类型别名 :=> 文字

    bar?: number;
>bar : 数字
>类型别名 :=> 数字

    baz? (): string;
>baz : () => 文字
}

var a: {
>a : { foo: 文字; bar?: 数字; baz?(): 文字; }

    foo: string;
>foo : 文字
>类型别名 :=> 文字

    bar?: number;
>bar : 数字
>类型别名 :=> 数字

    baz? (): string;
>baz : () => 文字

};

var b = { foo: '' };
>b : { foo: 文字; }
>{ foo: '' } : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字
>'' : ""

var c = { foo: '', bar: 3 };
>c : { foo: 文字; bar: 数字; }
>{ foo: '', bar: 3 } : { foo: 文字; bar: 数字; }
>foo : 文字
>类型别名 :=> 文字
>'' : ""
>bar : 数字
>类型别名 :=> 数字
>3 : 3

var d = { foo: '', bar: 3, baz: () => '' };
>d : { foo: 文字; bar: 数字; baz: () => 文字; }
>{ foo: '', bar: 3, baz: () => '' } : { foo: 文字; bar: 数字; baz: () => 文字; }
>foo : 文字
>类型别名 :=> 文字
>'' : ""
>bar : 数字
>类型别名 :=> 数字
>3 : 3
>baz : () => 文字
>() => '' : () => 文字
>'' : ""

var i: I;
>i : I
>I : I

i = b;
>i = b : { foo: 文字; }
>i : I
>b : { foo: 文字; }

i = c;
>i = c : { foo: 文字; bar: 数字; }
>i : I
>c : { foo: 文字; bar: 数字; }

i = d;
>i = d : { foo: 文字; bar: 数字; baz: () => 文字; }
>i : I
>d : { foo: 文字; bar: 数字; baz: () => 文字; }

a = b;
>a = b : { foo: 文字; }
>a : { foo: 文字; bar?: 数字; baz?(): 文字; }
>b : { foo: 文字; }

a = c;
>a = c : { foo: 文字; bar: 数字; }
>a : { foo: 文字; bar?: 数字; baz?(): 文字; }
>c : { foo: 文字; bar: 数字; }

a = d;
>a = d : { foo: 文字; bar: 数字; baz: () => 文字; }
>a : { foo: 文字; bar?: 数字; baz?(): 文字; }
>d : { foo: 文字; bar: 数字; baz: () => 文字; }

i = a;
>i = a : { foo: 文字; bar?: 数字; baz?(): 文字; }
>i : I
>a : { foo: 文字; bar?: 数字; baz?(): 文字; }

a = i;
>a = i : I
>a : { foo: 文字; bar?: 数字; baz?(): 文字; }
>i : I

