=== tests/cases/compiler/assignmentCompatBug2.ts ===
var b2: { b: number;} = { a: 0 }; // error
>b2 : { b: 数字; }
>b : 数字
>类型别名 :=> 数字
>{ a: 0 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0

b2 = { a: 0 }; // error
>b2 = { a: 0 } : { a: 数字; }
>b2 : { b: 数字; }
>{ a: 0 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0

b2 = {b: 0, a: 0 };
>b2 = {b: 0, a: 0 } : { b: 数字; a: 数字; }
>b2 : { b: 数字; }
>{b: 0, a: 0 } : { b: 数字; a: 数字; }
>b : 数字
>类型别名 :=> 数字
>0 : 0
>a : 数字
>类型别名 :=> 数字
>0 : 0

var b3: { f(n: number): number; g(s: string): number; m: number; n?: number; k?(a: any): any; };
>b3 : { f(n: 数字): 数字; g(s: 文字): 数字; m: 数字; n?: 数字; k?(a: 任意): 任意; }
>f : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>g : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>m : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字
>k : (a: 任意) => 任意
>a : 任意
>类型别名 :=> 任意

b3 = {
>b3 = {    f: (n) => { return 0; },    g: (s) => { return 0; },    m: 0,} : { f: (n: 数字) => 数字; g: (s: 文字) => 数字; m: 数字; }
>b3 : { f(n: 数字): 数字; g(s: 文字): 数字; m: 数字; n?: 数字; k?(a: 任意): 任意; }
>{    f: (n) => { return 0; },    g: (s) => { return 0; },    m: 0,} : { f: (n: 数字) => 数字; g: (s: 文字) => 数字; m: 数字; }

    f: (n) => { return 0; },
>f : (n: 数字) => 数字
>(n) => { return 0; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>0 : 0

    g: (s) => { return 0; },
>g : (s: 文字) => 数字
>(s) => { return 0; } : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>0 : 0

    m: 0,
>m : 数字
>类型别名 :=> 数字
>0 : 0

}; // ok

b3 = {
>b3 = {    f: (n) => { return 0; },    g: (s) => { return 0; },} : { f: (n: 数字) => 数字; g: (s: 文字) => 数字; }
>b3 : { f(n: 数字): 数字; g(s: 文字): 数字; m: 数字; n?: 数字; k?(a: 任意): 任意; }
>{    f: (n) => { return 0; },    g: (s) => { return 0; },} : { f: (n: 数字) => 数字; g: (s: 文字) => 数字; }

    f: (n) => { return 0; },
>f : (n: 数字) => 数字
>(n) => { return 0; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>0 : 0

    g: (s) => { return 0; },
>g : (s: 文字) => 数字
>(s) => { return 0; } : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>0 : 0

}; // error

b3 = {
>b3 = {    f: (n) => { return 0; },    m: 0,} : { f: (n: 数字) => 数字; m: 数字; }
>b3 : { f(n: 数字): 数字; g(s: 文字): 数字; m: 数字; n?: 数字; k?(a: 任意): 任意; }
>{    f: (n) => { return 0; },    m: 0,} : { f: (n: 数字) => 数字; m: 数字; }

    f: (n) => { return 0; },
>f : (n: 数字) => 数字
>(n) => { return 0; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>0 : 0

    m: 0,
>m : 数字
>类型别名 :=> 数字
>0 : 0

}; // error

b3 = {
>b3 = {    f: (n) => { return 0; },    g: (s) => { return 0; },    m: 0,    n: 0,    k: (a) =>{ return null; },} : { f: (n: 数字) => 数字; g: (s: 文字) => 数字; m: 数字; n: 数字; k: (a: 任意) => 任意; }
>b3 : { f(n: 数字): 数字; g(s: 文字): 数字; m: 数字; n?: 数字; k?(a: 任意): 任意; }
>{    f: (n) => { return 0; },    g: (s) => { return 0; },    m: 0,    n: 0,    k: (a) =>{ return null; },} : { f: (n: 数字) => 数字; g: (s: 文字) => 数字; m: 数字; n: 数字; k: (a: 任意) => 任意; }

    f: (n) => { return 0; },
>f : (n: 数字) => 数字
>(n) => { return 0; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>0 : 0

    g: (s) => { return 0; },
>g : (s: 文字) => 数字
>(s) => { return 0; } : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>0 : 0

    m: 0,
>m : 数字
>类型别名 :=> 数字
>0 : 0

    n: 0,
>n : 数字
>类型别名 :=> 数字
>0 : 0

    k: (a) =>{ return null; },
>k : (a: 任意) => 任意
>(a) =>{ return null; } : (a: 任意) => 任意
>a : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

}; // ok

b3 = {
>b3 = {    f: (n) => { return 0; },    g: (s) => { return 0; },    n: 0,    k: (a) =>{ return null; },} : { f: (n: 数字) => 数字; g: (s: 文字) => 数字; n: 数字; k: (a: 任意) => 任意; }
>b3 : { f(n: 数字): 数字; g(s: 文字): 数字; m: 数字; n?: 数字; k?(a: 任意): 任意; }
>{    f: (n) => { return 0; },    g: (s) => { return 0; },    n: 0,    k: (a) =>{ return null; },} : { f: (n: 数字) => 数字; g: (s: 文字) => 数字; n: 数字; k: (a: 任意) => 任意; }

    f: (n) => { return 0; },
>f : (n: 数字) => 数字
>(n) => { return 0; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>0 : 0

    g: (s) => { return 0; },
>g : (s: 文字) => 数字
>(s) => { return 0; } : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>0 : 0

    n: 0,
>n : 数字
>类型别名 :=> 数字
>0 : 0

    k: (a) =>{ return null; },
>k : (a: 任意) => 任意
>(a) =>{ return null; } : (a: 任意) => 任意
>a : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

}; // error
