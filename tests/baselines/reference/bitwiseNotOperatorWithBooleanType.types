=== tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithBooleanType.ts ===
// ~ operator on boolean type
var BOOLEAN: boolean;
>BOOLEAN : boolean
>类型别名 :=> 真假

function foo(): boolean { return true; }
>foo : () => boolean
>true : true
>类型别名 :=> 为真

class A {
>A : A

    public a: boolean;
>a : boolean
>类型别名 :=> 真假

    static foo() { return false; }
>foo : () => boolean
>false : false
>类型别名 :=> 为假
}
module M {
>M : typeof M

    export var n: boolean;
>n : boolean
>类型别名 :=> 真假
}

var objA = new A();
>objA : A
>new A() : A
>A : typeof A

// boolean type var
var ResultIsNumber1 = ~BOOLEAN;
>ResultIsNumber1 : number
>类型别名 :=> 数字
>~BOOLEAN : number
>类型别名 :=> 数字
>BOOLEAN : boolean
>类型别名 :=> 真假

// boolean type literal
var ResultIsNumber2 = ~true;
>ResultIsNumber2 : number
>类型别名 :=> 数字
>~true : number
>类型别名 :=> 数字
>true : true
>类型别名 :=> 为真

var ResultIsNumber3 = ~{ x: true, y: false };
>ResultIsNumber3 : number
>类型别名 :=> 数字
>~{ x: true, y: false } : number
>类型别名 :=> 数字
>{ x: true, y: false } : { x: boolean; y: boolean; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>y : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

// boolean type expressions
var ResultIsNumber4 = ~objA.a;
>ResultIsNumber4 : number
>类型别名 :=> 数字
>~objA.a : number
>类型别名 :=> 数字
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假

var ResultIsNumber5 = ~M.n;
>ResultIsNumber5 : number
>类型别名 :=> 数字
>~M.n : number
>类型别名 :=> 数字
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

var ResultIsNumber6 = ~foo();
>ResultIsNumber6 : number
>类型别名 :=> 数字
>~foo() : number
>类型别名 :=> 数字
>foo() : boolean
>类型别名 :=> 真假
>foo : () => boolean

var ResultIsNumber7 = ~A.foo();
>ResultIsNumber7 : number
>类型别名 :=> 数字
>~A.foo() : number
>类型别名 :=> 数字
>A.foo() : boolean
>类型别名 :=> 真假
>A.foo : () => boolean
>A : typeof A
>foo : () => boolean

// multiple ~ operators
var ResultIsNumber8 = ~~BOOLEAN;
>ResultIsNumber8 : number
>类型别名 :=> 数字
>~~BOOLEAN : number
>类型别名 :=> 数字
>~BOOLEAN : number
>类型别名 :=> 数字
>BOOLEAN : boolean
>类型别名 :=> 真假

// miss assignment operators
~true;
>~true : number
>类型别名 :=> 数字
>true : true
>类型别名 :=> 为真

~BOOLEAN;
>~BOOLEAN : number
>类型别名 :=> 数字
>BOOLEAN : boolean
>类型别名 :=> 真假

~foo();
>~foo() : number
>类型别名 :=> 数字
>foo() : boolean
>类型别名 :=> 真假
>foo : () => boolean

~true, false;
>~true, false : false
>类型别名 :=> 为假
>~true : number
>类型别名 :=> 数字
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

~objA.a;
>~objA.a : number
>类型别名 :=> 数字
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假

~M.n;
>~M.n : number
>类型别名 :=> 数字
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

