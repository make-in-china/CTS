=== tests/cases/conformance/parser/ecmascript5/parserRealSource5.ts ===
// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
// See LICENSE.txt in the project root for complete license information.

///<reference path='typescript.ts' />

module TypeScript {
>TypeScript : 类为 TypeScript

    // TODO: refactor indent logic for use in emit
    export class PrintContext {
>PrintContext : PrintContext

        public builder = "";
>builder : 文字
>类型别名 :=> 文字
>"" : ""

        public indent1 = "  ";
>indent1 : 文字
>类型别名 :=> 文字
>"  " : "  "

        public indentStrings: string[] = [];
>indentStrings : 文字[]
>[] : 未定[]

        public indentAmt = 0;
>indentAmt : 数字
>类型别名 :=> 数字
>0 : 0

        constructor (public outfile: ITextWriter, public parser: Parser) {
>outfile : 任意
>类型别名 :=> 任意
>ITextWriter : No type information available!
>parser : 任意
>类型别名 :=> 任意
>Parser : No type information available!
        }

        public increaseIndent() {
>increaseIndent : () => 无值

            this.indentAmt++;
>this.indentAmt++ : 数字
>类型别名 :=> 数字
>this.indentAmt : 数字
>类型别名 :=> 数字
>this : 本体
>indentAmt : 数字
>类型别名 :=> 数字
        }

        public decreaseIndent() {
>decreaseIndent : () => 无值

            this.indentAmt--;
>this.indentAmt-- : 数字
>类型别名 :=> 数字
>this.indentAmt : 数字
>类型别名 :=> 数字
>this : 本体
>indentAmt : 数字
>类型别名 :=> 数字
        }

        public startLine() {
>startLine : () => 无值

            if (this.builder.length > 0) {
>this.builder.length > 0 : 真假
>类型别名 :=> 真假
>this.builder.length : 数字
>类型别名 :=> 数字
>this.builder : 文字
>类型别名 :=> 文字
>this : 本体
>builder : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>0 : 0

                CompilerDiagnostics.Alert(this.builder);
>CompilerDiagnostics.Alert(this.builder) : 任意
>类型别名 :=> 任意
>CompilerDiagnostics.Alert : 任意
>类型别名 :=> 任意
>CompilerDiagnostics : 任意
>类型别名 :=> 任意
>Alert : 任意
>类型别名 :=> 任意
>this.builder : 文字
>类型别名 :=> 文字
>this : 本体
>builder : 文字
>类型别名 :=> 文字
            }
            var indentString = this.indentStrings[this.indentAmt];
>indentString : 文字
>类型别名 :=> 文字
>this.indentStrings[this.indentAmt] : 文字
>类型别名 :=> 文字
>this.indentStrings : 文字[]
>this : 本体
>indentStrings : 文字[]
>this.indentAmt : 数字
>类型别名 :=> 数字
>this : 本体
>indentAmt : 数字
>类型别名 :=> 数字

            if (indentString === undefined) {
>indentString === undefined : 真假
>类型别名 :=> 真假
>indentString : 文字
>类型别名 :=> 文字
>undefined : 未定
>类型别名 :=> 未定

                indentString = "";
>indentString = "" : ""
>indentString : 文字
>类型别名 :=> 文字
>"" : ""

                for (var i = 0; i < this.indentAmt; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < this.indentAmt : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>this.indentAmt : 数字
>类型别名 :=> 数字
>this : 本体
>indentAmt : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                    indentString += this.indent1;
>indentString += this.indent1 : 文字
>类型别名 :=> 文字
>indentString : 文字
>类型别名 :=> 文字
>this.indent1 : 文字
>类型别名 :=> 文字
>this : 本体
>indent1 : 文字
>类型别名 :=> 文字
                }
                this.indentStrings[this.indentAmt] = indentString;
>this.indentStrings[this.indentAmt] = indentString : 文字
>类型别名 :=> 文字
>this.indentStrings[this.indentAmt] : 文字
>类型别名 :=> 文字
>this.indentStrings : 文字[]
>this : 本体
>indentStrings : 文字[]
>this.indentAmt : 数字
>类型别名 :=> 数字
>this : 本体
>indentAmt : 数字
>类型别名 :=> 数字
>indentString : 文字
>类型别名 :=> 文字
            }
            this.builder += indentString;
>this.builder += indentString : 文字
>类型别名 :=> 文字
>this.builder : 文字
>类型别名 :=> 文字
>this : 本体
>builder : 文字
>类型别名 :=> 文字
>indentString : 文字
>类型别名 :=> 文字
        }

        public write(s) {
>write : (s: 任意) => 无值
>s : 任意
>类型别名 :=> 任意

            this.builder += s;
>this.builder += s : 文字
>类型别名 :=> 文字
>this.builder : 文字
>类型别名 :=> 文字
>this : 本体
>builder : 文字
>类型别名 :=> 文字
>s : 任意
>类型别名 :=> 任意
        }

        public writeLine(s) {
>writeLine : (s: 任意) => 无值
>s : 任意
>类型别名 :=> 任意

            this.builder += s;
>this.builder += s : 文字
>类型别名 :=> 文字
>this.builder : 文字
>类型别名 :=> 文字
>this : 本体
>builder : 文字
>类型别名 :=> 文字
>s : 任意
>类型别名 :=> 任意

            this.outfile.WriteLine(this.builder);
>this.outfile.WriteLine(this.builder) : 任意
>类型别名 :=> 任意
>this.outfile.WriteLine : 任意
>类型别名 :=> 任意
>this.outfile : 任意
>类型别名 :=> 任意
>this : 本体
>outfile : 任意
>类型别名 :=> 任意
>WriteLine : 任意
>类型别名 :=> 任意
>this.builder : 文字
>类型别名 :=> 文字
>this : 本体
>builder : 文字
>类型别名 :=> 文字

            this.builder = "";
>this.builder = "" : ""
>this.builder : 文字
>类型别名 :=> 文字
>this : 本体
>builder : 文字
>类型别名 :=> 文字
>"" : ""
        }

    }

    export function prePrintAST(ast: AST, parent: AST, walker: IAstWalker) {
>prePrintAST : (ast: 任意, parent: 任意, walker: 任意) => 任意
>ast : 任意
>类型别名 :=> 任意
>AST : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : 任意
>类型别名 :=> 任意
>IAstWalker : No type information available!

        var pc: PrintContext = <PrintContext>walker.state;
>pc : PrintContext
>PrintContext : PrintContext
><PrintContext>walker.state : PrintContext
>PrintContext : PrintContext
>walker.state : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>state : 任意
>类型别名 :=> 任意

        ast.print(pc);
>ast.print(pc) : 任意
>类型别名 :=> 任意
>ast.print : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>print : 任意
>类型别名 :=> 任意
>pc : PrintContext

        pc.increaseIndent();
>pc.increaseIndent() : 无值
>类型别名 :=> 无值
>pc.increaseIndent : () => 无值
>pc : PrintContext
>increaseIndent : () => 无值

        return ast;
>ast : 任意
>类型别名 :=> 任意
    }


    export function postPrintAST(ast: AST, parent: AST, walker: IAstWalker) {
>postPrintAST : (ast: 任意, parent: 任意, walker: 任意) => 任意
>ast : 任意
>类型别名 :=> 任意
>AST : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : 任意
>类型别名 :=> 任意
>IAstWalker : No type information available!

        var pc: PrintContext = <PrintContext>walker.state;
>pc : PrintContext
>PrintContext : PrintContext
><PrintContext>walker.state : PrintContext
>PrintContext : PrintContext
>walker.state : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>state : 任意
>类型别名 :=> 任意

        pc.decreaseIndent();
>pc.decreaseIndent() : 无值
>类型别名 :=> 无值
>pc.decreaseIndent : () => 无值
>pc : PrintContext
>decreaseIndent : () => 无值

        return ast;
>ast : 任意
>类型别名 :=> 任意
    }
}
