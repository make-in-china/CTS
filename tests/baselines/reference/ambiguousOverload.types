=== tests/cases/compiler/ambiguousOverload.ts ===
function foof(bar: string, y): number;
>foof : { (bar: string, y: any): number; (bar: string, x: any): string; }
>bar : string
>类型别名 :=> 文字
>y : any
>类型别名 :=> 任意

function foof(bar: string, x): string;
>foof : { (bar: string, y: any): number; (bar: string, x: any): string; }
>bar : string
>类型别名 :=> 文字
>x : any
>类型别名 :=> 任意

function foof(bar: any): any { return bar };
>foof : { (bar: string, y: any): number; (bar: string, x: any): string; }
>bar : any
>类型别名 :=> 任意
>bar : any
>类型别名 :=> 任意

var x: number = foof("s", null);
>x : number
>类型别名 :=> 数字
>foof("s", null) : number
>类型别名 :=> 数字
>foof : { (bar: string, y: any): number; (bar: string, x: any): string; }
>"s" : "s"
>null : null
>类型别名 :=> 空值

var y: string = foof("s", null);
>y : string
>类型别名 :=> 文字
>foof("s", null) : number
>类型别名 :=> 数字
>foof : { (bar: string, y: any): number; (bar: string, x: any): string; }
>"s" : "s"
>null : null
>类型别名 :=> 空值

function foof2(bar: string, x): string;
>foof2 : { (bar: string, x: any): string; (bar: string, y: any): number; }
>bar : string
>类型别名 :=> 文字
>x : any
>类型别名 :=> 任意

function foof2(bar: string, y): number;
>foof2 : { (bar: string, x: any): string; (bar: string, y: any): number; }
>bar : string
>类型别名 :=> 文字
>y : any
>类型别名 :=> 任意

function foof2(bar: any): any { return bar };
>foof2 : { (bar: string, x: any): string; (bar: string, y: any): number; }
>bar : any
>类型别名 :=> 任意
>bar : any
>类型别名 :=> 任意

var x2: string = foof2("s", null);
>x2 : string
>类型别名 :=> 文字
>foof2("s", null) : string
>类型别名 :=> 文字
>foof2 : { (bar: string, x: any): string; (bar: string, y: any): number; }
>"s" : "s"
>null : null
>类型别名 :=> 空值

var y2: number = foof2("s", null);
>y2 : number
>类型别名 :=> 数字
>foof2("s", null) : string
>类型别名 :=> 文字
>foof2 : { (bar: string, x: any): string; (bar: string, y: any): number; }
>"s" : "s"
>null : null
>类型别名 :=> 空值

