=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormThisMember.ts ===
// There's a 'File' class in the stdlib, wrap with a namespace to avoid collision
namespace Test {
>Test : 类为 Test

	export class FileSystemObject {
>FileSystemObject : FileSystemObject

		isFSO: this is FileSystemObject;
>isFSO : 真假
>类型别名 :=> 真假
>FileSystemObject : FileSystemObject

		get isFile(): this is File {
>isFile : 真假
>类型别名 :=> 真假
>File : File

			return this instanceof File;
>this instanceof File : 真假
>类型别名 :=> 真假
>this : 本体
>File : 类为 File
		}
		set isFile(param) {
>isFile : 真假
>类型别名 :=> 真假
>param : 真假
>类型别名 :=> 真假

			// noop
		}
		get isDirectory(): this is Directory {
>isDirectory : 真假
>类型别名 :=> 真假
>Directory : Directory

			return this instanceof Directory;
>this instanceof Directory : 真假
>类型别名 :=> 真假
>this : 本体
>Directory : 类为 Directory
		}
		isNetworked: this is (Networked & this);
>isNetworked : 真假
>类型别名 :=> 真假
>Networked : Networked

		constructor(public path: string) {}
>path : 文字
>类型别名 :=> 文字
	}

	export class File extends FileSystemObject {
>File : File
>FileSystemObject : FileSystemObject

		constructor(path: string, public content: string) { super(path); }
>path : 文字
>类型别名 :=> 文字
>content : 文字
>类型别名 :=> 文字
>super(path) : 无值
>类型别名 :=> 无值
>super : 类为 FileSystemObject
>path : 文字
>类型别名 :=> 文字
	}
	export class Directory extends FileSystemObject {
>Directory : Directory
>FileSystemObject : FileSystemObject

		children: FileSystemObject[];
>children : FileSystemObject[]
>FileSystemObject : FileSystemObject
	}
	export interface Networked {
>Networked : Networked

		host: string;
>host : 文字
>类型别名 :=> 文字
	}

	let file: FileSystemObject = new File("foo/bar.txt", "foo");
>file : FileSystemObject
>FileSystemObject : FileSystemObject
>new File("foo/bar.txt", "foo") : File
>File : 类为 File
>"foo/bar.txt" : "foo/bar.txt"
>"foo" : "foo"

	file.isNetworked = false;
>file.isNetworked = false : 为假
>类型别名 :=> 为假
>file.isNetworked : 真假
>类型别名 :=> 真假
>file : FileSystemObject
>isNetworked : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

	file.isFSO = file.isFile;
>file.isFSO = file.isFile : 真假
>类型别名 :=> 真假
>file.isFSO : 真假
>类型别名 :=> 真假
>file : FileSystemObject
>isFSO : 真假
>类型别名 :=> 真假
>file.isFile : 真假
>类型别名 :=> 真假
>file : FileSystemObject
>isFile : 真假
>类型别名 :=> 真假

	file.isFile = true;
>file.isFile = true : 为真
>类型别名 :=> 为真
>file.isFile : 真假
>类型别名 :=> 真假
>file : FileSystemObject
>isFile : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

	let x = file.isFile;
>x : 真假
>类型别名 :=> 真假
>file.isFile : 为真
>类型别名 :=> 为真
>file : FileSystemObject
>isFile : 为真
>类型别名 :=> 为真

	if (file.isFile) {
>file.isFile : 为真
>类型别名 :=> 为真
>file : FileSystemObject
>isFile : 为真
>类型别名 :=> 为真

		file.content;
>file.content : 任意
>类型别名 :=> 任意
>file : FileSystemObject
>content : 任意
>类型别名 :=> 任意

		if (file.isNetworked) {
>file.isNetworked : 为假
>类型别名 :=> 为假
>file : FileSystemObject
>isNetworked : 为假
>类型别名 :=> 为假

			file.host;
>file.host : 任意
>类型别名 :=> 任意
>file : FileSystemObject
>host : 任意
>类型别名 :=> 任意

			file.content;
>file.content : 任意
>类型别名 :=> 任意
>file : FileSystemObject
>content : 任意
>类型别名 :=> 任意
		}
	}
	else if (file.isDirectory) {
>file.isDirectory : 真假
>类型别名 :=> 真假
>file : FileSystemObject
>isDirectory : 真假
>类型别名 :=> 真假

		file.children;
>file.children : 任意
>类型别名 :=> 任意
>file : FileSystemObject
>children : 任意
>类型别名 :=> 任意
	}
	else if (file.isNetworked) {
>file.isNetworked : 为假
>类型别名 :=> 为假
>file : FileSystemObject
>isNetworked : 为假
>类型别名 :=> 为假

		file.host;
>file.host : 任意
>类型别名 :=> 任意
>file : FileSystemObject
>host : 任意
>类型别名 :=> 任意
	}
	
	interface GenericLeadGuard<T> extends GenericGuard<T> {
>GenericLeadGuard : GenericLeadGuard<T>
>T : T
>GenericGuard : GenericGuard<T>
>T : T

		lead(): void;
>lead : () => 无值
	}
	
	interface GenericFollowerGuard<T> extends GenericGuard<T> {
>GenericFollowerGuard : GenericFollowerGuard<T>
>T : T
>GenericGuard : GenericGuard<T>
>T : T

		follow(): void;
>follow : () => 无值
	}
	
	interface GenericGuard<T> {
>GenericGuard : GenericGuard<T>
>T : T

		target: T;
>target : T
>T : T

		isLeader: this is (GenericLeadGuard<T>);
>isLeader : 真假
>类型别名 :=> 真假
>GenericLeadGuard : GenericLeadGuard<T>
>T : T

		isFollower: this is GenericFollowerGuard<T>;
>isFollower : 真假
>类型别名 :=> 真假
>GenericFollowerGuard : GenericFollowerGuard<T>
>T : T
	}

	let guard: GenericGuard<File>;
>guard : GenericGuard<File>
>GenericGuard : GenericGuard<T>
>File : File

	if (guard.isLeader) {
>guard.isLeader : 真假
>类型别名 :=> 真假
>guard : GenericGuard<File>
>isLeader : 真假
>类型别名 :=> 真假

		guard.lead();
>guard.lead() : 任意
>类型别名 :=> 任意
>guard.lead : 任意
>类型别名 :=> 任意
>guard : GenericGuard<File>
>lead : 任意
>类型别名 :=> 任意
	}
	else if (guard.isFollower) {
>guard.isFollower : 真假
>类型别名 :=> 真假
>guard : GenericGuard<File>
>isFollower : 真假
>类型别名 :=> 真假

		guard.follow();
>guard.follow() : 任意
>类型别名 :=> 任意
>guard.follow : 任意
>类型别名 :=> 任意
>guard : GenericGuard<File>
>follow : 任意
>类型别名 :=> 任意
	}

	interface SpecificGuard {
>SpecificGuard : SpecificGuard

		isMoreSpecific: this is MoreSpecificGuard;
>isMoreSpecific : 真假
>类型别名 :=> 真假
>MoreSpecificGuard : MoreSpecificGuard
	}

	interface MoreSpecificGuard extends SpecificGuard {
>MoreSpecificGuard : MoreSpecificGuard
>SpecificGuard : SpecificGuard

		do(): void;
>do : () => 无值
	}

	let general: SpecificGuard;
>general : SpecificGuard
>SpecificGuard : SpecificGuard

	if (general.isMoreSpecific) {
>general.isMoreSpecific : 真假
>类型别名 :=> 真假
>general : SpecificGuard
>isMoreSpecific : 真假
>类型别名 :=> 真假

		general.do();
>general.do() : 任意
>类型别名 :=> 任意
>general.do : 任意
>类型别名 :=> 任意
>general : SpecificGuard
>do : 任意
>类型别名 :=> 任意
	}
}

