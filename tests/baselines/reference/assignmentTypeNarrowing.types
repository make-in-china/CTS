=== tests/cases/conformance/expressions/assignmentOperator/assignmentTypeNarrowing.ts ===
let x: string | number | boolean | RegExp;
>x : string | number | boolean | RegExp
>RegExp : RegExp

x = "";
>x = "" : ""
>x : string | number | boolean | RegExp
>"" : ""

x; // string
>x : string
>类型别名 :=> 文字

[x] = [true];
>[x] = [true] : [true]
>[x] : [string | number | boolean | RegExp]
>x : string | number | boolean | RegExp
>[true] : [true]
>true : true
>类型别名 :=> 为真

x; // boolean
>x : true
>类型别名 :=> 为真

[x = ""] = [1];
>[x = ""] = [1] : [number]
>[x = ""] : [string]
>x = "" : ""
>x : string | number | boolean | RegExp
>"" : ""
>[1] : [number]
>1 : 1

x; // string | number
>x : string | number

({x} = {x: true});
>({x} = {x: true}) : { x: true; }
>{x} = {x: true} : { x: true; }
>{x} : { x: string | number | boolean | RegExp; }
>x : string | number | boolean | RegExp
>{x: true} : { x: true; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

x; // boolean
>x : true
>类型别名 :=> 为真

({y: x} = {y: 1});
>({y: x} = {y: 1}) : { y: 1; }
>{y: x} = {y: 1} : { y: 1; }
>{y: x} : { y: string | number | boolean | RegExp; }
>y : string | number | boolean | RegExp
>x : string | number | boolean | RegExp
>{y: 1} : { y: 1; }
>y : number
>类型别名 :=> 数字
>1 : 1

x; // number
>x : number
>类型别名 :=> 数字

({x = ""} = {x: true});
>({x = ""} = {x: true}) : { x?: true; }
>{x = ""} = {x: true} : { x?: true; }
>{x = ""} : { x?: string | number | boolean | RegExp; }
>x : string | number | boolean | RegExp
>{x: true} : { x?: true; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

x; // string | boolean
>x : string | true

({y: x = /a/} = {y: 1});
>({y: x = /a/} = {y: 1}) : { y?: number; }
>{y: x = /a/} = {y: 1} : { y?: number; }
>{y: x = /a/} : { y?: RegExp; }
>y : RegExp
>x = /a/ : RegExp
>x : string | number | boolean | RegExp
>/a/ : RegExp
>{y: 1} : { y?: number; }
>y : number
>类型别名 :=> 数字
>1 : 1

x; // number | RegExp
>x : number | RegExp

let a: string[];
>a : string[]

for (x of a) {
>x : string | number | boolean | RegExp
>a : string[]

    x; // string
>x : string
>类型别名 :=> 文字
}

