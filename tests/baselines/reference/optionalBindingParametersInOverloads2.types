=== tests/cases/conformance/es6/destructuring/optionalBindingParametersInOverloads2.ts ===
function foo({ x, y, z }?: { x: string; y: number; z: boolean });
>foo : ({ x, y, z }?: { x: string; y: number; z: boolean; }) => any
>x : string
>类型别名 :=> 文字
>y : number
>类型别名 :=> 数字
>z : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>y : number
>类型别名 :=> 数字
>z : boolean
>类型别名 :=> 真假

function foo(...rest: any[]) {
>foo : ({ x, y, z }?: { x: string; y: number; z: boolean; }) => any
>rest : any[]

}

foo({ x: "", y: 0, z: false });
>foo({ x: "", y: 0, z: false }) : any
>类型别名 :=> 任意
>foo : ({ x, y, z }?: { x: string; y: number; z: boolean; }) => any
>{ x: "", y: 0, z: false } : { x: string; y: number; z: false; }
>x : string
>类型别名 :=> 文字
>"" : ""
>y : number
>类型别名 :=> 数字
>0 : 0
>z : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

foo({ x: false, y: 0, z: "" });
>foo({ x: false, y: 0, z: "" }) : any
>类型别名 :=> 任意
>foo : ({ x, y, z }?: { x: string; y: number; z: boolean; }) => any
>{ x: false, y: 0, z: "" } : { x: boolean; y: number; z: string; }
>x : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>y : number
>类型别名 :=> 数字
>0 : 0
>z : string
>类型别名 :=> 文字
>"" : ""

