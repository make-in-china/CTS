=== tests/cases/compiler/typeofProperty.ts ===
interface I1 {
>I1 : I1

    a: number;
>a : 数字
>类型别名 :=> 数字

    b: typeof a; // Should yield error (a is not a value)
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
}

interface I2 {
>I2 : I2

    c: typeof d; // Should yield error (d is not a value)
>c : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意

    d: string;
>d : 文字
>类型别名 :=> 文字
}

interface I3 {
>I3 : I3

    e: typeof e; // Should yield error (e is not a value)
>e : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
}

class C1 {
>C1 : C1

    a: number;
>a : 数字
>类型别名 :=> 数字

    b: typeof a; // Should yield error (a is not a value)
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
}


class C2 {
>C2 : C2

    c: typeof d; // Should yield error (d is not a value)
>c : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意

    d: string;
>d : 文字
>类型别名 :=> 文字
}

class C3 {
>C3 : C3

    e: typeof e; // Should yield error (e is not a value)
>e : 任意
>类型别名 :=> 任意
>e : 任意
>类型别名 :=> 任意
}



interface ValidInterface {
>ValidInterface : ValidInterface

    x: string;
>x : 文字
>类型别名 :=> 文字
}

class ValidClass implements ValidInterface {
>ValidClass : ValidClass
>ValidInterface : ValidInterface

    x: string;
>x : 文字
>类型别名 :=> 文字
}

var vcInstance = new ValidClass();
>vcInstance : ValidClass
>new ValidClass() : ValidClass
>ValidClass : 类为 ValidClass

var viInstance = vcInstance;
>viInstance : ValidClass
>vcInstance : ValidClass

var x1: typeof vcInstance.x; // x1: string
>x1 : 文字
>类型别名 :=> 文字
>vcInstance.x : 文字
>类型别名 :=> 文字
>vcInstance : ValidClass
>x : 文字
>类型别名 :=> 文字

var x2: typeof viInstance.x; // x2: string
>x2 : 文字
>类型别名 :=> 文字
>viInstance.x : 文字
>类型别名 :=> 文字
>viInstance : ValidClass
>x : 文字
>类型别名 :=> 文字



