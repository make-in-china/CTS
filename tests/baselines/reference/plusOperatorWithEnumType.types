=== tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithEnumType.ts ===
// + operator on enum type

enum ENUM { };
>ENUM : ENUM

enum ENUM1 { A, B, "" };
>ENUM1 : ENUM1
>A : ENUM1.A
>B : ENUM1.B

// enum type var
var ResultIsNumber1 = +ENUM;
>ResultIsNumber1 : number
>类型别名 :=> 数字
>+ENUM : number
>类型别名 :=> 数字
>ENUM : typeof ENUM

var ResultIsNumber2 = +ENUM1;
>ResultIsNumber2 : number
>类型别名 :=> 数字
>+ENUM1 : number
>类型别名 :=> 数字
>ENUM1 : typeof ENUM1

// enum type expressions
var ResultIsNumber3 = +ENUM1["A"];
>ResultIsNumber3 : number
>类型别名 :=> 数字
>+ENUM1["A"] : number
>类型别名 :=> 数字
>ENUM1["A"] : ENUM1.A
>ENUM1 : typeof ENUM1
>"A" : "A"

var ResultIsNumber4 = +(ENUM[0] + ENUM1["B"]);
>ResultIsNumber4 : number
>类型别名 :=> 数字
>+(ENUM[0] + ENUM1["B"]) : number
>类型别名 :=> 数字
>(ENUM[0] + ENUM1["B"]) : string
>类型别名 :=> 文字
>ENUM[0] + ENUM1["B"] : string
>类型别名 :=> 文字
>ENUM[0] : string
>类型别名 :=> 文字
>ENUM : typeof ENUM
>0 : 0
>ENUM1["B"] : ENUM1.B
>ENUM1 : typeof ENUM1
>"B" : "B"

// miss assignment operators
+ENUM;
>+ENUM : number
>类型别名 :=> 数字
>ENUM : typeof ENUM

+ENUM1;
>+ENUM1 : number
>类型别名 :=> 数字
>ENUM1 : typeof ENUM1

+ENUM1.B;
>+ENUM1.B : number
>类型别名 :=> 数字
>ENUM1.B : ENUM1.B
>ENUM1 : typeof ENUM1
>B : ENUM1.B

+ENUM, ENUM1;
>+ENUM, ENUM1 : typeof ENUM1
>+ENUM : number
>类型别名 :=> 数字
>ENUM : typeof ENUM
>ENUM1 : typeof ENUM1

