=== tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithEnumType.ts ===
// + operator on enum type

enum ENUM { };
>ENUM : ENUM

enum ENUM1 { A, B, "" };
>ENUM1 : ENUM1
>A : ENUM1.A
>B : ENUM1.B

// enum type var
var ResultIsNumber1 = +ENUM;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>+ENUM : 数字
>类型别名 :=> 数字
>ENUM : 类为 ENUM

var ResultIsNumber2 = +ENUM1;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>+ENUM1 : 数字
>类型别名 :=> 数字
>ENUM1 : 类为 ENUM1

// enum type expressions
var ResultIsNumber3 = +ENUM1["A"];
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>+ENUM1["A"] : 数字
>类型别名 :=> 数字
>ENUM1["A"] : ENUM1.A
>ENUM1 : 类为 ENUM1
>"A" : "A"

var ResultIsNumber4 = +(ENUM[0] + ENUM1["B"]);
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>+(ENUM[0] + ENUM1["B"]) : 数字
>类型别名 :=> 数字
>(ENUM[0] + ENUM1["B"]) : 文字
>类型别名 :=> 文字
>ENUM[0] + ENUM1["B"] : 文字
>类型别名 :=> 文字
>ENUM[0] : 文字
>类型别名 :=> 文字
>ENUM : 类为 ENUM
>0 : 0
>ENUM1["B"] : ENUM1.B
>ENUM1 : 类为 ENUM1
>"B" : "B"

// miss assignment operators
+ENUM;
>+ENUM : 数字
>类型别名 :=> 数字
>ENUM : 类为 ENUM

+ENUM1;
>+ENUM1 : 数字
>类型别名 :=> 数字
>ENUM1 : 类为 ENUM1

+ENUM1.B;
>+ENUM1.B : 数字
>类型别名 :=> 数字
>ENUM1.B : ENUM1.B
>ENUM1 : 类为 ENUM1
>B : ENUM1.B

+ENUM, ENUM1;
>+ENUM, ENUM1 : 类为 ENUM1
>+ENUM : 数字
>类型别名 :=> 数字
>ENUM : 类为 ENUM
>ENUM1 : 类为 ENUM1

