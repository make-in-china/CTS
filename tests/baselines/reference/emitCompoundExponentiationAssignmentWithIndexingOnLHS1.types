=== tests/cases/conformance/es7/exponentiationOperator/emitCompoundExponentiationAssignmentWithIndexingOnLHS1.ts ===
var array0 = [1, 2, 3]
>array0 : 数字[]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

var i0 = 0;
>i0 : 数字
>类型别名 :=> 数字
>0 : 0

array0[++i0] **= 2;
>array0[++i0] **= 2 : 数字
>类型别名 :=> 数字
>array0[++i0] : 数字
>类型别名 :=> 数字
>array0 : 数字[]
>++i0 : 数字
>类型别名 :=> 数字
>i0 : 数字
>类型别名 :=> 数字
>2 : 2

var array1 = [1, 2, 3]
>array1 : 数字[]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

var i1 = 0;
>i1 : 数字
>类型别名 :=> 数字
>0 : 0

array1[++i1] **= array1[++i1] **= 2;
>array1[++i1] **= array1[++i1] **= 2 : 数字
>类型别名 :=> 数字
>array1[++i1] : 数字
>类型别名 :=> 数字
>array1 : 数字[]
>++i1 : 数字
>类型别名 :=> 数字
>i1 : 数字
>类型别名 :=> 数字
>array1[++i1] **= 2 : 数字
>类型别名 :=> 数字
>array1[++i1] : 数字
>类型别名 :=> 数字
>array1 : 数字[]
>++i1 : 数字
>类型别名 :=> 数字
>i1 : 数字
>类型别名 :=> 数字
>2 : 2

var array2 = [1, 2, 3]
>array2 : 数字[]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

var i2 = 0;
>i2 : 数字
>类型别名 :=> 数字
>0 : 0

array2[++i2] **= array2[++i2] ** 2;
>array2[++i2] **= array2[++i2] ** 2 : 数字
>类型别名 :=> 数字
>array2[++i2] : 数字
>类型别名 :=> 数字
>array2 : 数字[]
>++i2 : 数字
>类型别名 :=> 数字
>i2 : 数字
>类型别名 :=> 数字
>array2[++i2] ** 2 : 数字
>类型别名 :=> 数字
>array2[++i2] : 数字
>类型别名 :=> 数字
>array2 : 数字[]
>++i2 : 数字
>类型别名 :=> 数字
>i2 : 数字
>类型别名 :=> 数字
>2 : 2

var array3 = [2, 2, 3];
>array3 : 数字[]
>[2, 2, 3] : 数字[]
>2 : 2
>2 : 2
>3 : 3

var j0 = 0, j1 = 1;
>j0 : 数字
>类型别名 :=> 数字
>0 : 0
>j1 : 数字
>类型别名 :=> 数字
>1 : 1

array3[j0++] **= array3[j1++] **= array3[j0++] **= 1;
>array3[j0++] **= array3[j1++] **= array3[j0++] **= 1 : 数字
>类型别名 :=> 数字
>array3[j0++] : 数字
>类型别名 :=> 数字
>array3 : 数字[]
>j0++ : 数字
>类型别名 :=> 数字
>j0 : 数字
>类型别名 :=> 数字
>array3[j1++] **= array3[j0++] **= 1 : 数字
>类型别名 :=> 数字
>array3[j1++] : 数字
>类型别名 :=> 数字
>array3 : 数字[]
>j1++ : 数字
>类型别名 :=> 数字
>j1 : 数字
>类型别名 :=> 数字
>array3[j0++] **= 1 : 数字
>类型别名 :=> 数字
>array3[j0++] : 数字
>类型别名 :=> 数字
>array3 : 数字[]
>j0++ : 数字
>类型别名 :=> 数字
>j0 : 数字
>类型别名 :=> 数字
>1 : 1

