=== tests/cases/conformance/types/union/contextualTypeWithUnionTypeObjectLiteral.ts ===
var str: string;
>str : string
>类型别名 :=> 文字

var num: number;
>num : number
>类型别名 :=> 数字

var strOrNumber: string | number = str || num;
>strOrNumber : string | number
>str || num : string | number
>str : string
>类型别名 :=> 文字
>num : number
>类型别名 :=> 数字

var objStr: { prop: string };
>objStr : { prop: string; }
>prop : string
>类型别名 :=> 文字

var objNum: { prop: number };
>objNum : { prop: number; }
>prop : number
>类型别名 :=> 数字

var objStrOrNum1: { prop: string } | { prop: number } = objStr || objNum;
>objStrOrNum1 : { prop: string; } | { prop: number; }
>prop : string
>类型别名 :=> 文字
>prop : number
>类型别名 :=> 数字
>objStr || objNum : { prop: string; } | { prop: number; }
>objStr : { prop: string; }
>objNum : { prop: number; }

var objStrOrNum2: { prop: string | number } = objStr || objNum;
>objStrOrNum2 : { prop: string | number; }
>prop : string | number
>objStr || objNum : { prop: string; } | { prop: number; }
>objStr : { prop: string; }
>objNum : { prop: number; }

// Below is error because :
// Spec says:
// S is a union type and each constituent type of S is assignable to T.
// T is a union type and S is assignable to at least one constituent type of T.
// In case of objStrOrNum3, the S is not union Type but object Literal so we go to next step. 
// Since T is union Type we only allow the assignment of either object with property of type string or object with property of type number but do not allow object with property of type string | number
var objStrOrNum3: { prop: string } | { prop: number } = {
>objStrOrNum3 : { prop: string; } | { prop: number; }
>prop : string
>类型别名 :=> 文字
>prop : number
>类型别名 :=> 数字
>{    prop: strOrNumber} : { prop: string | number; }

    prop: strOrNumber
>prop : string | number
>strOrNumber : string | number

};
var objStrOrNum4: { prop: string | number } = {
>objStrOrNum4 : { prop: string | number; }
>prop : string | number
>{    prop: strOrNumber} : { prop: string | number; }

    prop: strOrNumber
>prop : string | number
>strOrNumber : string | number

};
var objStrOrNum5: { prop: string; anotherP: string; } | { prop: number } = { prop: strOrNumber };
>objStrOrNum5 : { prop: string; anotherP: string; } | { prop: number; }
>prop : string
>类型别名 :=> 文字
>anotherP : string
>类型别名 :=> 文字
>prop : number
>类型别名 :=> 数字
>{ prop: strOrNumber } : { prop: string | number; }
>prop : string | number
>strOrNumber : string | number

var objStrOrNum6: { prop: string; anotherP: string; } | { prop: number } = {
>objStrOrNum6 : { prop: string; anotherP: string; } | { prop: number; }
>prop : string
>类型别名 :=> 文字
>anotherP : string
>类型别名 :=> 文字
>prop : number
>类型别名 :=> 数字
>{    prop: strOrNumber,    anotherP: str} : { prop: string | number; anotherP: string; }

    prop: strOrNumber,
>prop : string | number
>strOrNumber : string | number

    anotherP: str
>anotherP : string
>类型别名 :=> 文字
>str : string
>类型别名 :=> 文字

};
var objStrOrNum7: { prop: string; anotherP: string; } | { prop: number; anotherP1: number } = {
>objStrOrNum7 : { prop: string; anotherP: string; } | { prop: number; anotherP1: number; }
>prop : string
>类型别名 :=> 文字
>anotherP : string
>类型别名 :=> 文字
>prop : number
>类型别名 :=> 数字
>anotherP1 : number
>类型别名 :=> 数字
>{    prop: strOrNumber,    anotherP: str} : { prop: string | number; anotherP: string; }

    prop: strOrNumber,
>prop : string | number
>strOrNumber : string | number

    anotherP: str
>anotherP : string
>类型别名 :=> 文字
>str : string
>类型别名 :=> 文字

};
var objStrOrNum8: { prop: string; anotherP: string; } | { prop: number; anotherP1: number } = {
>objStrOrNum8 : { prop: string; anotherP: string; } | { prop: number; anotherP1: number; }
>prop : string
>类型别名 :=> 文字
>anotherP : string
>类型别名 :=> 文字
>prop : number
>类型别名 :=> 数字
>anotherP1 : number
>类型别名 :=> 数字
>{    prop: strOrNumber,    anotherP: str,    anotherP1: num} : { prop: string | number; anotherP: string; anotherP1: number; }

    prop: strOrNumber,
>prop : string | number
>strOrNumber : string | number

    anotherP: str,
>anotherP : string
>类型别名 :=> 文字
>str : string
>类型别名 :=> 文字

    anotherP1: num
>anotherP1 : number
>类型别名 :=> 数字
>num : number
>类型别名 :=> 数字

};
interface I11 {
>I11 : I11

    commonMethodDifferentReturnType(a: string, b: number): string;
>commonMethodDifferentReturnType : (a: string, b: number) => string
>a : string
>类型别名 :=> 文字
>b : number
>类型别名 :=> 数字
}
interface I21 {
>I21 : I21

    commonMethodDifferentReturnType(a: string, b: number): number;
>commonMethodDifferentReturnType : (a: string, b: number) => number
>a : string
>类型别名 :=> 文字
>b : number
>类型别名 :=> 数字
}
var i11: I11;
>i11 : I11
>I11 : I11

var i21: I21;
>i21 : I21
>I21 : I21

var i11Ori21: I11 | I21 = i11;
>i11Ori21 : I11 | I21
>I11 : I11
>I21 : I21
>i11 : I11

var i11Ori21: I11 | I21 = i21;
>i11Ori21 : I11 | I21
>I11 : I11
>I21 : I21
>i21 : I21

var i11Ori21: I11 | I21 = { // Like i1
>i11Ori21 : I11 | I21
>I11 : I11
>I21 : I21
>{ // Like i1    commonMethodDifferentReturnType: (a, b) => {        var z = a.charAt(b);        return z;    },} : { commonMethodDifferentReturnType: (a: string, b: number) => string; }

    commonMethodDifferentReturnType: (a, b) => {
>commonMethodDifferentReturnType : (a: string, b: number) => string
>(a, b) => {        var z = a.charAt(b);        return z;    } : (a: string, b: number) => string
>a : string
>类型别名 :=> 文字
>b : number
>类型别名 :=> 数字

        var z = a.charAt(b);
>z : string
>类型别名 :=> 文字
>a.charAt(b) : string
>类型别名 :=> 文字
>a.charAt : (pos: number) => string
>a : string
>类型别名 :=> 文字
>charAt : (pos: number) => string
>b : number
>类型别名 :=> 数字

        return z;
>z : string
>类型别名 :=> 文字

    },
};
var i11Ori21: I11 | I21 = { // Like i2
>i11Ori21 : I11 | I21
>I11 : I11
>I21 : I21
>{ // Like i2    commonMethodDifferentReturnType: (a, b) => {        var z = a.charCodeAt(b);        return z;    },} : { commonMethodDifferentReturnType: (a: string, b: number) => number; }

    commonMethodDifferentReturnType: (a, b) => {
>commonMethodDifferentReturnType : (a: string, b: number) => number
>(a, b) => {        var z = a.charCodeAt(b);        return z;    } : (a: string, b: number) => number
>a : string
>类型别名 :=> 文字
>b : number
>类型别名 :=> 数字

        var z = a.charCodeAt(b);
>z : number
>类型别名 :=> 数字
>a.charCodeAt(b) : number
>类型别名 :=> 数字
>a.charCodeAt : (index: number) => number
>a : string
>类型别名 :=> 文字
>charCodeAt : (index: number) => number
>b : number
>类型别名 :=> 数字

        return z;
>z : number
>类型别名 :=> 数字

    },
};
var strOrNumber: string | number;
>strOrNumber : string | number

var i11Ori21: I11 | I21 = { // Like i1 and i2 both
>i11Ori21 : I11 | I21
>I11 : I11
>I21 : I21
>{ // Like i1 and i2 both    commonMethodDifferentReturnType: (a, b) => strOrNumber,} : { commonMethodDifferentReturnType: (a: string, b: number) => string | number; }

    commonMethodDifferentReturnType: (a, b) => strOrNumber,
>commonMethodDifferentReturnType : (a: string, b: number) => string | number
>(a, b) => strOrNumber : (a: string, b: number) => string | number
>a : string
>类型别名 :=> 文字
>b : number
>类型别名 :=> 数字
>strOrNumber : string | number

};
