=== tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedImportAlias.ts ===
module A {
>A : any
>类型别名 :=> 任意

    export interface Point {
>Point : Point

        x: number;
>x : number
>类型别名 :=> 数字

        y: number;
>y : number
>类型别名 :=> 数字
    }

    interface Point3d extends Point {
>Point3d : Point3d
>Point : Point

        z: number;
>z : number
>类型别名 :=> 数字
    }
}

module B {
>B : typeof B

    export class Line {
>Line : Line

        constructor(public start: A.Point, public end: A.Point) { }
>start : A.Point
>A : any
>类型别名 :=> 任意
>Point : A.Point
>end : A.Point
>A : any
>类型别名 :=> 任意
>Point : A.Point
    }
}

module Geometry {
>Geometry : typeof Geometry

    export import Points = A;
>Points : any
>类型别名 :=> 任意
>A : any
>类型别名 :=> 任意

    import Lines = B;
>Lines : typeof Lines
>B : typeof Lines

    export var Origin: Points.Point = { x: 0, y: 0 };
>Origin : Points.Point
>Points : any
>类型别名 :=> 任意
>Point : Points.Point
>{ x: 0, y: 0 } : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : number
>类型别名 :=> 数字
>0 : 0

    // this is valid since B.Line _is_ visible outside Geometry
    export var Unit: Lines.Line = new Lines.Line(Origin, { x: 1, y: 0 });
>Unit : Lines.Line
>Lines : any
>类型别名 :=> 任意
>Line : Lines.Line
>new Lines.Line(Origin, { x: 1, y: 0 }) : Lines.Line
>Lines.Line : typeof Lines.Line
>Lines : typeof Lines
>Line : typeof Lines.Line
>Origin : Points.Point
>{ x: 1, y: 0 } : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>1 : 1
>y : number
>类型别名 :=> 数字
>0 : 0
}

// expected to work since all are exported
var p: { x: number; y: number };
>p : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

var p: Geometry.Points.Point;
>p : { x: number; y: number; }
>Geometry : any
>类型别名 :=> 任意
>Points : any
>类型别名 :=> 任意
>Point : A.Point

var p = Geometry.Origin;
>p : { x: number; y: number; }
>Geometry.Origin : A.Point
>Geometry : typeof Geometry
>Origin : A.Point

var line: { start: { x: number; y: number }; end: { x: number; y: number; } };
>line : { start: { x: number; y: number; }; end: { x: number; y: number; }; }
>start : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>end : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

var line = Geometry.Unit;
>line : { start: { x: number; y: number; }; end: { x: number; y: number; }; }
>Geometry.Unit : B.Line
>Geometry : typeof Geometry
>Unit : B.Line

// not expected to work since non are exported
var line = Geometry.Lines.Line;
>line : { start: { x: number; y: number; }; end: { x: number; y: number; }; }
>Geometry.Lines.Line : any
>类型别名 :=> 任意
>Geometry.Lines : any
>类型别名 :=> 任意
>Geometry : typeof Geometry
>Lines : any
>类型别名 :=> 任意
>Line : any
>类型别名 :=> 任意


