=== tests/cases/compiler/Element.ts ===
declare namespace JSX {
>JSX : 任意
>类型别名 :=> 任意

    interface Element {
>Element : Element

        name: string;
>name : 文字
>类型别名 :=> 文字

        isIntrinsic: boolean;
>isIntrinsic : 真假
>类型别名 :=> 真假

        isCustomElement: boolean;
>isCustomElement : 真假
>类型别名 :=> 真假

        toString(renderId?: number): string;
>toString : (renderId?: 数字) => 文字
>renderId : 数字
>类型别名 :=> 数字

        bindDOM(renderId?: number): number;
>bindDOM : (renderId?: 数字) => 数字
>renderId : 数字
>类型别名 :=> 数字

        resetComponent(): void;
>resetComponent : () => 无值

        instantiateComponents(renderId?: number): number;
>instantiateComponents : (renderId?: 数字) => 数字
>renderId : 数字
>类型别名 :=> 数字

        props: any;
>props : 任意
>类型别名 :=> 任意
    }
}
export namespace Element {
>Element : 类为 Element

    export function isElement(el: any): el is JSX.Element {
>isElement : (el: 任意) => el 作为 JSX.Element
>el : 任意
>类型别名 :=> 任意
>el : 任意
>类型别名 :=> 任意
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

        return el.markAsChildOfRootElement !== undefined;
>el.markAsChildOfRootElement !== undefined : 真假
>类型别名 :=> 真假
>el.markAsChildOfRootElement : 任意
>类型别名 :=> 任意
>el : 任意
>类型别名 :=> 任意
>markAsChildOfRootElement : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
    }

    export function createElement(args: any[]) {
>createElement : (args: 任意[]) => {}
>args : 任意[]

        return {
>{        } : {}
        }
    }
}

export let createElement = Element.createElement;
>createElement : (args: 任意[]) => {}
>Element.createElement : (args: 任意[]) => {}
>Element : 类为 Element
>createElement : (args: 任意[]) => {}

function toCamelCase(text: string): string {
>toCamelCase : (text: 文字) => 文字
>text : 文字
>类型别名 :=> 文字

    return text[0].toLowerCase() + text.substring(1);
>text[0].toLowerCase() + text.substring(1) : 文字
>类型别名 :=> 文字
>text[0].toLowerCase() : 文字
>类型别名 :=> 文字
>text[0].toLowerCase : () => 文字
>text[0] : 文字
>类型别名 :=> 文字
>text : 文字
>类型别名 :=> 文字
>0 : 0
>toLowerCase : () => 文字
>text.substring(1) : 文字
>类型别名 :=> 文字
>text.substring : (start: 数字, end?: 数字) => 文字
>text : 文字
>类型别名 :=> 文字
>substring : (start: 数字, end?: 数字) => 文字
>1 : 1
}

=== tests/cases/compiler/test.tsx ===
import { Element} from './Element';
>Element : 类为 Element

let c: {
>c : { a?: { b: 文字; }; }

	a?: {
>a : { b: 文字; }

		b: string
>b : 文字
>类型别名 :=> 文字
	}
};

class A {
>A : A

	view() {
>view : () => 任意[]

		return [
>[			<meta content="helloworld"></meta>,			<meta content={c.a!.b}></meta>		] : 任意[]

			<meta content="helloworld"></meta>,
><meta content="helloworld"></meta> : 任意
>类型别名 :=> 任意
>meta : 任意
>类型别名 :=> 任意
>content : 文字
>类型别名 :=> 文字
>meta : 任意
>类型别名 :=> 任意

			<meta content={c.a!.b}></meta>
><meta content={c.a!.b}></meta> : 任意
>类型别名 :=> 任意
>meta : 任意
>类型别名 :=> 任意
>content : 文字
>类型别名 :=> 文字
>c.a!.b : 文字
>类型别名 :=> 文字
>c.a! : { b: 文字; }
>c.a : { b: 文字; }
>c : { a?: { b: 文字; }; }
>a : { b: 文字; }
>b : 文字
>类型别名 :=> 文字
>meta : 任意
>类型别名 :=> 任意

		];
	}
}
