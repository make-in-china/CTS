=== tests/cases/compiler/constDeclarations-scopes.ts ===
// global
const c = "string";
>c : "string"
>"string" : "string"

var n: number;
>n : number
>类型别名 :=> 数字

// Control flow statements with blocks
if (true) { 
>true : true
>类型别名 :=> 为真

    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}
else { 
    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}

while (true) { 
>true : true
>类型别名 :=> 为真

    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}

do { 
   const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0

} while (true);
>true : true
>类型别名 :=> 为真

var obj;
>obj : any
>类型别名 :=> 任意

with (obj) {
>obj : any
>类型别名 :=> 任意

    const c = 0;
>c : any
>类型别名 :=> 任意
>0 : any
>类型别名 :=> 任意

    n = c;
>n = c : any
>类型别名 :=> 任意
>n : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
}

for (var i = 0; i < 10; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 10 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>10 : 10
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}

for (var i2 in {}) {
>i2 : string
>类型别名 :=> 文字
>{} : {}

    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}

if (true) {
>true : true
>类型别名 :=> 为真

    label: const c = 0;
>label : any
>类型别名 :=> 任意
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}

while (false) {
>false : false
>类型别名 :=> 为假

    label2: label3: label4: const c = 0;
>label2 : any
>类型别名 :=> 任意
>label3 : any
>类型别名 :=> 任意
>label4 : any
>类型别名 :=> 任意
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}

// Try/catch/finally
try {
    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}
catch (e) {
>e : any
>类型别名 :=> 任意

    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}
finally {
    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}

// Switch
switch (0) {
>0 : 0

    case 0:
>0 : 0

        const c = 0;
>c : 0
>0 : 0

        n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0

        break;
}

// blocks
{
    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
    {
        const c = false;
>c : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假

        var b: boolean = c;
>b : boolean
>类型别名 :=> 真假
>c : false
>类型别名 :=> 为假
    }
}

// functions

function F() {
>F : () => void

    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
}

var F2 = () => {
>F2 : () => void
>() => {    const c = 0;    n = c;} : () => void

    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0

};

var F3 = function () {
>F3 : () => void
>function () {    const c = 0;    n = c;} : () => void

    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0

};

// modules
module m {
>m : typeof m

    const c = 0;
>c : 0
>0 : 0

    n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0

    {
       const c = false;
>c : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假

       var b2: boolean = c;
>b2 : boolean
>类型别名 :=> 真假
>c : false
>类型别名 :=> 为假
    }
}

// methods
class C {
>C : C

    constructor() {
        const c = 0;
>c : 0
>0 : 0

        n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
    }

    method() {
>method : () => void

        const c = 0;
>c : 0
>0 : 0

        n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
    }

    get v() {
>v : number
>类型别名 :=> 数字

        const c = 0;
>c : 0
>0 : 0

        n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0

        return n;
>n : number
>类型别名 :=> 数字
    }

    set v(value) {
>v : number
>类型别名 :=> 数字
>value : number
>类型别名 :=> 数字

        const c = 0;
>c : 0
>0 : 0

        n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
    }
}

// object literals
var o = {
>o : { f(): void; f2: () => void; }
>{    f() {        const c = 0;        n = c;    },    f2: () => {        const c = 0;        n = c;    }} : { f(): void; f2: () => void; }

    f() {
>f : () => void

        const c = 0;
>c : 0
>0 : 0

        n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0

    },
    f2: () => {
>f2 : () => void
>() => {        const c = 0;        n = c;    } : () => void

        const c = 0;
>c : 0
>0 : 0

        n = c;
>n = c : 0
>n : number
>类型别名 :=> 数字
>c : 0
    }
}
