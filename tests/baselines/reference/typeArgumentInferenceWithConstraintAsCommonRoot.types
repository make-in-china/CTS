=== tests/cases/compiler/typeArgumentInferenceWithConstraintAsCommonRoot.ts ===
interface Animal { x }
>Animal : Animal
>x : 任意
>类型别名 :=> 任意

interface Giraffe extends Animal { y }
>Giraffe : Giraffe
>Animal : Animal
>y : 任意
>类型别名 :=> 任意

interface Elephant extends Animal { z }
>Elephant : Elephant
>Animal : Animal
>z : 任意
>类型别名 :=> 任意

function f<T extends Animal>(x: T, y: T): T { return undefined; }
>f : <T 扩展 Animal>(x: T, y: T) => T
>T : T
>Animal : Animal
>x : T
>T : T
>y : T
>T : T
>T : T
>undefined : 未定
>类型别名 :=> 未定

var g: Giraffe;
>g : Giraffe
>Giraffe : Giraffe

var e: Elephant;
>e : Elephant
>Elephant : Elephant

f(g, e); // valid because both Giraffe and Elephant satisfy the constraint. T is Animal
>f(g, e) : 任意
>类型别名 :=> 任意
>f : <T 扩展 Animal>(x: T, y: T) => T
>g : Giraffe
>e : Elephant

