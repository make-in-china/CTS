=== tests/cases/compiler/mixinPrivateAndProtected.ts ===
// Repro from #13830

type Constructor<T> = new(...args: any[]) => T;
>Constructor : Constructor<T>
>T : T
>args : 任意[]
>T : T

class A {
>A : A

    public pb: number = 2;
>pb : 数字
>类型别名 :=> 数字
>2 : 2

    protected ptd: number = 1;
>ptd : 数字
>类型别名 :=> 数字
>1 : 1

    private pvt: number = 0;
>pvt : 数字
>类型别名 :=> 数字
>0 : 0
}

function mixB<T extends Constructor<{}>>(Cls: T) {
>mixB : <T 扩展 Constructor<{}>>(Cls: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: mixB<任意>.(Anonymous class); } & T
>T : T
>Constructor : Constructor<T>
>Cls : T
>T : T

    return class extends Cls {
>class extends Cls {        protected ptd: number = 10;        private pvt: number = 0;    } : { 新建 (...args: 任意[]): (Anonymous class); prototype: mixB<任意>.(Anonymous class); } & T
>Cls : {}

        protected ptd: number = 10;
>ptd : 数字
>类型别名 :=> 数字
>10 : 10

        private pvt: number = 0;
>pvt : 数字
>类型别名 :=> 数字
>0 : 0

    };
}

function mixB2<T extends Constructor<A>>(Cls: T) {
>mixB2 : <T 扩展 Constructor<A>>(Cls: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & T
>T : T
>Constructor : Constructor<T>
>A : A
>Cls : T
>T : T

    return class extends Cls {
>class extends Cls {        protected ptd: number = 10;    } : { 新建 (...args: 任意[]): (Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & T
>Cls : A

        protected ptd: number = 10;
>ptd : 数字
>类型别名 :=> 数字
>10 : 10

    };
}

const
    AB = mixB(A),
>AB : { 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A
>mixB(A) : { 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A
>mixB : <T 扩展 Constructor<{}>>(Cls: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: mixB<任意>.(Anonymous class); } & T
>A : 类为 A

    AB2 = mixB2(A);
>AB2 : { 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A
>mixB2(A) : { 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A
>mixB2 : <T 扩展 Constructor<A>>(Cls: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & T
>A : 类为 A

function mixC<T extends Constructor<{}>>(Cls: T) {
>mixC : <T 扩展 Constructor<{}>>(Cls: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: mixC<任意>.(Anonymous class); } & T
>T : T
>Constructor : Constructor<T>
>Cls : T
>T : T

    return class extends Cls {
>class extends Cls {        protected ptd: number = 100;        private pvt: number = 0;    } : { 新建 (...args: 任意[]): (Anonymous class); prototype: mixC<任意>.(Anonymous class); } & T
>Cls : {}

        protected ptd: number = 100;
>ptd : 数字
>类型别名 :=> 数字
>100 : 100

        private pvt: number = 0;
>pvt : 数字
>类型别名 :=> 数字
>0 : 0

    };
}

const
    AB2C = mixC(AB2),
>AB2C : { 新建 (...args: 任意[]): mixC<{ 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A>.(Anonymous class); prototype: mixC<任意>.(Anonymous class); } & { 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A
>mixC(AB2) : { 新建 (...args: 任意[]): mixC<{ 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A>.(Anonymous class); prototype: mixC<任意>.(Anonymous class); } & { 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A
>mixC : <T 扩展 Constructor<{}>>(Cls: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: mixC<任意>.(Anonymous class); } & T
>AB2 : { 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A

    ABC = mixC(AB);
>ABC : { 新建 (...args: 任意[]): mixC<{ 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A>.(Anonymous class); prototype: mixC<任意>.(Anonymous class); } & { 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A
>mixC(AB) : { 新建 (...args: 任意[]): mixC<{ 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A>.(Anonymous class); prototype: mixC<任意>.(Anonymous class); } & { 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A
>mixC : <T 扩展 Constructor<{}>>(Cls: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: mixC<任意>.(Anonymous class); } & T
>AB : { 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A

const
    a = new A(),
>a : A
>new A() : A
>A : 类为 A

    ab = new AB(),
>ab : mixB<类为 A>.(Anonymous class) & A
>new AB() : mixB<类为 A>.(Anonymous class) & A
>AB : { 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A

    abc = new ABC(),
>abc : mixC<{ 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A>.(Anonymous class) & mixB<类为 A>.(Anonymous class) & A
>new ABC() : mixC<{ 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A>.(Anonymous class) & mixB<类为 A>.(Anonymous class) & A
>ABC : { 新建 (...args: 任意[]): mixC<{ 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A>.(Anonymous class); prototype: mixC<任意>.(Anonymous class); } & { 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A

    ab2c = new AB2C();
>ab2c : mixC<{ 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A>.(Anonymous class) & mixB2<类为 A>.(Anonymous class) & A
>new AB2C() : mixC<{ 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A>.(Anonymous class) & mixB2<类为 A>.(Anonymous class) & A
>AB2C : { 新建 (...args: 任意[]): mixC<{ 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A>.(Anonymous class); prototype: mixC<任意>.(Anonymous class); } & { 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A

a.pb.toFixed();
>a.pb.toFixed() : 文字
>类型别名 :=> 文字
>a.pb.toFixed : (fractionDigits?: 数字) => 文字
>a.pb : 数字
>类型别名 :=> 数字
>a : A
>pb : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

a.ptd.toFixed();    // Error
>a.ptd.toFixed() : 文字
>类型别名 :=> 文字
>a.ptd.toFixed : (fractionDigits?: 数字) => 文字
>a.ptd : 数字
>类型别名 :=> 数字
>a : A
>ptd : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

a.pvt.toFixed();    // Error
>a.pvt.toFixed() : 文字
>类型别名 :=> 文字
>a.pvt.toFixed : (fractionDigits?: 数字) => 文字
>a.pvt : 数字
>类型别名 :=> 数字
>a : A
>pvt : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

ab.pb.toFixed();
>ab.pb.toFixed() : 文字
>类型别名 :=> 文字
>ab.pb.toFixed : (fractionDigits?: 数字) => 文字
>ab.pb : 数字
>类型别名 :=> 数字
>ab : mixB<类为 A>.(Anonymous class) & A
>pb : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

ab.ptd.toFixed();   // Error
>ab.ptd.toFixed() : 文字
>类型别名 :=> 文字
>ab.ptd.toFixed : (fractionDigits?: 数字) => 文字
>ab.ptd : 数字
>类型别名 :=> 数字
>ab : mixB<类为 A>.(Anonymous class) & A
>ptd : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

ab.pvt.toFixed();   // Error
>ab.pvt.toFixed() : 文字
>类型别名 :=> 文字
>ab.pvt.toFixed : (fractionDigits?: 数字) => 文字
>ab.pvt : 数字
>类型别名 :=> 数字
>ab : mixB<类为 A>.(Anonymous class) & A
>pvt : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

abc.pb.toFixed();
>abc.pb.toFixed() : 文字
>类型别名 :=> 文字
>abc.pb.toFixed : (fractionDigits?: 数字) => 文字
>abc.pb : 数字
>类型别名 :=> 数字
>abc : mixC<{ 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A>.(Anonymous class) & mixB<类为 A>.(Anonymous class) & A
>pb : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

abc.ptd.toFixed();  // Error
>abc.ptd.toFixed() : 文字
>类型别名 :=> 文字
>abc.ptd.toFixed : (fractionDigits?: 数字) => 文字
>abc.ptd : 数字
>类型别名 :=> 数字
>abc : mixC<{ 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A>.(Anonymous class) & mixB<类为 A>.(Anonymous class) & A
>ptd : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

abc.pvt.toFixed();  // Error
>abc.pvt.toFixed() : 文字
>类型别名 :=> 文字
>abc.pvt.toFixed : (fractionDigits?: 数字) => 文字
>abc.pvt : 数字
>类型别名 :=> 数字
>abc : mixC<{ 新建 (...args: 任意[]): mixB<类为 A>.(Anonymous class); prototype: mixB<任意>.(Anonymous class); } & 类为 A>.(Anonymous class) & mixB<类为 A>.(Anonymous class) & A
>pvt : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

ab2c.pb.toFixed();
>ab2c.pb.toFixed() : 文字
>类型别名 :=> 文字
>ab2c.pb.toFixed : (fractionDigits?: 数字) => 文字
>ab2c.pb : 数字
>类型别名 :=> 数字
>ab2c : mixC<{ 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A>.(Anonymous class) & mixB2<类为 A>.(Anonymous class) & A
>pb : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

ab2c.ptd.toFixed(); // Error
>ab2c.ptd.toFixed() : 文字
>类型别名 :=> 文字
>ab2c.ptd.toFixed : (fractionDigits?: 数字) => 文字
>ab2c.ptd : 数字
>类型别名 :=> 数字
>ab2c : mixC<{ 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A>.(Anonymous class) & mixB2<类为 A>.(Anonymous class) & A
>ptd : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

ab2c.pvt.toFixed(); // Error
>ab2c.pvt.toFixed() : 文字
>类型别名 :=> 文字
>ab2c.pvt.toFixed : (fractionDigits?: 数字) => 文字
>ab2c.pvt : 数字
>类型别名 :=> 数字
>ab2c : mixC<{ 新建 (...args: 任意[]): mixB2<类为 A>.(Anonymous class); prototype: mixB2<任意>.(Anonymous class); } & 类为 A>.(Anonymous class) & mixB2<类为 A>.(Anonymous class) & A
>pvt : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

// Repro from #13924

class Person {
>Person : Person

	constructor(public name: string) {}
>name : 文字
>类型别名 :=> 文字

	protected myProtectedFunction() {
>myProtectedFunction : () => 无值

		// do something
	}
}

function PersonMixin<T extends Constructor<Person>>(Base: T) {
>PersonMixin : <T 扩展 Constructor<Person>>(Base: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: PersonMixin<任意>.(Anonymous class); } & T
>T : T
>Constructor : Constructor<T>
>Person : Person
>Base : T
>T : T

	return class extends Base {
>class extends Base {		constructor(...args: any[]) {			super(...args);		}		myProtectedFunction() {			super.myProtectedFunction();			// do more things		}	} : { 新建 (...args: 任意[]): (Anonymous class); prototype: PersonMixin<任意>.(Anonymous class); } & T
>Base : Person

		constructor(...args: any[]) {
>args : 任意[]

			super(...args);
>super(...args) : 无值
>类型别名 :=> 无值
>super : T
>...args : 任意
>类型别名 :=> 任意
>args : 任意[]
		}

		myProtectedFunction() {
>myProtectedFunction : () => 无值

			super.myProtectedFunction();
>super.myProtectedFunction() : 无值
>类型别名 :=> 无值
>super.myProtectedFunction : () => 无值
>super : Person
>myProtectedFunction : () => 无值

			// do more things
		}
	};
}

class Customer extends PersonMixin(Person) {
>Customer : Customer
>PersonMixin(Person) : PersonMixin<类为 Person>.(Anonymous class) & Person
>PersonMixin : <T 扩展 Constructor<Person>>(Base: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: PersonMixin<任意>.(Anonymous class); } & T
>Person : 类为 Person

	accountBalance: number;
>accountBalance : 数字
>类型别名 :=> 数字

    f() {
>f : () => 无值
    }
}

