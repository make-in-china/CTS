=== tests/cases/compiler/typeMatch2.ts ===
function f1() {
>f1 : () => 无值

	var a = { x: 1, y: 2 };
>a : { x: 数字; y: 数字; }
>{ x: 1, y: 2 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

	a = {}; // error
>a = {} : {}
>a : { x: 数字; y: 数字; }
>{} : {}

    a = { x: 1 }; // error
>a = { x: 1 } : { x: 数字; }
>a : { x: 数字; y: 数字; }
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

	a = { x: 1, y: 2, z: 3 };
>a = { x: 1, y: 2, z: 3 } : { x: 数字; y: 数字; z: 数字; }
>a : { x: 数字; y: 数字; }
>{ x: 1, y: 2, z: 3 } : { x: 数字; y: 数字; z: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2
>z : 数字
>类型别名 :=> 数字
>3 : 3

    a = { x: 1, z: 3 };  // error
>a = { x: 1, z: 3 } : { x: 数字; z: 数字; }
>a : { x: 数字; y: 数字; }
>{ x: 1, z: 3 } : { x: 数字; z: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>z : 数字
>类型别名 :=> 数字
>3 : 3
}

class Animal { private a; }
>Animal : Animal
>a : 任意
>类型别名 :=> 任意

class Giraffe extends Animal { private g; }
>Giraffe : Giraffe
>Animal : Animal
>g : 任意
>类型别名 :=> 任意

function f2() {
>f2 : () => 无值

    var a = new Animal();
>a : Animal
>new Animal() : Animal
>Animal : 类为 Animal

    var g = new Giraffe();
>g : Giraffe
>new Giraffe() : Giraffe
>Giraffe : 类为 Giraffe

    var aa = [ a, a, a ];
>aa : Animal[]
>[ a, a, a ] : Animal[]
>a : Animal
>a : Animal
>a : Animal

    var gg = [ g, g, g ];
>gg : Giraffe[]
>[ g, g, g ] : Giraffe[]
>g : Giraffe
>g : Giraffe
>g : Giraffe

    aa = gg;
>aa = gg : Giraffe[]
>aa : Animal[]
>gg : Giraffe[]

    gg = aa; // error
>gg = aa : Animal[]
>gg : Giraffe[]
>aa : Animal[]

    var xa = { f1: 5, f2: aa };
>xa : { f1: 数字; f2: Animal[]; }
>{ f1: 5, f2: aa } : { f1: 数字; f2: Animal[]; }
>f1 : 数字
>类型别名 :=> 数字
>5 : 5
>f2 : Animal[]
>aa : Animal[]

    var xb = { f1: 5, f2: gg };
>xb : { f1: 数字; f2: Giraffe[]; }
>{ f1: 5, f2: gg } : { f1: 数字; f2: Giraffe[]; }
>f1 : 数字
>类型别名 :=> 数字
>5 : 5
>f2 : Giraffe[]
>gg : Giraffe[]

    xa = xb; // Should be ok
>xa = xb : { f1: 数字; f2: Giraffe[]; }
>xa : { f1: 数字; f2: Animal[]; }
>xb : { f1: 数字; f2: Giraffe[]; }

    xb = xa; // Not ok
>xb = xa : { f1: 数字; f2: Animal[]; }
>xb : { f1: 数字; f2: Giraffe[]; }
>xa : { f1: 数字; f2: Animal[]; }
}

function f4() {
>f4 : () => 无值

    var _any: any = 0;
>_any : 任意
>类型别名 :=> 任意
>0 : 0

    var i = 5;
>i : 数字
>类型别名 :=> 数字
>5 : 5

    i = null; 
>i = null : 空值
>类型别名 :=> 空值
>i : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

    i = undefined;
>i = undefined : 未定
>类型别名 :=> 未定
>i : 数字
>类型别名 :=> 数字
>undefined : 未定
>类型别名 :=> 未定

    var a = { x: 1, y: 1 };
>a : { x: 数字; y: 数字; }
>{ x: 1, y: 1 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1

    a = { x: 1, y: null }; 
>a = { x: 1, y: null } : { x: 数字; y: 空值; }
>a : { x: 数字; y: 数字; }
>{ x: 1, y: null } : { x: 数字; y: 空值; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

    a = { x: 1, y: undefined }; 
>a = { x: 1, y: undefined } : { x: 数字; y: 未定; }
>a : { x: 数字; y: 数字; }
>{ x: 1, y: undefined } : { x: 数字; y: 未定; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

    a = { x: 1, y: _any }; 
>a = { x: 1, y: _any } : { x: 数字; y: 任意; }
>a : { x: 数字; y: 数字; }
>{ x: 1, y: _any } : { x: 数字; y: 任意; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 任意
>类型别名 :=> 任意
>_any : 任意
>类型别名 :=> 任意

    a = { x: 1, y: _any, z:1 }; 
>a = { x: 1, y: _any, z:1 } : { x: 数字; y: 任意; z: 数字; }
>a : { x: 数字; y: 数字; }
>{ x: 1, y: _any, z:1 } : { x: 数字; y: 任意; z: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 任意
>类型别名 :=> 任意
>_any : 任意
>类型别名 :=> 任意
>z : 数字
>类型别名 :=> 数字
>1 : 1

    a = { x: 1 }; // error
>a = { x: 1 } : { x: 数字; }
>a : { x: 数字; y: 数字; }
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

    var mf = function m(n) { return false; };
>mf : (n: 任意) => 真假
>function m(n) { return false; } : (n: 任意) => 真假
>m : (n: 任意) => 真假
>n : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

    var zf = function z(n: number) { return true; };
>zf : (n: 数字) => 真假
>function z(n: number) { return true; } : (n: 数字) => 真假
>z : (n: 数字) => 真假
>n : 数字
>类型别名 :=> 数字
>true : 为真
>类型别名 :=> 为真

    mf=zf;
>mf=zf : (n: 数字) => 真假
>mf : (n: 任意) => 真假
>zf : (n: 数字) => 真假

    mf(_any);
>mf(_any) : 真假
>类型别名 :=> 真假
>mf : (n: 任意) => 真假
>_any : 任意
>类型别名 :=> 任意

    zf(_any);
>zf(_any) : 真假
>类型别名 :=> 真假
>zf : (n: 数字) => 真假
>_any : 任意
>类型别名 :=> 任意
}



