=== tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints5.ts ===
class A {
>A : A

    foo(): string { return ''; }
>foo : () => 文字
>'' : ""
}

class B extends A {
>B : B
>A : A

    bar(): string {
>bar : () => 文字

        return '';
>'' : ""
    }
}

class C<U extends T, T extends A> {
>C : C<U, T>
>U : U
>T : T
>T : T
>A : A

    f() {
>f : () => 文字

        var x: U;
>x : U
>U : U

        var a = x['foo'](); // should be string
>a : 文字
>类型别名 :=> 文字
>x['foo']() : 文字
>类型别名 :=> 文字
>x['foo'] : () => 文字
>x : U
>'foo' : "foo"

        return a + x.foo() + x.notHere();
>a + x.foo() + x.notHere() : 文字
>类型别名 :=> 文字
>a + x.foo() : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>x.foo() : 文字
>类型别名 :=> 文字
>x.foo : () => 文字
>x : U
>foo : () => 文字
>x.notHere() : 任意
>类型别名 :=> 任意
>x.notHere : 任意
>类型别名 :=> 任意
>x : U
>notHere : 任意
>类型别名 :=> 任意
    }
}

var r = (new C<B, A>()).f();
>r : 文字
>类型别名 :=> 文字
>(new C<B, A>()).f() : 文字
>类型别名 :=> 文字
>(new C<B, A>()).f : () => 文字
>(new C<B, A>()) : C<B, A>
>new C<B, A>() : C<B, A>
>C : 类为 C
>B : B
>A : A
>f : () => 文字

interface I<U extends T, T extends A> {
>I : I<U, T>
>U : U
>T : T
>T : T
>A : A

    foo: U;
>foo : U
>U : U
}
var i: I<B, A>;
>i : I<B, A>
>I : I<U, T>
>B : B
>A : A

var r2 = i.foo.notHere();
>r2 : 任意
>类型别名 :=> 任意
>i.foo.notHere() : 任意
>类型别名 :=> 任意
>i.foo.notHere : 任意
>类型别名 :=> 任意
>i.foo : B
>i : I<B, A>
>foo : B
>notHere : 任意
>类型别名 :=> 任意

var r2b = i.foo['foo']();
>r2b : 文字
>类型别名 :=> 文字
>i.foo['foo']() : 文字
>类型别名 :=> 文字
>i.foo['foo'] : () => 文字
>i.foo : B
>i : I<B, A>
>foo : B
>'foo' : "foo"

var a: {
>a : <U 扩展 T, T 扩展 A>() => U

    <U extends T, T extends A>(): U;
>U : U
>T : T
>T : T
>A : A
>U : U
}
// BUG 794164
var r3: string = a().notHere();
>r3 : 文字
>类型别名 :=> 文字
>a().notHere() : 任意
>类型别名 :=> 任意
>a().notHere : 任意
>类型别名 :=> 任意
>a() : A
>a : <U 扩展 T, T 扩展 A>() => U
>notHere : 任意
>类型别名 :=> 任意

var r3b: string = a()['foo']();
>r3b : 文字
>类型别名 :=> 文字
>a()['foo']() : 文字
>类型别名 :=> 文字
>a()['foo'] : () => 文字
>a() : A
>a : <U 扩展 T, T 扩展 A>() => U
>'foo' : "foo"

var b = {
>b : 任意
>类型别名 :=> 任意
>{    foo: <U extends T, T extends A>(x: U): U => {        var a = x['foo'](); // should be string        return a + x.notHere();    },    // BUG 794164    bar: b.foo(1).notHere()} : { foo: <U 扩展 T, T 扩展 A>(x: U) => U; bar: 任意; }

    foo: <U extends T, T extends A>(x: U): U => {
>foo : <U 扩展 T, T 扩展 A>(x: U) => U
><U extends T, T extends A>(x: U): U => {        var a = x['foo'](); // should be string        return a + x.notHere();    } : <U 扩展 T, T 扩展 A>(x: U) => U
>U : U
>T : T
>T : T
>A : A
>x : U
>U : U
>U : U

        var a = x['foo'](); // should be string
>a : 文字
>类型别名 :=> 文字
>x['foo']() : 文字
>类型别名 :=> 文字
>x['foo'] : () => 文字
>x : U
>'foo' : "foo"

        return a + x.notHere();
>a + x.notHere() : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>x.notHere() : 任意
>类型别名 :=> 任意
>x.notHere : 任意
>类型别名 :=> 任意
>x : U
>notHere : 任意
>类型别名 :=> 任意

    },
    // BUG 794164
    bar: b.foo(1).notHere()
>bar : 任意
>类型别名 :=> 任意
>b.foo(1).notHere() : 任意
>类型别名 :=> 任意
>b.foo(1).notHere : 任意
>类型别名 :=> 任意
>b.foo(1) : 任意
>类型别名 :=> 任意
>b.foo : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>1 : 1
>notHere : 任意
>类型别名 :=> 任意
}

var r4 = b.foo(new B()); // error after constraints above made illegal, doesn't matter
>r4 : 任意
>类型别名 :=> 任意
>b.foo(new B()) : 任意
>类型别名 :=> 任意
>b.foo : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>new B() : B
>B : 类为 B

