=== tests/cases/conformance/types/mapped/mappedTypes4.ts ===
type Box<T> = {
>Box : Box<T>
>T : T

};

type Boxified<T> = {
>Boxified : Boxified<T>
>T : T

    [P in keyof T]: Box<T[P]>;
>P : P
>T : T
>Box : Box<T>
>T : T
>P : P

};

function boxify<T>(obj: T): Boxified<T> {
>boxify : <T>(obj: T) => Boxified<T>
>T : T
>obj : T
>T : T
>Boxified : Boxified<T>
>T : T

    if (typeof obj === "object") {
>typeof obj === "object" : 真假
>类型别名 :=> 真假
>typeof obj : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>obj : T
>"object" : "object"

        let result = {} as Boxified<T>;
>result : Boxified<T>
>{} as Boxified<T> : Boxified<T>
>{} : {}
>Boxified : Boxified<T>
>T : T

        for (let k in obj) {
>k : 键集 T
>obj : T

            result[k] = { value: obj[k] };
>result[k] = { value: obj[k] } : { value: T[键集 T]; }
>result[k] : Boxified<T>[键集 T]
>result : Boxified<T>
>k : 键集 T
>{ value: obj[k] } : { value: T[键集 T]; }
>value : T[键集 T]
>obj[k] : T[键集 T]
>obj : T
>k : 键集 T
        }
        return result;
>result : Boxified<T>
    }
    return <any>obj;
><any>obj : 任意
>类型别名 :=> 任意
>obj : 不及
>类型别名 :=> 不及
}

type A = { a: string };
>A : A
>a : 文字
>类型别名 :=> 文字

type B = { b: string };
>B : B
>b : 文字
>类型别名 :=> 文字

type C = { c: string };
>C : C
>c : 文字
>类型别名 :=> 文字

function f1(x: A | B | C | undefined) {
>f1 : (x: A | B | C | 未定) => Boxified<A> | Boxified<B> | Boxified<C> | 未定
>x : A | B | C | 未定
>A : A
>B : B
>C : C

    return boxify(x);
>boxify(x) : Boxified<A> | Boxified<B> | Boxified<C> | 未定
>boxify : <T>(obj: T) => Boxified<T>
>x : A | B | C | 未定
}

type T00 = Partial<A | B | C>;
>T00 : Partial<A> | Partial<B> | Partial<C>
>Partial : Partial<T>
>A : A
>B : B
>C : C

type T01 = Readonly<A | B | C | null | undefined>;
>T01 : Readonly<A> | Readonly<B> | Readonly<C> | 空值 | 未定
>Readonly : Readonly<T>
>A : A
>B : B
>C : C
>null : 空值
>类型别名 :=> 空值

type T02 = Boxified<A | B[] | C | string>
>T02 : 文字 | Boxified<A> | Boxified<C> | Boxified<B[]>
>Boxified : Boxified<T>
>A : A
>B : B
>C : C

type T03 = Readonly<string | number | boolean | null | undefined | void>;
>T03 : 文字 | 数字 | 真假 | 无值 | 空值 | 未定
>Readonly : Readonly<T>
>null : 空值
>类型别名 :=> 空值

type T04 = Boxified<string | number | boolean | null | undefined | void>;
>T04 : 文字 | 数字 | 真假 | 无值 | 空值 | 未定
>Boxified : Boxified<T>
>null : 空值
>类型别名 :=> 空值

type T05 = Partial<"hello" | "world" | 42>;
>T05 : "hello" | "world" | 42
>Partial : Partial<T>

type BoxifiedWithSentinel<T, U> = {
>BoxifiedWithSentinel : BoxifiedWithSentinel<T, U>
>T : T
>U : U

    [P in keyof T]: Box<T[P]> | U;
>P : P
>T : T
>Box : Box<T>
>T : T
>P : P
>U : U
}

type T10 = BoxifiedWithSentinel<A | B | C, null>;
>T10 : BoxifiedWithSentinel<A, 空值> | BoxifiedWithSentinel<B, 空值> | BoxifiedWithSentinel<C, 空值>
>BoxifiedWithSentinel : BoxifiedWithSentinel<T, U>
>A : A
>B : B
>C : C
>null : 空值
>类型别名 :=> 空值

type T11 = BoxifiedWithSentinel<A | B | C, undefined>;
>T11 : BoxifiedWithSentinel<A, 未定> | BoxifiedWithSentinel<B, 未定> | BoxifiedWithSentinel<C, 未定>
>BoxifiedWithSentinel : BoxifiedWithSentinel<T, U>
>A : A
>B : B
>C : C

type T12 = BoxifiedWithSentinel<string, undefined>;
>T12 : 文字
>类型别名 :=> 文字
>BoxifiedWithSentinel : BoxifiedWithSentinel<T, U>

type DeepReadonly<T> = {
>DeepReadonly : DeepReadonly<T>
>T : T

    readonly [P in keyof T]: DeepReadonly<T[P]>;
>P : P
>T : T
>DeepReadonly : DeepReadonly<T>
>T : T
>P : P

};

type Foo = {
>Foo : Foo

    x: number;
>x : 数字
>类型别名 :=> 数字

    y: { a: string, b: number };
>y : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字

    z: boolean;
>z : 真假
>类型别名 :=> 真假

};

type DeepReadonlyFoo = {
>DeepReadonlyFoo : DeepReadonlyFoo

    readonly x: number;
>x : 数字
>类型别名 :=> 数字

    readonly y: { readonly a: string, readonly b: number };
>y : { 只读 a: 文字; 只读 b: 数字; }
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字

    readonly z: boolean;
>z : 真假
>类型别名 :=> 真假

};

var x1: DeepReadonly<Foo>;
>x1 : DeepReadonly<Foo>
>DeepReadonly : DeepReadonly<T>
>Foo : Foo

var x1: DeepReadonlyFoo;
>x1 : DeepReadonly<Foo>
>DeepReadonlyFoo : DeepReadonlyFoo

// Repro from #13232

type Z = { a: number };
>Z : Z
>a : 数字
>类型别名 :=> 数字

type Clone<T> = {
>Clone : Clone<T>
>T : T

  [P in keyof (T & {})]: T[P];
>P : P
>T : T
>T : T
>P : P

};
type M = Clone<Z>; // M should be { a: number }
>M : Clone<Z>
>Clone : Clone<T>
>Z : Z

var z1: Z;
>z1 : Z
>Z : Z

var z1: Clone<Z>;
>z1 : Z
>Clone : Clone<T>
>Z : Z

