=== tests/cases/conformance/types/typeRelationships/recursiveTypes/objectTypeWithRecursiveWrappedPropertyCheckedNominally.ts ===
// Types with infinitely expanding recursive types are type checked nominally

class List<T> {
>List : List<T>
>T : T

    data: T;
>data : T
>T : T

    next: List<List<T>>;
>next : List<List<T>>
>List : List<T>
>List : List<T>
>T : T
}

class MyList<T> {
>MyList : MyList<T>
>T : T

    data: T;
>data : T
>T : T

    next: MyList<MyList<T>>;
>next : MyList<MyList<T>>
>MyList : MyList<T>
>MyList : MyList<T>
>T : T
}

var list1 = new List<number>();
>list1 : List<数字>
>new List<number>() : List<数字>
>List : 类为 List

var list2 = new List<string>();
>list2 : List<文字>
>new List<string>() : List<文字>
>List : 类为 List

var myList1 = new MyList<number>();
>myList1 : MyList<数字>
>new MyList<number>() : MyList<数字>
>MyList : 类为 MyList

var myList2 = new MyList<string>();
>myList2 : MyList<文字>
>new MyList<string>() : MyList<文字>
>MyList : 类为 MyList

list1 = myList1; // error, not nominally equal
>list1 = myList1 : MyList<数字>
>list1 : List<数字>
>myList1 : MyList<数字>

list1 = myList2; // error, type mismatch
>list1 = myList2 : MyList<文字>
>list1 : List<数字>
>myList2 : MyList<文字>

list2 = myList1; // error, not nominally equal
>list2 = myList1 : MyList<数字>
>list2 : List<文字>
>myList1 : MyList<数字>

list2 = myList2; // error, type mismatch
>list2 = myList2 : MyList<文字>
>list2 : List<文字>
>myList2 : MyList<文字>

var rList1 = new List<List<number>>();
>rList1 : List<List<数字>>
>new List<List<number>>() : List<List<数字>>
>List : 类为 List
>List : List<T>

var rMyList1 = new List<MyList<number>>();
>rMyList1 : List<MyList<数字>>
>new List<MyList<number>>() : List<MyList<数字>>
>List : 类为 List
>MyList : MyList<T>

rList1 = rMyList1; // error, not nominally equal
>rList1 = rMyList1 : List<MyList<数字>>
>rList1 : List<List<数字>>
>rMyList1 : List<MyList<数字>>

function foo<T extends List<number>, U extends MyList<number>>(t: T, u: U) {
>foo : <T 扩展 List<数字>, U 扩展 MyList<数字>>(t: T, u: U) => 无值
>T : T
>List : List<T>
>U : U
>MyList : MyList<T>
>t : T
>T : T
>u : U
>U : U

    t = u; // error
>t = u : U
>t : T
>u : U

    u = t; // error
>u = t : T
>u : U
>t : T

    var a: List<number>;
>a : List<数字>
>List : List<T>

    var b: MyList<number>;
>b : MyList<数字>
>MyList : MyList<T>

    a = t; // ok
>a = t : T
>a : List<数字>
>t : T

    a = u; // error
>a = u : U
>a : List<数字>
>u : U

    b = t; // error
>b = t : T
>b : MyList<数字>
>t : T

    b = u; // ok
>b = u : U
>b : MyList<数字>
>u : U
}

function foo2<T extends U, U extends MyList<number>>(t: T, u: U) {
>foo2 : <T 扩展 U, U 扩展 MyList<数字>>(t: T, u: U) => 无值
>T : T
>U : U
>U : U
>MyList : MyList<T>
>t : T
>T : T
>u : U
>U : U

    t = u; // error
>t = u : U
>t : T
>u : U

    u = t; // was error, ok after constraint made illegal, doesn't matter
>u = t : T
>u : U
>t : T

    var a: List<number>;
>a : List<数字>
>List : List<T>

    var b: MyList<number>;
>b : MyList<数字>
>MyList : MyList<T>

    a = t; // error
>a = t : T
>a : List<数字>
>t : T

    a = u; // error
>a = u : U
>a : List<数字>
>u : U

    b = t; // ok
>b = t : T
>b : MyList<数字>
>t : T

    b = u; // ok
>b = u : U
>b : MyList<数字>
>u : U
}
