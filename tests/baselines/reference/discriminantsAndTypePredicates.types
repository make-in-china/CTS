=== tests/cases/compiler/discriminantsAndTypePredicates.ts ===
// Repro from #10145

interface A { type: 'A' }
>A : A
>type : "A"

interface B { type: 'B' }
>B : B
>type : "B"

function isA(x: A | B): x is A { return x.type === 'A'; }
>isA : (x: A | B) => x 作为 A
>x : A | B
>A : A
>B : B
>x : 任意
>类型别名 :=> 任意
>A : A
>x.type === 'A' : 真假
>类型别名 :=> 真假
>x.type : "A" | "B"
>x : A | B
>type : "A" | "B"
>'A' : "A"

function isB(x: A | B): x is B { return x.type === 'B'; }
>isB : (x: A | B) => x 作为 B
>x : A | B
>A : A
>B : B
>x : 任意
>类型别名 :=> 任意
>B : B
>x.type === 'B' : 真假
>类型别名 :=> 真假
>x.type : "A" | "B"
>x : A | B
>type : "A" | "B"
>'B' : "B"

function foo1(x: A | B): any {
>foo1 : (x: A | B) => 任意
>x : A | B
>A : A
>B : B

    x;  // A | B
>x : A | B

    if (isA(x)) {
>isA(x) : 真假
>类型别名 :=> 真假
>isA : (x: A | B) => x 作为 A
>x : A | B

        return x;  // A
>x : A
    }
    x;  // B
>x : B

    if (isB(x)) {
>isB(x) : 真假
>类型别名 :=> 真假
>isB : (x: A | B) => x 作为 B
>x : B

        return x;  // B
>x : B
    }
    x;  // never
>x : 不及
>类型别名 :=> 不及
}

function foo2(x: A | B): any {
>foo2 : (x: A | B) => 任意
>x : A | B
>A : A
>B : B

    x;  // A | B
>x : A | B

    if (x.type === 'A') {
>x.type === 'A' : 真假
>类型别名 :=> 真假
>x.type : "A" | "B"
>x : A | B
>type : "A" | "B"
>'A' : "A"

        return x;  // A
>x : A
    }
    x;  // B
>x : B

    if (x.type === 'B') {
>x.type === 'B' : 真假
>类型别名 :=> 真假
>x.type : "B"
>x : B
>type : "B"
>'B' : "B"

        return x;  // B
>x : B
    }
    x;  // never
>x : 不及
>类型别名 :=> 不及
}
