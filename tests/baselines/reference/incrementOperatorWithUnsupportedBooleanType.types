=== tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithUnsupportedBooleanType.ts ===
// ++ operator on boolean type
var BOOLEAN: boolean;
>BOOLEAN : 真假
>类型别名 :=> 真假

function foo(): boolean { return true; }
>foo : () => 真假
>true : 为真
>类型别名 :=> 为真

class A {
>A : A

    public a: boolean;
>a : 真假
>类型别名 :=> 真假

    static foo() { return true; }
>foo : () => 真假
>true : 为真
>类型别名 :=> 为真
}
module M {
>M : 类为 M

    export var n: boolean;
>n : 真假
>类型别名 :=> 真假
}

var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// boolean type var
var ResultIsNumber1 = ++BOOLEAN;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>++BOOLEAN : 数字
>类型别名 :=> 数字
>BOOLEAN : 真假
>类型别名 :=> 真假

var ResultIsNumber2 = BOOLEAN++;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>BOOLEAN++ : 数字
>类型别名 :=> 数字
>BOOLEAN : 真假
>类型别名 :=> 真假

// boolean type literal
var ResultIsNumber3 = ++true;
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>++true : 数字
>类型别名 :=> 数字
>true : 为真
>类型别名 :=> 为真

var ResultIsNumber4 = ++{ x: true, y: false };
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>++{ x: true, y: false } : 数字
>类型别名 :=> 数字
>{ x: true, y: false } : { x: 真假; y: 真假; }
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>y : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

var ResultIsNumber5 = ++{ x: true, y: (n: boolean) => { return n; } };
>ResultIsNumber5 : 数字
>类型别名 :=> 数字
>++{ x: true, y: (n: boolean) => { return n; } } : 数字
>类型别名 :=> 数字
>{ x: true, y: (n: boolean) => { return n; } } : { x: 真假; y: (n: 真假) => 真假; }
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>y : (n: 真假) => 真假
>(n: boolean) => { return n; } : (n: 真假) => 真假
>n : 真假
>类型别名 :=> 真假
>n : 真假
>类型别名 :=> 真假

var ResultIsNumber6 = true++;
>ResultIsNumber6 : 数字
>类型别名 :=> 数字
>true++ : 数字
>类型别名 :=> 数字
>true : 为真
>类型别名 :=> 为真

var ResultIsNumber7 = { x: true, y: false }++;
>ResultIsNumber7 : 数字
>类型别名 :=> 数字
>{ x: true, y: false }++ : 数字
>类型别名 :=> 数字
>{ x: true, y: false } : { x: 真假; y: 真假; }
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>y : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

var ResultIsNumber8 = { x: true, y: (n: boolean) => { return n; } }++;
>ResultIsNumber8 : 数字
>类型别名 :=> 数字
>{ x: true, y: (n: boolean) => { return n; } }++ : 数字
>类型别名 :=> 数字
>{ x: true, y: (n: boolean) => { return n; } } : { x: 真假; y: (n: 真假) => 真假; }
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>y : (n: 真假) => 真假
>(n: boolean) => { return n; } : (n: 真假) => 真假
>n : 真假
>类型别名 :=> 真假
>n : 真假
>类型别名 :=> 真假

// boolean type expressions
var ResultIsNumber9 = ++objA.a;
>ResultIsNumber9 : 数字
>类型别名 :=> 数字
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 真假
>类型别名 :=> 真假
>objA : A
>a : 真假
>类型别名 :=> 真假

var ResultIsNumber10 = ++M.n;
>ResultIsNumber10 : 数字
>类型别名 :=> 数字
>++M.n : 数字
>类型别名 :=> 数字
>M.n : 真假
>类型别名 :=> 真假
>M : 类为 M
>n : 真假
>类型别名 :=> 真假

var ResultIsNumber11 = ++foo();
>ResultIsNumber11 : 数字
>类型别名 :=> 数字
>++foo() : 数字
>类型别名 :=> 数字
>foo() : 真假
>类型别名 :=> 真假
>foo : () => 真假

var ResultIsNumber12 = ++A.foo();
>ResultIsNumber12 : 数字
>类型别名 :=> 数字
>++A.foo() : 数字
>类型别名 :=> 数字
>A.foo() : 真假
>类型别名 :=> 真假
>A.foo : () => 真假
>A : 类为 A
>foo : () => 真假

var ResultIsNumber13 = foo()++;
>ResultIsNumber13 : 数字
>类型别名 :=> 数字
>foo()++ : 数字
>类型别名 :=> 数字
>foo() : 真假
>类型别名 :=> 真假
>foo : () => 真假

var ResultIsNumber14 = A.foo()++;
>ResultIsNumber14 : 数字
>类型别名 :=> 数字
>A.foo()++ : 数字
>类型别名 :=> 数字
>A.foo() : 真假
>类型别名 :=> 真假
>A.foo : () => 真假
>A : 类为 A
>foo : () => 真假

var ResultIsNumber15 = objA.a++;
>ResultIsNumber15 : 数字
>类型别名 :=> 数字
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 真假
>类型别名 :=> 真假
>objA : A
>a : 真假
>类型别名 :=> 真假

var ResultIsNumber16 = M.n++;
>ResultIsNumber16 : 数字
>类型别名 :=> 数字
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 真假
>类型别名 :=> 真假
>M : 类为 M
>n : 真假
>类型别名 :=> 真假

// miss assignment operators
++true;
>++true : 数字
>类型别名 :=> 数字
>true : 为真
>类型别名 :=> 为真

++BOOLEAN;
>++BOOLEAN : 数字
>类型别名 :=> 数字
>BOOLEAN : 真假
>类型别名 :=> 真假

++foo();
>++foo() : 数字
>类型别名 :=> 数字
>foo() : 真假
>类型别名 :=> 真假
>foo : () => 真假

++objA.a;
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 真假
>类型别名 :=> 真假
>objA : A
>a : 真假
>类型别名 :=> 真假

++M.n;
>++M.n : 数字
>类型别名 :=> 数字
>M.n : 真假
>类型别名 :=> 真假
>M : 类为 M
>n : 真假
>类型别名 :=> 真假

++objA.a, M.n;
>++objA.a, M.n : 真假
>类型别名 :=> 真假
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 真假
>类型别名 :=> 真假
>objA : A
>a : 真假
>类型别名 :=> 真假
>M.n : 真假
>类型别名 :=> 真假
>M : 类为 M
>n : 真假
>类型别名 :=> 真假

true++;
>true++ : 数字
>类型别名 :=> 数字
>true : 为真
>类型别名 :=> 为真

BOOLEAN++;
>BOOLEAN++ : 数字
>类型别名 :=> 数字
>BOOLEAN : 真假
>类型别名 :=> 真假

foo()++;
>foo()++ : 数字
>类型别名 :=> 数字
>foo() : 真假
>类型别名 :=> 真假
>foo : () => 真假

objA.a++;
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 真假
>类型别名 :=> 真假
>objA : A
>a : 真假
>类型别名 :=> 真假

M.n++;
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 真假
>类型别名 :=> 真假
>M : 类为 M
>n : 真假
>类型别名 :=> 真假

objA.a++, M.n++;
>objA.a++, M.n++ : 数字
>类型别名 :=> 数字
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 真假
>类型别名 :=> 真假
>objA : A
>a : 真假
>类型别名 :=> 真假
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 真假
>类型别名 :=> 真假
>M : 类为 M
>n : 真假
>类型别名 :=> 真假

