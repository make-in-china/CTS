=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance.ts ===
// Checking basic subtype relations with construct signatures

module ConstructSignature {
>ConstructSignature : 任意
>类型别名 :=> 任意

    interface Base { // T
>Base : Base

        // M's
        new (x: number): void; // BUG 842221
>x : 数字
>类型别名 :=> 数字

        new (x: number, y: number): number;
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
    }

    // S's
    interface I extends Base {
>I : I
>Base : Base

        // N's
        new (x: number): number; // satisfies subtype for both of base's call signatures
>x : 数字
>类型别名 :=> 数字

        new (x: number, y: number): boolean; // so this one hides the base type member that is identical modulo return types
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
    }

    interface Base2 { // T
>Base2 : Base2

        // M's
        new (x: number): number;
>x : 数字
>类型别名 :=> 数字
    }

    // S's
    interface I2 extends Base2 {
>I2 : I2
>Base2 : Base2

        // N's
        new (x: number): string; // error because return types don't match
>x : 数字
>类型别名 :=> 数字
    }

    // S's
    interface I3 extends Base2 {
>I3 : I3
>Base2 : Base2

        // N's
        new <T>(x: T): string; // ok, adds a new call signature
>T : T
>x : T
>T : T
    }
}

module MemberWithConstructSignature {
>MemberWithConstructSignature : 类为 MemberWithConstructSignature

    interface Base { // T
>Base : Base

        // M's
        a: new (x: number) => void;
>a : 新建 (x: 数字) => 无值
>x : 数字
>类型别名 :=> 数字

        a2: new (x: number, y: number) => void;
>a2 : 新建 (x: 数字, y: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        a3: new <T>(x: T) => void;
>a3 : 新建 <T>(x: T) => 无值
>T : T
>x : T
>T : T
    }

    var b: Base;
>b : Base
>Base : Base

    var r = new b.a(1);
>r : 无值
>类型别名 :=> 无值
>new b.a(1) : 无值
>类型别名 :=> 无值
>b.a : 新建 (x: 数字) => 无值
>b : Base
>a : 新建 (x: 数字) => 无值
>1 : 1

    // S's
    interface I extends Base {
>I : I
>Base : Base

        // N's
        a: new (x: number) => number; // ok because base returns void
>a : 新建 (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

        a2: new (x: number, y: number) => boolean; // ok because base returns void
>a2 : 新建 (x: 数字, y: 数字) => 真假
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        a3: new <T>(x: T) => string; // ok because base returns void
>a3 : 新建 <T>(x: T) => 文字
>T : T
>x : T
>T : T
    }

    interface Base2 { // T
>Base2 : Base2

        // M's
        a: new (x: number) => number;
>a : 新建 (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

        a2: new <T>(x: T) => T;
>a2 : 新建 <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
    }

    // S's
    interface I2 extends Base2 {
>I2 : I2
>Base2 : Base2

        // N's
        a: new (x: number) => string; // error because base returns non-void;
>a : 新建 (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
    }

    // S's
    interface I3 extends Base2 {
>I3 : I3
>Base2 : Base2

        // N's
        a2: new <T>(x: T) => string; // error because base returns non-void;
>a2 : 新建 <T>(x: T) => 文字
>T : T
>x : T
>T : T
    }
}
