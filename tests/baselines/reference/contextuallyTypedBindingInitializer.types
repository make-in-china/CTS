=== tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedBindingInitializer.ts ===
interface Show {
>Show : Show

    show: (x: number) => string;
>show : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
}
function f({ show = v => v.toString() }: Show) {}
>f : ({ show }: Show) => 无值
>show : (x: 数字) => 文字
>v => v.toString() : (v: 数字) => 文字
>v : 数字
>类型别名 :=> 数字
>v.toString() : 文字
>类型别名 :=> 文字
>v.toString : (radix?: 数字) => 文字
>v : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
>Show : Show

function f2({ "show": showRename = v => v.toString() }: Show) {}
>f2 : ({ "show": showRename }: Show) => 无值
>showRename : (x: 数字) => 文字
>v => v.toString() : (v: 数字) => 文字
>v : 数字
>类型别名 :=> 数字
>v.toString() : 文字
>类型别名 :=> 文字
>v.toString : (radix?: 数字) => 文字
>v : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
>Show : Show

function f3({ ["show"]: showRename = v => v.toString() }: Show) {}
>f3 : ({ ["show"]: showRename }: Show) => 无值
>"show" : "show"
>showRename : (x: 数字) => 文字
>v => v.toString() : (v: 数字) => 文字
>v : 数字
>类型别名 :=> 数字
>v.toString() : 文字
>类型别名 :=> 文字
>v.toString : (radix?: 数字) => 文字
>v : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
>Show : Show

interface Nested {
>Nested : Nested

    nested: Show
>nested : Show
>Show : Show
}
function ff({ nested = { show: v => v.toString() } }: Nested) {}
>ff : ({ nested }: Nested) => 无值
>nested : Show
>{ show: v => v.toString() } : { show: (v: 数字) => 文字; }
>show : (v: 数字) => 文字
>v => v.toString() : (v: 数字) => 文字
>v : 数字
>类型别名 :=> 数字
>v.toString() : 文字
>类型别名 :=> 文字
>v.toString : (radix?: 数字) => 文字
>v : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
>Nested : Nested

interface Tuples {
>Tuples : Tuples

    prop: [string, number];
>prop : [文字, 数字]
}
function g({ prop = ["hello", 1234] }: Tuples) {}
>g : ({ prop }: Tuples) => 无值
>prop : [文字, 数字]
>["hello", 1234] : [文字, 数字]
>"hello" : "hello"
>1234 : 1234
>Tuples : Tuples

interface StringUnion {
>StringUnion : StringUnion

    prop: "foo" | "bar";
>prop : "foo" | "bar"
}
function h({ prop = "foo" }: StringUnion) {}
>h : ({ prop }: StringUnion) => 无值
>prop : "foo" | "bar"
>"foo" : "foo"
>StringUnion : StringUnion

interface StringIdentity {
>StringIdentity : StringIdentity

    stringIdentity(s: string): string;
>stringIdentity : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
}
let { stringIdentity: id = arg => arg }: StringIdentity = { stringIdentity: x => x};
>stringIdentity : 任意
>类型别名 :=> 任意
>id : (s: 文字) => 文字
>arg => arg : (arg: 文字) => 文字
>arg : 文字
>类型别名 :=> 文字
>arg : 文字
>类型别名 :=> 文字
>StringIdentity : StringIdentity
>{ stringIdentity: x => x} : { stringIdentity: (x: 文字) => 文字; }
>stringIdentity : (x: 文字) => 文字
>x => x : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字



