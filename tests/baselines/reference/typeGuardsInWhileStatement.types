=== tests/cases/conformance/expressions/typeGuards/typeGuardsInWhileStatement.ts ===
let cond: boolean;
>cond : boolean
>类型别名 :=> 真假

function a(x: string | number) {
>a : (x: string | number) => void
>x : string | number

    while (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        x; // string
>x : string
>类型别名 :=> 文字

        x = undefined;
>x = undefined : undefined
>类型别名 :=> 未定
>x : string | number
>undefined : undefined
>类型别名 :=> 未定
    }
    x; // number
>x : number
>类型别名 :=> 数字
}
function b(x: string | number) {
>b : (x: string | number) => void
>x : string | number

    while (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        if (cond) continue;
>cond : boolean
>类型别名 :=> 真假

        x; // string
>x : string
>类型别名 :=> 文字

        x = undefined;
>x = undefined : undefined
>类型别名 :=> 未定
>x : string | number
>undefined : undefined
>类型别名 :=> 未定
    }
    x; // number
>x : number
>类型别名 :=> 数字
}
function c(x: string | number) {
>c : (x: string | number) => void
>x : string | number

    while (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        if (cond) break;
>cond : boolean
>类型别名 :=> 真假

        x; // string
>x : string
>类型别名 :=> 文字

        x = undefined;
>x = undefined : undefined
>类型别名 :=> 未定
>x : string | number
>undefined : undefined
>类型别名 :=> 未定
    }
    x; // string | number
>x : string | number
}

