=== tests/cases/compiler/commentsInterface.ts ===
/** this is interface 1*/
interface i1 {
>i1 : i1
}
var i1_i: i1;
>i1_i : i1
>i1 : i1

interface nc_i1 {
>nc_i1 : nc_i1
}
var nc_i1_i: nc_i1;
>nc_i1_i : nc_i1
>nc_i1 : nc_i1

/** this is interface 2 with memebers*/
interface i2 {
>i2 : i2

    /** this is x*/
    x: number;
>x : 数字
>类型别名 :=> 数字

    /** this is foo*/
    foo: (/**param help*/b: number) => string;
>foo : (b: 数字) => 文字
>b : 数字
>类型别名 :=> 数字

    /** this is indexer*/
    [/**string param*/i: string]: any;
>i : 文字
>类型别名 :=> 文字

    /**new method*/
    new (/** param*/i: i1);
>i : i1
>i1 : i1

    nc_x: number;
>nc_x : 数字
>类型别名 :=> 数字

    nc_foo: (b: number) => string;
>nc_foo : (b: 数字) => 文字
>b : 数字
>类型别名 :=> 数字

    [i: number]: number;
>i : 数字
>类型别名 :=> 数字

    /** this is call signature*/
    (/**paramhelp a*/a: number,/**paramhelp b*/ b: number) : number;
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字

    /** this is fnfoo*/
    fnfoo(/**param help*/b: number): string;
>fnfoo : (b: 数字) => 文字
>b : 数字
>类型别名 :=> 数字

    nc_fnfoo(b: number): string;
>nc_fnfoo : (b: 数字) => 文字
>b : 数字
>类型别名 :=> 数字

    // nc_y
    nc_y: number;
>nc_y : 数字
>类型别名 :=> 数字
}
var i2_i: i2;
>i2_i : i2
>i2 : i2

var i2_i_x = i2_i.x;
>i2_i_x : 数字
>类型别名 :=> 数字
>i2_i.x : 数字
>类型别名 :=> 数字
>i2_i : i2
>x : 数字
>类型别名 :=> 数字

var i2_i_foo = i2_i.foo;
>i2_i_foo : (b: 数字) => 文字
>i2_i.foo : (b: 数字) => 文字
>i2_i : i2
>foo : (b: 数字) => 文字

var i2_i_foo_r = i2_i.foo(30);
>i2_i_foo_r : 文字
>类型别名 :=> 文字
>i2_i.foo(30) : 文字
>类型别名 :=> 文字
>i2_i.foo : (b: 数字) => 文字
>i2_i : i2
>foo : (b: 数字) => 文字
>30 : 30

var i2_i_i2_si = i2_i["hello"];
>i2_i_i2_si : 任意
>类型别名 :=> 任意
>i2_i["hello"] : 任意
>类型别名 :=> 任意
>i2_i : i2
>"hello" : "hello"

var i2_i_i2_ii = i2_i[30];
>i2_i_i2_ii : 数字
>类型别名 :=> 数字
>i2_i[30] : 数字
>类型别名 :=> 数字
>i2_i : i2
>30 : 30

var i2_i_n = new i2_i(i1_i);
>i2_i_n : 任意
>类型别名 :=> 任意
>new i2_i(i1_i) : 任意
>类型别名 :=> 任意
>i2_i : i2
>i1_i : i1

var i2_i_nc_x = i2_i.nc_x;
>i2_i_nc_x : 数字
>类型别名 :=> 数字
>i2_i.nc_x : 数字
>类型别名 :=> 数字
>i2_i : i2
>nc_x : 数字
>类型别名 :=> 数字

var i2_i_nc_foo = i2_i.nc_foo;
>i2_i_nc_foo : (b: 数字) => 文字
>i2_i.nc_foo : (b: 数字) => 文字
>i2_i : i2
>nc_foo : (b: 数字) => 文字

var i2_i_nc_foo_r = i2_i.nc_foo(30);
>i2_i_nc_foo_r : 文字
>类型别名 :=> 文字
>i2_i.nc_foo(30) : 文字
>类型别名 :=> 文字
>i2_i.nc_foo : (b: 数字) => 文字
>i2_i : i2
>nc_foo : (b: 数字) => 文字
>30 : 30

var i2_i_r = i2_i(10, 20);
>i2_i_r : 数字
>类型别名 :=> 数字
>i2_i(10, 20) : 数字
>类型别名 :=> 数字
>i2_i : i2
>10 : 10
>20 : 20

var i2_i_fnfoo = i2_i.fnfoo;
>i2_i_fnfoo : (b: 数字) => 文字
>i2_i.fnfoo : (b: 数字) => 文字
>i2_i : i2
>fnfoo : (b: 数字) => 文字

var i2_i_fnfoo_r = i2_i.fnfoo(10);
>i2_i_fnfoo_r : 文字
>类型别名 :=> 文字
>i2_i.fnfoo(10) : 文字
>类型别名 :=> 文字
>i2_i.fnfoo : (b: 数字) => 文字
>i2_i : i2
>fnfoo : (b: 数字) => 文字
>10 : 10

var i2_i_nc_fnfoo = i2_i.nc_fnfoo;
>i2_i_nc_fnfoo : (b: 数字) => 文字
>i2_i.nc_fnfoo : (b: 数字) => 文字
>i2_i : i2
>nc_fnfoo : (b: 数字) => 文字

var i2_i_nc_fnfoo_r = i2_i.nc_fnfoo(10);
>i2_i_nc_fnfoo_r : 文字
>类型别名 :=> 文字
>i2_i.nc_fnfoo(10) : 文字
>类型别名 :=> 文字
>i2_i.nc_fnfoo : (b: 数字) => 文字
>i2_i : i2
>nc_fnfoo : (b: 数字) => 文字
>10 : 10

interface i3 {
>i3 : i3

    /** Comment i3 x*/
    x: number;
>x : 数字
>类型别名 :=> 数字

    /** Function i3 f*/
    f(/**number parameter*/a: number): string;
>f : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字

    /** i3 l*/
    l: (/**comment i3 l b*/b: number) => string;
>l : (b: 数字) => 文字
>b : 数字
>类型别名 :=> 数字

    nc_x: number;
>nc_x : 数字
>类型别名 :=> 数字

    nc_f(a: number): string;
>nc_f : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字

    nc_l: (b: number) => string;
>nc_l : (b: 数字) => 文字
>b : 数字
>类型别名 :=> 数字
}
var i3_i: i3;
>i3_i : i3
>i3 : i3

i3_i = {
>i3_i = {    f: /**own f*/ (/**i3_i a*/a: number) => "Hello" + a,    l: this.f,    /** own x*/    x: this.f(10),    nc_x: this.l(this.x),    nc_f: this.f,    nc_l: this.l} : { f: (a: 数字) => 文字; l: 任意; x: 任意; nc_x: 任意; nc_f: 任意; nc_l: 任意; }
>i3_i : i3
>{    f: /**own f*/ (/**i3_i a*/a: number) => "Hello" + a,    l: this.f,    /** own x*/    x: this.f(10),    nc_x: this.l(this.x),    nc_f: this.f,    nc_l: this.l} : { f: (a: 数字) => 文字; l: 任意; x: 任意; nc_x: 任意; nc_f: 任意; nc_l: 任意; }

    f: /**own f*/ (/**i3_i a*/a: number) => "Hello" + a,
>f : (a: 数字) => 文字
>(/**i3_i a*/a: number) => "Hello" + a : (a: 数字) => 文字
>a : 数字
>类型别名 :=> 数字
>"Hello" + a : 文字
>类型别名 :=> 文字
>"Hello" : "Hello"
>a : 数字
>类型别名 :=> 数字

    l: this.f,
>l : 任意
>类型别名 :=> 任意
>this.f : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>f : 任意
>类型别名 :=> 任意

    /** own x*/
    x: this.f(10),
>x : 任意
>类型别名 :=> 任意
>this.f(10) : 任意
>类型别名 :=> 任意
>this.f : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>f : 任意
>类型别名 :=> 任意
>10 : 10

    nc_x: this.l(this.x),
>nc_x : 任意
>类型别名 :=> 任意
>this.l(this.x) : 任意
>类型别名 :=> 任意
>this.l : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>l : 任意
>类型别名 :=> 任意
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    nc_f: this.f,
>nc_f : 任意
>类型别名 :=> 任意
>this.f : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>f : 任意
>类型别名 :=> 任意

    nc_l: this.l
>nc_l : 任意
>类型别名 :=> 任意
>this.l : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>l : 任意
>类型别名 :=> 任意

};
i3_i.f(10);
>i3_i.f(10) : 文字
>类型别名 :=> 文字
>i3_i.f : (a: 数字) => 文字
>i3_i : i3
>f : (a: 数字) => 文字
>10 : 10

i3_i.l(10);
>i3_i.l(10) : 文字
>类型别名 :=> 文字
>i3_i.l : (b: 数字) => 文字
>i3_i : i3
>l : (b: 数字) => 文字
>10 : 10

i3_i.nc_f(10);
>i3_i.nc_f(10) : 文字
>类型别名 :=> 文字
>i3_i.nc_f : (a: 数字) => 文字
>i3_i : i3
>nc_f : (a: 数字) => 文字
>10 : 10

i3_i.nc_l(10);
>i3_i.nc_l(10) : 文字
>类型别名 :=> 文字
>i3_i.nc_l : (b: 数字) => 文字
>i3_i : i3
>nc_l : (b: 数字) => 文字
>10 : 10

