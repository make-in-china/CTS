=== tests/cases/conformance/expressions/typeAssertions/typeAssertions.ts ===
// Function call whose argument is a 1 arg generic function call with explicit type arguments
function fn1<T>(t: T) { }
>fn1 : <T>(t: T) => 无值
>T : T
>t : T
>T : T

function fn2(t: any) { }
>fn2 : (t: 任意) => 无值
>t : 任意
>类型别名 :=> 任意

fn1(fn2<string>(4)); // Error
>fn1(fn2<string>(4)) : 无值
>类型别名 :=> 无值
>fn1 : <T>(t: T) => 无值
>fn2<string>(4) : 无值
>类型别名 :=> 无值
>fn2 : (t: 任意) => 无值
>4 : 4

var a: any;
>a : 任意
>类型别名 :=> 任意

var s: string;
>s : 文字
>类型别名 :=> 文字

// Type assertion of non - unary expression
var a = <any>"" + 4;
>a : 任意
>类型别名 :=> 任意
><any>"" + 4 : 任意
>类型别名 :=> 任意
><any>"" : 任意
>类型别名 :=> 任意
>"" : ""
>4 : 4

var s = "" + <any>4;
>s : 文字
>类型别名 :=> 文字
>"" + <any>4 : 文字
>类型别名 :=> 文字
>"" : ""
><any>4 : 任意
>类型别名 :=> 任意
>4 : 4

class SomeBase {
>SomeBase : SomeBase

    private p;
>p : 任意
>类型别名 :=> 任意
}
class SomeDerived extends SomeBase {
>SomeDerived : SomeDerived
>SomeBase : SomeBase

    private x;
>x : 任意
>类型别名 :=> 任意
}
class SomeOther {
>SomeOther : SomeOther

    private q;
>q : 任意
>类型别名 :=> 任意
}

// Type assertion should check for assignability in either direction
var someBase = new SomeBase();
>someBase : SomeBase
>new SomeBase() : SomeBase
>SomeBase : 类为 SomeBase

var someDerived = new SomeDerived();
>someDerived : SomeDerived
>new SomeDerived() : SomeDerived
>SomeDerived : 类为 SomeDerived

var someOther = new SomeOther();
>someOther : SomeOther
>new SomeOther() : SomeOther
>SomeOther : 类为 SomeOther

someBase = <SomeBase>someDerived;
>someBase = <SomeBase>someDerived : SomeBase
>someBase : SomeBase
><SomeBase>someDerived : SomeBase
>SomeBase : SomeBase
>someDerived : SomeDerived

someBase = <SomeBase>someBase;
>someBase = <SomeBase>someBase : SomeBase
>someBase : SomeBase
><SomeBase>someBase : SomeBase
>SomeBase : SomeBase
>someBase : SomeBase

someBase = <SomeBase>someOther; // Error
>someBase = <SomeBase>someOther : SomeBase
>someBase : SomeBase
><SomeBase>someOther : SomeBase
>SomeBase : SomeBase
>someOther : SomeOther

someDerived = <SomeDerived>someDerived;
>someDerived = <SomeDerived>someDerived : SomeDerived
>someDerived : SomeDerived
><SomeDerived>someDerived : SomeDerived
>SomeDerived : SomeDerived
>someDerived : SomeDerived

someDerived = <SomeDerived>someBase;
>someDerived = <SomeDerived>someBase : SomeDerived
>someDerived : SomeDerived
><SomeDerived>someBase : SomeDerived
>SomeDerived : SomeDerived
>someBase : SomeBase

someDerived = <SomeDerived>someOther; // Error
>someDerived = <SomeDerived>someOther : SomeDerived
>someDerived : SomeDerived
><SomeDerived>someOther : SomeDerived
>SomeDerived : SomeDerived
>someOther : SomeOther

someOther = <SomeOther>someDerived; // Error
>someOther = <SomeOther>someDerived : SomeOther
>someOther : SomeOther
><SomeOther>someDerived : SomeOther
>SomeOther : SomeOther
>someDerived : SomeDerived

someOther = <SomeOther>someBase; // Error
>someOther = <SomeOther>someBase : SomeOther
>someOther : SomeOther
><SomeOther>someBase : SomeOther
>SomeOther : SomeOther
>someBase : SomeBase

someOther = <SomeOther>someOther;
>someOther = <SomeOther>someOther : SomeOther
>someOther : SomeOther
><SomeOther>someOther : SomeOther
>SomeOther : SomeOther
>someOther : SomeOther

// Type assertion cannot be a type-predicate type
var numOrStr: number | string;
>numOrStr : 文字 | 数字

var str: string;
>str : 文字
>类型别名 :=> 文字

if(<numOrStr is string>(numOrStr === undefined)) { // Error
><numOrStr is : 任意
>类型别名 :=> 任意
>numOrStr : No type information available!
>is : 任意
>类型别名 :=> 任意
>string>(numOrStr === undefined) : 真假
>类型别名 :=> 真假
>string : 任意
>类型别名 :=> 任意
>(numOrStr === undefined) : 真假
>类型别名 :=> 真假
>numOrStr === undefined : 真假
>类型别名 :=> 真假
>numOrStr : 文字 | 数字
>undefined : 未定
>类型别名 :=> 未定

	str = numOrStr; // Error, no narrowing occurred
>str = numOrStr : 文字 | 数字
>str : 文字
>类型别名 :=> 文字
>numOrStr : 文字 | 数字
}

if((numOrStr === undefined) as numOrStr is string) { // Error
>(numOrStr === undefined) as numOrStr : 任意
>类型别名 :=> 任意
>(numOrStr === undefined) : 真假
>类型别名 :=> 真假
>numOrStr === undefined : 真假
>类型别名 :=> 真假
>numOrStr : 文字 | 数字
>undefined : 未定
>类型别名 :=> 未定
>numOrStr : No type information available!
>is : 任意
>类型别名 :=> 任意
>string : 任意
>类型别名 :=> 任意
}


