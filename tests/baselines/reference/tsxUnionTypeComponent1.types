=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : 类为 React

interface ComponentProps {
>ComponentProps : ComponentProps

    AnyComponent: React.StatelessComponent<any> | React.ComponentClass<any>;
>AnyComponent : React.StatelessComponent<任意> | React.ComponentClass<任意>
>React : 任意
>类型别名 :=> 任意
>StatelessComponent : React.StatelessComponent<P>
>React : 任意
>类型别名 :=> 任意
>ComponentClass : React.ComponentClass<P>
}

class MyComponent extends React.Component<ComponentProps, {}> {
>MyComponent : MyComponent
>React.Component : React.Component<ComponentProps, {}>
>React : 类为 React
>Component : 类为 React.Component
>ComponentProps : ComponentProps

    render() {
>render : () => JSX.Element

        const { AnyComponent } = this.props;
>AnyComponent : React.StatelessComponent<任意> | React.ComponentClass<任意>
>this.props : ComponentProps & { children?: React.ReactNode; }
>this : 本体
>props : ComponentProps & { children?: React.ReactNode; }

        return (<AnyComponent />);
>(<AnyComponent />) : JSX.Element
><AnyComponent /> : JSX.Element
>AnyComponent : React.StatelessComponent<任意> | React.ComponentClass<任意>
    }
}

// Stateless Component As Props
<MyComponent AnyComponent={() => <button>test</button>}/>
><MyComponent AnyComponent={() => <button>test</button>}/> : JSX.Element
>MyComponent : 类为 MyComponent
>AnyComponent : () => JSX.Element
>() => <button>test</button> : () => JSX.Element
><button>test</button> : JSX.Element
>button : 任意
>类型别名 :=> 任意
>button : 任意
>类型别名 :=> 任意

// Component Class as Props
class MyButtonComponent extends React.Component<{},{}> {
>MyButtonComponent : MyButtonComponent
>React.Component : React.Component<{}, {}>
>React : 类为 React
>Component : 类为 React.Component
}

<MyComponent AnyComponent={MyButtonComponent} />
><MyComponent AnyComponent={MyButtonComponent} /> : JSX.Element
>MyComponent : 类为 MyComponent
>AnyComponent : 类为 MyButtonComponent
>MyButtonComponent : 类为 MyButtonComponent


