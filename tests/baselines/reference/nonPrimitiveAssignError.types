=== tests/cases/conformance/types/nonPrimitive/nonPrimitiveAssignError.ts ===
var x = {};
>x : {}
>{} : {}

var y = {foo: "bar"};
>y : { foo: 文字; }
>{foo: "bar"} : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字
>"bar" : "bar"

var a: object;
>a : 实例
>类型别名 :=> 实例

x = a;
>x = a : 实例
>类型别名 :=> 实例
>x : {}
>a : 实例
>类型别名 :=> 实例

y = a; // expect error
>y = a : 实例
>类型别名 :=> 实例
>y : { foo: 文字; }
>a : 实例
>类型别名 :=> 实例

a = x;
>a = x : {}
>a : 实例
>类型别名 :=> 实例
>x : {}

a = y;
>a = y : { foo: 文字; }
>a : 实例
>类型别名 :=> 实例
>y : { foo: 文字; }

var n = 123;
>n : 数字
>类型别名 :=> 数字
>123 : 123

var b = true;
>b : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

var s = "fooo";
>s : 文字
>类型别名 :=> 文字
>"fooo" : "fooo"

a = n; // expect error
>a = n : 数字
>类型别名 :=> 数字
>a : 实例
>类型别名 :=> 实例
>n : 数字
>类型别名 :=> 数字

a = b; // expect error
>a = b : 为真
>类型别名 :=> 为真
>a : 实例
>类型别名 :=> 实例
>b : 为真
>类型别名 :=> 为真

a = s; // expect error
>a = s : 文字
>类型别名 :=> 文字
>a : 实例
>类型别名 :=> 实例
>s : 文字
>类型别名 :=> 文字

n = a; // expect error
>n = a : 实例
>类型别名 :=> 实例
>n : 数字
>类型别名 :=> 数字
>a : 实例
>类型别名 :=> 实例

b = a; // expect error
>b = a : 实例
>类型别名 :=> 实例
>b : 真假
>类型别名 :=> 真假
>a : 实例
>类型别名 :=> 实例

s = a; // expect error
>s = a : 实例
>类型别名 :=> 实例
>s : 文字
>类型别名 :=> 文字
>a : 实例
>类型别名 :=> 实例

var numObj: Number = 123;
>numObj : Number
>Number : Number
>123 : 123

var boolObj: Boolean = true;
>boolObj : Boolean
>Boolean : Boolean
>true : 为真
>类型别名 :=> 为真

var strObj: String = "string";
>strObj : String
>String : String
>"string" : "string"

a = numObj; // ok
>a = numObj : Number
>a : 实例
>类型别名 :=> 实例
>numObj : Number

a = boolObj; // ok
>a = boolObj : Boolean
>a : 实例
>类型别名 :=> 实例
>boolObj : Boolean

a = strObj; // ok
>a = strObj : String
>a : 实例
>类型别名 :=> 实例
>strObj : String

