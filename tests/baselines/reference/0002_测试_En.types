=== /a/node_modules/@types/testEn/index.d.ts ===
export declare type foo = {
>foo : foo

  bar: number | null;
>bar : 数字 | 空值
>null : 空值
>类型别名 :=> 空值

  baz: string;
>baz : 文字
>类型别名 :=> 文字

  nested: {
>nested : { a: 数字; b: 文字 | 空值; }

    a: number;
>a : 数字
>类型别名 :=> 数字

    b: string | null;
>b : 文字 | 空值
>null : 空值
>类型别名 :=> 空值
  }
};

export declare type bar = {
>bar : bar

  elem1: number | null;
>elem1 : 数字 | 空值
>null : 空值
>类型别名 :=> 空值

  elem2: foo | null;
>elem2 : foo | 空值
>foo : foo
>null : 空值
>类型别名 :=> 空值

};

=== /a/测试_2_en.ts ===
import { foo ,bar } from "testEn"
>foo : 任意
>类型别名 :=> 任意
>bar : 任意
>类型别名 :=> 任意

const aFoo: foo = { bar: 3, baz: "b", nested: { a: 1, b: "y" } };
>aFoo : foo
>foo : foo
>{ bar: 3, baz: "b", nested: { a: 1, b: "y" } } : { bar: 数字; baz: 文字; nested: { a: 数字; b: 文字; }; }
>bar : 数字
>类型别名 :=> 数字
>3 : 3
>baz : 文字
>类型别名 :=> 文字
>"b" : "b"
>nested : { a: 数字; b: 文字; }
>{ a: 1, b: "y" } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>"y" : "y"

if (aFoo.bar && aFoo.nested.b) {
>aFoo.bar && aFoo.nested.b : 文字 | 0 | 空值
>aFoo.bar : 数字 | 空值
>aFoo : foo
>bar : 数字 | 空值
>aFoo.nested.b : 文字 | 空值
>aFoo.nested : { a: 数字; b: 文字 | 空值; }
>aFoo : foo
>nested : { a: 数字; b: 文字 | 空值; }
>b : 文字 | 空值

  const { bar, baz, nested: { a, b: text } } = aFoo;
>bar : 数字
>类型别名 :=> 数字
>baz : 文字
>类型别名 :=> 文字
>nested : 任意
>类型别名 :=> 任意
>a : 数字
>类型别名 :=> 数字
>b : 任意
>类型别名 :=> 任意
>text : 文字
>类型别名 :=> 文字
>aFoo : foo

  const right: number = aFoo.bar;
>right : 数字
>类型别名 :=> 数字
>aFoo.bar : 数字
>类型别名 :=> 数字
>aFoo : foo
>bar : 数字
>类型别名 :=> 数字

  const wrong: number = bar;
>wrong : 数字
>类型别名 :=> 数字
>bar : 数字
>类型别名 :=> 数字

  const another: string = baz;
>another : 文字
>类型别名 :=> 文字
>baz : 文字
>类型别名 :=> 文字

  const aAgain: number = a;
>aAgain : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

  const bAgain: string = text;
>bAgain : 文字
>类型别名 :=> 文字
>text : 文字
>类型别名 :=> 文字
}


const bBar = { elem1: 7, elem2: aFoo };
>bBar : { elem1: 数字; elem2: foo; }
>{ elem1: 7, elem2: aFoo } : { elem1: 数字; elem2: foo; }
>elem1 : 数字
>类型别名 :=> 数字
>7 : 7
>elem2 : foo
>aFoo : foo

if (bBar.elem2 && bBar.elem2.bar && bBar.elem2.nested.b) {
>bBar.elem2 && bBar.elem2.bar && bBar.elem2.nested.b : 文字 | 0 | 空值
>bBar.elem2 && bBar.elem2.bar : 数字 | 空值
>bBar.elem2 : foo
>bBar : { elem1: 数字; elem2: foo; }
>elem2 : foo
>bBar.elem2.bar : 数字 | 空值
>bBar.elem2 : foo
>bBar : { elem1: 数字; elem2: foo; }
>elem2 : foo
>bar : 数字 | 空值
>bBar.elem2.nested.b : 文字 | 空值
>bBar.elem2.nested : { a: 数字; b: 文字 | 空值; }
>bBar.elem2 : foo
>bBar : { elem1: 数字; elem2: foo; }
>elem2 : foo
>nested : { a: 数字; b: 文字 | 空值; }
>b : 文字 | 空值

  const { bar, baz, nested: { a, b: text } } = bBar.elem2;
>bar : 数字
>类型别名 :=> 数字
>baz : 文字
>类型别名 :=> 文字
>nested : 任意
>类型别名 :=> 任意
>a : 数字
>类型别名 :=> 数字
>b : 任意
>类型别名 :=> 任意
>text : 文字
>类型别名 :=> 文字
>bBar.elem2 : foo
>bBar : { elem1: 数字; elem2: foo; }
>elem2 : foo

  const right: number = bBar.elem2.bar;
>right : 数字
>类型别名 :=> 数字
>bBar.elem2.bar : 数字
>类型别名 :=> 数字
>bBar.elem2 : foo
>bBar : { elem1: 数字; elem2: foo; }
>elem2 : foo
>bar : 数字
>类型别名 :=> 数字

  const wrong: number = bar;
>wrong : 数字
>类型别名 :=> 数字
>bar : 数字
>类型别名 :=> 数字

  const another: string = baz;
>another : 文字
>类型别名 :=> 文字
>baz : 文字
>类型别名 :=> 文字

  const aAgain: number = a;
>aAgain : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

  const bAgain: string = text;
>bAgain : 文字
>类型别名 :=> 文字
>text : 文字
>类型别名 :=> 文字
}

