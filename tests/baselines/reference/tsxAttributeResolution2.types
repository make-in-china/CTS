=== tests/cases/conformance/jsx/file.tsx ===
declare module JSX {
>JSX : 任意
>类型别名 :=> 任意

	interface Element { }
>Element : Element

	interface IntrinsicElements {
>IntrinsicElements : IntrinsicElements

		test1: Attribs1;
>test1 : Attribs1
>Attribs1 : Attribs1
	}
}
interface Attribs1 {
>Attribs1 : Attribs1

	c1?: (x: string) => void;
>c1 : (x: 文字) => 无值
>x : 文字
>类型别名 :=> 文字
}

// OK
<test1 c1={(x) => x.length} />; // OK
><test1 c1={(x) => x.length} /> : JSX.Element
>test1 : 任意
>类型别名 :=> 任意
>c1 : (x: 文字) => 数字
>(x) => x.length : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

<test1 data-c1={(x) => x.leng} />; // OK
><test1 data-c1={(x) => x.leng} /> : JSX.Element
>test1 : 任意
>类型别名 :=> 任意
>data-c1 : (x: 任意) => 任意
>(x) => x.leng : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x.leng : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>leng : 任意
>类型别名 :=> 任意


// Errors
<test1 c1={(x) => x.leng} />; // Error, no leng on 'string'
><test1 c1={(x) => x.leng} /> : JSX.Element
>test1 : 任意
>类型别名 :=> 任意
>c1 : (x: 文字) => 任意
>(x) => x.leng : (x: 文字) => 任意
>x : 文字
>类型别名 :=> 文字
>x.leng : 任意
>类型别名 :=> 任意
>x : 文字
>类型别名 :=> 文字
>leng : 任意
>类型别名 :=> 任意

