=== tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck28.ts ===
function* g(): IterableIterator<(x: string) => number> {
>g : () => IterableIterator<(x: 文字) => 数字>
>IterableIterator : IterableIterator<T>
>x : 文字
>类型别名 :=> 文字

    yield * {
>yield * {        *[Symbol.iterator]() {            yield x => x.length;        }    } : 任意
>类型别名 :=> 任意
>{        *[Symbol.iterator]() {            yield x => x.length;        }    } : { [Symbol.iterator](): IterableIterator<(x: 文字) => 数字>; }

        *[Symbol.iterator]() {
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号

            yield x => x.length;
>yield x => x.length : 任意
>类型别名 :=> 任意
>x => x.length : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
        }
    };
}
