=== tests/cases/compiler/matchReturnTypeInAllBranches.ts ===
// Represents a monster who enjoys ice cream
class IceCreamMonster {
>IceCreamMonster : IceCreamMonster

    private iceCreamFlavor: string;
>iceCreamFlavor : 文字
>类型别名 :=> 文字

    private iceCreamRemaining: number;
>iceCreamRemaining : 数字
>类型别名 :=> 数字

    private wantsSprinkles: boolean;
>wantsSprinkles : 真假
>类型别名 :=> 真假

    private soundsWhenEating: string;
>soundsWhenEating : 文字
>类型别名 :=> 文字

    public name: string;
>name : 文字
>类型别名 :=> 文字

    constructor(iceCreamFlavor: string, wantsSprinkles: boolean, soundsWhenEating: string, name: string) {
>iceCreamFlavor : 文字
>类型别名 :=> 文字
>wantsSprinkles : 真假
>类型别名 :=> 真假
>soundsWhenEating : 文字
>类型别名 :=> 文字
>name : 文字
>类型别名 :=> 文字

        this.iceCreamFlavor = iceCreamFlavor;
>this.iceCreamFlavor = iceCreamFlavor : 文字
>类型别名 :=> 文字
>this.iceCreamFlavor : 文字
>类型别名 :=> 文字
>this : 本体
>iceCreamFlavor : 文字
>类型别名 :=> 文字
>iceCreamFlavor : 文字
>类型别名 :=> 文字

        this.iceCreamRemaining = 100;
>this.iceCreamRemaining = 100 : 100
>this.iceCreamRemaining : 数字
>类型别名 :=> 数字
>this : 本体
>iceCreamRemaining : 数字
>类型别名 :=> 数字
>100 : 100

        this.wantsSprinkles = wantsSprinkles;
>this.wantsSprinkles = wantsSprinkles : 真假
>类型别名 :=> 真假
>this.wantsSprinkles : 真假
>类型别名 :=> 真假
>this : 本体
>wantsSprinkles : 真假
>类型别名 :=> 真假
>wantsSprinkles : 真假
>类型别名 :=> 真假

        this.soundsWhenEating = soundsWhenEating;
>this.soundsWhenEating = soundsWhenEating : 文字
>类型别名 :=> 文字
>this.soundsWhenEating : 文字
>类型别名 :=> 文字
>this : 本体
>soundsWhenEating : 文字
>类型别名 :=> 文字
>soundsWhenEating : 文字
>类型别名 :=> 文字

        this.name = name;
>this.name = name : 文字
>类型别名 :=> 文字
>this.name : 文字
>类型别名 :=> 文字
>this : 本体
>name : 文字
>类型别名 :=> 文字
>name : 文字
>类型别名 :=> 文字
    }
    /**
* Tells the IceCreamMonster to eat their ice cre    am!    
*
* @param {number} amount The amount of ice cream to e    at.
* @return {boolean} True if ice cream remains, false if there is no more ice cream le    ft.
*/
    public eatIceCream(amount: number): boolean {
>eatIceCream : (amount: 数字) => 真假
>amount : 数字
>类型别名 :=> 数字

        this.iceCreamRemaining -= amount;
>this.iceCreamRemaining -= amount : 数字
>类型别名 :=> 数字
>this.iceCreamRemaining : 数字
>类型别名 :=> 数字
>this : 本体
>iceCreamRemaining : 数字
>类型别名 :=> 数字
>amount : 数字
>类型别名 :=> 数字

        if (this.iceCreamRemaining <= 0)
>this.iceCreamRemaining <= 0 : 真假
>类型别名 :=> 真假
>this.iceCreamRemaining : 数字
>类型别名 :=> 数字
>this : 本体
>iceCreamRemaining : 数字
>类型别名 :=> 数字
>0 : 0
        {
            this.iceCreamRemaining = 0;
>this.iceCreamRemaining = 0 : 0
>this.iceCreamRemaining : 数字
>类型别名 :=> 数字
>this : 本体
>iceCreamRemaining : 数字
>类型别名 :=> 数字
>0 : 0

            return false;
>false : 为假
>类型别名 :=> 为假
        }
        else
        {
            return 12345;
>12345 : 12345
        }
    }
}
var cookieMonster: IceCreamMonster;
>cookieMonster : IceCreamMonster
>IceCreamMonster : IceCreamMonster

cookieMonster = new IceCreamMonster("Chocolate Chip", false, "COOOOOKIE", "Cookie Monster");
>cookieMonster = new IceCreamMonster("Chocolate Chip", false, "COOOOOKIE", "Cookie Monster") : IceCreamMonster
>cookieMonster : IceCreamMonster
>new IceCreamMonster("Chocolate Chip", false, "COOOOOKIE", "Cookie Monster") : IceCreamMonster
>IceCreamMonster : 类为 IceCreamMonster
>"Chocolate Chip" : "Chocolate Chip"
>false : 为假
>类型别名 :=> 为假
>"COOOOOKIE" : "COOOOOKIE"
>"Cookie Monster" : "Cookie Monster"

