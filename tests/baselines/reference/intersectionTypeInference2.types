=== tests/cases/conformance/types/intersection/intersectionTypeInference2.ts ===
declare function f<T>(x: { prop: T }): T;
>f : <T>(x: { prop: T; }) => T
>T : T
>x : { prop: T; }
>prop : T
>T : T
>T : T

declare const a: { prop: string } & { prop: number };
>a : { prop: 文字; } & { prop: 数字; }
>prop : 文字
>类型别名 :=> 文字
>prop : 数字
>类型别名 :=> 数字

declare const b: { prop: string & number };
>b : { prop: 文字 & 数字; }
>prop : 文字 & 数字

f(a);  // string & number
>f(a) : 文字 & 数字
>f : <T>(x: { prop: T; }) => T
>a : { prop: 文字; } & { prop: 数字; }

f(b);  // string & number
>f(b) : 文字 & 数字
>f : <T>(x: { prop: T; }) => T
>b : { prop: 文字 & 数字; }

// Repro from #18354

declare function f2<T, Key extends keyof T>(obj: {[K in keyof T]: T[K]}, key: Key): T[Key];
>f2 : <T, Key 扩展 键集 T>(obj: { [K 位于 键集 T]: T[K]; }, key: Key) => T[Key]
>T : T
>Key : Key
>T : T
>obj : { [K 位于 键集 T]: T[K]; }
>K : K
>T : T
>T : T
>K : K
>key : Key
>Key : Key
>T : T
>Key : Key

declare const obj: { a: string } & { b: string };
>obj : { a: 文字; } & { b: 文字; }
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字

f2(obj, 'a');
>f2(obj, 'a') : 文字
>类型别名 :=> 文字
>f2 : <T, Key 扩展 键集 T>(obj: { [K 位于 键集 T]: T[K]; }, key: Key) => T[Key]
>obj : { a: 文字; } & { b: 文字; }
>'a' : "a"

f2(obj, 'b');
>f2(obj, 'b') : 文字
>类型别名 :=> 文字
>f2 : <T, Key 扩展 键集 T>(obj: { [K 位于 键集 T]: T[K]; }, key: Key) => T[Key]
>obj : { a: 文字; } & { b: 文字; }
>'b' : "b"

