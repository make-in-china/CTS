=== tests/cases/compiler/aliasUsageInFunctionExpression_main.ts ===
import Backbone = require("./aliasUsageInFunctionExpression_backbone");
>Backbone : 类为 Backbone

import moduleA = require("./aliasUsageInFunctionExpression_moduleA");
>moduleA : 类为 moduleA

interface IHasVisualizationModel {
>IHasVisualizationModel : IHasVisualizationModel

    VisualizationModel: typeof Backbone.Model;
>VisualizationModel : 类为 Backbone.Model
>Backbone.Model : 类为 Backbone.Model
>Backbone : 类为 Backbone
>Model : 类为 Backbone.Model
}
var f = (x: IHasVisualizationModel) => x;
>f : (x: IHasVisualizationModel) => IHasVisualizationModel
>(x: IHasVisualizationModel) => x : (x: IHasVisualizationModel) => IHasVisualizationModel
>x : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel
>x : IHasVisualizationModel

f = (x) => moduleA;
>f = (x) => moduleA : (x: IHasVisualizationModel) => 类为 moduleA
>f : (x: IHasVisualizationModel) => IHasVisualizationModel
>(x) => moduleA : (x: IHasVisualizationModel) => 类为 moduleA
>x : IHasVisualizationModel
>moduleA : 类为 moduleA

=== tests/cases/compiler/aliasUsageInFunctionExpression_backbone.ts ===
export class Model {
>Model : Model

    public someData: string;
>someData : 文字
>类型别名 :=> 文字
}

=== tests/cases/compiler/aliasUsageInFunctionExpression_moduleA.ts ===
import Backbone = require("./aliasUsageInFunctionExpression_backbone");
>Backbone : 类为 Backbone

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : VisualizationModel
>Backbone.Model : Backbone.Model
>Backbone : 类为 Backbone
>Model : 类为 Backbone.Model

    // interesting stuff here
}

