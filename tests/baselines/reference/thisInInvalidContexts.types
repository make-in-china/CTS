=== tests/cases/conformance/expressions/thisKeyword/thisInInvalidContexts.ts ===
//'this' in static member initializer
class ErrClass1 {
>ErrClass1 : ErrClass1

    static t = this; // Error
>t : typeof ErrClass1
>this : typeof ErrClass1
}

class BaseErrClass {
>BaseErrClass : BaseErrClass

    constructor(t: any) { }
>t : any
>类型别名 :=> 任意
}

class ClassWithNoInitializer extends BaseErrClass {
>ClassWithNoInitializer : ClassWithNoInitializer
>BaseErrClass : BaseErrClass

    t;
>t : any
>类型别名 :=> 任意

    //'this' in optional super call
    constructor() {
        super(this); // Error
>super(this) : void
>类型别名 :=> 无值
>super : typeof BaseErrClass
>this : this
    }
}

class ClassWithInitializer extends BaseErrClass {
>ClassWithInitializer : ClassWithInitializer
>BaseErrClass : BaseErrClass

    t = 4;
>t : number
>类型别名 :=> 数字
>4 : 4

    //'this' in required super call
    constructor() {
        super(this); // Error
>super(this) : void
>类型别名 :=> 无值
>super : typeof BaseErrClass
>this : this
    }
}

module M {
>M : typeof M

    //'this' in module variable
    var x = this; // Error
>x : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
}

//'this' as type parameter constraint
// function fn<T extends this >() { } // Error

//'this' as a type argument
function genericFunc<T>(x: T) { }
>genericFunc : <T>(x: T) => void
>T : T
>x : T
>T : T

genericFunc<this>(undefined);  // Should be an error
>genericFunc<this>(undefined) : void
>类型别名 :=> 无值
>genericFunc : <T>(x: T) => void
>undefined : undefined
>类型别名 :=> 未定

class ErrClass3 extends this {
>ErrClass3 : ErrClass3
>this : any
>类型别名 :=> 任意

}

//'this' as a computed enum value
enum SomeEnum {
>SomeEnum : SomeEnum

    A = this, // Should not be allowed
>A : SomeEnum
>this : any
>类型别名 :=> 任意

    B = this.spaaaace // Also should not be allowed
>B : SomeEnum
>this.spaaaace : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>spaaaace : any
>类型别名 :=> 任意
}


