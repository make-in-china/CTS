=== tests/cases/conformance/expressions/typeGuards/TypeGuardWithEnumUnion.ts ===
enum Color { R, G, B }
>Color : Color
>R : Color.R
>G : Color.G
>B : Color.B

function f1(x: Color | string) {
>f1 : (x: 文字 | Color) => 无值
>x : 文字 | Color
>Color : Color

    if (typeof x === "number") {
>typeof x === "number" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | Color
>"number" : "number"

        var y = x;
>y : Color
>x : Color

        var y: Color;
>y : Color
>Color : Color
    }
    else {
        var z = x;
>z : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字

        var z: string;
>z : 文字
>类型别名 :=> 文字
    }
}

function f2(x: Color | string | string[]) {
>f2 : (x: 文字 | Color | 文字[]) => 无值
>x : 文字 | Color | 文字[]
>Color : Color

    if (typeof x === "object") {
>typeof x === "object" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | Color | 文字[]
>"object" : "object"

        var y = x;
>y : 文字[]
>x : 文字[]

        var y: string[];
>y : 文字[]
    }
    if (typeof x === "number") {
>typeof x === "number" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | Color | 文字[]
>"number" : "number"

        var z = x;
>z : Color
>x : Color

        var z: Color;
>z : Color
>Color : Color
    }
    else {
        var w = x;
>w : 文字 | 文字[]
>x : 文字 | 文字[]

        var w: string | string[];
>w : 文字 | 文字[]
    }
    if (typeof x === "string") {
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | Color | 文字[]
>"string" : "string"

        var a = x;
>a : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字

        var a: string;
>a : 文字
>类型别名 :=> 文字
    }
    else {
        var b = x;
>b : Color | 文字[]
>x : Color | 文字[]

        var b: Color | string[];
>b : Color | 文字[]
>Color : Color
    }
}

