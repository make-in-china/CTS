=== tests/cases/compiler/declarationEmitProtectedMembers.ts ===
// Class with protected members
class C1 {
>C1 : C1

    protected x: number;
>x : 数字
>类型别名 :=> 数字

    protected f() {
>f : () => 数字

        return this.x;
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
    }

    protected set accessor(a: number) { }
>accessor : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

    protected get accessor() { return 0; }
>accessor : 数字
>类型别名 :=> 数字
>0 : 0

    protected static sx: number;
>sx : 数字
>类型别名 :=> 数字

    protected static sf() {
>sf : () => 数字

        return this.sx;
>this.sx : 数字
>类型别名 :=> 数字
>this : 类为 C1
>sx : 数字
>类型别名 :=> 数字
    }

    protected static set staticSetter(a: number) { }
>staticSetter : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

    protected static get staticGetter() { return 0; }
>staticGetter : 数字
>类型别名 :=> 数字
>0 : 0
}

// Derived class overriding protected members
class C2 extends C1 {
>C2 : C2
>C1 : C1

    protected f() {
>f : () => 数字

        return super.f() + this.x;
>super.f() + this.x : 数字
>类型别名 :=> 数字
>super.f() : 数字
>类型别名 :=> 数字
>super.f : () => 数字
>super : C1
>f : () => 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
    }
    protected static sf() {
>sf : () => 数字

        return super.sf() + this.sx;
>super.sf() + this.sx : 数字
>类型别名 :=> 数字
>super.sf() : 数字
>类型别名 :=> 数字
>super.sf : () => 数字
>super : 类为 C1
>sf : () => 数字
>this.sx : 数字
>类型别名 :=> 数字
>this : 类为 C2
>sx : 数字
>类型别名 :=> 数字
    }
}

// Derived class making protected members public
class C3 extends C2 {
>C3 : C3
>C2 : C2

    x: number;
>x : 数字
>类型别名 :=> 数字

    static sx: number;
>sx : 数字
>类型别名 :=> 数字

    f() {
>f : () => 数字

        return super.f();
>super.f() : 数字
>类型别名 :=> 数字
>super.f : () => 数字
>super : C2
>f : () => 数字
    }
    static sf() {
>sf : () => 数字

        return super.sf();
>super.sf() : 数字
>类型别名 :=> 数字
>super.sf : () => 数字
>super : 类为 C2
>sf : () => 数字
    }

    static get staticGetter() { return 1; }
>staticGetter : 数字
>类型别名 :=> 数字
>1 : 1
}

// Protected properties in constructors
class C4 {
>C4 : C4

    constructor(protected a: number, protected b) { }
>a : 数字
>类型别名 :=> 数字
>b : 任意
>类型别名 :=> 任意
}
