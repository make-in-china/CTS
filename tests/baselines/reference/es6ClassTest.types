=== tests/cases/compiler/es6ClassTest.ts ===
class Bar {
>Bar : Bar

    public goo: number;
>goo : 数字
>类型别名 :=> 数字

    public prop1(x) {
>prop1 : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

        return x;
>x : 任意
>类型别名 :=> 任意
    }

    constructor (n) { }
>n : 任意
>类型别名 :=> 任意
}

// new-style class
class Foo  extends Bar {
>Foo : Foo
>Bar : Bar

	foo:number;
>foo : 数字
>类型别名 :=> 数字

	gar = 0;
>gar : 数字
>类型别名 :=> 数字
>0 : 0

	zoo:string = "zoo";
>zoo : 文字
>类型别名 :=> 文字
>"zoo" : "zoo"

	x: any;
>x : 任意
>类型别名 :=> 任意

	bar() { return 0; }
>bar : () => 数字
>0 : 0

	private boo();
>boo : () => 任意

	private boo(x?) { return x; }
>boo : () => 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    static statVal = 0;
>statVal : 数字
>类型别名 :=> 数字
>0 : 0

	constructor();
	constructor(x?, private y?:string, public z?=0) {
>x : 任意
>类型别名 :=> 任意
>y : 文字
>类型别名 :=> 文字
>z : 数字
>类型别名 :=> 数字
>0 : 0

        super(x);
>super(x) : 无值
>类型别名 :=> 无值
>super : 类为 Bar
>x : 任意
>类型别名 :=> 任意

		this.x = x;
>this.x = x : 任意
>类型别名 :=> 任意
>this.x : 任意
>类型别名 :=> 任意
>this : 本体
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

        this.gar = 5;
>this.gar = 5 : 5
>this.gar : 数字
>类型别名 :=> 数字
>this : 本体
>gar : 数字
>类型别名 :=> 数字
>5 : 5
	 }
}

var f = new Foo();
>f : Foo
>new Foo() : Foo
>Foo : 类为 Foo

declare module AmbientMod {
>AmbientMod : 类为 AmbientMod

	export class Provide {
>Provide : Provide

		foo:number;
>foo : 数字
>类型别名 :=> 数字

		zoo:string;
>zoo : 文字
>类型别名 :=> 文字

		constructor();
		
		private boo();
>boo : () => 任意

		bar();
>bar : () => 任意
	}
}


//class GetSetMonster {


//  // attack(target) {
//  //     WScript.Echo("Attacks " + target);
//  // }
//  // The contextual keyword "get" followed by an identifier and
//  // a curly body defines a getter in the same way that "get"
//  // defines one in an object literal.
//  // get isAlive() {
//  //   return this.health > 0;
//  // }
 
//  // Likewise, "set" can be used to define setters.
//  set health(value:number) {
//    if (value < 0) {
//      throw new Error('Health must be non-negative.')
//    }
//    this.health = value
//  }
//  get health() { return 0; }

//  constructor(this.name: string, health: number) {
//    this.health = 0;
//  }
//}


//class bar {

//   static fnOverload( );

//   static fnOverload(foo: string){ } // no error

//   constructor(){};    

//}

