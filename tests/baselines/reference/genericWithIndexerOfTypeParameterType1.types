=== tests/cases/compiler/genericWithIndexerOfTypeParameterType1.ts ===
class LazyArray<T> {
>LazyArray : LazyArray<T>
>T : T

    private objects = <{ [objectId: string]: T; }>{};
>objects : { [objectId: 文字]: T; }
><{ [objectId: string]: T; }>{} : { [objectId: 文字]: T; }
>objectId : 文字
>类型别名 :=> 文字
>T : T
>{} : {}

    array() {
>array : () => { [objectId: 文字]: T; }

        return this.objects;
>this.objects : { [objectId: 文字]: T; }
>this : 本体
>objects : { [objectId: 文字]: T; }
    }
}
var lazyArray = new LazyArray<string>();
>lazyArray : LazyArray<文字>
>new LazyArray<string>() : LazyArray<文字>
>LazyArray : 类为 LazyArray

var value: string = lazyArray.array()["test"]; // used to be an error
>value : 文字
>类型别名 :=> 文字
>lazyArray.array()["test"] : 文字
>类型别名 :=> 文字
>lazyArray.array() : { [objectId: 文字]: 文字; }
>lazyArray.array : () => { [objectId: 文字]: 文字; }
>lazyArray : LazyArray<文字>
>array : () => { [objectId: 文字]: 文字; }
>"test" : "test"

