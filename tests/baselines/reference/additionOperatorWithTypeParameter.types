=== tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithTypeParameter.ts ===
// type parameter type is not a valid operand of addition operator
enum E { a, b }
>E : E
>a : E.a
>b : E.b

function foo<T, U>(t: T, u: U) {
>foo : <T, U>(t: T, u: U) => 无值
>T : T
>U : U
>t : T
>T : T
>u : U
>U : U

    var a: any;
>a : 任意
>类型别名 :=> 任意

    var b: boolean;
>b : 真假
>类型别名 :=> 真假

    var c: number;
>c : 数字
>类型别名 :=> 数字

    var d: string;
>d : 文字
>类型别名 :=> 文字

    var e: Object;
>e : Object
>Object : Object

    var g: E;
>g : E
>E : E

    var f: void;
>f : 无值
>类型别名 :=> 无值

    // type parameter as left operand
    var r1: any = t + a; // ok, one operand is any
>r1 : 任意
>类型别名 :=> 任意
>t + a : 任意
>类型别名 :=> 任意
>t : T
>a : 任意
>类型别名 :=> 任意

    var r2 = t + b;
>r2 : 任意
>类型别名 :=> 任意
>t + b : 任意
>类型别名 :=> 任意
>t : T
>b : 真假
>类型别名 :=> 真假

    var r3 = t + c;
>r3 : 任意
>类型别名 :=> 任意
>t + c : 任意
>类型别名 :=> 任意
>t : T
>c : 数字
>类型别名 :=> 数字

    var r4 = t + d; // ok, one operand is string
>r4 : 文字
>类型别名 :=> 文字
>t + d : 文字
>类型别名 :=> 文字
>t : T
>d : 文字
>类型别名 :=> 文字

    var r5 = t + e;
>r5 : 任意
>类型别名 :=> 任意
>t + e : 任意
>类型别名 :=> 任意
>t : T
>e : Object

    var r6 = t + g;
>r6 : 任意
>类型别名 :=> 任意
>t + g : 任意
>类型别名 :=> 任意
>t : T
>g : E

    var r7 = t + f;
>r7 : 任意
>类型别名 :=> 任意
>t + f : 任意
>类型别名 :=> 任意
>t : T
>f : 无值
>类型别名 :=> 无值

    // type parameter as right operand
    var r8 = a + t; // ok, one operand is any
>r8 : 任意
>类型别名 :=> 任意
>a + t : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>t : T

    var r9 = b + t;
>r9 : 任意
>类型别名 :=> 任意
>b + t : 任意
>类型别名 :=> 任意
>b : 真假
>类型别名 :=> 真假
>t : T

    var r10 = c + t;
>r10 : 任意
>类型别名 :=> 任意
>c + t : 任意
>类型别名 :=> 任意
>c : 数字
>类型别名 :=> 数字
>t : T

    var r11 = d + t; // ok, one operand is string
>r11 : 文字
>类型别名 :=> 文字
>d + t : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字
>t : T

    var r12 = e + t;
>r12 : 任意
>类型别名 :=> 任意
>e + t : 任意
>类型别名 :=> 任意
>e : Object
>t : T

    var r13 = g + t;
>r13 : 任意
>类型别名 :=> 任意
>g + t : 任意
>类型别名 :=> 任意
>g : E
>t : T

    var r14 = f + t;
>r14 : 任意
>类型别名 :=> 任意
>f + t : 任意
>类型别名 :=> 任意
>f : 无值
>类型别名 :=> 无值
>t : T

    // other cases
    var r15 = t + null;
>r15 : 任意
>类型别名 :=> 任意
>t + null : 任意
>类型别名 :=> 任意
>t : T
>null : 空值
>类型别名 :=> 空值

    var r16 = t + undefined;
>r16 : 任意
>类型别名 :=> 任意
>t + undefined : 任意
>类型别名 :=> 任意
>t : T
>undefined : 未定
>类型别名 :=> 未定

    var r17 = t + t;
>r17 : 任意
>类型别名 :=> 任意
>t + t : 任意
>类型别名 :=> 任意
>t : T
>t : T

    var r18 = t + u;
>r18 : 任意
>类型别名 :=> 任意
>t + u : 任意
>类型别名 :=> 任意
>t : T
>u : U

    var r19 = t + (() => { });
>r19 : 任意
>类型别名 :=> 任意
>t + (() => { }) : 任意
>类型别名 :=> 任意
>t : T
>(() => { }) : () => 无值
>() => { } : () => 无值

    var r20 = t + [];
>r20 : 任意
>类型别名 :=> 任意
>t + [] : 任意
>类型别名 :=> 任意
>t : T
>[] : 未定[]
}
