=== tests/cases/conformance/jsx/file.tsx ===
declare module JSX {
>JSX : 任意
>类型别名 :=> 任意

	interface Element { isElement; }
>Element : Element
>isElement : 任意
>类型别名 :=> 任意
}

var T: any, T1: any, T2: any;
>T : 任意
>类型别名 :=> 任意
>T1 : 任意
>类型别名 :=> 任意
>T2 : 任意
>类型别名 :=> 任意

// This is an element
var x1 = <T>() => {}</T>;
>x1 : JSX.Element
><T>() => {}</T> : JSX.Element
>T : 任意
>类型别名 :=> 任意
>T : 任意
>类型别名 :=> 任意

x1.isElement;
>x1.isElement : 任意
>类型别名 :=> 任意
>x1 : JSX.Element
>isElement : 任意
>类型别名 :=> 任意

// This is a generic function
var x2 = <T extends {}>() => {};
>x2 : <T 扩展 {}>() => 无值
><T extends {}>() => {} : <T 扩展 {}>() => 无值
>T : T

x2();
>x2() : 无值
>类型别名 :=> 无值
>x2 : <T 扩展 {}>() => 无值

// This is a generic function
var x3 = <T, T1>() => {};
>x3 : <T, T1>() => 无值
><T, T1>() => {} : <T, T1>() => 无值
>T : T
>T1 : T1

x3();
>x3() : 无值
>类型别名 :=> 无值
>x3 : <T, T1>() => 无值

// This is an element
var x4 = <T extends={true}>() => {}</T>;
>x4 : JSX.Element
><T extends={true}>() => {}</T> : JSX.Element
>T : 任意
>类型别名 :=> 任意
>extends : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>T : 任意
>类型别名 :=> 任意

x4.isElement;
>x4.isElement : 任意
>类型别名 :=> 任意
>x4 : JSX.Element
>isElement : 任意
>类型别名 :=> 任意

// This is an element
var x5 = <T extends>() => {}</T>;
>x5 : JSX.Element
><T extends>() => {}</T> : JSX.Element
>T : 任意
>类型别名 :=> 任意
>extends : 为真
>类型别名 :=> 为真
>T : 任意
>类型别名 :=> 任意

x5.isElement;
>x5.isElement : 任意
>类型别名 :=> 任意
>x5 : JSX.Element
>isElement : 任意
>类型别名 :=> 任意


