=== tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassTransitivity4.ts ===
// subclassing is not transitive when you can remove required parameters and add optional parameters on protected members

class C {
>C : C

    protected foo(x: number) { }
>foo : (x: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
}

class D extends C {
>D : D
>C : C

    protected foo() { } // ok to drop parameters
>foo : () => 无值
}

class E extends D {
>E : E
>D : D

    public foo(x?: string) { } // ok to add optional parameters
>foo : (x?: 文字) => 无值
>x : 文字
>类型别名 :=> 文字
}

var c: C;
>c : C
>C : C

var d: D;
>d : D
>D : D

var e: E;
>e : E
>E : E

c = e;
>c = e : E
>c : C
>e : E

var r = c.foo(1);
>r : 无值
>类型别名 :=> 无值
>c.foo(1) : 无值
>类型别名 :=> 无值
>c.foo : (x: 数字) => 无值
>c : C
>foo : (x: 数字) => 无值
>1 : 1

var r2 = e.foo('');
>r2 : 无值
>类型别名 :=> 无值
>e.foo('') : 无值
>类型别名 :=> 无值
>e.foo : (x?: 文字) => 无值
>e : E
>foo : (x?: 文字) => 无值
>'' : ""

