=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : 类为 React

class RC1 extends React.Component<{x : number}, {}> {
>RC1 : RC1
>React.Component : React.Component<{ x: 数字; }, {}>
>React : 类为 React
>Component : 类为 React.Component
>x : 数字
>类型别名 :=> 数字

    render() {
>render : () => 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}

class RC2 extends React.Component<{ x: string }, {}> {
>RC2 : RC2
>React.Component : React.Component<{ x: 文字; }, {}>
>React : 类为 React
>Component : 类为 React.Component
>x : 文字
>类型别名 :=> 文字

    render() {
>render : () => 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
    private method() { }
>method : () => 无值
}

class RC3 extends React.Component<{}, {}> {
>RC3 : RC3
>React.Component : React.Component<{}, {}>
>React : 类为 React
>Component : 类为 React.Component

    render() {
>render : () => 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}

class RC4 extends React.Component<{}, {}> {
>RC4 : RC4
>React.Component : React.Component<{}, {}>
>React : 类为 React
>Component : 类为 React.Component

    render() {
>render : () => 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}

var RCComp = RC1 || RC2;
>RCComp : 类为 RC1 | 类为 RC2
>RC1 || RC2 : 类为 RC1 | 类为 RC2
>RC1 : 类为 RC1
>RC2 : 类为 RC2

var EmptyRCComp = RC3 || RC4;
>EmptyRCComp : 类为 RC3
>RC3 || RC4 : 类为 RC3
>RC3 : 类为 RC3
>RC4 : 类为 RC4

var PartRCComp = RC1 || RC4;
>PartRCComp : 类为 RC4
>RC1 || RC4 : 类为 RC4
>RC1 : 类为 RC1
>RC4 : 类为 RC4

// Error
let a = <RCComp x />;
>a : JSX.Element
><RCComp x /> : JSX.Element
>RCComp : 类为 RC1 | 类为 RC2
>x : 为真
>类型别名 :=> 为真

let b = <PartRCComp x={10} />
>b : JSX.Element
><PartRCComp x={10} /> : JSX.Element
>PartRCComp : 类为 RC4
>x : 数字
>类型别名 :=> 数字
>10 : 10

let c = <EmptyRCComp prop />;
>c : JSX.Element
><EmptyRCComp prop /> : JSX.Element
>EmptyRCComp : 类为 RC3
>prop : 为真
>类型别名 :=> 为真

