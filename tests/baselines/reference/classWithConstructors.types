=== tests/cases/conformance/classes/members/constructorFunctionTypes/classWithConstructors.ts ===
module NonGeneric {
>NonGeneric : typeof NonGeneric

    class C {
>C : C

        constructor(x: string) { }
>x : string
>类型别名 :=> 文字
    }

    var c = new C(); // error
>c : any
>类型别名 :=> 任意
>new C() : any
>类型别名 :=> 任意
>C : typeof C

    var c2 = new C(''); // ok
>c2 : C
>new C('') : C
>C : typeof C
>'' : ""

    class C2 {
>C2 : C2

        constructor(x: number);
>x : number
>类型别名 :=> 数字

        constructor(x: string);
>x : string
>类型别名 :=> 文字

        constructor(x: any) { }
>x : any
>类型别名 :=> 任意
    }

    var c3 = new C2(); // error
>c3 : any
>类型别名 :=> 任意
>new C2() : any
>类型别名 :=> 任意
>C2 : typeof C2

    var c4 = new C2(''); // ok
>c4 : C2
>new C2('') : C2
>C2 : typeof C2
>'' : ""

    var c5 = new C2(1); // ok
>c5 : C2
>new C2(1) : C2
>C2 : typeof C2
>1 : 1

    class D extends C2 { }
>D : D
>C2 : C2

    var d = new D(); // error
>d : any
>类型别名 :=> 任意
>new D() : any
>类型别名 :=> 任意
>D : typeof D

    var d2 = new D(1); // ok
>d2 : D
>new D(1) : D
>D : typeof D
>1 : 1

    var d3 = new D(''); // ok
>d3 : D
>new D('') : D
>D : typeof D
>'' : ""
}

module Generics {
>Generics : typeof Generics

    class C<T> {
>C : C<T>
>T : T

        constructor(x: T) { }
>x : T
>T : T
    }

    var c = new C(); // error
>c : any
>类型别名 :=> 任意
>new C() : any
>类型别名 :=> 任意
>C : typeof C

    var c2 = new C(''); // ok
>c2 : C<string>
>new C('') : C<string>
>C : typeof C
>'' : ""

    class C2<T,U> {
>C2 : C2<T, U>
>T : T
>U : U

        constructor(x: T);
>x : T
>T : T

        constructor(x: T, y: U);
>x : T
>T : T
>y : U
>U : U

        constructor(x: any) { }
>x : any
>类型别名 :=> 任意
    }

    var c3 = new C2(); // error
>c3 : any
>类型别名 :=> 任意
>new C2() : any
>类型别名 :=> 任意
>C2 : typeof C2

    var c4 = new C2(''); // ok
>c4 : C2<string, {}>
>new C2('') : C2<string, {}>
>C2 : typeof C2
>'' : ""

    var c5 = new C2(1, 2); // ok
>c5 : C2<number, number>
>new C2(1, 2) : C2<number, number>
>C2 : typeof C2
>1 : 1
>2 : 2

    class D<T, U> extends C2<T, U> { }
>D : D<T, U>
>T : T
>U : U
>C2 : C2<T, U>
>T : T
>U : U

    var d = new D(); // error
>d : any
>类型别名 :=> 任意
>new D() : any
>类型别名 :=> 任意
>D : typeof D

    var d2 = new D(1); // ok
>d2 : D<number, {}>
>new D(1) : D<number, {}>
>D : typeof D
>1 : 1

    var d3 = new D(''); // ok
>d3 : D<string, {}>
>new D('') : D<string, {}>
>D : typeof D
>'' : ""
}
