=== tests/cases/compiler/objectLitIndexerContextualType.ts ===
interface I {
>I : I

    [s: string]: (s: string) => number;
>s : string
>类型别名 :=> 文字
>s : string
>类型别名 :=> 文字
}

interface J {
>J : J

    [s: number]: (s: string) => number;
>s : number
>类型别名 :=> 数字
>s : string
>类型别名 :=> 文字
}

var x: I;
>x : I
>I : I

var y: J;
>y : J
>J : J

x = {
>x = {    s: t => t * t, // Should error} : { s: (t: string) => number; }
>x : I
>{    s: t => t * t, // Should error} : { s: (t: string) => number; }

    s: t => t * t, // Should error
>s : (t: string) => number
>t => t * t : (t: string) => number
>t : string
>类型别名 :=> 文字
>t * t : number
>类型别名 :=> 数字
>t : string
>类型别名 :=> 文字
>t : string
>类型别名 :=> 文字

};
x = {
>x = {    0: t => t * t, // Should error} : { 0: (t: string) => number; }
>x : I
>{    0: t => t * t, // Should error} : { 0: (t: string) => number; }

    0: t => t * t, // Should error
>t => t * t : (t: string) => number
>t : string
>类型别名 :=> 文字
>t * t : number
>类型别名 :=> 数字
>t : string
>类型别名 :=> 文字
>t : string
>类型别名 :=> 文字

};
y = {
>y = {    s: t => t * t, // Should error} : { s: (t: any) => number; }
>y : J
>{    s: t => t * t, // Should error} : { s: (t: any) => number; }

    s: t => t * t, // Should error
>s : (t: any) => number
>t => t * t : (t: any) => number
>t : any
>类型别名 :=> 任意
>t * t : number
>类型别名 :=> 数字
>t : any
>类型别名 :=> 任意
>t : any
>类型别名 :=> 任意

};
y = {
>y = {    0: t => t * t, // Should error} : { 0: (t: string) => number; }
>y : J
>{    0: t => t * t, // Should error} : { 0: (t: string) => number; }

    0: t => t * t, // Should error
>t => t * t : (t: string) => number
>t : string
>类型别名 :=> 文字
>t * t : number
>类型别名 :=> 数字
>t : string
>类型别名 :=> 文字
>t : string
>类型别名 :=> 文字

};

