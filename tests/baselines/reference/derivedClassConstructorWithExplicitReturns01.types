=== tests/cases/compiler/derivedClassConstructorWithExplicitReturns01.ts ===
class C {
>C : C

    cProp = 10;
>cProp : number
>类型别名 :=> 数字
>10 : 10

    foo() { return "this never gets used."; }
>foo : () => string
>"this never gets used." : "this never gets used."

    constructor(value: number) {
>value : number
>类型别名 :=> 数字

        return {
>{            cProp: value,            foo() {                return "well this looks kinda C-ish.";            }        } : { cProp: number; foo(): string; }

            cProp: value,
>cProp : number
>类型别名 :=> 数字
>value : number
>类型别名 :=> 数字

            foo() {
>foo : () => string

                return "well this looks kinda C-ish.";
>"well this looks kinda C-ish." : "well this looks kinda C-ish."
            }
        }
    }
}

class D extends C {
>D : D
>C : C

    dProp = () => this;
>dProp : () => this
>() => this : () => this
>this : this

    constructor(a = 100) {
>a : number
>类型别名 :=> 数字
>100 : 100

        super(a);
>super(a) : void
>类型别名 :=> 无值
>super : typeof C
>a : number
>类型别名 :=> 数字

        if (Math.random() < 0.5) {
>Math.random() < 0.5 : boolean
>类型别名 :=> 真假
>Math.random() : number
>类型别名 :=> 数字
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5

            "You win!"
>"You win!" : "You win!"

            return {
>{                cProp: 1,                dProp: () => this,                foo() { return "You win!!!!!" }            } : { cProp: number; dProp: () => this; foo(): string; }

                cProp: 1,
>cProp : number
>类型别名 :=> 数字
>1 : 1

                dProp: () => this,
>dProp : () => this
>() => this : () => this
>this : this

                foo() { return "You win!!!!!" }
>foo : () => string
>"You win!!!!!" : "You win!!!!!"

            };
        }
        else
            return null;
>null : null
>类型别名 :=> 空值
    }
}
