=== tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassIncludesInheritedMembers.ts ===
class Base {
>Base : Base

    a: string;
>a : string
>类型别名 :=> 文字

    b() { }
>b : () => void

    get c() { return ''; }
>c : string
>类型别名 :=> 文字
>'' : ""

    set c(v) { }
>c : string
>类型别名 :=> 文字
>v : string
>类型别名 :=> 文字

    static r: string;
>r : string
>类型别名 :=> 文字

    static s() { }
>s : () => void

    static get t() { return ''; }
>t : string
>类型别名 :=> 文字
>'' : ""

    static set t(v) { }
>t : string
>类型别名 :=> 文字
>v : string
>类型别名 :=> 文字

    constructor(x) { }
>x : any
>类型别名 :=> 任意
}

class Derived extends Base {
>Derived : Derived
>Base : Base
}

var d: Derived = new Derived(1);
>d : Derived
>Derived : Derived
>new Derived(1) : Derived
>Derived : typeof Derived
>1 : 1

var r1 = d.a;
>r1 : string
>类型别名 :=> 文字
>d.a : string
>类型别名 :=> 文字
>d : Derived
>a : string
>类型别名 :=> 文字

var r2 = d.b();
>r2 : void
>类型别名 :=> 无值
>d.b() : void
>类型别名 :=> 无值
>d.b : () => void
>d : Derived
>b : () => void

var r3 = d.c;
>r3 : string
>类型别名 :=> 文字
>d.c : string
>类型别名 :=> 文字
>d : Derived
>c : string
>类型别名 :=> 文字

d.c = '';
>d.c = '' : ""
>d.c : string
>类型别名 :=> 文字
>d : Derived
>c : string
>类型别名 :=> 文字
>'' : ""

var r4 = Derived.r;
>r4 : string
>类型别名 :=> 文字
>Derived.r : string
>类型别名 :=> 文字
>Derived : typeof Derived
>r : string
>类型别名 :=> 文字

var r5 = Derived.s();
>r5 : void
>类型别名 :=> 无值
>Derived.s() : void
>类型别名 :=> 无值
>Derived.s : () => void
>Derived : typeof Derived
>s : () => void

var r6 = Derived.t;
>r6 : string
>类型别名 :=> 文字
>Derived.t : string
>类型别名 :=> 文字
>Derived : typeof Derived
>t : string
>类型别名 :=> 文字

Derived.t = '';
>Derived.t = '' : ""
>Derived.t : string
>类型别名 :=> 文字
>Derived : typeof Derived
>t : string
>类型别名 :=> 文字
>'' : ""

class Base2 {
>Base2 : Base2

    [x: string]: Object;
>x : string
>类型别名 :=> 文字
>Object : Object

    [x: number]: Date;
>x : number
>类型别名 :=> 数字
>Date : Date
}

class Derived2 extends Base2 {
>Derived2 : Derived2
>Base2 : Base2
}

var d2: Derived2;
>d2 : Derived2
>Derived2 : Derived2

var r7 = d2[''];
>r7 : Object
>d2[''] : Object
>d2 : Derived2
>'' : ""

var r8 = d2[1];
>r8 : Date
>d2[1] : Date
>d2 : Derived2
>1 : 1


