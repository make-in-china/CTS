=== tests/cases/compiler/inferentialTypingUsingApparentType2.ts ===
function foo<T extends { m(p: string): number }>(x: T): T {
>foo : <T extends { m(p: string): number; }>(x: T) => T
>T : T
>m : (p: string) => number
>p : string
>类型别名 :=> 文字
>x : T
>T : T
>T : T

    return undefined;
>undefined : undefined
>类型别名 :=> 未定
}

foo({ m(x) { return x.length } });
>foo({ m(x) { return x.length } }) : { m(x: string): number; }
>foo : <T extends { m(p: string): number; }>(x: T) => T
>{ m(x) { return x.length } } : { m(x: string): number; }
>m : (x: string) => number
>x : string
>类型别名 :=> 文字
>x.length : number
>类型别名 :=> 数字
>x : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字

