=== tests/cases/compiler/inferentialTypingUsingApparentType2.ts ===
function foo<T extends { m(p: string): number }>(x: T): T {
>foo : <T 扩展 { m(p: 文字): 数字; }>(x: T) => T
>T : T
>m : (p: 文字) => 数字
>p : 文字
>类型别名 :=> 文字
>x : T
>T : T
>T : T

    return undefined;
>undefined : 未定
>类型别名 :=> 未定
}

foo({ m(x) { return x.length } });
>foo({ m(x) { return x.length } }) : { m(x: 文字): 数字; }
>foo : <T 扩展 { m(p: 文字): 数字; }>(x: T) => T
>{ m(x) { return x.length } } : { m(x: 文字): 数字; }
>m : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

