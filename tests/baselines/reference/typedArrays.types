=== tests/cases/compiler/typedArrays.ts ===
function CreateTypedArrayTypes() {
>CreateTypedArrayTypes : () => 任意[]

    var typedArrays = [];
>typedArrays : 任意[]
>[] : 未定[]

    typedArrays[0] = Int8Array;
>typedArrays[0] = Int8Array : Int8ArrayConstructor
>typedArrays[0] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>0 : 0
>Int8Array : Int8ArrayConstructor

    typedArrays[1] = Uint8Array;
>typedArrays[1] = Uint8Array : Uint8ArrayConstructor
>typedArrays[1] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>1 : 1
>Uint8Array : Uint8ArrayConstructor

    typedArrays[2] = Int16Array;
>typedArrays[2] = Int16Array : Int16ArrayConstructor
>typedArrays[2] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>2 : 2
>Int16Array : Int16ArrayConstructor

    typedArrays[3] = Uint16Array;
>typedArrays[3] = Uint16Array : Uint16ArrayConstructor
>typedArrays[3] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>3 : 3
>Uint16Array : Uint16ArrayConstructor

    typedArrays[4] = Int32Array;
>typedArrays[4] = Int32Array : Int32ArrayConstructor
>typedArrays[4] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>4 : 4
>Int32Array : Int32ArrayConstructor

    typedArrays[5] = Uint32Array;
>typedArrays[5] = Uint32Array : Uint32ArrayConstructor
>typedArrays[5] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>5 : 5
>Uint32Array : Uint32ArrayConstructor

    typedArrays[6] = Float32Array;
>typedArrays[6] = Float32Array : Float32ArrayConstructor
>typedArrays[6] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>6 : 6
>Float32Array : Float32ArrayConstructor

    typedArrays[7] = Float64Array;
>typedArrays[7] = Float64Array : Float64ArrayConstructor
>typedArrays[7] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>7 : 7
>Float64Array : Float64ArrayConstructor

    typedArrays[8] = Uint8ClampedArray;
>typedArrays[8] = Uint8ClampedArray : Uint8ClampedArrayConstructor
>typedArrays[8] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>8 : 8
>Uint8ClampedArray : Uint8ClampedArrayConstructor

    return typedArrays;
>typedArrays : 任意[]
}

function CreateTypedArrayInstancesFromLength(obj: number) {
>CreateTypedArrayInstancesFromLength : (obj: 数字) => 任意[]
>obj : 数字
>类型别名 :=> 数字

    var typedArrays = [];
>typedArrays : 任意[]
>[] : 未定[]

    typedArrays[0] = new Int8Array(obj);
>typedArrays[0] = new Int8Array(obj) : Int8Array
>typedArrays[0] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>0 : 0
>new Int8Array(obj) : Int8Array
>Int8Array : Int8ArrayConstructor
>obj : 数字
>类型别名 :=> 数字

    typedArrays[1] = new Uint8Array(obj);
>typedArrays[1] = new Uint8Array(obj) : Uint8Array
>typedArrays[1] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>1 : 1
>new Uint8Array(obj) : Uint8Array
>Uint8Array : Uint8ArrayConstructor
>obj : 数字
>类型别名 :=> 数字

    typedArrays[2] = new Int16Array(obj);
>typedArrays[2] = new Int16Array(obj) : Int16Array
>typedArrays[2] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>2 : 2
>new Int16Array(obj) : Int16Array
>Int16Array : Int16ArrayConstructor
>obj : 数字
>类型别名 :=> 数字

    typedArrays[3] = new Uint16Array(obj);
>typedArrays[3] = new Uint16Array(obj) : Uint16Array
>typedArrays[3] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>3 : 3
>new Uint16Array(obj) : Uint16Array
>Uint16Array : Uint16ArrayConstructor
>obj : 数字
>类型别名 :=> 数字

    typedArrays[4] = new Int32Array(obj);
>typedArrays[4] = new Int32Array(obj) : Int32Array
>typedArrays[4] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>4 : 4
>new Int32Array(obj) : Int32Array
>Int32Array : Int32ArrayConstructor
>obj : 数字
>类型别名 :=> 数字

    typedArrays[5] = new Uint32Array(obj);
>typedArrays[5] = new Uint32Array(obj) : Uint32Array
>typedArrays[5] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>5 : 5
>new Uint32Array(obj) : Uint32Array
>Uint32Array : Uint32ArrayConstructor
>obj : 数字
>类型别名 :=> 数字

    typedArrays[6] = new Float32Array(obj);
>typedArrays[6] = new Float32Array(obj) : Float32Array
>typedArrays[6] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>6 : 6
>new Float32Array(obj) : Float32Array
>Float32Array : Float32ArrayConstructor
>obj : 数字
>类型别名 :=> 数字

    typedArrays[7] = new Float64Array(obj);
>typedArrays[7] = new Float64Array(obj) : Float64Array
>typedArrays[7] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>7 : 7
>new Float64Array(obj) : Float64Array
>Float64Array : Float64ArrayConstructor
>obj : 数字
>类型别名 :=> 数字

    typedArrays[8] = new Uint8ClampedArray(obj);
>typedArrays[8] = new Uint8ClampedArray(obj) : Uint8ClampedArray
>typedArrays[8] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>8 : 8
>new Uint8ClampedArray(obj) : Uint8ClampedArray
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>obj : 数字
>类型别名 :=> 数字

    return typedArrays;
>typedArrays : 任意[]
}

function CreateTypedArrayInstancesFromArray(obj: number[]) {
>CreateTypedArrayInstancesFromArray : (obj: 数字[]) => 任意[]
>obj : 数字[]

    var typedArrays = [];
>typedArrays : 任意[]
>[] : 未定[]

    typedArrays[0] = new Int8Array(obj);
>typedArrays[0] = new Int8Array(obj) : Int8Array
>typedArrays[0] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>0 : 0
>new Int8Array(obj) : Int8Array
>Int8Array : Int8ArrayConstructor
>obj : 数字[]

    typedArrays[1] = new Uint8Array(obj);
>typedArrays[1] = new Uint8Array(obj) : Uint8Array
>typedArrays[1] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>1 : 1
>new Uint8Array(obj) : Uint8Array
>Uint8Array : Uint8ArrayConstructor
>obj : 数字[]

    typedArrays[2] = new Int16Array(obj);
>typedArrays[2] = new Int16Array(obj) : Int16Array
>typedArrays[2] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>2 : 2
>new Int16Array(obj) : Int16Array
>Int16Array : Int16ArrayConstructor
>obj : 数字[]

    typedArrays[3] = new Uint16Array(obj);
>typedArrays[3] = new Uint16Array(obj) : Uint16Array
>typedArrays[3] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>3 : 3
>new Uint16Array(obj) : Uint16Array
>Uint16Array : Uint16ArrayConstructor
>obj : 数字[]

    typedArrays[4] = new Int32Array(obj);
>typedArrays[4] = new Int32Array(obj) : Int32Array
>typedArrays[4] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>4 : 4
>new Int32Array(obj) : Int32Array
>Int32Array : Int32ArrayConstructor
>obj : 数字[]

    typedArrays[5] = new Uint32Array(obj);
>typedArrays[5] = new Uint32Array(obj) : Uint32Array
>typedArrays[5] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>5 : 5
>new Uint32Array(obj) : Uint32Array
>Uint32Array : Uint32ArrayConstructor
>obj : 数字[]

    typedArrays[6] = new Float32Array(obj);
>typedArrays[6] = new Float32Array(obj) : Float32Array
>typedArrays[6] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>6 : 6
>new Float32Array(obj) : Float32Array
>Float32Array : Float32ArrayConstructor
>obj : 数字[]

    typedArrays[7] = new Float64Array(obj);
>typedArrays[7] = new Float64Array(obj) : Float64Array
>typedArrays[7] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>7 : 7
>new Float64Array(obj) : Float64Array
>Float64Array : Float64ArrayConstructor
>obj : 数字[]

    typedArrays[8] = new Uint8ClampedArray(obj);
>typedArrays[8] = new Uint8ClampedArray(obj) : Uint8ClampedArray
>typedArrays[8] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>8 : 8
>new Uint8ClampedArray(obj) : Uint8ClampedArray
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>obj : 数字[]

    return typedArrays;
>typedArrays : 任意[]
}

function CreateIntegerTypedArraysFromArray2(obj:number[]) {
>CreateIntegerTypedArraysFromArray2 : (obj: 数字[]) => 任意[]
>obj : 数字[]

    var typedArrays = [];
>typedArrays : 任意[]
>[] : 未定[]

    typedArrays[0] = Int8Array.from(obj);
>typedArrays[0] = Int8Array.from(obj) : Int8Array
>typedArrays[0] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>0 : 0
>Int8Array.from(obj) : Int8Array
>Int8Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; }
>Int8Array : Int8ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; }
>obj : 数字[]

    typedArrays[1] = Uint8Array.from(obj);
>typedArrays[1] = Uint8Array.from(obj) : Uint8Array
>typedArrays[1] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>1 : 1
>Uint8Array.from(obj) : Uint8Array
>Uint8Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; }
>Uint8Array : Uint8ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; }
>obj : 数字[]

    typedArrays[2] = Int16Array.from(obj);
>typedArrays[2] = Int16Array.from(obj) : Int16Array
>typedArrays[2] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>2 : 2
>Int16Array.from(obj) : Int16Array
>Int16Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; }
>Int16Array : Int16ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; }
>obj : 数字[]

    typedArrays[3] = Uint16Array.from(obj);
>typedArrays[3] = Uint16Array.from(obj) : Uint16Array
>typedArrays[3] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>3 : 3
>Uint16Array.from(obj) : Uint16Array
>Uint16Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; }
>Uint16Array : Uint16ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; }
>obj : 数字[]

    typedArrays[4] = Int32Array.from(obj);
>typedArrays[4] = Int32Array.from(obj) : Int32Array
>typedArrays[4] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>4 : 4
>Int32Array.from(obj) : Int32Array
>Int32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; }
>Int32Array : Int32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; }
>obj : 数字[]

    typedArrays[5] = Uint32Array.from(obj);
>typedArrays[5] = Uint32Array.from(obj) : Uint32Array
>typedArrays[5] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>5 : 5
>Uint32Array.from(obj) : Uint32Array
>Uint32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; }
>Uint32Array : Uint32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; }
>obj : 数字[]

    typedArrays[6] = Float32Array.from(obj);
>typedArrays[6] = Float32Array.from(obj) : Float32Array
>typedArrays[6] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>6 : 6
>Float32Array.from(obj) : Float32Array
>Float32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; }
>Float32Array : Float32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; }
>obj : 数字[]

    typedArrays[7] = Float64Array.from(obj);
>typedArrays[7] = Float64Array.from(obj) : Float64Array
>typedArrays[7] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>7 : 7
>Float64Array.from(obj) : Float64Array
>Float64Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; }
>Float64Array : Float64ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; }
>obj : 数字[]

    typedArrays[8] = Uint8ClampedArray.from(obj);
>typedArrays[8] = Uint8ClampedArray.from(obj) : Uint8ClampedArray
>typedArrays[8] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>8 : 8
>Uint8ClampedArray.from(obj) : Uint8ClampedArray
>Uint8ClampedArray.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; }
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; }
>obj : 数字[]

    return typedArrays;
>typedArrays : 任意[]
}

function CreateIntegerTypedArraysFromArrayLike(obj:ArrayLike<number>) {
>CreateIntegerTypedArraysFromArrayLike : (obj: ArrayLike<数字>) => 任意[]
>obj : ArrayLike<数字>
>ArrayLike : ArrayLike<T>

    var typedArrays = [];
>typedArrays : 任意[]
>[] : 未定[]

    typedArrays[0] = Int8Array.from(obj);
>typedArrays[0] = Int8Array.from(obj) : Int8Array
>typedArrays[0] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>0 : 0
>Int8Array.from(obj) : Int8Array
>Int8Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; }
>Int8Array : Int8ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; }
>obj : ArrayLike<数字>

    typedArrays[1] = Uint8Array.from(obj);
>typedArrays[1] = Uint8Array.from(obj) : Uint8Array
>typedArrays[1] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>1 : 1
>Uint8Array.from(obj) : Uint8Array
>Uint8Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; }
>Uint8Array : Uint8ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; }
>obj : ArrayLike<数字>

    typedArrays[2] = Int16Array.from(obj);
>typedArrays[2] = Int16Array.from(obj) : Int16Array
>typedArrays[2] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>2 : 2
>Int16Array.from(obj) : Int16Array
>Int16Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; }
>Int16Array : Int16ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; }
>obj : ArrayLike<数字>

    typedArrays[3] = Uint16Array.from(obj);
>typedArrays[3] = Uint16Array.from(obj) : Uint16Array
>typedArrays[3] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>3 : 3
>Uint16Array.from(obj) : Uint16Array
>Uint16Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; }
>Uint16Array : Uint16ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; }
>obj : ArrayLike<数字>

    typedArrays[4] = Int32Array.from(obj);
>typedArrays[4] = Int32Array.from(obj) : Int32Array
>typedArrays[4] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>4 : 4
>Int32Array.from(obj) : Int32Array
>Int32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; }
>Int32Array : Int32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; }
>obj : ArrayLike<数字>

    typedArrays[5] = Uint32Array.from(obj);
>typedArrays[5] = Uint32Array.from(obj) : Uint32Array
>typedArrays[5] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>5 : 5
>Uint32Array.from(obj) : Uint32Array
>Uint32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; }
>Uint32Array : Uint32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; }
>obj : ArrayLike<数字>

    typedArrays[6] = Float32Array.from(obj);
>typedArrays[6] = Float32Array.from(obj) : Float32Array
>typedArrays[6] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>6 : 6
>Float32Array.from(obj) : Float32Array
>Float32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; }
>Float32Array : Float32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; }
>obj : ArrayLike<数字>

    typedArrays[7] = Float64Array.from(obj);
>typedArrays[7] = Float64Array.from(obj) : Float64Array
>typedArrays[7] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>7 : 7
>Float64Array.from(obj) : Float64Array
>Float64Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; }
>Float64Array : Float64ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; }
>obj : ArrayLike<数字>

    typedArrays[8] = Uint8ClampedArray.from(obj);
>typedArrays[8] = Uint8ClampedArray.from(obj) : Uint8ClampedArray
>typedArrays[8] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>8 : 8
>Uint8ClampedArray.from(obj) : Uint8ClampedArray
>Uint8ClampedArray.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; }
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; }
>obj : ArrayLike<数字>

    return typedArrays;
>typedArrays : 任意[]
}

function CreateTypedArraysOf(obj) {
>CreateTypedArraysOf : (obj: 任意) => 任意[]
>obj : 任意
>类型别名 :=> 任意

    var typedArrays = [];
>typedArrays : 任意[]
>[] : 未定[]

    typedArrays[0] = Int8Array.of(...obj);
>typedArrays[0] = Int8Array.of(...obj) : Int8Array
>typedArrays[0] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>0 : 0
>Int8Array.of(...obj) : Int8Array
>Int8Array.of : (...items: 数字[]) => Int8Array
>Int8Array : Int8ArrayConstructor
>of : (...items: 数字[]) => Int8Array
>...obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意

    typedArrays[1] = Uint8Array.of(...obj);
>typedArrays[1] = Uint8Array.of(...obj) : Uint8Array
>typedArrays[1] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>1 : 1
>Uint8Array.of(...obj) : Uint8Array
>Uint8Array.of : (...items: 数字[]) => Uint8Array
>Uint8Array : Uint8ArrayConstructor
>of : (...items: 数字[]) => Uint8Array
>...obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意

    typedArrays[2] = Int16Array.of(...obj);
>typedArrays[2] = Int16Array.of(...obj) : Int16Array
>typedArrays[2] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>2 : 2
>Int16Array.of(...obj) : Int16Array
>Int16Array.of : (...items: 数字[]) => Int16Array
>Int16Array : Int16ArrayConstructor
>of : (...items: 数字[]) => Int16Array
>...obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意

    typedArrays[3] = Uint16Array.of(...obj);
>typedArrays[3] = Uint16Array.of(...obj) : Uint16Array
>typedArrays[3] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>3 : 3
>Uint16Array.of(...obj) : Uint16Array
>Uint16Array.of : (...items: 数字[]) => Uint16Array
>Uint16Array : Uint16ArrayConstructor
>of : (...items: 数字[]) => Uint16Array
>...obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意

    typedArrays[4] = Int32Array.of(...obj);
>typedArrays[4] = Int32Array.of(...obj) : Int32Array
>typedArrays[4] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>4 : 4
>Int32Array.of(...obj) : Int32Array
>Int32Array.of : (...items: 数字[]) => Int32Array
>Int32Array : Int32ArrayConstructor
>of : (...items: 数字[]) => Int32Array
>...obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意

    typedArrays[5] = Uint32Array.of(...obj);
>typedArrays[5] = Uint32Array.of(...obj) : Uint32Array
>typedArrays[5] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>5 : 5
>Uint32Array.of(...obj) : Uint32Array
>Uint32Array.of : (...items: 数字[]) => Uint32Array
>Uint32Array : Uint32ArrayConstructor
>of : (...items: 数字[]) => Uint32Array
>...obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意

    typedArrays[6] = Float32Array.of(...obj);
>typedArrays[6] = Float32Array.of(...obj) : Float32Array
>typedArrays[6] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>6 : 6
>Float32Array.of(...obj) : Float32Array
>Float32Array.of : (...items: 数字[]) => Float32Array
>Float32Array : Float32ArrayConstructor
>of : (...items: 数字[]) => Float32Array
>...obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意

    typedArrays[7] = Float64Array.of(...obj);
>typedArrays[7] = Float64Array.of(...obj) : Float64Array
>typedArrays[7] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>7 : 7
>Float64Array.of(...obj) : Float64Array
>Float64Array.of : (...items: 数字[]) => Float64Array
>Float64Array : Float64ArrayConstructor
>of : (...items: 数字[]) => Float64Array
>...obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意

    typedArrays[8] = Uint8ClampedArray.of(...obj);
>typedArrays[8] = Uint8ClampedArray.of(...obj) : Uint8ClampedArray
>typedArrays[8] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>8 : 8
>Uint8ClampedArray.of(...obj) : Uint8ClampedArray
>Uint8ClampedArray.of : (...items: 数字[]) => Uint8ClampedArray
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>of : (...items: 数字[]) => Uint8ClampedArray
>...obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意

    return typedArrays;
>typedArrays : 任意[]
}

function CreateTypedArraysOf2() {
>CreateTypedArraysOf2 : () => 任意[]

    var typedArrays = [];
>typedArrays : 任意[]
>[] : 未定[]

    typedArrays[0] = Int8Array.of(1,2,3,4);
>typedArrays[0] = Int8Array.of(1,2,3,4) : Int8Array
>typedArrays[0] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>0 : 0
>Int8Array.of(1,2,3,4) : Int8Array
>Int8Array.of : (...items: 数字[]) => Int8Array
>Int8Array : Int8ArrayConstructor
>of : (...items: 数字[]) => Int8Array
>1 : 1
>2 : 2
>3 : 3
>4 : 4

    typedArrays[1] = Uint8Array.of(1,2,3,4);
>typedArrays[1] = Uint8Array.of(1,2,3,4) : Uint8Array
>typedArrays[1] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>1 : 1
>Uint8Array.of(1,2,3,4) : Uint8Array
>Uint8Array.of : (...items: 数字[]) => Uint8Array
>Uint8Array : Uint8ArrayConstructor
>of : (...items: 数字[]) => Uint8Array
>1 : 1
>2 : 2
>3 : 3
>4 : 4

    typedArrays[2] = Int16Array.of(1,2,3,4);
>typedArrays[2] = Int16Array.of(1,2,3,4) : Int16Array
>typedArrays[2] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>2 : 2
>Int16Array.of(1,2,3,4) : Int16Array
>Int16Array.of : (...items: 数字[]) => Int16Array
>Int16Array : Int16ArrayConstructor
>of : (...items: 数字[]) => Int16Array
>1 : 1
>2 : 2
>3 : 3
>4 : 4

    typedArrays[3] = Uint16Array.of(1,2,3,4);
>typedArrays[3] = Uint16Array.of(1,2,3,4) : Uint16Array
>typedArrays[3] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>3 : 3
>Uint16Array.of(1,2,3,4) : Uint16Array
>Uint16Array.of : (...items: 数字[]) => Uint16Array
>Uint16Array : Uint16ArrayConstructor
>of : (...items: 数字[]) => Uint16Array
>1 : 1
>2 : 2
>3 : 3
>4 : 4

    typedArrays[4] = Int32Array.of(1,2,3,4);
>typedArrays[4] = Int32Array.of(1,2,3,4) : Int32Array
>typedArrays[4] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>4 : 4
>Int32Array.of(1,2,3,4) : Int32Array
>Int32Array.of : (...items: 数字[]) => Int32Array
>Int32Array : Int32ArrayConstructor
>of : (...items: 数字[]) => Int32Array
>1 : 1
>2 : 2
>3 : 3
>4 : 4

    typedArrays[5] = Uint32Array.of(1,2,3,4);
>typedArrays[5] = Uint32Array.of(1,2,3,4) : Uint32Array
>typedArrays[5] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>5 : 5
>Uint32Array.of(1,2,3,4) : Uint32Array
>Uint32Array.of : (...items: 数字[]) => Uint32Array
>Uint32Array : Uint32ArrayConstructor
>of : (...items: 数字[]) => Uint32Array
>1 : 1
>2 : 2
>3 : 3
>4 : 4

    typedArrays[6] = Float32Array.of(1,2,3,4);
>typedArrays[6] = Float32Array.of(1,2,3,4) : Float32Array
>typedArrays[6] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>6 : 6
>Float32Array.of(1,2,3,4) : Float32Array
>Float32Array.of : (...items: 数字[]) => Float32Array
>Float32Array : Float32ArrayConstructor
>of : (...items: 数字[]) => Float32Array
>1 : 1
>2 : 2
>3 : 3
>4 : 4

    typedArrays[7] = Float64Array.of(1,2,3,4);
>typedArrays[7] = Float64Array.of(1,2,3,4) : Float64Array
>typedArrays[7] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>7 : 7
>Float64Array.of(1,2,3,4) : Float64Array
>Float64Array.of : (...items: 数字[]) => Float64Array
>Float64Array : Float64ArrayConstructor
>of : (...items: 数字[]) => Float64Array
>1 : 1
>2 : 2
>3 : 3
>4 : 4

    typedArrays[8] = Uint8ClampedArray.of(1,2,3,4);
>typedArrays[8] = Uint8ClampedArray.of(1,2,3,4) : Uint8ClampedArray
>typedArrays[8] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>8 : 8
>Uint8ClampedArray.of(1,2,3,4) : Uint8ClampedArray
>Uint8ClampedArray.of : (...items: 数字[]) => Uint8ClampedArray
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>of : (...items: 数字[]) => Uint8ClampedArray
>1 : 1
>2 : 2
>3 : 3
>4 : 4

    return typedArrays;
>typedArrays : 任意[]
}

function CreateTypedArraysFromMapFn(obj:ArrayLike<number>, mapFn: (n:number, v:number)=> number) {
>CreateTypedArraysFromMapFn : (obj: ArrayLike<数字>, mapFn: (n: 数字, v: 数字) => 数字) => 任意[]
>obj : ArrayLike<数字>
>ArrayLike : ArrayLike<T>
>mapFn : (n: 数字, v: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

    var typedArrays = [];
>typedArrays : 任意[]
>[] : 未定[]

    typedArrays[0] = Int8Array.from(obj, mapFn);
>typedArrays[0] = Int8Array.from(obj, mapFn) : Int8Array
>typedArrays[0] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>0 : 0
>Int8Array.from(obj, mapFn) : Int8Array
>Int8Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; }
>Int8Array : Int8ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字

    typedArrays[1] = Uint8Array.from(obj, mapFn);
>typedArrays[1] = Uint8Array.from(obj, mapFn) : Uint8Array
>typedArrays[1] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>1 : 1
>Uint8Array.from(obj, mapFn) : Uint8Array
>Uint8Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; }
>Uint8Array : Uint8ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字

    typedArrays[2] = Int16Array.from(obj, mapFn);
>typedArrays[2] = Int16Array.from(obj, mapFn) : Int16Array
>typedArrays[2] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>2 : 2
>Int16Array.from(obj, mapFn) : Int16Array
>Int16Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; }
>Int16Array : Int16ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字

    typedArrays[3] = Uint16Array.from(obj, mapFn);
>typedArrays[3] = Uint16Array.from(obj, mapFn) : Uint16Array
>typedArrays[3] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>3 : 3
>Uint16Array.from(obj, mapFn) : Uint16Array
>Uint16Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; }
>Uint16Array : Uint16ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字

    typedArrays[4] = Int32Array.from(obj, mapFn);
>typedArrays[4] = Int32Array.from(obj, mapFn) : Int32Array
>typedArrays[4] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>4 : 4
>Int32Array.from(obj, mapFn) : Int32Array
>Int32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; }
>Int32Array : Int32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字

    typedArrays[5] = Uint32Array.from(obj, mapFn);
>typedArrays[5] = Uint32Array.from(obj, mapFn) : Uint32Array
>typedArrays[5] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>5 : 5
>Uint32Array.from(obj, mapFn) : Uint32Array
>Uint32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; }
>Uint32Array : Uint32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字

    typedArrays[6] = Float32Array.from(obj, mapFn);
>typedArrays[6] = Float32Array.from(obj, mapFn) : Float32Array
>typedArrays[6] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>6 : 6
>Float32Array.from(obj, mapFn) : Float32Array
>Float32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; }
>Float32Array : Float32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字

    typedArrays[7] = Float64Array.from(obj, mapFn);
>typedArrays[7] = Float64Array.from(obj, mapFn) : Float64Array
>typedArrays[7] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>7 : 7
>Float64Array.from(obj, mapFn) : Float64Array
>Float64Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; }
>Float64Array : Float64ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字

    typedArrays[8] = Uint8ClampedArray.from(obj, mapFn);
>typedArrays[8] = Uint8ClampedArray.from(obj, mapFn) : Uint8ClampedArray
>typedArrays[8] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>8 : 8
>Uint8ClampedArray.from(obj, mapFn) : Uint8ClampedArray
>Uint8ClampedArray.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; }
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字

    return typedArrays;
>typedArrays : 任意[]
}

function CreateTypedArraysFromThisObj(obj:ArrayLike<number>, mapFn: (n:number, v:number)=> number, thisArg: {}) {
>CreateTypedArraysFromThisObj : (obj: ArrayLike<数字>, mapFn: (n: 数字, v: 数字) => 数字, thisArg: {}) => 任意[]
>obj : ArrayLike<数字>
>ArrayLike : ArrayLike<T>
>mapFn : (n: 数字, v: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字
>thisArg : {}

    var typedArrays = [];
>typedArrays : 任意[]
>[] : 未定[]

    typedArrays[0] = Int8Array.from(obj, mapFn, thisArg);
>typedArrays[0] = Int8Array.from(obj, mapFn, thisArg) : Int8Array
>typedArrays[0] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>0 : 0
>Int8Array.from(obj, mapFn, thisArg) : Int8Array
>Int8Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; }
>Int8Array : Int8ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int8Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字
>thisArg : {}

    typedArrays[1] = Uint8Array.from(obj, mapFn, thisArg);
>typedArrays[1] = Uint8Array.from(obj, mapFn, thisArg) : Uint8Array
>typedArrays[1] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>1 : 1
>Uint8Array.from(obj, mapFn, thisArg) : Uint8Array
>Uint8Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; }
>Uint8Array : Uint8ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字
>thisArg : {}

    typedArrays[2] = Int16Array.from(obj, mapFn, thisArg);
>typedArrays[2] = Int16Array.from(obj, mapFn, thisArg) : Int16Array
>typedArrays[2] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>2 : 2
>Int16Array.from(obj, mapFn, thisArg) : Int16Array
>Int16Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; }
>Int16Array : Int16ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int16Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字
>thisArg : {}

    typedArrays[3] = Uint16Array.from(obj, mapFn, thisArg);
>typedArrays[3] = Uint16Array.from(obj, mapFn, thisArg) : Uint16Array
>typedArrays[3] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>3 : 3
>Uint16Array.from(obj, mapFn, thisArg) : Uint16Array
>Uint16Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; }
>Uint16Array : Uint16ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint16Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字
>thisArg : {}

    typedArrays[4] = Int32Array.from(obj, mapFn, thisArg);
>typedArrays[4] = Int32Array.from(obj, mapFn, thisArg) : Int32Array
>typedArrays[4] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>4 : 4
>Int32Array.from(obj, mapFn, thisArg) : Int32Array
>Int32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; }
>Int32Array : Int32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Int32Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字
>thisArg : {}

    typedArrays[5] = Uint32Array.from(obj, mapFn, thisArg);
>typedArrays[5] = Uint32Array.from(obj, mapFn, thisArg) : Uint32Array
>typedArrays[5] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>5 : 5
>Uint32Array.from(obj, mapFn, thisArg) : Uint32Array
>Uint32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; }
>Uint32Array : Uint32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint32Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字
>thisArg : {}

    typedArrays[6] = Float32Array.from(obj, mapFn, thisArg);
>typedArrays[6] = Float32Array.from(obj, mapFn, thisArg) : Float32Array
>typedArrays[6] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>6 : 6
>Float32Array.from(obj, mapFn, thisArg) : Float32Array
>Float32Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; }
>Float32Array : Float32ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float32Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字
>thisArg : {}

    typedArrays[7] = Float64Array.from(obj, mapFn, thisArg);
>typedArrays[7] = Float64Array.from(obj, mapFn, thisArg) : Float64Array
>typedArrays[7] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>7 : 7
>Float64Array.from(obj, mapFn, thisArg) : Float64Array
>Float64Array.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; }
>Float64Array : Float64ArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Float64Array; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字
>thisArg : {}

    typedArrays[8] = Uint8ClampedArray.from(obj, mapFn, thisArg);
>typedArrays[8] = Uint8ClampedArray.from(obj, mapFn, thisArg) : Uint8ClampedArray
>typedArrays[8] : 任意
>类型别名 :=> 任意
>typedArrays : 任意[]
>8 : 8
>Uint8ClampedArray.from(obj, mapFn, thisArg) : Uint8ClampedArray
>Uint8ClampedArray.from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; }
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>from : { (arrayLike: ArrayLike<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; (arrayLike: Iterable<数字>, mapfn?: (v: 数字, k: 数字) => 数字, thisArg?: 任意): Uint8ClampedArray; }
>obj : ArrayLike<数字>
>mapFn : (n: 数字, v: 数字) => 数字
>thisArg : {}

    return typedArrays;
>typedArrays : 任意[]
}
