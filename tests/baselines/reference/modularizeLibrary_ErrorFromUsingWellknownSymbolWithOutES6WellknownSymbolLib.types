=== tests/cases/compiler/modularizeLibrary_ErrorFromUsingWellknownSymbolWithOutES6WellknownSymbolLib.ts ===
function f(x: number, y: number, z: number) {
>f : (x: 数字, y: 数字, z: 数字) => 任意[]
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字

    return Array.from(arguments);
>Array.from(arguments) : 任意[]
>Array.from : <T, U = T>(arrayLike: ArrayLike<T>, mapfn?: (v: T, k: 数字) => U, thisArg?: 任意) => U[]
>Array : ArrayConstructor
>from : <T, U = T>(arrayLike: ArrayLike<T>, mapfn?: (v: T, k: 数字) => U, thisArg?: 任意) => U[]
>arguments : IArguments
}

f(1, 2, 3);   // no error
>f(1, 2, 3) : 任意[]
>f : (x: 数字, y: 数字, z: 数字) => 任意[]
>1 : 1
>2 : 2
>3 : 3

let a = ['c', 'd'];
>a : 文字[]
>['c', 'd'] : 文字[]
>'c' : "c"
>'d' : "d"

a[Symbol.isConcatSpreadable] = false;
>a[Symbol.isConcatSpreadable] = false : 为假
>类型别名 :=> 为假
>a[Symbol.isConcatSpreadable] : 文字
>类型别名 :=> 文字
>a : 文字[]
>Symbol.isConcatSpreadable : 任意
>类型别名 :=> 任意
>Symbol : 任意
>类型别名 :=> 任意
>isConcatSpreadable : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

