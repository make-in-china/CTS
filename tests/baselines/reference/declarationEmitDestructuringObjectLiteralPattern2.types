=== tests/cases/compiler/declarationEmitDestructuringObjectLiteralPattern2.ts ===
var { a: x11, b: { a: y11, b: { a: z11 }}} = { a: 1, b: { a: "hello", b: { a: true } } };
>a : 任意
>类型别名 :=> 任意
>x11 : 数字
>类型别名 :=> 数字
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y11 : 文字
>类型别名 :=> 文字
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>z11 : 真假
>类型别名 :=> 真假
>{ a: 1, b: { a: "hello", b: { a: true } } } : { a: 数字; b: { a: 文字; b: { a: 真假; }; }; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : { a: 文字; b: { a: 真假; }; }
>{ a: "hello", b: { a: true } } : { a: 文字; b: { a: 真假; }; }
>a : 文字
>类型别名 :=> 文字
>"hello" : "hello"
>b : { a: 真假; }
>{ a: true } : { a: 真假; }
>a : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

function f15() {
>f15 : () => { a4: 文字; b4: 数字; c4: 真假; }

    var a4 = "hello";
>a4 : 文字
>类型别名 :=> 文字
>"hello" : "hello"

    var b4 = 1;
>b4 : 数字
>类型别名 :=> 数字
>1 : 1

    var c4 = true;
>c4 : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

    return { a4, b4, c4 };
>{ a4, b4, c4 } : { a4: 文字; b4: 数字; c4: 真假; }
>a4 : 文字
>类型别名 :=> 文字
>b4 : 数字
>类型别名 :=> 数字
>c4 : 为真
>类型别名 :=> 为真
}
var { a4, b4, c4 } = f15();
>a4 : 文字
>类型别名 :=> 文字
>b4 : 数字
>类型别名 :=> 数字
>c4 : 真假
>类型别名 :=> 真假
>f15() : { a4: 文字; b4: 数字; c4: 真假; }
>f15 : () => { a4: 文字; b4: 数字; c4: 真假; }

module m {
>m : 类为 m

    export var { a4, b4, c4 } = f15();
>a4 : 文字
>类型别名 :=> 文字
>b4 : 数字
>类型别名 :=> 数字
>c4 : 真假
>类型别名 :=> 真假
>f15() : { a4: 文字; b4: 数字; c4: 真假; }
>f15 : () => { a4: 文字; b4: 数字; c4: 真假; }
}
