=== tests/cases/compiler/declarationEmitDestructuringObjectLiteralPattern2.ts ===
var { a: x11, b: { a: y11, b: { a: z11 }}} = { a: 1, b: { a: "hello", b: { a: true } } };
>a : any
>类型别名 :=> 任意
>x11 : number
>类型别名 :=> 数字
>b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>y11 : string
>类型别名 :=> 文字
>b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>z11 : boolean
>类型别名 :=> 真假
>{ a: 1, b: { a: "hello", b: { a: true } } } : { a: number; b: { a: string; b: { a: boolean; }; }; }
>a : number
>类型别名 :=> 数字
>1 : 1
>b : { a: string; b: { a: boolean; }; }
>{ a: "hello", b: { a: true } } : { a: string; b: { a: boolean; }; }
>a : string
>类型别名 :=> 文字
>"hello" : "hello"
>b : { a: boolean; }
>{ a: true } : { a: boolean; }
>a : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

function f15() {
>f15 : () => { a4: string; b4: number; c4: boolean; }

    var a4 = "hello";
>a4 : string
>类型别名 :=> 文字
>"hello" : "hello"

    var b4 = 1;
>b4 : number
>类型别名 :=> 数字
>1 : 1

    var c4 = true;
>c4 : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

    return { a4, b4, c4 };
>{ a4, b4, c4 } : { a4: string; b4: number; c4: boolean; }
>a4 : string
>类型别名 :=> 文字
>b4 : number
>类型别名 :=> 数字
>c4 : true
>类型别名 :=> 为真
}
var { a4, b4, c4 } = f15();
>a4 : string
>类型别名 :=> 文字
>b4 : number
>类型别名 :=> 数字
>c4 : boolean
>类型别名 :=> 真假
>f15() : { a4: string; b4: number; c4: boolean; }
>f15 : () => { a4: string; b4: number; c4: boolean; }

module m {
>m : typeof m

    export var { a4, b4, c4 } = f15();
>a4 : string
>类型别名 :=> 文字
>b4 : number
>类型别名 :=> 数字
>c4 : boolean
>类型别名 :=> 真假
>f15() : { a4: string; b4: number; c4: boolean; }
>f15 : () => { a4: string; b4: number; c4: boolean; }
}
