=== tests/cases/conformance/types/objectTypeLiteral/methodSignatures/functionLiterals.ts ===
// PropName<TypeParamList>(ParamList):ReturnType is equivalent to PropName: { <TypeParamList>(ParamList): ReturnType }

var b: {
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }

    func1(x: number): number;         // Method signature
>func1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    func2: (x: number) => number;     // Function type literal
>func2 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    func3: { (x: number): number };   // Object type literal
>func3 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
}

// no errors
b.func1 = b.func2;
>b.func1 = b.func2 : (x: 数字) => 数字
>b.func1 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func1 : (x: 数字) => 数字
>b.func2 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func2 : (x: 数字) => 数字

b.func1 = b.func3;
>b.func1 = b.func3 : (x: 数字) => 数字
>b.func1 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func1 : (x: 数字) => 数字
>b.func3 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func3 : (x: 数字) => 数字

b.func2 = b.func1;
>b.func2 = b.func1 : (x: 数字) => 数字
>b.func2 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func2 : (x: 数字) => 数字
>b.func1 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func1 : (x: 数字) => 数字

b.func2 = b.func3;
>b.func2 = b.func3 : (x: 数字) => 数字
>b.func2 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func2 : (x: 数字) => 数字
>b.func3 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func3 : (x: 数字) => 数字

b.func3 = b.func1;
>b.func3 = b.func1 : (x: 数字) => 数字
>b.func3 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func3 : (x: 数字) => 数字
>b.func1 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func1 : (x: 数字) => 数字

b.func3 = b.func2;
>b.func3 = b.func2 : (x: 数字) => 数字
>b.func3 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func3 : (x: 数字) => 数字
>b.func2 : (x: 数字) => 数字
>b : { func1(x: 数字): 数字; func2: (x: 数字) => 数字; func3: (x: 数字) => 数字; }
>func2 : (x: 数字) => 数字

var c: {
>c : { func4(x: 数字): 数字; func4(s: 文字): 文字; func5: { (x: 数字): 数字; (s: 文字): 文字; }; }

    func4(x: number): number;
>func4 : { (x: 数字): 数字; (s: 文字): 文字; }
>x : 数字
>类型别名 :=> 数字

    func4(s: string): string;
>func4 : { (x: 数字): 数字; (s: 文字): 文字; }
>s : 文字
>类型别名 :=> 文字

    func5: {
>func5 : { (x: 数字): 数字; (s: 文字): 文字; }

        (x: number): number;
>x : 数字
>类型别名 :=> 数字

        (s: string): string;
>s : 文字
>类型别名 :=> 文字

    };
};

// no errors
c.func4 = c.func5;
>c.func4 = c.func5 : { (x: 数字): 数字; (s: 文字): 文字; }
>c.func4 : { (x: 数字): 数字; (s: 文字): 文字; }
>c : { func4(x: 数字): 数字; func4(s: 文字): 文字; func5: { (x: 数字): 数字; (s: 文字): 文字; }; }
>func4 : { (x: 数字): 数字; (s: 文字): 文字; }
>c.func5 : { (x: 数字): 数字; (s: 文字): 文字; }
>c : { func4(x: 数字): 数字; func4(s: 文字): 文字; func5: { (x: 数字): 数字; (s: 文字): 文字; }; }
>func5 : { (x: 数字): 数字; (s: 文字): 文字; }

c.func5 = c.func4;
>c.func5 = c.func4 : { (x: 数字): 数字; (s: 文字): 文字; }
>c.func5 : { (x: 数字): 数字; (s: 文字): 文字; }
>c : { func4(x: 数字): 数字; func4(s: 文字): 文字; func5: { (x: 数字): 数字; (s: 文字): 文字; }; }
>func5 : { (x: 数字): 数字; (s: 文字): 文字; }
>c.func4 : { (x: 数字): 数字; (s: 文字): 文字; }
>c : { func4(x: 数字): 数字; func4(s: 文字): 文字; func5: { (x: 数字): 数字; (s: 文字): 文字; }; }
>func4 : { (x: 数字): 数字; (s: 文字): 文字; }

// generic versions
var b2: {
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }

    func1<T>(x: T): number;         // Method signature
>func1 : <T>(x: T) => 数字
>T : T
>x : T
>T : T

    func2: <T>(x: T) => number;     // Function type literal
>func2 : <T>(x: T) => 数字
>T : T
>x : T
>T : T

    func3: { <T>(x: T): number };   // Object type literal
>func3 : <T>(x: T) => 数字
>T : T
>x : T
>T : T
}

// no errors
b2.func1 = b2.func2;
>b2.func1 = b2.func2 : <T>(x: T) => 数字
>b2.func1 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func1 : <T>(x: T) => 数字
>b2.func2 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func2 : <T>(x: T) => 数字

b2.func1 = b2.func3;
>b2.func1 = b2.func3 : <T>(x: T) => 数字
>b2.func1 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func1 : <T>(x: T) => 数字
>b2.func3 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func3 : <T>(x: T) => 数字

b2.func2 = b2.func1;
>b2.func2 = b2.func1 : <T>(x: T) => 数字
>b2.func2 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func2 : <T>(x: T) => 数字
>b2.func1 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func1 : <T>(x: T) => 数字

b2.func2 = b2.func3;
>b2.func2 = b2.func3 : <T>(x: T) => 数字
>b2.func2 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func2 : <T>(x: T) => 数字
>b2.func3 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func3 : <T>(x: T) => 数字

b2.func3 = b2.func1;
>b2.func3 = b2.func1 : <T>(x: T) => 数字
>b2.func3 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func3 : <T>(x: T) => 数字
>b2.func1 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func1 : <T>(x: T) => 数字

b2.func3 = b2.func2;
>b2.func3 = b2.func2 : <T>(x: T) => 数字
>b2.func3 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func3 : <T>(x: T) => 数字
>b2.func2 : <T>(x: T) => 数字
>b2 : { func1<T>(x: T): 数字; func2: <T>(x: T) => 数字; func3: <T>(x: T) => 数字; }
>func2 : <T>(x: T) => 数字

var c2: {
>c2 : { func4<T>(x: T): 数字; func4<T>(s: T): 文字; func5: { <T>(x: T): 数字; <T>(s: T): 文字; }; }

    func4<T>(x: T): number;
>func4 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>T : T
>x : T
>T : T

    func4<T>(s: T): string;
>func4 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>T : T
>s : T
>T : T

    func5: {
>func5 : { <T>(x: T): 数字; <T>(s: T): 文字; }

        <T>(x: T): number;
>T : T
>x : T
>T : T

        <T>(s: T): string;
>T : T
>s : T
>T : T

    };
};

// no errors
c2.func4 = c2.func5;
>c2.func4 = c2.func5 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>c2.func4 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>c2 : { func4<T>(x: T): 数字; func4<T>(s: T): 文字; func5: { <T>(x: T): 数字; <T>(s: T): 文字; }; }
>func4 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>c2.func5 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>c2 : { func4<T>(x: T): 数字; func4<T>(s: T): 文字; func5: { <T>(x: T): 数字; <T>(s: T): 文字; }; }
>func5 : { <T>(x: T): 数字; <T>(s: T): 文字; }

c2.func5 = c2.func4;
>c2.func5 = c2.func4 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>c2.func5 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>c2 : { func4<T>(x: T): 数字; func4<T>(s: T): 文字; func5: { <T>(x: T): 数字; <T>(s: T): 文字; }; }
>func5 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>c2.func4 : { <T>(x: T): 数字; <T>(s: T): 文字; }
>c2 : { func4<T>(x: T): 数字; func4<T>(s: T): 文字; func5: { <T>(x: T): 数字; <T>(s: T): 文字; }; }
>func4 : { <T>(x: T): 数字; <T>(s: T): 文字; }

