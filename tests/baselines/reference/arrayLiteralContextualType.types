=== tests/cases/compiler/arrayLiteralContextualType.ts ===
interface IAnimal {
>IAnimal : IAnimal

    name: string;
>name : string
>类型别名 :=> 文字
}

class Giraffe {
>Giraffe : Giraffe

    name = "Giraffe";
>name : string
>类型别名 :=> 文字
>"Giraffe" : "Giraffe"

    neckLength = "3m";
>neckLength : string
>类型别名 :=> 文字
>"3m" : "3m"
}

class Elephant {
>Elephant : Elephant

    name = "Elephant";
>name : string
>类型别名 :=> 文字
>"Elephant" : "Elephant"

    trunkDiameter = "20cm";
>trunkDiameter : string
>类型别名 :=> 文字
>"20cm" : "20cm"
}

function foo(animals: IAnimal[]) { }
>foo : (animals: IAnimal[]) => void
>animals : IAnimal[]
>IAnimal : IAnimal

function bar(animals: { [n: number]: IAnimal }) { }
>bar : (animals: { [n: number]: IAnimal; }) => void
>animals : { [n: number]: IAnimal; }
>n : number
>类型别名 :=> 数字
>IAnimal : IAnimal

foo([
>foo([    new Giraffe(),    new Elephant()]) : void
>类型别名 :=> 无值
>foo : (animals: IAnimal[]) => void
>[    new Giraffe(),    new Elephant()] : (Giraffe | Elephant)[]

    new Giraffe(),
>new Giraffe() : Giraffe
>Giraffe : typeof Giraffe

    new Elephant()
>new Elephant() : Elephant
>Elephant : typeof Elephant

]); // Legal because of the contextual type IAnimal provided by the parameter
bar([
>bar([    new Giraffe(),    new Elephant()]) : void
>类型别名 :=> 无值
>bar : (animals: { [n: number]: IAnimal; }) => void
>[    new Giraffe(),    new Elephant()] : (Giraffe | Elephant)[]

    new Giraffe(),
>new Giraffe() : Giraffe
>Giraffe : typeof Giraffe

    new Elephant()
>new Elephant() : Elephant
>Elephant : typeof Elephant

]); // Legal because of the contextual type IAnimal provided by the parameter

var arr = [new Giraffe(), new Elephant()];
>arr : (Giraffe | Elephant)[]
>[new Giraffe(), new Elephant()] : (Giraffe | Elephant)[]
>new Giraffe() : Giraffe
>Giraffe : typeof Giraffe
>new Elephant() : Elephant
>Elephant : typeof Elephant

foo(arr); // ok because arr is Array<Giraffe|Elephant> not {}[]
>foo(arr) : void
>类型别名 :=> 无值
>foo : (animals: IAnimal[]) => void
>arr : (Giraffe | Elephant)[]

bar(arr); // ok because arr is Array<Giraffe|Elephant> not {}[]
>bar(arr) : void
>类型别名 :=> 无值
>bar : (animals: { [n: number]: IAnimal; }) => void
>arr : (Giraffe | Elephant)[]

