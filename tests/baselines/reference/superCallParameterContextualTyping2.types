=== tests/cases/conformance/expressions/contextualTyping/superCallParameterContextualTyping2.ts ===
class A<T1, T2> {
>A : A<T1, T2>
>T1 : T1
>T2 : T2

    constructor(private map: (value: T1) => T2) {
>map : (value: T1) => T2
>value : T1
>T1 : T1
>T2 : T2

    }
}

class C extends A<number, string> {
>C : C
>A : A<数字, 文字>

    // Ensure 'value' is not of type 'any' by invoking it with type arguments.
    constructor() { super(value => String(value<string>())); }
>super(value => String(value<string>())) : 无值
>类型别名 :=> 无值
>super : 类为 A
>value => String(value<string>()) : (value: 数字) => 文字
>value : 数字
>类型别名 :=> 数字
>String(value<string>()) : 文字
>类型别名 :=> 文字
>String : StringConstructor
>value<string>() : 任意
>类型别名 :=> 任意
>value : 数字
>类型别名 :=> 数字
}
