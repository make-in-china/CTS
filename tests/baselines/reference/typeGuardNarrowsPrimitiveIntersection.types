=== tests/cases/conformance/expressions/typeGuards/typeGuardNarrowsPrimitiveIntersection.ts ===
type Tag = {__tag: any};
>Tag : Tag
>__tag : any
>类型别名 :=> 任意

declare function isNonBlank(value: string) : value is (string & Tag);
>isNonBlank : (value: string) => value is string & Tag
>value : string
>类型别名 :=> 文字
>value : any
>类型别名 :=> 任意
>Tag : Tag

declare function doThis(value: string & Tag): void;
>doThis : (value: string & Tag) => void
>value : string & Tag
>Tag : Tag

declare function doThat(value: string) : void;
>doThat : (value: string) => void
>value : string
>类型别名 :=> 文字

let value: string;
>value : string
>类型别名 :=> 文字

if (isNonBlank(value)) {
>isNonBlank(value) : boolean
>类型别名 :=> 真假
>isNonBlank : (value: string) => value is string & Tag
>value : string
>类型别名 :=> 文字

    doThis(value);
>doThis(value) : void
>类型别名 :=> 无值
>doThis : (value: string & Tag) => void
>value : string & Tag

} else {
    doThat(value);
>doThat(value) : void
>类型别名 :=> 无值
>doThat : (value: string) => void
>value : string
>类型别名 :=> 文字
}


const enum Tag2 {}
>Tag2 : Tag2

declare function isNonBlank2(value: string) : value is (string & Tag2);
>isNonBlank2 : (value: string) => value is string & Tag2
>value : string
>类型别名 :=> 文字
>value : any
>类型别名 :=> 任意
>Tag2 : Tag2

declare function doThis2(value: string & Tag2): void;
>doThis2 : (value: string & Tag2) => void
>value : string & Tag2
>Tag2 : Tag2

declare function doThat2(value: string) : void;
>doThat2 : (value: string) => void
>value : string
>类型别名 :=> 文字

if (isNonBlank2(value)) {
>isNonBlank2(value) : boolean
>类型别名 :=> 真假
>isNonBlank2 : (value: string) => value is string & Tag2
>value : string
>类型别名 :=> 文字

    doThis2(value);
>doThis2(value) : void
>类型别名 :=> 无值
>doThis2 : (value: string & Tag2) => void
>value : string & Tag2

} else {
    doThat2(value);
>doThat2(value) : void
>类型别名 :=> 无值
>doThat2 : (value: string) => void
>value : string
>类型别名 :=> 文字
}

