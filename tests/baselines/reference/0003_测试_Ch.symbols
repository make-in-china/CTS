=== /b/node_modules/@typesch/testCh/index.d.cts ===
//@@{ 测试:foo, 属性1:bar, 属性2:baz, 合成属性:nested, 甲:a, 乙:b }
导出 类型 测试 = {
>测试 : Symbol(测试, Decl(index.d.cts, 0, 0))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo

  属性1: 数字 | 空值;
>属性1 : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

  属性2: 文字;
>属性2 : Symbol(属性2, Decl(index.d.cts, 2, 15))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz

  合成属性: {
>合成属性 : Symbol(合成属性, Decl(index.d.cts, 3, 10))
>节点别名 : #合成属性 => nested
>符号别名 : #合成属性 => nested

    甲: 数字;
>甲 : Symbol(甲, Decl(index.d.cts, 4, 9))
>节点别名 : #甲 => a
>符号别名 : #甲 => a

    乙: 文字 | 空值;
>乙 : Symbol(乙, Decl(index.d.cts, 5, 10))
>节点别名 : #乙 => b
>符号别名 : #乙 => b
  }
}

//@@{ 元素1:elem1, 元素2:elem2 }
//@{ 测试2:bar }
导出 类型 测试2 = {
>测试2 : Symbol(测试2, Decl(index.d.cts, 8, 1))
>节点别名 : #测试2 => bar
>符号别名 : #测试2 => bar

  元素1: 数字 | 空值;
>元素1 : Symbol(元素1, Decl(index.d.cts, 12, 13))
>节点别名 : #元素1 => elem1
>符号别名 : #元素1 => elem1

  元素2: 测试 | 空值;
>元素2 : Symbol(元素2, Decl(index.d.cts, 13, 15))
>节点别名 : #元素2 => elem2
>符号别名 : #元素2 => elem2
>测试 : Symbol(测试, Decl(index.d.cts, 0, 0))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo
}

导出 函数 取属性< T, K 扩展 键集 T> (对象值:T, 键: K): T[K]
>取属性 : Symbol(取属性, Decl(index.d.cts, 15, 1))
>T : Symbol(T, Decl(index.d.cts, 17, 10))
>K : Symbol(K, Decl(index.d.cts, 17, 13))
>T : Symbol(T, Decl(index.d.cts, 17, 10))
>对象值 : Symbol(对象值, Decl(index.d.cts, 17, 26))
>T : Symbol(T, Decl(index.d.cts, 17, 10))
>键 : Symbol(键, Decl(index.d.cts, 17, 32))
>K : Symbol(K, Decl(index.d.cts, 17, 13))
>T : Symbol(T, Decl(index.d.cts, 17, 10))
>K : Symbol(K, Decl(index.d.cts, 17, 13))

导出 函数 置属性< T, K 扩展 键集 T> (对象值:T, 键: K, 值: T[K]): T[K]
>置属性 : Symbol(置属性, Decl(index.d.cts, 17, 44))
>T : Symbol(T, Decl(index.d.cts, 18, 10))
>K : Symbol(K, Decl(index.d.cts, 18, 13))
>T : Symbol(T, Decl(index.d.cts, 18, 10))
>对象值 : Symbol(对象值, Decl(index.d.cts, 18, 26))
>T : Symbol(T, Decl(index.d.cts, 18, 10))
>键 : Symbol(键, Decl(index.d.cts, 18, 32))
>K : Symbol(K, Decl(index.d.cts, 18, 13))
>值 : Symbol(值, Decl(index.d.cts, 18, 38))
>T : Symbol(T, Decl(index.d.cts, 18, 10))
>K : Symbol(K, Decl(index.d.cts, 18, 13))
>T : Symbol(T, Decl(index.d.cts, 18, 10))
>K : Symbol(K, Decl(index.d.cts, 18, 13))

//@@{ "事件1":"ev1", "事件2":"ev2" }
导出 接口 事件类型{
>事件类型 : Symbol(事件类型, Decl(index.d.cts, 18, 53))

  "事件1":测试2;
>测试2 : Symbol(测试2, Decl(index.d.cts, 8, 1))
>节点别名 : #测试2 => bar
>符号别名 : #测试2 => bar

  "事件2":测试2
>测试2 : Symbol(测试2, Decl(index.d.cts, 8, 1))
>节点别名 : #测试2 => bar
>符号别名 : #测试2 => bar
}

导出 函数 引发事件< K 扩展 键集 事件类型> (事件:K, 实体:测试):无值
>引发事件 : Symbol(引发事件, Decl(index.d.cts, 24, 1))
>K : Symbol(K, Decl(index.d.cts, 26, 11))
>事件类型 : Symbol(事件类型, Decl(index.d.cts, 18, 53))
>事件 : Symbol(事件, Decl(index.d.cts, 26, 27))
>K : Symbol(K, Decl(index.d.cts, 26, 11))
>实体 : Symbol(实体, Decl(index.d.cts, 26, 32))
>测试 : Symbol(测试, Decl(index.d.cts, 0, 0))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo

//**************** 分割线 *******************//

=== /b/测试_3_ch.cts ===
导入 { 测试, 取属性, 置属性, 引发事件, 事件类型 } 来自 "testCh"
>测试 : Symbol(测试, Decl(测试_3_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo
>取属性 : Symbol(取属性, Decl(测试_3_ch.cts, 0, 8))
>置属性 : Symbol(置属性, Decl(测试_3_ch.cts, 0, 13))
>引发事件 : Symbol(引发事件, Decl(测试_3_ch.cts, 0, 18))
>事件类型 : Symbol(事件类型, Decl(测试_3_ch.cts, 0, 24))

常量 aFoo: 测试 = { 属性1: 3, 属性2: "b", 合成属性: { 甲: 1, 乙: "y" } };
>aFoo : Symbol(aFoo, Decl(测试_3_ch.cts, 2, 2))
>测试 : Symbol(测试, Decl(测试_3_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo
>属性1 : Symbol(属性1, Decl(测试_3_ch.cts, 2, 15))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar
>属性2 : Symbol(属性2, Decl(测试_3_ch.cts, 2, 23))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz
>合成属性 : Symbol(合成属性, Decl(测试_3_ch.cts, 2, 33))
>节点别名 : #合成属性 => nested
>符号别名 : #合成属性 => nested
>甲 : Symbol(甲, Decl(测试_3_ch.cts, 2, 41))
>节点别名 : #甲 => a
>符号别名 : #甲 => a
>乙 : Symbol(乙, Decl(测试_3_ch.cts, 2, 47))
>节点别名 : #乙 => b
>符号别名 : #乙 => b

常量 aFoo2: 测试 = { 属性1: 4, 属性2: "c", 合成属性: { 甲: 2, 乙: "z" } };
>aFoo2 : Symbol(aFoo2, Decl(测试_3_ch.cts, 3, 2))
>测试 : Symbol(测试, Decl(测试_3_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo
>属性1 : Symbol(属性1, Decl(测试_3_ch.cts, 3, 16))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar
>属性2 : Symbol(属性2, Decl(测试_3_ch.cts, 3, 24))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz
>合成属性 : Symbol(合成属性, Decl(测试_3_ch.cts, 3, 34))
>节点别名 : #合成属性 => nested
>符号别名 : #合成属性 => nested
>甲 : Symbol(甲, Decl(测试_3_ch.cts, 3, 42))
>节点别名 : #甲 => a
>符号别名 : #甲 => a
>乙 : Symbol(乙, Decl(测试_3_ch.cts, 3, 48))
>节点别名 : #乙 => b
>符号别名 : #乙 => b

常量 数组值: 测试[] = [aFoo, aFoo2]
>数组值 : Symbol(数组值, Decl(测试_3_ch.cts, 4, 2))
>测试 : Symbol(测试, Decl(测试_3_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo
>aFoo : Symbol(aFoo, Decl(测试_3_ch.cts, 2, 2))
>aFoo2 : Symbol(aFoo2, Decl(测试_3_ch.cts, 3, 2))

函数 组合(A:文字, B:文字){
>组合 : Symbol(组合, Decl(测试_3_ch.cts, 4, 28))
>A : Symbol(A, Decl(测试_3_ch.cts, 5, 6))
>B : Symbol(B, Decl(测试_3_ch.cts, 5, 11))

  返回(A + B)
>A : Symbol(A, Decl(测试_3_ch.cts, 5, 6))
>B : Symbol(B, Decl(测试_3_ch.cts, 5, 11))
}
// 1
aFoo["属性1"]
>aFoo : Symbol(aFoo, Decl(测试_3_ch.cts, 2, 2))
>"属性1" : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

常量 B: 键集 测试 = "属性1"
>B : Symbol(B, Decl(测试_3_ch.cts, 10, 2))
>测试 : Symbol(测试, Decl(测试_3_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo

// 2
aFoo[B]
>aFoo : Symbol(aFoo, Decl(测试_3_ch.cts, 2, 2))
>B : Symbol(B, Decl(测试_3_ch.cts, 10, 2))

// 3
aFoo[组合("属性", "1") 转为 键集 测试] 
>aFoo : Symbol(aFoo, Decl(测试_3_ch.cts, 2, 2))
>组合 : Symbol(组合, Decl(测试_3_ch.cts, 4, 28))
>测试 : Symbol(测试, Decl(测试_3_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo

// 5
组合("属性1" 转为 键集 测试 , "")
>组合 : Symbol(组合, Decl(测试_3_ch.cts, 4, 28))
>测试 : Symbol(测试, Decl(测试_3_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo

// 6
组合(组合("属性", "1") 转为 键集 测试, "")
>组合 : Symbol(组合, Decl(测试_3_ch.cts, 4, 28))
>组合 : Symbol(组合, Decl(测试_3_ch.cts, 4, 28))
>测试 : Symbol(测试, Decl(测试_3_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo

// 7
取属性(aFoo, "属性1")
>取属性 : Symbol(取属性, Decl(测试_3_ch.cts, 0, 8))
>aFoo : Symbol(aFoo, Decl(测试_3_ch.cts, 2, 2))

// 8
置属性(aFoo, "属性2", "属性2")
>置属性 : Symbol(置属性, Decl(测试_3_ch.cts, 0, 13))
>aFoo : Symbol(aFoo, Decl(测试_3_ch.cts, 2, 2))

// 9
置属性(aFoo, 组合("属性", "1") 转为 键集 测试, 1)
>置属性 : Symbol(置属性, Decl(测试_3_ch.cts, 0, 13))
>aFoo : Symbol(aFoo, Decl(测试_3_ch.cts, 2, 2))
>组合 : Symbol(组合, Decl(测试_3_ch.cts, 4, 28))
>测试 : Symbol(测试, Decl(测试_3_ch.cts, 0, 4))
>节点别名 : #测试 => foo
>符号别名 : #测试 => foo

// 10 
引发事件("事件1", aFoo)
>引发事件 : Symbol(引发事件, Decl(测试_3_ch.cts, 0, 18))
>aFoo : Symbol(aFoo, Decl(测试_3_ch.cts, 2, 2))

// 11 
引发事件(组合("事件", "2") 转为 键集 事件类型, aFoo)
>引发事件 : Symbol(引发事件, Decl(测试_3_ch.cts, 0, 18))
>组合 : Symbol(组合, Decl(测试_3_ch.cts, 4, 28))
>事件类型 : Symbol(事件类型, Decl(测试_3_ch.cts, 0, 24))
>aFoo : Symbol(aFoo, Decl(测试_3_ch.cts, 2, 2))

循环(常量 aF 属于 数组值){
>aF : Symbol(aF, Decl(测试_3_ch.cts, 30, 5))
>数组值 : Symbol(数组值, Decl(测试_3_ch.cts, 4, 2))

  如果(aF.属性1 === 1){
>aF.属性1 : Symbol(属性1, Decl(index.d.cts, 1, 12))
>符号别名 : #属性1 => bar
>aF : Symbol(aF, Decl(测试_3_ch.cts, 30, 5))
>属性1 : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

    aF["属性1"]
>aF : Symbol(aF, Decl(测试_3_ch.cts, 30, 5))
>"属性1" : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

  } 否则 如果(aF.属性2 === "c"){
>aF.属性2 : Symbol(属性2, Decl(index.d.cts, 2, 15))
>符号别名 : #属性2 => baz
>aF : Symbol(aF, Decl(测试_3_ch.cts, 30, 5))
>属性2 : Symbol(属性2, Decl(index.d.cts, 2, 15))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz

    aF["属性2"]
>aF : Symbol(aF, Decl(测试_3_ch.cts, 30, 5))
>"属性2" : Symbol(属性2, Decl(index.d.cts, 2, 15))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz

    常量 {属性2 }=aF
>属性2 : Symbol(属性2, Decl(测试_3_ch.cts, 36, 8))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz
>aF : Symbol(aF, Decl(测试_3_ch.cts, 30, 5))

    如果(属性2){}
>属性2 : Symbol(属性2, Decl(测试_3_ch.cts, 36, 8))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz
  }
}

循环(常量 aF 位于 数组值){
>aF : Symbol(aF, Decl(测试_3_ch.cts, 41, 5))
>数组值 : Symbol(数组值, Decl(测试_3_ch.cts, 4, 2))

  如果(数组值[aF].属性1 === 1){
>数组值[aF].属性1 : Symbol(属性1, Decl(index.d.cts, 1, 12))
>符号别名 : #属性1 => bar
>数组值 : Symbol(数组值, Decl(测试_3_ch.cts, 4, 2))
>aF : Symbol(aF, Decl(测试_3_ch.cts, 41, 5))
>属性1 : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

    数组值[aF]["属性1"]
>数组值 : Symbol(数组值, Decl(测试_3_ch.cts, 4, 2))
>aF : Symbol(aF, Decl(测试_3_ch.cts, 41, 5))
>"属性1" : Symbol(属性1, Decl(index.d.cts, 1, 12))
>节点别名 : #属性1 => bar
>符号别名 : #属性1 => bar

  } 否则 如果(数组值[aF].属性2 === "c"){
>数组值[aF].属性2 : Symbol(属性2, Decl(index.d.cts, 2, 15))
>符号别名 : #属性2 => baz
>数组值 : Symbol(数组值, Decl(测试_3_ch.cts, 4, 2))
>aF : Symbol(aF, Decl(测试_3_ch.cts, 41, 5))
>属性2 : Symbol(属性2, Decl(index.d.cts, 2, 15))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz

    数组值[aF]["属性2"]
>数组值 : Symbol(数组值, Decl(测试_3_ch.cts, 4, 2))
>aF : Symbol(aF, Decl(测试_3_ch.cts, 41, 5))
>"属性2" : Symbol(属性2, Decl(index.d.cts, 2, 15))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz

    常量 {属性2 }=数组值[aF]
>属性2 : Symbol(属性2, Decl(测试_3_ch.cts, 47, 8))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz
>数组值 : Symbol(数组值, Decl(测试_3_ch.cts, 4, 2))
>aF : Symbol(aF, Decl(测试_3_ch.cts, 41, 5))

    如果(属性2){}
>属性2 : Symbol(属性2, Decl(测试_3_ch.cts, 47, 8))
>节点别名 : #属性2 => baz
>符号别名 : #属性2 => baz
  }
}
