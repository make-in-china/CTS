=== tests/cases/conformance/types/typeParameters/typeArgumentLists/constraintSatisfactionWithAny2.ts ===
// errors expected for type parameter cannot be referenced in the constraints of the same list
// any is not a valid type argument unless there is no constraint, or the constraint is any

declare function foo<Z, T extends <U>(x: U) => Z>(y: T): Z;
>foo : <Z, T 扩展 <U>(x: U) => Z>(y: T) => Z
>Z : Z
>T : T
>U : U
>x : U
>U : U
>Z : Z
>y : T
>T : T
>Z : Z

var a: any;
>a : 任意
>类型别名 :=> 任意

foo(a);
>foo(a) : {}
>foo : <Z, T 扩展 <U>(x: U) => Z>(y: T) => Z
>a : 任意
>类型别名 :=> 任意

foo<any, any>(a);
>foo<any, any>(a) : 任意
>类型别名 :=> 任意
>foo : <Z, T 扩展 <U>(x: U) => Z>(y: T) => Z
>a : 任意
>类型别名 :=> 任意

