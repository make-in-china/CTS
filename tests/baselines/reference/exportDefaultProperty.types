=== tests/cases/compiler/index.ts ===
/// <reference path="declarations.d.ts" />
import fooBar from "foobar";
>fooBar : typeof fooBar

import X = fooBar.X;
>X : number
>类型别名 :=> 数字
>fooBar : typeof fooBar
>X : number
>类型别名 :=> 数字

import X2 from "foobarx";
>X2 : number
>类型别名 :=> 数字

const x: X = X;
>x : number
>类型别名 :=> 数字
>X : number
>类型别名 :=> 数字
>X : number
>类型别名 :=> 数字

const x2: X2 = X2;
>x2 : number
>类型别名 :=> 数字
>X2 : number
>类型别名 :=> 数字
>X2 : number
>类型别名 :=> 数字

import B from "./a";
>B : typeof B

const b: B = new B(B.b);
>b : B
>B : B
>new B(B.b) : B
>B : typeof B
>B.b : number
>类型别名 :=> 数字
>B : typeof B
>b : number
>类型别名 :=> 数字

import fooLength from "./b";
>fooLength : number
>类型别名 :=> 数字

fooLength + 1;
>fooLength + 1 : number
>类型别名 :=> 数字
>fooLength : number
>类型别名 :=> 数字
>1 : 1

=== tests/cases/compiler/declarations.d.ts ===
// This test is just like exportEqualsProperty, but with `export default`.

declare namespace foo.bar {
>foo : typeof foo
>bar : typeof bar

    export type X = number;
>X : number
>类型别名 :=> 数字

    export const X: number;
>X : number
>类型别名 :=> 数字
}

declare module "foobar" {
    export default foo.bar;
>foo.bar : typeof default
>foo : typeof foo
>bar : typeof default
}

declare module "foobarx" {
    export default foo.bar.X;
>foo.bar.X : number
>类型别名 :=> 数字
>foo.bar : typeof foo.bar
>foo : typeof foo
>bar : typeof foo.bar
>X : number
>类型别名 :=> 数字
}

=== tests/cases/compiler/a.ts ===
namespace A {
>A : typeof A

    export class B { constructor(b: number) {} }
>B : B
>b : number
>类型别名 :=> 数字

    export namespace B { export const b: number = 0; }
>B : typeof B
>b : number
>类型别名 :=> 数字
>0 : 0
}
export default A.B;
>A.B : typeof default
>A : typeof A
>B : typeof default

=== tests/cases/compiler/b.ts ===
export default "foo".length;
>"foo".length : number
>类型别名 :=> 数字
>"foo" : "foo"
>length : number
>类型别名 :=> 数字

