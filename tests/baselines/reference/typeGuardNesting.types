=== tests/cases/conformance/expressions/typeGuards/typeGuardNesting.ts ===
let strOrBool: string|boolean;
>strOrBool : 文字 | 真假

if ((typeof strOrBool === 'boolean' && !strOrBool) || typeof strOrBool === 'string') {
>(typeof strOrBool === 'boolean' && !strOrBool) || typeof strOrBool === 'string' : 真假
>类型别名 :=> 真假
>(typeof strOrBool === 'boolean' && !strOrBool) : 真假
>类型别名 :=> 真假
>typeof strOrBool === 'boolean' && !strOrBool : 真假
>类型别名 :=> 真假
>typeof strOrBool === 'boolean' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>'boolean' : "boolean"
>!strOrBool : 真假
>类型别名 :=> 真假
>strOrBool : 真假
>类型别名 :=> 真假
>typeof strOrBool === 'string' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 为真
>'string' : "string"

	let label: string = (typeof strOrBool === 'string') ? strOrBool : "string";
>label : 文字
>类型别名 :=> 文字
>(typeof strOrBool === 'string') ? strOrBool : "string" : 文字
>类型别名 :=> 文字
>(typeof strOrBool === 'string') : 真假
>类型别名 :=> 真假
>typeof strOrBool === 'string' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>'string' : "string"
>strOrBool : 文字
>类型别名 :=> 文字
>"string" : "string"

	let bool: boolean = (typeof strOrBool === 'boolean') ? strOrBool : false;
>bool : 真假
>类型别名 :=> 真假
>(typeof strOrBool === 'boolean') ? strOrBool : false : 真假
>类型别名 :=> 真假
>(typeof strOrBool === 'boolean') : 真假
>类型别名 :=> 真假
>typeof strOrBool === 'boolean' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>'boolean' : "boolean"
>strOrBool : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

	let label2: string = (typeof strOrBool !== 'boolean') ? strOrBool : "string";
>label2 : 文字
>类型别名 :=> 文字
>(typeof strOrBool !== 'boolean') ? strOrBool : "string" : 文字
>类型别名 :=> 文字
>(typeof strOrBool !== 'boolean') : 真假
>类型别名 :=> 真假
>typeof strOrBool !== 'boolean' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>'boolean' : "boolean"
>strOrBool : 文字
>类型别名 :=> 文字
>"string" : "string"

	let bool2: boolean = (typeof strOrBool !== 'string') ? strOrBool : false;
>bool2 : 真假
>类型别名 :=> 真假
>(typeof strOrBool !== 'string') ? strOrBool : false : 真假
>类型别名 :=> 真假
>(typeof strOrBool !== 'string') : 真假
>类型别名 :=> 真假
>typeof strOrBool !== 'string' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>'string' : "string"
>strOrBool : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
}

if ((typeof strOrBool !== 'string' && !strOrBool) || typeof strOrBool !== 'boolean') {
>(typeof strOrBool !== 'string' && !strOrBool) || typeof strOrBool !== 'boolean' : 真假
>类型别名 :=> 真假
>(typeof strOrBool !== 'string' && !strOrBool) : 真假
>类型别名 :=> 真假
>typeof strOrBool !== 'string' && !strOrBool : 真假
>类型别名 :=> 真假
>typeof strOrBool !== 'string' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>'string' : "string"
>!strOrBool : 真假
>类型别名 :=> 真假
>strOrBool : 真假
>类型别名 :=> 真假
>typeof strOrBool !== 'boolean' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 为真
>'boolean' : "boolean"

	let label: string = (typeof strOrBool === 'string') ? strOrBool : "string";
>label : 文字
>类型别名 :=> 文字
>(typeof strOrBool === 'string') ? strOrBool : "string" : 文字
>类型别名 :=> 文字
>(typeof strOrBool === 'string') : 真假
>类型别名 :=> 真假
>typeof strOrBool === 'string' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>'string' : "string"
>strOrBool : 文字
>类型别名 :=> 文字
>"string" : "string"

	let bool: boolean = (typeof strOrBool === 'boolean') ? strOrBool : false;
>bool : 真假
>类型别名 :=> 真假
>(typeof strOrBool === 'boolean') ? strOrBool : false : 真假
>类型别名 :=> 真假
>(typeof strOrBool === 'boolean') : 真假
>类型别名 :=> 真假
>typeof strOrBool === 'boolean' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>'boolean' : "boolean"
>strOrBool : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

	let label2: string = (typeof strOrBool !== 'boolean') ? strOrBool : "string";
>label2 : 文字
>类型别名 :=> 文字
>(typeof strOrBool !== 'boolean') ? strOrBool : "string" : 文字
>类型别名 :=> 文字
>(typeof strOrBool !== 'boolean') : 真假
>类型别名 :=> 真假
>typeof strOrBool !== 'boolean' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>'boolean' : "boolean"
>strOrBool : 文字
>类型别名 :=> 文字
>"string" : "string"

	let bool2: boolean = (typeof strOrBool !== 'string') ? strOrBool : false;
>bool2 : 真假
>类型别名 :=> 真假
>(typeof strOrBool !== 'string') ? strOrBool : false : 真假
>类型别名 :=> 真假
>(typeof strOrBool !== 'string') : 真假
>类型别名 :=> 真假
>typeof strOrBool !== 'string' : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>'string' : "string"
>strOrBool : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
}

