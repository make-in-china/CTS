=== tests/cases/compiler/readonlyInDeclarationFile.ts ===
interface Foo {
>Foo : Foo

    readonly x: number;
>x : number
>类型别名 :=> 数字

    readonly [x: string]: Object;
>x : string
>类型别名 :=> 文字
>Object : Object
}

class C {
>C : C

    readonly [x: string]: Object;
>x : string
>类型别名 :=> 文字
>Object : Object

    private readonly a1: number;
>a1 : number
>类型别名 :=> 数字

    protected readonly a2: number;
>a2 : number
>类型别名 :=> 数字

    public readonly a3: number;
>a3 : number
>类型别名 :=> 数字

    private get b1() { return 1 }
>b1 : number
>类型别名 :=> 数字
>1 : 1

    protected get b2() { return 1 }
>b2 : number
>类型别名 :=> 数字
>1 : 1

    public get b3() { return 1 }
>b3 : number
>类型别名 :=> 数字
>1 : 1

    private get c1() { return 1 }
>c1 : number
>类型别名 :=> 数字
>1 : 1

    private set c1(value) { }
>c1 : number
>类型别名 :=> 数字
>value : number
>类型别名 :=> 数字

    protected get c2() { return 1 }
>c2 : number
>类型别名 :=> 数字
>1 : 1

    protected set c2(value) { }
>c2 : number
>类型别名 :=> 数字
>value : number
>类型别名 :=> 数字

    public get c3() { return 1 }
>c3 : number
>类型别名 :=> 数字
>1 : 1

    public set c3(value) { }
>c3 : number
>类型别名 :=> 数字
>value : number
>类型别名 :=> 数字

    private static readonly s1: number;
>s1 : number
>类型别名 :=> 数字

    protected static readonly s2: number;
>s2 : number
>类型别名 :=> 数字

    public static readonly s3: number;
>s3 : number
>类型别名 :=> 数字

    private static get t1() { return 1 }
>t1 : number
>类型别名 :=> 数字
>1 : 1

    protected static get t2() { return 1 }
>t2 : number
>类型别名 :=> 数字
>1 : 1

    public static get t3() { return 1 }
>t3 : number
>类型别名 :=> 数字
>1 : 1

    private static get u1() { return 1 }
>u1 : number
>类型别名 :=> 数字
>1 : 1

    private static set u1(value) { }
>u1 : number
>类型别名 :=> 数字
>value : number
>类型别名 :=> 数字

    protected static get u2() { return 1 }
>u2 : number
>类型别名 :=> 数字
>1 : 1

    protected static set u2(value) { }
>u2 : number
>类型别名 :=> 数字
>value : number
>类型别名 :=> 数字

    public static get u3() { return 1 }
>u3 : number
>类型别名 :=> 数字
>1 : 1

    public static set u3(value) { }
>u3 : number
>类型别名 :=> 数字
>value : number
>类型别名 :=> 数字
}

var z: {
>z : { readonly [x: string]: Object; readonly a: string; }

    readonly a: string;
>a : string
>类型别名 :=> 文字

    readonly [x: string]: Object;
>x : string
>类型别名 :=> 文字
>Object : Object
}

function f() {
>f : () => { readonly x: number; y: number; }

    return {
>{        get x() { return 1; },        get y() { return 1; },        set y(value) { }    } : { readonly x: number; y: number; }

        get x() { return 1; },
>x : number
>类型别名 :=> 数字
>1 : 1

        get y() { return 1; },
>y : number
>类型别名 :=> 数字
>1 : 1

        set y(value) { }
>y : number
>类型别名 :=> 数字
>value : number
>类型别名 :=> 数字
    }
}

function g() {
>g : () => { readonly [x: string]: Object; readonly a: string; }

    var x: {
>x : { readonly [x: string]: Object; readonly a: string; }

        readonly a: string;
>a : string
>类型别名 :=> 文字

        readonly [x: string]: Object;
>x : string
>类型别名 :=> 文字
>Object : Object
    }
    return x;
>x : { readonly [x: string]: Object; readonly a: string; }
}
