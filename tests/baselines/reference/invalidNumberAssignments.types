=== tests/cases/conformance/types/primitives/number/invalidNumberAssignments.ts ===
var x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1

var a: boolean = x;
>a : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字

var b: string = x;
>b : 文字
>类型别名 :=> 文字
>x : 数字
>类型别名 :=> 数字

var c: void = x;
>c : 无值
>类型别名 :=> 无值
>x : 数字
>类型别名 :=> 数字

var d: typeof undefined = x;
>d : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>x : 数字
>类型别名 :=> 数字

class C { foo: string; }
>C : C
>foo : 文字
>类型别名 :=> 文字

var e: C = x;
>e : C
>C : C
>x : 数字
>类型别名 :=> 数字

interface I { bar: string; }
>I : I
>bar : 文字
>类型别名 :=> 文字

var f: I = x;
>f : I
>I : I
>x : 数字
>类型别名 :=> 数字

var g: { baz: string } = 1;
>g : { baz: 文字; }
>baz : 文字
>类型别名 :=> 文字
>1 : 1

var g2: { 0: number } = 1;
>g2 : { 0: 数字; }
>1 : 1

module M { export var x = 1; }
>M : 类为 M
>x : 数字
>类型别名 :=> 数字
>1 : 1

M = x;
>M = x : 数字
>类型别名 :=> 数字
>M : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字

function i<T>(a: T) {
>i : <T>(a: T) => 无值
>T : T
>a : T
>T : T

    a = x;
>a = x : 数字
>类型别名 :=> 数字
>a : T
>x : 数字
>类型别名 :=> 数字
}
i = x;
>i = x : 数字
>类型别名 :=> 数字
>i : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字

