=== tests/cases/conformance/types/primitives/number/invalidNumberAssignments.ts ===
var x = 1;
>x : number
>类型别名 :=> 数字
>1 : 1

var a: boolean = x;
>a : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字

var b: string = x;
>b : string
>类型别名 :=> 文字
>x : number
>类型别名 :=> 数字

var c: void = x;
>c : void
>类型别名 :=> 无值
>x : number
>类型别名 :=> 数字

var d: typeof undefined = x;
>d : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>x : number
>类型别名 :=> 数字

class C { foo: string; }
>C : C
>foo : string
>类型别名 :=> 文字

var e: C = x;
>e : C
>C : C
>x : number
>类型别名 :=> 数字

interface I { bar: string; }
>I : I
>bar : string
>类型别名 :=> 文字

var f: I = x;
>f : I
>I : I
>x : number
>类型别名 :=> 数字

var g: { baz: string } = 1;
>g : { baz: string; }
>baz : string
>类型别名 :=> 文字
>1 : 1

var g2: { 0: number } = 1;
>g2 : { 0: number; }
>1 : 1

module M { export var x = 1; }
>M : typeof M
>x : number
>类型别名 :=> 数字
>1 : 1

M = x;
>M = x : number
>类型别名 :=> 数字
>M : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字

function i<T>(a: T) {
>i : <T>(a: T) => void
>T : T
>a : T
>T : T

    a = x;
>a = x : number
>类型别名 :=> 数字
>a : T
>x : number
>类型别名 :=> 数字
}
i = x;
>i = x : number
>类型别名 :=> 数字
>i : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字

