=== tests/cases/compiler/consumer.ts ===
/// <reference path="./indirection.d.ts" />
No type information for this code./// <reference path="./indirection2.d.ts" />
No type information for this code.import "indirect";
No type information for this code.import "foo";
No type information for this code.import "indirect2";
No type information for this code.import "foo2";
No type information for this code.=== tests/cases/compiler/foo.d.ts ===
export default 2 + 2;
>2 + 2 : 数字
>类型别名 :=> 数字
>2 : 2
>2 : 2

export as namespace Foo;
>Foo : 类为 "tests/cases/compiler/foo"

=== tests/cases/compiler/foo2.d.ts ===
export = 2 + 2;
>2 + 2 : 数字
>类型别名 :=> 数字
>2 : 2
>2 : 2

export as namespace Foo2;
>Foo2 : 数字
>类型别名 :=> 数字

=== tests/cases/compiler/indirection.d.ts ===
/// <reference path="./foo.d.ts" />
declare module "indirect" {
    export default typeof Foo.default;
>typeof Foo.default : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>Foo.default : 数字
>类型别名 :=> 数字
>Foo : 类为 Foo
>default : 数字
>类型别名 :=> 数字
}

=== tests/cases/compiler/indirection2.d.ts ===
/// <reference path="./foo2.d.ts" />
declare module "indirect2" {
    export = typeof Foo2;
>typeof Foo2 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>Foo2 : 数字
>类型别名 :=> 数字
}

