=== tests/cases/compiler/typeParameterCompatibilityAccrossDeclarations.ts ===
var a = {
>a : { x: <T>(y: T) => T; }
>{   x: function <T>(y: T): T { return null; }} : { x: <T>(y: T) => T; }

   x: function <T>(y: T): T { return null; }
>x : <T>(y: T) => T
>function <T>(y: T): T { return null; } : <T>(y: T) => T
>T : T
>y : T
>T : T
>T : T
>null : 空值
>类型别名 :=> 空值
}
var a2 = {
>a2 : { x: (y: 任意) => 任意; }
>{   x: function (y: any): any { return null; }} : { x: (y: 任意) => 任意; }

   x: function (y: any): any { return null; }
>x : (y: 任意) => 任意
>function (y: any): any { return null; } : (y: 任意) => 任意
>y : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
}
export interface I {
>I : I

   x<T>(y: T): T;
>x : <T>(y: T) => T
>T : T
>y : T
>T : T
>T : T
}
export interface I2 {
>I2 : I2

   x(y: any): any;
>x : (y: 任意) => 任意
>y : 任意
>类型别名 :=> 任意
}
 
var i: I;
>i : I
>I : I

var i2: I2;
>i2 : I2
>I2 : I2
 
a = i; // error
>a = i : I
>a : { x: <T>(y: T) => T; }
>i : I

i = a; // error
>i = a : { x: <T>(y: T) => T; }
>i : I
>a : { x: <T>(y: T) => T; }
 
a2 = i2; // no error
>a2 = i2 : I2
>a2 : { x: (y: 任意) => 任意; }
>i2 : I2

i2 = a2; // no error
>i2 = a2 : { x: (y: 任意) => 任意; }
>i2 : I2
>a2 : { x: (y: 任意) => 任意; }

