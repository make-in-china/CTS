=== tests/cases/compiler/enumOperations.ts ===
enum Enum { None = 0 }
>Enum : Enum
>None : Enum
>0 : 0

var enumType: Enum = Enum.None;
>enumType : Enum
>Enum : Enum
>Enum.None : Enum
>Enum : 类为 Enum
>None : Enum

var numberType: number = 0;
>numberType : 数字
>类型别名 :=> 数字
>0 : 0

var anyType: any = 0;
>anyType : 任意
>类型别名 :=> 任意
>0 : 0
 
enumType ^ numberType;
>enumType ^ numberType : 数字
>类型别名 :=> 数字
>enumType : Enum
>numberType : 数字
>类型别名 :=> 数字

numberType ^ anyType;
>numberType ^ anyType : 数字
>类型别名 :=> 数字
>numberType : 数字
>类型别名 :=> 数字
>anyType : 任意
>类型别名 :=> 任意
 
enumType & anyType;
>enumType & anyType : 数字
>类型别名 :=> 数字
>enumType : Enum
>anyType : 任意
>类型别名 :=> 任意

enumType | anyType;
>enumType | anyType : 数字
>类型别名 :=> 数字
>enumType : Enum
>anyType : 任意
>类型别名 :=> 任意

enumType ^ anyType;
>enumType ^ anyType : 数字
>类型别名 :=> 数字
>enumType : Enum
>anyType : 任意
>类型别名 :=> 任意

~anyType;
>~anyType : 数字
>类型别名 :=> 数字
>anyType : 任意
>类型别名 :=> 任意

enumType <<anyType;
>enumType <<anyType : 数字
>类型别名 :=> 数字
>enumType : Enum
>anyType : 任意
>类型别名 :=> 任意

enumType >>anyType;
>enumType >>anyType : 数字
>类型别名 :=> 数字
>enumType : Enum
>anyType : 任意
>类型别名 :=> 任意

enumType >>>anyType;
>enumType >>>anyType : 数字
>类型别名 :=> 数字
>enumType : Enum
>anyType : 任意
>类型别名 :=> 任意

