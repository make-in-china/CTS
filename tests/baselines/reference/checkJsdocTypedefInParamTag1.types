=== tests/cases/conformance/jsdoc/0.js ===
// @ts-check
/**
 * @typedef {Object} Opts
 * @property {string} x
 * @property {string=} y
 * @property {string} [z]
 * @property {string} [w="hi"]
 *
 * @param {Opts} opts
 */
function foo(opts) {
>foo : (opts: { x: 文字; y?: 文字; z?: 文字; w?: 文字; }) => 无值
>opts : { x: 文字; y?: 文字; z?: 文字; w?: 文字; }

    opts.x;
>opts.x : 文字
>类型别名 :=> 文字
>opts : { x: 文字; y?: 文字; z?: 文字; w?: 文字; }
>x : 文字
>类型别名 :=> 文字
}

foo({x: 'abc'});
>foo({x: 'abc'}) : 无值
>类型别名 :=> 无值
>foo : (opts: { x: 文字; y?: 文字; z?: 文字; w?: 文字; }) => 无值
>{x: 'abc'} : { x: 文字; }
>x : 文字
>类型别名 :=> 文字
>'abc' : "abc"

/**
 * @typedef {Object} AnotherOpts
 * @property anotherX {string}
 * @property anotherY {string=}
 * 
 * @param {AnotherOpts} opts
 */
function foo1(opts) {
>foo1 : (opts: { anotherX: 文字; anotherY?: 文字; }) => 无值
>opts : { anotherX: 文字; anotherY?: 文字; }

    opts.anotherX;
>opts.anotherX : 文字
>类型别名 :=> 文字
>opts : { anotherX: 文字; anotherY?: 文字; }
>anotherX : 文字
>类型别名 :=> 文字
}

foo1({anotherX: "world"});
>foo1({anotherX: "world"}) : 无值
>类型别名 :=> 无值
>foo1 : (opts: { anotherX: 文字; anotherY?: 文字; }) => 无值
>{anotherX: "world"} : { anotherX: 文字; }
>anotherX : 文字
>类型别名 :=> 文字
>"world" : "world"

/**
 * @typedef {object} Opts1
 * @property {string} x
 * @property {string=} y
 * @property {string} [z]
 * @property {string} [w="hi"]
 *
 * @param {Opts1} opts
 */
function foo2(opts) {
>foo2 : (opts: { x: 文字; y?: 文字; z?: 文字; w?: 文字; }) => 无值
>opts : { x: 文字; y?: 文字; z?: 文字; w?: 文字; }

    opts.x;
>opts.x : 文字
>类型别名 :=> 文字
>opts : { x: 文字; y?: 文字; z?: 文字; w?: 文字; }
>x : 文字
>类型别名 :=> 文字
}
foo2({x: 'abc'});
>foo2({x: 'abc'}) : 无值
>类型别名 :=> 无值
>foo2 : (opts: { x: 文字; y?: 文字; z?: 文字; w?: 文字; }) => 无值
>{x: 'abc'} : { x: 文字; }
>x : 文字
>类型别名 :=> 文字
>'abc' : "abc"

