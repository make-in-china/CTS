=== tests/cases/conformance/expressions/typeGuards/typeGuardsInConditionalExpression.ts ===
// In the true expression of a conditional expression, 
// the type of a variable or parameter is narrowed by any type guard in the condition when true, 
// provided the true expression contains no assignments to the variable or parameter.
// In the false expression of a conditional expression, 
// the type of a variable or parameter is narrowed by any type guard in the condition when false, 
// provided the false expression contains no assignments to the variable or parameter.

function foo(x: number | string) {
>foo : (x: 文字 | 数字) => 数字
>x : 文字 | 数字

    return typeof x === "string"
>typeof x === "string"        ? x.length // string        : x++ : 数字
>类型别名 :=> 数字
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        ? x.length // string
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

        : x++; // number
>x++ : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
}
function foo2(x: number | string) {
>foo2 : (x: 文字 | 数字) => 文字 | 数字
>x : 文字 | 数字

    return typeof x === "string"
>typeof x === "string"        ? ((x = "hello") && x) // string        : x : 文字 | 数字
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        ? ((x = "hello") && x) // string
>((x = "hello") && x) : 文字
>类型别名 :=> 文字
>(x = "hello") && x : 文字
>类型别名 :=> 文字
>(x = "hello") : "hello"
>x = "hello" : "hello"
>x : 文字 | 数字
>"hello" : "hello"
>x : 文字
>类型别名 :=> 文字

        : x; // number
>x : 数字
>类型别名 :=> 数字
}
function foo3(x: number | string) {
>foo3 : (x: 文字 | 数字) => 数字
>x : 文字 | 数字

    return typeof x === "string"
>typeof x === "string"        ? ((x = 10) && x) // number        : x : 数字
>类型别名 :=> 数字
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        ? ((x = 10) && x) // number
>((x = 10) && x) : 数字
>类型别名 :=> 数字
>(x = 10) && x : 数字
>类型别名 :=> 数字
>(x = 10) : 10
>x = 10 : 10
>x : 文字 | 数字
>10 : 10
>x : 数字
>类型别名 :=> 数字

        : x; // number
>x : 数字
>类型别名 :=> 数字
}
function foo4(x: number | string) {
>foo4 : (x: 文字 | 数字) => 文字 | 数字
>x : 文字 | 数字

    return typeof x === "string"
>typeof x === "string"        ? x // string        : ((x = 10) && x) : 文字 | 数字
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        ? x // string
>x : 文字
>类型别名 :=> 文字

        : ((x = 10) && x); // number
>((x = 10) && x) : 数字
>类型别名 :=> 数字
>(x = 10) && x : 数字
>类型别名 :=> 数字
>(x = 10) : 10
>x = 10 : 10
>x : 文字 | 数字
>10 : 10
>x : 数字
>类型别名 :=> 数字
}
function foo5(x: number | string) {
>foo5 : (x: 文字 | 数字) => 文字
>x : 文字 | 数字

    return typeof x === "string"
>typeof x === "string"        ? x // string        : ((x = "hello") && x) : 文字
>类型别名 :=> 文字
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        ? x // string
>x : 文字
>类型别名 :=> 文字

        : ((x = "hello") && x); // string
>((x = "hello") && x) : 文字
>类型别名 :=> 文字
>(x = "hello") && x : 文字
>类型别名 :=> 文字
>(x = "hello") : "hello"
>x = "hello" : "hello"
>x : 文字 | 数字
>"hello" : "hello"
>x : 文字
>类型别名 :=> 文字
}
function foo6(x: number | string) {
>foo6 : (x: 文字 | 数字) => 文字 | 数字
>x : 文字 | 数字

    // Modify in both branches
    return typeof x === "string"
>typeof x === "string"        ? ((x = 10) && x) // number        : ((x = "hello") && x) : 文字 | 数字
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        ? ((x = 10) && x) // number
>((x = 10) && x) : 数字
>类型别名 :=> 数字
>(x = 10) && x : 数字
>类型别名 :=> 数字
>(x = 10) : 10
>x = 10 : 10
>x : 文字 | 数字
>10 : 10
>x : 数字
>类型别名 :=> 数字

        : ((x = "hello") && x); // string
>((x = "hello") && x) : 文字
>类型别名 :=> 文字
>(x = "hello") && x : 文字
>类型别名 :=> 文字
>(x = "hello") : "hello"
>x = "hello" : "hello"
>x : 文字 | 数字
>"hello" : "hello"
>x : 文字
>类型别名 :=> 文字
}
function foo7(x: number | string | boolean) {
>foo7 : (x: 文字 | 数字 | 真假) => 真假
>x : 文字 | 数字 | 真假

    return typeof x === "string"
>typeof x === "string"        ? x === "hello" // boolean        : typeof x === "boolean"        ? x // boolean        : x == 10 : 真假
>类型别名 :=> 真假
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字 | 真假
>"string" : "string"

        ? x === "hello" // boolean
>x === "hello" : 真假
>类型别名 :=> 真假
>x : 文字
>类型别名 :=> 文字
>"hello" : "hello"

        : typeof x === "boolean"
>typeof x === "boolean"        ? x // boolean        : x == 10 : 真假
>类型别名 :=> 真假
>typeof x === "boolean" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字 | 真假
>"boolean" : "boolean"

        ? x // boolean
>x : 真假
>类型别名 :=> 真假

        : x == 10; // boolean
>x == 10 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>10 : 10
}
function foo8(x: number | string | boolean) {
>foo8 : (x: 文字 | 数字 | 真假) => 真假
>x : 文字 | 数字 | 真假

    var b: number | boolean;
>b : 数字 | 真假

    return typeof x === "string"
>typeof x === "string"        ? x === "hello"        : ((b = x) && //  number | boolean        (typeof x === "boolean"        ? x // boolean        : x == 10)) : 真假
>类型别名 :=> 真假
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字 | 真假
>"string" : "string"

        ? x === "hello"
>x === "hello" : 真假
>类型别名 :=> 真假
>x : 文字
>类型别名 :=> 文字
>"hello" : "hello"

        : ((b = x) && //  number | boolean
>((b = x) && //  number | boolean        (typeof x === "boolean"        ? x // boolean        : x == 10)) : 真假
>类型别名 :=> 真假
>(b = x) && //  number | boolean        (typeof x === "boolean"        ? x // boolean        : x == 10) : 真假
>类型别名 :=> 真假
>(b = x) : 数字 | 真假
>b = x : 数字 | 真假
>b : 数字 | 真假
>x : 数字 | 真假

        (typeof x === "boolean"
>(typeof x === "boolean"        ? x // boolean        : x == 10) : 真假
>类型别名 :=> 真假
>typeof x === "boolean"        ? x // boolean        : x == 10 : 真假
>类型别名 :=> 真假
>typeof x === "boolean" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字 | 真假
>"boolean" : "boolean"

        ? x // boolean
>x : 真假
>类型别名 :=> 真假

        : x == 10)); // boolean
>x == 10 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>10 : 10
}
function foo9(x: number | string) {
>foo9 : (x: 文字 | 数字) => 真假
>x : 文字 | 数字

    var y = 10;
>y : 数字
>类型别名 :=> 数字
>10 : 10

    // usage of x or assignment to separate variable shouldn't cause narrowing of type to stop
    return typeof x === "string"
>typeof x === "string"        ? ((y = x.length) && x === "hello") // boolean        : x === 10 : 真假
>类型别名 :=> 真假
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

        ? ((y = x.length) && x === "hello") // boolean
>((y = x.length) && x === "hello") : 真假
>类型别名 :=> 真假
>(y = x.length) && x === "hello" : 真假
>类型别名 :=> 真假
>(y = x.length) : 数字
>类型别名 :=> 数字
>y = x.length : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>x === "hello" : 真假
>类型别名 :=> 真假
>x : 文字
>类型别名 :=> 文字
>"hello" : "hello"

        : x === 10; // boolean
>x === 10 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>10 : 10
}
function foo10(x: number | string | boolean) {
>foo10 : (x: 文字 | 数字 | 真假) => 文字
>x : 文字 | 数字 | 真假

    // Mixing typeguards
    var b: boolean | number;
>b : 数字 | 真假

    return typeof x === "string"
>typeof x === "string"        ? x // string        : ((b = x) // x is number | boolean        && typeof x === "number"        && x.toString()) : 文字
>类型别名 :=> 文字
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字 | 真假
>"string" : "string"

        ? x // string
>x : 文字
>类型别名 :=> 文字

        : ((b = x) // x is number | boolean
>((b = x) // x is number | boolean        && typeof x === "number"        && x.toString()) : 文字
>类型别名 :=> 文字
>(b = x) // x is number | boolean        && typeof x === "number"        && x.toString() : 文字
>类型别名 :=> 文字
>(b = x) // x is number | boolean        && typeof x === "number" : 真假
>类型别名 :=> 真假
>(b = x) : 数字 | 真假
>b = x : 数字 | 真假
>b : 数字 | 真假
>x : 数字 | 真假

        && typeof x === "number"
>typeof x === "number" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字 | 真假
>"number" : "number"

        && x.toString()); // x is number
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : (radix?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
}
function foo11(x: number | string | boolean) {
>foo11 : (x: 文字 | 数字 | 真假) => 文字 | 数字
>x : 文字 | 数字 | 真假

    // Mixing typeguards
    var b: number | boolean | string;
>b : 文字 | 数字 | 真假

    return typeof x === "string"
>typeof x === "string"        ? x // string        : ((b = x) // x is number | boolean        && typeof x === "number"        && (x = 10) // assignment to x        && x) : 文字 | 数字
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字 | 真假
>"string" : "string"

        ? x // string
>x : 文字
>类型别名 :=> 文字

        : ((b = x) // x is number | boolean
>((b = x) // x is number | boolean        && typeof x === "number"        && (x = 10) // assignment to x        && x) : 数字
>类型别名 :=> 数字
>(b = x) // x is number | boolean        && typeof x === "number"        && (x = 10) // assignment to x        && x : 数字
>类型别名 :=> 数字
>(b = x) // x is number | boolean        && typeof x === "number"        && (x = 10) : 0 | 10
>(b = x) // x is number | boolean        && typeof x === "number" : 真假
>类型别名 :=> 真假
>(b = x) : 数字 | 真假
>b = x : 数字 | 真假
>b : 文字 | 数字 | 真假
>x : 数字 | 真假

        && typeof x === "number"
>typeof x === "number" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字 | 真假
>"number" : "number"

        && (x = 10) // assignment to x
>(x = 10) : 10
>x = 10 : 10
>x : 文字 | 数字 | 真假
>10 : 10

        && x); // x is number
>x : 数字
>类型别名 :=> 数字
}
function foo12(x: number | string | boolean) {
>foo12 : (x: 文字 | 数字 | 真假) => 数字
>x : 文字 | 数字 | 真假

    // Mixing typeguards
    var b: number | boolean | string;
>b : 文字 | 数字 | 真假

    return typeof x === "string"
>typeof x === "string"        ? ((x = 10) && x.toString().length) // number        : ((b = x) // x is number | boolean        && typeof x === "number"        && x) : 数字
>类型别名 :=> 数字
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字 | 真假
>"string" : "string"

        ? ((x = 10) && x.toString().length) // number
>((x = 10) && x.toString().length) : 数字
>类型别名 :=> 数字
>(x = 10) && x.toString().length : 数字
>类型别名 :=> 数字
>(x = 10) : 10
>x = 10 : 10
>x : 文字 | 数字 | 真假
>10 : 10
>x.toString().length : 数字
>类型别名 :=> 数字
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : (radix?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
>length : 数字
>类型别名 :=> 数字

        : ((b = x) // x is number | boolean
>((b = x) // x is number | boolean        && typeof x === "number"        && x) : 数字
>类型别名 :=> 数字
>(b = x) // x is number | boolean        && typeof x === "number"        && x : 数字
>类型别名 :=> 数字
>(b = x) // x is number | boolean        && typeof x === "number" : 真假
>类型别名 :=> 真假
>(b = x) : 数字 | 真假
>b = x : 数字 | 真假
>b : 文字 | 数字 | 真假
>x : 数字 | 真假

        && typeof x === "number"
>typeof x === "number" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 数字 | 真假
>"number" : "number"

        && x); // x is number
>x : 数字
>类型别名 :=> 数字
}
