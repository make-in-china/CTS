=== tests/cases/conformance/types/literal/literalTypes3.ts ===
function f1(s: string) {
>f1 : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字

    if (s === "foo") {
>s === "foo" : 真假
>类型别名 :=> 真假
>s : 文字
>类型别名 :=> 文字
>"foo" : "foo"

        s;  // "foo"
>s : "foo"
    }
    if (s === "foo" || s === "bar") {
>s === "foo" || s === "bar" : 真假
>类型别名 :=> 真假
>s === "foo" : 真假
>类型别名 :=> 真假
>s : 文字
>类型别名 :=> 文字
>"foo" : "foo"
>s === "bar" : 真假
>类型别名 :=> 真假
>s : 文字
>类型别名 :=> 文字
>"bar" : "bar"

        s;  // "foo" | "bar"
>s : "foo" | "bar"
    }
}

function f2(s: string) {
>f2 : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字

    switch (s) {
>s : 文字
>类型别名 :=> 文字

        case "foo":
>"foo" : "foo"

        case "bar":
>"bar" : "bar"

            s;  // "foo" | "bar"
>s : "foo" | "bar"

        case "baz":
>"baz" : "baz"

            s;  // "foo" | "bar" | "baz"
>s : "foo" | "bar" | "baz"

            break;
        default:
            s;  // string
>s : 文字
>类型别名 :=> 文字
    }
}

function f3(s: string) {
>f3 : (s: 文字) => "foo" | "bar" | 未定
>s : 文字
>类型别名 :=> 文字

    return s === "foo" || s === "bar" ? s : undefined;  // "foo" | "bar" | undefined
>s === "foo" || s === "bar" ? s : undefined : "foo" | "bar" | 未定
>s === "foo" || s === "bar" : 真假
>类型别名 :=> 真假
>s === "foo" : 真假
>类型别名 :=> 真假
>s : 文字
>类型别名 :=> 文字
>"foo" : "foo"
>s === "bar" : 真假
>类型别名 :=> 真假
>s : 文字
>类型别名 :=> 文字
>"bar" : "bar"
>s : "foo" | "bar"
>undefined : 未定
>类型别名 :=> 未定
}

function f4(x: number) {
>f4 : (x: 数字) => 1 | 2
>x : 数字
>类型别名 :=> 数字

    if (x === 1 || x === 2) {
>x === 1 || x === 2 : 真假
>类型别名 :=> 真假
>x === 1 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>1 : 1
>x === 2 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>2 : 2

        return x;  // 1 | 2
>x : 1 | 2
    }
    throw new Error();
>new Error() : Error
>Error : ErrorConstructor
}

function f5(x: number, y: 1 | 2) {
>f5 : (x: 数字, y: 1 | 2) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 1 | 2

    if (x === 0 || x === y) {
>x === 0 || x === y : 真假
>类型别名 :=> 真假
>x === 0 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>0 : 0
>x === y : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>y : 1 | 2

        x;  // 0 | 1 | 2
>x : 1 | 2 | 0
    }
}

function f6(x: number, y: 1 | 2) {
>f6 : (x: 数字, y: 1 | 2) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 1 | 2

    if (y === x || 0 === x) {
>y === x || 0 === x : 真假
>类型别名 :=> 真假
>y === x : 真假
>类型别名 :=> 真假
>y : 1 | 2
>x : 数字
>类型别名 :=> 数字
>0 === x : 真假
>类型别名 :=> 真假
>0 : 0
>x : 数字
>类型别名 :=> 数字

        x;  // 0 | 1 | 2
>x : 1 | 2 | 0
    }
}

function f7(x: number | "foo" | "bar", y: 1 | 2 | string) {
>f7 : (x: 数字 | "foo" | "bar", y: 文字 | 1 | 2) => 无值
>x : 数字 | "foo" | "bar"
>y : 文字 | 1 | 2

    if (x === y) {
>x === y : 真假
>类型别名 :=> 真假
>x : 数字 | "foo" | "bar"
>y : 文字 | 1 | 2

        x;  // "foo" | "bar" | 1 | 2
>x : "foo" | "bar" | 1 | 2
    }
}

function f8(x: number | "foo" | "bar") {
>f8 : (x: 数字 | "foo" | "bar") => 无值
>x : 数字 | "foo" | "bar"

    switch (x) {
>x : 数字 | "foo" | "bar"

        case 1:
>1 : 1

        case 2:
>2 : 2

            x;  // 1 | 2
>x : 1 | 2

            break;
        case "foo":
>"foo" : "foo"

            x;  // "foo"
>x : "foo"

            break;
        default:
            x;  // number | "bar"
>x : 数字 | "bar"
    }
}
