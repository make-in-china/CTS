=== tests/cases/conformance/types/objectTypeLiteral/indexSignatures/stringIndexerConstrainsPropertyDeclarations.ts ===
// String indexer types constrain the types of named properties in their containing type

interface MyString extends String {
>MyString : MyString
>String : String

    foo: number;
>foo : 数字
>类型别名 :=> 数字
}

class C {
>C : C

    [x: string]: string;
>x : 文字
>类型别名 :=> 文字

    constructor() { } // ok

    a: string; // ok
>a : 文字
>类型别名 :=> 文字

    b: number; // error
>b : 数字
>类型别名 :=> 数字

    c: () => {} // error
>c : () => {}

    "d": string; // ok
    "e": number; // error
    1.0: string; // ok
    2.0: number; // error
    "3.0": string; // ok
    "4.0": number; // error
    f: MyString; // error
>f : MyString
>MyString : MyString

    get X() { // ok
>X : 文字
>类型别名 :=> 文字

        return '';
>'' : ""
    }
    set X(v) { } // ok
>X : 文字
>类型别名 :=> 文字
>v : 文字
>类型别名 :=> 文字

    foo() { // error
>foo : () => 文字

        return '';
>'' : ""
    }

    static sa: number; // ok
>sa : 数字
>类型别名 :=> 数字

    static sb: string; // ok
>sb : 文字
>类型别名 :=> 文字

    static foo() { } // ok
>foo : () => 无值

    static get X() { // ok
>X : 数字
>类型别名 :=> 数字

        return 1;
>1 : 1
    }
}

interface I {
>I : I

    [x: string]: string;
>x : 文字
>类型别名 :=> 文字

    a: string; // ok
>a : 文字
>类型别名 :=> 文字

    b: number; // error
>b : 数字
>类型别名 :=> 数字

    c: () => {} // error
>c : () => {}

    "d": string; // ok
    "e": number; // error
    1.0: string; // ok
    2.0: number; // error
    (): string; // ok
    (x): number // ok
>x : 任意
>类型别名 :=> 任意

    foo(): string; // error
>foo : () => 文字

    "3.0": string; // ok
    "4.0": number; // error
    f: MyString; // error
>f : MyString
>MyString : MyString
}

var a: {
>a : { (): 文字; (x: 任意): 数字; [x: 文字]: 文字; a: 文字; b: 数字; c: () => {}; "d": 文字; "e": 数字; 1.0: 文字; 2.0: 数字; foo(): 文字; "3.0": 文字; "4.0": 数字; f: MyString; }

    [x: string]: string;
>x : 文字
>类型别名 :=> 文字

    a: string; // ok
>a : 文字
>类型别名 :=> 文字

    b: number; // error
>b : 数字
>类型别名 :=> 数字

    c: () => {} // error
>c : () => {}

    "d": string; // ok
    "e": number; // error
    1.0: string; // ok
    2.0: number; // error
    (): string; // ok
    (x): number // ok
>x : 任意
>类型别名 :=> 任意

    foo(): string; // error
>foo : () => 文字

    "3.0": string; // ok
    "4.0": number; // error
    f: MyString; // error
>f : MyString
>MyString : MyString
}

// error
var b: { [x: string]: string; } = {
>b : { [x: 文字]: 文字; }
>x : 文字
>类型别名 :=> 文字
>{    a: '',    b: 1,     c: () => { },     "d": '',     "e": 1,     1.0: '',    2.0: 1,     "3.0": '',     "4.0": 1,     f: <MyString>null,     get X() {         return '';    },    set X(v) { },     foo() {         return '';    }} : { a: 文字; b: 数字; c: () => 无值; "d": 文字; "e": 数字; 1.0: 文字; 2.0: 数字; "3.0": 文字; "4.0": 数字; f: MyString; X: 文字; foo(): 文字; }

    a: '',
>a : 文字
>类型别名 :=> 文字
>'' : ""

    b: 1, 
>b : 数字
>类型别名 :=> 数字
>1 : 1

    c: () => { }, 
>c : () => 无值
>() => { } : () => 无值

    "d": '', 
>'' : ""

    "e": 1, 
>1 : 1

    1.0: '',
>'' : ""

    2.0: 1, 
>1 : 1

    "3.0": '', 
>'' : ""

    "4.0": 1, 
>1 : 1

    f: <MyString>null, 
>f : MyString
><MyString>null : MyString
>MyString : MyString
>null : 空值
>类型别名 :=> 空值

    get X() { 
>X : 文字
>类型别名 :=> 文字

        return '';
>'' : ""

    },
    set X(v) { }, 
>X : 文字
>类型别名 :=> 文字
>v : 文字
>类型别名 :=> 文字

    foo() { 
>foo : () => 文字

        return '';
>'' : ""
    }
}
