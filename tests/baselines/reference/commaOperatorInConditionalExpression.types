=== tests/cases/compiler/commaOperatorInConditionalExpression.ts ===
function f (m: string) {
>f : (m: 文字) => 无值
>m : 文字
>类型别名 :=> 文字

    [1, 2, 3].map(i => {
>[1, 2, 3].map(i => {        return true? { [m]: i } : { [m]: i + 1 }    }) : { [x: 文字]: 数字; }[]
>[1, 2, 3].map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>i => {        return true? { [m]: i } : { [m]: i + 1 }    } : (i: 数字) => { [x: 文字]: 数字; }
>i : 数字
>类型别名 :=> 数字

        return true? { [m]: i } : { [m]: i + 1 }
>true? { [m]: i } : { [m]: i + 1 } : { [x: 文字]: 数字; }
>true : 为真
>类型别名 :=> 为真
>{ [m]: i } : { [x: 文字]: 数字; }
>m : 文字
>类型别名 :=> 文字
>i : 数字
>类型别名 :=> 数字
>{ [m]: i + 1 } : { [x: 文字]: 数字; }
>m : 文字
>类型别名 :=> 文字
>i + 1 : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
>1 : 1

    })
}
