=== tests/cases/compiler/f1.d.ts ===
export {};

declare module M.M1 {
>M : typeof M
>M1 : typeof M1

    export let x: number;
>x : number
>类型别名 :=> 数字
}
declare global {
>global : typeof global

    interface SymbolConstructor {
>SymbolConstructor : SymbolConstructor

        observable: symbol;
>observable : symbol
>类型别名 :=> 符号
    }
    class Cls {x}
>Cls : Cls
>x : any
>类型别名 :=> 任意

    let [a, b]: number[];
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字

    export import X = M.M1.x;
>X : number
>类型别名 :=> 数字
>M : typeof M
>M1 : typeof M.M1
>x : number
>类型别名 :=> 数字
}

=== tests/cases/compiler/main.ts ===
Symbol.observable;
>Symbol.observable : symbol
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>observable : symbol
>类型别名 :=> 符号

new Cls().x
>new Cls().x : any
>类型别名 :=> 任意
>new Cls() : Cls
>Cls : typeof Cls
>x : any
>类型别名 :=> 任意

let c = a + b + X;
>c : number
>类型别名 :=> 数字
>a + b + X : number
>类型别名 :=> 数字
>a + b : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>X : number
>类型别名 :=> 数字

