=== tests/cases/compiler/f1.d.ts ===
export {};

declare module M.M1 {
>M : 类为 M
>M1 : 类为 M1

    export let x: number;
>x : 数字
>类型别名 :=> 数字
}
declare global {
>global : 类为 global

    interface SymbolConstructor {
>SymbolConstructor : SymbolConstructor

        observable: symbol;
>observable : 符号
>类型别名 :=> 符号
    }
    class Cls {x}
>Cls : Cls
>x : 任意
>类型别名 :=> 任意

    let [a, b]: number[];
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

    export import X = M.M1.x;
>X : 数字
>类型别名 :=> 数字
>M : 类为 M
>M1 : 类为 M.M1
>x : 数字
>类型别名 :=> 数字
}

=== tests/cases/compiler/main.ts ===
Symbol.observable;
>Symbol.observable : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>observable : 符号
>类型别名 :=> 符号

new Cls().x
>new Cls().x : 任意
>类型别名 :=> 任意
>new Cls() : Cls
>Cls : 类为 Cls
>x : 任意
>类型别名 :=> 任意

let c = a + b + X;
>c : 任意
>类型别名 :=> 任意
>a + b + X : 任意
>类型别名 :=> 任意
>a + b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>X : 数字
>类型别名 :=> 数字

