=== tests/cases/compiler/noImplicitReturnsInAsync1.ts ===
async function test(isError: boolean = false) {
>test : (isError?: boolean) => Promise<void>
>isError : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

    if (isError === true) {
>isError === true : boolean
>类型别名 :=> 真假
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

        return;
    }
    let x = await Promise.resolve("The test is passed without an error.");
>x : string
>类型别名 :=> 文字
>await Promise.resolve("The test is passed without an error.") : string
>类型别名 :=> 文字
>Promise.resolve("The test is passed without an error.") : Promise<string>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>"The test is passed without an error." : "The test is passed without an error."
}
