=== tests/cases/conformance/types/mapped/mappedTypes2.ts ===
function verifyLibTypes<T, K extends keyof T, U>() {
>verifyLibTypes : <T, K 扩展 键集 T, U>() => 无值
>T : T
>K : K
>T : T
>U : U

    var x1: Partial<T>;
>x1 : Partial<T>
>Partial : Partial<T>
>T : T

    var x1: { [P in keyof T]?: T[P] };
>x1 : Partial<T>
>P : P
>T : T
>T : T
>P : P

    var x2: Readonly<T>;
>x2 : Readonly<T>
>Readonly : Readonly<T>
>T : T

    var x2: { readonly [P in keyof T]: T[P] };
>x2 : Readonly<T>
>P : P
>T : T
>T : T
>P : P

    var x3: Pick<T, K>;
>x3 : Pick<T, K>
>Pick : Pick<T, K>
>T : T
>K : K

    var x3: { [P in K]: T[P] };
>x3 : Pick<T, K>
>P : P
>K : K
>T : T
>P : P

    var x4: Record<K, U>;
>x4 : Record<K, U>
>Record : Record<K, T>
>K : K
>U : U

    var x4: { [P in K]: U };
>x4 : Record<K, U>
>P : P
>K : K
>U : U
}

type Proxy<T> = {
>Proxy : Proxy<T>
>T : T

    get(): T;
>get : () => T
>T : T

    set(value: T): void;
>set : (value: T) => 无值
>value : T
>T : T
}

type Proxify<T> = {
>Proxify : Proxify<T>
>T : T

    [P in keyof T]: Proxy<T[P]>;
>P : P
>T : T
>Proxy : Proxy<T>
>T : T
>P : P
}

type DeepReadonly<T> = {
>DeepReadonly : DeepReadonly<T>
>T : T

    readonly [P in keyof T]: DeepReadonly<T[P]>;
>P : P
>T : T
>DeepReadonly : DeepReadonly<T>
>T : T
>P : P

};

declare function assign<T>(obj: T, props: Partial<T>): void;
>assign : <T>(obj: T, props: Partial<T>) => 无值
>T : T
>obj : T
>T : T
>props : Partial<T>
>Partial : Partial<T>
>T : T

declare function freeze<T>(obj: T): Readonly<T>;
>freeze : <T>(obj: T) => Readonly<T>
>T : T
>obj : T
>T : T
>Readonly : Readonly<T>
>T : T

declare function pick<T, K extends keyof T>(obj: T, ...keys: K[]): Pick<T, K>;
>pick : <T, K 扩展 键集 T>(obj: T, ...keys: K[]) => Pick<T, K>
>T : T
>K : K
>T : T
>obj : T
>T : T
>keys : K[]
>K : K
>Pick : Pick<T, K>
>T : T
>K : K

declare function mapObject<K extends string, T, U>(obj: Record<K, T>, f: (x: T) => U): Record<K, U>;
>mapObject : <K 扩展 文字, T, U>(obj: Record<K, T>, f: (x: T) => U) => Record<K, U>
>K : K
>T : T
>U : U
>obj : Record<K, T>
>Record : Record<K, T>
>K : K
>T : T
>f : (x: T) => U
>x : T
>T : T
>U : U
>Record : Record<K, T>
>K : K
>U : U

declare function proxify<T>(obj: T): Proxify<T>;
>proxify : <T>(obj: T) => Proxify<T>
>T : T
>obj : T
>T : T
>Proxify : Proxify<T>
>T : T

interface Point {
>Point : Point

    x: number;
>x : 数字
>类型别名 :=> 数字

    y: number;
>y : 数字
>类型别名 :=> 数字
}

interface Shape {
>Shape : Shape

    name: string;
>name : 文字
>类型别名 :=> 文字

    width: number;
>width : 数字
>类型别名 :=> 数字

    height: number;
>height : 数字
>类型别名 :=> 数字

    location: Point;
>location : Point
>Point : Point
}

interface PartialShape {
>PartialShape : PartialShape

    name?: string;
>name : 文字 | 未定

    width?: number;
>width : 数字 | 未定

    height?: number;
>height : 数字 | 未定

    location?: Point;
>location : Point | 未定
>Point : Point
}

interface ReadonlyShape {
>ReadonlyShape : ReadonlyShape

    readonly name: string;
>name : 文字
>类型别名 :=> 文字

    readonly width: number;
>width : 数字
>类型别名 :=> 数字

    readonly height: number;
>height : 数字
>类型别名 :=> 数字

    readonly location: Point;
>location : Point
>Point : Point
}

function f0(s1: Shape, s2: Shape) {
>f0 : (s1: Shape, s2: Shape) => 无值
>s1 : Shape
>Shape : Shape
>s2 : Shape
>Shape : Shape

    assign(s1, { name: "circle" });
>assign(s1, { name: "circle" }) : 无值
>类型别名 :=> 无值
>assign : <T>(obj: T, props: Partial<T>) => 无值
>s1 : Shape
>{ name: "circle" } : { name: 文字; }
>name : 文字
>类型别名 :=> 文字
>"circle" : "circle"

    assign(s2, { width: 10, height: 20 });
>assign(s2, { width: 10, height: 20 }) : 无值
>类型别名 :=> 无值
>assign : <T>(obj: T, props: Partial<T>) => 无值
>s2 : Shape
>{ width: 10, height: 20 } : { width: 数字; height: 数字; }
>width : 数字
>类型别名 :=> 数字
>10 : 10
>height : 数字
>类型别名 :=> 数字
>20 : 20
}

function f1(shape: Shape) {
>f1 : (shape: Shape) => 无值
>shape : Shape
>Shape : Shape

    var frozen: ReadonlyShape;
>frozen : ReadonlyShape
>ReadonlyShape : ReadonlyShape

    var frozen: Readonly<Shape>;
>frozen : ReadonlyShape
>Readonly : Readonly<T>
>Shape : Shape

    var frozen = freeze(shape);
>frozen : ReadonlyShape
>freeze(shape) : Readonly<Shape>
>freeze : <T>(obj: T) => Readonly<T>
>shape : Shape
}

function f2(shape: Shape) {
>f2 : (shape: Shape) => 无值
>shape : Shape
>Shape : Shape

    var partial: PartialShape;
>partial : PartialShape
>PartialShape : PartialShape

    var partial: Partial<Shape>;
>partial : PartialShape
>Partial : Partial<T>
>Shape : Shape

    var partial: Partial<Shape> = {};
>partial : PartialShape
>Partial : Partial<T>
>Shape : Shape
>{} : {}
}

function f3(shape: Shape) {
>f3 : (shape: Shape) => 无值
>shape : Shape
>Shape : Shape

    const x = pick(shape, "name", "location");  // { name: string, location: Point }
>x : Pick<Shape, "name" | "location">
>pick(shape, "name", "location") : Pick<Shape, "name" | "location">
>pick : <T, K 扩展 键集 T>(obj: T, ...keys: K[]) => Pick<T, K>
>shape : Shape
>"name" : "name"
>"location" : "location"
}

function f4() {
>f4 : () => 无值

    const rec = { foo: "hello", bar: "world", baz: "bye" };
>rec : { foo: 文字; bar: 文字; baz: 文字; }
>{ foo: "hello", bar: "world", baz: "bye" } : { foo: 文字; bar: 文字; baz: 文字; }
>foo : 文字
>类型别名 :=> 文字
>"hello" : "hello"
>bar : 文字
>类型别名 :=> 文字
>"world" : "world"
>baz : 文字
>类型别名 :=> 文字
>"bye" : "bye"

    const lengths = mapObject(rec, s => s.length);  // { foo: number, bar: number, baz: number }
>lengths : Record<"foo" | "bar" | "baz", 数字>
>mapObject(rec, s => s.length) : Record<"foo" | "bar" | "baz", 数字>
>mapObject : <K 扩展 文字, T, U>(obj: Record<K, T>, f: (x: T) => U) => Record<K, U>
>rec : { foo: 文字; bar: 文字; baz: 文字; }
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
}

function f5(shape: Shape) {
>f5 : (shape: Shape) => 无值
>shape : Shape
>Shape : Shape

    const p = proxify(shape);
>p : Proxify<Shape>
>proxify(shape) : Proxify<Shape>
>proxify : <T>(obj: T) => Proxify<T>
>shape : Shape

    let name = p.name.get();
>name : 文字
>类型别名 :=> 文字
>p.name.get() : 文字
>类型别名 :=> 文字
>p.name.get : () => 文字
>p.name : Proxy<文字>
>p : Proxify<Shape>
>name : Proxy<文字>
>get : () => 文字

    p.width.set(42);
>p.width.set(42) : 无值
>类型别名 :=> 无值
>p.width.set : (value: 数字) => 无值
>p.width : Proxy<数字>
>p : Proxify<Shape>
>width : Proxy<数字>
>set : (value: 数字) => 无值
>42 : 42
}

function f6(shape: DeepReadonly<Shape>) {
>f6 : (shape: DeepReadonly<Shape>) => 无值
>shape : DeepReadonly<Shape>
>DeepReadonly : DeepReadonly<T>
>Shape : Shape

    let name = shape.name;  // string
>name : 文字
>类型别名 :=> 文字
>shape.name : 文字
>类型别名 :=> 文字
>shape : DeepReadonly<Shape>
>name : 文字
>类型别名 :=> 文字

    let location = shape.location;  // DeepReadonly<Point>
>location : DeepReadonly<Point>
>shape.location : DeepReadonly<Point>
>shape : DeepReadonly<Shape>
>location : DeepReadonly<Point>

    let x = location.x;  // number
>x : 数字
>类型别名 :=> 数字
>location.x : 数字
>类型别名 :=> 数字
>location : DeepReadonly<Point>
>x : 数字
>类型别名 :=> 数字
}
