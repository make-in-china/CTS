=== tests/cases/compiler/f1.ts ===
export class A {}
>A : A

=== tests/cases/compiler/f2.ts ===
export class B {
>B : B

    n: number;
>n : number
>类型别名 :=> 数字
}

=== tests/cases/compiler/f3.ts ===
import {A} from "./f1";
>A : typeof A

A.prototype.foo = function () { return undefined; }
>A.prototype.foo = function () { return undefined; } : () => any
>A.prototype.foo : () => any
>A.prototype : A
>A : typeof A
>prototype : A
>foo : () => any
>function () { return undefined; } : () => any
>undefined : undefined
>类型别名 :=> 未定

namespace N {
>N : any
>类型别名 :=> 任意

    export interface Ifc { a }
>Ifc : Ifc
>a : any
>类型别名 :=> 任意

    export interface Cls { a }
>Cls : Cls
>a : any
>类型别名 :=> 任意
}

declare module "./f1" {
    import {B} from "./f2";
>B : any
>类型别名 :=> 任意

    import I = N.Ifc;
>I : any
>类型别名 :=> 任意
>N : any
>类型别名 :=> 任意
>Ifc : I

    import C = N.Cls;
>C : any
>类型别名 :=> 任意
>N : any
>类型别名 :=> 任意
>Cls : C

    interface A {
>A : A

        foo(): B;
>foo : () => any
>B : any
>类型别名 :=> 任意

        bar(): I;
>bar : () => I
>I : I

        baz(): C;
>baz : () => C
>C : C
    }
}

=== tests/cases/compiler/f4.ts ===
import {A} from "./f1";
>A : typeof A

import "./f3";

let a: A;
>a : A
>A : A

let b = a.foo().n;
>b : any
>类型别名 :=> 任意
>a.foo().n : any
>类型别名 :=> 任意
>a.foo() : any
>类型别名 :=> 任意
>a.foo : () => any
>a : A
>foo : () => any
>n : any
>类型别名 :=> 任意

