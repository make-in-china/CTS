=== tests/cases/conformance/types/primitives/null/validNullAssignments.ts ===
var a: number = null;
>a : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

var b: boolean = null;
>b : boolean
>类型别名 :=> 真假
>null : null
>类型别名 :=> 空值

var c: string = null;
>c : string
>类型别名 :=> 文字
>null : null
>类型别名 :=> 空值

var d: void = null;
>d : void
>类型别名 :=> 无值
>null : null
>类型别名 :=> 空值

var e: typeof undefined = null;
>e : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>null : null
>类型别名 :=> 空值

e = null; // ok
>e = null : null
>类型别名 :=> 空值
>e : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

enum E { A }
>E : E
>A : E

E.A = null; // error
>E.A = null : null
>类型别名 :=> 空值
>E.A : any
>类型别名 :=> 任意
>E : typeof E
>A : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

class C { foo: string }
>C : C
>foo : string
>类型别名 :=> 文字

var f: C;
>f : C
>C : C

f = null; // ok
>f = null : null
>类型别名 :=> 空值
>f : C
>null : null
>类型别名 :=> 空值

C = null; // error
>C = null : null
>类型别名 :=> 空值
>C : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

interface I { foo: string }
>I : I
>foo : string
>类型别名 :=> 文字

var g: I;
>g : I
>I : I

g = null; // ok
>g = null : null
>类型别名 :=> 空值
>g : I
>null : null
>类型别名 :=> 空值

I = null; // error
>I = null : null
>类型别名 :=> 空值
>I : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

module M { export var x = 1; }
>M : typeof M
>x : number
>类型别名 :=> 数字
>1 : 1

M = null; // error
>M = null : null
>类型别名 :=> 空值
>M : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

var h: { f(): void } = null;
>h : { f(): void; }
>f : () => void
>null : null
>类型别名 :=> 空值

function i<T>(a: T) {
>i : <T>(a: T) => void
>T : T
>a : T
>T : T

    a = null;
>a = null : null
>类型别名 :=> 空值
>a : T
>null : null
>类型别名 :=> 空值
}
i = null; // error
>i = null : null
>类型别名 :=> 空值
>i : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

