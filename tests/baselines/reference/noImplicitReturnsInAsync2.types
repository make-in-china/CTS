=== tests/cases/compiler/noImplicitReturnsInAsync2.ts ===
// Should be an error, Promise<number>, currently retorted correctly 
async function test3(isError: boolean = true) {
>test3 : (isError?: boolean) => Promise<number>
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

    if (isError === true) {
>isError === true : boolean
>类型别名 :=> 真假
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

        return 6;
>6 : 6
    }
}

// Should not be an error, Promise<any>, currently **not** working
async function test4(isError: boolean = true) {  
>test4 : (isError?: boolean) => Promise<any>
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

    if (isError === true) {
>isError === true : boolean
>类型别名 :=> 真假
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}

// should not be error, Promise<any> currently working correctly 
async function test5(isError: boolean = true): Promise<any> { //should not be error
>test5 : (isError?: boolean) => Promise<any>
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>Promise : Promise<T>

    if (isError === true) {
>isError === true : boolean
>类型别名 :=> 真假
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}


// should be error, currently reported correctly 
async function test6(isError: boolean = true): Promise<number> { 
>test6 : (isError?: boolean) => Promise<number>
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>Promise : Promise<T>

    if (isError === true) {
>isError === true : boolean
>类型别名 :=> 真假
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

        return undefined;
>undefined : undefined
>类型别名 :=> 未定
    }
}

// infered to be Promise<void>, should not be an error, currently reported correctly 
async function test7(isError: boolean = true) { 
>test7 : (isError?: boolean) => Promise<void>
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

    if (isError === true) {
>isError === true : boolean
>类型别名 :=> 真假
>isError : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

        return;
    }
}
