=== tests/cases/conformance/types/typeParameters/typeArgumentLists/constraintSatisfactionWithAny.ts ===
// any is not a valid type argument unless there is no constraint, or the constraint is any

function foo<T extends String>(x: T): T { return null; }
>foo : <T extends String>(x: T) => T
>T : T
>String : String
>x : T
>T : T
>T : T
>null : null
>类型别名 :=> 空值

function foo2<T extends { x: number }>(x: T): T { return null; }
>foo2 : <T extends { x: number; }>(x: T) => T
>T : T
>x : number
>类型别名 :=> 数字
>x : T
>T : T
>T : T
>null : null
>类型别名 :=> 空值

//function foo3<T extends T[]>(x: T): T { return null; }
function foo4<T extends <T>(x: T) => void>(x: T): T { return null; }
>foo4 : <T extends <T>(x: T) => void>(x: T) => T
>T : T
>T : T
>x : T
>T : T
>x : T
>T : T
>T : T
>null : null
>类型别名 :=> 空值

var a;
>a : any
>类型别名 :=> 任意

foo(a);
>foo(a) : any
>类型别名 :=> 任意
>foo : <T extends String>(x: T) => T
>a : any
>类型别名 :=> 任意

foo2(a);
>foo2(a) : any
>类型别名 :=> 任意
>foo2 : <T extends { x: number; }>(x: T) => T
>a : any
>类型别名 :=> 任意

//foo3(a);
foo4(a);
>foo4(a) : any
>类型别名 :=> 任意
>foo4 : <T extends <T>(x: T) => void>(x: T) => T
>a : any
>类型别名 :=> 任意

var b: number;
>b : number
>类型别名 :=> 数字

foo<any>(b);
>foo<any>(b) : any
>类型别名 :=> 任意
>foo : <T extends String>(x: T) => T
>b : number
>类型别名 :=> 数字

foo2<any>(b);
>foo2<any>(b) : any
>类型别名 :=> 任意
>foo2 : <T extends { x: number; }>(x: T) => T
>b : number
>类型别名 :=> 数字

//foo3<any>(b);
foo4<any>(b);
>foo4<any>(b) : any
>类型别名 :=> 任意
>foo4 : <T extends <T>(x: T) => void>(x: T) => T
>b : number
>类型别名 :=> 数字

//function foo5<T extends String, U extends T>(x: T, y: U): T { return null; }
//foo5(a, a);
//foo5<any, any>(b, b);

class C<T extends String> {
>C : C<T>
>T : T
>String : String

    constructor(public x: T) { }
>x : T
>T : T
}

var c1 = new C(a);
>c1 : C<any>
>new C(a) : C<any>
>C : typeof C
>a : any
>类型别名 :=> 任意

var c2 = new C<any>(b);
>c2 : C<any>
>new C<any>(b) : C<any>
>C : typeof C
>b : number
>类型别名 :=> 数字

class C2<T extends { x: number }> {
>C2 : C2<T>
>T : T
>x : number
>类型别名 :=> 数字

    constructor(public x: T) { }
>x : T
>T : T
}

var c3 = new C2(a);
>c3 : C2<any>
>new C2(a) : C2<any>
>C2 : typeof C2
>a : any
>类型别名 :=> 任意

var c4 = new C2<any>(b);
>c4 : C2<any>
>new C2<any>(b) : C2<any>
>C2 : typeof C2
>b : number
>类型别名 :=> 数字

//class C3<T extends T[]> {
//    constructor(public x: T) { }
//}

//var c5 = new C3(a);
//var c6 = new C3<any>(b);

class C4<T extends <T>(x:T) => T> {
>C4 : C4<T>
>T : T
>T : T
>x : T
>T : T
>T : T

    constructor(public x: T) { }
>x : T
>T : T
}

var c7 = new C4(a);
>c7 : C4<any>
>new C4(a) : C4<any>
>C4 : typeof C4
>a : any
>类型别名 :=> 任意

var c8 = new C4<any>(b);
>c8 : C4<any>
>new C4<any>(b) : C4<any>
>C4 : typeof C4
>b : number
>类型别名 :=> 数字



