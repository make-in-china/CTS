=== tests/cases/conformance/classes/classDeclarations/mergedInheritedClassInterface.ts ===
interface BaseInterface {
>BaseInterface : BaseInterface

    required: number;
>required : number
>类型别名 :=> 数字

    optional?: number;
>optional : number
>类型别名 :=> 数字
}

class BaseClass {
>BaseClass : BaseClass

    baseMethod() { }
>baseMethod : () => void

    baseNumber: number;
>baseNumber : number
>类型别名 :=> 数字
}

interface Child extends BaseInterface {
>Child : Child
>BaseInterface : BaseInterface

    additional: number;
>additional : number
>类型别名 :=> 数字
}

class Child extends BaseClass {
>Child : Child
>BaseClass : BaseClass

    classNumber: number;
>classNumber : number
>类型别名 :=> 数字

    method() { }
>method : () => void
}

interface ChildNoBaseClass extends BaseInterface {
>ChildNoBaseClass : ChildNoBaseClass
>BaseInterface : BaseInterface

    additional2: string;
>additional2 : string
>类型别名 :=> 文字
}
class ChildNoBaseClass {
>ChildNoBaseClass : ChildNoBaseClass

    classString: string;
>classString : string
>类型别名 :=> 文字

    method2() { }
>method2 : () => void
}
class Grandchild extends ChildNoBaseClass {
>Grandchild : Grandchild
>ChildNoBaseClass : ChildNoBaseClass
}

// checks if properties actually were merged
var child : Child;
>child : Child
>Child : Child

child.required;
>child.required : number
>类型别名 :=> 数字
>child : Child
>required : number
>类型别名 :=> 数字

child.optional;
>child.optional : number
>类型别名 :=> 数字
>child : Child
>optional : number
>类型别名 :=> 数字

child.additional;
>child.additional : number
>类型别名 :=> 数字
>child : Child
>additional : number
>类型别名 :=> 数字

child.baseNumber;
>child.baseNumber : number
>类型别名 :=> 数字
>child : Child
>baseNumber : number
>类型别名 :=> 数字

child.classNumber;
>child.classNumber : number
>类型别名 :=> 数字
>child : Child
>classNumber : number
>类型别名 :=> 数字

child.baseMethod();
>child.baseMethod() : void
>类型别名 :=> 无值
>child.baseMethod : () => void
>child : Child
>baseMethod : () => void

child.method();
>child.method() : void
>类型别名 :=> 无值
>child.method : () => void
>child : Child
>method : () => void

var grandchild: Grandchild;
>grandchild : Grandchild
>Grandchild : Grandchild

grandchild.required;
>grandchild.required : number
>类型别名 :=> 数字
>grandchild : Grandchild
>required : number
>类型别名 :=> 数字

grandchild.optional;
>grandchild.optional : number
>类型别名 :=> 数字
>grandchild : Grandchild
>optional : number
>类型别名 :=> 数字

grandchild.additional2;
>grandchild.additional2 : string
>类型别名 :=> 文字
>grandchild : Grandchild
>additional2 : string
>类型别名 :=> 文字

grandchild.classString;
>grandchild.classString : string
>类型别名 :=> 文字
>grandchild : Grandchild
>classString : string
>类型别名 :=> 文字

grandchild.method2();
>grandchild.method2() : void
>类型别名 :=> 无值
>grandchild.method2 : () => void
>grandchild : Grandchild
>method2 : () => void

