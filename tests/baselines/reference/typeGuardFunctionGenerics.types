=== tests/cases/conformance/expressions/typeGuards/typeGuardFunctionGenerics.ts ===
class A {
>A : A

    propA: number;
>propA : number
>类型别名 :=> 数字
}

class B {
>B : B

    propB: number;
>propB : number
>类型别名 :=> 数字
}

class C extends A {
>C : C
>A : A

    propC: number;
>propC : number
>类型别名 :=> 数字
}

declare function isB(p1): p1 is B;
>isB : (p1: any) => p1 is B
>p1 : any
>类型别名 :=> 任意
>p1 : any
>类型别名 :=> 任意
>B : B

declare function isC(p1): p1 is C;
>isC : (p1: any) => p1 is C
>p1 : any
>类型别名 :=> 任意
>p1 : any
>类型别名 :=> 任意
>C : C

declare function retC(x): C; 
>retC : (x: any) => C
>x : any
>类型别名 :=> 任意
>C : C

declare function funA<T>(p1: (p1) => T): T;
>funA : <T>(p1: (p1: any) => T) => T
>T : T
>p1 : (p1: any) => T
>p1 : any
>类型别名 :=> 任意
>T : T
>T : T

declare function funB<T>(p1: (p1) => T, p2: any): p2 is T;
>funB : <T>(p1: (p1: any) => T, p2: any) => p2 is T
>T : T
>p1 : (p1: any) => T
>p1 : any
>类型别名 :=> 任意
>T : T
>p2 : any
>类型别名 :=> 任意
>p2 : any
>类型别名 :=> 任意
>T : T

declare function funC<T>(p1: (p1) => p1 is T): T;
>funC : <T>(p1: (p1: any) => p1 is T) => T
>T : T
>p1 : (p1: any) => p1 is T
>p1 : any
>类型别名 :=> 任意
>p1 : any
>类型别名 :=> 任意
>T : T
>T : T

declare function funD<T>(p1: (p1) => p1 is T, p2: any): p2 is T;
>funD : <T>(p1: (p1: any) => p1 is T, p2: any) => p2 is T
>T : T
>p1 : (p1: any) => p1 is T
>p1 : any
>类型别名 :=> 任意
>p1 : any
>类型别名 :=> 任意
>T : T
>p2 : any
>类型别名 :=> 任意
>p2 : any
>类型别名 :=> 任意
>T : T

declare function funE<T, U>(p1: (p1) => p1 is T, p2: U): T;
>funE : <T, U>(p1: (p1: any) => p1 is T, p2: U) => T
>T : T
>U : U
>p1 : (p1: any) => p1 is T
>p1 : any
>类型别名 :=> 任意
>p1 : any
>类型别名 :=> 任意
>T : T
>p2 : U
>U : U
>T : T

let a: A;
>a : A
>A : A

let test1: boolean = funA(isB);
>test1 : boolean
>类型别名 :=> 真假
>funA(isB) : boolean
>类型别名 :=> 真假
>funA : <T>(p1: (p1: any) => T) => T
>isB : (p1: any) => p1 is B

if (funB(retC, a)) {
>funB(retC, a) : boolean
>类型别名 :=> 真假
>funB : <T>(p1: (p1: any) => T, p2: any) => p2 is T
>retC : (x: any) => C
>a : A

    a.propC;
>a.propC : number
>类型别名 :=> 数字
>a : C
>propC : number
>类型别名 :=> 数字
}
let test2: B = funC(isB);
>test2 : B
>B : B
>funC(isB) : B
>funC : <T>(p1: (p1: any) => p1 is T) => T
>isB : (p1: any) => p1 is B

if (funD(isC, a)) {
>funD(isC, a) : boolean
>类型别名 :=> 真假
>funD : <T>(p1: (p1: any) => p1 is T, p2: any) => p2 is T
>isC : (p1: any) => p1 is C
>a : A

    a.propC;
>a.propC : number
>类型别名 :=> 数字
>a : C
>propC : number
>类型别名 :=> 数字
}
let test3: B = funE(isB, 1);
>test3 : B
>B : B
>funE(isB, 1) : B
>funE : <T, U>(p1: (p1: any) => p1 is T, p2: U) => T
>isB : (p1: any) => p1 is B
>1 : 1

