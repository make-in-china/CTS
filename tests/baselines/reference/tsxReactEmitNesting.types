=== tests/cases/conformance/jsx/file.tsx ===
declare var vdom: any;
>vdom : 任意
>类型别名 :=> 任意

declare var ctrl: any;
>ctrl : 任意
>类型别名 :=> 任意

declare var model: any;
>model : 任意
>类型别名 :=> 任意

// A simple render function with nesting and control statements
let render = (ctrl, model) =>
>render : (ctrl: 任意, model: 任意) => 任意
>(ctrl, model) =>    <section class="todoapp">        <header class="header">            <h1>todos &lt;x&gt;</h1>            <input class="new-todo" autofocus autocomplete="off" placeholder="What needs to be done?" value={model.newTodo} onKeyup={ctrl.addTodo.bind(ctrl, model)} />        </header>        <section class="main" style={{display:(model.todos && model.todos.length) ? "block" : "none"}}>            <input class="toggle-all" type="checkbox" onChange={ctrl.toggleAll.bind(ctrl)}/>            <ul class="todo-list">                {model.filteredTodos.map((todo) =>                    <li class={{todo: true, completed: todo.completed, editing: todo == model.editedTodo}}>                        <div class="view">                            {(!todo.editable) ?                                <input class="toggle" type="checkbox"></input>                                : null                            }                            <label onDoubleClick={()=>{ctrl.editTodo(todo)}}>{todo.title}</label>                            <button class="destroy" onClick={ctrl.removeTodo.bind(ctrl,todo)}></button>                            <div class="iconBorder">                                <div class="icon"/>                            </div>                        </div>                    </li>                )}            </ul>        </section>    </section> : (ctrl: 任意, model: 任意) => 任意
>ctrl : 任意
>类型别名 :=> 任意
>model : 任意
>类型别名 :=> 任意

    <section class="todoapp">
><section class="todoapp">        <header class="header">            <h1>todos &lt;x&gt;</h1>            <input class="new-todo" autofocus autocomplete="off" placeholder="What needs to be done?" value={model.newTodo} onKeyup={ctrl.addTodo.bind(ctrl, model)} />        </header>        <section class="main" style={{display:(model.todos && model.todos.length) ? "block" : "none"}}>            <input class="toggle-all" type="checkbox" onChange={ctrl.toggleAll.bind(ctrl)}/>            <ul class="todo-list">                {model.filteredTodos.map((todo) =>                    <li class={{todo: true, completed: todo.completed, editing: todo == model.editedTodo}}>                        <div class="view">                            {(!todo.editable) ?                                <input class="toggle" type="checkbox"></input>                                : null                            }                            <label onDoubleClick={()=>{ctrl.editTodo(todo)}}>{todo.title}</label>                            <button class="destroy" onClick={ctrl.removeTodo.bind(ctrl,todo)}></button>                            <div class="iconBorder">                                <div class="icon"/>                            </div>                        </div>                    </li>                )}            </ul>        </section>    </section> : 任意
>类型别名 :=> 任意
>section : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字

        <header class="header">
><header class="header">            <h1>todos &lt;x&gt;</h1>            <input class="new-todo" autofocus autocomplete="off" placeholder="What needs to be done?" value={model.newTodo} onKeyup={ctrl.addTodo.bind(ctrl, model)} />        </header> : 任意
>类型别名 :=> 任意
>header : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字

            <h1>todos &lt;x&gt;</h1>
><h1>todos &lt;x&gt;</h1> : 任意
>类型别名 :=> 任意
>h1 : 任意
>类型别名 :=> 任意
>h1 : 任意
>类型别名 :=> 任意

            <input class="new-todo" autofocus autocomplete="off" placeholder="What needs to be done?" value={model.newTodo} onKeyup={ctrl.addTodo.bind(ctrl, model)} />
><input class="new-todo" autofocus autocomplete="off" placeholder="What needs to be done?" value={model.newTodo} onKeyup={ctrl.addTodo.bind(ctrl, model)} /> : 任意
>类型别名 :=> 任意
>input : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字
>autofocus : 为真
>类型别名 :=> 为真
>autocomplete : 文字
>类型别名 :=> 文字
>placeholder : 文字
>类型别名 :=> 文字
>value : 任意
>类型别名 :=> 任意
>model.newTodo : 任意
>类型别名 :=> 任意
>model : 任意
>类型别名 :=> 任意
>newTodo : 任意
>类型别名 :=> 任意
>onKeyup : 任意
>类型别名 :=> 任意
>ctrl.addTodo.bind(ctrl, model) : 任意
>类型别名 :=> 任意
>ctrl.addTodo.bind : 任意
>类型别名 :=> 任意
>ctrl.addTodo : 任意
>类型别名 :=> 任意
>ctrl : 任意
>类型别名 :=> 任意
>addTodo : 任意
>类型别名 :=> 任意
>bind : 任意
>类型别名 :=> 任意
>ctrl : 任意
>类型别名 :=> 任意
>model : 任意
>类型别名 :=> 任意

        </header>
>header : 任意
>类型别名 :=> 任意

        <section class="main" style={{display:(model.todos && model.todos.length) ? "block" : "none"}}>
><section class="main" style={{display:(model.todos && model.todos.length) ? "block" : "none"}}>            <input class="toggle-all" type="checkbox" onChange={ctrl.toggleAll.bind(ctrl)}/>            <ul class="todo-list">                {model.filteredTodos.map((todo) =>                    <li class={{todo: true, completed: todo.completed, editing: todo == model.editedTodo}}>                        <div class="view">                            {(!todo.editable) ?                                <input class="toggle" type="checkbox"></input>                                : null                            }                            <label onDoubleClick={()=>{ctrl.editTodo(todo)}}>{todo.title}</label>                            <button class="destroy" onClick={ctrl.removeTodo.bind(ctrl,todo)}></button>                            <div class="iconBorder">                                <div class="icon"/>                            </div>                        </div>                    </li>                )}            </ul>        </section> : 任意
>类型别名 :=> 任意
>section : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字
>style : { display: 文字; }
>{display:(model.todos && model.todos.length) ? "block" : "none"} : { display: 文字; }
>display : 文字
>类型别名 :=> 文字
>(model.todos && model.todos.length) ? "block" : "none" : "block" | "none"
>(model.todos && model.todos.length) : 任意
>类型别名 :=> 任意
>model.todos && model.todos.length : 任意
>类型别名 :=> 任意
>model.todos : 任意
>类型别名 :=> 任意
>model : 任意
>类型别名 :=> 任意
>todos : 任意
>类型别名 :=> 任意
>model.todos.length : 任意
>类型别名 :=> 任意
>model.todos : 任意
>类型别名 :=> 任意
>model : 任意
>类型别名 :=> 任意
>todos : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>"block" : "block"
>"none" : "none"

            <input class="toggle-all" type="checkbox" onChange={ctrl.toggleAll.bind(ctrl)}/>
><input class="toggle-all" type="checkbox" onChange={ctrl.toggleAll.bind(ctrl)}/> : 任意
>类型别名 :=> 任意
>input : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字
>type : 文字
>类型别名 :=> 文字
>onChange : 任意
>类型别名 :=> 任意
>ctrl.toggleAll.bind(ctrl) : 任意
>类型别名 :=> 任意
>ctrl.toggleAll.bind : 任意
>类型别名 :=> 任意
>ctrl.toggleAll : 任意
>类型别名 :=> 任意
>ctrl : 任意
>类型别名 :=> 任意
>toggleAll : 任意
>类型别名 :=> 任意
>bind : 任意
>类型别名 :=> 任意
>ctrl : 任意
>类型别名 :=> 任意

            <ul class="todo-list">
><ul class="todo-list">                {model.filteredTodos.map((todo) =>                    <li class={{todo: true, completed: todo.completed, editing: todo == model.editedTodo}}>                        <div class="view">                            {(!todo.editable) ?                                <input class="toggle" type="checkbox"></input>                                : null                            }                            <label onDoubleClick={()=>{ctrl.editTodo(todo)}}>{todo.title}</label>                            <button class="destroy" onClick={ctrl.removeTodo.bind(ctrl,todo)}></button>                            <div class="iconBorder">                                <div class="icon"/>                            </div>                        </div>                    </li>                )}            </ul> : 任意
>类型别名 :=> 任意
>ul : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字

                {model.filteredTodos.map((todo) =>
>model.filteredTodos.map((todo) =>                    <li class={{todo: true, completed: todo.completed, editing: todo == model.editedTodo}}>                        <div class="view">                            {(!todo.editable) ?                                <input class="toggle" type="checkbox"></input>                                : null                            }                            <label onDoubleClick={()=>{ctrl.editTodo(todo)}}>{todo.title}</label>                            <button class="destroy" onClick={ctrl.removeTodo.bind(ctrl,todo)}></button>                            <div class="iconBorder">                                <div class="icon"/>                            </div>                        </div>                    </li>                ) : 任意
>类型别名 :=> 任意
>model.filteredTodos.map : 任意
>类型别名 :=> 任意
>model.filteredTodos : 任意
>类型别名 :=> 任意
>model : 任意
>类型别名 :=> 任意
>filteredTodos : 任意
>类型别名 :=> 任意
>map : 任意
>类型别名 :=> 任意
>(todo) =>                    <li class={{todo: true, completed: todo.completed, editing: todo == model.editedTodo}}>                        <div class="view">                            {(!todo.editable) ?                                <input class="toggle" type="checkbox"></input>                                : null                            }                            <label onDoubleClick={()=>{ctrl.editTodo(todo)}}>{todo.title}</label>                            <button class="destroy" onClick={ctrl.removeTodo.bind(ctrl,todo)}></button>                            <div class="iconBorder">                                <div class="icon"/>                            </div>                        </div>                    </li> : (todo: 任意) => 任意
>todo : 任意
>类型别名 :=> 任意

                    <li class={{todo: true, completed: todo.completed, editing: todo == model.editedTodo}}>
><li class={{todo: true, completed: todo.completed, editing: todo == model.editedTodo}}>                        <div class="view">                            {(!todo.editable) ?                                <input class="toggle" type="checkbox"></input>                                : null                            }                            <label onDoubleClick={()=>{ctrl.editTodo(todo)}}>{todo.title}</label>                            <button class="destroy" onClick={ctrl.removeTodo.bind(ctrl,todo)}></button>                            <div class="iconBorder">                                <div class="icon"/>                            </div>                        </div>                    </li> : 任意
>类型别名 :=> 任意
>li : 任意
>类型别名 :=> 任意
>class : { todo: 真假; completed: 任意; editing: 真假; }
>{todo: true, completed: todo.completed, editing: todo == model.editedTodo} : { todo: 真假; completed: 任意; editing: 真假; }
>todo : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>completed : 任意
>类型别名 :=> 任意
>todo.completed : 任意
>类型别名 :=> 任意
>todo : 任意
>类型别名 :=> 任意
>completed : 任意
>类型别名 :=> 任意
>editing : 真假
>类型别名 :=> 真假
>todo == model.editedTodo : 真假
>类型别名 :=> 真假
>todo : 任意
>类型别名 :=> 任意
>model.editedTodo : 任意
>类型别名 :=> 任意
>model : 任意
>类型别名 :=> 任意
>editedTodo : 任意
>类型别名 :=> 任意

                        <div class="view">
><div class="view">                            {(!todo.editable) ?                                <input class="toggle" type="checkbox"></input>                                : null                            }                            <label onDoubleClick={()=>{ctrl.editTodo(todo)}}>{todo.title}</label>                            <button class="destroy" onClick={ctrl.removeTodo.bind(ctrl,todo)}></button>                            <div class="iconBorder">                                <div class="icon"/>                            </div>                        </div> : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字

                            {(!todo.editable) ?
>(!todo.editable) ?                                <input class="toggle" type="checkbox"></input>                                : null : 任意
>类型别名 :=> 任意
>(!todo.editable) : 真假
>类型别名 :=> 真假
>!todo.editable : 真假
>类型别名 :=> 真假
>todo.editable : 任意
>类型别名 :=> 任意
>todo : 任意
>类型别名 :=> 任意
>editable : 任意
>类型别名 :=> 任意

                                <input class="toggle" type="checkbox"></input>
><input class="toggle" type="checkbox"></input> : 任意
>类型别名 :=> 任意
>input : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字
>type : 文字
>类型别名 :=> 文字
>input : 任意
>类型别名 :=> 任意

                                : null
>null : 空值
>类型别名 :=> 空值
                            }
                            <label onDoubleClick={()=>{ctrl.editTodo(todo)}}>{todo.title}</label>
><label onDoubleClick={()=>{ctrl.editTodo(todo)}}>{todo.title}</label> : 任意
>类型别名 :=> 任意
>label : 任意
>类型别名 :=> 任意
>onDoubleClick : () => 无值
>()=>{ctrl.editTodo(todo)} : () => 无值
>ctrl.editTodo(todo) : 任意
>类型别名 :=> 任意
>ctrl.editTodo : 任意
>类型别名 :=> 任意
>ctrl : 任意
>类型别名 :=> 任意
>editTodo : 任意
>类型别名 :=> 任意
>todo : 任意
>类型别名 :=> 任意
>todo.title : 任意
>类型别名 :=> 任意
>todo : 任意
>类型别名 :=> 任意
>title : 任意
>类型别名 :=> 任意
>label : 任意
>类型别名 :=> 任意

                            <button class="destroy" onClick={ctrl.removeTodo.bind(ctrl,todo)}></button>
><button class="destroy" onClick={ctrl.removeTodo.bind(ctrl,todo)}></button> : 任意
>类型别名 :=> 任意
>button : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字
>onClick : 任意
>类型别名 :=> 任意
>ctrl.removeTodo.bind(ctrl,todo) : 任意
>类型别名 :=> 任意
>ctrl.removeTodo.bind : 任意
>类型别名 :=> 任意
>ctrl.removeTodo : 任意
>类型别名 :=> 任意
>ctrl : 任意
>类型别名 :=> 任意
>removeTodo : 任意
>类型别名 :=> 任意
>bind : 任意
>类型别名 :=> 任意
>ctrl : 任意
>类型别名 :=> 任意
>todo : 任意
>类型别名 :=> 任意
>button : 任意
>类型别名 :=> 任意

                            <div class="iconBorder">
><div class="iconBorder">                                <div class="icon"/>                            </div> : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字

                                <div class="icon"/>
><div class="icon"/> : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意
>class : 文字
>类型别名 :=> 文字

                            </div>
>div : 任意
>类型别名 :=> 任意

                        </div>
>div : 任意
>类型别名 :=> 任意

                    </li>
>li : 任意
>类型别名 :=> 任意

                )}
            </ul>
>ul : 任意
>类型别名 :=> 任意

        </section>
>section : 任意
>类型别名 :=> 任意

    </section>
>section : 任意
>类型别名 :=> 任意


