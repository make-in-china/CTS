=== tests/cases/compiler/thisInPropertyBoundDeclarations.ts ===
class Bug {
>Bug : Bug

    private name: string;
>name : 文字
>类型别名 :=> 文字

    private static func: Function[] = [
>func : Function[]
>Function : Function
>[     (that: Bug, name: string) => {         that.foo(name);     }    ] : ((that: Bug, name: 文字) => 无值)[]

     (that: Bug, name: string) => {
>(that: Bug, name: string) => {         that.foo(name);     } : (that: Bug, name: 文字) => 无值
>that : Bug
>Bug : Bug
>name : 文字
>类型别名 :=> 文字

         that.foo(name);
>that.foo(name) : 无值
>类型别名 :=> 无值
>that.foo : (name: 文字) => 无值
>that : Bug
>foo : (name: 文字) => 无值
>name : 文字
>类型别名 :=> 文字
     }
    ];

    private foo(name: string) {
>foo : (name: 文字) => 无值
>name : 文字
>类型别名 :=> 文字

        this.name = name;
>this.name = name : 文字
>类型别名 :=> 文字
>this.name : 文字
>类型别名 :=> 文字
>this : 本体
>name : 文字
>类型别名 :=> 文字
>name : 文字
>类型别名 :=> 文字
    }
}

// Valid use of this in a property bound decl
class A {
>A : A

    prop1 = function() {
>prop1 : () => 无值
>function() {        this;    } : () => 无值

        this;
>this : 任意
>类型别名 :=> 任意

    };

    prop2 = function() {
>prop2 : () => 无值
>function() {        function inner() {            this;        }        () => this;    } : () => 无值

        function inner() {
>inner : () => 无值

            this;
>this : 任意
>类型别名 :=> 任意
        }
        () => this;
>() => this : () => 任意
>this : 任意
>类型别名 :=> 任意

    };

    prop3 = () => {
>prop3 : () => 无值
>() => {        function inner() {            this;        }    } : () => 无值

        function inner() {
>inner : () => 无值

            this;
>this : 任意
>类型别名 :=> 任意
        }
    };

    prop4 = {
>prop4 : { a: () => 任意; }
>{        a: function() { return this; },    } : { a: () => 任意; }

        a: function() { return this; },
>a : () => 任意
>function() { return this; } : () => 任意
>this : 任意
>类型别名 :=> 任意

    };

    prop5 = () => {
>prop5 : () => { a: () => 任意; }
>() => {        return {            a: function() { return this; },        };    } : () => { a: () => 任意; }

        return {
>{            a: function() { return this; },        } : { a: () => 任意; }

            a: function() { return this; },
>a : () => 任意
>function() { return this; } : () => 任意
>this : 任意
>类型别名 :=> 任意

        };
    };
}

class B {
>B : B

    prop1 = this;
>prop1 : 本体
>this : 本体

    prop2 = () => this;
>prop2 : () => 本体
>() => this : () => 本体
>this : 本体

    prop3 = () => () => () => () => this;
>prop3 : () => () => () => () => 本体
>() => () => () => () => this : () => () => () => () => 本体
>() => () => () => this : () => () => () => 本体
>() => () => this : () => () => 本体
>() => this : () => 本体
>this : 本体

    prop4 = '  ' +
>prop4 : 文字
>类型别名 :=> 文字
>'  ' +    function() {    } +    ' ' +    (() => () => () => this) : 文字
>类型别名 :=> 文字
>'  ' +    function() {    } +    ' ' : 文字
>类型别名 :=> 文字
>'  ' +    function() {    } : 文字
>类型别名 :=> 文字
>'  ' : "  "

    function() {
>function() {    } : () => 无值

    } +
    ' ' +
>' ' : " "

    (() => () => () => this);
>(() => () => () => this) : () => () => () => 本体
>() => () => () => this : () => () => () => 本体
>() => () => this : () => () => 本体
>() => this : () => 本体
>this : 本体

    prop5 = {
>prop5 : { a: () => 本体; }
>{        a: () => { return this; }    } : { a: () => 本体; }

        a: () => { return this; }
>a : () => 本体
>() => { return this; } : () => 本体
>this : 本体

    };

    prop6 = () => {
>prop6 : () => { a: () => 本体; }
>() => {        return {            a: () => { return this; }        };    } : () => { a: () => 本体; }

        return {
>{            a: () => { return this; }        } : { a: () => 本体; }

            a: () => { return this; }
>a : () => 本体
>() => { return this; } : () => 本体
>this : 本体

        };
    };
}
