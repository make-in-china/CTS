=== tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandStringType.ts ===
var ANY: any;
>ANY : any
>类型别名 :=> 任意

var BOOLEAN: boolean;
>BOOLEAN : boolean
>类型别名 :=> 真假

var NUMBER: number;
>NUMBER : number
>类型别名 :=> 数字

var STRING: string;
>STRING : string
>类型别名 :=> 文字

var OBJECT: Object;
>OBJECT : Object
>Object : Object

var resultIsString: string;
>resultIsString : string
>类型别名 :=> 文字

//The second operand is string
ANY, STRING;
>ANY, STRING : string
>类型别名 :=> 文字
>ANY : any
>类型别名 :=> 任意
>STRING : string
>类型别名 :=> 文字

BOOLEAN, STRING;
>BOOLEAN, STRING : string
>类型别名 :=> 文字
>BOOLEAN : boolean
>类型别名 :=> 真假
>STRING : string
>类型别名 :=> 文字

NUMBER, STRING;
>NUMBER, STRING : string
>类型别名 :=> 文字
>NUMBER : number
>类型别名 :=> 数字
>STRING : string
>类型别名 :=> 文字

STRING, STRING;
>STRING, STRING : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字

OBJECT, STRING;
>OBJECT, STRING : string
>类型别名 :=> 文字
>OBJECT : Object
>STRING : string
>类型别名 :=> 文字

//Return type is string
var resultIsString1 = (ANY, STRING);
>resultIsString1 : string
>类型别名 :=> 文字
>(ANY, STRING) : string
>类型别名 :=> 文字
>ANY, STRING : string
>类型别名 :=> 文字
>ANY : any
>类型别名 :=> 任意
>STRING : string
>类型别名 :=> 文字

var resultIsString2 = (BOOLEAN, STRING);
>resultIsString2 : string
>类型别名 :=> 文字
>(BOOLEAN, STRING) : string
>类型别名 :=> 文字
>BOOLEAN, STRING : string
>类型别名 :=> 文字
>BOOLEAN : boolean
>类型别名 :=> 真假
>STRING : string
>类型别名 :=> 文字

var resultIsString3 = (NUMBER, STRING);
>resultIsString3 : string
>类型别名 :=> 文字
>(NUMBER, STRING) : string
>类型别名 :=> 文字
>NUMBER, STRING : string
>类型别名 :=> 文字
>NUMBER : number
>类型别名 :=> 数字
>STRING : string
>类型别名 :=> 文字

var resultIsString4 = (STRING, STRING);
>resultIsString4 : string
>类型别名 :=> 文字
>(STRING, STRING) : string
>类型别名 :=> 文字
>STRING, STRING : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字

var resultIsString5 = (OBJECT, STRING);
>resultIsString5 : string
>类型别名 :=> 文字
>(OBJECT, STRING) : string
>类型别名 :=> 文字
>OBJECT, STRING : string
>类型别名 :=> 文字
>OBJECT : Object
>STRING : string
>类型别名 :=> 文字

//Literal and expression
null, STRING;
>null, STRING : string
>类型别名 :=> 文字
>null : null
>类型别名 :=> 空值
>STRING : string
>类型别名 :=> 文字

ANY = new Date(), STRING;
>ANY = new Date(), STRING : string
>类型别名 :=> 文字
>ANY = new Date() : Date
>ANY : any
>类型别名 :=> 任意
>new Date() : Date
>Date : DateConstructor
>STRING : string
>类型别名 :=> 文字

true, "";
>true, "" : ""
>true : true
>类型别名 :=> 为真
>"" : ""

BOOLEAN == undefined, "";
>BOOLEAN == undefined, "" : ""
>BOOLEAN == undefined : boolean
>类型别名 :=> 真假
>BOOLEAN : boolean
>类型别名 :=> 真假
>undefined : undefined
>类型别名 :=> 未定
>"" : ""

["a", "b"], NUMBER.toString();
>["a", "b"], NUMBER.toString() : string
>类型别名 :=> 文字
>["a", "b"] : string[]
>"a" : "a"
>"b" : "b"
>NUMBER.toString() : string
>类型别名 :=> 文字
>NUMBER.toString : (radix?: number) => string
>NUMBER : number
>类型别名 :=> 数字
>toString : (radix?: number) => string

OBJECT = new Object, STRING + "string";
>OBJECT = new Object, STRING + "string" : string
>类型别名 :=> 文字
>OBJECT = new Object : Object
>OBJECT : Object
>new Object : Object
>Object : ObjectConstructor
>STRING + "string" : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字
>"string" : "string"

var resultIsString6 = (null, STRING);
>resultIsString6 : string
>类型别名 :=> 文字
>(null, STRING) : string
>类型别名 :=> 文字
>null, STRING : string
>类型别名 :=> 文字
>null : null
>类型别名 :=> 空值
>STRING : string
>类型别名 :=> 文字

var resultIsString7 = (ANY = new Date(), STRING);
>resultIsString7 : string
>类型别名 :=> 文字
>(ANY = new Date(), STRING) : string
>类型别名 :=> 文字
>ANY = new Date(), STRING : string
>类型别名 :=> 文字
>ANY = new Date() : Date
>ANY : any
>类型别名 :=> 任意
>new Date() : Date
>Date : DateConstructor
>STRING : string
>类型别名 :=> 文字

var resultIsString8 = (true, "");
>resultIsString8 : string
>类型别名 :=> 文字
>(true, "") : ""
>true, "" : ""
>true : true
>类型别名 :=> 为真
>"" : ""

var resultIsString9 = (BOOLEAN == undefined, "");
>resultIsString9 : string
>类型别名 :=> 文字
>(BOOLEAN == undefined, "") : ""
>BOOLEAN == undefined, "" : ""
>BOOLEAN == undefined : boolean
>类型别名 :=> 真假
>BOOLEAN : boolean
>类型别名 :=> 真假
>undefined : undefined
>类型别名 :=> 未定
>"" : ""

var resultIsString10 = (["a", "b"], NUMBER.toString());
>resultIsString10 : string
>类型别名 :=> 文字
>(["a", "b"], NUMBER.toString()) : string
>类型别名 :=> 文字
>["a", "b"], NUMBER.toString() : string
>类型别名 :=> 文字
>["a", "b"] : string[]
>"a" : "a"
>"b" : "b"
>NUMBER.toString() : string
>类型别名 :=> 文字
>NUMBER.toString : (radix?: number) => string
>NUMBER : number
>类型别名 :=> 数字
>toString : (radix?: number) => string

var resultIsString11 = (new Object, STRING + "string");
>resultIsString11 : string
>类型别名 :=> 文字
>(new Object, STRING + "string") : string
>类型别名 :=> 文字
>new Object, STRING + "string" : string
>类型别名 :=> 文字
>new Object : Object
>Object : ObjectConstructor
>STRING + "string" : string
>类型别名 :=> 文字
>STRING : string
>类型别名 :=> 文字
>"string" : "string"

