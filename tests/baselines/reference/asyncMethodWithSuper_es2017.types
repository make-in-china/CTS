=== tests/cases/conformance/async/es2017/asyncMethodWithSuper_es2017.ts ===
class A {
>A : A

    x() {
>x : () => 无值
    }
}

class B extends A {
>B : B
>A : A

    // async method with only call/get on 'super' does not require a binding
    async simple() {
>simple : () => Promise<无值>

        // call with property access
        super.x();
>super.x() : 无值
>类型别名 :=> 无值
>super.x : () => 无值
>super : A
>x : () => 无值

        // call with element access
        super["x"]();
>super["x"]() : 无值
>类型别名 :=> 无值
>super["x"] : () => 无值
>super : A
>"x" : "x"

        // property access (read)
        const a = super.x;
>a : () => 无值
>super.x : () => 无值
>super : A
>x : () => 无值

        // element access (read)
        const b = super["x"];
>b : () => 无值
>super["x"] : () => 无值
>super : A
>"x" : "x"
    }

    // async method with assignment/destructuring on 'super' requires a binding
    async advanced() {
>advanced : () => Promise<无值>

        const f = () => {};
>f : () => 无值
>() => {} : () => 无值

        // call with property access
        super.x();
>super.x() : 无值
>类型别名 :=> 无值
>super.x : () => 无值
>super : A
>x : () => 无值

        // call with element access
        super["x"]();
>super["x"]() : 无值
>类型别名 :=> 无值
>super["x"] : () => 无值
>super : A
>"x" : "x"

        // property access (read)
        const a = super.x;
>a : () => 无值
>super.x : () => 无值
>super : A
>x : () => 无值

        // element access (read)
        const b = super["x"];
>b : () => 无值
>super["x"] : () => 无值
>super : A
>"x" : "x"

        // property access (assign)
        super.x = f;
>super.x = f : () => 无值
>super.x : () => 无值
>super : A
>x : () => 无值
>f : () => 无值

        // element access (assign)
        super["x"] = f;
>super["x"] = f : () => 无值
>super["x"] : () => 无值
>super : A
>"x" : "x"
>f : () => 无值

        // destructuring assign with property access
        ({ f: super.x } = { f });
>({ f: super.x } = { f }) : { f: () => 无值; }
>{ f: super.x } = { f } : { f: () => 无值; }
>{ f: super.x } : { f: () => 无值; }
>f : () => 无值
>super.x : () => 无值
>super : A
>x : () => 无值
>{ f } : { f: () => 无值; }
>f : () => 无值

        // destructuring assign with element access
        ({ f: super["x"] } = { f });
>({ f: super["x"] } = { f }) : { f: () => 无值; }
>{ f: super["x"] } = { f } : { f: () => 无值; }
>{ f: super["x"] } : { f: () => 无值; }
>f : () => 无值
>super["x"] : () => 无值
>super : A
>"x" : "x"
>{ f } : { f: () => 无值; }
>f : () => 无值
    }
}
