=== tests/cases/conformance/es7/trailingCommasInFunctionParametersAndArguments.ts ===
function f1(x,) {}
>f1 : (x: any) => void
>x : any
>类型别名 :=> 任意

f1(1,);
>f1(1,) : void
>类型别名 :=> 无值
>f1 : (x: any) => void
>1 : 1

function f2(...args,) {}
>f2 : (...args: any[]) => void
>args : any[]

f2(...[],);
>f2(...[],) : void
>类型别名 :=> 无值
>f2 : (...args: any[]) => void
>...[] : undefined
>类型别名 :=> 未定
>[] : undefined[]

// Not confused by overloads
declare function f3(x, ): number;
>f3 : { (x: any): number; (x: any, y: any): string; }
>x : any
>类型别名 :=> 任意

declare function f3(x, y,): string;
>f3 : { (x: any): number; (x: any, y: any): string; }
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

<number>f3(1,);
><number>f3(1,) : number
>类型别名 :=> 数字
>f3(1,) : number
>类型别名 :=> 数字
>f3 : { (x: any): number; (x: any, y: any): string; }
>1 : 1

<string>f3(1, 2,);
><string>f3(1, 2,) : string
>类型别名 :=> 文字
>f3(1, 2,) : string
>类型别名 :=> 文字
>f3 : { (x: any): number; (x: any, y: any): string; }
>1 : 1
>2 : 2

// Works for constructors too
class X {
>X : X

    constructor(a,) { }
>a : any
>类型别名 :=> 任意

    // See trailingCommasInGetter.ts
    set x(value,) { }
>x : any
>类型别名 :=> 任意
>value : any
>类型别名 :=> 任意
}
interface Y {
>Y : Y

    new(x,);
>x : any
>类型别名 :=> 任意

    (x,);
>x : any
>类型别名 :=> 任意
}

new X(1,);
>new X(1,) : X
>X : typeof X
>1 : 1

