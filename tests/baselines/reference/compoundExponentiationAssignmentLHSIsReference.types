=== tests/cases/conformance/es7/exponentiationOperator/compoundExponentiationAssignmentLHSIsReference.ts ===
var value: any;
>value : any
>类型别名 :=> 任意

// identifiers: variable and parameter
var x1: number;
>x1 : number
>类型别名 :=> 数字

x1 **= value;
>x1 **= value : number
>类型别名 :=> 数字
>x1 : number
>类型别名 :=> 数字
>value : any
>类型别名 :=> 任意

function fn1(x2: number) {
>fn1 : (x2: number) => void
>x2 : number
>类型别名 :=> 数字

    x2 **= value;
>x2 **= value : number
>类型别名 :=> 数字
>x2 : number
>类型别名 :=> 数字
>value : any
>类型别名 :=> 任意
}

// property accesses
var x3: { a: number };
>x3 : { a: number; }
>a : number
>类型别名 :=> 数字

x3.a **= value;
>x3.a **= value : number
>类型别名 :=> 数字
>x3.a : number
>类型别名 :=> 数字
>x3 : { a: number; }
>a : number
>类型别名 :=> 数字
>value : any
>类型别名 :=> 任意

x3['a'] **= value;
>x3['a'] **= value : number
>类型别名 :=> 数字
>x3['a'] : number
>类型别名 :=> 数字
>x3 : { a: number; }
>'a' : "a"
>value : any
>类型别名 :=> 任意

// parentheses, the contained expression is reference
(x1) **= value;
>(x1) **= value : number
>类型别名 :=> 数字
>(x1) : number
>类型别名 :=> 数字
>x1 : number
>类型别名 :=> 数字
>value : any
>类型别名 :=> 任意

function fn2(x4: number) {
>fn2 : (x4: number) => void
>x4 : number
>类型别名 :=> 数字

    (x4) **= value;
>(x4) **= value : number
>类型别名 :=> 数字
>(x4) : number
>类型别名 :=> 数字
>x4 : number
>类型别名 :=> 数字
>value : any
>类型别名 :=> 任意
}

(x3.a) **= value;
>(x3.a) **= value : number
>类型别名 :=> 数字
>(x3.a) : number
>类型别名 :=> 数字
>x3.a : number
>类型别名 :=> 数字
>x3 : { a: number; }
>a : number
>类型别名 :=> 数字
>value : any
>类型别名 :=> 任意

(x3['a']) **= value;
>(x3['a']) **= value : number
>类型别名 :=> 数字
>(x3['a']) : number
>类型别名 :=> 数字
>x3['a'] : number
>类型别名 :=> 数字
>x3 : { a: number; }
>'a' : "a"
>value : any
>类型别名 :=> 任意

