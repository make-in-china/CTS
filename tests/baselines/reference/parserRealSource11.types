=== tests/cases/conformance/parser/ecmascript5/parserRealSource11.ts ===
// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
// See LICENSE.txt in the project root for complete license information.

///<reference path='typescript.ts' />

module TypeScript {
>TypeScript : 类为 TypeScript

    export class ASTSpan {
>ASTSpan : ASTSpan

        public minChar: number = -1;  // -1 = "undefined" or "compiler generated"
>minChar : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1

        public limChar: number = -1;  // -1 = "undefined" or "compiler generated"   
>limChar : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1
    }

    export class AST extends ASTSpan {
>AST : AST
>ASTSpan : ASTSpan

        public type: Type = null;
>type : 任意
>类型别名 :=> 任意
>Type : No type information available!
>null : 空值
>类型别名 :=> 空值

        public flags = ASTFlags.Writeable;
>flags : 任意
>类型别名 :=> 任意
>ASTFlags.Writeable : 任意
>类型别名 :=> 任意
>ASTFlags : 任意
>类型别名 :=> 任意
>Writeable : 任意
>类型别名 :=> 任意

        // REVIEW: for diagnostic purposes
        public passCreated: number = CompilerDiagnostics.analysisPass;
>passCreated : 数字
>类型别名 :=> 数字
>CompilerDiagnostics.analysisPass : 任意
>类型别名 :=> 任意
>CompilerDiagnostics : 任意
>类型别名 :=> 任意
>analysisPass : 任意
>类型别名 :=> 任意

        public preComments: Comment[] = null;
>preComments : Comment[]
>Comment : Comment
>null : 空值
>类型别名 :=> 空值

        public postComments: Comment[] = null;
>postComments : Comment[]
>Comment : Comment
>null : 空值
>类型别名 :=> 空值

        public isParenthesized = false;
>isParenthesized : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        constructor (public nodeType: NodeType) {
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!

            super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 ASTSpan
        }

        public isExpression() { return false; }
>isExpression : () => 真假
>false : 为假
>类型别名 :=> 为假

        public isStatementOrExpression() { return false; }
>isStatementOrExpression : () => 真假
>false : 为假
>类型别名 :=> 为假

        public isCompoundStatement() { return false; }
>isCompoundStatement : () => 真假
>false : 为假
>类型别名 :=> 为假

        public isLeaf() { return this.isStatementOrExpression() && (!this.isCompoundStatement()); }
>isLeaf : () => 真假
>this.isStatementOrExpression() && (!this.isCompoundStatement()) : 真假
>类型别名 :=> 真假
>this.isStatementOrExpression() : 真假
>类型别名 :=> 真假
>this.isStatementOrExpression : () => 真假
>this : 本体
>isStatementOrExpression : () => 真假
>(!this.isCompoundStatement()) : 真假
>类型别名 :=> 真假
>!this.isCompoundStatement() : 真假
>类型别名 :=> 真假
>this.isCompoundStatement() : 真假
>类型别名 :=> 真假
>this.isCompoundStatement : () => 真假
>this : 本体
>isCompoundStatement : () => 真假

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            switch (this.nodeType) {
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意

                case NodeType.Error:
>NodeType.Error : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Error : 任意
>类型别名 :=> 任意

                case NodeType.EmptyExpr:
>NodeType.EmptyExpr : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>EmptyExpr : 任意
>类型别名 :=> 任意

                    this.type = typeFlow.anyType;
>this.type = typeFlow.anyType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.anyType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>anyType : 任意
>类型别名 :=> 任意

                    break;
                case NodeType.This:
>NodeType.This : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>This : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckThis(this);
>typeFlow.typeCheckThis(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckThis : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckThis : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.Null:
>NodeType.Null : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Null : 任意
>类型别名 :=> 任意

                    this.type = typeFlow.nullType;
>this.type = typeFlow.nullType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.nullType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>nullType : 任意
>类型别名 :=> 任意

                    break;
                case NodeType.False:
>NodeType.False : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>False : 任意
>类型别名 :=> 任意

                case NodeType.True:
>NodeType.True : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>True : 任意
>类型别名 :=> 任意

                    this.type = typeFlow.booleanType;
>this.type = typeFlow.booleanType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.booleanType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>booleanType : 任意
>类型别名 :=> 任意

                    break;
                case NodeType.Super:
>NodeType.Super : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Super : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckSuper(this);
>typeFlow.typeCheckSuper(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckSuper : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckSuper : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.EndCode:
>NodeType.EndCode : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>EndCode : 任意
>类型别名 :=> 任意

                case NodeType.Empty:
>NodeType.Empty : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Empty : 任意
>类型别名 :=> 任意

                case NodeType.Void:
>NodeType.Void : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Void : 任意
>类型别名 :=> 任意

                    this.type = typeFlow.voidType;
>this.type = typeFlow.voidType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.voidType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>voidType : 任意
>类型别名 :=> 任意

                    break;
                default:
                    throw new Error("please implement in derived class");
>new Error("please implement in derived class") : Error
>Error : ErrorConstructor
>"please implement in derived class" : "please implement in derived class"
            }
            return this;
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            switch (this.nodeType) {
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意

                case NodeType.This:
>NodeType.This : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>This : 任意
>类型别名 :=> 任意

                    emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

                    if (emitter.thisFnc && (hasFlag(emitter.thisFnc.fncFlags, FncFlags.IsFatArrowFunction))) {
>emitter.thisFnc && (hasFlag(emitter.thisFnc.fncFlags, FncFlags.IsFatArrowFunction)) : 任意
>类型别名 :=> 任意
>emitter.thisFnc : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>thisFnc : 任意
>类型别名 :=> 任意
>(hasFlag(emitter.thisFnc.fncFlags, FncFlags.IsFatArrowFunction)) : 任意
>类型别名 :=> 任意
>hasFlag(emitter.thisFnc.fncFlags, FncFlags.IsFatArrowFunction) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>emitter.thisFnc.fncFlags : 任意
>类型别名 :=> 任意
>emitter.thisFnc : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>thisFnc : 任意
>类型别名 :=> 任意
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.IsFatArrowFunction : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>IsFatArrowFunction : 任意
>类型别名 :=> 任意

                        emitter.writeToOutput("_this");
>emitter.writeToOutput("_this") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"_this" : "_this"
                    }
                    else {
                        emitter.writeToOutput("this");
>emitter.writeToOutput("this") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"this" : "this"
                    }
                    emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

                    break;
                case NodeType.Null:
>NodeType.Null : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Null : 任意
>类型别名 :=> 任意

                    emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

                    emitter.writeToOutput("null");
>emitter.writeToOutput("null") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"null" : "null"

                    emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

                    break;
                case NodeType.False:
>NodeType.False : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>False : 任意
>类型别名 :=> 任意

                    emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

                    emitter.writeToOutput("false");
>emitter.writeToOutput("false") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"false" : "false"

                    emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

                    break;
                case NodeType.True:
>NodeType.True : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>True : 任意
>类型别名 :=> 任意

                    emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

                    emitter.writeToOutput("true");
>emitter.writeToOutput("true") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"true" : "true"

                    emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

                    break;
                case NodeType.Super:
>NodeType.Super : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Super : 任意
>类型别名 :=> 任意

                    emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

                    emitter.emitSuperReference();
>emitter.emitSuperReference() : 任意
>类型别名 :=> 任意
>emitter.emitSuperReference : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitSuperReference : 任意
>类型别名 :=> 任意

                    emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

                    break;
                case NodeType.EndCode:
>NodeType.EndCode : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>EndCode : 任意
>类型别名 :=> 任意

                    break;
                case NodeType.Error:
>NodeType.Error : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Error : 任意
>类型别名 :=> 任意

                case NodeType.EmptyExpr:
>NodeType.EmptyExpr : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>EmptyExpr : 任意
>类型别名 :=> 任意

                    break;

                case NodeType.Empty:
>NodeType.Empty : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Empty : 任意
>类型别名 :=> 任意

                    emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

                    emitter.writeToOutput("; ");
>emitter.writeToOutput("; ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"; " : "; "

                    emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

                    break;
                case NodeType.Void:
>NodeType.Void : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Void : 任意
>类型别名 :=> 任意

                    emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

                    emitter.writeToOutput("void ");
>emitter.writeToOutput("void ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"void " : "void "

                    emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

                    break;
                default:
                    throw new Error("please implement in derived class");
>new Error("please implement in derived class") : Error
>Error : ErrorConstructor
>"please implement in derived class" : "please implement in derived class"
            }
            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public print(context: PrintContext) {
>print : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>PrintContext : No type information available!

            context.startLine();
>context.startLine() : 任意
>类型别名 :=> 任意
>context.startLine : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>startLine : 任意
>类型别名 :=> 任意

            var lineCol = { line: -1, col: -1 };
>lineCol : { line: 数字; col: 数字; }
>{ line: -1, col: -1 } : { line: 数字; col: 数字; }
>line : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1
>col : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1

            var limLineCol = { line: -1, col: -1 };
>limLineCol : { line: 数字; col: 数字; }
>{ line: -1, col: -1 } : { line: 数字; col: 数字; }
>line : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1
>col : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1

            if (context.parser !== null) {
>context.parser !== null : 真假
>类型别名 :=> 真假
>context.parser : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>parser : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

                context.parser.getSourceLineCol(lineCol, this.minChar);
>context.parser.getSourceLineCol(lineCol, this.minChar) : 任意
>类型别名 :=> 任意
>context.parser.getSourceLineCol : 任意
>类型别名 :=> 任意
>context.parser : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>parser : 任意
>类型别名 :=> 任意
>getSourceLineCol : 任意
>类型别名 :=> 任意
>lineCol : { line: 数字; col: 数字; }
>this.minChar : 数字
>类型别名 :=> 数字
>this : 本体
>minChar : 数字
>类型别名 :=> 数字

                context.parser.getSourceLineCol(limLineCol, this.limChar);
>context.parser.getSourceLineCol(limLineCol, this.limChar) : 任意
>类型别名 :=> 任意
>context.parser.getSourceLineCol : 任意
>类型别名 :=> 任意
>context.parser : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>parser : 任意
>类型别名 :=> 任意
>getSourceLineCol : 任意
>类型别名 :=> 任意
>limLineCol : { line: 数字; col: 数字; }
>this.limChar : 数字
>类型别名 :=> 数字
>this : 本体
>limChar : 数字
>类型别名 :=> 数字

                context.write("(" + lineCol.line + "," + lineCol.col + ")--" +
>context.write("(" + lineCol.line + "," + lineCol.col + ")--" +                              "(" + limLineCol.line + "," + limLineCol.col + "): ") : 任意
>类型别名 :=> 任意
>context.write : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>write : 任意
>类型别名 :=> 任意
>"(" + lineCol.line + "," + lineCol.col + ")--" +                              "(" + limLineCol.line + "," + limLineCol.col + "): " : 文字
>类型别名 :=> 文字
>"(" + lineCol.line + "," + lineCol.col + ")--" +                              "(" + limLineCol.line + "," + limLineCol.col : 文字
>类型别名 :=> 文字
>"(" + lineCol.line + "," + lineCol.col + ")--" +                              "(" + limLineCol.line + "," : 文字
>类型别名 :=> 文字
>"(" + lineCol.line + "," + lineCol.col + ")--" +                              "(" + limLineCol.line : 文字
>类型别名 :=> 文字
>"(" + lineCol.line + "," + lineCol.col + ")--" +                              "(" : 文字
>类型别名 :=> 文字
>"(" + lineCol.line + "," + lineCol.col + ")--" : 文字
>类型别名 :=> 文字
>"(" + lineCol.line + "," + lineCol.col : 文字
>类型别名 :=> 文字
>"(" + lineCol.line + "," : 文字
>类型别名 :=> 文字
>"(" + lineCol.line : 文字
>类型别名 :=> 文字
>"(" : "("
>lineCol.line : 数字
>类型别名 :=> 数字
>lineCol : { line: 数字; col: 数字; }
>line : 数字
>类型别名 :=> 数字
>"," : ","
>lineCol.col : 数字
>类型别名 :=> 数字
>lineCol : { line: 数字; col: 数字; }
>col : 数字
>类型别名 :=> 数字
>")--" : ")--"

                              "(" + limLineCol.line + "," + limLineCol.col + "): ");
>"(" : "("
>limLineCol.line : 数字
>类型别名 :=> 数字
>limLineCol : { line: 数字; col: 数字; }
>line : 数字
>类型别名 :=> 数字
>"," : ","
>limLineCol.col : 数字
>类型别名 :=> 数字
>limLineCol : { line: 数字; col: 数字; }
>col : 数字
>类型别名 :=> 数字
>"): " : "): "
            }
            var lab = this.printLabel();
>lab : 任意
>类型别名 :=> 任意
>this.printLabel() : 任意
>类型别名 :=> 任意
>this.printLabel : () => 任意
>this : 本体
>printLabel : () => 任意

            if (hasFlag(this.flags, ASTFlags.Error)) {
>hasFlag(this.flags, ASTFlags.Error) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.flags : 任意
>类型别名 :=> 任意
>this : 本体
>flags : 任意
>类型别名 :=> 任意
>ASTFlags.Error : 任意
>类型别名 :=> 任意
>ASTFlags : 任意
>类型别名 :=> 任意
>Error : 任意
>类型别名 :=> 任意

                lab += " (Error)";
>lab += " (Error)" : 文字
>类型别名 :=> 文字
>lab : 任意
>类型别名 :=> 任意
>" (Error)" : " (Error)"
            }
            context.writeLine(lab);
>context.writeLine(lab) : 任意
>类型别名 :=> 任意
>context.writeLine : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>writeLine : 任意
>类型别名 :=> 任意
>lab : 任意
>类型别名 :=> 任意
        }

        public printLabel() {
>printLabel : () => 任意

            if (nodeTypeTable[this.nodeType] !== undefined) {
>nodeTypeTable[this.nodeType] !== undefined : 真假
>类型别名 :=> 真假
>nodeTypeTable[this.nodeType] : 任意
>类型别名 :=> 任意
>nodeTypeTable : 任意
>类型别名 :=> 任意
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

                return nodeTypeTable[this.nodeType];
>nodeTypeTable[this.nodeType] : 任意
>类型别名 :=> 任意
>nodeTypeTable : 任意
>类型别名 :=> 任意
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意
            }
            else {
                return (<any>NodeType)._map[this.nodeType];
>(<any>NodeType)._map[this.nodeType] : 任意
>类型别名 :=> 任意
>(<any>NodeType)._map : 任意
>类型别名 :=> 任意
>(<any>NodeType) : 任意
>类型别名 :=> 任意
><any>NodeType : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>_map : 任意
>类型别名 :=> 任意
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意
            }
        }

        public addToControlFlow(context: ControlFlowContext): void {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            // by default, AST adds itself to current basic block and does not check its children
            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            context.addContent(this);
>context.addContent(this) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public netFreeUses(container: Symbol, freeUses: StringHashTable) {
>netFreeUses : (container: 任意, freeUses: 任意) => 无值
>container : 任意
>类型别名 :=> 任意
>Symbol : No type information available!
>freeUses : 任意
>类型别名 :=> 任意
>StringHashTable : No type information available!
        }

        public treeViewLabel() {
>treeViewLabel : () => 任意

            return (<any>NodeType)._map[this.nodeType];
>(<any>NodeType)._map[this.nodeType] : 任意
>类型别名 :=> 任意
>(<any>NodeType)._map : 任意
>类型别名 :=> 任意
>(<any>NodeType) : 任意
>类型别名 :=> 任意
><any>NodeType : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>_map : 任意
>类型别名 :=> 任意
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意
        }

        public static getResolvedIdentifierName(name: string): string {
>getResolvedIdentifierName : (name: 文字) => 文字
>name : 文字
>类型别名 :=> 文字

            if (!name) return "";
>!name : 真假
>类型别名 :=> 真假
>name : 文字
>类型别名 :=> 文字
>"" : ""

            var resolved = "";
>resolved : 文字
>类型别名 :=> 文字
>"" : ""

            var start = 0;
>start : 数字
>类型别名 :=> 数字
>0 : 0

            var i = 0;
>i : 数字
>类型别名 :=> 数字
>0 : 0

            while(i <= name.length - 6) {
>i <= name.length - 6 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>name.length - 6 : 数字
>类型别名 :=> 数字
>name.length : 数字
>类型别名 :=> 数字
>name : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>6 : 6

                // Look for escape sequence \uxxxx
                if (name.charAt(i) == '\\' && name.charAt(i+1) == 'u') {
>name.charAt(i) == '\\' && name.charAt(i+1) == 'u' : 真假
>类型别名 :=> 真假
>name.charAt(i) == '\\' : 真假
>类型别名 :=> 真假
>name.charAt(i) : 文字
>类型别名 :=> 文字
>name.charAt : (pos: 数字) => 文字
>name : 文字
>类型别名 :=> 文字
>charAt : (pos: 数字) => 文字
>i : 数字
>类型别名 :=> 数字
>'\\' : "\\"
>name.charAt(i+1) == 'u' : 真假
>类型别名 :=> 真假
>name.charAt(i+1) : 文字
>类型别名 :=> 文字
>name.charAt : (pos: 数字) => 文字
>name : 文字
>类型别名 :=> 文字
>charAt : (pos: 数字) => 文字
>i+1 : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
>1 : 1
>'u' : "u"

                    var charCode = parseInt(name.substr(i + 2, 4), 16);
>charCode : 数字
>类型别名 :=> 数字
>parseInt(name.substr(i + 2, 4), 16) : 数字
>类型别名 :=> 数字
>parseInt : (s: 文字, radix?: 数字) => 数字
>name.substr(i + 2, 4) : 文字
>类型别名 :=> 文字
>name.substr : (from: 数字, length?: 数字) => 文字
>name : 文字
>类型别名 :=> 文字
>substr : (from: 数字, length?: 数字) => 文字
>i + 2 : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
>2 : 2
>4 : 4
>16 : 16

                    resolved += name.substr(start, i - start);
>resolved += name.substr(start, i - start) : 文字
>类型别名 :=> 文字
>resolved : 文字
>类型别名 :=> 文字
>name.substr(start, i - start) : 文字
>类型别名 :=> 文字
>name.substr : (from: 数字, length?: 数字) => 文字
>name : 文字
>类型别名 :=> 文字
>substr : (from: 数字, length?: 数字) => 文字
>start : 数字
>类型别名 :=> 数字
>i - start : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
>start : 数字
>类型别名 :=> 数字

                    resolved += String.fromCharCode(charCode);
>resolved += String.fromCharCode(charCode) : 文字
>类型别名 :=> 文字
>resolved : 文字
>类型别名 :=> 文字
>String.fromCharCode(charCode) : 文字
>类型别名 :=> 文字
>String.fromCharCode : (...codes: 数字[]) => 文字
>String : StringConstructor
>fromCharCode : (...codes: 数字[]) => 文字
>charCode : 数字
>类型别名 :=> 数字

                    i += 6;
>i += 6 : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
>6 : 6

                    start = i;
>start = i : 数字
>类型别名 :=> 数字
>start : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                    continue;
                } 
                i++;
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
            }
            // Append remaining string
            resolved += name.substring(start);
>resolved += name.substring(start) : 文字
>类型别名 :=> 文字
>resolved : 文字
>类型别名 :=> 文字
>name.substring(start) : 文字
>类型别名 :=> 文字
>name.substring : (start: 数字, end?: 数字) => 文字
>name : 文字
>类型别名 :=> 文字
>substring : (start: 数字, end?: 数字) => 文字
>start : 数字
>类型别名 :=> 数字

            return resolved;
>resolved : 文字
>类型别名 :=> 文字
        }
    }

    export class IncompleteAST extends AST {
>IncompleteAST : IncompleteAST
>AST : AST

        constructor (min: number, lim: number) {
>min : 数字
>类型别名 :=> 数字
>lim : 数字
>类型别名 :=> 数字

            super(NodeType.Error);
>super(NodeType.Error) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>NodeType.Error : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Error : 任意
>类型别名 :=> 任意

            this.minChar = min;
>this.minChar = min : 数字
>类型别名 :=> 数字
>this.minChar : 数字
>类型别名 :=> 数字
>this : 本体
>minChar : 数字
>类型别名 :=> 数字
>min : 数字
>类型别名 :=> 数字

            this.limChar = lim;
>this.limChar = lim : 数字
>类型别名 :=> 数字
>this.limChar : 数字
>类型别名 :=> 数字
>this : 本体
>limChar : 数字
>类型别名 :=> 数字
>lim : 数字
>类型别名 :=> 数字
        }
    }

    export class ASTList extends AST {
>ASTList : ASTList
>AST : AST

        public enclosingScope: SymbolScope = null;
>enclosingScope : 任意
>类型别名 :=> 任意
>SymbolScope : No type information available!
>null : 空值
>类型别名 :=> 空值

        public members: AST[] = new AST[];
>members : AST[]
>AST : AST
>new AST[] : 任意
>类型别名 :=> 任意
>AST[] : 任意
>类型别名 :=> 任意
>AST : 类为 AST

        constructor () {
            super(NodeType.List);
>super(NodeType.List) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>NodeType.List : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>List : 任意
>类型别名 :=> 任意
        }

        public addToControlFlow(context: ControlFlowContext) {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            var len = this.members.length;
>len : 数字
>类型别名 :=> 数字
>this.members.length : 数字
>类型别名 :=> 数字
>this.members : AST[]
>this : 本体
>members : AST[]
>length : 数字
>类型别名 :=> 数字

            for (var i = 0; i < len; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                if (context.noContinuation) {
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意

                    context.addUnreachable(this.members[i]);
>context.addUnreachable(this.members[i]) : 任意
>类型别名 :=> 任意
>context.addUnreachable : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addUnreachable : 任意
>类型别名 :=> 任意
>this.members[i] : AST
>this.members : AST[]
>this : 本体
>members : AST[]
>i : 数字
>类型别名 :=> 数字

                    break;
                }
                else {
                    this.members[i] = context.walk(this.members[i], this);
>this.members[i] = context.walk(this.members[i], this) : 任意
>类型别名 :=> 任意
>this.members[i] : AST
>this.members : AST[]
>this : 本体
>members : AST[]
>i : 数字
>类型别名 :=> 数字
>context.walk(this.members[i], this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.members[i] : AST
>this.members : AST[]
>this : 本体
>members : AST[]
>i : 数字
>类型别名 :=> 数字
>this : 本体
                }
            }
            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }

        public append(ast: AST) {
>append : (ast: AST) => 本体
>ast : AST
>AST : AST

            this.members[this.members.length] = ast;
>this.members[this.members.length] = ast : AST
>this.members[this.members.length] : AST
>this.members : AST[]
>this : 本体
>members : AST[]
>this.members.length : 数字
>类型别名 :=> 数字
>this.members : AST[]
>this : 本体
>members : AST[]
>length : 数字
>类型别名 :=> 数字
>ast : AST

            return this;
>this : 本体
        }

        public appendAll(ast: AST) {
>appendAll : (ast: AST) => 本体
>ast : AST
>AST : AST

            if (ast.nodeType == NodeType.List) {
>ast.nodeType == NodeType.List : 真假
>类型别名 :=> 真假
>ast.nodeType : 任意
>类型别名 :=> 任意
>ast : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.List : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>List : 任意
>类型别名 :=> 任意

                var list = <ASTList>ast;
>list : ASTList
><ASTList>ast : ASTList
>ASTList : ASTList
>ast : AST

                for (var i = 0, len = list.members.length; i < len; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>len : 数字
>类型别名 :=> 数字
>list.members.length : 数字
>类型别名 :=> 数字
>list.members : AST[]
>list : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字
>i < len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                    this.append(list.members[i]);
>this.append(list.members[i]) : 本体
>this.append : (ast: AST) => 本体
>this : 本体
>append : (ast: AST) => 本体
>list.members[i] : AST
>list.members : AST[]
>list : ASTList
>members : AST[]
>i : 数字
>类型别名 :=> 数字
                }
            }
            else {
                this.append(ast);
>this.append(ast) : 本体
>this.append : (ast: AST) => 本体
>this : 本体
>append : (ast: AST) => 本体
>ast : AST
            }
            return this;
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitJavascriptList(this, null, TokenID.Semicolon, startLine, false, false);
>emitter.emitJavascriptList(this, null, TokenID.Semicolon, startLine, false, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptList : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptList : 任意
>类型别名 :=> 任意
>this : 本体
>null : 空值
>类型别名 :=> 空值
>TokenID.Semicolon : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Semicolon : 任意
>类型别名 :=> 任意
>startLine : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            var len = this.members.length;
>len : 数字
>类型别名 :=> 数字
>this.members.length : 数字
>类型别名 :=> 数字
>this.members : AST[]
>this : 本体
>members : AST[]
>length : 数字
>类型别名 :=> 数字

            typeFlow.nestingLevel++;
>typeFlow.nestingLevel++ : 数字
>类型别名 :=> 数字
>typeFlow.nestingLevel : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>nestingLevel : 任意
>类型别名 :=> 任意

            for (var i = 0; i < len; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                if (this.members[i]) {
>this.members[i] : AST
>this.members : AST[]
>this : 本体
>members : AST[]
>i : 数字
>类型别名 :=> 数字

                    this.members[i] = this.members[i].typeCheck(typeFlow);
>this.members[i] = this.members[i].typeCheck(typeFlow) : 任意
>类型别名 :=> 任意
>this.members[i] : AST
>this.members : AST[]
>this : 本体
>members : AST[]
>i : 数字
>类型别名 :=> 数字
>this.members[i].typeCheck(typeFlow) : 任意
>类型别名 :=> 任意
>this.members[i].typeCheck : (typeFlow: 任意) => 任意
>this.members[i] : AST
>this.members : AST[]
>this : 本体
>members : AST[]
>i : 数字
>类型别名 :=> 数字
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
                }
            }
            typeFlow.nestingLevel--;
>typeFlow.nestingLevel-- : 数字
>类型别名 :=> 数字
>typeFlow.nestingLevel : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>nestingLevel : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }
    }

    export class Identifier extends AST {
>Identifier : Identifier
>AST : AST

        public sym: Symbol = null;
>sym : 任意
>类型别名 :=> 任意
>Symbol : No type information available!
>null : 空值
>类型别名 :=> 空值

        public cloId = -1;
>cloId : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1

        public text: string;
>text : 文字
>类型别名 :=> 文字

        // 'actualText' is the text that the user has entered for the identifier. the text might 
        // include any Unicode escape sequences (e.g.: \u0041 for 'A'). 'text', however, contains 
        // the resolved value of any escape sequences in the actual text; so in the previous 
        // example, actualText = '\u0041', text = 'A'.
        //
        // For purposes of finding a symbol, use text, as this will allow you to match all 
        // variations of the variable text. For full-fidelity translation of the user input, such
        // as emitting, use the actualText field.
        // 
        // Note: 
        //    To change text, and to avoid running into a situation where 'actualText' does not 
        //    match 'text', always use setText.
        constructor (public actualText: string, public hasEscapeSequence?: boolean) {
>actualText : 文字
>类型别名 :=> 文字
>hasEscapeSequence : 真假
>类型别名 :=> 真假

            super(NodeType.Name);
>super(NodeType.Name) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>NodeType.Name : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Name : 任意
>类型别名 :=> 任意

            this.setText(actualText, hasEscapeSequence);
>this.setText(actualText, hasEscapeSequence) : 无值
>类型别名 :=> 无值
>this.setText : (actualText: 文字, hasEscapeSequence?: 真假) => 无值
>this : 本体
>setText : (actualText: 文字, hasEscapeSequence?: 真假) => 无值
>actualText : 文字
>类型别名 :=> 文字
>hasEscapeSequence : 真假
>类型别名 :=> 真假
        }

        public setText(actualText: string, hasEscapeSequence?: boolean) {
>setText : (actualText: 文字, hasEscapeSequence?: 真假) => 无值
>actualText : 文字
>类型别名 :=> 文字
>hasEscapeSequence : 真假
>类型别名 :=> 真假

            this.actualText = actualText;
>this.actualText = actualText : 文字
>类型别名 :=> 文字
>this.actualText : 文字
>类型别名 :=> 文字
>this : 本体
>actualText : 文字
>类型别名 :=> 文字
>actualText : 文字
>类型别名 :=> 文字

            if (hasEscapeSequence) {
>hasEscapeSequence : 真假
>类型别名 :=> 真假

                this.text = AST.getResolvedIdentifierName(actualText);
>this.text = AST.getResolvedIdentifierName(actualText) : 文字
>类型别名 :=> 文字
>this.text : 文字
>类型别名 :=> 文字
>this : 本体
>text : 文字
>类型别名 :=> 文字
>AST.getResolvedIdentifierName(actualText) : 文字
>类型别名 :=> 文字
>AST.getResolvedIdentifierName : (name: 文字) => 文字
>AST : 类为 AST
>getResolvedIdentifierName : (name: 文字) => 文字
>actualText : 文字
>类型别名 :=> 文字
            }
            else {
                this.text = actualText;
>this.text = actualText : 文字
>类型别名 :=> 文字
>this.text : 文字
>类型别名 :=> 文字
>this : 本体
>text : 文字
>类型别名 :=> 文字
>actualText : 文字
>类型别名 :=> 文字
            }
        }

        public isMissing() { return false; }
>isMissing : () => 真假
>false : 为假
>类型别名 :=> 为假

        public isLeaf() { return true; }
>isLeaf : () => 真假
>true : 为真
>类型别名 :=> 为真

        public treeViewLabel() {
>treeViewLabel : () => 文字

            return "id: " + this.actualText;
>"id: " + this.actualText : 文字
>类型别名 :=> 文字
>"id: " : "id: "
>this.actualText : 文字
>类型别名 :=> 文字
>this : 本体
>actualText : 文字
>类型别名 :=> 文字
        }

        public printLabel() {
>printLabel : () => 文字

            if (this.actualText) {
>this.actualText : 文字
>类型别名 :=> 文字
>this : 本体
>actualText : 文字
>类型别名 :=> 文字

                return "id: " + this.actualText;
>"id: " + this.actualText : 文字
>类型别名 :=> 文字
>"id: " : "id: "
>this.actualText : 文字
>类型别名 :=> 文字
>this : 本体
>actualText : 文字
>类型别名 :=> 文字
            }
            else {
                return "name node";
>"name node" : "name node"
            }
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckName(this);
>typeFlow.typeCheckName(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckName : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckName : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitJavascriptName(this, true);
>emitter.emitJavascriptName(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptName : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptName : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真
        }

        public static fromToken(token: Token): Identifier {
>fromToken : (token: 任意) => Identifier
>token : 任意
>类型别名 :=> 任意
>Token : No type information available!
>Identifier : Identifier

            return new Identifier(token.getText(), (<IdentifierToken>token).hasEscapeSequence);
>new Identifier(token.getText(), (<IdentifierToken>token).hasEscapeSequence) : Identifier
>Identifier : 类为 Identifier
>token.getText() : 任意
>类型别名 :=> 任意
>token.getText : 任意
>类型别名 :=> 任意
>token : 任意
>类型别名 :=> 任意
>getText : 任意
>类型别名 :=> 任意
>(<IdentifierToken>token).hasEscapeSequence : 任意
>类型别名 :=> 任意
>(<IdentifierToken>token) : 任意
>类型别名 :=> 任意
><IdentifierToken>token : 任意
>类型别名 :=> 任意
>IdentifierToken : No type information available!
>token : 任意
>类型别名 :=> 任意
>hasEscapeSequence : 任意
>类型别名 :=> 任意
        }
    }

    export class MissingIdentifier extends Identifier {
>MissingIdentifier : MissingIdentifier
>Identifier : Identifier

        constructor () {
            super("__missing");
>super("__missing") : 无值
>类型别名 :=> 无值
>super : 类为 Identifier
>"__missing" : "__missing"
        }

        public isMissing() {
>isMissing : () => 真假

            return true;
>true : 为真
>类型别名 :=> 为真
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            // Emit nothing for a missing ID
        }
    }

    export class Label extends AST {
>Label : Label
>AST : AST

        constructor (public id: Identifier) {
>id : Identifier
>Identifier : Identifier

            super(NodeType.Label);
>super(NodeType.Label) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>NodeType.Label : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Label : 任意
>类型别名 :=> 任意
        }

        public printLabel() { return this.id.actualText + ":"; }
>printLabel : () => 文字
>this.id.actualText + ":" : 文字
>类型别名 :=> 文字
>this.id.actualText : 文字
>类型别名 :=> 文字
>this.id : Identifier
>this : 本体
>id : Identifier
>actualText : 文字
>类型别名 :=> 文字
>":" : ":"

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            this.type = typeFlow.voidType;
>this.type = typeFlow.voidType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.voidType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>voidType : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.recordSourceMappingStart(this.id);
>emitter.recordSourceMappingStart(this.id) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this.id : Identifier
>this : 本体
>id : Identifier

            emitter.writeToOutput(this.id.actualText);
>emitter.writeToOutput(this.id.actualText) : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>this.id.actualText : 文字
>类型别名 :=> 文字
>this.id : Identifier
>this : 本体
>id : Identifier
>actualText : 文字
>类型别名 :=> 文字

            emitter.recordSourceMappingEnd(this.id);
>emitter.recordSourceMappingEnd(this.id) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this.id : Identifier
>this : 本体
>id : Identifier

            emitter.writeLineToOutput(":");
>emitter.writeLineToOutput(":") : 任意
>类型别名 :=> 任意
>emitter.writeLineToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeLineToOutput : 任意
>类型别名 :=> 任意
>":" : ":"

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class Expression extends AST {
>Expression : Expression
>AST : AST

        constructor (nodeType: NodeType) {
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!

            super(nodeType);
>super(nodeType) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>nodeType : 任意
>类型别名 :=> 任意
        }

        public isExpression() { return true; }
>isExpression : () => 真假
>true : 为真
>类型别名 :=> 为真

        public isStatementOrExpression() { return true; }
>isStatementOrExpression : () => 真假
>true : 为真
>类型别名 :=> 为真
    }

    export class UnaryExpression extends Expression {
>UnaryExpression : UnaryExpression
>Expression : Expression

        public targetType: Type = null; // Target type for an object literal (null if no target type)
>targetType : 任意
>类型别名 :=> 任意
>Type : No type information available!
>null : 空值
>类型别名 :=> 空值

        public castTerm: AST = null;
>castTerm : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        constructor (nodeType: NodeType, public operand: AST) {
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!
>operand : AST
>AST : AST

            super(nodeType);
>super(nodeType) : 无值
>类型别名 :=> 无值
>super : 类为 Expression
>nodeType : 任意
>类型别名 :=> 任意
        }

        public addToControlFlow(context: ControlFlowContext): void {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            super.addToControlFlow(context);
>super.addToControlFlow(context) : 无值
>类型别名 :=> 无值
>super.addToControlFlow : (context: 任意) => 无值
>super : Expression
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意

            // TODO: add successor as catch block/finally block if present
            if (this.nodeType == NodeType.Throw) {
>this.nodeType == NodeType.Throw : 真假
>类型别名 :=> 真假
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Throw : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Throw : 任意
>类型别名 :=> 任意

                context.returnStmt();
>context.returnStmt() : 任意
>类型别名 :=> 任意
>context.returnStmt : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>returnStmt : 任意
>类型别名 :=> 任意
            }
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            switch (this.nodeType) {
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意

                case NodeType.Not:
>NodeType.Not : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Not : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckBitNot(this);
>typeFlow.typeCheckBitNot(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckBitNot : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckBitNot : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.LogNot:
>NodeType.LogNot : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>LogNot : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckLogNot(this);
>typeFlow.typeCheckLogNot(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckLogNot : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckLogNot : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.Pos:
>NodeType.Pos : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Pos : 任意
>类型别名 :=> 任意

                case NodeType.Neg:
>NodeType.Neg : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Neg : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckUnaryNumberOperator(this);
>typeFlow.typeCheckUnaryNumberOperator(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckUnaryNumberOperator : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckUnaryNumberOperator : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.IncPost:
>NodeType.IncPost : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>IncPost : 任意
>类型别名 :=> 任意

                case NodeType.IncPre:
>NodeType.IncPre : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>IncPre : 任意
>类型别名 :=> 任意

                case NodeType.DecPost:
>NodeType.DecPost : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>DecPost : 任意
>类型别名 :=> 任意

                case NodeType.DecPre:
>NodeType.DecPre : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>DecPre : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckIncOrDec(this);
>typeFlow.typeCheckIncOrDec(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckIncOrDec : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckIncOrDec : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.ArrayLit:
>NodeType.ArrayLit : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ArrayLit : 任意
>类型别名 :=> 任意

                    typeFlow.typeCheckArrayLit(this);
>typeFlow.typeCheckArrayLit(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckArrayLit : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckArrayLit : 任意
>类型别名 :=> 任意
>this : 本体

                    return this;
>this : 本体

                case NodeType.ObjectLit:
>NodeType.ObjectLit : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ObjectLit : 任意
>类型别名 :=> 任意

                    typeFlow.typeCheckObjectLit(this);
>typeFlow.typeCheckObjectLit(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckObjectLit : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckObjectLit : 任意
>类型别名 :=> 任意
>this : 本体

                    return this;
>this : 本体

                case NodeType.Throw:
>NodeType.Throw : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Throw : 任意
>类型别名 :=> 任意

                    this.operand = typeFlow.typeCheck(this.operand);
>this.operand = typeFlow.typeCheck(this.operand) : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>typeFlow.typeCheck(this.operand) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST

                    this.type = typeFlow.voidType;
>this.type = typeFlow.voidType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.voidType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>voidType : 任意
>类型别名 :=> 任意

                    return this;
>this : 本体

                case NodeType.Typeof:
>NodeType.Typeof : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Typeof : 任意
>类型别名 :=> 任意

                    this.operand = typeFlow.typeCheck(this.operand);
>this.operand = typeFlow.typeCheck(this.operand) : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>typeFlow.typeCheck(this.operand) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST

                    this.type = typeFlow.stringType;
>this.type = typeFlow.stringType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.stringType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>stringType : 任意
>类型别名 :=> 任意

                    return this;
>this : 本体

                case NodeType.Delete:
>NodeType.Delete : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Delete : 任意
>类型别名 :=> 任意

                    this.operand = typeFlow.typeCheck(this.operand);
>this.operand = typeFlow.typeCheck(this.operand) : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>typeFlow.typeCheck(this.operand) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST

                    this.type = typeFlow.booleanType;
>this.type = typeFlow.booleanType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.booleanType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>booleanType : 任意
>类型别名 :=> 任意

                    break;

                case NodeType.TypeAssertion:
>NodeType.TypeAssertion : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>TypeAssertion : 任意
>类型别名 :=> 任意

                    this.castTerm = typeFlow.typeCheck(this.castTerm);
>this.castTerm = typeFlow.typeCheck(this.castTerm) : 任意
>类型别名 :=> 任意
>this.castTerm : AST
>this : 本体
>castTerm : AST
>typeFlow.typeCheck(this.castTerm) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.castTerm : AST
>this : 本体
>castTerm : AST

                    var applyTargetType = !this.operand.isParenthesized;
>applyTargetType : 真假
>类型别名 :=> 真假
>!this.operand.isParenthesized : 真假
>类型别名 :=> 真假
>this.operand.isParenthesized : 真假
>类型别名 :=> 真假
>this.operand : AST
>this : 本体
>operand : AST
>isParenthesized : 真假
>类型别名 :=> 真假

                    var targetType = applyTargetType ? this.castTerm.type : null;
>targetType : 任意
>类型别名 :=> 任意
>applyTargetType ? this.castTerm.type : null : 任意
>类型别名 :=> 任意
>applyTargetType : 真假
>类型别名 :=> 真假
>this.castTerm.type : 任意
>类型别名 :=> 任意
>this.castTerm : AST
>this : 本体
>castTerm : AST
>type : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

                    typeFlow.checker.typeCheckWithContextualType(targetType, typeFlow.checker.inProvisionalTypecheckMode(), true, this.operand);
>typeFlow.checker.typeCheckWithContextualType(targetType, typeFlow.checker.inProvisionalTypecheckMode(), true, this.operand) : 任意
>类型别名 :=> 任意
>typeFlow.checker.typeCheckWithContextualType : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>typeCheckWithContextualType : 任意
>类型别名 :=> 任意
>targetType : 任意
>类型别名 :=> 任意
>typeFlow.checker.inProvisionalTypecheckMode() : 任意
>类型别名 :=> 任意
>typeFlow.checker.inProvisionalTypecheckMode : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>inProvisionalTypecheckMode : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>this.operand : AST
>this : 本体
>operand : AST

                    typeFlow.castWithCoercion(this.operand, this.castTerm.type, false, true);
>typeFlow.castWithCoercion(this.operand, this.castTerm.type, false, true) : 任意
>类型别名 :=> 任意
>typeFlow.castWithCoercion : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>castWithCoercion : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>this.castTerm.type : 任意
>类型别名 :=> 任意
>this.castTerm : AST
>this : 本体
>castTerm : AST
>type : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真

                    this.type = this.castTerm.type;
>this.type = this.castTerm.type : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>this.castTerm.type : 任意
>类型别名 :=> 任意
>this.castTerm : AST
>this : 本体
>castTerm : AST
>type : 任意
>类型别名 :=> 任意

                    return this;
>this : 本体

                case NodeType.Void:
>NodeType.Void : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Void : 任意
>类型别名 :=> 任意

                    // REVIEW - Although this is good to do for completeness's sake,
                    // this shouldn't be strictly necessary from the void operator's
                    // point of view
                    this.operand = typeFlow.typeCheck(this.operand);
>this.operand = typeFlow.typeCheck(this.operand) : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>typeFlow.typeCheck(this.operand) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST

                    this.type = typeFlow.checker.undefinedType;
>this.type = typeFlow.checker.undefinedType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.checker.undefinedType : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>undefinedType : 任意
>类型别名 :=> 任意

                    break;

                default:
                    throw new Error("please implement in derived class");
>new Error("please implement in derived class") : Error
>Error : ErrorConstructor
>"please implement in derived class" : "please implement in derived class"
            }
            return this;
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            switch (this.nodeType) {
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意

                case NodeType.IncPost:
>NodeType.IncPost : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>IncPost : 任意
>类型别名 :=> 任意

                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);
>emitter.emitJavascript(this.operand, TokenID.PlusPlus, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.PlusPlus : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>PlusPlus : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    emitter.writeToOutput("++");
>emitter.writeToOutput("++") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"++" : "++"

                    break;
                case NodeType.LogNot:
>NodeType.LogNot : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>LogNot : 任意
>类型别名 :=> 任意

                    emitter.writeToOutput("!");
>emitter.writeToOutput("!") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"!" : "!"

                    emitter.emitJavascript(this.operand, TokenID.Exclamation, false);
>emitter.emitJavascript(this.operand, TokenID.Exclamation, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.Exclamation : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Exclamation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    break;
                case NodeType.DecPost:
>NodeType.DecPost : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>DecPost : 任意
>类型别名 :=> 任意

                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);
>emitter.emitJavascript(this.operand, TokenID.MinusMinus, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.MinusMinus : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>MinusMinus : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    emitter.writeToOutput("--");
>emitter.writeToOutput("--") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"--" : "--"

                    break;
                case NodeType.ObjectLit:
>NodeType.ObjectLit : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ObjectLit : 任意
>类型别名 :=> 任意

                    emitter.emitObjectLiteral(<ASTList>this.operand);
>emitter.emitObjectLiteral(<ASTList>this.operand) : 任意
>类型别名 :=> 任意
>emitter.emitObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitObjectLiteral : 任意
>类型别名 :=> 任意
><ASTList>this.operand : ASTList
>ASTList : ASTList
>this.operand : AST
>this : 本体
>operand : AST

                    break;
                case NodeType.ArrayLit:
>NodeType.ArrayLit : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ArrayLit : 任意
>类型别名 :=> 任意

                    emitter.emitArrayLiteral(<ASTList>this.operand);
>emitter.emitArrayLiteral(<ASTList>this.operand) : 任意
>类型别名 :=> 任意
>emitter.emitArrayLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitArrayLiteral : 任意
>类型别名 :=> 任意
><ASTList>this.operand : ASTList
>ASTList : ASTList
>this.operand : AST
>this : 本体
>operand : AST

                    break;
                case NodeType.Not:
>NodeType.Not : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Not : 任意
>类型别名 :=> 任意

                    emitter.writeToOutput("~");
>emitter.writeToOutput("~") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"~" : "~"

                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);
>emitter.emitJavascript(this.operand, TokenID.Tilde, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.Tilde : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Tilde : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    break;
                case NodeType.Neg:
>NodeType.Neg : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Neg : 任意
>类型别名 :=> 任意

                    emitter.writeToOutput("-");
>emitter.writeToOutput("-") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"-" : "-"

                    if (this.operand.nodeType == NodeType.Neg) {
>this.operand.nodeType == NodeType.Neg : 真假
>类型别名 :=> 真假
>this.operand.nodeType : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Neg : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Neg : 任意
>类型别名 :=> 任意

                        this.operand.isParenthesized = true;
>this.operand.isParenthesized = true : 为真
>类型别名 :=> 为真
>this.operand.isParenthesized : 真假
>类型别名 :=> 真假
>this.operand : AST
>this : 本体
>operand : AST
>isParenthesized : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
                    }
                    emitter.emitJavascript(this.operand, TokenID.Minus, false);
>emitter.emitJavascript(this.operand, TokenID.Minus, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.Minus : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Minus : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    break;
                case NodeType.Pos:
>NodeType.Pos : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Pos : 任意
>类型别名 :=> 任意

                    emitter.writeToOutput("+");
>emitter.writeToOutput("+") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"+" : "+"

                    if (this.operand.nodeType == NodeType.Pos) {
>this.operand.nodeType == NodeType.Pos : 真假
>类型别名 :=> 真假
>this.operand.nodeType : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Pos : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Pos : 任意
>类型别名 :=> 任意

                        this.operand.isParenthesized = true;
>this.operand.isParenthesized = true : 为真
>类型别名 :=> 为真
>this.operand.isParenthesized : 真假
>类型别名 :=> 真假
>this.operand : AST
>this : 本体
>operand : AST
>isParenthesized : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
                    }
                    emitter.emitJavascript(this.operand, TokenID.Plus, false);
>emitter.emitJavascript(this.operand, TokenID.Plus, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.Plus : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Plus : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    break;
                case NodeType.IncPre:
>NodeType.IncPre : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>IncPre : 任意
>类型别名 :=> 任意

                    emitter.writeToOutput("++");
>emitter.writeToOutput("++") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"++" : "++"

                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);
>emitter.emitJavascript(this.operand, TokenID.PlusPlus, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.PlusPlus : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>PlusPlus : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    break;
                case NodeType.DecPre:
>NodeType.DecPre : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>DecPre : 任意
>类型别名 :=> 任意

                    emitter.writeToOutput("--");
>emitter.writeToOutput("--") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"--" : "--"

                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);
>emitter.emitJavascript(this.operand, TokenID.MinusMinus, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.MinusMinus : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>MinusMinus : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    break;
                case NodeType.Throw:
>NodeType.Throw : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Throw : 任意
>类型别名 :=> 任意

                    emitter.writeToOutput("throw ");
>emitter.writeToOutput("throw ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"throw " : "throw "

                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);
>emitter.emitJavascript(this.operand, TokenID.Tilde, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.Tilde : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Tilde : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    emitter.writeToOutput(";");
>emitter.writeToOutput(";") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>";" : ";"

                    break;
                case NodeType.Typeof:
>NodeType.Typeof : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Typeof : 任意
>类型别名 :=> 任意

                    emitter.writeToOutput("typeof ");
>emitter.writeToOutput("typeof ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"typeof " : "typeof "

                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);
>emitter.emitJavascript(this.operand, TokenID.Tilde, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.Tilde : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Tilde : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    break;
                case NodeType.Delete:
>NodeType.Delete : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Delete : 任意
>类型别名 :=> 任意

                    emitter.writeToOutput("delete ");
>emitter.writeToOutput("delete ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"delete " : "delete "

                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);
>emitter.emitJavascript(this.operand, TokenID.Tilde, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.Tilde : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Tilde : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    break;
                case NodeType.Void:
>NodeType.Void : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Void : 任意
>类型别名 :=> 任意

                    emitter.writeToOutput("void ");
>emitter.writeToOutput("void ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"void " : "void "

                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);
>emitter.emitJavascript(this.operand, TokenID.Tilde, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.Tilde : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Tilde : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    break;
                case NodeType.TypeAssertion:
>NodeType.TypeAssertion : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>TypeAssertion : 任意
>类型别名 :=> 任意

                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);
>emitter.emitJavascript(this.operand, TokenID.Tilde, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand : AST
>this : 本体
>operand : AST
>TokenID.Tilde : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Tilde : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                    break;
                default:
                    throw new Error("please implement in derived class");
>new Error("please implement in derived class") : Error
>Error : ErrorConstructor
>"please implement in derived class" : "please implement in derived class"
            }
            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class CallExpression extends Expression {
>CallExpression : CallExpression
>Expression : Expression

        constructor (nodeType: NodeType,
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!

                     public target: AST,
>target : AST
>AST : AST

                     public arguments: ASTList) {
>arguments : ASTList
>ASTList : ASTList

            super(nodeType);
>super(nodeType) : 无值
>类型别名 :=> 无值
>super : 类为 Expression
>nodeType : 任意
>类型别名 :=> 任意

            this.minChar = this.target.minChar;
>this.minChar = this.target.minChar : 数字
>类型别名 :=> 数字
>this.minChar : 数字
>类型别名 :=> 数字
>this : 本体
>minChar : 数字
>类型别名 :=> 数字
>this.target.minChar : 数字
>类型别名 :=> 数字
>this.target : AST
>this : 本体
>target : AST
>minChar : 数字
>类型别名 :=> 数字
        }

        public signature: Signature = null;
>signature : 任意
>类型别名 :=> 任意
>Signature : No type information available!
>null : 空值
>类型别名 :=> 空值

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            if (this.nodeType == NodeType.New) {
>this.nodeType == NodeType.New : 真假
>类型别名 :=> 真假
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.New : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>New : 任意
>类型别名 :=> 任意

                return typeFlow.typeCheckNew(this);
>typeFlow.typeCheckNew(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckNew : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckNew : 任意
>类型别名 :=> 任意
>this : 本体
            }
            else {
                return typeFlow.typeCheckCall(this);
>typeFlow.typeCheckCall(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckCall : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckCall : 任意
>类型别名 :=> 任意
>this : 本体
            }
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            if (this.nodeType == NodeType.New) {
>this.nodeType == NodeType.New : 真假
>类型别名 :=> 真假
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.New : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>New : 任意
>类型别名 :=> 任意

                emitter.emitNew(this.target, this.arguments);
>emitter.emitNew(this.target, this.arguments) : 任意
>类型别名 :=> 任意
>emitter.emitNew : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitNew : 任意
>类型别名 :=> 任意
>this.target : AST
>this : 本体
>target : AST
>this.arguments : ASTList
>this : 本体
>arguments : ASTList
            }
            else {
                emitter.emitCall(this, this.target, this.arguments);
>emitter.emitCall(this, this.target, this.arguments) : 任意
>类型别名 :=> 任意
>emitter.emitCall : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitCall : 任意
>类型别名 :=> 任意
>this : 本体
>this.target : AST
>this : 本体
>target : AST
>this.arguments : ASTList
>this : 本体
>arguments : ASTList
            }

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class BinaryExpression extends Expression {
>BinaryExpression : BinaryExpression
>Expression : Expression

        constructor (nodeType: NodeType, public operand1: AST, public operand2: AST) {
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!
>operand1 : AST
>AST : AST
>operand2 : AST
>AST : AST

            super(nodeType);
>super(nodeType) : 无值
>类型别名 :=> 无值
>super : 类为 Expression
>nodeType : 任意
>类型别名 :=> 任意
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            switch (this.nodeType) {
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意

                case NodeType.Dot:
>NodeType.Dot : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Dot : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckDotOperator(this);
>typeFlow.typeCheckDotOperator(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckDotOperator : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckDotOperator : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.Asg:
>NodeType.Asg : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Asg : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckAsgOperator(this);
>typeFlow.typeCheckAsgOperator(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckAsgOperator : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckAsgOperator : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.Add:
>NodeType.Add : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Add : 任意
>类型别名 :=> 任意

                case NodeType.Sub:
>NodeType.Sub : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Sub : 任意
>类型别名 :=> 任意

                case NodeType.Mul:
>NodeType.Mul : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Mul : 任意
>类型别名 :=> 任意

                case NodeType.Div:
>NodeType.Div : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Div : 任意
>类型别名 :=> 任意

                case NodeType.Mod:
>NodeType.Mod : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Mod : 任意
>类型别名 :=> 任意

                case NodeType.Or:
>NodeType.Or : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Or : 任意
>类型别名 :=> 任意

                case NodeType.And:
>NodeType.And : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>And : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckArithmeticOperator(this, false);
>typeFlow.typeCheckArithmeticOperator(this, false) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckArithmeticOperator : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckArithmeticOperator : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假

                case NodeType.Xor:
>NodeType.Xor : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Xor : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckBitwiseOperator(this, false);
>typeFlow.typeCheckBitwiseOperator(this, false) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckBitwiseOperator : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckBitwiseOperator : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假

                case NodeType.Ne:
>NodeType.Ne : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Ne : 任意
>类型别名 :=> 任意

                case NodeType.Eq:
>NodeType.Eq : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Eq : 任意
>类型别名 :=> 任意

                    var text: string;
>text : 文字
>类型别名 :=> 文字

                    if (typeFlow.checker.styleSettings.eqeqeq) {
>typeFlow.checker.styleSettings.eqeqeq : 任意
>类型别名 :=> 任意
>typeFlow.checker.styleSettings : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>styleSettings : 任意
>类型别名 :=> 任意
>eqeqeq : 任意
>类型别名 :=> 任意

                        text = nodeTypeTable[this.nodeType];
>text = nodeTypeTable[this.nodeType] : 任意
>类型别名 :=> 任意
>text : 文字
>类型别名 :=> 文字
>nodeTypeTable[this.nodeType] : 任意
>类型别名 :=> 任意
>nodeTypeTable : 任意
>类型别名 :=> 任意
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意

                        typeFlow.checker.errorReporter.styleError(this, "use of " + text);
>typeFlow.checker.errorReporter.styleError(this, "use of " + text) : 任意
>类型别名 :=> 任意
>typeFlow.checker.errorReporter.styleError : 任意
>类型别名 :=> 任意
>typeFlow.checker.errorReporter : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>errorReporter : 任意
>类型别名 :=> 任意
>styleError : 任意
>类型别名 :=> 任意
>this : 本体
>"use of " + text : 文字
>类型别名 :=> 文字
>"use of " : "use of "
>text : 文字
>类型别名 :=> 文字
                    }
                    else if (typeFlow.checker.styleSettings.eqnull) {
>typeFlow.checker.styleSettings.eqnull : 任意
>类型别名 :=> 任意
>typeFlow.checker.styleSettings : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>styleSettings : 任意
>类型别名 :=> 任意
>eqnull : 任意
>类型别名 :=> 任意

                        text = nodeTypeTable[this.nodeType];
>text = nodeTypeTable[this.nodeType] : 任意
>类型别名 :=> 任意
>text : 文字
>类型别名 :=> 文字
>nodeTypeTable[this.nodeType] : 任意
>类型别名 :=> 任意
>nodeTypeTable : 任意
>类型别名 :=> 任意
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意

                        if ((this.operand2 !== null) && (this.operand2.nodeType == NodeType.Null)) {
>(this.operand2 !== null) && (this.operand2.nodeType == NodeType.Null) : 真假
>类型别名 :=> 真假
>(this.operand2 !== null) : 真假
>类型别名 :=> 真假
>this.operand2 !== null : 真假
>类型别名 :=> 真假
>this.operand2 : AST
>this : 本体
>operand2 : AST
>null : 空值
>类型别名 :=> 空值
>(this.operand2.nodeType == NodeType.Null) : 真假
>类型别名 :=> 真假
>this.operand2.nodeType == NodeType.Null : 真假
>类型别名 :=> 真假
>this.operand2.nodeType : 任意
>类型别名 :=> 任意
>this.operand2 : AST
>this : 本体
>operand2 : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Null : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Null : 任意
>类型别名 :=> 任意

                            typeFlow.checker.errorReporter.styleError(this, "use of " + text + " to compare with null");
>typeFlow.checker.errorReporter.styleError(this, "use of " + text + " to compare with null") : 任意
>类型别名 :=> 任意
>typeFlow.checker.errorReporter.styleError : 任意
>类型别名 :=> 任意
>typeFlow.checker.errorReporter : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>errorReporter : 任意
>类型别名 :=> 任意
>styleError : 任意
>类型别名 :=> 任意
>this : 本体
>"use of " + text + " to compare with null" : 文字
>类型别名 :=> 文字
>"use of " + text : 文字
>类型别名 :=> 文字
>"use of " : "use of "
>text : 文字
>类型别名 :=> 文字
>" to compare with null" : " to compare with null"
                        }
                    }
                case NodeType.Eqv:
>NodeType.Eqv : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Eqv : 任意
>类型别名 :=> 任意

                case NodeType.NEqv:
>NodeType.NEqv : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>NEqv : 任意
>类型别名 :=> 任意

                case NodeType.Lt:
>NodeType.Lt : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Lt : 任意
>类型别名 :=> 任意

                case NodeType.Le:
>NodeType.Le : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Le : 任意
>类型别名 :=> 任意

                case NodeType.Ge:
>NodeType.Ge : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Ge : 任意
>类型别名 :=> 任意

                case NodeType.Gt:
>NodeType.Gt : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Gt : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckBooleanOperator(this);
>typeFlow.typeCheckBooleanOperator(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckBooleanOperator : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckBooleanOperator : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.Index:
>NodeType.Index : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Index : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckIndex(this);
>typeFlow.typeCheckIndex(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckIndex : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckIndex : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.Member:
>NodeType.Member : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Member : 任意
>类型别名 :=> 任意

                    this.type = typeFlow.voidType;
>this.type = typeFlow.voidType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.voidType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>voidType : 任意
>类型别名 :=> 任意

                    return this;
>this : 本体

                case NodeType.LogOr:
>NodeType.LogOr : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>LogOr : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckLogOr(this);
>typeFlow.typeCheckLogOr(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckLogOr : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckLogOr : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.LogAnd:
>NodeType.LogAnd : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>LogAnd : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckLogAnd(this);
>typeFlow.typeCheckLogAnd(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckLogAnd : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckLogAnd : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.AsgAdd:
>NodeType.AsgAdd : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgAdd : 任意
>类型别名 :=> 任意

                case NodeType.AsgSub:
>NodeType.AsgSub : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgSub : 任意
>类型别名 :=> 任意

                case NodeType.AsgMul:
>NodeType.AsgMul : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgMul : 任意
>类型别名 :=> 任意

                case NodeType.AsgDiv:
>NodeType.AsgDiv : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgDiv : 任意
>类型别名 :=> 任意

                case NodeType.AsgMod:
>NodeType.AsgMod : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgMod : 任意
>类型别名 :=> 任意

                case NodeType.AsgOr:
>NodeType.AsgOr : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgOr : 任意
>类型别名 :=> 任意

                case NodeType.AsgAnd:
>NodeType.AsgAnd : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgAnd : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckArithmeticOperator(this, true);
>typeFlow.typeCheckArithmeticOperator(this, true) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckArithmeticOperator : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckArithmeticOperator : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

                case NodeType.AsgXor:
>NodeType.AsgXor : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgXor : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckBitwiseOperator(this, true);
>typeFlow.typeCheckBitwiseOperator(this, true) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckBitwiseOperator : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckBitwiseOperator : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

                case NodeType.Lsh:
>NodeType.Lsh : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Lsh : 任意
>类型别名 :=> 任意

                case NodeType.Rsh:
>NodeType.Rsh : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Rsh : 任意
>类型别名 :=> 任意

                case NodeType.Rs2:
>NodeType.Rs2 : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Rs2 : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckShift(this, false);
>typeFlow.typeCheckShift(this, false) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckShift : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckShift : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假

                case NodeType.AsgLsh:
>NodeType.AsgLsh : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgLsh : 任意
>类型别名 :=> 任意

                case NodeType.AsgRsh:
>NodeType.AsgRsh : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgRsh : 任意
>类型别名 :=> 任意

                case NodeType.AsgRs2:
>NodeType.AsgRs2 : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>AsgRs2 : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckShift(this, true);
>typeFlow.typeCheckShift(this, true) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckShift : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckShift : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

                case NodeType.Comma:
>NodeType.Comma : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Comma : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckCommaOperator(this);
>typeFlow.typeCheckCommaOperator(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckCommaOperator : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckCommaOperator : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.InstOf:
>NodeType.InstOf : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>InstOf : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckInstOf(this);
>typeFlow.typeCheckInstOf(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckInstOf : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckInstOf : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.In:
>NodeType.In : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>In : 任意
>类型别名 :=> 任意

                    return typeFlow.typeCheckInOperator(this);
>typeFlow.typeCheckInOperator(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckInOperator : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckInOperator : 任意
>类型别名 :=> 任意
>this : 本体

                case NodeType.From:
>NodeType.From : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>From : 任意
>类型别名 :=> 任意

                    typeFlow.checker.errorReporter.simpleError(this, "Illegal use of 'from' keyword in binary expression");
>typeFlow.checker.errorReporter.simpleError(this, "Illegal use of 'from' keyword in binary expression") : 任意
>类型别名 :=> 任意
>typeFlow.checker.errorReporter.simpleError : 任意
>类型别名 :=> 任意
>typeFlow.checker.errorReporter : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>errorReporter : 任意
>类型别名 :=> 任意
>simpleError : 任意
>类型别名 :=> 任意
>this : 本体
>"Illegal use of 'from' keyword in binary expression" : "Illegal use of 'from' keyword in binary expression"

                    break;
                default:
                    throw new Error("please implement in derived class");
>new Error("please implement in derived class") : Error
>Error : ErrorConstructor
>"please implement in derived class" : "please implement in derived class"
            }
            return this;
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            var binTokenId = nodeTypeToTokTable[this.nodeType];
>binTokenId : 任意
>类型别名 :=> 任意
>nodeTypeToTokTable[this.nodeType] : 任意
>类型别名 :=> 任意
>nodeTypeToTokTable : 任意
>类型别名 :=> 任意
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            if (binTokenId != undefined) {
>binTokenId != undefined : 真假
>类型别名 :=> 真假
>binTokenId : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

                emitter.emitJavascript(this.operand1, binTokenId, false);
>emitter.emitJavascript(this.operand1, binTokenId, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand1 : AST
>this : 本体
>operand1 : AST
>binTokenId : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                if (tokenTable[binTokenId].text == "instanceof") {
>tokenTable[binTokenId].text == "instanceof" : 真假
>类型别名 :=> 真假
>tokenTable[binTokenId].text : 任意
>类型别名 :=> 任意
>tokenTable[binTokenId] : 任意
>类型别名 :=> 任意
>tokenTable : 任意
>类型别名 :=> 任意
>binTokenId : 任意
>类型别名 :=> 任意
>text : 任意
>类型别名 :=> 任意
>"instanceof" : "instanceof"

                    emitter.writeToOutput(" instanceof ");
>emitter.writeToOutput(" instanceof ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>" instanceof " : " instanceof "
                }
                else if (tokenTable[binTokenId].text == "in") {
>tokenTable[binTokenId].text == "in" : 真假
>类型别名 :=> 真假
>tokenTable[binTokenId].text : 任意
>类型别名 :=> 任意
>tokenTable[binTokenId] : 任意
>类型别名 :=> 任意
>tokenTable : 任意
>类型别名 :=> 任意
>binTokenId : 任意
>类型别名 :=> 任意
>text : 任意
>类型别名 :=> 任意
>"in" : "in"

                    emitter.writeToOutput(" in ");
>emitter.writeToOutput(" in ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>" in " : " in "
                }
                else {
                    emitter.writeToOutputTrimmable(" " + tokenTable[binTokenId].text + " ");
>emitter.writeToOutputTrimmable(" " + tokenTable[binTokenId].text + " ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutputTrimmable : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutputTrimmable : 任意
>类型别名 :=> 任意
>" " + tokenTable[binTokenId].text + " " : 文字
>类型别名 :=> 文字
>" " + tokenTable[binTokenId].text : 文字
>类型别名 :=> 文字
>" " : " "
>tokenTable[binTokenId].text : 任意
>类型别名 :=> 任意
>tokenTable[binTokenId] : 任意
>类型别名 :=> 任意
>tokenTable : 任意
>类型别名 :=> 任意
>binTokenId : 任意
>类型别名 :=> 任意
>text : 任意
>类型别名 :=> 任意
>" " : " "
                }

                emitter.emitJavascript(this.operand2, binTokenId, false);
>emitter.emitJavascript(this.operand2, binTokenId, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand2 : AST
>this : 本体
>operand2 : AST
>binTokenId : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
            }
            else {
                switch (this.nodeType) {
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意

                    case NodeType.Dot:
>NodeType.Dot : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Dot : 任意
>类型别名 :=> 任意

                        if (!emitter.tryEmitConstant(this)) {
>!emitter.tryEmitConstant(this) : 真假
>类型别名 :=> 真假
>emitter.tryEmitConstant(this) : 任意
>类型别名 :=> 任意
>emitter.tryEmitConstant : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>tryEmitConstant : 任意
>类型别名 :=> 任意
>this : 本体

                            emitter.emitJavascript(this.operand1, TokenID.Dot, false);
>emitter.emitJavascript(this.operand1, TokenID.Dot, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand1 : AST
>this : 本体
>operand1 : AST
>TokenID.Dot : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Dot : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                            emitter.writeToOutput(".");
>emitter.writeToOutput(".") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"." : "."

                            emitter.emitJavascriptName(<Identifier>this.operand2, false);
>emitter.emitJavascriptName(<Identifier>this.operand2, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptName : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptName : 任意
>类型别名 :=> 任意
><Identifier>this.operand2 : Identifier
>Identifier : Identifier
>this.operand2 : AST
>this : 本体
>operand2 : AST
>false : 为假
>类型别名 :=> 为假
                        }
                        break;
                    case NodeType.Index:
>NodeType.Index : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Index : 任意
>类型别名 :=> 任意

                        emitter.emitIndex(this.operand1, this.operand2);
>emitter.emitIndex(this.operand1, this.operand2) : 任意
>类型别名 :=> 任意
>emitter.emitIndex : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitIndex : 任意
>类型别名 :=> 任意
>this.operand1 : AST
>this : 本体
>operand1 : AST
>this.operand2 : AST
>this : 本体
>operand2 : AST

                        break;

                    case NodeType.Member:
>NodeType.Member : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Member : 任意
>类型别名 :=> 任意

                        if (this.operand2.nodeType == NodeType.FuncDecl && (<FuncDecl>this.operand2).isAccessor()) {
>this.operand2.nodeType == NodeType.FuncDecl && (<FuncDecl>this.operand2).isAccessor() : 任意
>类型别名 :=> 任意
>this.operand2.nodeType == NodeType.FuncDecl : 真假
>类型别名 :=> 真假
>this.operand2.nodeType : 任意
>类型别名 :=> 任意
>this.operand2 : AST
>this : 本体
>operand2 : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.FuncDecl : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>FuncDecl : 任意
>类型别名 :=> 任意
>(<FuncDecl>this.operand2).isAccessor() : 任意
>类型别名 :=> 任意
>(<FuncDecl>this.operand2).isAccessor : () => 任意
>(<FuncDecl>this.operand2) : FuncDecl
><FuncDecl>this.operand2 : FuncDecl
>FuncDecl : FuncDecl
>this.operand2 : AST
>this : 本体
>operand2 : AST
>isAccessor : () => 任意

                            var funcDecl = <FuncDecl>this.operand2;
>funcDecl : FuncDecl
><FuncDecl>this.operand2 : FuncDecl
>FuncDecl : FuncDecl
>this.operand2 : AST
>this : 本体
>operand2 : AST

                            if (hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor)) {
>hasFlag(funcDecl.fncFlags, FncFlags.GetAccessor) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>funcDecl.fncFlags : 任意
>类型别名 :=> 任意
>funcDecl : FuncDecl
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.GetAccessor : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>GetAccessor : 任意
>类型别名 :=> 任意

                                emitter.writeToOutput("get ");
>emitter.writeToOutput("get ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"get " : "get "
                            }
                            else {
                                emitter.writeToOutput("set ");
>emitter.writeToOutput("set ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"set " : "set "
                            }
                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);
>emitter.emitJavascript(this.operand1, TokenID.Colon, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand1 : AST
>this : 本体
>operand1 : AST
>TokenID.Colon : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Colon : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
                        }
                        else {
                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);
>emitter.emitJavascript(this.operand1, TokenID.Colon, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand1 : AST
>this : 本体
>operand1 : AST
>TokenID.Colon : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Colon : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                            emitter.writeToOutputTrimmable(": ");
>emitter.writeToOutputTrimmable(": ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutputTrimmable : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutputTrimmable : 任意
>类型别名 :=> 任意
>": " : ": "
                        }
                        emitter.emitJavascript(this.operand2, TokenID.Comma, false);
>emitter.emitJavascript(this.operand2, TokenID.Comma, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand2 : AST
>this : 本体
>operand2 : AST
>TokenID.Comma : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Comma : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                        break;
                    case NodeType.Comma:
>NodeType.Comma : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Comma : 任意
>类型别名 :=> 任意

                        emitter.emitJavascript(this.operand1, TokenID.Comma, false);
>emitter.emitJavascript(this.operand1, TokenID.Comma, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand1 : AST
>this : 本体
>operand1 : AST
>TokenID.Comma : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Comma : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                        if (emitter.emitState.inObjectLiteral) {
>emitter.emitState.inObjectLiteral : 任意
>类型别名 :=> 任意
>emitter.emitState : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitState : 任意
>类型别名 :=> 任意
>inObjectLiteral : 任意
>类型别名 :=> 任意

                            emitter.writeLineToOutput(", ");
>emitter.writeLineToOutput(", ") : 任意
>类型别名 :=> 任意
>emitter.writeLineToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeLineToOutput : 任意
>类型别名 :=> 任意
>", " : ", "
                        }
                        else {
                            emitter.writeToOutput(",");
>emitter.writeToOutput(",") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"," : ","
                        }
                        emitter.emitJavascript(this.operand2, TokenID.Comma, false);
>emitter.emitJavascript(this.operand2, TokenID.Comma, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand2 : AST
>this : 本体
>operand2 : AST
>TokenID.Comma : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Comma : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                        break;
                    case NodeType.Is:
>NodeType.Is : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Is : 任意
>类型别名 :=> 任意

                        throw new Error("should be de-sugared during type check");
>new Error("should be de-sugared during type check") : Error
>Error : ErrorConstructor
>"should be de-sugared during type check" : "should be de-sugared during type check"

                    default:
                        throw new Error("please implement in derived class");
>new Error("please implement in derived class") : Error
>Error : ErrorConstructor
>"please implement in derived class" : "please implement in derived class"
                }
            }
            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class ConditionalExpression extends Expression {
>ConditionalExpression : ConditionalExpression
>Expression : Expression

        constructor (public operand1: AST,
>operand1 : AST
>AST : AST

                     public operand2: AST,
>operand2 : AST
>AST : AST

                     public operand3: AST) {
>operand3 : AST
>AST : AST

            super(NodeType.ConditionalExpression);
>super(NodeType.ConditionalExpression) : 无值
>类型别名 :=> 无值
>super : 类为 Expression
>NodeType.ConditionalExpression : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ConditionalExpression : 任意
>类型别名 :=> 任意
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckQMark(this);
>typeFlow.typeCheckQMark(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckQMark : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckQMark : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitJavascript(this.operand1, TokenID.Question, false);
>emitter.emitJavascript(this.operand1, TokenID.Question, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand1 : AST
>this : 本体
>operand1 : AST
>TokenID.Question : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Question : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput(" ? ");
>emitter.writeToOutput(" ? ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>" ? " : " ? "

            emitter.emitJavascript(this.operand2, TokenID.Question, false);
>emitter.emitJavascript(this.operand2, TokenID.Question, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand2 : AST
>this : 本体
>operand2 : AST
>TokenID.Question : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Question : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput(" : ");
>emitter.writeToOutput(" : ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>" : " : " : "

            emitter.emitJavascript(this.operand3, TokenID.Question, false);
>emitter.emitJavascript(this.operand3, TokenID.Question, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.operand3 : AST
>this : 本体
>operand3 : AST
>TokenID.Question : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Question : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class NumberLiteral extends Expression {
>NumberLiteral : NumberLiteral
>Expression : Expression

        constructor (public value: number, public hasEmptyFraction?: boolean) {
>value : 数字
>类型别名 :=> 数字
>hasEmptyFraction : 真假
>类型别名 :=> 真假

            super(NodeType.NumberLit);
>super(NodeType.NumberLit) : 无值
>类型别名 :=> 无值
>super : 类为 Expression
>NodeType.NumberLit : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>NumberLit : 任意
>类型别名 :=> 任意
        }

        public isNegativeZero = false;
>isNegativeZero : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            this.type = typeFlow.doubleType;
>this.type = typeFlow.doubleType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.doubleType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>doubleType : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }

        public treeViewLabel() {
>treeViewLabel : () => 文字

            return "num: " + this.printLabel();
>"num: " + this.printLabel() : 文字
>类型别名 :=> 文字
>"num: " : "num: "
>this.printLabel() : 文字
>类型别名 :=> 文字
>this.printLabel : () => 文字
>this : 本体
>printLabel : () => 文字
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            if (this.isNegativeZero) {
>this.isNegativeZero : 真假
>类型别名 :=> 真假
>this : 本体
>isNegativeZero : 真假
>类型别名 :=> 真假

                emitter.writeToOutput("-");
>emitter.writeToOutput("-") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"-" : "-"
            }

            emitter.writeToOutput(this.value.toString());
>emitter.writeToOutput(this.value.toString()) : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>this.value.toString() : 文字
>类型别名 :=> 文字
>this.value.toString : (radix?: 数字) => 文字
>this.value : 数字
>类型别名 :=> 数字
>this : 本体
>value : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

            if (this.hasEmptyFraction)
>this.hasEmptyFraction : 真假
>类型别名 :=> 真假
>this : 本体
>hasEmptyFraction : 真假
>类型别名 :=> 真假

                emitter.writeToOutput(".0");
>emitter.writeToOutput(".0") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>".0" : ".0"

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public printLabel() {
>printLabel : () => 文字

            if (Math.floor(this.value) != this.value) {
>Math.floor(this.value) != this.value : 真假
>类型别名 :=> 真假
>Math.floor(this.value) : 数字
>类型别名 :=> 数字
>Math.floor : (x: 数字) => 数字
>Math : Math
>floor : (x: 数字) => 数字
>this.value : 数字
>类型别名 :=> 数字
>this : 本体
>value : 数字
>类型别名 :=> 数字
>this.value : 数字
>类型别名 :=> 数字
>this : 本体
>value : 数字
>类型别名 :=> 数字

                return this.value.toFixed(2).toString();
>this.value.toFixed(2).toString() : 文字
>类型别名 :=> 文字
>this.value.toFixed(2).toString : () => 文字
>this.value.toFixed(2) : 文字
>类型别名 :=> 文字
>this.value.toFixed : (fractionDigits?: 数字) => 文字
>this.value : 数字
>类型别名 :=> 数字
>this : 本体
>value : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字
>2 : 2
>toString : () => 文字
            }
            else if (this.hasEmptyFraction) {
>this.hasEmptyFraction : 真假
>类型别名 :=> 真假
>this : 本体
>hasEmptyFraction : 真假
>类型别名 :=> 真假

                return this.value.toString() + ".0";
>this.value.toString() + ".0" : 文字
>类型别名 :=> 文字
>this.value.toString() : 文字
>类型别名 :=> 文字
>this.value.toString : (radix?: 数字) => 文字
>this.value : 数字
>类型别名 :=> 数字
>this : 本体
>value : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
>".0" : ".0"
            }
            else {
                return this.value.toString();
>this.value.toString() : 文字
>类型别名 :=> 文字
>this.value.toString : (radix?: 数字) => 文字
>this.value : 数字
>类型别名 :=> 数字
>this : 本体
>value : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
            }
        }
    }

    export class RegexLiteral extends Expression {
>RegexLiteral : RegexLiteral
>Expression : Expression

        constructor (public regex) {
>regex : 任意
>类型别名 :=> 任意

            super(NodeType.Regex);
>super(NodeType.Regex) : 无值
>类型别名 :=> 无值
>super : 类为 Expression
>NodeType.Regex : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Regex : 任意
>类型别名 :=> 任意
        }
        
        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            this.type = typeFlow.regexType;
>this.type = typeFlow.regexType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.regexType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>regexType : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.writeToOutput(this.regex.toString());
>emitter.writeToOutput(this.regex.toString()) : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>this.regex.toString() : 任意
>类型别名 :=> 任意
>this.regex.toString : 任意
>类型别名 :=> 任意
>this.regex : 任意
>类型别名 :=> 任意
>this : 本体
>regex : 任意
>类型别名 :=> 任意
>toString : 任意
>类型别名 :=> 任意

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class StringLiteral extends Expression {
>StringLiteral : StringLiteral
>Expression : Expression

        constructor (public text: string) {
>text : 文字
>类型别名 :=> 文字

            super(NodeType.QString);
>super(NodeType.QString) : 无值
>类型别名 :=> 无值
>super : 类为 Expression
>NodeType.QString : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>QString : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitStringLiteral(this.text);
>emitter.emitStringLiteral(this.text) : 任意
>类型别名 :=> 任意
>emitter.emitStringLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitStringLiteral : 任意
>类型别名 :=> 任意
>this.text : 文字
>类型别名 :=> 文字
>this : 本体
>text : 文字
>类型别名 :=> 文字

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            this.type = typeFlow.stringType;
>this.type = typeFlow.stringType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.stringType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>stringType : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }

        public treeViewLabel() {
>treeViewLabel : () => 文字

            return "st: " + this.text;
>"st: " + this.text : 文字
>类型别名 :=> 文字
>"st: " : "st: "
>this.text : 文字
>类型别名 :=> 文字
>this : 本体
>text : 文字
>类型别名 :=> 文字
        }

        public printLabel() {
>printLabel : () => 文字

            return this.text;
>this.text : 文字
>类型别名 :=> 文字
>this : 本体
>text : 文字
>类型别名 :=> 文字
        }
    }

    export class ModuleElement extends AST {
>ModuleElement : ModuleElement
>AST : AST

        constructor (nodeType: NodeType) {
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!

            super(nodeType);
>super(nodeType) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>nodeType : 任意
>类型别名 :=> 任意
        }
    }

    export class ImportDeclaration extends ModuleElement {
>ImportDeclaration : ImportDeclaration
>ModuleElement : ModuleElement

        public isStatementOrExpression() { return true; }
>isStatementOrExpression : () => 真假
>true : 为真
>类型别名 :=> 为真

        public varFlags = VarFlags.None;
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.None : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>None : 任意
>类型别名 :=> 任意

        public isDynamicImport = false;
>isDynamicImport : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        constructor (public id: Identifier, public alias: AST) {
>id : Identifier
>Identifier : Identifier
>alias : AST
>AST : AST

            super(NodeType.ImportDeclaration);
>super(NodeType.ImportDeclaration) : 无值
>类型别名 :=> 无值
>super : 类为 ModuleElement
>NodeType.ImportDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ImportDeclaration : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            var mod = <ModuleType>this.alias.type;
>mod : 任意
>类型别名 :=> 任意
><ModuleType>this.alias.type : 任意
>类型别名 :=> 任意
>ModuleType : No type information available!
>this.alias.type : 任意
>类型别名 :=> 任意
>this.alias : AST
>this : 本体
>alias : AST
>type : 任意
>类型别名 :=> 任意

            // REVIEW: Only modules may be aliased for now, though there's no real
            // restriction on what the type symbol may be
            if (!this.isDynamicImport || (this.id.sym && !(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef)) {
>!this.isDynamicImport || (this.id.sym && !(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef) : 真假
>类型别名 :=> 真假
>!this.isDynamicImport : 真假
>类型别名 :=> 真假
>this.isDynamicImport : 真假
>类型别名 :=> 真假
>this : 本体
>isDynamicImport : 真假
>类型别名 :=> 真假
>(this.id.sym && !(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef) : 真假
>类型别名 :=> 真假
>this.id.sym && !(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef : 真假
>类型别名 :=> 真假
>this.id.sym : 任意
>类型别名 :=> 任意
>this.id : Identifier
>this : 本体
>id : Identifier
>sym : 任意
>类型别名 :=> 任意
>!(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef : 真假
>类型别名 :=> 真假
>(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef : 任意
>类型别名 :=> 任意
>(<TypeSymbol>this.id.sym) : 任意
>类型别名 :=> 任意
><TypeSymbol>this.id.sym : 任意
>类型别名 :=> 任意
>TypeSymbol : No type information available!
>this.id.sym : 任意
>类型别名 :=> 任意
>this.id : Identifier
>this : 本体
>id : Identifier
>sym : 任意
>类型别名 :=> 任意
>onlyReferencedAsTypeRef : 任意
>类型别名 :=> 任意

                var prevModAliasId = emitter.modAliasId;
>prevModAliasId : 任意
>类型别名 :=> 任意
>emitter.modAliasId : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>modAliasId : 任意
>类型别名 :=> 任意

                var prevFirstModAlias = emitter.firstModAlias;
>prevFirstModAlias : 任意
>类型别名 :=> 任意
>emitter.firstModAlias : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>firstModAlias : 任意
>类型别名 :=> 任意

                emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

                emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

                emitter.writeToOutput("var " + this.id.actualText + " = ");
>emitter.writeToOutput("var " + this.id.actualText + " = ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"var " + this.id.actualText + " = " : 文字
>类型别名 :=> 文字
>"var " + this.id.actualText : 文字
>类型别名 :=> 文字
>"var " : "var "
>this.id.actualText : 文字
>类型别名 :=> 文字
>this.id : Identifier
>this : 本体
>id : Identifier
>actualText : 文字
>类型别名 :=> 文字
>" = " : " = "

                emitter.modAliasId = this.id.actualText;
>emitter.modAliasId = this.id.actualText : 文字
>类型别名 :=> 文字
>emitter.modAliasId : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>modAliasId : 任意
>类型别名 :=> 任意
>this.id.actualText : 文字
>类型别名 :=> 文字
>this.id : Identifier
>this : 本体
>id : Identifier
>actualText : 文字
>类型别名 :=> 文字

                emitter.firstModAlias = this.firstAliasedModToString();
>emitter.firstModAlias = this.firstAliasedModToString() : 文字
>类型别名 :=> 文字
>emitter.firstModAlias : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>firstModAlias : 任意
>类型别名 :=> 任意
>this.firstAliasedModToString() : 文字
>类型别名 :=> 文字
>this.firstAliasedModToString : () => 文字
>this : 本体
>firstAliasedModToString : () => 文字

                emitter.emitJavascript(this.alias, TokenID.Tilde, false);
>emitter.emitJavascript(this.alias, TokenID.Tilde, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.alias : AST
>this : 本体
>alias : AST
>TokenID.Tilde : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Tilde : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                // the dynamic import case will insert the semi-colon automatically
                if (!this.isDynamicImport) {
>!this.isDynamicImport : 真假
>类型别名 :=> 真假
>this.isDynamicImport : 真假
>类型别名 :=> 真假
>this : 本体
>isDynamicImport : 真假
>类型别名 :=> 真假

                    emitter.writeToOutput(";");
>emitter.writeToOutput(";") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>";" : ";"
                }
                emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假

                emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

                emitter.modAliasId = prevModAliasId;
>emitter.modAliasId = prevModAliasId : 任意
>类型别名 :=> 任意
>emitter.modAliasId : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>modAliasId : 任意
>类型别名 :=> 任意
>prevModAliasId : 任意
>类型别名 :=> 任意

                emitter.firstModAlias = prevFirstModAlias;
>emitter.firstModAlias = prevFirstModAlias : 任意
>类型别名 :=> 任意
>emitter.firstModAlias : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>firstModAlias : 任意
>类型别名 :=> 任意
>prevFirstModAlias : 任意
>类型别名 :=> 任意
            }
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckImportDecl(this);
>typeFlow.typeCheckImportDecl(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckImportDecl : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckImportDecl : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public getAliasName(aliasAST?: AST = this.alias) : string {
>getAliasName : (aliasAST?: AST) => 文字
>aliasAST : AST
>AST : AST
>this.alias : AST
>this : 本体
>alias : AST

            if (aliasAST.nodeType == NodeType.Name) {
>aliasAST.nodeType == NodeType.Name : 真假
>类型别名 :=> 真假
>aliasAST.nodeType : 任意
>类型别名 :=> 任意
>aliasAST : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Name : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Name : 任意
>类型别名 :=> 任意

                return (<Identifier>aliasAST).actualText;
>(<Identifier>aliasAST).actualText : 文字
>类型别名 :=> 文字
>(<Identifier>aliasAST) : Identifier
><Identifier>aliasAST : Identifier
>Identifier : Identifier
>aliasAST : AST
>actualText : 文字
>类型别名 :=> 文字

            } else {
                var dotExpr = <BinaryExpression>aliasAST;
>dotExpr : BinaryExpression
><BinaryExpression>aliasAST : BinaryExpression
>BinaryExpression : BinaryExpression
>aliasAST : AST

                return this.getAliasName(dotExpr.operand1) + "." + this.getAliasName(dotExpr.operand2);
>this.getAliasName(dotExpr.operand1) + "." + this.getAliasName(dotExpr.operand2) : 文字
>类型别名 :=> 文字
>this.getAliasName(dotExpr.operand1) + "." : 文字
>类型别名 :=> 文字
>this.getAliasName(dotExpr.operand1) : 文字
>类型别名 :=> 文字
>this.getAliasName : (aliasAST?: AST) => 文字
>this : 本体
>getAliasName : (aliasAST?: AST) => 文字
>dotExpr.operand1 : AST
>dotExpr : BinaryExpression
>operand1 : AST
>"." : "."
>this.getAliasName(dotExpr.operand2) : 文字
>类型别名 :=> 文字
>this.getAliasName : (aliasAST?: AST) => 文字
>this : 本体
>getAliasName : (aliasAST?: AST) => 文字
>dotExpr.operand2 : AST
>dotExpr : BinaryExpression
>operand2 : AST
            }
        }

        public firstAliasedModToString() {
>firstAliasedModToString : () => 文字

            if (this.alias.nodeType == NodeType.Name) {
>this.alias.nodeType == NodeType.Name : 真假
>类型别名 :=> 真假
>this.alias.nodeType : 任意
>类型别名 :=> 任意
>this.alias : AST
>this : 本体
>alias : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Name : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Name : 任意
>类型别名 :=> 任意

                return (<Identifier>this.alias).actualText;
>(<Identifier>this.alias).actualText : 文字
>类型别名 :=> 文字
>(<Identifier>this.alias) : Identifier
><Identifier>this.alias : Identifier
>Identifier : Identifier
>this.alias : AST
>this : 本体
>alias : AST
>actualText : 文字
>类型别名 :=> 文字
            }
            else {
                var dotExpr = <BinaryExpression>this.alias;
>dotExpr : BinaryExpression
><BinaryExpression>this.alias : BinaryExpression
>BinaryExpression : BinaryExpression
>this.alias : AST
>this : 本体
>alias : AST

                var firstMod = <Identifier>dotExpr.operand1;
>firstMod : Identifier
><Identifier>dotExpr.operand1 : Identifier
>Identifier : Identifier
>dotExpr.operand1 : AST
>dotExpr : BinaryExpression
>operand1 : AST

                return firstMod.actualText;
>firstMod.actualText : 文字
>类型别名 :=> 文字
>firstMod : Identifier
>actualText : 文字
>类型别名 :=> 文字
            }
        }
    }

    export class BoundDecl extends AST {
>BoundDecl : BoundDecl
>AST : AST

        public init: AST = null;
>init : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        public typeExpr: AST = null;
>typeExpr : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        public varFlags = VarFlags.None;
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.None : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>None : 任意
>类型别名 :=> 任意

        public sym: Symbol = null;
>sym : 任意
>类型别名 :=> 任意
>Symbol : No type information available!
>null : 空值
>类型别名 :=> 空值

        constructor (public id: Identifier, nodeType: NodeType, public nestingLevel: number) {
>id : Identifier
>Identifier : Identifier
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!
>nestingLevel : 数字
>类型别名 :=> 数字

            super(nodeType);
>super(nodeType) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>nodeType : 任意
>类型别名 :=> 任意
        }

        public isStatementOrExpression() { return true; }
>isStatementOrExpression : () => 真假
>true : 为真
>类型别名 :=> 为真

        public isPrivate() { return hasFlag(this.varFlags, VarFlags.Private); }
>isPrivate : () => 任意
>hasFlag(this.varFlags, VarFlags.Private) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.varFlags : 任意
>类型别名 :=> 任意
>this : 本体
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.Private : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>Private : 任意
>类型别名 :=> 任意

        public isPublic() { return hasFlag(this.varFlags, VarFlags.Public); }
>isPublic : () => 任意
>hasFlag(this.varFlags, VarFlags.Public) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.varFlags : 任意
>类型别名 :=> 任意
>this : 本体
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.Public : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>Public : 任意
>类型别名 :=> 任意

        public isProperty() { return hasFlag(this.varFlags, VarFlags.Property); }
>isProperty : () => 任意
>hasFlag(this.varFlags, VarFlags.Property) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.varFlags : 任意
>类型别名 :=> 任意
>this : 本体
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.Property : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>Property : 任意
>类型别名 :=> 任意

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckBoundDecl(this);
>typeFlow.typeCheckBoundDecl(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckBoundDecl : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckBoundDecl : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public printLabel() {
>printLabel : () => 任意

            return this.treeViewLabel();
>this.treeViewLabel() : 任意
>类型别名 :=> 任意
>this.treeViewLabel : () => 任意
>this : 本体
>treeViewLabel : () => 任意
        }
    }

    export class VarDecl extends BoundDecl {
>VarDecl : VarDecl
>BoundDecl : BoundDecl

        constructor (id: Identifier, nest: number) {
>id : Identifier
>Identifier : Identifier
>nest : 数字
>类型别名 :=> 数字

            super(id, NodeType.VarDecl, nest);
>super(id, NodeType.VarDecl, nest) : 无值
>类型别名 :=> 无值
>super : 类为 BoundDecl
>id : Identifier
>NodeType.VarDecl : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>VarDecl : 任意
>类型别名 :=> 任意
>nest : 数字
>类型别名 :=> 数字
        }

        public isAmbient() { return hasFlag(this.varFlags, VarFlags.Ambient); }
>isAmbient : () => 任意
>hasFlag(this.varFlags, VarFlags.Ambient) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.varFlags : 任意
>类型别名 :=> 任意
>this : 本体
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.Ambient : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>Ambient : 任意
>类型别名 :=> 任意

        public isExported() { return hasFlag(this.varFlags, VarFlags.Exported); }
>isExported : () => 任意
>hasFlag(this.varFlags, VarFlags.Exported) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.varFlags : 任意
>类型别名 :=> 任意
>this : 本体
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.Exported : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>Exported : 任意
>类型别名 :=> 任意

        public isStatic() { return hasFlag(this.varFlags, VarFlags.Static); }
>isStatic : () => 任意
>hasFlag(this.varFlags, VarFlags.Static) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.varFlags : 任意
>类型别名 :=> 任意
>this : 本体
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.Static : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>Static : 任意
>类型别名 :=> 任意

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitJavascriptVarDecl(this, tokenId);
>emitter.emitJavascriptVarDecl(this, tokenId) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptVarDecl : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptVarDecl : 任意
>类型别名 :=> 任意
>this : 本体
>tokenId : 任意
>类型别名 :=> 任意
        }

        public treeViewLabel() {
>treeViewLabel : () => 文字

            return "var " + this.id.actualText;
>"var " + this.id.actualText : 文字
>类型别名 :=> 文字
>"var " : "var "
>this.id.actualText : 文字
>类型别名 :=> 文字
>this.id : Identifier
>this : 本体
>id : Identifier
>actualText : 文字
>类型别名 :=> 文字
        }
    }

    export class ArgDecl extends BoundDecl {
>ArgDecl : ArgDecl
>BoundDecl : BoundDecl

        constructor (id: Identifier) {
>id : Identifier
>Identifier : Identifier

            super(id, NodeType.ArgDecl, 0);
>super(id, NodeType.ArgDecl, 0) : 无值
>类型别名 :=> 无值
>super : 类为 BoundDecl
>id : Identifier
>NodeType.ArgDecl : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ArgDecl : 任意
>类型别名 :=> 任意
>0 : 0
        }

        public isOptional = false;
>isOptional : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public isOptionalArg() { return this.isOptional || this.init; }
>isOptionalArg : () => 为真 | AST
>this.isOptional || this.init : 为真 | AST
>this.isOptional : 真假
>类型别名 :=> 真假
>this : 本体
>isOptional : 真假
>类型别名 :=> 真假
>this.init : AST
>this : 本体
>init : AST

        public treeViewLabel() {
>treeViewLabel : () => 文字

            return "arg: " + this.id.actualText;
>"arg: " + this.id.actualText : 文字
>类型别名 :=> 文字
>"arg: " : "arg: "
>this.id.actualText : 文字
>类型别名 :=> 文字
>this.id : Identifier
>this : 本体
>id : Identifier
>actualText : 文字
>类型别名 :=> 文字
        }

        public parameterPropertySym: FieldSymbol = null;
>parameterPropertySym : 任意
>类型别名 :=> 任意
>FieldSymbol : No type information available!
>null : 空值
>类型别名 :=> 空值

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.writeToOutput(this.id.actualText);
>emitter.writeToOutput(this.id.actualText) : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>this.id.actualText : 文字
>类型别名 :=> 文字
>this.id : Identifier
>this : 本体
>id : Identifier
>actualText : 文字
>类型别名 :=> 文字

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }
    }

    var internalId = 0;
>internalId : 数字
>类型别名 :=> 数字
>0 : 0

    export class FuncDecl extends AST {
>FuncDecl : FuncDecl
>AST : AST

        public hint: string = null;
>hint : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

        public fncFlags = FncFlags.None;
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.None : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>None : 任意
>类型别名 :=> 任意

        public returnTypeAnnotation: AST = null;
>returnTypeAnnotation : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        public symbols: IHashTable;
>symbols : 任意
>类型别名 :=> 任意
>IHashTable : No type information available!

        public variableArgList = false;
>variableArgList : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public signature: Signature;
>signature : 任意
>类型别名 :=> 任意
>Signature : No type information available!

        public envids: Identifier[];
>envids : Identifier[]
>Identifier : Identifier

        public jumpRefs: Identifier[] = null;
>jumpRefs : Identifier[]
>Identifier : Identifier
>null : 空值
>类型别名 :=> 空值

        public internalNameCache: string = null;
>internalNameCache : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

        public tmp1Declared = false;
>tmp1Declared : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public enclosingFnc: FuncDecl = null;
>enclosingFnc : FuncDecl
>FuncDecl : FuncDecl
>null : 空值
>类型别名 :=> 空值

        public freeVariables: Symbol[] = [];
>freeVariables : 任意[]
>Symbol : No type information available!
>[] : 未定[]

        public unitIndex = -1;
>unitIndex : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1

        public classDecl: NamedDeclaration = null;
>classDecl : NamedDeclaration
>NamedDeclaration : NamedDeclaration
>null : 空值
>类型别名 :=> 空值

        public boundToProperty: VarDecl = null;
>boundToProperty : VarDecl
>VarDecl : VarDecl
>null : 空值
>类型别名 :=> 空值

        public isOverload = false;
>isOverload : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public innerStaticFuncs: FuncDecl[] = [];
>innerStaticFuncs : FuncDecl[]
>FuncDecl : FuncDecl
>[] : 未定[]

        public isTargetTypedAsMethod = false;
>isTargetTypedAsMethod : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public isInlineCallLiteral = false;
>isInlineCallLiteral : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public accessorSymbol: Symbol = null;
>accessorSymbol : 任意
>类型别名 :=> 任意
>Symbol : No type information available!
>null : 空值
>类型别名 :=> 空值

        public leftCurlyCount = 0;
>leftCurlyCount : 数字
>类型别名 :=> 数字
>0 : 0

        public rightCurlyCount = 0;
>rightCurlyCount : 数字
>类型别名 :=> 数字
>0 : 0

        public returnStatementsWithExpressions: ReturnStatement[] = [];
>returnStatementsWithExpressions : ReturnStatement[]
>ReturnStatement : ReturnStatement
>[] : 未定[]

        public scopeType: Type = null; // Type of the FuncDecl, before target typing
>scopeType : 任意
>类型别名 :=> 任意
>Type : No type information available!
>null : 空值
>类型别名 :=> 空值

        public endingToken: ASTSpan = null;
>endingToken : ASTSpan
>ASTSpan : ASTSpan
>null : 空值
>类型别名 :=> 空值

        constructor (public name: Identifier, public bod: ASTList, public isConstructor: boolean,
>name : Identifier
>Identifier : Identifier
>bod : ASTList
>ASTList : ASTList
>isConstructor : 真假
>类型别名 :=> 真假

                     public arguments: ASTList, public vars: ASTList, public scopes: ASTList, public statics: ASTList,
>arguments : ASTList
>ASTList : ASTList
>vars : ASTList
>ASTList : ASTList
>scopes : ASTList
>ASTList : ASTList
>statics : ASTList
>ASTList : ASTList

            nodeType: number) {
>nodeType : 数字
>类型别名 :=> 数字

            super(nodeType);
>super(nodeType) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>nodeType : 数字
>类型别名 :=> 数字
        }

        public internalName(): string {
>internalName : () => 文字

            if (this.internalNameCache == null) {
>this.internalNameCache == null : 真假
>类型别名 :=> 真假
>this.internalNameCache : 文字
>类型别名 :=> 文字
>this : 本体
>internalNameCache : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

                var extName = this.getNameText();
>extName : 文字
>类型别名 :=> 文字
>this.getNameText() : 文字
>类型别名 :=> 文字
>this.getNameText : () => 文字
>this : 本体
>getNameText : () => 文字

                if (extName) {
>extName : 文字
>类型别名 :=> 文字

                    this.internalNameCache = "_internal_" + extName;
>this.internalNameCache = "_internal_" + extName : 文字
>类型别名 :=> 文字
>this.internalNameCache : 文字
>类型别名 :=> 文字
>this : 本体
>internalNameCache : 文字
>类型别名 :=> 文字
>"_internal_" + extName : 文字
>类型别名 :=> 文字
>"_internal_" : "_internal_"
>extName : 文字
>类型别名 :=> 文字
                }
                else {
                    this.internalNameCache = "_internal_" + internalId++;
>this.internalNameCache = "_internal_" + internalId++ : 文字
>类型别名 :=> 文字
>this.internalNameCache : 文字
>类型别名 :=> 文字
>this : 本体
>internalNameCache : 文字
>类型别名 :=> 文字
>"_internal_" + internalId++ : 文字
>类型别名 :=> 文字
>"_internal_" : "_internal_"
>internalId++ : 数字
>类型别名 :=> 数字
>internalId : 数字
>类型别名 :=> 数字
                }
            }
            return this.internalNameCache;
>this.internalNameCache : 文字
>类型别名 :=> 文字
>this : 本体
>internalNameCache : 文字
>类型别名 :=> 文字
        }

        public hasSelfReference() { return hasFlag(this.fncFlags, FncFlags.HasSelfReference); }
>hasSelfReference : () => 任意
>hasFlag(this.fncFlags, FncFlags.HasSelfReference) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.HasSelfReference : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>HasSelfReference : 任意
>类型别名 :=> 任意

        public setHasSelfReference() { this.fncFlags |= FncFlags.HasSelfReference; }
>setHasSelfReference : () => 无值
>this.fncFlags |= FncFlags.HasSelfReference : 数字
>类型别名 :=> 数字
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.HasSelfReference : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>HasSelfReference : 任意
>类型别名 :=> 任意

        public addCloRef(id: Identifier, sym: Symbol): number {
>addCloRef : (id: Identifier, sym: 任意) => 数字
>id : Identifier
>Identifier : Identifier
>sym : 任意
>类型别名 :=> 任意
>Symbol : No type information available!

            if (this.envids == null) {
>this.envids == null : 真假
>类型别名 :=> 真假
>this.envids : Identifier[]
>this : 本体
>envids : Identifier[]
>null : 空值
>类型别名 :=> 空值

                this.envids = new Identifier[];
>this.envids = new Identifier[] : 任意
>类型别名 :=> 任意
>this.envids : Identifier[]
>this : 本体
>envids : Identifier[]
>new Identifier[] : 任意
>类型别名 :=> 任意
>Identifier[] : 任意
>类型别名 :=> 任意
>Identifier : 类为 Identifier
            }
            this.envids[this.envids.length] = id;
>this.envids[this.envids.length] = id : Identifier
>this.envids[this.envids.length] : Identifier
>this.envids : Identifier[]
>this : 本体
>envids : Identifier[]
>this.envids.length : 数字
>类型别名 :=> 数字
>this.envids : Identifier[]
>this : 本体
>envids : Identifier[]
>length : 数字
>类型别名 :=> 数字
>id : Identifier

            var outerFnc = this.enclosingFnc;
>outerFnc : FuncDecl
>this.enclosingFnc : FuncDecl
>this : 本体
>enclosingFnc : FuncDecl

            if (sym) {
>sym : 任意
>类型别名 :=> 任意

                while (outerFnc && (outerFnc.type.symbol != sym.container)) {
>outerFnc && (outerFnc.type.symbol != sym.container) : 真假
>类型别名 :=> 真假
>outerFnc : FuncDecl
>(outerFnc.type.symbol != sym.container) : 真假
>类型别名 :=> 真假
>outerFnc.type.symbol != sym.container : 真假
>类型别名 :=> 真假
>outerFnc.type.symbol : 任意
>类型别名 :=> 任意
>outerFnc.type : 任意
>类型别名 :=> 任意
>outerFnc : FuncDecl
>type : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>sym.container : 任意
>类型别名 :=> 任意
>sym : 任意
>类型别名 :=> 任意
>container : 任意
>类型别名 :=> 任意

                    outerFnc.addJumpRef(sym);
>outerFnc.addJumpRef(sym) : 无值
>类型别名 :=> 无值
>outerFnc.addJumpRef : (sym: 任意) => 无值
>outerFnc : FuncDecl
>addJumpRef : (sym: 任意) => 无值
>sym : 任意
>类型别名 :=> 任意

                    outerFnc = outerFnc.enclosingFnc;
>outerFnc = outerFnc.enclosingFnc : FuncDecl
>outerFnc : FuncDecl
>outerFnc.enclosingFnc : FuncDecl
>outerFnc : FuncDecl
>enclosingFnc : FuncDecl
                }
            }
            return this.envids.length - 1;
>this.envids.length - 1 : 数字
>类型别名 :=> 数字
>this.envids.length : 数字
>类型别名 :=> 数字
>this.envids : Identifier[]
>this : 本体
>envids : Identifier[]
>length : 数字
>类型别名 :=> 数字
>1 : 1
        }

        public addJumpRef(sym: Symbol): void {
>addJumpRef : (sym: 任意) => 无值
>sym : 任意
>类型别名 :=> 任意
>Symbol : No type information available!

            if (this.jumpRefs == null) {
>this.jumpRefs == null : 真假
>类型别名 :=> 真假
>this.jumpRefs : Identifier[]
>this : 本体
>jumpRefs : Identifier[]
>null : 空值
>类型别名 :=> 空值

                this.jumpRefs = new Identifier[];
>this.jumpRefs = new Identifier[] : 任意
>类型别名 :=> 任意
>this.jumpRefs : Identifier[]
>this : 本体
>jumpRefs : Identifier[]
>new Identifier[] : 任意
>类型别名 :=> 任意
>Identifier[] : 任意
>类型别名 :=> 任意
>Identifier : 类为 Identifier
            }
            var id = new Identifier(sym.name);
>id : Identifier
>new Identifier(sym.name) : Identifier
>Identifier : 类为 Identifier
>sym.name : 任意
>类型别名 :=> 任意
>sym : 任意
>类型别名 :=> 任意
>name : 任意
>类型别名 :=> 任意

            this.jumpRefs[this.jumpRefs.length] = id;
>this.jumpRefs[this.jumpRefs.length] = id : Identifier
>this.jumpRefs[this.jumpRefs.length] : Identifier
>this.jumpRefs : Identifier[]
>this : 本体
>jumpRefs : Identifier[]
>this.jumpRefs.length : 数字
>类型别名 :=> 数字
>this.jumpRefs : Identifier[]
>this : 本体
>jumpRefs : Identifier[]
>length : 数字
>类型别名 :=> 数字
>id : Identifier

            id.sym = sym;
>id.sym = sym : 任意
>类型别名 :=> 任意
>id.sym : 任意
>类型别名 :=> 任意
>id : Identifier
>sym : 任意
>类型别名 :=> 任意
>sym : 任意
>类型别名 :=> 任意

            id.cloId = this.addCloRef(id, null);
>id.cloId = this.addCloRef(id, null) : 数字
>类型别名 :=> 数字
>id.cloId : 数字
>类型别名 :=> 数字
>id : Identifier
>cloId : 数字
>类型别名 :=> 数字
>this.addCloRef(id, null) : 数字
>类型别名 :=> 数字
>this.addCloRef : (id: Identifier, sym: 任意) => 数字
>this : 本体
>addCloRef : (id: Identifier, sym: 任意) => 数字
>id : Identifier
>null : 空值
>类型别名 :=> 空值
        }

        public buildControlFlow(): ControlFlowContext {
>buildControlFlow : () => 任意
>ControlFlowContext : No type information available!

            var entry = new BasicBlock();
>entry : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            var exit = new BasicBlock();
>exit : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            var context = new ControlFlowContext(entry, exit);
>context : 任意
>类型别名 :=> 任意
>new ControlFlowContext(entry, exit) : 任意
>类型别名 :=> 任意
>ControlFlowContext : 任意
>类型别名 :=> 任意
>entry : 任意
>类型别名 :=> 任意
>exit : 任意
>类型别名 :=> 任意

            var controlFlowPrefix = (ast: AST, parent: AST, walker: IAstWalker) => {
>controlFlowPrefix : (ast: AST, parent: AST, walker: 任意) => AST
>(ast: AST, parent: AST, walker: IAstWalker) => {                ast.addToControlFlow(walker.state);                return ast;            } : (ast: AST, parent: AST, walker: 任意) => AST
>ast : AST
>AST : AST
>parent : AST
>AST : AST
>walker : 任意
>类型别名 :=> 任意
>IAstWalker : No type information available!

                ast.addToControlFlow(walker.state);
>ast.addToControlFlow(walker.state) : 无值
>类型别名 :=> 无值
>ast.addToControlFlow : (context: 任意) => 无值
>ast : AST
>addToControlFlow : (context: 任意) => 无值
>walker.state : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>state : 任意
>类型别名 :=> 任意

                return ast;
>ast : AST
            }

            var walker = getAstWalkerFactory().getWalker(controlFlowPrefix, null, null, context);
>walker : 任意
>类型别名 :=> 任意
>getAstWalkerFactory().getWalker(controlFlowPrefix, null, null, context) : 任意
>类型别名 :=> 任意
>getAstWalkerFactory().getWalker : 任意
>类型别名 :=> 任意
>getAstWalkerFactory() : 任意
>类型别名 :=> 任意
>getAstWalkerFactory : 任意
>类型别名 :=> 任意
>getWalker : 任意
>类型别名 :=> 任意
>controlFlowPrefix : (ast: AST, parent: AST, walker: 任意) => AST
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
>context : 任意
>类型别名 :=> 任意

            context.walker = walker;
>context.walker = walker : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意

            walker.walk(this.bod, this);
>walker.walk(this.bod, this) : 任意
>类型别名 :=> 任意
>walker.walk : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.bod : ASTList
>this : 本体
>bod : ASTList
>this : 本体

            return context;
>context : 任意
>类型别名 :=> 任意
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckFunction(this);
>typeFlow.typeCheckFunction(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckFunction : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckFunction : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitJavascriptFunction(this);
>emitter.emitJavascriptFunction(this) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptFunction : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptFunction : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public getNameText() {
>getNameText : () => 文字

            if (this.name) {
>this.name : Identifier
>this : 本体
>name : Identifier

                return this.name.actualText;
>this.name.actualText : 文字
>类型别名 :=> 文字
>this.name : Identifier
>this : 本体
>name : Identifier
>actualText : 文字
>类型别名 :=> 文字
            }
            else {
                return this.hint;
>this.hint : 文字
>类型别名 :=> 文字
>this : 本体
>hint : 文字
>类型别名 :=> 文字
            }
        }

        public isMethod() {
>isMethod : () => 真假

            return (this.fncFlags & FncFlags.Method) != FncFlags.None;
>(this.fncFlags & FncFlags.Method) != FncFlags.None : 真假
>类型别名 :=> 真假
>(this.fncFlags & FncFlags.Method) : 数字
>类型别名 :=> 数字
>this.fncFlags & FncFlags.Method : 数字
>类型别名 :=> 数字
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.Method : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>Method : 任意
>类型别名 :=> 任意
>FncFlags.None : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>None : 任意
>类型别名 :=> 任意
        }

        public isCallMember() { return hasFlag(this.fncFlags, FncFlags.CallMember); }
>isCallMember : () => 任意
>hasFlag(this.fncFlags, FncFlags.CallMember) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.CallMember : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>CallMember : 任意
>类型别名 :=> 任意

        public isConstructMember() { return hasFlag(this.fncFlags, FncFlags.ConstructMember); }
>isConstructMember : () => 任意
>hasFlag(this.fncFlags, FncFlags.ConstructMember) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.ConstructMember : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>ConstructMember : 任意
>类型别名 :=> 任意

        public isIndexerMember() { return hasFlag(this.fncFlags, FncFlags.IndexerMember); }
>isIndexerMember : () => 任意
>hasFlag(this.fncFlags, FncFlags.IndexerMember) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.IndexerMember : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>IndexerMember : 任意
>类型别名 :=> 任意

        public isSpecialFn() { return this.isCallMember() || this.isIndexerMember() || this.isConstructMember(); }
>isSpecialFn : () => 任意
>this.isCallMember() || this.isIndexerMember() || this.isConstructMember() : 任意
>类型别名 :=> 任意
>this.isCallMember() || this.isIndexerMember() : 任意
>类型别名 :=> 任意
>this.isCallMember() : 任意
>类型别名 :=> 任意
>this.isCallMember : () => 任意
>this : 本体
>isCallMember : () => 任意
>this.isIndexerMember() : 任意
>类型别名 :=> 任意
>this.isIndexerMember : () => 任意
>this : 本体
>isIndexerMember : () => 任意
>this.isConstructMember() : 任意
>类型别名 :=> 任意
>this.isConstructMember : () => 任意
>this : 本体
>isConstructMember : () => 任意

        public isAnonymousFn() { return this.name === null; }
>isAnonymousFn : () => 真假
>this.name === null : 真假
>类型别名 :=> 真假
>this.name : Identifier
>this : 本体
>name : Identifier
>null : 空值
>类型别名 :=> 空值

        public isAccessor() { return hasFlag(this.fncFlags, FncFlags.GetAccessor) || hasFlag(this.fncFlags, FncFlags.SetAccessor); }
>isAccessor : () => 任意
>hasFlag(this.fncFlags, FncFlags.GetAccessor) || hasFlag(this.fncFlags, FncFlags.SetAccessor) : 任意
>类型别名 :=> 任意
>hasFlag(this.fncFlags, FncFlags.GetAccessor) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.GetAccessor : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>GetAccessor : 任意
>类型别名 :=> 任意
>hasFlag(this.fncFlags, FncFlags.SetAccessor) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.SetAccessor : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>SetAccessor : 任意
>类型别名 :=> 任意

        public isGetAccessor() { return hasFlag(this.fncFlags, FncFlags.GetAccessor); }
>isGetAccessor : () => 任意
>hasFlag(this.fncFlags, FncFlags.GetAccessor) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.GetAccessor : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>GetAccessor : 任意
>类型别名 :=> 任意

        public isSetAccessor() { return hasFlag(this.fncFlags, FncFlags.SetAccessor); }
>isSetAccessor : () => 任意
>hasFlag(this.fncFlags, FncFlags.SetAccessor) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.SetAccessor : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>SetAccessor : 任意
>类型别名 :=> 任意

        public isAmbient() { return hasFlag(this.fncFlags, FncFlags.Ambient); }
>isAmbient : () => 任意
>hasFlag(this.fncFlags, FncFlags.Ambient) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.Ambient : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>Ambient : 任意
>类型别名 :=> 任意

        public isExported() { return hasFlag(this.fncFlags, FncFlags.Exported); }
>isExported : () => 任意
>hasFlag(this.fncFlags, FncFlags.Exported) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.Exported : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>Exported : 任意
>类型别名 :=> 任意

        public isPrivate() { return hasFlag(this.fncFlags, FncFlags.Private); }
>isPrivate : () => 任意
>hasFlag(this.fncFlags, FncFlags.Private) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.Private : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>Private : 任意
>类型别名 :=> 任意

        public isPublic() { return hasFlag(this.fncFlags, FncFlags.Public); }
>isPublic : () => 任意
>hasFlag(this.fncFlags, FncFlags.Public) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.Public : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>Public : 任意
>类型别名 :=> 任意

        public isStatic() { return hasFlag(this.fncFlags, FncFlags.Static); }
>isStatic : () => 任意
>hasFlag(this.fncFlags, FncFlags.Static) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.Static : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>Static : 任意
>类型别名 :=> 任意

        public treeViewLabel() {
>treeViewLabel : () => 文字

            if (this.name == null) {
>this.name == null : 真假
>类型别名 :=> 真假
>this.name : Identifier
>this : 本体
>name : Identifier
>null : 空值
>类型别名 :=> 空值

                return "funcExpr";
>"funcExpr" : "funcExpr"
            }
            else {
                return "func: " + this.name.actualText
>"func: " + this.name.actualText : 文字
>类型别名 :=> 文字
>"func: " : "func: "
>this.name.actualText : 文字
>类型别名 :=> 文字
>this.name : Identifier
>this : 本体
>name : Identifier
>actualText : 文字
>类型别名 :=> 文字
            }
        }

        public ClearFlags(): void {
>ClearFlags : () => 无值

            this.fncFlags = FncFlags.None;
>this.fncFlags = FncFlags.None : 任意
>类型别名 :=> 任意
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.None : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>None : 任意
>类型别名 :=> 任意
        }

        public isSignature() { return (this.fncFlags & FncFlags.Signature) != FncFlags.None; }
>isSignature : () => 真假
>(this.fncFlags & FncFlags.Signature) != FncFlags.None : 真假
>类型别名 :=> 真假
>(this.fncFlags & FncFlags.Signature) : 数字
>类型别名 :=> 数字
>this.fncFlags & FncFlags.Signature : 数字
>类型别名 :=> 数字
>this.fncFlags : 任意
>类型别名 :=> 任意
>this : 本体
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.Signature : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>Signature : 任意
>类型别名 :=> 任意
>FncFlags.None : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>None : 任意
>类型别名 :=> 任意

        public hasStaticDeclarations() { return (!this.isConstructor && (this.statics.members.length > 0 || this.innerStaticFuncs.length > 0)); }
>hasStaticDeclarations : () => 真假
>(!this.isConstructor && (this.statics.members.length > 0 || this.innerStaticFuncs.length > 0)) : 真假
>类型别名 :=> 真假
>!this.isConstructor && (this.statics.members.length > 0 || this.innerStaticFuncs.length > 0) : 真假
>类型别名 :=> 真假
>!this.isConstructor : 真假
>类型别名 :=> 真假
>this.isConstructor : 真假
>类型别名 :=> 真假
>this : 本体
>isConstructor : 真假
>类型别名 :=> 真假
>(this.statics.members.length > 0 || this.innerStaticFuncs.length > 0) : 真假
>类型别名 :=> 真假
>this.statics.members.length > 0 || this.innerStaticFuncs.length > 0 : 真假
>类型别名 :=> 真假
>this.statics.members.length > 0 : 真假
>类型别名 :=> 真假
>this.statics.members.length : 数字
>类型别名 :=> 数字
>this.statics.members : AST[]
>this.statics : ASTList
>this : 本体
>statics : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字
>0 : 0
>this.innerStaticFuncs.length > 0 : 真假
>类型别名 :=> 真假
>this.innerStaticFuncs.length : 数字
>类型别名 :=> 数字
>this.innerStaticFuncs : FuncDecl[]
>this : 本体
>innerStaticFuncs : FuncDecl[]
>length : 数字
>类型别名 :=> 数字
>0 : 0
    }

    export class LocationInfo {
>LocationInfo : LocationInfo

        constructor (public filename: string, public lineMap: number[], public unitIndex) { }
>filename : 文字
>类型别名 :=> 文字
>lineMap : 数字[]
>unitIndex : 任意
>类型别名 :=> 任意
    }

    export var unknownLocationInfo = new LocationInfo("unknown", null, -1);
>unknownLocationInfo : LocationInfo
>new LocationInfo("unknown", null, -1) : LocationInfo
>LocationInfo : 类为 LocationInfo
>"unknown" : "unknown"
>null : 空值
>类型别名 :=> 空值
>-1 : -1
>1 : 1

    export class Script extends FuncDecl {
>Script : Script
>FuncDecl : FuncDecl

        public locationInfo: LocationInfo = null;
>locationInfo : LocationInfo
>LocationInfo : LocationInfo
>null : 空值
>类型别名 :=> 空值

        public referencedFiles: IFileReference[] = [];
>referencedFiles : 任意[]
>IFileReference : No type information available!
>[] : 未定[]

        public requiresGlobal = false;
>requiresGlobal : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public requiresInherits = false;
>requiresInherits : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public isResident = false;
>isResident : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public isDeclareFile = false;
>isDeclareFile : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public hasBeenTypeChecked = false;
>hasBeenTypeChecked : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public topLevelMod: ModuleDeclaration = null;
>topLevelMod : ModuleDeclaration
>ModuleDeclaration : ModuleDeclaration
>null : 空值
>类型别名 :=> 空值

        public leftCurlyCount = 0;
>leftCurlyCount : 数字
>类型别名 :=> 数字
>0 : 0

        public rightCurlyCount = 0;
>rightCurlyCount : 数字
>类型别名 :=> 数字
>0 : 0

        public vars: ASTList;
>vars : ASTList
>ASTList : ASTList

        public scopes: ASTList;
>scopes : ASTList
>ASTList : ASTList

        // Remember if the script contains Unicode chars, that is needed when generating code for this script object to decide the output file correct encoding.
        public containsUnicodeChar = false;
>containsUnicodeChar : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public containsUnicodeCharInComment = false;
>containsUnicodeCharInComment : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        constructor (vars: ASTList, scopes: ASTList) {
>vars : ASTList
>ASTList : ASTList
>scopes : ASTList
>ASTList : ASTList

            super(new Identifier("script"), null, false, null, vars, scopes, null, NodeType.Script);
>super(new Identifier("script"), null, false, null, vars, scopes, null, NodeType.Script) : 无值
>类型别名 :=> 无值
>super : 类为 FuncDecl
>new Identifier("script") : Identifier
>Identifier : 类为 Identifier
>"script" : "script"
>null : 空值
>类型别名 :=> 空值
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值
>vars : ASTList
>scopes : ASTList
>null : 空值
>类型别名 :=> 空值
>NodeType.Script : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Script : 任意
>类型别名 :=> 任意

            this.vars = vars;
>this.vars = vars : ASTList
>this.vars : ASTList
>this : 本体
>vars : ASTList
>vars : ASTList

            this.scopes = scopes;
>this.scopes = scopes : ASTList
>this.scopes : ASTList
>this : 本体
>scopes : ASTList
>scopes : ASTList
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckScript(this);
>typeFlow.typeCheckScript(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckScript : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckScript : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public treeViewLabel() {
>treeViewLabel : () => 文字

            return "Script";
>"Script" : "Script"
        }

        public emitRequired() {
>emitRequired : () => 真假

            if (!this.isDeclareFile && !this.isResident && this.bod) {
>!this.isDeclareFile && !this.isResident && this.bod : ASTList
>!this.isDeclareFile && !this.isResident : 真假
>类型别名 :=> 真假
>!this.isDeclareFile : 真假
>类型别名 :=> 真假
>this.isDeclareFile : 真假
>类型别名 :=> 真假
>this : 本体
>isDeclareFile : 真假
>类型别名 :=> 真假
>!this.isResident : 真假
>类型别名 :=> 真假
>this.isResident : 真假
>类型别名 :=> 真假
>this : 本体
>isResident : 真假
>类型别名 :=> 真假
>this.bod : ASTList
>this : 本体
>bod : ASTList

                for (var i = 0, len = this.bod.members.length; i < len; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>len : 数字
>类型别名 :=> 数字
>this.bod.members.length : 数字
>类型别名 :=> 数字
>this.bod.members : AST[]
>this.bod : ASTList
>this : 本体
>bod : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字
>i < len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                    var stmt = this.bod.members[i];
>stmt : AST
>this.bod.members[i] : AST
>this.bod.members : AST[]
>this.bod : ASTList
>this : 本体
>bod : ASTList
>members : AST[]
>i : 数字
>类型别名 :=> 数字

                    if (stmt.nodeType == NodeType.ModuleDeclaration) {
>stmt.nodeType == NodeType.ModuleDeclaration : 真假
>类型别名 :=> 真假
>stmt.nodeType : 任意
>类型别名 :=> 任意
>stmt : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.ModuleDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ModuleDeclaration : 任意
>类型别名 :=> 任意

                        if (!hasFlag((<ModuleDeclaration>stmt).modFlags, ModuleFlags.ShouldEmitModuleDecl | ModuleFlags.Ambient)) {
>!hasFlag((<ModuleDeclaration>stmt).modFlags, ModuleFlags.ShouldEmitModuleDecl | ModuleFlags.Ambient) : 真假
>类型别名 :=> 真假
>hasFlag((<ModuleDeclaration>stmt).modFlags, ModuleFlags.ShouldEmitModuleDecl | ModuleFlags.Ambient) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>(<ModuleDeclaration>stmt).modFlags : 任意
>类型别名 :=> 任意
>(<ModuleDeclaration>stmt) : ModuleDeclaration
><ModuleDeclaration>stmt : ModuleDeclaration
>ModuleDeclaration : ModuleDeclaration
>stmt : AST
>modFlags : 任意
>类型别名 :=> 任意
>ModuleFlags.ShouldEmitModuleDecl | ModuleFlags.Ambient : 数字
>类型别名 :=> 数字
>ModuleFlags.ShouldEmitModuleDecl : 任意
>类型别名 :=> 任意
>ModuleFlags : 任意
>类型别名 :=> 任意
>ShouldEmitModuleDecl : 任意
>类型别名 :=> 任意
>ModuleFlags.Ambient : 任意
>类型别名 :=> 任意
>ModuleFlags : 任意
>类型别名 :=> 任意
>Ambient : 任意
>类型别名 :=> 任意

                            return true;
>true : 为真
>类型别名 :=> 为真
                        }
                    }
                    else if (stmt.nodeType == NodeType.ClassDeclaration) {
>stmt.nodeType == NodeType.ClassDeclaration : 真假
>类型别名 :=> 真假
>stmt.nodeType : 任意
>类型别名 :=> 任意
>stmt : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.ClassDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ClassDeclaration : 任意
>类型别名 :=> 任意

                        if (!hasFlag((<InterfaceDeclaration>stmt).varFlags, VarFlags.Ambient)) {
>!hasFlag((<InterfaceDeclaration>stmt).varFlags, VarFlags.Ambient) : 真假
>类型别名 :=> 真假
>hasFlag((<InterfaceDeclaration>stmt).varFlags, VarFlags.Ambient) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>(<InterfaceDeclaration>stmt).varFlags : 任意
>类型别名 :=> 任意
>(<InterfaceDeclaration>stmt) : InterfaceDeclaration
><InterfaceDeclaration>stmt : InterfaceDeclaration
>InterfaceDeclaration : InterfaceDeclaration
>stmt : AST
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.Ambient : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>Ambient : 任意
>类型别名 :=> 任意

                            return true;
>true : 为真
>类型别名 :=> 为真
                        }
                    }
                    else if (stmt.nodeType == NodeType.VarDecl) {
>stmt.nodeType == NodeType.VarDecl : 真假
>类型别名 :=> 真假
>stmt.nodeType : 任意
>类型别名 :=> 任意
>stmt : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.VarDecl : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>VarDecl : 任意
>类型别名 :=> 任意

                        if (!hasFlag((<VarDecl>stmt).varFlags, VarFlags.Ambient)) {
>!hasFlag((<VarDecl>stmt).varFlags, VarFlags.Ambient) : 真假
>类型别名 :=> 真假
>hasFlag((<VarDecl>stmt).varFlags, VarFlags.Ambient) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>(<VarDecl>stmt).varFlags : 任意
>类型别名 :=> 任意
>(<VarDecl>stmt) : VarDecl
><VarDecl>stmt : VarDecl
>VarDecl : VarDecl
>stmt : AST
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.Ambient : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>Ambient : 任意
>类型别名 :=> 任意

                            return true;
>true : 为真
>类型别名 :=> 为真
                        }
                    }
                    else if (stmt.nodeType == NodeType.FuncDecl) {
>stmt.nodeType == NodeType.FuncDecl : 真假
>类型别名 :=> 真假
>stmt.nodeType : 任意
>类型别名 :=> 任意
>stmt : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.FuncDecl : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>FuncDecl : 任意
>类型别名 :=> 任意

                        if (!(<FuncDecl>stmt).isSignature()) {
>!(<FuncDecl>stmt).isSignature() : 真假
>类型别名 :=> 真假
>(<FuncDecl>stmt).isSignature() : 真假
>类型别名 :=> 真假
>(<FuncDecl>stmt).isSignature : () => 真假
>(<FuncDecl>stmt) : FuncDecl
><FuncDecl>stmt : FuncDecl
>FuncDecl : FuncDecl
>stmt : AST
>isSignature : () => 真假

                            return true;
>true : 为真
>类型别名 :=> 为真
                        }
                    }
                    else if (stmt.nodeType != NodeType.InterfaceDeclaration && stmt.nodeType != NodeType.Empty) {
>stmt.nodeType != NodeType.InterfaceDeclaration && stmt.nodeType != NodeType.Empty : 真假
>类型别名 :=> 真假
>stmt.nodeType != NodeType.InterfaceDeclaration : 真假
>类型别名 :=> 真假
>stmt.nodeType : 任意
>类型别名 :=> 任意
>stmt : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.InterfaceDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>InterfaceDeclaration : 任意
>类型别名 :=> 任意
>stmt.nodeType != NodeType.Empty : 真假
>类型别名 :=> 真假
>stmt.nodeType : 任意
>类型别名 :=> 任意
>stmt : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Empty : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Empty : 任意
>类型别名 :=> 任意

                        return true;
>true : 为真
>类型别名 :=> 为真
                    }
                }
            }
            return false;
>false : 为假
>类型别名 :=> 为假
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            if (this.emitRequired()) {
>this.emitRequired() : 真假
>类型别名 :=> 真假
>this.emitRequired : () => 真假
>this : 本体
>emitRequired : () => 真假

                emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

                emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

                emitter.emitJavascriptList(this.bod, null, TokenID.Semicolon, true, false, false, true, this.requiresInherits);
>emitter.emitJavascriptList(this.bod, null, TokenID.Semicolon, true, false, false, true, this.requiresInherits) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptList : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptList : 任意
>类型别名 :=> 任意
>this.bod : ASTList
>this : 本体
>bod : ASTList
>null : 空值
>类型别名 :=> 空值
>TokenID.Semicolon : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Semicolon : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真
>this.requiresInherits : 真假
>类型别名 :=> 真假
>this : 本体
>requiresInherits : 真假
>类型别名 :=> 真假

                emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

                emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
            }
        }
    }

    export class NamedDeclaration extends ModuleElement {
>NamedDeclaration : NamedDeclaration
>ModuleElement : ModuleElement

        public leftCurlyCount = 0;
>leftCurlyCount : 数字
>类型别名 :=> 数字
>0 : 0

        public rightCurlyCount = 0;
>rightCurlyCount : 数字
>类型别名 :=> 数字
>0 : 0

        constructor (nodeType: NodeType,
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!

                     public name: Identifier,
>name : Identifier
>Identifier : Identifier

                     public members: ASTList) {
>members : ASTList
>ASTList : ASTList

            super(nodeType);
>super(nodeType) : 无值
>类型别名 :=> 无值
>super : 类为 ModuleElement
>nodeType : 任意
>类型别名 :=> 任意
        }
    }

    export class ModuleDeclaration extends NamedDeclaration {
>ModuleDeclaration : ModuleDeclaration
>NamedDeclaration : NamedDeclaration

        public modFlags = ModuleFlags.ShouldEmitModuleDecl;
>modFlags : 任意
>类型别名 :=> 任意
>ModuleFlags.ShouldEmitModuleDecl : 任意
>类型别名 :=> 任意
>ModuleFlags : 任意
>类型别名 :=> 任意
>ShouldEmitModuleDecl : 任意
>类型别名 :=> 任意

        public mod: ModuleType;
>mod : 任意
>类型别名 :=> 任意
>ModuleType : No type information available!

        public prettyName: string;
>prettyName : 文字
>类型别名 :=> 文字

        public amdDependencies: string[] = [];
>amdDependencies : 文字[]
>[] : 未定[]

        public vars: ASTList;
>vars : ASTList
>ASTList : ASTList

        public scopes: ASTList;
>scopes : ASTList
>ASTList : ASTList

        // Remember if the module contains Unicode chars, that is needed for dynamic module as we will generate a file for each.
        public containsUnicodeChar = false;
>containsUnicodeChar : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public containsUnicodeCharInComment = false;
>containsUnicodeCharInComment : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        constructor (name: Identifier, members: ASTList, vars: ASTList, scopes: ASTList, public endingToken: ASTSpan) {
>name : Identifier
>Identifier : Identifier
>members : ASTList
>ASTList : ASTList
>vars : ASTList
>ASTList : ASTList
>scopes : ASTList
>ASTList : ASTList
>endingToken : ASTSpan
>ASTSpan : ASTSpan

            super(NodeType.ModuleDeclaration, name, members);
>super(NodeType.ModuleDeclaration, name, members) : 无值
>类型别名 :=> 无值
>super : 类为 NamedDeclaration
>NodeType.ModuleDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ModuleDeclaration : 任意
>类型别名 :=> 任意
>name : Identifier
>members : ASTList

            this.vars = vars;
>this.vars = vars : ASTList
>this.vars : ASTList
>this : 本体
>vars : ASTList
>vars : ASTList

            this.scopes = scopes;
>this.scopes = scopes : ASTList
>this.scopes : ASTList
>this : 本体
>scopes : ASTList
>scopes : ASTList

            this.prettyName = this.name.actualText;
>this.prettyName = this.name.actualText : 文字
>类型别名 :=> 文字
>this.prettyName : 文字
>类型别名 :=> 文字
>this : 本体
>prettyName : 文字
>类型别名 :=> 文字
>this.name.actualText : 文字
>类型别名 :=> 文字
>this.name : Identifier
>this : 本体
>name : Identifier
>actualText : 文字
>类型别名 :=> 文字
        }

        public isExported() { return hasFlag(this.modFlags, ModuleFlags.Exported); }
>isExported : () => 任意
>hasFlag(this.modFlags, ModuleFlags.Exported) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.modFlags : 任意
>类型别名 :=> 任意
>this : 本体
>modFlags : 任意
>类型别名 :=> 任意
>ModuleFlags.Exported : 任意
>类型别名 :=> 任意
>ModuleFlags : 任意
>类型别名 :=> 任意
>Exported : 任意
>类型别名 :=> 任意

        public isAmbient() { return hasFlag(this.modFlags, ModuleFlags.Ambient); }
>isAmbient : () => 任意
>hasFlag(this.modFlags, ModuleFlags.Ambient) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.modFlags : 任意
>类型别名 :=> 任意
>this : 本体
>modFlags : 任意
>类型别名 :=> 任意
>ModuleFlags.Ambient : 任意
>类型别名 :=> 任意
>ModuleFlags : 任意
>类型别名 :=> 任意
>Ambient : 任意
>类型别名 :=> 任意

        public isEnum() { return hasFlag(this.modFlags, ModuleFlags.IsEnum); }
>isEnum : () => 任意
>hasFlag(this.modFlags, ModuleFlags.IsEnum) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.modFlags : 任意
>类型别名 :=> 任意
>this : 本体
>modFlags : 任意
>类型别名 :=> 任意
>ModuleFlags.IsEnum : 任意
>类型别名 :=> 任意
>ModuleFlags : 任意
>类型别名 :=> 任意
>IsEnum : 任意
>类型别名 :=> 任意

        public recordNonInterface() {
>recordNonInterface : () => 无值

            this.modFlags &= ~ModuleFlags.ShouldEmitModuleDecl;
>this.modFlags &= ~ModuleFlags.ShouldEmitModuleDecl : 数字
>类型别名 :=> 数字
>this.modFlags : 任意
>类型别名 :=> 任意
>this : 本体
>modFlags : 任意
>类型别名 :=> 任意
>~ModuleFlags.ShouldEmitModuleDecl : 数字
>类型别名 :=> 数字
>ModuleFlags.ShouldEmitModuleDecl : 任意
>类型别名 :=> 任意
>ModuleFlags : 任意
>类型别名 :=> 任意
>ShouldEmitModuleDecl : 任意
>类型别名 :=> 任意
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckModule(this);
>typeFlow.typeCheckModule(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckModule : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckModule : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            if (!hasFlag(this.modFlags, ModuleFlags.ShouldEmitModuleDecl)) {
>!hasFlag(this.modFlags, ModuleFlags.ShouldEmitModuleDecl) : 真假
>类型别名 :=> 真假
>hasFlag(this.modFlags, ModuleFlags.ShouldEmitModuleDecl) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.modFlags : 任意
>类型别名 :=> 任意
>this : 本体
>modFlags : 任意
>类型别名 :=> 任意
>ModuleFlags.ShouldEmitModuleDecl : 任意
>类型别名 :=> 任意
>ModuleFlags : 任意
>类型别名 :=> 任意
>ShouldEmitModuleDecl : 任意
>类型别名 :=> 任意

                emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

                emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

                emitter.emitJavascriptModule(this);
>emitter.emitJavascriptModule(this) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptModule : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptModule : 任意
>类型别名 :=> 任意
>this : 本体

                emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

                emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
            }
        }
    }

    export class TypeDeclaration extends NamedDeclaration {
>TypeDeclaration : TypeDeclaration
>NamedDeclaration : NamedDeclaration

        public varFlags = VarFlags.None;
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.None : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>None : 任意
>类型别名 :=> 任意

        constructor (nodeType: NodeType,
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!

                     name: Identifier,
>name : Identifier
>Identifier : Identifier

                     public extendsList: ASTList,
>extendsList : ASTList
>ASTList : ASTList

                     public implementsList: ASTList,
>implementsList : ASTList
>ASTList : ASTList

                     members: ASTList) {
>members : ASTList
>ASTList : ASTList

            super(nodeType, name, members);
>super(nodeType, name, members) : 无值
>类型别名 :=> 无值
>super : 类为 NamedDeclaration
>nodeType : 任意
>类型别名 :=> 任意
>name : Identifier
>members : ASTList
        }

        public isExported() { 
>isExported : () => 任意

            return hasFlag(this.varFlags, VarFlags.Exported);
>hasFlag(this.varFlags, VarFlags.Exported) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.varFlags : 任意
>类型别名 :=> 任意
>this : 本体
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.Exported : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>Exported : 任意
>类型别名 :=> 任意
        }

        public isAmbient() {
>isAmbient : () => 任意

            return hasFlag(this.varFlags, VarFlags.Ambient);
>hasFlag(this.varFlags, VarFlags.Ambient) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>this.varFlags : 任意
>类型别名 :=> 任意
>this : 本体
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.Ambient : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>Ambient : 任意
>类型别名 :=> 任意
        }
    }

    export class ClassDeclaration extends TypeDeclaration {
>ClassDeclaration : ClassDeclaration
>TypeDeclaration : TypeDeclaration

        public knownMemberNames: any = {};
>knownMemberNames : 任意
>类型别名 :=> 任意
>{} : {}

        public constructorDecl: FuncDecl = null;
>constructorDecl : FuncDecl
>FuncDecl : FuncDecl
>null : 空值
>类型别名 :=> 空值

        public constructorNestingLevel = 0;
>constructorNestingLevel : 数字
>类型别名 :=> 数字
>0 : 0

        public endingToken: ASTSpan = null;
>endingToken : ASTSpan
>ASTSpan : ASTSpan
>null : 空值
>类型别名 :=> 空值

        constructor (name: Identifier,
>name : Identifier
>Identifier : Identifier

                     members: ASTList,
>members : ASTList
>ASTList : ASTList

                     extendsList: ASTList,
>extendsList : ASTList
>ASTList : ASTList

                     implementsList: ASTList) {
>implementsList : ASTList
>ASTList : ASTList

            super(NodeType.ClassDeclaration, name, extendsList, implementsList, members);
>super(NodeType.ClassDeclaration, name, extendsList, implementsList, members) : 无值
>类型别名 :=> 无值
>super : 类为 TypeDeclaration
>NodeType.ClassDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ClassDeclaration : 任意
>类型别名 :=> 任意
>name : Identifier
>extendsList : ASTList
>implementsList : ASTList
>members : ASTList
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckClass(this);
>typeFlow.typeCheckClass(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckClass : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckClass : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitJavascriptClass(this);
>emitter.emitJavascriptClass(this) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptClass : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptClass : 任意
>类型别名 :=> 任意
>this : 本体
        }
    }

    export class InterfaceDeclaration extends TypeDeclaration {
>InterfaceDeclaration : InterfaceDeclaration
>TypeDeclaration : TypeDeclaration

        constructor (name: Identifier,
>name : Identifier
>Identifier : Identifier

                     members: ASTList,
>members : ASTList
>ASTList : ASTList

                     extendsList: ASTList,
>extendsList : ASTList
>ASTList : ASTList

                     implementsList: ASTList) {
>implementsList : ASTList
>ASTList : ASTList

            super(NodeType.InterfaceDeclaration, name, extendsList, implementsList, members);
>super(NodeType.InterfaceDeclaration, name, extendsList, implementsList, members) : 无值
>类型别名 :=> 无值
>super : 类为 TypeDeclaration
>NodeType.InterfaceDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>InterfaceDeclaration : 任意
>类型别名 :=> 任意
>name : Identifier
>extendsList : ASTList
>implementsList : ASTList
>members : ASTList
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckInterface(this);
>typeFlow.typeCheckInterface(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckInterface : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckInterface : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假
        }
    }

    export class Statement extends ModuleElement {
>Statement : Statement
>ModuleElement : ModuleElement

        constructor (nodeType: NodeType) {
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!

            super(nodeType);
>super(nodeType) : 无值
>类型别名 :=> 无值
>super : 类为 ModuleElement
>nodeType : 任意
>类型别名 :=> 任意

            this.flags |= ASTFlags.IsStatement;
>this.flags |= ASTFlags.IsStatement : 数字
>类型别名 :=> 数字
>this.flags : 任意
>类型别名 :=> 任意
>this : 本体
>flags : 任意
>类型别名 :=> 任意
>ASTFlags.IsStatement : 任意
>类型别名 :=> 任意
>ASTFlags : 任意
>类型别名 :=> 任意
>IsStatement : 任意
>类型别名 :=> 任意
        }

        public isLoop() { return false; }
>isLoop : () => 真假
>false : 为假
>类型别名 :=> 为假

        public isStatementOrExpression() { return true; }
>isStatementOrExpression : () => 真假
>true : 为真
>类型别名 :=> 为真

        public isCompoundStatement() { return this.isLoop(); }
>isCompoundStatement : () => 真假
>this.isLoop() : 真假
>类型别名 :=> 真假
>this.isLoop : () => 真假
>this : 本体
>isLoop : () => 真假

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            this.type = typeFlow.voidType;
>this.type = typeFlow.voidType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.voidType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>voidType : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }
    }

    export class LabeledStatement extends Statement {
>LabeledStatement : LabeledStatement
>Statement : Statement

        constructor (public labels: ASTList, public stmt: AST) {
>labels : ASTList
>ASTList : ASTList
>stmt : AST
>AST : AST

            super(NodeType.LabeledStatement);
>super(NodeType.LabeledStatement) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.LabeledStatement : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>LabeledStatement : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            if (this.labels) {
>this.labels : ASTList
>this : 本体
>labels : ASTList

                var labelsLen = this.labels.members.length;
>labelsLen : 数字
>类型别名 :=> 数字
>this.labels.members.length : 数字
>类型别名 :=> 数字
>this.labels.members : AST[]
>this.labels : ASTList
>this : 本体
>labels : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字

                for (var i = 0; i < labelsLen; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < labelsLen : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>labelsLen : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                    this.labels.members[i].emit(emitter, tokenId, startLine);
>this.labels.members[i].emit(emitter, tokenId, startLine) : 无值
>类型别名 :=> 无值
>this.labels.members[i].emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>this.labels.members[i] : AST
>this.labels.members : AST[]
>this.labels : ASTList
>this : 本体
>labels : ASTList
>members : AST[]
>i : 数字
>类型别名 :=> 数字
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>tokenId : 任意
>类型别名 :=> 任意
>startLine : 真假
>类型别名 :=> 真假
                }
            }
            this.stmt.emit(emitter, tokenId, true);
>this.stmt.emit(emitter, tokenId, true) : 无值
>类型别名 :=> 无值
>this.stmt.emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>this.stmt : AST
>this : 本体
>stmt : AST
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>tokenId : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            typeFlow.typeCheck(this.labels);
>typeFlow.typeCheck(this.labels) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.labels : ASTList
>this : 本体
>labels : ASTList

            this.stmt = this.stmt.typeCheck(typeFlow);
>this.stmt = this.stmt.typeCheck(typeFlow) : 任意
>类型别名 :=> 任意
>this.stmt : AST
>this : 本体
>stmt : AST
>this.stmt.typeCheck(typeFlow) : 任意
>类型别名 :=> 任意
>this.stmt.typeCheck : (typeFlow: 任意) => 任意
>this.stmt : AST
>this : 本体
>stmt : AST
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }

        public addToControlFlow(context: ControlFlowContext): void {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            var beforeBB = context.current;
>beforeBB : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            var bb = new BasicBlock();
>bb : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            context.current = bb;
>context.current = bb : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>bb : 任意
>类型别名 :=> 任意

            beforeBB.addSuccessor(bb);
>beforeBB.addSuccessor(bb) : 任意
>类型别名 :=> 任意
>beforeBB.addSuccessor : 任意
>类型别名 :=> 任意
>beforeBB : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>bb : 任意
>类型别名 :=> 任意
        }
    }

    export class Block extends Statement {
>Block : Block
>Statement : Statement

        constructor (public statements: ASTList,
>statements : ASTList
>ASTList : ASTList

                     public isStatementBlock: boolean) {
>isStatementBlock : 真假
>类型别名 :=> 真假

            super(NodeType.Block);
>super(NodeType.Block) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.Block : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Block : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            if (this.isStatementBlock) {
>this.isStatementBlock : 真假
>类型别名 :=> 真假
>this : 本体
>isStatementBlock : 真假
>类型别名 :=> 真假

                emitter.writeLineToOutput(" {");
>emitter.writeLineToOutput(" {") : 任意
>类型别名 :=> 任意
>emitter.writeLineToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeLineToOutput : 任意
>类型别名 :=> 任意
>" {" : " {"

                emitter.indenter.increaseIndent();
>emitter.indenter.increaseIndent() : 任意
>类型别名 :=> 任意
>emitter.indenter.increaseIndent : 任意
>类型别名 :=> 任意
>emitter.indenter : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>indenter : 任意
>类型别名 :=> 任意
>increaseIndent : 任意
>类型别名 :=> 任意

            } else {
                emitter.setInVarBlock(this.statements.members.length);
>emitter.setInVarBlock(this.statements.members.length) : 任意
>类型别名 :=> 任意
>emitter.setInVarBlock : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInVarBlock : 任意
>类型别名 :=> 任意
>this.statements.members.length : 数字
>类型别名 :=> 数字
>this.statements.members : AST[]
>this.statements : ASTList
>this : 本体
>statements : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字
            }
            var temp = emitter.setInObjectLiteral(false);
>temp : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral(false) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            if (this.statements) {
>this.statements : ASTList
>this : 本体
>statements : ASTList

                emitter.emitJavascriptList(this.statements, null, TokenID.Semicolon, true, false, false);
>emitter.emitJavascriptList(this.statements, null, TokenID.Semicolon, true, false, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptList : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptList : 任意
>类型别名 :=> 任意
>this.statements : ASTList
>this : 本体
>statements : ASTList
>null : 空值
>类型别名 :=> 空值
>TokenID.Semicolon : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Semicolon : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假
            }
            if (this.isStatementBlock) {
>this.isStatementBlock : 真假
>类型别名 :=> 真假
>this : 本体
>isStatementBlock : 真假
>类型别名 :=> 真假

                emitter.indenter.decreaseIndent();
>emitter.indenter.decreaseIndent() : 任意
>类型别名 :=> 任意
>emitter.indenter.decreaseIndent : 任意
>类型别名 :=> 任意
>emitter.indenter : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>indenter : 任意
>类型别名 :=> 任意
>decreaseIndent : 任意
>类型别名 :=> 任意

                emitter.emitIndent();
>emitter.emitIndent() : 任意
>类型别名 :=> 任意
>emitter.emitIndent : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitIndent : 任意
>类型别名 :=> 任意

                emitter.writeToOutput("}");
>emitter.writeToOutput("}") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"}" : "}"
            }
            emitter.setInObjectLiteral(temp);
>emitter.setInObjectLiteral(temp) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>temp : 任意
>类型别名 :=> 任意

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public addToControlFlow(context: ControlFlowContext) {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            var afterIfNeeded = new BasicBlock();
>afterIfNeeded : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            context.pushStatement(this, context.current, afterIfNeeded);
>context.pushStatement(this, context.current, afterIfNeeded) : 任意
>类型别名 :=> 任意
>context.pushStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>pushStatement : 任意
>类型别名 :=> 任意
>this : 本体
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>afterIfNeeded : 任意
>类型别名 :=> 任意

            if (this.statements) {
>this.statements : ASTList
>this : 本体
>statements : ASTList

                context.walk(this.statements, this);
>context.walk(this.statements, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.statements : ASTList
>this : 本体
>statements : ASTList
>this : 本体
            }
            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            context.popStatement();
>context.popStatement() : 任意
>类型别名 :=> 任意
>context.popStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>popStatement : 任意
>类型别名 :=> 任意

            if (afterIfNeeded.predecessors.length > 0) {
>afterIfNeeded.predecessors.length > 0 : 真假
>类型别名 :=> 真假
>afterIfNeeded.predecessors.length : 任意
>类型别名 :=> 任意
>afterIfNeeded.predecessors : 任意
>类型别名 :=> 任意
>afterIfNeeded : 任意
>类型别名 :=> 任意
>predecessors : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0

                context.current.addSuccessor(afterIfNeeded);
>context.current.addSuccessor(afterIfNeeded) : 任意
>类型别名 :=> 任意
>context.current.addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterIfNeeded : 任意
>类型别名 :=> 任意

                context.current = afterIfNeeded;
>context.current = afterIfNeeded : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>afterIfNeeded : 任意
>类型别名 :=> 任意
            }
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            if (!typeFlow.checker.styleSettings.emptyBlocks) {
>!typeFlow.checker.styleSettings.emptyBlocks : 真假
>类型别名 :=> 真假
>typeFlow.checker.styleSettings.emptyBlocks : 任意
>类型别名 :=> 任意
>typeFlow.checker.styleSettings : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>styleSettings : 任意
>类型别名 :=> 任意
>emptyBlocks : 任意
>类型别名 :=> 任意

                if ((this.statements === null) || (this.statements.members.length == 0)) {
>(this.statements === null) || (this.statements.members.length == 0) : 真假
>类型别名 :=> 真假
>(this.statements === null) : 真假
>类型别名 :=> 真假
>this.statements === null : 真假
>类型别名 :=> 真假
>this.statements : ASTList
>this : 本体
>statements : ASTList
>null : 空值
>类型别名 :=> 空值
>(this.statements.members.length == 0) : 真假
>类型别名 :=> 真假
>this.statements.members.length == 0 : 真假
>类型别名 :=> 真假
>this.statements.members.length : 数字
>类型别名 :=> 数字
>this.statements.members : AST[]
>this.statements : ASTList
>this : 本体
>statements : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字
>0 : 0

                    typeFlow.checker.errorReporter.styleError(this, "empty block");
>typeFlow.checker.errorReporter.styleError(this, "empty block") : 任意
>类型别名 :=> 任意
>typeFlow.checker.errorReporter.styleError : 任意
>类型别名 :=> 任意
>typeFlow.checker.errorReporter : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>errorReporter : 任意
>类型别名 :=> 任意
>styleError : 任意
>类型别名 :=> 任意
>this : 本体
>"empty block" : "empty block"
                }
            }

            typeFlow.typeCheck(this.statements);
>typeFlow.typeCheck(this.statements) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.statements : ASTList
>this : 本体
>statements : ASTList

            return this;
>this : 本体
        }
    }

    export class Jump extends Statement {
>Jump : Jump
>Statement : Statement

        public target: string = null;
>target : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

        public hasExplicitTarget() { return (this.target); }
>hasExplicitTarget : () => 文字
>(this.target) : 文字
>类型别名 :=> 文字
>this.target : 文字
>类型别名 :=> 文字
>this : 本体
>target : 文字
>类型别名 :=> 文字

        public resolvedTarget: Statement = null;
>resolvedTarget : Statement
>Statement : Statement
>null : 空值
>类型别名 :=> 空值

        constructor (nodeType: NodeType) {
>nodeType : 任意
>类型别名 :=> 任意
>NodeType : No type information available!

            super(nodeType);
>super(nodeType) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>nodeType : 任意
>类型别名 :=> 任意
        }

        public setResolvedTarget(parser: Parser, stmt: Statement): boolean {
>setResolvedTarget : (parser: 任意, stmt: Statement) => 真假
>parser : 任意
>类型别名 :=> 任意
>Parser : No type information available!
>stmt : Statement
>Statement : Statement

            if (stmt.isLoop()) {
>stmt.isLoop() : 真假
>类型别名 :=> 真假
>stmt.isLoop : () => 真假
>stmt : Statement
>isLoop : () => 真假

                this.resolvedTarget = stmt;
>this.resolvedTarget = stmt : Statement
>this.resolvedTarget : Statement
>this : 本体
>resolvedTarget : Statement
>stmt : Statement

                return true;
>true : 为真
>类型别名 :=> 为真
            }
            if (this.nodeType === NodeType.Continue) {
>this.nodeType === NodeType.Continue : 真假
>类型别名 :=> 真假
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Continue : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Continue : 任意
>类型别名 :=> 任意

                parser.reportParseError("continue statement applies only to loops");
>parser.reportParseError("continue statement applies only to loops") : 任意
>类型别名 :=> 任意
>parser.reportParseError : 任意
>类型别名 :=> 任意
>parser : 任意
>类型别名 :=> 任意
>reportParseError : 任意
>类型别名 :=> 任意
>"continue statement applies only to loops" : "continue statement applies only to loops"

                return false;
>false : 为假
>类型别名 :=> 为假
            }
            else {
                if ((stmt.nodeType == NodeType.Switch) || this.hasExplicitTarget()) {
>(stmt.nodeType == NodeType.Switch) || this.hasExplicitTarget() : 文字 | 为真
>(stmt.nodeType == NodeType.Switch) : 真假
>类型别名 :=> 真假
>stmt.nodeType == NodeType.Switch : 真假
>类型别名 :=> 真假
>stmt.nodeType : 任意
>类型别名 :=> 任意
>stmt : Statement
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Switch : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Switch : 任意
>类型别名 :=> 任意
>this.hasExplicitTarget() : 文字
>类型别名 :=> 文字
>this.hasExplicitTarget : () => 文字
>this : 本体
>hasExplicitTarget : () => 文字

                    this.resolvedTarget = stmt;
>this.resolvedTarget = stmt : Statement
>this.resolvedTarget : Statement
>this : 本体
>resolvedTarget : Statement
>stmt : Statement

                    return true;
>true : 为真
>类型别名 :=> 为真
                }
                else {
                    parser.reportParseError("break statement with no label can apply only to a loop or switch statement");
>parser.reportParseError("break statement with no label can apply only to a loop or switch statement") : 任意
>类型别名 :=> 任意
>parser.reportParseError : 任意
>类型别名 :=> 任意
>parser : 任意
>类型别名 :=> 任意
>reportParseError : 任意
>类型别名 :=> 任意
>"break statement with no label can apply only to a loop or switch statement" : "break statement with no label can apply only to a loop or switch statement"

                    return false;
>false : 为假
>类型别名 :=> 为假
                }
            }
        }

        public addToControlFlow(context: ControlFlowContext): void {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            super.addToControlFlow(context);
>super.addToControlFlow(context) : 无值
>类型别名 :=> 无值
>super.addToControlFlow : (context: 任意) => 无值
>super : Statement
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意

            context.unconditionalBranch(this.resolvedTarget, (this.nodeType == NodeType.Continue));
>context.unconditionalBranch(this.resolvedTarget, (this.nodeType == NodeType.Continue)) : 任意
>类型别名 :=> 任意
>context.unconditionalBranch : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>unconditionalBranch : 任意
>类型别名 :=> 任意
>this.resolvedTarget : Statement
>this : 本体
>resolvedTarget : Statement
>(this.nodeType == NodeType.Continue) : 真假
>类型别名 :=> 真假
>this.nodeType == NodeType.Continue : 真假
>类型别名 :=> 真假
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Continue : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Continue : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            if (this.nodeType == NodeType.Break) {
>this.nodeType == NodeType.Break : 真假
>类型别名 :=> 真假
>this.nodeType : 任意
>类型别名 :=> 任意
>this : 本体
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Break : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Break : 任意
>类型别名 :=> 任意

                emitter.writeToOutput("break");
>emitter.writeToOutput("break") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"break" : "break"
            }
            else {
                emitter.writeToOutput("continue");
>emitter.writeToOutput("continue") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"continue" : "continue"
            }
            if (this.hasExplicitTarget()) {
>this.hasExplicitTarget() : 文字
>类型别名 :=> 文字
>this.hasExplicitTarget : () => 文字
>this : 本体
>hasExplicitTarget : () => 文字

                emitter.writeToOutput(" " + this.target);
>emitter.writeToOutput(" " + this.target) : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>" " + this.target : 文字
>类型别名 :=> 文字
>" " : " "
>this.target : 文字
>类型别名 :=> 文字
>this : 本体
>target : 文字
>类型别名 :=> 文字
            }
            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.writeToOutput(";");
>emitter.writeToOutput(";") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>";" : ";"

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class WhileStatement extends Statement {
>WhileStatement : WhileStatement
>Statement : Statement

        public body: AST = null;
>body : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        constructor (public cond: AST) {
>cond : AST
>AST : AST

            super(NodeType.While);
>super(NodeType.While) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.While : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>While : 任意
>类型别名 :=> 任意
        }

        public isLoop() { return true; }
>isLoop : () => 真假
>true : 为真
>类型别名 :=> 为真

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            var temp = emitter.setInObjectLiteral(false);
>temp : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral(false) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput("while(");
>emitter.writeToOutput("while(") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"while(" : "while("

            emitter.emitJavascript(this.cond, TokenID.While, false);
>emitter.emitJavascript(this.cond, TokenID.While, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.cond : AST
>this : 本体
>cond : AST
>TokenID.While : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>While : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput(")");
>emitter.writeToOutput(")") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>")" : ")"

            emitter.emitJavascriptStatements(this.body, false, false);
>emitter.emitJavascriptStatements(this.body, false, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptStatements : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptStatements : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>false : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假

            emitter.setInObjectLiteral(temp);
>emitter.setInObjectLiteral(temp) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>temp : 任意
>类型别名 :=> 任意

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckWhile(this);
>typeFlow.typeCheckWhile(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckWhile : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckWhile : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public addToControlFlow(context: ControlFlowContext): void {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            var loopHeader = context.current;
>loopHeader : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            var loopStart = new BasicBlock();
>loopStart : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            var afterLoop = new BasicBlock();
>afterLoop : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            loopHeader.addSuccessor(loopStart);
>loopHeader.addSuccessor(loopStart) : 任意
>类型别名 :=> 任意
>loopHeader.addSuccessor : 任意
>类型别名 :=> 任意
>loopHeader : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

            context.current = loopStart;
>context.current = loopStart : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

            context.addContent(this.cond);
>context.addContent(this.cond) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this.cond : AST
>this : 本体
>cond : AST

            var condBlock = context.current;
>condBlock : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            var targetInfo: ITargetInfo = null;
>targetInfo : 任意
>类型别名 :=> 任意
>ITargetInfo : No type information available!
>null : 空值
>类型别名 :=> 空值

            if (this.body) {
>this.body : AST
>this : 本体
>body : AST

                context.current = new BasicBlock();
>context.current = new BasicBlock() : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

                condBlock.addSuccessor(context.current);
>condBlock.addSuccessor(context.current) : 任意
>类型别名 :=> 任意
>condBlock.addSuccessor : 任意
>类型别名 :=> 任意
>condBlock : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

                context.pushStatement(this, loopStart, afterLoop);
>context.pushStatement(this, loopStart, afterLoop) : 任意
>类型别名 :=> 任意
>context.pushStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>pushStatement : 任意
>类型别名 :=> 任意
>this : 本体
>loopStart : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意

                context.walk(this.body, this);
>context.walk(this.body, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>this : 本体

                targetInfo = context.popStatement();
>targetInfo = context.popStatement() : 任意
>类型别名 :=> 任意
>targetInfo : 任意
>类型别名 :=> 任意
>context.popStatement() : 任意
>类型别名 :=> 任意
>context.popStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>popStatement : 任意
>类型别名 :=> 任意
            }
            if (!(context.noContinuation)) {
>!(context.noContinuation) : 真假
>类型别名 :=> 真假
>(context.noContinuation) : 任意
>类型别名 :=> 任意
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意

                var loopEnd = context.current;
>loopEnd : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

                loopEnd.addSuccessor(loopStart);
>loopEnd.addSuccessor(loopStart) : 任意
>类型别名 :=> 任意
>loopEnd.addSuccessor : 任意
>类型别名 :=> 任意
>loopEnd : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意
            }
            context.current = afterLoop;
>context.current = afterLoop : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意

            condBlock.addSuccessor(afterLoop);
>condBlock.addSuccessor(afterLoop) : 任意
>类型别名 :=> 任意
>condBlock.addSuccessor : 任意
>类型别名 :=> 任意
>condBlock : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意

            // TODO: check for while (true) and then only continue if afterLoop has predecessors
            context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class DoWhileStatement extends Statement {
>DoWhileStatement : DoWhileStatement
>Statement : Statement

        public body: AST = null;
>body : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        public whileAST: AST = null;
>whileAST : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        public cond: AST = null;
>cond : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        public isLoop() { return true; }
>isLoop : () => 真假
>true : 为真
>类型别名 :=> 为真

        constructor () {
            super(NodeType.DoWhile);
>super(NodeType.DoWhile) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.DoWhile : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>DoWhile : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            var temp = emitter.setInObjectLiteral(false);
>temp : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral(false) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput("do");
>emitter.writeToOutput("do") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"do" : "do"

            emitter.emitJavascriptStatements(this.body, true, false);
>emitter.emitJavascriptStatements(this.body, true, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptStatements : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptStatements : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingStart(this.whileAST);
>emitter.recordSourceMappingStart(this.whileAST) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this.whileAST : AST
>this : 本体
>whileAST : AST

            emitter.writeToOutput("while");
>emitter.writeToOutput("while") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"while" : "while"

            emitter.recordSourceMappingEnd(this.whileAST);
>emitter.recordSourceMappingEnd(this.whileAST) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this.whileAST : AST
>this : 本体
>whileAST : AST

            emitter.writeToOutput('(');
>emitter.writeToOutput('(') : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>'(' : "("

            emitter.emitJavascript(this.cond, TokenID.CloseParen, false);
>emitter.emitJavascript(this.cond, TokenID.CloseParen, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.cond : AST
>this : 本体
>cond : AST
>TokenID.CloseParen : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>CloseParen : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput(")");
>emitter.writeToOutput(")") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>")" : ")"

            emitter.setInObjectLiteral(temp);
>emitter.setInObjectLiteral(temp) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>temp : 任意
>类型别名 :=> 任意

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckDoWhile(this);
>typeFlow.typeCheckDoWhile(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckDoWhile : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckDoWhile : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public addToControlFlow(context: ControlFlowContext): void {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            var loopHeader = context.current;
>loopHeader : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            var loopStart = new BasicBlock();
>loopStart : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            var afterLoop = new BasicBlock();
>afterLoop : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            loopHeader.addSuccessor(loopStart);
>loopHeader.addSuccessor(loopStart) : 任意
>类型别名 :=> 任意
>loopHeader.addSuccessor : 任意
>类型别名 :=> 任意
>loopHeader : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

            context.current = loopStart;
>context.current = loopStart : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

            var targetInfo: ITargetInfo = null;
>targetInfo : 任意
>类型别名 :=> 任意
>ITargetInfo : No type information available!
>null : 空值
>类型别名 :=> 空值

            if (this.body) {
>this.body : AST
>this : 本体
>body : AST

                context.pushStatement(this, loopStart, afterLoop);
>context.pushStatement(this, loopStart, afterLoop) : 任意
>类型别名 :=> 任意
>context.pushStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>pushStatement : 任意
>类型别名 :=> 任意
>this : 本体
>loopStart : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意

                context.walk(this.body, this);
>context.walk(this.body, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>this : 本体

                targetInfo = context.popStatement();
>targetInfo = context.popStatement() : 任意
>类型别名 :=> 任意
>targetInfo : 任意
>类型别名 :=> 任意
>context.popStatement() : 任意
>类型别名 :=> 任意
>context.popStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>popStatement : 任意
>类型别名 :=> 任意
            }
            if (!(context.noContinuation)) {
>!(context.noContinuation) : 真假
>类型别名 :=> 真假
>(context.noContinuation) : 任意
>类型别名 :=> 任意
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意

                var loopEnd = context.current;
>loopEnd : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

                loopEnd.addSuccessor(loopStart);
>loopEnd.addSuccessor(loopStart) : 任意
>类型别名 :=> 任意
>loopEnd.addSuccessor : 任意
>类型别名 :=> 任意
>loopEnd : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

                context.addContent(this.cond);
>context.addContent(this.cond) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this.cond : AST
>this : 本体
>cond : AST

                // TODO: check for while (true) 
                context.current = afterLoop;
>context.current = afterLoop : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意

                loopEnd.addSuccessor(afterLoop);
>loopEnd.addSuccessor(afterLoop) : 任意
>类型别名 :=> 任意
>loopEnd.addSuccessor : 任意
>类型别名 :=> 任意
>loopEnd : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意
            }
            else {
                context.addUnreachable(this.cond);
>context.addUnreachable(this.cond) : 任意
>类型别名 :=> 任意
>context.addUnreachable : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addUnreachable : 任意
>类型别名 :=> 任意
>this.cond : AST
>this : 本体
>cond : AST
            }
            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class IfStatement extends Statement {
>IfStatement : IfStatement
>Statement : Statement

        public thenBod: AST;
>thenBod : AST
>AST : AST

        public elseBod: AST = null;
>elseBod : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        public statement: ASTSpan = new ASTSpan();
>statement : ASTSpan
>ASTSpan : ASTSpan
>new ASTSpan() : ASTSpan
>ASTSpan : 类为 ASTSpan

        constructor (public cond: AST) {
>cond : AST
>AST : AST

            super(NodeType.If);
>super(NodeType.If) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.If : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>If : 任意
>类型别名 :=> 任意
        }

        public isCompoundStatement() { return true; }
>isCompoundStatement : () => 真假
>true : 为真
>类型别名 :=> 为真

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            var temp = emitter.setInObjectLiteral(false);
>temp : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral(false) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingStart(this.statement);
>emitter.recordSourceMappingStart(this.statement) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this.statement : ASTSpan
>this : 本体
>statement : ASTSpan

            emitter.writeToOutput("if(");
>emitter.writeToOutput("if(") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"if(" : "if("

            emitter.emitJavascript(this.cond, TokenID.If, false);
>emitter.emitJavascript(this.cond, TokenID.If, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.cond : AST
>this : 本体
>cond : AST
>TokenID.If : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>If : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput(")");
>emitter.writeToOutput(")") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>")" : ")"

            emitter.recordSourceMappingEnd(this.statement);
>emitter.recordSourceMappingEnd(this.statement) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this.statement : ASTSpan
>this : 本体
>statement : ASTSpan

            emitter.emitJavascriptStatements(this.thenBod, true, false);
>emitter.emitJavascriptStatements(this.thenBod, true, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptStatements : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptStatements : 任意
>类型别名 :=> 任意
>this.thenBod : AST
>this : 本体
>thenBod : AST
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

            if (this.elseBod) {
>this.elseBod : AST
>this : 本体
>elseBod : AST

                emitter.writeToOutput(" else");
>emitter.writeToOutput(" else") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>" else" : " else"

                emitter.emitJavascriptStatements(this.elseBod, true, true);
>emitter.emitJavascriptStatements(this.elseBod, true, true) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptStatements : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptStatements : 任意
>类型别名 :=> 任意
>this.elseBod : AST
>this : 本体
>elseBod : AST
>true : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真
            }
            emitter.setInObjectLiteral(temp);
>emitter.setInObjectLiteral(temp) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>temp : 任意
>类型别名 :=> 任意

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckIf(this);
>typeFlow.typeCheckIf(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckIf : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckIf : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public addToControlFlow(context: ControlFlowContext): void {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            this.cond.addToControlFlow(context);
>this.cond.addToControlFlow(context) : 无值
>类型别名 :=> 无值
>this.cond.addToControlFlow : (context: 任意) => 无值
>this.cond : AST
>this : 本体
>cond : AST
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意

            var afterIf = new BasicBlock();
>afterIf : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            var beforeIf = context.current;
>beforeIf : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            context.pushStatement(this, beforeIf, afterIf);
>context.pushStatement(this, beforeIf, afterIf) : 任意
>类型别名 :=> 任意
>context.pushStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>pushStatement : 任意
>类型别名 :=> 任意
>this : 本体
>beforeIf : 任意
>类型别名 :=> 任意
>afterIf : 任意
>类型别名 :=> 任意

            var hasContinuation = false;
>hasContinuation : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

            context.current = new BasicBlock();
>context.current = new BasicBlock() : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            beforeIf.addSuccessor(context.current);
>beforeIf.addSuccessor(context.current) : 任意
>类型别名 :=> 任意
>beforeIf.addSuccessor : 任意
>类型别名 :=> 任意
>beforeIf : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            context.walk(this.thenBod, this);
>context.walk(this.thenBod, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.thenBod : AST
>this : 本体
>thenBod : AST
>this : 本体

            if (!context.noContinuation) {
>!context.noContinuation : 真假
>类型别名 :=> 真假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意

                hasContinuation = true;
>hasContinuation = true : 为真
>类型别名 :=> 为真
>hasContinuation : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

                context.current.addSuccessor(afterIf);
>context.current.addSuccessor(afterIf) : 任意
>类型别名 :=> 任意
>context.current.addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterIf : 任意
>类型别名 :=> 任意
            }
            if (this.elseBod) {
>this.elseBod : AST
>this : 本体
>elseBod : AST

                // current block will be thenBod
                context.current = new BasicBlock();
>context.current = new BasicBlock() : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

                context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                beforeIf.addSuccessor(context.current);
>beforeIf.addSuccessor(context.current) : 任意
>类型别名 :=> 任意
>beforeIf.addSuccessor : 任意
>类型别名 :=> 任意
>beforeIf : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

                context.walk(this.elseBod, this);
>context.walk(this.elseBod, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.elseBod : AST
>this : 本体
>elseBod : AST
>this : 本体

                if (!context.noContinuation) {
>!context.noContinuation : 真假
>类型别名 :=> 真假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意

                    hasContinuation = true;
>hasContinuation = true : 为真
>类型别名 :=> 为真
>hasContinuation : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

                    context.current.addSuccessor(afterIf);
>context.current.addSuccessor(afterIf) : 任意
>类型别名 :=> 任意
>context.current.addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterIf : 任意
>类型别名 :=> 任意
                }
                else {
                    // thenBod created continuation for if statement
                    if (hasContinuation) {
>hasContinuation : 真假
>类型别名 :=> 真假

                        context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
                    }
                }
            }
            else {
                beforeIf.addSuccessor(afterIf);
>beforeIf.addSuccessor(afterIf) : 任意
>类型别名 :=> 任意
>beforeIf.addSuccessor : 任意
>类型别名 :=> 任意
>beforeIf : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterIf : 任意
>类型别名 :=> 任意

                context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                hasContinuation = true;
>hasContinuation = true : 为真
>类型别名 :=> 为真
>hasContinuation : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
            }
            var targetInfo = context.popStatement();
>targetInfo : 任意
>类型别名 :=> 任意
>context.popStatement() : 任意
>类型别名 :=> 任意
>context.popStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>popStatement : 任意
>类型别名 :=> 任意

            if (afterIf.predecessors.length > 0) {
>afterIf.predecessors.length > 0 : 真假
>类型别名 :=> 真假
>afterIf.predecessors.length : 任意
>类型别名 :=> 任意
>afterIf.predecessors : 任意
>类型别名 :=> 任意
>afterIf : 任意
>类型别名 :=> 任意
>predecessors : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0

                context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                hasContinuation = true;
>hasContinuation = true : 为真
>类型别名 :=> 为真
>hasContinuation : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
            }
            if (hasContinuation) {
>hasContinuation : 真假
>类型别名 :=> 真假

                context.current = afterIf;
>context.current = afterIf : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>afterIf : 任意
>类型别名 :=> 任意
            }
            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class ReturnStatement extends Statement {
>ReturnStatement : ReturnStatement
>Statement : Statement

        public returnExpression: AST = null;
>returnExpression : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        constructor () {
            super(NodeType.Return);
>super(NodeType.Return) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.Return : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Return : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            var temp = emitter.setInObjectLiteral(false);
>temp : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral(false) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            if (this.returnExpression) {
>this.returnExpression : AST
>this : 本体
>returnExpression : AST

                emitter.writeToOutput("return ");
>emitter.writeToOutput("return ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"return " : "return "

                emitter.emitJavascript(this.returnExpression, TokenID.Semicolon, false);
>emitter.emitJavascript(this.returnExpression, TokenID.Semicolon, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.returnExpression : AST
>this : 本体
>returnExpression : AST
>TokenID.Semicolon : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Semicolon : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
            }
            else {
                emitter.writeToOutput("return;");
>emitter.writeToOutput("return;") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"return;" : "return;"
            }
            emitter.setInObjectLiteral(temp);
>emitter.setInObjectLiteral(temp) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>temp : 任意
>类型别名 :=> 任意

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public addToControlFlow(context: ControlFlowContext): void {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            super.addToControlFlow(context);
>super.addToControlFlow(context) : 无值
>类型别名 :=> 无值
>super.addToControlFlow : (context: 任意) => 无值
>super : Statement
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意

            context.returnStmt();
>context.returnStmt() : 任意
>类型别名 :=> 任意
>context.returnStmt : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>returnStmt : 任意
>类型别名 :=> 任意
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckReturn(this);
>typeFlow.typeCheckReturn(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckReturn : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckReturn : 任意
>类型别名 :=> 任意
>this : 本体
        }
    }

    export class EndCode extends AST {
>EndCode : EndCode
>AST : AST

        constructor () {
            super(NodeType.EndCode);
>super(NodeType.EndCode) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>NodeType.EndCode : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>EndCode : 任意
>类型别名 :=> 任意
        }
    }

    export class ForInStatement extends Statement {
>ForInStatement : ForInStatement
>Statement : Statement

        constructor (public lval: AST, public obj: AST) {
>lval : AST
>AST : AST
>obj : AST
>AST : AST

            super(NodeType.ForIn);
>super(NodeType.ForIn) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.ForIn : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ForIn : 任意
>类型别名 :=> 任意

            if (this.lval && (this.lval.nodeType == NodeType.VarDecl)) {
>this.lval && (this.lval.nodeType == NodeType.VarDecl) : 真假
>类型别名 :=> 真假
>this.lval : AST
>this : 本体
>lval : AST
>(this.lval.nodeType == NodeType.VarDecl) : 真假
>类型别名 :=> 真假
>this.lval.nodeType == NodeType.VarDecl : 真假
>类型别名 :=> 真假
>this.lval.nodeType : 任意
>类型别名 :=> 任意
>this.lval : AST
>this : 本体
>lval : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.VarDecl : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>VarDecl : 任意
>类型别名 :=> 任意

                (<BoundDecl>this.lval).varFlags |= VarFlags.AutoInit;
>(<BoundDecl>this.lval).varFlags |= VarFlags.AutoInit : 数字
>类型别名 :=> 数字
>(<BoundDecl>this.lval).varFlags : 任意
>类型别名 :=> 任意
>(<BoundDecl>this.lval) : BoundDecl
><BoundDecl>this.lval : BoundDecl
>BoundDecl : BoundDecl
>this.lval : AST
>this : 本体
>lval : AST
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.AutoInit : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>AutoInit : 任意
>类型别名 :=> 任意
            }
        }
        public statement: ASTSpan = new ASTSpan();
>statement : ASTSpan
>ASTSpan : ASTSpan
>new ASTSpan() : ASTSpan
>ASTSpan : 类为 ASTSpan

        public body: AST;
>body : AST
>AST : AST

        public isLoop() { return true; }
>isLoop : () => 真假
>true : 为真
>类型别名 :=> 为真

        public isFiltered() {
>isFiltered : () => 真假

            if (this.body) {
>this.body : AST
>this : 本体
>body : AST

                var singleItem: AST = null;
>singleItem : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

                if (this.body.nodeType == NodeType.List) {
>this.body.nodeType == NodeType.List : 真假
>类型别名 :=> 真假
>this.body.nodeType : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.List : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>List : 任意
>类型别名 :=> 任意

                    var stmts = <ASTList>this.body;
>stmts : ASTList
><ASTList>this.body : ASTList
>ASTList : ASTList
>this.body : AST
>this : 本体
>body : AST

                    if (stmts.members.length == 1) {
>stmts.members.length == 1 : 真假
>类型别名 :=> 真假
>stmts.members.length : 数字
>类型别名 :=> 数字
>stmts.members : AST[]
>stmts : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字
>1 : 1

                        singleItem = stmts.members[0];
>singleItem = stmts.members[0] : AST
>singleItem : AST
>stmts.members[0] : AST
>stmts.members : AST[]
>stmts : ASTList
>members : AST[]
>0 : 0
                    }
                }
                else {
                    singleItem = this.body;
>singleItem = this.body : AST
>singleItem : AST
>this.body : AST
>this : 本体
>body : AST
                }
                // match template for filtering 'own' properties from obj
                if (singleItem !== null) {
>singleItem !== null : 真假
>类型别名 :=> 真假
>singleItem : AST
>null : 空值
>类型别名 :=> 空值

                    if (singleItem.nodeType == NodeType.Block) {
>singleItem.nodeType == NodeType.Block : 真假
>类型别名 :=> 真假
>singleItem.nodeType : 任意
>类型别名 :=> 任意
>singleItem : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Block : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Block : 任意
>类型别名 :=> 任意

                        var block = <Block>singleItem;
>block : Block
><Block>singleItem : Block
>Block : Block
>singleItem : AST

                        if ((block.statements !== null) && (block.statements.members.length == 1)) {
>(block.statements !== null) && (block.statements.members.length == 1) : 真假
>类型别名 :=> 真假
>(block.statements !== null) : 真假
>类型别名 :=> 真假
>block.statements !== null : 真假
>类型别名 :=> 真假
>block.statements : ASTList
>block : Block
>statements : ASTList
>null : 空值
>类型别名 :=> 空值
>(block.statements.members.length == 1) : 真假
>类型别名 :=> 真假
>block.statements.members.length == 1 : 真假
>类型别名 :=> 真假
>block.statements.members.length : 数字
>类型别名 :=> 数字
>block.statements.members : AST[]
>block.statements : ASTList
>block : Block
>statements : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字
>1 : 1

                            singleItem = block.statements.members[0];
>singleItem = block.statements.members[0] : AST
>singleItem : AST
>block.statements.members[0] : AST
>block.statements.members : AST[]
>block.statements : ASTList
>block : Block
>statements : ASTList
>members : AST[]
>0 : 0
                        }
                    }
                    if (singleItem.nodeType == NodeType.If) {
>singleItem.nodeType == NodeType.If : 真假
>类型别名 :=> 真假
>singleItem.nodeType : 任意
>类型别名 :=> 任意
>singleItem : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.If : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>If : 任意
>类型别名 :=> 任意

                        var cond = (<IfStatement>singleItem).cond;
>cond : AST
>(<IfStatement>singleItem).cond : AST
>(<IfStatement>singleItem) : IfStatement
><IfStatement>singleItem : IfStatement
>IfStatement : IfStatement
>singleItem : AST
>cond : AST

                        if (cond.nodeType == NodeType.Call) {
>cond.nodeType == NodeType.Call : 真假
>类型别名 :=> 真假
>cond.nodeType : 任意
>类型别名 :=> 任意
>cond : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Call : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Call : 任意
>类型别名 :=> 任意

                            var target = (<CallExpression>cond).target;
>target : AST
>(<CallExpression>cond).target : AST
>(<CallExpression>cond) : CallExpression
><CallExpression>cond : CallExpression
>CallExpression : CallExpression
>cond : AST
>target : AST

                            if (target.nodeType == NodeType.Dot) {
>target.nodeType == NodeType.Dot : 真假
>类型别名 :=> 真假
>target.nodeType : 任意
>类型别名 :=> 任意
>target : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Dot : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Dot : 任意
>类型别名 :=> 任意

                                var binex = <BinaryExpression>target;
>binex : BinaryExpression
><BinaryExpression>target : BinaryExpression
>BinaryExpression : BinaryExpression
>target : AST

                                if ((binex.operand1.nodeType == NodeType.Name) &&
>(binex.operand1.nodeType == NodeType.Name) &&                                    (this.obj.nodeType == NodeType.Name) &&                                    ((<Identifier>binex.operand1).actualText == (<Identifier>this.obj).actualText) : 真假
>类型别名 :=> 真假
>(binex.operand1.nodeType == NodeType.Name) &&                                    (this.obj.nodeType == NodeType.Name) : 真假
>类型别名 :=> 真假
>(binex.operand1.nodeType == NodeType.Name) : 真假
>类型别名 :=> 真假
>binex.operand1.nodeType == NodeType.Name : 真假
>类型别名 :=> 真假
>binex.operand1.nodeType : 任意
>类型别名 :=> 任意
>binex.operand1 : AST
>binex : BinaryExpression
>operand1 : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Name : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Name : 任意
>类型别名 :=> 任意

                                    (this.obj.nodeType == NodeType.Name) &&
>(this.obj.nodeType == NodeType.Name) : 真假
>类型别名 :=> 真假
>this.obj.nodeType == NodeType.Name : 真假
>类型别名 :=> 真假
>this.obj.nodeType : 任意
>类型别名 :=> 任意
>this.obj : AST
>this : 本体
>obj : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Name : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Name : 任意
>类型别名 :=> 任意

                                    ((<Identifier>binex.operand1).actualText == (<Identifier>this.obj).actualText)) {
>((<Identifier>binex.operand1).actualText == (<Identifier>this.obj).actualText) : 真假
>类型别名 :=> 真假
>(<Identifier>binex.operand1).actualText == (<Identifier>this.obj).actualText : 真假
>类型别名 :=> 真假
>(<Identifier>binex.operand1).actualText : 文字
>类型别名 :=> 文字
>(<Identifier>binex.operand1) : Identifier
><Identifier>binex.operand1 : Identifier
>Identifier : Identifier
>binex.operand1 : AST
>binex : BinaryExpression
>operand1 : AST
>actualText : 文字
>类型别名 :=> 文字
>(<Identifier>this.obj).actualText : 文字
>类型别名 :=> 文字
>(<Identifier>this.obj) : Identifier
><Identifier>this.obj : Identifier
>Identifier : Identifier
>this.obj : AST
>this : 本体
>obj : AST
>actualText : 文字
>类型别名 :=> 文字

                                    var prop = <Identifier>binex.operand2;
>prop : Identifier
><Identifier>binex.operand2 : Identifier
>Identifier : Identifier
>binex.operand2 : AST
>binex : BinaryExpression
>operand2 : AST

                                    if (prop.actualText == "hasOwnProperty") {
>prop.actualText == "hasOwnProperty" : 真假
>类型别名 :=> 真假
>prop.actualText : 文字
>类型别名 :=> 文字
>prop : Identifier
>actualText : 文字
>类型别名 :=> 文字
>"hasOwnProperty" : "hasOwnProperty"

                                        var args = (<CallExpression>cond).arguments;
>args : ASTList
>(<CallExpression>cond).arguments : ASTList
>(<CallExpression>cond) : CallExpression
><CallExpression>cond : CallExpression
>CallExpression : CallExpression
>cond : AST
>arguments : ASTList

                                        if ((args !== null) && (args.members.length == 1)) {
>(args !== null) && (args.members.length == 1) : 真假
>类型别名 :=> 真假
>(args !== null) : 真假
>类型别名 :=> 真假
>args !== null : 真假
>类型别名 :=> 真假
>args : ASTList
>null : 空值
>类型别名 :=> 空值
>(args.members.length == 1) : 真假
>类型别名 :=> 真假
>args.members.length == 1 : 真假
>类型别名 :=> 真假
>args.members.length : 数字
>类型别名 :=> 数字
>args.members : AST[]
>args : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字
>1 : 1

                                            var arg = args.members[0];
>arg : AST
>args.members[0] : AST
>args.members : AST[]
>args : ASTList
>members : AST[]
>0 : 0

                                            if ((arg.nodeType == NodeType.Name) &&
>(arg.nodeType == NodeType.Name) &&                                                 (this.lval.nodeType == NodeType.Name) : 真假
>类型别名 :=> 真假
>(arg.nodeType == NodeType.Name) : 真假
>类型别名 :=> 真假
>arg.nodeType == NodeType.Name : 真假
>类型别名 :=> 真假
>arg.nodeType : 任意
>类型别名 :=> 任意
>arg : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Name : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Name : 任意
>类型别名 :=> 任意

                                                 (this.lval.nodeType == NodeType.Name)) {
>(this.lval.nodeType == NodeType.Name) : 真假
>类型别名 :=> 真假
>this.lval.nodeType == NodeType.Name : 真假
>类型别名 :=> 真假
>this.lval.nodeType : 任意
>类型别名 :=> 任意
>this.lval : AST
>this : 本体
>lval : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Name : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Name : 任意
>类型别名 :=> 任意

                                                if (((<Identifier>this.lval).actualText) == (<Identifier>arg).actualText) {
>((<Identifier>this.lval).actualText) == (<Identifier>arg).actualText : 真假
>类型别名 :=> 真假
>((<Identifier>this.lval).actualText) : 文字
>类型别名 :=> 文字
>(<Identifier>this.lval).actualText : 文字
>类型别名 :=> 文字
>(<Identifier>this.lval) : Identifier
><Identifier>this.lval : Identifier
>Identifier : Identifier
>this.lval : AST
>this : 本体
>lval : AST
>actualText : 文字
>类型别名 :=> 文字
>(<Identifier>arg).actualText : 文字
>类型别名 :=> 文字
>(<Identifier>arg) : Identifier
><Identifier>arg : Identifier
>Identifier : Identifier
>arg : AST
>actualText : 文字
>类型别名 :=> 文字

                                                    return true;
>true : 为真
>类型别名 :=> 为真
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return false;
>false : 为假
>类型别名 :=> 为假
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            var temp = emitter.setInObjectLiteral(false);
>temp : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral(false) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingStart(this.statement);
>emitter.recordSourceMappingStart(this.statement) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this.statement : ASTSpan
>this : 本体
>statement : ASTSpan

            emitter.writeToOutput("for(");
>emitter.writeToOutput("for(") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"for(" : "for("

            emitter.emitJavascript(this.lval, TokenID.For, false);
>emitter.emitJavascript(this.lval, TokenID.For, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.lval : AST
>this : 本体
>lval : AST
>TokenID.For : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>For : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput(" in ");
>emitter.writeToOutput(" in ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>" in " : " in "

            emitter.emitJavascript(this.obj, TokenID.For, false);
>emitter.emitJavascript(this.obj, TokenID.For, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.obj : AST
>this : 本体
>obj : AST
>TokenID.For : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>For : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput(")");
>emitter.writeToOutput(")") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>")" : ")"

            emitter.recordSourceMappingEnd(this.statement);
>emitter.recordSourceMappingEnd(this.statement) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this.statement : ASTSpan
>this : 本体
>statement : ASTSpan

            emitter.emitJavascriptStatements(this.body, true, false);
>emitter.emitJavascriptStatements(this.body, true, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptStatements : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptStatements : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

            emitter.setInObjectLiteral(temp);
>emitter.setInObjectLiteral(temp) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>temp : 任意
>类型别名 :=> 任意

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            if (typeFlow.checker.styleSettings.forin) {
>typeFlow.checker.styleSettings.forin : 任意
>类型别名 :=> 任意
>typeFlow.checker.styleSettings : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>styleSettings : 任意
>类型别名 :=> 任意
>forin : 任意
>类型别名 :=> 任意

                if (!this.isFiltered()) {
>!this.isFiltered() : 真假
>类型别名 :=> 真假
>this.isFiltered() : 真假
>类型别名 :=> 真假
>this.isFiltered : () => 真假
>this : 本体
>isFiltered : () => 真假

                    typeFlow.checker.errorReporter.styleError(this, "no hasOwnProperty filter");
>typeFlow.checker.errorReporter.styleError(this, "no hasOwnProperty filter") : 任意
>类型别名 :=> 任意
>typeFlow.checker.errorReporter.styleError : 任意
>类型别名 :=> 任意
>typeFlow.checker.errorReporter : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>errorReporter : 任意
>类型别名 :=> 任意
>styleError : 任意
>类型别名 :=> 任意
>this : 本体
>"no hasOwnProperty filter" : "no hasOwnProperty filter"
                }
            }
            return typeFlow.typeCheckForIn(this);
>typeFlow.typeCheckForIn(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckForIn : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckForIn : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public addToControlFlow(context: ControlFlowContext): void {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            if (this.lval) {
>this.lval : AST
>this : 本体
>lval : AST

                context.addContent(this.lval);
>context.addContent(this.lval) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this.lval : AST
>this : 本体
>lval : AST
            }
            if (this.obj) {
>this.obj : AST
>this : 本体
>obj : AST

                context.addContent(this.obj);
>context.addContent(this.obj) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this.obj : AST
>this : 本体
>obj : AST
            }

            var loopHeader = context.current;
>loopHeader : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            var loopStart = new BasicBlock();
>loopStart : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            var afterLoop = new BasicBlock();
>afterLoop : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            loopHeader.addSuccessor(loopStart);
>loopHeader.addSuccessor(loopStart) : 任意
>类型别名 :=> 任意
>loopHeader.addSuccessor : 任意
>类型别名 :=> 任意
>loopHeader : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

            context.current = loopStart;
>context.current = loopStart : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

            if (this.body) {
>this.body : AST
>this : 本体
>body : AST

                context.pushStatement(this, loopStart, afterLoop);
>context.pushStatement(this, loopStart, afterLoop) : 任意
>类型别名 :=> 任意
>context.pushStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>pushStatement : 任意
>类型别名 :=> 任意
>this : 本体
>loopStart : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意

                context.walk(this.body, this);
>context.walk(this.body, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>this : 本体

                context.popStatement();
>context.popStatement() : 任意
>类型别名 :=> 任意
>context.popStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>popStatement : 任意
>类型别名 :=> 任意
            }
            if (!(context.noContinuation)) {
>!(context.noContinuation) : 真假
>类型别名 :=> 真假
>(context.noContinuation) : 任意
>类型别名 :=> 任意
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意

                var loopEnd = context.current;
>loopEnd : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

                loopEnd.addSuccessor(loopStart);
>loopEnd.addSuccessor(loopStart) : 任意
>类型别名 :=> 任意
>loopEnd.addSuccessor : 任意
>类型别名 :=> 任意
>loopEnd : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意
            }
            context.current = afterLoop;
>context.current = afterLoop : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意

            context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            loopHeader.addSuccessor(afterLoop);
>loopHeader.addSuccessor(afterLoop) : 任意
>类型别名 :=> 任意
>loopHeader.addSuccessor : 任意
>类型别名 :=> 任意
>loopHeader : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意

            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class ForStatement extends Statement {
>ForStatement : ForStatement
>Statement : Statement

        public cond: AST;
>cond : AST
>AST : AST

        public body: AST;
>body : AST
>AST : AST

        public incr: AST;
>incr : AST
>AST : AST

        constructor (public init: AST) {
>init : AST
>AST : AST

            super(NodeType.For);
>super(NodeType.For) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.For : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>For : 任意
>类型别名 :=> 任意
        }

        public isLoop() { return true; }
>isLoop : () => 真假
>true : 为真
>类型别名 :=> 为真

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            var temp = emitter.setInObjectLiteral(false);
>temp : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral(false) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput("for(");
>emitter.writeToOutput("for(") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"for(" : "for("

            if (this.init) {
>this.init : AST
>this : 本体
>init : AST

                if (this.init.nodeType != NodeType.List) {
>this.init.nodeType != NodeType.List : 真假
>类型别名 :=> 真假
>this.init.nodeType : 任意
>类型别名 :=> 任意
>this.init : AST
>this : 本体
>init : AST
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.List : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>List : 任意
>类型别名 :=> 任意

                    emitter.emitJavascript(this.init, TokenID.For, false);
>emitter.emitJavascript(this.init, TokenID.For, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.init : AST
>this : 本体
>init : AST
>TokenID.For : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>For : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
                }
                else {
                    emitter.setInVarBlock((<ASTList>this.init).members.length); 
>emitter.setInVarBlock((<ASTList>this.init).members.length) : 任意
>类型别名 :=> 任意
>emitter.setInVarBlock : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInVarBlock : 任意
>类型别名 :=> 任意
>(<ASTList>this.init).members.length : 数字
>类型别名 :=> 数字
>(<ASTList>this.init).members : AST[]
>(<ASTList>this.init) : ASTList
><ASTList>this.init : ASTList
>ASTList : ASTList
>this.init : AST
>this : 本体
>init : AST
>members : AST[]
>length : 数字
>类型别名 :=> 数字

                    emitter.emitJavascriptList(this.init, null, TokenID.For, false, false, false);
>emitter.emitJavascriptList(this.init, null, TokenID.For, false, false, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptList : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptList : 任意
>类型别名 :=> 任意
>this.init : AST
>this : 本体
>init : AST
>null : 空值
>类型别名 :=> 空值
>TokenID.For : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>For : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假
                }
            }
            emitter.writeToOutput("; ");
>emitter.writeToOutput("; ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"; " : "; "

            emitter.emitJavascript(this.cond, TokenID.For, false);
>emitter.emitJavascript(this.cond, TokenID.For, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.cond : AST
>this : 本体
>cond : AST
>TokenID.For : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>For : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput("; ");
>emitter.writeToOutput("; ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"; " : "; "

            emitter.emitJavascript(this.incr, TokenID.For, false);
>emitter.emitJavascript(this.incr, TokenID.For, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.incr : AST
>this : 本体
>incr : AST
>TokenID.For : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>For : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput(")");
>emitter.writeToOutput(")") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>")" : ")"

            emitter.emitJavascriptStatements(this.body, true, false);
>emitter.emitJavascriptStatements(this.body, true, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptStatements : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptStatements : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

            emitter.setInObjectLiteral(temp);
>emitter.setInObjectLiteral(temp) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>temp : 任意
>类型别名 :=> 任意

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckFor(this);
>typeFlow.typeCheckFor(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckFor : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckFor : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public addToControlFlow(context: ControlFlowContext): void {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            if (this.init) {
>this.init : AST
>this : 本体
>init : AST

                context.addContent(this.init);
>context.addContent(this.init) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this.init : AST
>this : 本体
>init : AST
            }
            var loopHeader = context.current;
>loopHeader : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            var loopStart = new BasicBlock();
>loopStart : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            var afterLoop = new BasicBlock();
>afterLoop : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            loopHeader.addSuccessor(loopStart);
>loopHeader.addSuccessor(loopStart) : 任意
>类型别名 :=> 任意
>loopHeader.addSuccessor : 任意
>类型别名 :=> 任意
>loopHeader : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

            context.current = loopStart;
>context.current = loopStart : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

            var condBlock: BasicBlock = null;
>condBlock : 任意
>类型别名 :=> 任意
>BasicBlock : No type information available!
>null : 空值
>类型别名 :=> 空值

            var continueTarget = loopStart;
>continueTarget : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

            var incrBB: BasicBlock = null;
>incrBB : 任意
>类型别名 :=> 任意
>BasicBlock : No type information available!
>null : 空值
>类型别名 :=> 空值

            if (this.incr) {
>this.incr : AST
>this : 本体
>incr : AST

                incrBB = new BasicBlock();
>incrBB = new BasicBlock() : 任意
>类型别名 :=> 任意
>incrBB : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

                continueTarget = incrBB;
>continueTarget = incrBB : 任意
>类型别名 :=> 任意
>continueTarget : 任意
>类型别名 :=> 任意
>incrBB : 任意
>类型别名 :=> 任意
            }
            if (this.cond) {
>this.cond : AST
>this : 本体
>cond : AST

                condBlock = context.current;
>condBlock = context.current : 任意
>类型别名 :=> 任意
>condBlock : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

                context.addContent(this.cond);
>context.addContent(this.cond) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this.cond : AST
>this : 本体
>cond : AST

                context.current = new BasicBlock();
>context.current = new BasicBlock() : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

                condBlock.addSuccessor(context.current);
>condBlock.addSuccessor(context.current) : 任意
>类型别名 :=> 任意
>condBlock.addSuccessor : 任意
>类型别名 :=> 任意
>condBlock : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
            }
            var targetInfo: ITargetInfo = null;
>targetInfo : 任意
>类型别名 :=> 任意
>ITargetInfo : No type information available!
>null : 空值
>类型别名 :=> 空值

            if (this.body) {
>this.body : AST
>this : 本体
>body : AST

                context.pushStatement(this, continueTarget, afterLoop);
>context.pushStatement(this, continueTarget, afterLoop) : 任意
>类型别名 :=> 任意
>context.pushStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>pushStatement : 任意
>类型别名 :=> 任意
>this : 本体
>continueTarget : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意

                context.walk(this.body, this);
>context.walk(this.body, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>this : 本体

                targetInfo = context.popStatement();
>targetInfo = context.popStatement() : 任意
>类型别名 :=> 任意
>targetInfo : 任意
>类型别名 :=> 任意
>context.popStatement() : 任意
>类型别名 :=> 任意
>context.popStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>popStatement : 任意
>类型别名 :=> 任意
            }
            if (this.incr) {
>this.incr : AST
>this : 本体
>incr : AST

                if (context.noContinuation) {
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意

                    if (incrBB.predecessors.length == 0) {
>incrBB.predecessors.length == 0 : 真假
>类型别名 :=> 真假
>incrBB.predecessors.length : 任意
>类型别名 :=> 任意
>incrBB.predecessors : 任意
>类型别名 :=> 任意
>incrBB : 任意
>类型别名 :=> 任意
>predecessors : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0

                        context.addUnreachable(this.incr);
>context.addUnreachable(this.incr) : 任意
>类型别名 :=> 任意
>context.addUnreachable : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addUnreachable : 任意
>类型别名 :=> 任意
>this.incr : AST
>this : 本体
>incr : AST
                    }
                }
                else {
                    context.current.addSuccessor(incrBB);
>context.current.addSuccessor(incrBB) : 任意
>类型别名 :=> 任意
>context.current.addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>incrBB : 任意
>类型别名 :=> 任意

                    context.current = incrBB;
>context.current = incrBB : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>incrBB : 任意
>类型别名 :=> 任意

                    context.addContent(this.incr);
>context.addContent(this.incr) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this.incr : AST
>this : 本体
>incr : AST
                }
            }
            var loopEnd = context.current;
>loopEnd : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            if (!(context.noContinuation)) {
>!(context.noContinuation) : 真假
>类型别名 :=> 真假
>(context.noContinuation) : 任意
>类型别名 :=> 任意
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意

                loopEnd.addSuccessor(loopStart);
>loopEnd.addSuccessor(loopStart) : 任意
>类型别名 :=> 任意
>loopEnd.addSuccessor : 任意
>类型别名 :=> 任意
>loopEnd : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>loopStart : 任意
>类型别名 :=> 任意

            }
            if (condBlock) {
>condBlock : 任意
>类型别名 :=> 任意

                condBlock.addSuccessor(afterLoop);
>condBlock.addSuccessor(afterLoop) : 任意
>类型别名 :=> 任意
>condBlock.addSuccessor : 任意
>类型别名 :=> 任意
>condBlock : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意

                context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
            }
            if (afterLoop.predecessors.length > 0) {
>afterLoop.predecessors.length > 0 : 真假
>类型别名 :=> 真假
>afterLoop.predecessors.length : 任意
>类型别名 :=> 任意
>afterLoop.predecessors : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意
>predecessors : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0

                context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                context.current = afterLoop;
>context.current = afterLoop : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>afterLoop : 任意
>类型别名 :=> 任意
            }
            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class WithStatement extends Statement {
>WithStatement : WithStatement
>Statement : Statement

        public body: AST;
>body : AST
>AST : AST

        public isCompoundStatement() { return true; }
>isCompoundStatement : () => 真假
>true : 为真
>类型别名 :=> 为真

        public withSym: WithSymbol = null;
>withSym : 任意
>类型别名 :=> 任意
>WithSymbol : No type information available!
>null : 空值
>类型别名 :=> 空值

        constructor (public expr: AST) {
>expr : AST
>AST : AST

            super(NodeType.With);
>super(NodeType.With) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.With : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>With : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.writeToOutput("with (");
>emitter.writeToOutput("with (") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"with (" : "with ("

            if (this.expr) {
>this.expr : AST
>this : 本体
>expr : AST

                emitter.emitJavascript(this.expr, TokenID.With, false);
>emitter.emitJavascript(this.expr, TokenID.With, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.expr : AST
>this : 本体
>expr : AST
>TokenID.With : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>With : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
            }

            emitter.writeToOutput(")");
>emitter.writeToOutput(")") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>")" : ")"

            emitter.emitJavascriptStatements(this.body, true, false);
>emitter.emitJavascriptStatements(this.body, true, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptStatements : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptStatements : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 任意
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            return typeFlow.typeCheckWith(this);
>typeFlow.typeCheckWith(this) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheckWith : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheckWith : 任意
>类型别名 :=> 任意
>this : 本体
        }
    }

    export class SwitchStatement extends Statement {
>SwitchStatement : SwitchStatement
>Statement : Statement

        public caseList: ASTList;
>caseList : ASTList
>ASTList : ASTList

        public defaultCase: CaseStatement = null;
>defaultCase : CaseStatement
>CaseStatement : CaseStatement
>null : 空值
>类型别名 :=> 空值

        public statement: ASTSpan = new ASTSpan();
>statement : ASTSpan
>ASTSpan : ASTSpan
>new ASTSpan() : ASTSpan
>ASTSpan : 类为 ASTSpan

        constructor (public val: AST) {
>val : AST
>AST : AST

            super(NodeType.Switch);
>super(NodeType.Switch) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.Switch : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Switch : 任意
>类型别名 :=> 任意
        }

        public isCompoundStatement() { return true; }
>isCompoundStatement : () => 真假
>true : 为真
>类型别名 :=> 为真

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            var temp = emitter.setInObjectLiteral(false);
>temp : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral(false) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingStart(this.statement);
>emitter.recordSourceMappingStart(this.statement) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this.statement : ASTSpan
>this : 本体
>statement : ASTSpan

            emitter.writeToOutput("switch(");
>emitter.writeToOutput("switch(") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"switch(" : "switch("

            emitter.emitJavascript(this.val, TokenID.Identifier, false);
>emitter.emitJavascript(this.val, TokenID.Identifier, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.val : AST
>this : 本体
>val : AST
>TokenID.Identifier : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Identifier : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput(")"); 
>emitter.writeToOutput(")") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>")" : ")"

            emitter.recordSourceMappingEnd(this.statement);
>emitter.recordSourceMappingEnd(this.statement) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this.statement : ASTSpan
>this : 本体
>statement : ASTSpan

            emitter.writeLineToOutput(" {");
>emitter.writeLineToOutput(" {") : 任意
>类型别名 :=> 任意
>emitter.writeLineToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeLineToOutput : 任意
>类型别名 :=> 任意
>" {" : " {"

            emitter.indenter.increaseIndent();
>emitter.indenter.increaseIndent() : 任意
>类型别名 :=> 任意
>emitter.indenter.increaseIndent : 任意
>类型别名 :=> 任意
>emitter.indenter : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>indenter : 任意
>类型别名 :=> 任意
>increaseIndent : 任意
>类型别名 :=> 任意

            var casesLen = this.caseList.members.length;
>casesLen : 数字
>类型别名 :=> 数字
>this.caseList.members.length : 数字
>类型别名 :=> 数字
>this.caseList.members : AST[]
>this.caseList : ASTList
>this : 本体
>caseList : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字

            for (var i = 0; i < casesLen; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < casesLen : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>casesLen : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                var caseExpr = this.caseList.members[i];
>caseExpr : AST
>this.caseList.members[i] : AST
>this.caseList.members : AST[]
>this.caseList : ASTList
>this : 本体
>caseList : ASTList
>members : AST[]
>i : 数字
>类型别名 :=> 数字

                emitter.emitJavascript(caseExpr, TokenID.Case, true);
>emitter.emitJavascript(caseExpr, TokenID.Case, true) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>caseExpr : AST
>TokenID.Case : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Case : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真

                emitter.writeLineToOutput("");
>emitter.writeLineToOutput("") : 任意
>类型别名 :=> 任意
>emitter.writeLineToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeLineToOutput : 任意
>类型别名 :=> 任意
>"" : ""
            }
            emitter.indenter.decreaseIndent();
>emitter.indenter.decreaseIndent() : 任意
>类型别名 :=> 任意
>emitter.indenter.decreaseIndent : 任意
>类型别名 :=> 任意
>emitter.indenter : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>indenter : 任意
>类型别名 :=> 任意
>decreaseIndent : 任意
>类型别名 :=> 任意

            emitter.emitIndent();
>emitter.emitIndent() : 任意
>类型别名 :=> 任意
>emitter.emitIndent : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitIndent : 任意
>类型别名 :=> 任意

            emitter.writeToOutput("}");
>emitter.writeToOutput("}") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"}" : "}"

            emitter.setInObjectLiteral(temp);
>emitter.setInObjectLiteral(temp) : 任意
>类型别名 :=> 任意
>emitter.setInObjectLiteral : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>setInObjectLiteral : 任意
>类型别名 :=> 任意
>temp : 任意
>类型别名 :=> 任意

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            var len = this.caseList.members.length;
>len : 数字
>类型别名 :=> 数字
>this.caseList.members.length : 数字
>类型别名 :=> 数字
>this.caseList.members : AST[]
>this.caseList : ASTList
>this : 本体
>caseList : ASTList
>members : AST[]
>length : 数字
>类型别名 :=> 数字

            this.val = typeFlow.typeCheck(this.val);
>this.val = typeFlow.typeCheck(this.val) : 任意
>类型别名 :=> 任意
>this.val : AST
>this : 本体
>val : AST
>typeFlow.typeCheck(this.val) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.val : AST
>this : 本体
>val : AST

            for (var i = 0; i < len; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < len : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>len : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                this.caseList.members[i] = typeFlow.typeCheck(this.caseList.members[i]);
>this.caseList.members[i] = typeFlow.typeCheck(this.caseList.members[i]) : 任意
>类型别名 :=> 任意
>this.caseList.members[i] : AST
>this.caseList.members : AST[]
>this.caseList : ASTList
>this : 本体
>caseList : ASTList
>members : AST[]
>i : 数字
>类型别名 :=> 数字
>typeFlow.typeCheck(this.caseList.members[i]) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.caseList.members[i] : AST
>this.caseList.members : AST[]
>this.caseList : ASTList
>this : 本体
>caseList : ASTList
>members : AST[]
>i : 数字
>类型别名 :=> 数字
            }
            this.defaultCase = <CaseStatement>typeFlow.typeCheck(this.defaultCase);
>this.defaultCase = <CaseStatement>typeFlow.typeCheck(this.defaultCase) : CaseStatement
>this.defaultCase : CaseStatement
>this : 本体
>defaultCase : CaseStatement
><CaseStatement>typeFlow.typeCheck(this.defaultCase) : CaseStatement
>CaseStatement : CaseStatement
>typeFlow.typeCheck(this.defaultCase) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.defaultCase : CaseStatement
>this : 本体
>defaultCase : CaseStatement

            this.type = typeFlow.voidType;
>this.type = typeFlow.voidType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.voidType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>voidType : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }

        // if there are break statements that match this switch, then just link cond block with block after switch
        public addToControlFlow(context: ControlFlowContext) {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            var condBlock = context.current;
>condBlock : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            context.addContent(this.val);
>context.addContent(this.val) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this.val : AST
>this : 本体
>val : AST

            var execBlock = new BasicBlock();
>execBlock : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            var afterSwitch = new BasicBlock();
>afterSwitch : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            condBlock.addSuccessor(execBlock);
>condBlock.addSuccessor(execBlock) : 任意
>类型别名 :=> 任意
>condBlock.addSuccessor : 任意
>类型别名 :=> 任意
>condBlock : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>execBlock : 任意
>类型别名 :=> 任意

            context.pushSwitch(execBlock);
>context.pushSwitch(execBlock) : 任意
>类型别名 :=> 任意
>context.pushSwitch : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>pushSwitch : 任意
>类型别名 :=> 任意
>execBlock : 任意
>类型别名 :=> 任意

            context.current = execBlock;
>context.current = execBlock : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>execBlock : 任意
>类型别名 :=> 任意

            context.pushStatement(this, execBlock, afterSwitch);
>context.pushStatement(this, execBlock, afterSwitch) : 任意
>类型别名 :=> 任意
>context.pushStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>pushStatement : 任意
>类型别名 :=> 任意
>this : 本体
>execBlock : 任意
>类型别名 :=> 任意
>afterSwitch : 任意
>类型别名 :=> 任意

            context.walk(this.caseList, this);
>context.walk(this.caseList, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.caseList : ASTList
>this : 本体
>caseList : ASTList
>this : 本体

            context.popSwitch();
>context.popSwitch() : 任意
>类型别名 :=> 任意
>context.popSwitch : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>popSwitch : 任意
>类型别名 :=> 任意

            var targetInfo = context.popStatement();
>targetInfo : 任意
>类型别名 :=> 任意
>context.popStatement() : 任意
>类型别名 :=> 任意
>context.popStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>popStatement : 任意
>类型别名 :=> 任意

            var hasCondContinuation = (this.defaultCase == null);
>hasCondContinuation : 真假
>类型别名 :=> 真假
>(this.defaultCase == null) : 真假
>类型别名 :=> 真假
>this.defaultCase == null : 真假
>类型别名 :=> 真假
>this.defaultCase : CaseStatement
>this : 本体
>defaultCase : CaseStatement
>null : 空值
>类型别名 :=> 空值

            if (this.defaultCase == null) {
>this.defaultCase == null : 真假
>类型别名 :=> 真假
>this.defaultCase : CaseStatement
>this : 本体
>defaultCase : CaseStatement
>null : 空值
>类型别名 :=> 空值

                condBlock.addSuccessor(afterSwitch);
>condBlock.addSuccessor(afterSwitch) : 任意
>类型别名 :=> 任意
>condBlock.addSuccessor : 任意
>类型别名 :=> 任意
>condBlock : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterSwitch : 任意
>类型别名 :=> 任意
            }
            if (afterSwitch.predecessors.length > 0) {
>afterSwitch.predecessors.length > 0 : 真假
>类型别名 :=> 真假
>afterSwitch.predecessors.length : 任意
>类型别名 :=> 任意
>afterSwitch.predecessors : 任意
>类型别名 :=> 任意
>afterSwitch : 任意
>类型别名 :=> 任意
>predecessors : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0

                context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

                context.current = afterSwitch;
>context.current = afterSwitch : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>afterSwitch : 任意
>类型别名 :=> 任意
            }
            else {
                context.noContinuation = true;
>context.noContinuation = true : 为真
>类型别名 :=> 为真
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
            }
            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class CaseStatement extends Statement {
>CaseStatement : CaseStatement
>Statement : Statement

        public expr: AST = null;
>expr : AST
>AST : AST
>null : 空值
>类型别名 :=> 空值

        public body: ASTList;
>body : ASTList
>ASTList : ASTList

        constructor () {
            super(NodeType.Case);
>super(NodeType.Case) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.Case : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Case : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            if (this.expr) {
>this.expr : AST
>this : 本体
>expr : AST

                emitter.writeToOutput("case ");
>emitter.writeToOutput("case ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"case " : "case "

                emitter.emitJavascript(this.expr, TokenID.Identifier, false);
>emitter.emitJavascript(this.expr, TokenID.Identifier, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.expr : AST
>this : 本体
>expr : AST
>TokenID.Identifier : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Identifier : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
            }
            else {
                emitter.writeToOutput("default");
>emitter.writeToOutput("default") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"default" : "default"
            }
            emitter.writeToOutput(":");
>emitter.writeToOutput(":") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>":" : ":"

            emitter.emitJavascriptStatements(this.body, false, false);
>emitter.emitJavascriptStatements(this.body, false, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascriptStatements : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascriptStatements : 任意
>类型别名 :=> 任意
>this.body : ASTList
>this : 本体
>body : ASTList
>false : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            this.expr = typeFlow.typeCheck(this.expr);
>this.expr = typeFlow.typeCheck(this.expr) : 任意
>类型别名 :=> 任意
>this.expr : AST
>this : 本体
>expr : AST
>typeFlow.typeCheck(this.expr) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.expr : AST
>this : 本体
>expr : AST

            typeFlow.typeCheck(this.body);
>typeFlow.typeCheck(this.body) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.body : ASTList
>this : 本体
>body : ASTList

            this.type = typeFlow.voidType;
>this.type = typeFlow.voidType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.voidType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>voidType : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }

        // TODO: more reasoning about unreachable cases (such as duplicate literals as case expressions)
        // for now, assume all cases are reachable, regardless of whether some cases fall through
        public addToControlFlow(context: ControlFlowContext) {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            var execBlock = new BasicBlock();
>execBlock : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            var sw = context.currentSwitch[context.currentSwitch.length - 1];
>sw : 任意
>类型别名 :=> 任意
>context.currentSwitch[context.currentSwitch.length - 1] : 任意
>类型别名 :=> 任意
>context.currentSwitch : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>currentSwitch : 任意
>类型别名 :=> 任意
>context.currentSwitch.length - 1 : 数字
>类型别名 :=> 数字
>context.currentSwitch.length : 任意
>类型别名 :=> 任意
>context.currentSwitch : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>currentSwitch : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>1 : 1

            // TODO: fall-through from previous (+ to end of switch)
            if (this.expr) {
>this.expr : AST
>this : 本体
>expr : AST

                var exprBlock = new BasicBlock();
>exprBlock : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

                context.current = exprBlock;
>context.current = exprBlock : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>exprBlock : 任意
>类型别名 :=> 任意

                sw.addSuccessor(exprBlock);
>sw.addSuccessor(exprBlock) : 任意
>类型别名 :=> 任意
>sw.addSuccessor : 任意
>类型别名 :=> 任意
>sw : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>exprBlock : 任意
>类型别名 :=> 任意

                context.addContent(this.expr);
>context.addContent(this.expr) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this.expr : AST
>this : 本体
>expr : AST

                exprBlock.addSuccessor(execBlock);
>exprBlock.addSuccessor(execBlock) : 任意
>类型别名 :=> 任意
>exprBlock.addSuccessor : 任意
>类型别名 :=> 任意
>exprBlock : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>execBlock : 任意
>类型别名 :=> 任意
            }
            else {
                sw.addSuccessor(execBlock);
>sw.addSuccessor(execBlock) : 任意
>类型别名 :=> 任意
>sw.addSuccessor : 任意
>类型别名 :=> 任意
>sw : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>execBlock : 任意
>类型别名 :=> 任意
            }
            context.current = execBlock;
>context.current = execBlock : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>execBlock : 任意
>类型别名 :=> 任意

            if (this.body) {
>this.body : ASTList
>this : 本体
>body : ASTList

                context.walk(this.body, this);
>context.walk(this.body, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.body : ASTList
>this : 本体
>body : ASTList
>this : 本体
            }
            context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class TypeReference extends AST {
>TypeReference : TypeReference
>AST : AST

        constructor (public term: AST, public arrayCount: number) {
>term : AST
>AST : AST
>arrayCount : 数字
>类型别名 :=> 数字

            super(NodeType.TypeRef);
>super(NodeType.TypeRef) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>NodeType.TypeRef : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>TypeRef : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            throw new Error("should not emit a type ref");
>new Error("should not emit a type ref") : Error
>Error : ErrorConstructor
>"should not emit a type ref" : "should not emit a type ref"
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            var prevInTCTR = typeFlow.inTypeRefTypeCheck;
>prevInTCTR : 任意
>类型别名 :=> 任意
>typeFlow.inTypeRefTypeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>inTypeRefTypeCheck : 任意
>类型别名 :=> 任意

            typeFlow.inTypeRefTypeCheck = true;
>typeFlow.inTypeRefTypeCheck = true : 为真
>类型别名 :=> 为真
>typeFlow.inTypeRefTypeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>inTypeRefTypeCheck : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真

            var typeLink = getTypeLink(this, typeFlow.checker, true);
>typeLink : 任意
>类型别名 :=> 任意
>getTypeLink(this, typeFlow.checker, true) : 任意
>类型别名 :=> 任意
>getTypeLink : 任意
>类型别名 :=> 任意
>this : 本体
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真

            typeFlow.checker.resolveTypeLink(typeFlow.scope, typeLink, false);
>typeFlow.checker.resolveTypeLink(typeFlow.scope, typeLink, false) : 任意
>类型别名 :=> 任意
>typeFlow.checker.resolveTypeLink : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>resolveTypeLink : 任意
>类型别名 :=> 任意
>typeFlow.scope : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            if (this.term) {
>this.term : AST
>this : 本体
>term : AST

                typeFlow.typeCheck(this.term);
>typeFlow.typeCheck(this.term) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.term : AST
>this : 本体
>term : AST
            }

            typeFlow.checkForVoidConstructor(typeLink.type, this);
>typeFlow.checkForVoidConstructor(typeLink.type, this) : 任意
>类型别名 :=> 任意
>typeFlow.checkForVoidConstructor : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checkForVoidConstructor : 任意
>类型别名 :=> 任意
>typeLink.type : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>this : 本体

            this.type = typeLink.type;
>this.type = typeLink.type : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeLink.type : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意

            // in error recovery cases, there may not be a term
            if (this.term) {
>this.term : AST
>this : 本体
>term : AST

                this.term.type = this.type;
>this.term.type = this.type : 任意
>类型别名 :=> 任意
>this.term.type : 任意
>类型别名 :=> 任意
>this.term : AST
>this : 本体
>term : AST
>type : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
            }

            typeFlow.inTypeRefTypeCheck = prevInTCTR;
>typeFlow.inTypeRefTypeCheck = prevInTCTR : 任意
>类型别名 :=> 任意
>typeFlow.inTypeRefTypeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>inTypeRefTypeCheck : 任意
>类型别名 :=> 任意
>prevInTCTR : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }
    }

    export class TryFinally extends Statement {
>TryFinally : TryFinally
>Statement : Statement

        constructor (public tryNode: AST, public finallyNode: Finally) {
>tryNode : AST
>AST : AST
>finallyNode : Finally
>Finally : Finally

            super(NodeType.TryFinally);
>super(NodeType.TryFinally) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.TryFinally : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>TryFinally : 任意
>类型别名 :=> 任意
        }

        public isCompoundStatement() { return true; }
>isCompoundStatement : () => 真假
>true : 为真
>类型别名 :=> 为真

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitJavascript(this.tryNode, TokenID.Try, false);
>emitter.emitJavascript(this.tryNode, TokenID.Try, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.tryNode : AST
>this : 本体
>tryNode : AST
>TokenID.Try : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Try : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.emitJavascript(this.finallyNode, TokenID.Finally, false);
>emitter.emitJavascript(this.finallyNode, TokenID.Finally, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.finallyNode : Finally
>this : 本体
>finallyNode : Finally
>TokenID.Finally : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Finally : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            this.tryNode = typeFlow.typeCheck(this.tryNode);
>this.tryNode = typeFlow.typeCheck(this.tryNode) : 任意
>类型别名 :=> 任意
>this.tryNode : AST
>this : 本体
>tryNode : AST
>typeFlow.typeCheck(this.tryNode) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.tryNode : AST
>this : 本体
>tryNode : AST

            this.finallyNode = <Finally>typeFlow.typeCheck(this.finallyNode);
>this.finallyNode = <Finally>typeFlow.typeCheck(this.finallyNode) : Finally
>this.finallyNode : Finally
>this : 本体
>finallyNode : Finally
><Finally>typeFlow.typeCheck(this.finallyNode) : Finally
>Finally : Finally
>typeFlow.typeCheck(this.finallyNode) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.finallyNode : Finally
>this : 本体
>finallyNode : Finally

            this.type = typeFlow.voidType;
>this.type = typeFlow.voidType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.voidType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>voidType : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }

        public addToControlFlow(context: ControlFlowContext) {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            var afterFinally = new BasicBlock();
>afterFinally : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            context.walk(this.tryNode, this);
>context.walk(this.tryNode, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.tryNode : AST
>this : 本体
>tryNode : AST
>this : 本体

            var finBlock = new BasicBlock();
>finBlock : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            if (context.current) {
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

                context.current.addSuccessor(finBlock);
>context.current.addSuccessor(finBlock) : 任意
>类型别名 :=> 任意
>context.current.addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>finBlock : 任意
>类型别名 :=> 任意
            }
            context.current = finBlock;
>context.current = finBlock : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>finBlock : 任意
>类型别名 :=> 任意

            context.pushStatement(this, null, afterFinally);
>context.pushStatement(this, null, afterFinally) : 任意
>类型别名 :=> 任意
>context.pushStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>pushStatement : 任意
>类型别名 :=> 任意
>this : 本体
>null : 空值
>类型别名 :=> 空值
>afterFinally : 任意
>类型别名 :=> 任意

            context.walk(this.finallyNode, this);
>context.walk(this.finallyNode, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.finallyNode : Finally
>this : 本体
>finallyNode : Finally
>this : 本体

            if (!context.noContinuation && context.current) {
>!context.noContinuation && context.current : 任意
>类型别名 :=> 任意
>!context.noContinuation : 真假
>类型别名 :=> 真假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

                context.current.addSuccessor(afterFinally);
>context.current.addSuccessor(afterFinally) : 任意
>类型别名 :=> 任意
>context.current.addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterFinally : 任意
>类型别名 :=> 任意
            }
            if (afterFinally.predecessors.length > 0) {
>afterFinally.predecessors.length > 0 : 真假
>类型别名 :=> 真假
>afterFinally.predecessors.length : 任意
>类型别名 :=> 任意
>afterFinally.predecessors : 任意
>类型别名 :=> 任意
>afterFinally : 任意
>类型别名 :=> 任意
>predecessors : 任意
>类型别名 :=> 任意
>length : 任意
>类型别名 :=> 任意
>0 : 0

                context.current = afterFinally;
>context.current = afterFinally : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>afterFinally : 任意
>类型别名 :=> 任意
            }
            else {
                context.noContinuation = true;
>context.noContinuation = true : 为真
>类型别名 :=> 为真
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
            }
            context.popStatement();
>context.popStatement() : 任意
>类型别名 :=> 任意
>context.popStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>popStatement : 任意
>类型别名 :=> 任意

            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class TryCatch extends Statement {
>TryCatch : TryCatch
>Statement : Statement

        constructor (public tryNode: Try, public catchNode: Catch) {
>tryNode : Try
>Try : Try
>catchNode : Catch
>Catch : Catch

            super(NodeType.TryCatch);
>super(NodeType.TryCatch) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.TryCatch : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>TryCatch : 任意
>类型别名 :=> 任意
        }

        public isCompoundStatement() { return true; }
>isCompoundStatement : () => 真假
>true : 为真
>类型别名 :=> 为真

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitJavascript(this.tryNode, TokenID.Try, false);
>emitter.emitJavascript(this.tryNode, TokenID.Try, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.tryNode : Try
>this : 本体
>tryNode : Try
>TokenID.Try : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Try : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.emitJavascript(this.catchNode, TokenID.Catch, false);
>emitter.emitJavascript(this.catchNode, TokenID.Catch, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.catchNode : Catch
>this : 本体
>catchNode : Catch
>TokenID.Catch : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Catch : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public addToControlFlow(context: ControlFlowContext) {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            var beforeTry = context.current;
>beforeTry : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            var tryBlock = new BasicBlock();
>tryBlock : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            beforeTry.addSuccessor(tryBlock);
>beforeTry.addSuccessor(tryBlock) : 任意
>类型别名 :=> 任意
>beforeTry.addSuccessor : 任意
>类型别名 :=> 任意
>beforeTry : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>tryBlock : 任意
>类型别名 :=> 任意

            context.current = tryBlock;
>context.current = tryBlock : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>tryBlock : 任意
>类型别名 :=> 任意

            var afterTryCatch = new BasicBlock();
>afterTryCatch : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            context.pushStatement(this, null, afterTryCatch);
>context.pushStatement(this, null, afterTryCatch) : 任意
>类型别名 :=> 任意
>context.pushStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>pushStatement : 任意
>类型别名 :=> 任意
>this : 本体
>null : 空值
>类型别名 :=> 空值
>afterTryCatch : 任意
>类型别名 :=> 任意

            context.walk(this.tryNode, this);
>context.walk(this.tryNode, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.tryNode : Try
>this : 本体
>tryNode : Try
>this : 本体

            if (!context.noContinuation) {
>!context.noContinuation : 真假
>类型别名 :=> 真假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意

                if (context.current) {
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

                    context.current.addSuccessor(afterTryCatch);
>context.current.addSuccessor(afterTryCatch) : 任意
>类型别名 :=> 任意
>context.current.addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterTryCatch : 任意
>类型别名 :=> 任意
                }
            }
            context.current = new BasicBlock();
>context.current = new BasicBlock() : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

            beforeTry.addSuccessor(context.current);
>beforeTry.addSuccessor(context.current) : 任意
>类型别名 :=> 任意
>beforeTry.addSuccessor : 任意
>类型别名 :=> 任意
>beforeTry : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

            context.walk(this.catchNode, this);
>context.walk(this.catchNode, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.catchNode : Catch
>this : 本体
>catchNode : Catch
>this : 本体

            context.popStatement();
>context.popStatement() : 任意
>类型别名 :=> 任意
>context.popStatement : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>popStatement : 任意
>类型别名 :=> 任意

            if (!context.noContinuation) {
>!context.noContinuation : 真假
>类型别名 :=> 真假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意

                if (context.current) {
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意

                    context.current.addSuccessor(afterTryCatch);
>context.current.addSuccessor(afterTryCatch) : 任意
>类型别名 :=> 任意
>context.current.addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>afterTryCatch : 任意
>类型别名 :=> 任意
                }
            }
            context.current = afterTryCatch;
>context.current = afterTryCatch : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>afterTryCatch : 任意
>类型别名 :=> 任意

            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            this.tryNode = <Try>typeFlow.typeCheck(this.tryNode);
>this.tryNode = <Try>typeFlow.typeCheck(this.tryNode) : Try
>this.tryNode : Try
>this : 本体
>tryNode : Try
><Try>typeFlow.typeCheck(this.tryNode) : Try
>Try : Try
>typeFlow.typeCheck(this.tryNode) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.tryNode : Try
>this : 本体
>tryNode : Try

            this.catchNode = <Catch>typeFlow.typeCheck(this.catchNode);
>this.catchNode = <Catch>typeFlow.typeCheck(this.catchNode) : Catch
>this.catchNode : Catch
>this : 本体
>catchNode : Catch
><Catch>typeFlow.typeCheck(this.catchNode) : Catch
>Catch : Catch
>typeFlow.typeCheck(this.catchNode) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.catchNode : Catch
>this : 本体
>catchNode : Catch

            this.type = typeFlow.voidType;
>this.type = typeFlow.voidType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.voidType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>voidType : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }
    }

    export class Try extends Statement {
>Try : Try
>Statement : Statement

        constructor (public body: AST) {
>body : AST
>AST : AST

            super(NodeType.Try);
>super(NodeType.Try) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.Try : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Try : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.writeToOutput("try ");
>emitter.writeToOutput("try ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"try " : "try "

            emitter.emitJavascript(this.body, TokenID.Try, false);
>emitter.emitJavascript(this.body, TokenID.Try, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>TokenID.Try : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Try : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            this.body = typeFlow.typeCheck(this.body);
>this.body = typeFlow.typeCheck(this.body) : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>typeFlow.typeCheck(this.body) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST

            return this;
>this : 本体
        }

        public addToControlFlow(context: ControlFlowContext) {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            if (this.body) {
>this.body : AST
>this : 本体
>body : AST

                context.walk(this.body, this);
>context.walk(this.body, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>this : 本体
            }
            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }
    }

    export class Catch extends Statement {
>Catch : Catch
>Statement : Statement

        constructor (public param: VarDecl, public body: AST) {
>param : VarDecl
>VarDecl : VarDecl
>body : AST
>AST : AST

            super(NodeType.Catch);
>super(NodeType.Catch) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.Catch : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Catch : 任意
>类型别名 :=> 任意

            if (this.param) {
>this.param : VarDecl
>this : 本体
>param : VarDecl

                this.param.varFlags |= VarFlags.AutoInit;
>this.param.varFlags |= VarFlags.AutoInit : 数字
>类型别名 :=> 数字
>this.param.varFlags : 任意
>类型别名 :=> 任意
>this.param : VarDecl
>this : 本体
>param : VarDecl
>varFlags : 任意
>类型别名 :=> 任意
>VarFlags.AutoInit : 任意
>类型别名 :=> 任意
>VarFlags : 任意
>类型别名 :=> 任意
>AutoInit : 任意
>类型别名 :=> 任意
            }
        }
        public statement: ASTSpan = new ASTSpan();
>statement : ASTSpan
>ASTSpan : ASTSpan
>new ASTSpan() : ASTSpan
>ASTSpan : 类为 ASTSpan

        public containedScope: SymbolScope = null;
>containedScope : 任意
>类型别名 :=> 任意
>SymbolScope : No type information available!
>null : 空值
>类型别名 :=> 空值

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.writeToOutput(" ");
>emitter.writeToOutput(" ") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>" " : " "

            emitter.recordSourceMappingStart(this.statement);
>emitter.recordSourceMappingStart(this.statement) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this.statement : ASTSpan
>this : 本体
>statement : ASTSpan

            emitter.writeToOutput("catch (");
>emitter.writeToOutput("catch (") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"catch (" : "catch ("

            emitter.emitJavascript(this.param, TokenID.OpenParen, false);
>emitter.emitJavascript(this.param, TokenID.OpenParen, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.param : VarDecl
>this : 本体
>param : VarDecl
>TokenID.OpenParen : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>OpenParen : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.writeToOutput(")");
>emitter.writeToOutput(")") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>")" : ")"

            emitter.recordSourceMappingEnd(this.statement);
>emitter.recordSourceMappingEnd(this.statement) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this.statement : ASTSpan
>this : 本体
>statement : ASTSpan

            emitter.emitJavascript(this.body, TokenID.Catch, false);
>emitter.emitJavascript(this.body, TokenID.Catch, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>TokenID.Catch : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Catch : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public addToControlFlow(context: ControlFlowContext) {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            if (this.param) {
>this.param : VarDecl
>this : 本体
>param : VarDecl

                context.addContent(this.param);
>context.addContent(this.param) : 任意
>类型别名 :=> 任意
>context.addContent : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>addContent : 任意
>类型别名 :=> 任意
>this.param : VarDecl
>this : 本体
>param : VarDecl

                var bodBlock = new BasicBlock();
>bodBlock : 任意
>类型别名 :=> 任意
>new BasicBlock() : 任意
>类型别名 :=> 任意
>BasicBlock : 任意
>类型别名 :=> 任意

                context.current.addSuccessor(bodBlock);
>context.current.addSuccessor(bodBlock) : 任意
>类型别名 :=> 任意
>context.current.addSuccessor : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>addSuccessor : 任意
>类型别名 :=> 任意
>bodBlock : 任意
>类型别名 :=> 任意

                context.current = bodBlock;
>context.current = bodBlock : 任意
>类型别名 :=> 任意
>context.current : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>current : 任意
>类型别名 :=> 任意
>bodBlock : 任意
>类型别名 :=> 任意
            }
            if (this.body) {
>this.body : AST
>this : 本体
>body : AST

                context.walk(this.body, this);
>context.walk(this.body, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>this : 本体
            }
            context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            var prevScope = typeFlow.scope;
>prevScope : 任意
>类型别名 :=> 任意
>typeFlow.scope : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意

            typeFlow.scope = this.containedScope;
>typeFlow.scope = this.containedScope : 任意
>类型别名 :=> 任意
>typeFlow.scope : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>this.containedScope : 任意
>类型别名 :=> 任意
>this : 本体
>containedScope : 任意
>类型别名 :=> 任意

            this.param = <VarDecl>typeFlow.typeCheck(this.param);
>this.param = <VarDecl>typeFlow.typeCheck(this.param) : VarDecl
>this.param : VarDecl
>this : 本体
>param : VarDecl
><VarDecl>typeFlow.typeCheck(this.param) : VarDecl
>VarDecl : VarDecl
>typeFlow.typeCheck(this.param) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.param : VarDecl
>this : 本体
>param : VarDecl

            var exceptVar = new ValueLocation();
>exceptVar : 任意
>类型别名 :=> 任意
>new ValueLocation() : 任意
>类型别名 :=> 任意
>ValueLocation : 任意
>类型别名 :=> 任意

            var varSym = new VariableSymbol((<VarDecl>this.param).id.text,
>varSym : 任意
>类型别名 :=> 任意
>new VariableSymbol((<VarDecl>this.param).id.text,                                          this.param.minChar,                                          typeFlow.checker.locationInfo.unitIndex,                                          exceptVar) : 任意
>类型别名 :=> 任意
>VariableSymbol : 任意
>类型别名 :=> 任意
>(<VarDecl>this.param).id.text : 文字
>类型别名 :=> 文字
>(<VarDecl>this.param).id : Identifier
>(<VarDecl>this.param) : VarDecl
><VarDecl>this.param : VarDecl
>VarDecl : VarDecl
>this.param : VarDecl
>this : 本体
>param : VarDecl
>id : Identifier
>text : 文字
>类型别名 :=> 文字

                                          this.param.minChar,
>this.param.minChar : 数字
>类型别名 :=> 数字
>this.param : VarDecl
>this : 本体
>param : VarDecl
>minChar : 数字
>类型别名 :=> 数字

                                          typeFlow.checker.locationInfo.unitIndex,
>typeFlow.checker.locationInfo.unitIndex : 任意
>类型别名 :=> 任意
>typeFlow.checker.locationInfo : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>locationInfo : 任意
>类型别名 :=> 任意
>unitIndex : 任意
>类型别名 :=> 任意

                                          exceptVar);
>exceptVar : 任意
>类型别名 :=> 任意

            exceptVar.symbol = varSym;
>exceptVar.symbol = varSym : 任意
>类型别名 :=> 任意
>exceptVar.symbol : 任意
>类型别名 :=> 任意
>exceptVar : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>varSym : 任意
>类型别名 :=> 任意

            exceptVar.typeLink = new TypeLink();
>exceptVar.typeLink = new TypeLink() : 任意
>类型别名 :=> 任意
>exceptVar.typeLink : 任意
>类型别名 :=> 任意
>exceptVar : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>new TypeLink() : 任意
>类型别名 :=> 任意
>TypeLink : 任意
>类型别名 :=> 任意

            // var type for now (add syntax for type annotation)
            exceptVar.typeLink.type = typeFlow.anyType;
>exceptVar.typeLink.type = typeFlow.anyType : 任意
>类型别名 :=> 任意
>exceptVar.typeLink.type : 任意
>类型别名 :=> 任意
>exceptVar.typeLink : 任意
>类型别名 :=> 任意
>exceptVar : 任意
>类型别名 :=> 任意
>typeLink : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>typeFlow.anyType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>anyType : 任意
>类型别名 :=> 任意

            var thisFnc = typeFlow.thisFnc;
>thisFnc : 任意
>类型别名 :=> 任意
>typeFlow.thisFnc : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>thisFnc : 任意
>类型别名 :=> 任意

            if (thisFnc && thisFnc.type) {
>thisFnc && thisFnc.type : 任意
>类型别名 :=> 任意
>thisFnc : 任意
>类型别名 :=> 任意
>thisFnc.type : 任意
>类型别名 :=> 任意
>thisFnc : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意

                exceptVar.symbol.container = thisFnc.type.symbol;
>exceptVar.symbol.container = thisFnc.type.symbol : 任意
>类型别名 :=> 任意
>exceptVar.symbol.container : 任意
>类型别名 :=> 任意
>exceptVar.symbol : 任意
>类型别名 :=> 任意
>exceptVar : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>container : 任意
>类型别名 :=> 任意
>thisFnc.type.symbol : 任意
>类型别名 :=> 任意
>thisFnc.type : 任意
>类型别名 :=> 任意
>thisFnc : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
            }
            else {
                exceptVar.symbol.container = null;
>exceptVar.symbol.container = null : 空值
>类型别名 :=> 空值
>exceptVar.symbol.container : 任意
>类型别名 :=> 任意
>exceptVar.symbol : 任意
>类型别名 :=> 任意
>exceptVar : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>container : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
            }
            this.param.sym = exceptVar.symbol;
>this.param.sym = exceptVar.symbol : 任意
>类型别名 :=> 任意
>this.param.sym : 任意
>类型别名 :=> 任意
>this.param : VarDecl
>this : 本体
>param : VarDecl
>sym : 任意
>类型别名 :=> 任意
>exceptVar.symbol : 任意
>类型别名 :=> 任意
>exceptVar : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意

            typeFlow.scope.enter(exceptVar.symbol.container, this.param, exceptVar.symbol,
>typeFlow.scope.enter(exceptVar.symbol.container, this.param, exceptVar.symbol,                                 typeFlow.checker.errorReporter, false, false, false) : 任意
>类型别名 :=> 任意
>typeFlow.scope.enter : 任意
>类型别名 :=> 任意
>typeFlow.scope : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>enter : 任意
>类型别名 :=> 任意
>exceptVar.symbol.container : 任意
>类型别名 :=> 任意
>exceptVar.symbol : 任意
>类型别名 :=> 任意
>exceptVar : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>container : 任意
>类型别名 :=> 任意
>this.param : VarDecl
>this : 本体
>param : VarDecl
>exceptVar.symbol : 任意
>类型别名 :=> 任意
>exceptVar : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意

                                 typeFlow.checker.errorReporter, false, false, false);
>typeFlow.checker.errorReporter : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>errorReporter : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假

            this.body = typeFlow.typeCheck(this.body);
>this.body = typeFlow.typeCheck(this.body) : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>typeFlow.typeCheck(this.body) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST

            // if we're in provisional typecheck mode, clean up the symbol entry
            // REVIEW: This is obviously bad form, since we're counting on the internal
            // layout of the symbol table, but this is also the only place where we insert
            // symbols during typecheck
            if (typeFlow.checker.inProvisionalTypecheckMode()) {
>typeFlow.checker.inProvisionalTypecheckMode() : 任意
>类型别名 :=> 任意
>typeFlow.checker.inProvisionalTypecheckMode : 任意
>类型别名 :=> 任意
>typeFlow.checker : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>checker : 任意
>类型别名 :=> 任意
>inProvisionalTypecheckMode : 任意
>类型别名 :=> 任意

                var table = typeFlow.scope.getTable();
>table : 任意
>类型别名 :=> 任意
>typeFlow.scope.getTable() : 任意
>类型别名 :=> 任意
>typeFlow.scope.getTable : 任意
>类型别名 :=> 任意
>typeFlow.scope : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>getTable : 任意
>类型别名 :=> 任意

                (<any>table).secondaryTable.table[exceptVar.symbol.name] = undefined;
>(<any>table).secondaryTable.table[exceptVar.symbol.name] = undefined : 未定
>类型别名 :=> 未定
>(<any>table).secondaryTable.table[exceptVar.symbol.name] : 任意
>类型别名 :=> 任意
>(<any>table).secondaryTable.table : 任意
>类型别名 :=> 任意
>(<any>table).secondaryTable : 任意
>类型别名 :=> 任意
>(<any>table) : 任意
>类型别名 :=> 任意
><any>table : 任意
>类型别名 :=> 任意
>table : 任意
>类型别名 :=> 任意
>secondaryTable : 任意
>类型别名 :=> 任意
>table : 任意
>类型别名 :=> 任意
>exceptVar.symbol.name : 任意
>类型别名 :=> 任意
>exceptVar.symbol : 任意
>类型别名 :=> 任意
>exceptVar : 任意
>类型别名 :=> 任意
>symbol : 任意
>类型别名 :=> 任意
>name : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
            }
            this.type = typeFlow.voidType;
>this.type = typeFlow.voidType : 任意
>类型别名 :=> 任意
>this.type : 任意
>类型别名 :=> 任意
>this : 本体
>type : 任意
>类型别名 :=> 任意
>typeFlow.voidType : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>voidType : 任意
>类型别名 :=> 任意

            typeFlow.scope = prevScope;
>typeFlow.scope = prevScope : 任意
>类型别名 :=> 任意
>typeFlow.scope : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>scope : 任意
>类型别名 :=> 任意
>prevScope : 任意
>类型别名 :=> 任意

            return this;
>this : 本体
        }
    }

    export class Finally extends Statement {
>Finally : Finally
>Statement : Statement

        constructor (public body: AST) {
>body : AST
>AST : AST

            super(NodeType.Finally);
>super(NodeType.Finally) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.Finally : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Finally : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.writeToOutput("finally");
>emitter.writeToOutput("finally") : 任意
>类型别名 :=> 任意
>emitter.writeToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeToOutput : 任意
>类型别名 :=> 任意
>"finally" : "finally"

            emitter.emitJavascript(this.body, TokenID.Finally, false);
>emitter.emitJavascript(this.body, TokenID.Finally, false) : 任意
>类型别名 :=> 任意
>emitter.emitJavascript : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitJavascript : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>TokenID.Finally : 任意
>类型别名 :=> 任意
>TokenID : 任意
>类型别名 :=> 任意
>Finally : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }

        public addToControlFlow(context: ControlFlowContext) {
>addToControlFlow : (context: 任意) => 无值
>context : 任意
>类型别名 :=> 任意
>ControlFlowContext : No type information available!

            if (this.body) {
>this.body : AST
>this : 本体
>body : AST

                context.walk(this.body, this);
>context.walk(this.body, this) : 任意
>类型别名 :=> 任意
>context.walk : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>this : 本体
            }
            context.walker.options.goChildren = false;
>context.walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>context.walker.options.goChildren : 任意
>类型别名 :=> 任意
>context.walker.options : 任意
>类型别名 :=> 任意
>context.walker : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

            context.noContinuation = false;
>context.noContinuation = false : 为假
>类型别名 :=> 为假
>context.noContinuation : 任意
>类型别名 :=> 任意
>context : 任意
>类型别名 :=> 任意
>noContinuation : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }

        public typeCheck(typeFlow: TypeFlow) {
>typeCheck : (typeFlow: 任意) => 本体
>typeFlow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!

            this.body = typeFlow.typeCheck(this.body);
>this.body = typeFlow.typeCheck(this.body) : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST
>typeFlow.typeCheck(this.body) : 任意
>类型别名 :=> 任意
>typeFlow.typeCheck : 任意
>类型别名 :=> 任意
>typeFlow : 任意
>类型别名 :=> 任意
>typeCheck : 任意
>类型别名 :=> 任意
>this.body : AST
>this : 本体
>body : AST

            return this;
>this : 本体
        }
    }

    export class Comment extends AST {
>Comment : Comment
>AST : AST

        public text: string[] = null;
>text : 文字[]
>null : 空值
>类型别名 :=> 空值

        constructor (public content: string, public isBlockComment: boolean, public endsLine) {
>content : 文字
>类型别名 :=> 文字
>isBlockComment : 真假
>类型别名 :=> 真假
>endsLine : 任意
>类型别名 :=> 任意

            super(NodeType.Comment);
>super(NodeType.Comment) : 无值
>类型别名 :=> 无值
>super : 类为 AST
>NodeType.Comment : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Comment : 任意
>类型别名 :=> 任意
        }

        public getText(): string[] {
>getText : () => 文字[]

            if (this.text == null) {
>this.text == null : 真假
>类型别名 :=> 真假
>this.text : 文字[]
>this : 本体
>text : 文字[]
>null : 空值
>类型别名 :=> 空值

                if (this.isBlockComment) {
>this.isBlockComment : 真假
>类型别名 :=> 真假
>this : 本体
>isBlockComment : 真假
>类型别名 :=> 真假

                    this.text = this.content.split("\n");
>this.text = this.content.split("\n") : 文字[]
>this.text : 文字[]
>this : 本体
>text : 文字[]
>this.content.split("\n") : 文字[]
>this.content.split : (separator: 文字 | RegExp, limit?: 数字) => 文字[]
>this.content : 文字
>类型别名 :=> 文字
>this : 本体
>content : 文字
>类型别名 :=> 文字
>split : (separator: 文字 | RegExp, limit?: 数字) => 文字[]
>"\n" : "\n"

                    for (var i = 0; i < this.text.length; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < this.text.length : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>this.text.length : 数字
>类型别名 :=> 数字
>this.text : 文字[]
>this : 本体
>text : 文字[]
>length : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                        this.text[i] = this.text[i].replace(/^\s+|\s+$/g, '');
>this.text[i] = this.text[i].replace(/^\s+|\s+$/g, '') : 文字
>类型别名 :=> 文字
>this.text[i] : 文字
>类型别名 :=> 文字
>this.text : 文字[]
>this : 本体
>text : 文字[]
>i : 数字
>类型别名 :=> 数字
>this.text[i].replace(/^\s+|\s+$/g, '') : 文字
>类型别名 :=> 文字
>this.text[i].replace : { (searchValue: 文字 | RegExp, replaceValue: 文字): 文字; (searchValue: 文字 | RegExp, replacer: (substring: 文字, ...args: 任意[]) => 文字): 文字; }
>this.text[i] : 文字
>类型别名 :=> 文字
>this.text : 文字[]
>this : 本体
>text : 文字[]
>i : 数字
>类型别名 :=> 数字
>replace : { (searchValue: 文字 | RegExp, replaceValue: 文字): 文字; (searchValue: 文字 | RegExp, replacer: (substring: 文字, ...args: 任意[]) => 文字): 文字; }
>/^\s+|\s+$/g : RegExp
>'' : ""
                    }
                }
                else {
                    this.text = [(this.content.replace(/^\s+|\s+$/g, ''))];
>this.text = [(this.content.replace(/^\s+|\s+$/g, ''))] : 文字[]
>this.text : 文字[]
>this : 本体
>text : 文字[]
>[(this.content.replace(/^\s+|\s+$/g, ''))] : 文字[]
>(this.content.replace(/^\s+|\s+$/g, '')) : 文字
>类型别名 :=> 文字
>this.content.replace(/^\s+|\s+$/g, '') : 文字
>类型别名 :=> 文字
>this.content.replace : { (searchValue: 文字 | RegExp, replaceValue: 文字): 文字; (searchValue: 文字 | RegExp, replacer: (substring: 文字, ...args: 任意[]) => 文字): 文字; }
>this.content : 文字
>类型别名 :=> 文字
>this : 本体
>content : 文字
>类型别名 :=> 文字
>replace : { (searchValue: 文字 | RegExp, replaceValue: 文字): 文字; (searchValue: 文字 | RegExp, replacer: (substring: 文字, ...args: 任意[]) => 文字): 文字; }
>/^\s+|\s+$/g : RegExp
>'' : ""
                }
            }

            return this.text;
>this.text : 文字[]
>this : 本体
>text : 文字[]
        }
    }

    export class DebuggerStatement extends Statement {
>DebuggerStatement : DebuggerStatement
>Statement : Statement

        constructor () {
            super(NodeType.Debugger);
>super(NodeType.Debugger) : 无值
>类型别名 :=> 无值
>super : 类为 Statement
>NodeType.Debugger : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Debugger : 任意
>类型别名 :=> 任意
        }

        public emit(emitter: Emitter, tokenId: TokenID, startLine: boolean) {
>emit : (emitter: 任意, tokenId: 任意, startLine: 真假) => 无值
>emitter : 任意
>类型别名 :=> 任意
>Emitter : No type information available!
>tokenId : 任意
>类型别名 :=> 任意
>TokenID : No type information available!
>startLine : 真假
>类型别名 :=> 真假

            emitter.emitParensAndCommentsInPlace(this, true);
>emitter.emitParensAndCommentsInPlace(this, true) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>true : 为真
>类型别名 :=> 为真

            emitter.recordSourceMappingStart(this);
>emitter.recordSourceMappingStart(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingStart : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingStart : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.writeLineToOutput("debugger;");
>emitter.writeLineToOutput("debugger;") : 任意
>类型别名 :=> 任意
>emitter.writeLineToOutput : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>writeLineToOutput : 任意
>类型别名 :=> 任意
>"debugger;" : "debugger;"

            emitter.recordSourceMappingEnd(this);
>emitter.recordSourceMappingEnd(this) : 任意
>类型别名 :=> 任意
>emitter.recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>recordSourceMappingEnd : 任意
>类型别名 :=> 任意
>this : 本体

            emitter.emitParensAndCommentsInPlace(this, false);
>emitter.emitParensAndCommentsInPlace(this, false) : 任意
>类型别名 :=> 任意
>emitter.emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>emitter : 任意
>类型别名 :=> 任意
>emitParensAndCommentsInPlace : 任意
>类型别名 :=> 任意
>this : 本体
>false : 为假
>类型别名 :=> 为假
        }
    }
}
