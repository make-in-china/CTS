=== tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPattern.ts ===
declare var console: {
>console : { log(msg: string): void; }

    log(msg: string): void;
>log : (msg: string) => void
>msg : string
>类型别名 :=> 文字
}
type Robot = [number, string, string];
>Robot : [number, string, string]

var robotA: Robot = [1, "mower", "mowing"];
>robotA : [number, string, string]
>Robot : [number, string, string]
>[1, "mower", "mowing"] : [number, string, string]
>1 : 1
>"mower" : "mower"
>"mowing" : "mowing"

var robotB: Robot = [2, "trimmer", "trimming"];
>robotB : [number, string, string]
>Robot : [number, string, string]
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"


let [, nameA] = robotA;
> : undefined
>类型别名 :=> 未定
>nameA : string
>类型别名 :=> 文字
>robotA : [number, string, string]

let [numberB] = robotB;
>numberB : number
>类型别名 :=> 数字
>robotB : [number, string, string]

let [numberA2, nameA2, skillA2] = robotA;
>numberA2 : number
>类型别名 :=> 数字
>nameA2 : string
>类型别名 :=> 文字
>skillA2 : string
>类型别名 :=> 文字
>robotA : [number, string, string]

let [numberC2] = [3, "edging", "Trimming edges"];
>numberC2 : number
>类型别名 :=> 数字
>[3, "edging", "Trimming edges"] : [number, string, string]
>3 : 3
>"edging" : "edging"
>"Trimming edges" : "Trimming edges"

let [numberC, nameC, skillC] = [3, "edging", "Trimming edges"];
>numberC : number
>类型别名 :=> 数字
>nameC : string
>类型别名 :=> 文字
>skillC : string
>类型别名 :=> 文字
>[3, "edging", "Trimming edges"] : [number, string, string]
>3 : 3
>"edging" : "edging"
>"Trimming edges" : "Trimming edges"

let [numberA3, ...robotAInfo] = robotA;
>numberA3 : number
>类型别名 :=> 数字
>robotAInfo : (string | number)[]
>robotA : [number, string, string]

if (nameA == nameA2) {
>nameA == nameA2 : boolean
>类型别名 :=> 真假
>nameA : string
>类型别名 :=> 文字
>nameA2 : string
>类型别名 :=> 文字

    console.log(skillA2);
>console.log(skillA2) : void
>类型别名 :=> 无值
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>skillA2 : string
>类型别名 :=> 文字
}
