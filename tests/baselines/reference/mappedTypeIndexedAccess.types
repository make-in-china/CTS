=== tests/cases/compiler/mappedTypeIndexedAccess.ts ===
// Repro from #15756

type Pairs<T> = {
>Pairs : Pairs<T>
>T : T

    [TKey in keyof T]: {
>TKey : TKey
>T : T

        key: TKey;
>key : TKey
>TKey : TKey

        value: T[TKey];
>value : T[TKey]
>T : T
>TKey : TKey

    };
};

type Pair<T> = Pairs<T>[keyof T];
>Pair : Pairs<T>[键集 T]
>T : T
>Pairs : Pairs<T>
>T : T
>T : T

type FooBar = {
>FooBar : FooBar

    foo: string;
>foo : 文字
>类型别名 :=> 文字

    bar: number;
>bar : 数字
>类型别名 :=> 数字

};

// Error expected here
let pair1: Pair<FooBar> = {
>pair1 : { key: "foo"; value: 文字; } | { key: "bar"; value: 数字; }
>Pair : Pairs<T>[键集 T]
>FooBar : FooBar
>{    key: "foo",    value: 3} : { key: "foo"; value: 数字; }

    key: "foo",
>key : 文字
>类型别名 :=> 文字
>"foo" : "foo"

    value: 3
>value : 数字
>类型别名 :=> 数字
>3 : 3

};

// Error expected here
let pair2: Pairs<FooBar>[keyof FooBar] = {
>pair2 : { key: "foo"; value: 文字; } | { key: "bar"; value: 数字; }
>Pairs : Pairs<T>
>FooBar : FooBar
>FooBar : FooBar
>{    key: "foo",    value: 3} : { key: "foo"; value: 数字; }

    key: "foo",
>key : 文字
>类型别名 :=> 文字
>"foo" : "foo"

    value: 3
>value : 数字
>类型别名 :=> 数字
>3 : 3

};

