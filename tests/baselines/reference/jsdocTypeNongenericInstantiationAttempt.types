=== tests/cases/compiler/index.js ===
/**
 * @param {<T>(m: Boolean<T>) => string} somebody
 */
function sayHello(somebody) {
>sayHello : (somebody: <T>(m: 真假) => 文字) => 文字
>somebody : <T>(m: 真假) => 文字

    return 'Hello ' + somebody;
>'Hello ' + somebody : 文字
>类型别名 :=> 文字
>'Hello ' : "Hello "
>somebody : <T>(m: 真假) => 文字
}

=== tests/cases/compiler/index2.js ===
/**
 * @param {<T>(m: Void<T>) => string} somebody
 */
function sayHello2(somebody) {
>sayHello2 : (somebody: <T>(m: 无值) => 文字) => 文字
>somebody : <T>(m: 无值) => 文字

    return 'Hello ' + somebody;
>'Hello ' + somebody : 文字
>类型别名 :=> 文字
>'Hello ' : "Hello "
>somebody : <T>(m: 无值) => 文字
}


=== tests/cases/compiler/index3.js ===
/**
 * @param {<T>(m: Undefined<T>) => string} somebody
 */
function sayHello3(somebody) {
>sayHello3 : (somebody: <T>(m: 未定) => 文字) => 文字
>somebody : <T>(m: 未定) => 文字

    return 'Hello ' + somebody;
>'Hello ' + somebody : 文字
>类型别名 :=> 文字
>'Hello ' : "Hello "
>somebody : <T>(m: 未定) => 文字
}


=== tests/cases/compiler/index4.js ===
/**
 * @param {<T>(m: Function<T>) => string} somebody
 */
function sayHello4(somebody) {
>sayHello4 : (somebody: <T>(m: Function) => 文字) => 文字
>somebody : <T>(m: Function) => 文字

    return 'Hello ' + somebody;
>'Hello ' + somebody : 文字
>类型别名 :=> 文字
>'Hello ' : "Hello "
>somebody : <T>(m: Function) => 文字
}


=== tests/cases/compiler/index5.js ===
/**
 * @param {<T>(m: String<T>) => string} somebody
 */
function sayHello5(somebody) {
>sayHello5 : (somebody: <T>(m: 文字) => 文字) => 文字
>somebody : <T>(m: 文字) => 文字

    return 'Hello ' + somebody;
>'Hello ' + somebody : 文字
>类型别名 :=> 文字
>'Hello ' : "Hello "
>somebody : <T>(m: 文字) => 文字
}


=== tests/cases/compiler/index6.js ===
/**
 * @param {<T>(m: Number<T>) => string} somebody
 */
function sayHello6(somebody) {
>sayHello6 : (somebody: <T>(m: 数字) => 文字) => 文字
>somebody : <T>(m: 数字) => 文字

    return 'Hello ' + somebody;
>'Hello ' + somebody : 文字
>类型别名 :=> 文字
>'Hello ' : "Hello "
>somebody : <T>(m: 数字) => 文字
}


=== tests/cases/compiler/index7.js ===
/**
 * @param {<T>(m: Object<T>) => string} somebody
 */
function sayHello7(somebody) {
>sayHello7 : (somebody: <T>(m: 任意) => 文字) => 文字
>somebody : <T>(m: 任意) => 文字

    return 'Hello ' + somebody;
>'Hello ' + somebody : 文字
>类型别名 :=> 文字
>'Hello ' : "Hello "
>somebody : <T>(m: 任意) => 文字
}

=== tests/cases/compiler/index8.js ===
function fn() {}
>fn : () => 无值

/**
 * @param {fn<T>} somebody
 */
function sayHello8(somebody) { }
>sayHello8 : (somebody: () => 无值) => 无值
>somebody : () => 无值

