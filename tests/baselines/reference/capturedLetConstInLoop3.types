=== tests/cases/compiler/capturedLetConstInLoop3.ts ===
///=========let
declare function use(a: any);
>use : (a: 任意) => 任意
>a : 任意
>类型别名 :=> 任意

function foo0(x) {
>foo0 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (let x of []) {
>x : 任意
>类型别名 :=> 任意
>[] : 未定[]

        var v = x;
>v : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

        (function() { return x + v });
>(function() { return x + v }) : () => 任意
>function() { return x + v } : () => 任意
>x + v : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

        (() => x + v);
>(() => x + v) : () => 任意
>() => x + v : () => 任意
>x + v : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意
    }

    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 任意
>类型别名 :=> 任意
}

function foo0_1(x) {
>foo0_1 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (let x in []) {
>x : 文字
>类型别名 :=> 文字
>[] : 未定[]

        var v = x;
>v : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字

        (function() { return x + v });
>(function() { return x + v }) : () => 文字
>function() { return x + v } : () => 文字
>x + v : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>v : 文字
>类型别名 :=> 文字

        (() => x + v);
>(() => x + v) : () => 文字
>() => x + v : () => 文字
>x + v : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>v : 文字
>类型别名 :=> 文字
    }

    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 文字
>类型别名 :=> 文字
}

function foo1(x) {
>foo1 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (let x = 0; x < 1; ++x) {
>x : 数字
>类型别名 :=> 数字
>0 : 0
>x < 1 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>1 : 1
>++x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

        var v = x;
>v : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

        (function() { return x + v });
>(function() { return x + v }) : () => 数字
>function() { return x + v } : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

        (() => x + v);
>(() => x + v) : () => 数字
>() => x + v : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字
    }

    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}

function foo2(x) {
>foo2 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    while (1 === 1) {
>1 === 1 : 真假
>类型别名 :=> 真假
>1 : 1
>1 : 1

        let x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1

        var v = x;
>v : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

        (function() { return x + v });
>(function() { return x + v }) : () => 数字
>function() { return x + v } : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

        (() => x + v);
>(() => x + v) : () => 数字
>() => x + v : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字
    }
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}

function foo3(x) {
>foo3 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    do {
        let x;
>x : 任意
>类型别名 :=> 任意

        var v;
>v : 任意
>类型别名 :=> 任意

        (function() { return x + v });
>(function() { return x + v }) : () => 任意
>function() { return x + v } : () => 任意
>x + v : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

        (() => x + v);
>(() => x + v) : () => 任意
>() => x + v : () => 任意
>x + v : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

    } while (1 === 1);
>1 === 1 : 真假
>类型别名 :=> 真假
>1 : 1
>1 : 1
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 任意
>类型别名 :=> 任意
}

function foo4(x) {
>foo4 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (let y = 0; y < 1; ++y) {
>y : 数字
>类型别名 :=> 数字
>0 : 0
>y < 1 : 真假
>类型别名 :=> 真假
>y : 数字
>类型别名 :=> 数字
>1 : 1
>++y : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        var v = y;
>v : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        let x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1

        (function() { return x + v });
>(function() { return x + v }) : () => 数字
>function() { return x + v } : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

        (() => x + v);
>(() => x + v) : () => 数字
>() => x + v : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字
    }
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}

function foo5(x) {
>foo5 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (let x = 0, y = 1; x < 1; ++x) {
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>1 : 1
>x < 1 : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>1 : 1
>++x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

        var v = x;
>v : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

        (function() { return x + y + v });
>(function() { return x + y + v }) : () => 数字
>function() { return x + y + v } : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

        (() => x + y + v);
>(() => x + y + v) : () => 数字
>() => x + y + v : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字
    }
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}


function foo6(x) {
>foo6 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    while (1 === 1) {
>1 === 1 : 真假
>类型别名 :=> 真假
>1 : 1
>1 : 1

        let x, y;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

        var v = x;
>v : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

        (function() { return x + y + v });
>(function() { return x + y + v }) : () => 任意
>function() { return x + y + v } : () => 任意
>x + y + v : 任意
>类型别名 :=> 任意
>x + y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

        (() => x + y + v);
>(() => x + y + v) : () => 任意
>() => x + y + v : () => 任意
>x + y + v : 任意
>类型别名 :=> 任意
>x + y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意
    }
    
    use(v)
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 任意
>类型别名 :=> 任意
}

function foo7(x) {
>foo7 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    do {
        let x, y;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

        var v = x;
>v : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

        (function() { return x + y + v });
>(function() { return x + y + v }) : () => 任意
>function() { return x + y + v } : () => 任意
>x + y + v : 任意
>类型别名 :=> 任意
>x + y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

        (() => x + y + v);
>(() => x + y + v) : () => 任意
>() => x + y + v : () => 任意
>x + y + v : 任意
>类型别名 :=> 任意
>x + y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

    } while (1 === 1);
>1 === 1 : 真假
>类型别名 :=> 真假
>1 : 1
>1 : 1
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 任意
>类型别名 :=> 任意
}


function foo8(x) {
>foo8 : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (let y = 0; y < 1; ++y) {
>y : 数字
>类型别名 :=> 数字
>0 : 0
>y < 1 : 真假
>类型别名 :=> 真假
>y : 数字
>类型别名 :=> 数字
>1 : 1
>++y : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

        let x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1

        var v = x;
>v : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

        (function() { return x + y + v });
>(function() { return x + y + v }) : () => 数字
>function() { return x + y + v } : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

        (() => x + y + v);
>(() => x + y + v) : () => 数字
>() => x + y + v : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字
    }
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}
//===const
function foo0_c(x) {
>foo0_c : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (const x of []) {
>x : 任意
>类型别名 :=> 任意
>[] : 未定[]

        var v = x;
>v : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

        (function() { return x + v });
>(function() { return x + v }) : () => 任意
>function() { return x + v } : () => 任意
>x + v : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

        (() => x + v);
>(() => x + v) : () => 任意
>() => x + v : () => 任意
>x + v : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意
    }

    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 任意
>类型别名 :=> 任意
}

function foo0_1_c(x) {
>foo0_1_c : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (const x in []) {
>x : 文字
>类型别名 :=> 文字
>[] : 未定[]

        var v = x;
>v : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字

        (function() { return x + v });
>(function() { return x + v }) : () => 文字
>function() { return x + v } : () => 文字
>x + v : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>v : 文字
>类型别名 :=> 文字

        (() => x + v);
>(() => x + v) : () => 文字
>() => x + v : () => 文字
>x + v : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>v : 文字
>类型别名 :=> 文字
    }

    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 文字
>类型别名 :=> 文字
}

function foo1_c(x) {
>foo1_c : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (const x = 0; x < 1;) {
>x : 0
>0 : 0
>x < 1 : 真假
>类型别名 :=> 真假
>x : 0
>1 : 1

        var v = x;
>v : 数字
>类型别名 :=> 数字
>x : 0

        (function() { return x + v });
>(function() { return x + v }) : () => 数字
>function() { return x + v } : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 0
>v : 数字
>类型别名 :=> 数字

        (() => x + v);
>(() => x + v) : () => 数字
>() => x + v : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 0
>v : 数字
>类型别名 :=> 数字
    }

    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}

function foo2_c(x) {
>foo2_c : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    while (1 === 1) {
>1 === 1 : 真假
>类型别名 :=> 真假
>1 : 1
>1 : 1

        const x = 1;
>x : 1
>1 : 1

        var v = x;
>v : 数字
>类型别名 :=> 数字
>x : 1

        (function() { return x + v });
>(function() { return x + v }) : () => 数字
>function() { return x + v } : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 1
>v : 数字
>类型别名 :=> 数字

        (() => x + v);
>(() => x + v) : () => 数字
>() => x + v : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 1
>v : 数字
>类型别名 :=> 数字
    }
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}

function foo3_c(x) {
>foo3_c : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    do {
        const x = 1;
>x : 1
>1 : 1

        var v;
>v : 任意
>类型别名 :=> 任意

        (function() { return x + v });
>(function() { return x + v }) : () => 任意
>function() { return x + v } : () => 任意
>x + v : 任意
>类型别名 :=> 任意
>x : 1
>v : 任意
>类型别名 :=> 任意

        (() => x + v);
>(() => x + v) : () => 任意
>() => x + v : () => 任意
>x + v : 任意
>类型别名 :=> 任意
>x : 1
>v : 任意
>类型别名 :=> 任意

    } while (1 === 1);
>1 === 1 : 真假
>类型别名 :=> 真假
>1 : 1
>1 : 1
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 任意
>类型别名 :=> 任意
}

function foo4_c(x) {
>foo4_c : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (const y = 0; y < 1;) {
>y : 0
>0 : 0
>y < 1 : 真假
>类型别名 :=> 真假
>y : 0
>1 : 1

        var v = y;
>v : 数字
>类型别名 :=> 数字
>y : 0

        const x = 1;
>x : 1
>1 : 1

        (function() { return x + v });
>(function() { return x + v }) : () => 数字
>function() { return x + v } : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 1
>v : 数字
>类型别名 :=> 数字

        (() => x + v);
>(() => x + v) : () => 数字
>() => x + v : () => 数字
>x + v : 数字
>类型别名 :=> 数字
>x : 1
>v : 数字
>类型别名 :=> 数字
    }
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}

function foo5_c(x) {
>foo5_c : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (const x = 0, y = 1; x < 1;) {
>x : 0
>0 : 0
>y : 1
>1 : 1
>x < 1 : 真假
>类型别名 :=> 真假
>x : 0
>1 : 1

        var v = x;
>v : 数字
>类型别名 :=> 数字
>x : 0

        (function() { return x + y + v });
>(function() { return x + y + v }) : () => 数字
>function() { return x + y + v } : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 0
>y : 1
>v : 数字
>类型别名 :=> 数字

        (() => x + y + v);
>(() => x + y + v) : () => 数字
>() => x + y + v : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 0
>y : 1
>v : 数字
>类型别名 :=> 数字
    }
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}


function foo6_c(x) {
>foo6_c : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    while (1 === 1) {
>1 === 1 : 真假
>类型别名 :=> 真假
>1 : 1
>1 : 1

        const x = 1, y = 1;
>x : 1
>1 : 1
>y : 1
>1 : 1

        var v = x;
>v : 数字
>类型别名 :=> 数字
>x : 1

        (function() { return x + y + v });
>(function() { return x + y + v }) : () => 数字
>function() { return x + y + v } : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 1
>y : 1
>v : 数字
>类型别名 :=> 数字

        (() => x + y + v);
>(() => x + y + v) : () => 数字
>() => x + y + v : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 1
>y : 1
>v : 数字
>类型别名 :=> 数字
    }
    
    use(v)
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}

function foo7_c(x) {
>foo7_c : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    do {
        const x = 1, y = 1;
>x : 1
>1 : 1
>y : 1
>1 : 1

        var v = x;
>v : 数字
>类型别名 :=> 数字
>x : 1

        (function() { return x + y + v });
>(function() { return x + y + v }) : () => 数字
>function() { return x + y + v } : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 1
>y : 1
>v : 数字
>类型别名 :=> 数字

        (() => x + y + v);
>(() => x + y + v) : () => 数字
>() => x + y + v : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 1
>y : 1
>v : 数字
>类型别名 :=> 数字

    } while (1 === 1);
>1 === 1 : 真假
>类型别名 :=> 真假
>1 : 1
>1 : 1
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}


function foo8_c(x) {
>foo8_c : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    for (const y = 0; y < 1;) {
>y : 0
>0 : 0
>y < 1 : 真假
>类型别名 :=> 真假
>y : 0
>1 : 1

        const x = 1;
>x : 1
>1 : 1

        var v = x;
>v : 数字
>类型别名 :=> 数字
>x : 1

        (function() { return x + y + v });
>(function() { return x + y + v }) : () => 数字
>function() { return x + y + v } : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 1
>y : 0
>v : 数字
>类型别名 :=> 数字

        (() => x + y + v);
>(() => x + y + v) : () => 数字
>() => x + y + v : () => 数字
>x + y + v : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 1
>y : 0
>v : 数字
>类型别名 :=> 数字
    }
    
    use(v);
>use(v) : 任意
>类型别名 :=> 任意
>use : (a: 任意) => 任意
>v : 数字
>类型别名 :=> 数字
}
