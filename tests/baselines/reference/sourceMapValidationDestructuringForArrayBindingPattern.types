=== tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPattern.ts ===
declare var console: {
>console : { log(msg: any): void; }

    log(msg: any): void;
>log : (msg: any) => void
>msg : any
>类型别名 :=> 任意
}
type Robot = [number, string, string];
>Robot : [number, string, string]

type MultiSkilledRobot = [string, [string, string]];
>MultiSkilledRobot : [string, [string, string]]

let robotA: Robot = [1, "mower", "mowing"];
>robotA : [number, string, string]
>Robot : [number, string, string]
>[1, "mower", "mowing"] : [number, string, string]
>1 : 1
>"mower" : "mower"
>"mowing" : "mowing"

function getRobot() {
>getRobot : () => [number, string, string]

    return robotA;
>robotA : [number, string, string]
}

let multiRobotA: MultiSkilledRobot = ["mower", ["mowing", ""]];
>multiRobotA : [string, [string, string]]
>MultiSkilledRobot : [string, [string, string]]
>["mower", ["mowing", ""]] : [string, [string, string]]
>"mower" : "mower"
>["mowing", ""] : [string, string]
>"mowing" : "mowing"
>"" : ""

let multiRobotB: MultiSkilledRobot = ["trimmer", ["trimming", "edging"]];
>multiRobotB : [string, [string, string]]
>MultiSkilledRobot : [string, [string, string]]
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>"trimmer" : "trimmer"
>["trimming", "edging"] : [string, string]
>"trimming" : "trimming"
>"edging" : "edging"

function getMultiRobot() {
>getMultiRobot : () => [string, [string, string]]

    return multiRobotA;
>multiRobotA : [string, [string, string]]
}

for (let [, nameA] = robotA, i = 0; i < 1; i++) {
> : undefined
>类型别名 :=> 未定
>nameA : string
>类型别名 :=> 文字
>robotA : [number, string, string]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameA);
>console.log(nameA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA : string
>类型别名 :=> 文字
}
for (let [, nameA] = getRobot(), i = 0; i < 1; i++) {
> : undefined
>类型别名 :=> 未定
>nameA : string
>类型别名 :=> 文字
>getRobot() : [number, string, string]
>getRobot : () => [number, string, string]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameA);
>console.log(nameA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA : string
>类型别名 :=> 文字
}
for (let [, nameA] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
> : undefined
>类型别名 :=> 未定
>nameA : string
>类型别名 :=> 文字
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameA);
>console.log(nameA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA : string
>类型别名 :=> 文字
}
for (let [, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0; i < 1; i++) {
> : undefined
>类型别名 :=> 未定
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>multiRobotA : [string, [string, string]]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>primarySkillA : string
>类型别名 :=> 文字
}
for (let [, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0; i < 1; i++) {
> : undefined
>类型别名 :=> 未定
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>getMultiRobot() : [string, [string, string]]
>getMultiRobot : () => [string, [string, string]]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>primarySkillA : string
>类型别名 :=> 文字
}
for (let [, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
> : undefined
>类型别名 :=> 未定
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>"trimmer" : "trimmer"
>["trimming", "edging"] : [string, string]
>"trimming" : "trimming"
>"edging" : "edging"
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>primarySkillA : string
>类型别名 :=> 文字
}

for (let [numberB] = robotA, i = 0; i < 1; i++) {
>numberB : number
>类型别名 :=> 数字
>robotA : [number, string, string]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(numberB);
>console.log(numberB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberB : number
>类型别名 :=> 数字
}
for (let [numberB] = getRobot(), i = 0; i < 1; i++) {
>numberB : number
>类型别名 :=> 数字
>getRobot() : [number, string, string]
>getRobot : () => [number, string, string]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(numberB);
>console.log(numberB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberB : number
>类型别名 :=> 数字
}
for (let [numberB] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>numberB : number
>类型别名 :=> 数字
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(numberB);
>console.log(numberB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberB : number
>类型别名 :=> 数字
}
for (let [nameB] = multiRobotA, i = 0; i < 1; i++) {
>nameB : string
>类型别名 :=> 文字
>multiRobotA : [string, [string, string]]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameB);
>console.log(nameB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameB : string
>类型别名 :=> 文字
}
for (let [nameB] = getMultiRobot(), i = 0; i < 1; i++) {
>nameB : string
>类型别名 :=> 文字
>getMultiRobot() : [string, [string, string]]
>getMultiRobot : () => [string, [string, string]]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameB);
>console.log(nameB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameB : string
>类型别名 :=> 文字
}
for (let [nameB] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>nameB : string
>类型别名 :=> 文字
>["trimmer", ["trimming", "edging"]] : [string, string[]]
>"trimmer" : "trimmer"
>["trimming", "edging"] : string[]
>"trimming" : "trimming"
>"edging" : "edging"
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameB);
>console.log(nameB) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameB : string
>类型别名 :=> 文字
}

for (let [numberA2, nameA2, skillA2] = robotA, i = 0; i < 1; i++) {
>numberA2 : number
>类型别名 :=> 数字
>nameA2 : string
>类型别名 :=> 文字
>skillA2 : string
>类型别名 :=> 文字
>robotA : [number, string, string]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameA2);
>console.log(nameA2) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA2 : string
>类型别名 :=> 文字
}
for (let [numberA2, nameA2, skillA2] = getRobot(), i = 0; i < 1; i++) {
>numberA2 : number
>类型别名 :=> 数字
>nameA2 : string
>类型别名 :=> 文字
>skillA2 : string
>类型别名 :=> 文字
>getRobot() : [number, string, string]
>getRobot : () => [number, string, string]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameA2);
>console.log(nameA2) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA2 : string
>类型别名 :=> 文字
}
for (let [numberA2, nameA2, skillA2] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>numberA2 : number
>类型别名 :=> 数字
>nameA2 : string
>类型别名 :=> 文字
>skillA2 : string
>类型别名 :=> 文字
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameA2);
>console.log(nameA2) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA2 : string
>类型别名 :=> 文字
}
for (let [nameMA, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0; i < 1; i++) {
>nameMA : string
>类型别名 :=> 文字
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>multiRobotA : [string, [string, string]]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameMA);
>console.log(nameMA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameMA : string
>类型别名 :=> 文字
}
for (let [nameMA, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0; i < 1; i++) {
>nameMA : string
>类型别名 :=> 文字
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>getMultiRobot() : [string, [string, string]]
>getMultiRobot : () => [string, [string, string]]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameMA);
>console.log(nameMA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameMA : string
>类型别名 :=> 文字
}
for (let [nameMA, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>nameMA : string
>类型别名 :=> 文字
>primarySkillA : string
>类型别名 :=> 文字
>secondarySkillA : string
>类型别名 :=> 文字
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>"trimmer" : "trimmer"
>["trimming", "edging"] : [string, string]
>"trimming" : "trimming"
>"edging" : "edging"
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(nameMA);
>console.log(nameMA) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameMA : string
>类型别名 :=> 文字
}

for (let [numberA3, ...robotAInfo] = robotA, i = 0; i < 1; i++) {
>numberA3 : number
>类型别名 :=> 数字
>robotAInfo : (string | number)[]
>robotA : [number, string, string]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(numberA3);
>console.log(numberA3) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberA3 : number
>类型别名 :=> 数字
}
for (let [numberA3, ...robotAInfo] = getRobot(), i = 0; i < 1; i++) {
>numberA3 : number
>类型别名 :=> 数字
>robotAInfo : (string | number)[]
>getRobot() : [number, string, string]
>getRobot : () => [number, string, string]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(numberA3);
>console.log(numberA3) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberA3 : number
>类型别名 :=> 数字
}
for (let [numberA3, ...robotAInfo] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>numberA3 : string | number
>robotAInfo : (string | number)[]
>[2, "trimmer", "trimming"] : (string | number)[]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(numberA3);
>console.log(numberA3) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberA3 : string | number
}
for (let [...multiRobotAInfo] = multiRobotA, i = 0; i < 1; i++) {
>multiRobotAInfo : (string | [string, string])[]
>multiRobotA : [string, [string, string]]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>multiRobotAInfo : (string | [string, string])[]
}
for (let [...multiRobotAInfo] = getMultiRobot(), i = 0; i < 1; i++) {
>multiRobotAInfo : (string | [string, string])[]
>getMultiRobot() : [string, [string, string]]
>getMultiRobot : () => [string, [string, string]]
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>multiRobotAInfo : (string | [string, string])[]
}
for (let [...multiRobotAInfo] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>multiRobotAInfo : (string | string[])[]
>["trimmer", ["trimming", "edging"]] : (string | string[])[]
>"trimmer" : "trimmer"
>["trimming", "edging"] : string[]
>"trimming" : "trimming"
>"edging" : "edging"
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>类型别名 :=> 无值
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>multiRobotAInfo : (string | string[])[]
}
