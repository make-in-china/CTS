=== tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPattern.ts ===
declare var console: {
>console : { log(msg: 任意): 无值; }

    log(msg: any): void;
>log : (msg: 任意) => 无值
>msg : 任意
>类型别名 :=> 任意
}
type Robot = [number, string, string];
>Robot : [数字, 文字, 文字]

type MultiSkilledRobot = [string, [string, string]];
>MultiSkilledRobot : [文字, [文字, 文字]]

let robotA: Robot = [1, "mower", "mowing"];
>robotA : [数字, 文字, 文字]
>Robot : [数字, 文字, 文字]
>[1, "mower", "mowing"] : [数字, 文字, 文字]
>1 : 1
>"mower" : "mower"
>"mowing" : "mowing"

function getRobot() {
>getRobot : () => [数字, 文字, 文字]

    return robotA;
>robotA : [数字, 文字, 文字]
}

let multiRobotA: MultiSkilledRobot = ["mower", ["mowing", ""]];
>multiRobotA : [文字, [文字, 文字]]
>MultiSkilledRobot : [文字, [文字, 文字]]
>["mower", ["mowing", ""]] : [文字, [文字, 文字]]
>"mower" : "mower"
>["mowing", ""] : [文字, 文字]
>"mowing" : "mowing"
>"" : ""

let multiRobotB: MultiSkilledRobot = ["trimmer", ["trimming", "edging"]];
>multiRobotB : [文字, [文字, 文字]]
>MultiSkilledRobot : [文字, [文字, 文字]]
>["trimmer", ["trimming", "edging"]] : [文字, [文字, 文字]]
>"trimmer" : "trimmer"
>["trimming", "edging"] : [文字, 文字]
>"trimming" : "trimming"
>"edging" : "edging"

function getMultiRobot() {
>getMultiRobot : () => [文字, [文字, 文字]]

    return multiRobotA;
>multiRobotA : [文字, [文字, 文字]]
}

for (let [, nameA] = robotA, i = 0; i < 1; i++) {
> : 未定
>类型别名 :=> 未定
>nameA : 文字
>类型别名 :=> 文字
>robotA : [数字, 文字, 文字]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameA);
>console.log(nameA) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameA : 文字
>类型别名 :=> 文字
}
for (let [, nameA] = getRobot(), i = 0; i < 1; i++) {
> : 未定
>类型别名 :=> 未定
>nameA : 文字
>类型别名 :=> 文字
>getRobot() : [数字, 文字, 文字]
>getRobot : () => [数字, 文字, 文字]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameA);
>console.log(nameA) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameA : 文字
>类型别名 :=> 文字
}
for (let [, nameA] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
> : 未定
>类型别名 :=> 未定
>nameA : 文字
>类型别名 :=> 文字
>[2, "trimmer", "trimming"] : [数字, 文字, 文字]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameA);
>console.log(nameA) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameA : 文字
>类型别名 :=> 文字
}
for (let [, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0; i < 1; i++) {
> : 未定
>类型别名 :=> 未定
>primarySkillA : 文字
>类型别名 :=> 文字
>secondarySkillA : 文字
>类型别名 :=> 文字
>multiRobotA : [文字, [文字, 文字]]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(primarySkillA);
>console.log(primarySkillA) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>primarySkillA : 文字
>类型别名 :=> 文字
}
for (let [, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0; i < 1; i++) {
> : 未定
>类型别名 :=> 未定
>primarySkillA : 文字
>类型别名 :=> 文字
>secondarySkillA : 文字
>类型别名 :=> 文字
>getMultiRobot() : [文字, [文字, 文字]]
>getMultiRobot : () => [文字, [文字, 文字]]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(primarySkillA);
>console.log(primarySkillA) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>primarySkillA : 文字
>类型别名 :=> 文字
}
for (let [, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
> : 未定
>类型别名 :=> 未定
>primarySkillA : 文字
>类型别名 :=> 文字
>secondarySkillA : 文字
>类型别名 :=> 文字
>["trimmer", ["trimming", "edging"]] : [文字, [文字, 文字]]
>"trimmer" : "trimmer"
>["trimming", "edging"] : [文字, 文字]
>"trimming" : "trimming"
>"edging" : "edging"
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(primarySkillA);
>console.log(primarySkillA) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>primarySkillA : 文字
>类型别名 :=> 文字
}

for (let [numberB] = robotA, i = 0; i < 1; i++) {
>numberB : 数字
>类型别名 :=> 数字
>robotA : [数字, 文字, 文字]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(numberB);
>console.log(numberB) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>numberB : 数字
>类型别名 :=> 数字
}
for (let [numberB] = getRobot(), i = 0; i < 1; i++) {
>numberB : 数字
>类型别名 :=> 数字
>getRobot() : [数字, 文字, 文字]
>getRobot : () => [数字, 文字, 文字]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(numberB);
>console.log(numberB) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>numberB : 数字
>类型别名 :=> 数字
}
for (let [numberB] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>numberB : 数字
>类型别名 :=> 数字
>[2, "trimmer", "trimming"] : [数字, 文字, 文字]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(numberB);
>console.log(numberB) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>numberB : 数字
>类型别名 :=> 数字
}
for (let [nameB] = multiRobotA, i = 0; i < 1; i++) {
>nameB : 文字
>类型别名 :=> 文字
>multiRobotA : [文字, [文字, 文字]]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameB);
>console.log(nameB) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameB : 文字
>类型别名 :=> 文字
}
for (let [nameB] = getMultiRobot(), i = 0; i < 1; i++) {
>nameB : 文字
>类型别名 :=> 文字
>getMultiRobot() : [文字, [文字, 文字]]
>getMultiRobot : () => [文字, [文字, 文字]]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameB);
>console.log(nameB) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameB : 文字
>类型别名 :=> 文字
}
for (let [nameB] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>nameB : 文字
>类型别名 :=> 文字
>["trimmer", ["trimming", "edging"]] : [文字, 文字[]]
>"trimmer" : "trimmer"
>["trimming", "edging"] : 文字[]
>"trimming" : "trimming"
>"edging" : "edging"
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameB);
>console.log(nameB) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameB : 文字
>类型别名 :=> 文字
}

for (let [numberA2, nameA2, skillA2] = robotA, i = 0; i < 1; i++) {
>numberA2 : 数字
>类型别名 :=> 数字
>nameA2 : 文字
>类型别名 :=> 文字
>skillA2 : 文字
>类型别名 :=> 文字
>robotA : [数字, 文字, 文字]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameA2);
>console.log(nameA2) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameA2 : 文字
>类型别名 :=> 文字
}
for (let [numberA2, nameA2, skillA2] = getRobot(), i = 0; i < 1; i++) {
>numberA2 : 数字
>类型别名 :=> 数字
>nameA2 : 文字
>类型别名 :=> 文字
>skillA2 : 文字
>类型别名 :=> 文字
>getRobot() : [数字, 文字, 文字]
>getRobot : () => [数字, 文字, 文字]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameA2);
>console.log(nameA2) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameA2 : 文字
>类型别名 :=> 文字
}
for (let [numberA2, nameA2, skillA2] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>numberA2 : 数字
>类型别名 :=> 数字
>nameA2 : 文字
>类型别名 :=> 文字
>skillA2 : 文字
>类型别名 :=> 文字
>[2, "trimmer", "trimming"] : [数字, 文字, 文字]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameA2);
>console.log(nameA2) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameA2 : 文字
>类型别名 :=> 文字
}
for (let [nameMA, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0; i < 1; i++) {
>nameMA : 文字
>类型别名 :=> 文字
>primarySkillA : 文字
>类型别名 :=> 文字
>secondarySkillA : 文字
>类型别名 :=> 文字
>multiRobotA : [文字, [文字, 文字]]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameMA);
>console.log(nameMA) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameMA : 文字
>类型别名 :=> 文字
}
for (let [nameMA, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0; i < 1; i++) {
>nameMA : 文字
>类型别名 :=> 文字
>primarySkillA : 文字
>类型别名 :=> 文字
>secondarySkillA : 文字
>类型别名 :=> 文字
>getMultiRobot() : [文字, [文字, 文字]]
>getMultiRobot : () => [文字, [文字, 文字]]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameMA);
>console.log(nameMA) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameMA : 文字
>类型别名 :=> 文字
}
for (let [nameMA, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>nameMA : 文字
>类型别名 :=> 文字
>primarySkillA : 文字
>类型别名 :=> 文字
>secondarySkillA : 文字
>类型别名 :=> 文字
>["trimmer", ["trimming", "edging"]] : [文字, [文字, 文字]]
>"trimmer" : "trimmer"
>["trimming", "edging"] : [文字, 文字]
>"trimming" : "trimming"
>"edging" : "edging"
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(nameMA);
>console.log(nameMA) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>nameMA : 文字
>类型别名 :=> 文字
}

for (let [numberA3, ...robotAInfo] = robotA, i = 0; i < 1; i++) {
>numberA3 : 数字
>类型别名 :=> 数字
>robotAInfo : (文字 | 数字)[]
>robotA : [数字, 文字, 文字]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(numberA3);
>console.log(numberA3) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>numberA3 : 数字
>类型别名 :=> 数字
}
for (let [numberA3, ...robotAInfo] = getRobot(), i = 0; i < 1; i++) {
>numberA3 : 数字
>类型别名 :=> 数字
>robotAInfo : (文字 | 数字)[]
>getRobot() : [数字, 文字, 文字]
>getRobot : () => [数字, 文字, 文字]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(numberA3);
>console.log(numberA3) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>numberA3 : 数字
>类型别名 :=> 数字
}
for (let [numberA3, ...robotAInfo] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>numberA3 : 文字 | 数字
>robotAInfo : (文字 | 数字)[]
>[2, "trimmer", "trimming"] : (文字 | 数字)[]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(numberA3);
>console.log(numberA3) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>numberA3 : 文字 | 数字
}
for (let [...multiRobotAInfo] = multiRobotA, i = 0; i < 1; i++) {
>multiRobotAInfo : (文字 | [文字, 文字])[]
>multiRobotA : [文字, [文字, 文字]]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>multiRobotAInfo : (文字 | [文字, 文字])[]
}
for (let [...multiRobotAInfo] = getMultiRobot(), i = 0; i < 1; i++) {
>multiRobotAInfo : (文字 | [文字, 文字])[]
>getMultiRobot() : [文字, [文字, 文字]]
>getMultiRobot : () => [文字, [文字, 文字]]
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>multiRobotAInfo : (文字 | [文字, 文字])[]
}
for (let [...multiRobotAInfo] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>multiRobotAInfo : (文字 | 文字[])[]
>["trimmer", ["trimming", "edging"]] : (文字 | 文字[])[]
>"trimmer" : "trimmer"
>["trimming", "edging"] : 文字[]
>"trimming" : "trimming"
>"edging" : "edging"
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 1 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>1 : 1
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : 无值
>类型别名 :=> 无值
>console.log : (msg: 任意) => 无值
>console : { log(msg: 任意): 无值; }
>log : (msg: 任意) => 无值
>multiRobotAInfo : (文字 | 文字[])[]
}
