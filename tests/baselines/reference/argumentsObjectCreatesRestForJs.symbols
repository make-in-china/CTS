=== tests/cases/compiler/main.js ===
function allRest() { arguments; }
>allRest : Symbol(allRest, Decl(main.js, 0, 0))
>arguments : Symbol(arguments)
>节点别名 : #arguments => 增强参数集
>符号别名 : #arguments => 增强参数集

allRest();
>allRest : Symbol(allRest, Decl(main.js, 0, 0))

allRest(1, 2, 3);
>allRest : Symbol(allRest, Decl(main.js, 0, 0))

function someRest(x, y) { arguments; }
>someRest : Symbol(someRest, Decl(main.js, 2, 17))
>x : Symbol(x, Decl(main.js, 3, 18))
>y : Symbol(y, Decl(main.js, 3, 20))
>arguments : Symbol(arguments)
>节点别名 : #arguments => 增强参数集
>符号别名 : #arguments => 增强参数集

someRest(); // x and y are still optional because they are in a JS file
>someRest : Symbol(someRest, Decl(main.js, 2, 17))

someRest(1, 2, 3);
>someRest : Symbol(someRest, Decl(main.js, 2, 17))

/**
 * @param {number} x - a thing
 */
function jsdocced(x) { arguments; }
>jsdocced : Symbol(jsdocced, Decl(main.js, 5, 18))
>x : Symbol(x, Decl(main.js, 10, 18))
>arguments : Symbol(arguments)
>节点别名 : #arguments => 增强参数集
>符号别名 : #arguments => 增强参数集

jsdocced(1);
>jsdocced : Symbol(jsdocced, Decl(main.js, 5, 18))

function dontDoubleRest(x, ...y) { arguments; }
>dontDoubleRest : Symbol(dontDoubleRest, Decl(main.js, 11, 12))
>x : Symbol(x, Decl(main.js, 13, 24))
>y : Symbol(y, Decl(main.js, 13, 26))
>arguments : Symbol(arguments)
>节点别名 : #arguments => 增强参数集
>符号别名 : #arguments => 增强参数集

dontDoubleRest(1, 2, 3);
>dontDoubleRest : Symbol(dontDoubleRest, Decl(main.js, 11, 12))


