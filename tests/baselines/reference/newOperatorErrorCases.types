=== tests/cases/conformance/expressions/newOperator/newOperatorErrorCases.ts ===
class C0 {
>C0 : C0

}
class C1 {
>C1 : C1

    constructor(n: number, s: string) { }
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
}

class T<T> {
>T : T<T>
>T : T

    constructor(n?: T) { }
>n : T
>T : T
}

var anyCtor: {
>anyCtor : 新建 () => 任意

    new (): any;
};

var anyCtor1: {
>anyCtor1 : 新建 (n: 任意) => 任意

    new (n): any;
>n : 任意
>类型别名 :=> 任意

};

interface nestedCtor {
>nestedCtor : nestedCtor

    new (): nestedCtor;
>nestedCtor : nestedCtor
}
var nestedCtor: nestedCtor;
>nestedCtor : nestedCtor
>nestedCtor : nestedCtor

// Construct expression with no parentheses for construct signature with > 0 parameters
var b = new C0 32, ''; // Parse error
>b : C0
>new C0 : C0
>C0 : 类为 C0
>32, '' : ""
>32 : 32
>'' : ""

// Generic construct expression with no parentheses
var c1 = new T;
>c1 : T<{}>
>new T : T<{}>
>T : 类为 T

var c1: T<{}>;
>c1 : T<{}>
>T : T<T>

var c2 = new T<string>; // Parse error
>c2 : T<文字>
>new T<string> : T<文字>
>T : 类为 T


// Construct expression of non-void returning function
function fnNumber(): number { return 32; }
>fnNumber : () => 数字
>32 : 32

var s = new fnNumber(); // Error
>s : 任意
>类型别名 :=> 任意
>new fnNumber() : 任意
>类型别名 :=> 任意
>fnNumber : () => 数字

