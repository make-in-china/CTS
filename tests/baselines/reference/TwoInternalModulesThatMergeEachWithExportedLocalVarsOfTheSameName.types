=== tests/cases/conformance/internalModules/DeclarationMerging/part1.ts ===
export module A {
>A : typeof A

    export interface Point {
>Point : Point

        x: number;
>x : number
>类型别名 :=> 数字

        y: number;
>y : number
>类型别名 :=> 数字
    }

    export module Utils {
>Utils : typeof Utils

        export function mirror<T extends Point>(p: T) {
>mirror : <T extends Point>(p: T) => { x: number; y: number; }
>T : T
>Point : Point
>p : T
>T : T

            return { x: p.y, y: p.x };
>{ x: p.y, y: p.x } : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>p.y : number
>类型别名 :=> 数字
>p : T
>y : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>p.x : number
>类型别名 :=> 数字
>p : T
>x : number
>类型别名 :=> 数字
        }
    }

    export var Origin: Point = { x: 0, y: 0 };
>Origin : Point
>Point : Point
>{ x: 0, y: 0 } : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : number
>类型别名 :=> 数字
>0 : 0
}

=== tests/cases/conformance/internalModules/DeclarationMerging/part2.ts ===
export module A {
>A : typeof A

    // collision with 'Origin' var in other part of merged module
    export var Origin: Point = { x: 0, y: 0 };
>Origin : any
>类型别名 :=> 任意
>Point : No type information available!
>{ x: 0, y: 0 } : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : number
>类型别名 :=> 数字
>0 : 0

    export module Utils {
>Utils : typeof Utils

        export class Plane {
>Plane : Plane

            constructor(public tl: Point, public br: Point) { }
>tl : any
>类型别名 :=> 任意
>Point : No type information available!
>br : any
>类型别名 :=> 任意
>Point : No type information available!
        }
    }
}

