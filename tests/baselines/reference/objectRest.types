=== tests/cases/conformance/types/rest/objectRest.ts ===
var o = { a: 1, b: 'no' }
>o : { a: 数字; b: 文字; }
>{ a: 1, b: 'no' } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>'no' : "no"

var { ...clone } = o;
>clone : { a: 数字; b: 文字; }
>o : { a: 数字; b: 文字; }

var { a, ...justB } = o;
>a : 数字
>类型别名 :=> 数字
>justB : { b: 文字; }
>o : { a: 数字; b: 文字; }

var { a, b: renamed, ...empty } = o;
>a : 数字
>类型别名 :=> 数字
>b : 任意
>类型别名 :=> 任意
>renamed : 文字
>类型别名 :=> 文字
>empty : {}
>o : { a: 数字; b: 文字; }

var { ['b']: renamed, ...justA } = o;
>'b' : "b"
>renamed : 文字
>类型别名 :=> 文字
>justA : { a: 数字; }
>o : { a: 数字; b: 文字; }

var { 'b': renamed, ...justA } = o;
>renamed : 文字
>类型别名 :=> 文字
>justA : { a: 数字; }
>o : { a: 数字; b: 文字; }

var { b: { '0': n, '1': oooo }, ...justA } = o;
>b : 任意
>类型别名 :=> 任意
>n : 文字
>类型别名 :=> 文字
>oooo : 文字
>类型别名 :=> 文字
>justA : { a: 数字; }
>o : { a: 数字; b: 文字; }

let o2 = { c: 'terrible idea?', d: 'yes' };
>o2 : { c: 文字; d: 文字; }
>{ c: 'terrible idea?', d: 'yes' } : { c: 文字; d: 文字; }
>c : 文字
>类型别名 :=> 文字
>'terrible idea?' : "terrible idea?"
>d : 文字
>类型别名 :=> 文字
>'yes' : "yes"

var { d: renamed, ...d } = o2;
>d : 任意
>类型别名 :=> 任意
>renamed : 文字
>类型别名 :=> 文字
>d : { c: 文字; }
>o2 : { c: 文字; d: 文字; }

let nestedrest: { x: number, n1: { y: number, n2: { z: number, n3: { n4: number } } }, rest: number, restrest: number };
>nestedrest : { x: 数字; n1: { y: 数字; n2: { z: 数字; n3: { n4: 数字; }; }; }; rest: 数字; restrest: 数字; }
>x : 数字
>类型别名 :=> 数字
>n1 : { y: 数字; n2: { z: 数字; n3: { n4: 数字; }; }; }
>y : 数字
>类型别名 :=> 数字
>n2 : { z: 数字; n3: { n4: 数字; }; }
>z : 数字
>类型别名 :=> 数字
>n3 : { n4: 数字; }
>n4 : 数字
>类型别名 :=> 数字
>rest : 数字
>类型别名 :=> 数字
>restrest : 数字
>类型别名 :=> 数字

var { x, n1: { y, n2: { z, n3: { ...nr } } }, ...restrest } = nestedrest;
>x : 数字
>类型别名 :=> 数字
>n1 : 任意
>类型别名 :=> 任意
>y : 数字
>类型别名 :=> 数字
>n2 : 任意
>类型别名 :=> 任意
>z : 数字
>类型别名 :=> 数字
>n3 : 任意
>类型别名 :=> 任意
>nr : { n4: 数字; }
>restrest : { rest: 数字; restrest: 数字; }
>nestedrest : { x: 数字; n1: { y: 数字; n2: { z: 数字; n3: { n4: 数字; }; }; }; rest: 数字; restrest: 数字; }

let complex: { x: { ka, ki }, y: number };
>complex : { x: { ka: 任意; ki: 任意; }; y: 数字; }
>x : { ka: 任意; ki: 任意; }
>ka : 任意
>类型别名 :=> 任意
>ki : 任意
>类型别名 :=> 任意
>y : 数字
>类型别名 :=> 数字

var { x: { ka, ...nested }, y: other, ...rest } = complex;
>x : 任意
>类型别名 :=> 任意
>ka : 任意
>类型别名 :=> 任意
>nested : { ki: 任意; }
>y : 任意
>类型别名 :=> 任意
>other : 数字
>类型别名 :=> 数字
>rest : {}
>complex : { x: { ka: 任意; ki: 任意; }; y: 数字; }

({x: { ka, ...nested }, y: other, ...rest} = complex);
>({x: { ka, ...nested }, y: other, ...rest} = complex) : { x: { ka: 任意; ki: 任意; }; y: 数字; }
>{x: { ka, ...nested }, y: other, ...rest} = complex : { x: { ka: 任意; ki: 任意; }; y: 数字; }
>{x: { ka, ...nested }, y: other, ...rest} : { x: { ki: 任意; ka: 任意; }; y: 数字; }
>x : { ki: 任意; ka: 任意; }
>{ ka, ...nested } : { ki: 任意; ka: 任意; }
>ka : 任意
>类型别名 :=> 任意
>nested : { ki: 任意; }
>y : 数字
>类型别名 :=> 数字
>other : 数字
>类型别名 :=> 数字
>rest : {}
>complex : { x: { ka: 任意; ki: 任意; }; y: 数字; }

var { x, ...fresh } = { x: 1, y: 2 };
>x : 数字
>类型别名 :=> 数字
>fresh : { y: 数字; }
>{ x: 1, y: 2 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

({ x, ...fresh } = { x: 1, y: 2 });
>({ x, ...fresh } = { x: 1, y: 2 }) : { x: 数字; y: 数字; }
>{ x, ...fresh } = { x: 1, y: 2 } : { x: 数字; y: 数字; }
>{ x, ...fresh } : { y: 数字; x: 数字; }
>x : 数字
>类型别名 :=> 数字
>fresh : { y: 数字; }
>{ x: 1, y: 2 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

class Removable {
>Removable : Removable

    private x: number;
>x : 数字
>类型别名 :=> 数字

    protected y: number;
>y : 数字
>类型别名 :=> 数字

    set z(value: number) { }
>z : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字

    get both(): number { return 12 }
>both : 数字
>类型别名 :=> 数字
>12 : 12

    set both(value: number) { }
>both : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字

    m() { }
>m : () => 无值

    removed: string;
>removed : 文字
>类型别名 :=> 文字

    remainder: string;
>remainder : 文字
>类型别名 :=> 文字
}
interface I {
>I : I

    m(): void;
>m : () => 无值

    removed: string;
>removed : 文字
>类型别名 :=> 文字

    remainder: string;
>remainder : 文字
>类型别名 :=> 文字
}
var removable = new Removable();
>removable : Removable
>new Removable() : Removable
>Removable : 类为 Removable

var { removed, ...removableRest } = removable;
>removed : 文字
>类型别名 :=> 文字
>removableRest : { both: 数字; remainder: 文字; }
>removable : Removable

var i: I = removable;
>i : I
>I : I
>removable : Removable

var { removed, ...removableRest2 } = i;
>removed : 文字
>类型别名 :=> 文字
>removableRest2 : { m(): 无值; remainder: 文字; }
>i : I

let computed = 'b';
>computed : 文字
>类型别名 :=> 文字
>'b' : "b"

let computed2 = 'a';
>computed2 : 文字
>类型别名 :=> 文字
>'a' : "a"

var { [computed]: stillNotGreat, [computed2]: soSo,  ...o } = o;
>computed : 文字
>类型别名 :=> 文字
>stillNotGreat : 任意
>类型别名 :=> 任意
>computed2 : 文字
>类型别名 :=> 文字
>soSo : 任意
>类型别名 :=> 任意
>o : { a: 数字; b: 文字; }
>o : { a: 数字; b: 文字; }

({ [computed]: stillNotGreat, [computed2]: soSo, ...o } = o);
>({ [computed]: stillNotGreat, [computed2]: soSo, ...o } = o) : { a: 数字; b: 文字; }
>{ [computed]: stillNotGreat, [computed2]: soSo, ...o } = o : { a: 数字; b: 文字; }
>{ [computed]: stillNotGreat, [computed2]: soSo, ...o } : { a: 数字; b: 文字; }
>computed : 文字
>类型别名 :=> 文字
>stillNotGreat : 任意
>类型别名 :=> 任意
>computed2 : 文字
>类型别名 :=> 文字
>soSo : 任意
>类型别名 :=> 任意
>o : { a: 数字; b: 文字; }
>o : { a: 数字; b: 文字; }

var noContextualType = ({ aNumber = 12, ...notEmptyObject }) => aNumber + notEmptyObject.anythingGoes;
>noContextualType : ({ aNumber, ...notEmptyObject }: { [x: 文字]: 任意; aNumber?: 数字; }) => 任意
>({ aNumber = 12, ...notEmptyObject }) => aNumber + notEmptyObject.anythingGoes : ({ aNumber, ...notEmptyObject }: { [x: 文字]: 任意; aNumber?: 数字; }) => 任意
>aNumber : 数字
>类型别名 :=> 数字
>12 : 12
>notEmptyObject : { [x: 文字]: 任意; }
>aNumber + notEmptyObject.anythingGoes : 任意
>类型别名 :=> 任意
>aNumber : 数字
>类型别名 :=> 数字
>notEmptyObject.anythingGoes : 任意
>类型别名 :=> 任意
>notEmptyObject : { [x: 文字]: 任意; }
>anythingGoes : 任意
>类型别名 :=> 任意

