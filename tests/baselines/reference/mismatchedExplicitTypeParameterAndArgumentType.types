=== tests/cases/compiler/mismatchedExplicitTypeParameterAndArgumentType.ts ===
function map<T, U>(xs: T[], f: (x: T) => U) {
>map : <T, U>(xs: T[], f: (x: T) => U) => U[]
>T : T
>U : U
>xs : T[]
>T : T
>f : (x: T) => U
>x : T
>T : T
>U : U

    var ys: U[] = [];
>ys : U[]
>U : U
>[] : 未定[]

    xs.forEach(x => ys.push(f(x)));
>xs.forEach(x => ys.push(f(x))) : 无值
>类型别名 :=> 无值
>xs.forEach : (callbackfn: (value: T, index: 数字, array: T[]) => 无值, thisArg?: 任意) => 无值
>xs : T[]
>forEach : (callbackfn: (value: T, index: 数字, array: T[]) => 无值, thisArg?: 任意) => 无值
>x => ys.push(f(x)) : (x: T) => 数字
>x : T
>ys.push(f(x)) : 数字
>类型别名 :=> 数字
>ys.push : (...items: U[]) => 数字
>ys : U[]
>push : (...items: U[]) => 数字
>f(x) : U
>f : (x: T) => U
>x : T

    return ys;
>ys : U[]
}

var r0 = map([1, ""], (x) => x.toString());
>r0 : 文字[]
>map([1, ""], (x) => x.toString()) : 文字[]
>map : <T, U>(xs: T[], f: (x: T) => U) => U[]
>[1, ""] : (文字 | 数字)[]
>1 : 1
>"" : ""
>(x) => x.toString() : (x: 文字 | 数字) => 文字
>x : 文字 | 数字
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : (() => 文字) | ((radix?: 数字) => 文字)
>x : 文字 | 数字
>toString : (() => 文字) | ((radix?: 数字) => 文字)

var r5 = map<any, any>([1, ""], (x) => x.toString());
>r5 : 任意[]
>map<any, any>([1, ""], (x) => x.toString()) : 任意[]
>map : <T, U>(xs: T[], f: (x: T) => U) => U[]
>[1, ""] : (文字 | 数字)[]
>1 : 1
>"" : ""
>(x) => x.toString() : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x.toString() : 任意
>类型别名 :=> 任意
>x.toString : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>toString : 任意
>类型别名 :=> 任意

var r6 = map<Object, Object>([1, ""], (x) => x.toString());
>r6 : Object[]
>map<Object, Object>([1, ""], (x) => x.toString()) : Object[]
>map : <T, U>(xs: T[], f: (x: T) => U) => U[]
>Object : Object
>Object : Object
>[1, ""] : (文字 | 数字)[]
>1 : 1
>"" : ""
>(x) => x.toString() : (x: Object) => 文字
>x : Object
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : () => 文字
>x : Object
>toString : () => 文字

var r7 = map<number, string>([1, ""], (x) => x.toString()); // error
>r7 : 任意
>类型别名 :=> 任意
>map<number, string>([1, ""], (x) => x.toString()) : 任意
>类型别名 :=> 任意
>map : <T, U>(xs: T[], f: (x: T) => U) => U[]
>[1, ""] : (文字 | 数字)[]
>1 : 1
>"" : ""
>(x) => x.toString() : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x.toString() : 任意
>类型别名 :=> 任意
>x.toString : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>toString : 任意
>类型别名 :=> 任意

var r7b = map<number>([1, ""], (x) => x.toString()); // error
>r7b : 任意
>类型别名 :=> 任意
>map<number>([1, ""], (x) => x.toString()) : 任意
>类型别名 :=> 任意
>map : <T, U>(xs: T[], f: (x: T) => U) => U[]
>[1, ""] : (文字 | 数字)[]
>1 : 1
>"" : ""
>(x) => x.toString() : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x.toString() : 任意
>类型别名 :=> 任意
>x.toString : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>toString : 任意
>类型别名 :=> 任意

var r8 = map<any, string>([1, ""], (x) => x.toString());
>r8 : 文字[]
>map<any, string>([1, ""], (x) => x.toString()) : 文字[]
>map : <T, U>(xs: T[], f: (x: T) => U) => U[]
>[1, ""] : (文字 | 数字)[]
>1 : 1
>"" : ""
>(x) => x.toString() : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x.toString() : 任意
>类型别名 :=> 任意
>x.toString : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>toString : 任意
>类型别名 :=> 任意

