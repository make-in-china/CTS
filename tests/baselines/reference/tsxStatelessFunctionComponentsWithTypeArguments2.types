=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react')
>React : 类为 React

declare function ComponentSpecific1<U>(l: {prop: U, "ignore-prop": string}): JSX.Element;
>ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": 文字; }) => JSX.Element
>U : U
>l : { prop: U; "ignore-prop": 文字; }
>prop : U
>U : U
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

declare function ComponentSpecific2<U>(l: {prop: U}): JSX.Element;
>ComponentSpecific2 : <U>(l: { prop: U; }) => JSX.Element
>U : U
>l : { prop: U; }
>prop : U
>U : U
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

// Error
function Bar<T extends {prop: number}>(arg: T) {
>Bar : <T 扩展 { prop: 数字; }>(arg: T) => 无值
>T : T
>prop : 数字
>类型别名 :=> 数字
>arg : T
>T : T

    let a1 = <ComponentSpecific1 {...arg} ignore-prop={10} />;
>a1 : JSX.Element
><ComponentSpecific1 {...arg} ignore-prop={10} /> : JSX.Element
>ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": 文字; }) => JSX.Element
>arg : T
>ignore-prop : 数字
>类型别名 :=> 数字
>10 : 10
 }

// Error
function Baz<T>(arg: T) {
>Baz : <T>(arg: T) => 无值
>T : T
>arg : T
>T : T

    let a0 = <ComponentSpecific1 {...arg} />
>a0 : JSX.Element
><ComponentSpecific1 {...arg} /> : JSX.Element
>ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": 文字; }) => JSX.Element
>arg : T
}

declare function Link<U>(l: {func: (arg: U)=>void}): JSX.Element;
>Link : <U>(l: { func: (arg: U) => 无值; }) => JSX.Element
>U : U
>l : { func: (arg: U) => 无值; }
>func : (arg: U) => 无值
>arg : U
>U : U
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

// Error
function createLink(func: (a: number, b: string)=>void) {
>createLink : (func: (a: 数字, b: 文字) => 无值) => 无值
>func : (a: 数字, b: 文字) => 无值
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

    let o = <Link func={func} />
>o : JSX.Element
><Link func={func} /> : JSX.Element
>Link : <U>(l: { func: (arg: U) => 无值; }) => JSX.Element
>func : (a: 数字, b: 文字) => 无值
>func : (a: 数字, b: 文字) => 无值
}

interface InferParamProp<T> {
>InferParamProp : InferParamProp<T>
>T : T

    values: Array<T>;
>values : T[]
>Array : T[]
>T : T

    selectHandler: (selectedVal: T) => void;
>selectHandler : (selectedVal: T) => 无值
>selectedVal : T
>T : T
}

declare function InferParamComponent<T>(attr: InferParamProp<T>): JSX.Element;
>InferParamComponent : <T>(attr: InferParamProp<T>) => JSX.Element
>T : T
>attr : InferParamProp<T>
>InferParamProp : InferParamProp<T>
>T : T
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

// Error
let i = <InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val: string) => { }} />;
>i : JSX.Element
><InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val: string) => { }} /> : JSX.Element
>InferParamComponent : <T>(attr: InferParamProp<T>) => JSX.Element
>values : 数字[]
>[1, 2, 3, 4] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>selectHandler : (val: 文字) => 无值
>(val: string) => { } : (val: 文字) => 无值
>val : 文字
>类型别名 :=> 文字

