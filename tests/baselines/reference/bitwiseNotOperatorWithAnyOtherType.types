=== tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithAnyOtherType.ts ===
// ~ operator on any type

var ANY: any;
>ANY : any
>类型别名 :=> 任意

var ANY1;
>ANY1 : any
>类型别名 :=> 任意

var ANY2: any[] = ["", ""];
>ANY2 : any[]
>["", ""] : string[]
>"" : ""
>"" : ""

var obj: () => {}
>obj : () => {}

var obj1 = { x:"", y: () => { }};
>obj1 : { x: string; y: () => void; }
>{ x:"", y: () => { }} : { x: string; y: () => void; }
>x : string
>类型别名 :=> 文字
>"" : ""
>y : () => void
>() => { } : () => void

function foo(): any {
>foo : () => any

    var a;
>a : any
>类型别名 :=> 任意

    return a;
>a : any
>类型别名 :=> 任意
}
class A {
>A : A

    public a: any;
>a : any
>类型别名 :=> 任意

    static foo() {
>foo : () => any

        var a;
>a : any
>类型别名 :=> 任意

        return a;
>a : any
>类型别名 :=> 任意
    }
}
module M {
>M : typeof M

    export var n: any;
>n : any
>类型别名 :=> 任意
}
var objA = new A();
>objA : A
>new A() : A
>A : typeof A

// any other type var
var ResultIsNumber = ~ANY1;
>ResultIsNumber : number
>类型别名 :=> 数字
>~ANY1 : number
>类型别名 :=> 数字
>ANY1 : any
>类型别名 :=> 任意

var ResultIsNumber1 = ~ANY2;
>ResultIsNumber1 : number
>类型别名 :=> 数字
>~ANY2 : number
>类型别名 :=> 数字
>ANY2 : any[]

var ResultIsNumber2 = ~A;
>ResultIsNumber2 : number
>类型别名 :=> 数字
>~A : number
>类型别名 :=> 数字
>A : typeof A

var ResultIsNumber3 = ~M;
>ResultIsNumber3 : number
>类型别名 :=> 数字
>~M : number
>类型别名 :=> 数字
>M : typeof M

var ResultIsNumber4 = ~obj;
>ResultIsNumber4 : number
>类型别名 :=> 数字
>~obj : number
>类型别名 :=> 数字
>obj : () => {}

var ResultIsNumber5 = ~obj1;
>ResultIsNumber5 : number
>类型别名 :=> 数字
>~obj1 : number
>类型别名 :=> 数字
>obj1 : { x: string; y: () => void; }

// any type literal
var ResultIsNumber6 = ~undefined;
>ResultIsNumber6 : number
>类型别名 :=> 数字
>~undefined : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定

var ResultIsNumber7 = ~null;
>ResultIsNumber7 : number
>类型别名 :=> 数字
>~null : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

// any type expressions
var ResultIsNumber8 = ~ANY2[0]
>ResultIsNumber8 : number
>类型别名 :=> 数字
>~ANY2[0] : number
>类型别名 :=> 数字
>ANY2[0] : any
>类型别名 :=> 任意
>ANY2 : any[]
>0 : 0

var ResultIsNumber9 = ~obj1.x;
>ResultIsNumber9 : number
>类型别名 :=> 数字
>~obj1.x : number
>类型别名 :=> 数字
>obj1.x : string
>类型别名 :=> 文字
>obj1 : { x: string; y: () => void; }
>x : string
>类型别名 :=> 文字

var ResultIsNumber10 = ~obj1.y;
>ResultIsNumber10 : number
>类型别名 :=> 数字
>~obj1.y : number
>类型别名 :=> 数字
>obj1.y : () => void
>obj1 : { x: string; y: () => void; }
>y : () => void

var ResultIsNumber11 = ~objA.a;
>ResultIsNumber11 : number
>类型别名 :=> 数字
>~objA.a : number
>类型别名 :=> 数字
>objA.a : any
>类型别名 :=> 任意
>objA : A
>a : any
>类型别名 :=> 任意

var ResultIsNumber12 = ~M.n;
>ResultIsNumber12 : number
>类型别名 :=> 数字
>~M.n : number
>类型别名 :=> 数字
>M.n : any
>类型别名 :=> 任意
>M : typeof M
>n : any
>类型别名 :=> 任意

var ResultIsNumber13 = ~foo();
>ResultIsNumber13 : number
>类型别名 :=> 数字
>~foo() : number
>类型别名 :=> 数字
>foo() : any
>类型别名 :=> 任意
>foo : () => any

var ResultIsNumber14 = ~A.foo();
>ResultIsNumber14 : number
>类型别名 :=> 数字
>~A.foo() : number
>类型别名 :=> 数字
>A.foo() : any
>类型别名 :=> 任意
>A.foo : () => any
>A : typeof A
>foo : () => any

var ResultIsNumber15 = ~(ANY + ANY1);
>ResultIsNumber15 : number
>类型别名 :=> 数字
>~(ANY + ANY1) : number
>类型别名 :=> 数字
>(ANY + ANY1) : any
>类型别名 :=> 任意
>ANY + ANY1 : any
>类型别名 :=> 任意
>ANY : any
>类型别名 :=> 任意
>ANY1 : any
>类型别名 :=> 任意

var ResultIsNumber16 = ~(null + undefined);
>ResultIsNumber16 : number
>类型别名 :=> 数字
>~(null + undefined) : number
>类型别名 :=> 数字
>(null + undefined) : any
>类型别名 :=> 任意
>null + undefined : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>undefined : undefined
>类型别名 :=> 未定

var ResultIsNumber17 = ~(null + null);
>ResultIsNumber17 : number
>类型别名 :=> 数字
>~(null + null) : number
>类型别名 :=> 数字
>(null + null) : any
>类型别名 :=> 任意
>null + null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

var ResultIsNumber18 = ~(undefined + undefined);
>ResultIsNumber18 : number
>类型别名 :=> 数字
>~(undefined + undefined) : number
>类型别名 :=> 数字
>(undefined + undefined) : any
>类型别名 :=> 任意
>undefined + undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

// multiple ~ operators
var ResultIsNumber19 = ~~ANY;
>ResultIsNumber19 : number
>类型别名 :=> 数字
>~~ANY : number
>类型别名 :=> 数字
>~ANY : number
>类型别名 :=> 数字
>ANY : any
>类型别名 :=> 任意

var ResultIsNumber20 = ~~~(ANY + ANY1);
>ResultIsNumber20 : number
>类型别名 :=> 数字
>~~~(ANY + ANY1) : number
>类型别名 :=> 数字
>~~(ANY + ANY1) : number
>类型别名 :=> 数字
>~(ANY + ANY1) : number
>类型别名 :=> 数字
>(ANY + ANY1) : any
>类型别名 :=> 任意
>ANY + ANY1 : any
>类型别名 :=> 任意
>ANY : any
>类型别名 :=> 任意
>ANY1 : any
>类型别名 :=> 任意

//miss assignment operators
~ANY;
>~ANY : number
>类型别名 :=> 数字
>ANY : any
>类型别名 :=> 任意

~ANY1;
>~ANY1 : number
>类型别名 :=> 数字
>ANY1 : any
>类型别名 :=> 任意

~ANY2[0];
>~ANY2[0] : number
>类型别名 :=> 数字
>ANY2[0] : any
>类型别名 :=> 任意
>ANY2 : any[]
>0 : 0

~ANY, ANY1;
>~ANY, ANY1 : any
>类型别名 :=> 任意
>~ANY : number
>类型别名 :=> 数字
>ANY : any
>类型别名 :=> 任意
>ANY1 : any
>类型别名 :=> 任意

~obj1.y;
>~obj1.y : number
>类型别名 :=> 数字
>obj1.y : () => void
>obj1 : { x: string; y: () => void; }
>y : () => void

~objA.a;
>~objA.a : number
>类型别名 :=> 数字
>objA.a : any
>类型别名 :=> 任意
>objA : A
>a : any
>类型别名 :=> 任意

~M.n;
>~M.n : number
>类型别名 :=> 数字
>M.n : any
>类型别名 :=> 任意
>M : typeof M
>n : any
>类型别名 :=> 任意

~~obj1.x;
>~~obj1.x : number
>类型别名 :=> 数字
>~obj1.x : number
>类型别名 :=> 数字
>obj1.x : string
>类型别名 :=> 文字
>obj1 : { x: string; y: () => void; }
>x : string
>类型别名 :=> 文字

