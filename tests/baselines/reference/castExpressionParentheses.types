=== tests/cases/compiler/castExpressionParentheses.ts ===
declare var a;
>a : 任意
>类型别名 :=> 任意

// parentheses should be omitted
// literals
(<any>{a:0});  
>(<any>{a:0}) : 任意
>类型别名 :=> 任意
><any>{a:0} : 任意
>类型别名 :=> 任意
>{a:0} : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0

(<any>[1,3,]); 
>(<any>[1,3,]) : 任意
>类型别名 :=> 任意
><any>[1,3,] : 任意
>类型别名 :=> 任意
>[1,3,] : 数字[]
>1 : 1
>3 : 3

(<any>"string"); 
>(<any>"string") : 任意
>类型别名 :=> 任意
><any>"string" : 任意
>类型别名 :=> 任意
>"string" : "string"

(<any>23.0); 
>(<any>23.0) : 任意
>类型别名 :=> 任意
><any>23.0 : 任意
>类型别名 :=> 任意
>23.0 : 23

(<any>1); 
>(<any>1) : 任意
>类型别名 :=> 任意
><any>1 : 任意
>类型别名 :=> 任意
>1 : 1

(<any>1.);
>(<any>1.) : 任意
>类型别名 :=> 任意
><any>1. : 任意
>类型别名 :=> 任意
>1. : 1

(<any>1.0);
>(<any>1.0) : 任意
>类型别名 :=> 任意
><any>1.0 : 任意
>类型别名 :=> 任意
>1.0 : 1

(<any>12e+34);
>(<any>12e+34) : 任意
>类型别名 :=> 任意
><any>12e+34 : 任意
>类型别名 :=> 任意
>12e+34 : 1.2e+35

(<any>0xff);
>(<any>0xff) : 任意
>类型别名 :=> 任意
><any>0xff : 任意
>类型别名 :=> 任意
>0xff : 255

(<any>/regexp/g); 
>(<any>/regexp/g) : 任意
>类型别名 :=> 任意
><any>/regexp/g : 任意
>类型别名 :=> 任意
>/regexp/g : RegExp

(<any>false); 
>(<any>false) : 任意
>类型别名 :=> 任意
><any>false : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假

(<any>true); 
>(<any>true) : 任意
>类型别名 :=> 任意
><any>true : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真

(<any>null); 
>(<any>null) : 任意
>类型别名 :=> 任意
><any>null : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

// names and dotted names
(<any>this); 
>(<any>this) : 任意
>类型别名 :=> 任意
><any>this : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意

(<any>this.x); 
>(<any>this.x) : 任意
>类型别名 :=> 任意
><any>this.x : 任意
>类型别名 :=> 任意
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

(<any>(<any>a).x);
>(<any>(<any>a).x) : 任意
>类型别名 :=> 任意
><any>(<any>a).x : 任意
>类型别名 :=> 任意
>(<any>a).x : 任意
>类型别名 :=> 任意
>(<any>a) : 任意
>类型别名 :=> 任意
><any>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

(<any><any>a);
>(<any><any>a) : 任意
>类型别名 :=> 任意
><any><any>a : 任意
>类型别名 :=> 任意
><any>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

(<any>a[0]);
>(<any>a[0]) : 任意
>类型别名 :=> 任意
><any>a[0] : 任意
>类型别名 :=> 任意
>a[0] : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>0 : 0

(<any>a.b["0"]);
>(<any>a.b["0"]) : 任意
>类型别名 :=> 任意
><any>a.b["0"] : 任意
>类型别名 :=> 任意
>a.b["0"] : 任意
>类型别名 :=> 任意
>a.b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>"0" : "0"

(<any>a()).x;
>(<any>a()).x : 任意
>类型别名 :=> 任意
>(<any>a()) : 任意
>类型别名 :=> 任意
><any>a() : 任意
>类型别名 :=> 任意
>a() : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

(<any>1).foo;
>(<any>1).foo : 任意
>类型别名 :=> 任意
>(<any>1) : 任意
>类型别名 :=> 任意
><any>1 : 任意
>类型别名 :=> 任意
>1 : 1
>foo : 任意
>类型别名 :=> 任意

(<any>1.).foo;
>(<any>1.).foo : 任意
>类型别名 :=> 任意
>(<any>1.) : 任意
>类型别名 :=> 任意
><any>1. : 任意
>类型别名 :=> 任意
>1. : 1
>foo : 任意
>类型别名 :=> 任意

(<any>1.0).foo;
>(<any>1.0).foo : 任意
>类型别名 :=> 任意
>(<any>1.0) : 任意
>类型别名 :=> 任意
><any>1.0 : 任意
>类型别名 :=> 任意
>1.0 : 1
>foo : 任意
>类型别名 :=> 任意

(<any>12e+34).foo;
>(<any>12e+34).foo : 任意
>类型别名 :=> 任意
>(<any>12e+34) : 任意
>类型别名 :=> 任意
><any>12e+34 : 任意
>类型别名 :=> 任意
>12e+34 : 1.2e+35
>foo : 任意
>类型别名 :=> 任意

(<any>0xff).foo;
>(<any>0xff).foo : 任意
>类型别名 :=> 任意
>(<any>0xff) : 任意
>类型别名 :=> 任意
><any>0xff : 任意
>类型别名 :=> 任意
>0xff : 255
>foo : 任意
>类型别名 :=> 任意

declare var A;
>A : 任意
>类型别名 :=> 任意

// should keep the parentheses in emit
(<any>(1.0)); 
>(<any>(1.0)) : 任意
>类型别名 :=> 任意
><any>(1.0) : 任意
>类型别名 :=> 任意
>(1.0) : 1
>1.0 : 1

(<any>new A).foo; 
>(<any>new A).foo : 任意
>类型别名 :=> 任意
>(<any>new A) : 任意
>类型别名 :=> 任意
><any>new A : 任意
>类型别名 :=> 任意
>new A : 任意
>类型别名 :=> 任意
>A : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意

(<any>typeof A).x; 
>(<any>typeof A).x : 任意
>类型别名 :=> 任意
>(<any>typeof A) : 任意
>类型别名 :=> 任意
><any>typeof A : 任意
>类型别名 :=> 任意
>typeof A : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>A : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

(<any>-A).x; 
>(<any>-A).x : 任意
>类型别名 :=> 任意
>(<any>-A) : 任意
>类型别名 :=> 任意
><any>-A : 任意
>类型别名 :=> 任意
>-A : 数字
>类型别名 :=> 数字
>A : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

new (<any>A());
>new (<any>A()) : 任意
>类型别名 :=> 任意
>(<any>A()) : 任意
>类型别名 :=> 任意
><any>A() : 任意
>类型别名 :=> 任意
>A() : 任意
>类型别名 :=> 任意
>A : 任意
>类型别名 :=> 任意

(<Tany>()=> {})();
>(<Tany>()=> {})() : 无值
>类型别名 :=> 无值
>(<Tany>()=> {}) : <Tany>() => 无值
><Tany>()=> {} : <Tany>() => 无值
>Tany : Tany

(<any>function foo() { })();
>(<any>function foo() { })() : 任意
>类型别名 :=> 任意
>(<any>function foo() { }) : 任意
>类型别名 :=> 任意
><any>function foo() { } : 任意
>类型别名 :=> 任意
>function foo() { } : () => 无值
>foo : () => 无值

(<any><number><any>-A).x; 
>(<any><number><any>-A).x : 任意
>类型别名 :=> 任意
>(<any><number><any>-A) : 任意
>类型别名 :=> 任意
><any><number><any>-A : 任意
>类型别名 :=> 任意
><number><any>-A : 数字
>类型别名 :=> 数字
><any>-A : 任意
>类型别名 :=> 任意
>-A : 数字
>类型别名 :=> 数字
>A : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

// nested cast, should keep one pair of parenthese
(<any><number>(<any>-A)).x; 
>(<any><number>(<any>-A)).x : 任意
>类型别名 :=> 任意
>(<any><number>(<any>-A)) : 任意
>类型别名 :=> 任意
><any><number>(<any>-A) : 任意
>类型别名 :=> 任意
><number>(<any>-A) : 数字
>类型别名 :=> 数字
>(<any>-A) : 任意
>类型别名 :=> 任意
><any>-A : 任意
>类型别名 :=> 任意
>-A : 数字
>类型别名 :=> 数字
>A : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

// nested parenthesized expression, should keep one pair of parenthese
(<any>(A)) 
>(<any>(A)) : 任意
>类型别名 :=> 任意
><any>(A) : 任意
>类型别名 :=> 任意
>(A) : 任意
>类型别名 :=> 任意
>A : 任意
>类型别名 :=> 任意


