=== tests/cases/compiler/bestChoiceType.ts ===
// Repro from #10041

(''.match(/ /) || []).map(s => s.toLowerCase());
>(''.match(/ /) || []).map(s => s.toLowerCase()) : 文字[]
>(''.match(/ /) || []).map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>(''.match(/ /) || []) : RegExpMatchArray
>''.match(/ /) || [] : RegExpMatchArray
>''.match(/ /) : RegExpMatchArray | 空值
>''.match : (regexp: 文字 | RegExp) => RegExpMatchArray | 空值
>'' : ""
>match : (regexp: 文字 | RegExp) => RegExpMatchArray | 空值
>/ / : RegExp
>[] : 不及[]
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>s => s.toLowerCase() : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s.toLowerCase() : 文字
>类型别名 :=> 文字
>s.toLowerCase : () => 文字
>s : 文字
>类型别名 :=> 文字
>toLowerCase : () => 文字

// Similar cases

function f1() {
>f1 : () => 无值

    let x = ''.match(/ /);
>x : RegExpMatchArray | 空值
>''.match(/ /) : RegExpMatchArray | 空值
>''.match : (regexp: 文字 | RegExp) => RegExpMatchArray | 空值
>'' : ""
>match : (regexp: 文字 | RegExp) => RegExpMatchArray | 空值
>/ / : RegExp

    let y = x || [];
>y : RegExpMatchArray
>x || [] : RegExpMatchArray
>x : RegExpMatchArray | 空值
>[] : 不及[]

    let z = y.map(s => s.toLowerCase());
>z : 文字[]
>y.map(s => s.toLowerCase()) : 文字[]
>y.map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>y : RegExpMatchArray
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>s => s.toLowerCase() : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s.toLowerCase() : 文字
>类型别名 :=> 文字
>s.toLowerCase : () => 文字
>s : 文字
>类型别名 :=> 文字
>toLowerCase : () => 文字
}

function f2() {
>f2 : () => 无值

    let x = ''.match(/ /);
>x : RegExpMatchArray | 空值
>''.match(/ /) : RegExpMatchArray | 空值
>''.match : (regexp: 文字 | RegExp) => RegExpMatchArray | 空值
>'' : ""
>match : (regexp: 文字 | RegExp) => RegExpMatchArray | 空值
>/ / : RegExp

    let y = x ? x : [];
>y : RegExpMatchArray
>x ? x : [] : RegExpMatchArray
>x : RegExpMatchArray | 空值
>x : RegExpMatchArray
>[] : 不及[]

    let z = y.map(s => s.toLowerCase());
>z : 文字[]
>y.map(s => s.toLowerCase()) : 文字[]
>y.map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>y : RegExpMatchArray
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>s => s.toLowerCase() : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s.toLowerCase() : 文字
>类型别名 :=> 文字
>s.toLowerCase : () => 文字
>s : 文字
>类型别名 :=> 文字
>toLowerCase : () => 文字
}

