=== tests/cases/compiler/declFileTypeAnnotationTypeLiteral.ts ===
class c {
>c : c
}
class g<T> {
>g : g<T>
>T : T
}
module m {
>m : typeof m

    export class c {
>c : c
    }
}

// Object literal with everything
var x: {
>x : { (a: number): c; (a: string): g<string>; new (a: number): c; new (a: string): m.c; [n: string]: c; [n: number]: c; a: c; b: g<string>; m1(): g<number>; m2(a: string, b?: number, ...c: c[]): string; }

    // Call signatures
    (a: number): c;
>a : number
>类型别名 :=> 数字
>c : c

    (a: string): g<string>;
>a : string
>类型别名 :=> 文字
>g : g<T>

    // Construct signatures
    new (a: number): c;
>a : number
>类型别名 :=> 数字
>c : c

    new (a: string): m.c;
>a : string
>类型别名 :=> 文字
>m : any
>类型别名 :=> 任意
>c : m.c

    // Indexers
    [n: number]: c;
>n : number
>类型别名 :=> 数字
>c : c

    [n: string]: c;
>n : string
>类型别名 :=> 文字
>c : c

    // Properties
    a: c;
>a : c
>c : c

    b: g<string>;
>b : g<string>
>g : g<T>

    // methods
    m1(): g<number>;
>m1 : () => g<number>
>g : g<T>

    m2(a: string, b?: number, ...c: c[]): string;
>m2 : (a: string, b?: number, ...c: c[]) => string
>a : string
>类型别名 :=> 文字
>b : number
>类型别名 :=> 数字
>c : c[]
>c : c

};


// Function type
var y: (a: string) => string;
>y : (a: string) => string
>a : string
>类型别名 :=> 文字

// constructor type
var z: new (a: string) => m.c;
>z : new (a: string) => m.c
>a : string
>类型别名 :=> 文字
>m : any
>类型别名 :=> 任意
>c : m.c

