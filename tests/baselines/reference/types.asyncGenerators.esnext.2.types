=== tests/cases/conformance/types/asyncGenerators/types.asyncGenerators.esnext.2.ts ===
async function * inferReturnType1() {
>inferReturnType1 : () => AsyncIterableIterator<任意>

    yield* {};
>yield* {} : 任意
>类型别名 :=> 任意
>{} : {}
}
async function * inferReturnType2() {
>inferReturnType2 : () => 任意

    yield* inferReturnType2();
>yield* inferReturnType2() : 任意
>类型别名 :=> 任意
>inferReturnType2() : 任意
>类型别名 :=> 任意
>inferReturnType2 : () => 任意
}
async function * inferReturnType3() {
>inferReturnType3 : () => AsyncIterableIterator<任意>

    yield* Promise.resolve([1, 2]);
>yield* Promise.resolve([1, 2]) : 任意
>类型别名 :=> 任意
>Promise.resolve([1, 2]) : Promise<数字[]>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>[1, 2] : 数字[]
>1 : 1
>2 : 2
}
const assignability1: () => AsyncIterableIterator<number> = async function * () {
>assignability1 : () => AsyncIterableIterator<数字>
>AsyncIterableIterator : AsyncIterableIterator<T>
>async function * () {    yield "a";} : () => AsyncIterableIterator<"a">

    yield "a";
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"

};
const assignability2: () => AsyncIterableIterator<number> = async function * () {
>assignability2 : () => AsyncIterableIterator<数字>
>AsyncIterableIterator : AsyncIterableIterator<T>
>async function * () {    yield* ["a", "b"];} : () => AsyncIterableIterator<任意>

    yield* ["a", "b"];
>yield* ["a", "b"] : 任意
>类型别名 :=> 任意
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"

};
const assignability3: () => AsyncIterableIterator<number> = async function * () {
>assignability3 : () => AsyncIterableIterator<数字>
>AsyncIterableIterator : AsyncIterableIterator<T>
>async function * () {    yield* (async function * () { yield "a"; })();} : () => AsyncIterableIterator<"a">

    yield* (async function * () { yield "a"; })();
>yield* (async function * () { yield "a"; })() : 任意
>类型别名 :=> 任意
>(async function * () { yield "a"; })() : AsyncIterableIterator<"a">
>(async function * () { yield "a"; }) : () => AsyncIterableIterator<"a">
>async function * () { yield "a"; } : () => AsyncIterableIterator<"a">
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"

};
const assignability4: () => AsyncIterable<number> = async function * () {
>assignability4 : () => AsyncIterable<数字>
>AsyncIterable : AsyncIterable<T>
>async function * () {    yield "a";} : () => AsyncIterableIterator<"a">

    yield "a";
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"

};
const assignability5: () => AsyncIterable<number> = async function * () {
>assignability5 : () => AsyncIterable<数字>
>AsyncIterable : AsyncIterable<T>
>async function * () {    yield* ["a", "b"];} : () => AsyncIterableIterator<任意>

    yield* ["a", "b"];
>yield* ["a", "b"] : 任意
>类型别名 :=> 任意
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"

};
const assignability6: () => AsyncIterable<number> = async function * () {
>assignability6 : () => AsyncIterable<数字>
>AsyncIterable : AsyncIterable<T>
>async function * () {    yield* (async function * () { yield "a"; })();} : () => AsyncIterableIterator<"a">

    yield* (async function * () { yield "a"; })();
>yield* (async function * () { yield "a"; })() : 任意
>类型别名 :=> 任意
>(async function * () { yield "a"; })() : AsyncIterableIterator<"a">
>(async function * () { yield "a"; }) : () => AsyncIterableIterator<"a">
>async function * () { yield "a"; } : () => AsyncIterableIterator<"a">
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"

};
const assignability7: () => AsyncIterator<number> = async function * () {
>assignability7 : () => AsyncIterator<数字>
>AsyncIterator : AsyncIterator<T>
>async function * () {    yield "a";} : () => AsyncIterableIterator<"a">

    yield "a";
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"

};
const assignability8: () => AsyncIterator<number> = async function * () {
>assignability8 : () => AsyncIterator<数字>
>AsyncIterator : AsyncIterator<T>
>async function * () {    yield* ["a", "b"];} : () => AsyncIterableIterator<任意>

    yield* ["a", "b"];
>yield* ["a", "b"] : 任意
>类型别名 :=> 任意
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"

};
const assignability9: () => AsyncIterator<number> = async function * () {
>assignability9 : () => AsyncIterator<数字>
>AsyncIterator : AsyncIterator<T>
>async function * () {    yield* (async function * () { yield "a"; })();} : () => AsyncIterableIterator<"a">

    yield* (async function * () { yield "a"; })();
>yield* (async function * () { yield "a"; })() : 任意
>类型别名 :=> 任意
>(async function * () { yield "a"; })() : AsyncIterableIterator<"a">
>(async function * () { yield "a"; }) : () => AsyncIterableIterator<"a">
>async function * () { yield "a"; } : () => AsyncIterableIterator<"a">
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"

};
async function * explicitReturnType1(): AsyncIterableIterator<number> {
>explicitReturnType1 : () => AsyncIterableIterator<数字>
>AsyncIterableIterator : AsyncIterableIterator<T>

    yield "a";
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"
}
async function * explicitReturnType2(): AsyncIterableIterator<number> {
>explicitReturnType2 : () => AsyncIterableIterator<数字>
>AsyncIterableIterator : AsyncIterableIterator<T>

    yield* ["a", "b"];
>yield* ["a", "b"] : 任意
>类型别名 :=> 任意
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"
}
async function * explicitReturnType3(): AsyncIterableIterator<number> {
>explicitReturnType3 : () => AsyncIterableIterator<数字>
>AsyncIterableIterator : AsyncIterableIterator<T>

    yield* (async function * () { yield "a"; })();
>yield* (async function * () { yield "a"; })() : 任意
>类型别名 :=> 任意
>(async function * () { yield "a"; })() : AsyncIterableIterator<"a">
>(async function * () { yield "a"; }) : () => AsyncIterableIterator<"a">
>async function * () { yield "a"; } : () => AsyncIterableIterator<"a">
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"
}
async function * explicitReturnType4(): AsyncIterable<number> {
>explicitReturnType4 : () => AsyncIterable<数字>
>AsyncIterable : AsyncIterable<T>

    yield "a";
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"
}
async function * explicitReturnType5(): AsyncIterable<number> {
>explicitReturnType5 : () => AsyncIterable<数字>
>AsyncIterable : AsyncIterable<T>

    yield* ["a", "b"];
>yield* ["a", "b"] : 任意
>类型别名 :=> 任意
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"
}
async function * explicitReturnType6(): AsyncIterable<number> {
>explicitReturnType6 : () => AsyncIterable<数字>
>AsyncIterable : AsyncIterable<T>

    yield* (async function * () { yield "a"; })();
>yield* (async function * () { yield "a"; })() : 任意
>类型别名 :=> 任意
>(async function * () { yield "a"; })() : AsyncIterableIterator<"a">
>(async function * () { yield "a"; }) : () => AsyncIterableIterator<"a">
>async function * () { yield "a"; } : () => AsyncIterableIterator<"a">
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"
}
async function * explicitReturnType7(): AsyncIterator<number> {
>explicitReturnType7 : () => AsyncIterator<数字>
>AsyncIterator : AsyncIterator<T>

    yield "a";
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"
}
async function * explicitReturnType8(): AsyncIterator<number> {
>explicitReturnType8 : () => AsyncIterator<数字>
>AsyncIterator : AsyncIterator<T>

    yield* ["a", "b"];
>yield* ["a", "b"] : 任意
>类型别名 :=> 任意
>["a", "b"] : 文字[]
>"a" : "a"
>"b" : "b"
}
async function * explicitReturnType9(): AsyncIterator<number> {
>explicitReturnType9 : () => AsyncIterator<数字>
>AsyncIterator : AsyncIterator<T>

    yield* (async function * () { yield "a"; })();
>yield* (async function * () { yield "a"; })() : 任意
>类型别名 :=> 任意
>(async function * () { yield "a"; })() : AsyncIterableIterator<"a">
>(async function * () { yield "a"; }) : () => AsyncIterableIterator<"a">
>async function * () { yield "a"; } : () => AsyncIterableIterator<"a">
>yield "a" : 任意
>类型别名 :=> 任意
>"a" : "a"
}
async function * explicitReturnType10(): IterableIterator<number> {
>explicitReturnType10 : () => IterableIterator<数字>
>IterableIterator : IterableIterator<T>

    yield 1;
>yield 1 : 任意
>类型别名 :=> 任意
>1 : 1
}
async function * explicitReturnType11(): Iterable<number> {
>explicitReturnType11 : () => Iterable<数字>
>Iterable : Iterable<T>

    yield 1;
>yield 1 : 任意
>类型别名 :=> 任意
>1 : 1
}
async function * explicitReturnType12(): Iterator<number> {
>explicitReturnType12 : () => Iterator<数字>
>Iterator : Iterator<T>

    yield 1;
>yield 1 : 任意
>类型别名 :=> 任意
>1 : 1
}
async function * yieldStar() {
>yieldStar : () => AsyncIterableIterator<任意>

    yield* {};
>yield* {} : 任意
>类型别名 :=> 任意
>{} : {}
}
