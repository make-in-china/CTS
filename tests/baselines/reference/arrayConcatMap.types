=== tests/cases/compiler/arrayConcatMap.ts ===
var x = [].concat([{ a: 1 }], [{ a: 2 }])
>x : 任意[]
>[].concat([{ a: 1 }], [{ a: 2 }])          .map(b => b.a) : 任意[]
>[].concat([{ a: 1 }], [{ a: 2 }])          .map : <U>(callbackfn: (value: 任意, index: 数字, array: 任意[]) => U, thisArg?: 任意) => U[]
>[].concat([{ a: 1 }], [{ a: 2 }]) : 任意[]
>[].concat : { (...items: ReadonlyArray<任意>[]): 任意[]; (...items: 任意[]): 任意[]; }
>[] : 未定[]
>concat : { (...items: ReadonlyArray<任意>[]): 任意[]; (...items: 任意[]): 任意[]; }
>[{ a: 1 }] : { a: 数字; }[]
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>[{ a: 2 }] : { a: 数字; }[]
>{ a: 2 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>2 : 2

          .map(b => b.a);
>map : <U>(callbackfn: (value: 任意, index: 数字, array: 任意[]) => U, thisArg?: 任意) => U[]
>b => b.a : (b: 任意) => 任意
>b : 任意
>类型别名 :=> 任意
>b.a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

