=== tests/cases/conformance/expressions/objectLiterals/objectLiteralGettersAndSetters.ts ===
// Get and set accessor with the same name
var sameName1a = { get 'a'() { return ''; }, set a(n) { var p = n; var p: string; } };
>sameName1a : { 'a': string; }
>{ get 'a'() { return ''; }, set a(n) { var p = n; var p: string; } } : { 'a': string; }
>'' : ""
>a : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字

var sameName2a = { get 0.0() { return ''; }, set 0(n) { var p = n; var p: string; } };
>sameName2a : { 0.0: string; }
>{ get 0.0() { return ''; }, set 0(n) { var p = n; var p: string; } } : { 0.0: string; }
>'' : ""
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字

var sameName3a = { get 0x20() { return ''; }, set 3.2e1(n) { var p = n; var p: string; } };
>sameName3a : { 0x20: string; }
>{ get 0x20() { return ''; }, set 3.2e1(n) { var p = n; var p: string; } } : { 0x20: string; }
>'' : ""
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字

var sameName4a = { get ''() { return ''; }, set ""(n) { var p = n; var p: string; } };
>sameName4a : { '': string; }
>{ get ''() { return ''; }, set ""(n) { var p = n; var p: string; } } : { '': string; }
>'' : ""
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字

var sameName5a = { get '\t'() { return ''; }, set '\t'(n) { var p = n; var p: string; } };
>sameName5a : { '\t': string; }
>{ get '\t'() { return ''; }, set '\t'(n) { var p = n; var p: string; } } : { '\t': string; }
>'' : ""
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字

var sameName6a = { get 'a'() { return ''; }, set a(n) { var p = n; var p: string; } };
>sameName6a : { 'a': string; }
>{ get 'a'() { return ''; }, set a(n) { var p = n; var p: string; } } : { 'a': string; }
>'' : ""
>a : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字
>p : string
>类型别名 :=> 文字

// PropertyName CallSignature{FunctionBody} is equivalent to PropertyName:function CallSignature{FunctionBody}
var callSig1 = { num(n: number) { return '' } };
>callSig1 : { num(n: number): string; }
>{ num(n: number) { return '' } } : { num(n: number): string; }
>num : (n: number) => string
>n : number
>类型别名 :=> 数字
>'' : ""

var callSig1: { num: (n: number) => string; };
>callSig1 : { num(n: number): string; }
>num : (n: number) => string
>n : number
>类型别名 :=> 数字

var callSig2 = { num: function (n: number) { return '' } };
>callSig2 : { num: (n: number) => string; }
>{ num: function (n: number) { return '' } } : { num: (n: number) => string; }
>num : (n: number) => string
>function (n: number) { return '' } : (n: number) => string
>n : number
>类型别名 :=> 数字
>'' : ""

var callSig2: { num: (n: number) => string; };
>callSig2 : { num: (n: number) => string; }
>num : (n: number) => string
>n : number
>类型别名 :=> 数字

var callSig3 = { num: (n: number) => '' };
>callSig3 : { num: (n: number) => string; }
>{ num: (n: number) => '' } : { num: (n: number) => string; }
>num : (n: number) => string
>(n: number) => '' : (n: number) => string
>n : number
>类型别名 :=> 数字
>'' : ""

var callSig3: { num: (n: number) => string; };
>callSig3 : { num: (n: number) => string; }
>num : (n: number) => string
>n : number
>类型别名 :=> 数字

// Get accessor only, type of the property is the annotated return type of the get accessor
var getter1 = { get x(): string { return undefined; } };
>getter1 : { readonly x: string; }
>{ get x(): string { return undefined; } } : { readonly x: string; }
>x : string
>类型别名 :=> 文字
>undefined : undefined
>类型别名 :=> 未定

var getter1: { readonly x: string; }
>getter1 : { readonly x: string; }
>x : string
>类型别名 :=> 文字

// Get accessor only, type of the property is the inferred return type of the get accessor
var getter2 = { get x() { return ''; } };
>getter2 : { readonly x: string; }
>{ get x() { return ''; } } : { readonly x: string; }
>x : string
>类型别名 :=> 文字
>'' : ""

var getter2: { readonly x: string; }
>getter2 : { readonly x: string; }
>x : string
>类型别名 :=> 文字

// Set accessor only, type of the property is the param type of the set accessor
var setter1 = { set x(n: number) { } };
>setter1 : { x: number; }
>{ set x(n: number) { } } : { x: number; }
>x : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字

var setter1: { x: number };
>setter1 : { x: number; }
>x : number
>类型别名 :=> 数字

// Set accessor only, type of the property is Any for an unannotated set accessor
var setter2 = { set x(n) { } };
>setter2 : { x: any; }
>{ set x(n) { } } : { x: any; }
>x : any
>类型别名 :=> 任意
>n : any
>类型别名 :=> 任意

var setter2: { x: any };
>setter2 : { x: any; }
>x : any
>类型别名 :=> 任意

var anyVar: any;
>anyVar : any
>类型别名 :=> 任意

// Get and set accessor with matching type annotations
var sameType1 = { get x(): string { return undefined; }, set x(n: string) { } };
>sameType1 : { x: string; }
>{ get x(): string { return undefined; }, set x(n: string) { } } : { x: string; }
>x : string
>类型别名 :=> 文字
>undefined : undefined
>类型别名 :=> 未定
>x : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字

var sameType2 = { get x(): Array<number> { return undefined; }, set x(n: number[]) { } };
>sameType2 : { x: number[]; }
>{ get x(): Array<number> { return undefined; }, set x(n: number[]) { } } : { x: number[]; }
>x : number[]
>Array : T[]
>undefined : undefined
>类型别名 :=> 未定
>x : number[]
>n : number[]

var sameType3 = { get x(): any { return undefined; }, set x(n: typeof anyVar) { } };
>sameType3 : { x: any; }
>{ get x(): any { return undefined; }, set x(n: typeof anyVar) { } } : { x: any; }
>x : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>x : any
>类型别名 :=> 任意
>n : any
>类型别名 :=> 任意
>anyVar : any
>类型别名 :=> 任意

var sameType4 = { get x(): Date { return undefined; }, set x(n: Date) { } };
>sameType4 : { x: Date; }
>{ get x(): Date { return undefined; }, set x(n: Date) { } } : { x: Date; }
>x : Date
>Date : Date
>undefined : undefined
>类型别名 :=> 未定
>x : Date
>n : Date
>Date : Date

// Type of unannotated get accessor return type is the type annotation of the set accessor param
var setParamType1 = {
>setParamType1 : { n: (t: string) => void; }
>{    set n(x: (t: string) => void) { },    get n() { return (t) => {            var p: string;            var p = t;        }    }} : { n: (t: string) => void; }

    set n(x: (t: string) => void) { },
>n : (t: string) => void
>x : (t: string) => void
>t : string
>类型别名 :=> 文字

    get n() { return (t) => {
>n : (t: string) => void
>(t) => {            var p: string;            var p = t;        } : (t: string) => void
>t : string
>类型别名 :=> 文字

            var p: string;
>p : string
>类型别名 :=> 文字

            var p = t;
>p : string
>类型别名 :=> 文字
>t : string
>类型别名 :=> 文字
        }
    }
};
var setParamType2 = {
>setParamType2 : { n: (t: string) => void; }
>{    get n() { return (t) => {            var p: string;            var p = t;        }    },    set n(x: (t: string) => void) { }} : { n: (t: string) => void; }

    get n() { return (t) => {
>n : (t: string) => void
>(t) => {            var p: string;            var p = t;        } : (t: string) => void
>t : string
>类型别名 :=> 文字

            var p: string;
>p : string
>类型别名 :=> 文字

            var p = t;
>p : string
>类型别名 :=> 文字
>t : string
>类型别名 :=> 文字
        }
    },
    set n(x: (t: string) => void) { }
>n : (t: string) => void
>x : (t: string) => void
>t : string
>类型别名 :=> 文字

};

// Type of unannotated set accessor parameter is the return type annotation of the get accessor
var getParamType1 = {
>getParamType1 : { n: string; }
>{    set n(x) {        var y = x;        var y: string;    },    get n() { return ''; }} : { n: string; }

    set n(x) {
>n : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

        var y = x;
>y : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

        var y: string;
>y : string
>类型别名 :=> 文字

    },
    get n() { return ''; }
>n : string
>类型别名 :=> 文字
>'' : ""

};
var getParamType2 = {
>getParamType2 : { n: string; }
>{    get n() { return ''; },    set n(x) {        var y = x;        var y: string;    }} : { n: string; }

    get n() { return ''; },
>n : string
>类型别名 :=> 文字
>'' : ""

    set n(x) {
>n : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

        var y = x;
>y : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

        var y: string;
>y : string
>类型别名 :=> 文字
    }
};

// Type of unannotated accessors is the inferred return type of the get accessor
var getParamType3 = {
>getParamType3 : { n: string; }
>{    get n() { return ''; },    set n(x) {        var y = x;        var y: string;    }} : { n: string; }

    get n() { return ''; },
>n : string
>类型别名 :=> 文字
>'' : ""

    set n(x) {
>n : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

        var y = x;
>y : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

        var y: string;
>y : string
>类型别名 :=> 文字
    }
};


