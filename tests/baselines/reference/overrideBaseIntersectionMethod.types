=== tests/cases/compiler/overrideBaseIntersectionMethod.ts ===
// Repro from #14615

type Constructor<T> = new (...args: any[]) => T;
>Constructor : Constructor<T>
>T : T
>args : 任意[]
>T : T

const WithLocation = <T extends Constructor<Point>>(Base: T) => class extends Base {
>WithLocation : <T 扩展 Constructor<Point>>(Base: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); } & T
><T extends Constructor<Point>>(Base: T) => class extends Base {  getLocation(): [number, number] {    const [x,y] = super.getLocation();    return [this.x | x, this.y | y];  }} : <T 扩展 Constructor<Point>>(Base: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); } & T
>T : T
>Constructor : Constructor<T>
>Point : Point
>Base : T
>T : T
>class extends Base {  getLocation(): [number, number] {    const [x,y] = super.getLocation();    return [this.x | x, this.y | y];  }} : { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); } & T
>Base : Point

  getLocation(): [number, number] {
>getLocation : () => [数字, 数字]

    const [x,y] = super.getLocation();
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>super.getLocation() : [数字, 数字]
>super.getLocation : () => [数字, 数字]
>super : Point
>getLocation : () => [数字, 数字]

    return [this.x | x, this.y | y];
>[this.x | x, this.y | y] : [数字, 数字]
>this.x | x : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>this.y | y : 数字
>类型别名 :=> 数字
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
  }
}

class Point {
>Point : Point

  constructor(public x: number, public y: number) { }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

  getLocation(): [number, number] {
>getLocation : () => [数字, 数字]

    return [0,0];
>[0,0] : [数字, 数字]
>0 : 0
>0 : 0
  }
}

class Foo extends WithLocation(Point) {
>Foo : Foo
>WithLocation(Point) : <类为 Point>.(Anonymous class) & Point
>WithLocation : <T 扩展 Constructor<Point>>(Base: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); } & T
>Point : 类为 Point

  calculate() {
>calculate : () => 数字

    return this.x + this.y;
>this.x + this.y : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字
  }
  getLocation() {
>getLocation : () => [数字, 数字]

    return super.getLocation()
>super.getLocation() : [数字, 数字]
>super.getLocation : () => [数字, 数字]
>super : <类为 Point>.(Anonymous class) & Point
>getLocation : () => [数字, 数字]
  }
  whereAmI() {
>whereAmI : () => [数字, 数字]

    return this.getLocation();
>this.getLocation() : [数字, 数字]
>this.getLocation : () => [数字, 数字]
>this : 本体
>getLocation : () => [数字, 数字]
  }
}

