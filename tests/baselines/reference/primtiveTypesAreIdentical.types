=== tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/primtiveTypesAreIdentical.ts ===
// primitive types are identical to themselves so these overloads will all cause errors

function foo1(x: number);
>foo1 : { (x: 数字): 任意; (x: 数字): 任意; }
>x : 数字
>类型别名 :=> 数字

function foo1(x: number);
>foo1 : { (x: 数字): 任意; (x: 数字): 任意; }
>x : 数字
>类型别名 :=> 数字

function foo1(x: any) { }
>foo1 : { (x: 数字): 任意; (x: 数字): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo2(x: string);
>foo2 : { (x: 文字): 任意; (x: 文字): 任意; }
>x : 文字
>类型别名 :=> 文字

function foo2(x: string);
>foo2 : { (x: 文字): 任意; (x: 文字): 任意; }
>x : 文字
>类型别名 :=> 文字

function foo2(x: any) { }
>foo2 : { (x: 文字): 任意; (x: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo3(x: boolean);
>foo3 : { (x: 真假): 任意; (x: 真假): 任意; }
>x : 真假
>类型别名 :=> 真假

function foo3(x: boolean);
>foo3 : { (x: 真假): 任意; (x: 真假): 任意; }
>x : 真假
>类型别名 :=> 真假

function foo3(x: any) { }
>foo3 : { (x: 真假): 任意; (x: 真假): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo4(x: any);
>foo4 : { (x: 任意): 任意; (x: 任意): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo4(x: any);
>foo4 : { (x: 任意): 任意; (x: 任意): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo4(x: any) { }
>foo4 : { (x: 任意): 任意; (x: 任意): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo5(x: 'a');
>foo5 : { (x: "a"): 任意; (x: "a"): 任意; (x: 文字): 任意; }
>x : "a"

function foo5(x: 'a');
>foo5 : { (x: "a"): 任意; (x: "a"): 任意; (x: 文字): 任意; }
>x : "a"

function foo5(x: string);
>foo5 : { (x: "a"): 任意; (x: "a"): 任意; (x: 文字): 任意; }
>x : 文字
>类型别名 :=> 文字

function foo5(x: any) { }
>foo5 : { (x: "a"): 任意; (x: "a"): 任意; (x: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意

enum E { A }
>E : E
>A : E

function foo6(x: E);
>foo6 : { (x: E): 任意; (x: E): 任意; }
>x : E
>E : E

function foo6(x: E);
>foo6 : { (x: E): 任意; (x: E): 任意; }
>x : E
>E : E

function foo6(x: any) { }
>foo6 : { (x: E): 任意; (x: E): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo7(x: void);
>foo7 : { (x: 无值): 任意; (x: 无值): 任意; }
>x : 无值
>类型别名 :=> 无值

function foo7(x: void);
>foo7 : { (x: 无值): 任意; (x: 无值): 任意; }
>x : 无值
>类型别名 :=> 无值

function foo7(x: any) { }
>foo7 : { (x: 无值): 任意; (x: 无值): 任意; }
>x : 任意
>类型别名 :=> 任意

