=== tests/cases/conformance/types/members/objectTypeWithCallSignatureAppearsToBeFunctionType.ts ===
// objects with call signatures should be permitted where function types are expected
// no errors expected below

interface I {
>I : I

    (): void;
}

var i: I;
>i : I
>I : I

var r2: void = i();
>r2 : void
>类型别名 :=> 无值
>i() : void
>类型别名 :=> 无值
>i : I

var r2b: (x: any, y?: any) => any = i.apply;
>r2b : (x: any, y?: any) => any
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>i.apply : (this: Function, thisArg: any, argArray?: any) => any
>i : I
>apply : (this: Function, thisArg: any, argArray?: any) => any

var b: {
>b : () => void

    (): void;
}

var r4: void = b();
>r4 : void
>类型别名 :=> 无值
>b() : void
>类型别名 :=> 无值
>b : () => void

var rb4: (x: any, y?: any) => any = b.apply;
>rb4 : (x: any, y?: any) => any
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>b.apply : (this: Function, thisArg: any, argArray?: any) => any
>b : () => void
>apply : (this: Function, thisArg: any, argArray?: any) => any

