=== tests/cases/conformance/types/members/objectTypeWithCallSignatureAppearsToBeFunctionType.ts ===
// objects with call signatures should be permitted where function types are expected
// no errors expected below

interface I {
>I : I

    (): void;
}

var i: I;
>i : I
>I : I

var r2: void = i();
>r2 : 无值
>类型别名 :=> 无值
>i() : 无值
>类型别名 :=> 无值
>i : I

var r2b: (x: any, y?: any) => any = i.apply;
>r2b : (x: 任意, y?: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>i.apply : (this: Function, thisArg: 任意, argArray?: 任意) => 任意
>i : I
>apply : (this: Function, thisArg: 任意, argArray?: 任意) => 任意

var b: {
>b : () => 无值

    (): void;
}

var r4: void = b();
>r4 : 无值
>类型别名 :=> 无值
>b() : 无值
>类型别名 :=> 无值
>b : () => 无值

var rb4: (x: any, y?: any) => any = b.apply;
>rb4 : (x: 任意, y?: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>b.apply : (this: Function, thisArg: 任意, argArray?: 任意) => 任意
>b : () => 无值
>apply : (this: Function, thisArg: 任意, argArray?: 任意) => 任意

