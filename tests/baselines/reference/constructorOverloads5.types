=== tests/cases/compiler/constructorOverloads5.ts ===
 interface IArguments {}
>IArguments : IArguments

 declare module M {
>M : 类为 M

    export function RegExp(pattern: string): RegExp;
>RegExp : { (pattern: 文字): RegExp; (pattern: 文字, flags: 文字): RegExp; }
>pattern : 文字
>类型别名 :=> 文字
>RegExp : RegExp

    export function RegExp(pattern: string, flags: string): RegExp;
>RegExp : { (pattern: 文字): RegExp; (pattern: 文字, flags: 文字): RegExp; }
>pattern : 文字
>类型别名 :=> 文字
>flags : 文字
>类型别名 :=> 文字
>RegExp : RegExp

    export class RegExp {
>RegExp : M.RegExp

        constructor(pattern: string);
>pattern : 文字
>类型别名 :=> 文字

        constructor(pattern: string, flags: string);
>pattern : 文字
>类型别名 :=> 文字
>flags : 文字
>类型别名 :=> 文字

        exec(string: string): string[];
>exec : (string: 文字) => 文字[]
>string : 文字
>类型别名 :=> 文字

        test(string: string): boolean;
>test : (string: 文字) => 真假
>string : 文字
>类型别名 :=> 文字

        source: string;
>source : 文字
>类型别名 :=> 文字

        global: boolean;
>global : 真假
>类型别名 :=> 真假

        ignoreCase: boolean;
>ignoreCase : 真假
>类型别名 :=> 真假

        multiline: boolean;
>multiline : 真假
>类型别名 :=> 真假

        lastIndex: boolean;
>lastIndex : 真假
>类型别名 :=> 真假
    }
}

