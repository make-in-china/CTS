=== tests/cases/compiler/sourceMapValidationStatements.ts ===
function f() {
>f : () => void

    var y;
>y : any
>类型别名 :=> 任意

    var x = 0;
>x : number
>类型别名 :=> 数字
>0 : 0

    for (var i = 0; i < 10; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 10 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>10 : 10
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

        x += i;
>x += i : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

        x *= 0;
>x *= 0 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>0 : 0
    }
    if (x > 17) {
>x > 17 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>17 : 17

        x /= 9;
>x /= 9 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>9 : 9

    } else {
        x += 10;
>x += 10 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>10 : 10

        x++;
>x++ : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
    }
    var a = [
>a : number[]
>[        1,        2,        3    ] : number[]

        1,
>1 : 1

        2,
>2 : 2

        3
>3 : 3

    ];
    var obj = {
>obj : { z: number; q: string; }
>{        z: 1,        q: "hello"    } : { z: number; q: string; }

        z: 1,
>z : number
>类型别名 :=> 数字
>1 : 1

        q: "hello"
>q : string
>类型别名 :=> 文字
>"hello" : "hello"

    };
    for (var j in a) {
>j : string
>类型别名 :=> 文字
>a : number[]

        obj.z = a[j];
>obj.z = a[j] : number
>类型别名 :=> 数字
>obj.z : number
>类型别名 :=> 数字
>obj : { z: number; q: string; }
>z : number
>类型别名 :=> 数字
>a[j] : number
>类型别名 :=> 数字
>a : number[]
>j : string
>类型别名 :=> 文字

        var v = 10;
>v : number
>类型别名 :=> 数字
>10 : 10
    }
    try {
        obj.q = "ohhh";
>obj.q = "ohhh" : "ohhh"
>obj.q : string
>类型别名 :=> 文字
>obj : { z: number; q: string; }
>q : string
>类型别名 :=> 文字
>"ohhh" : "ohhh"

    } catch (e) {
>e : any
>类型别名 :=> 任意

        if (obj.z < 10) {
>obj.z < 10 : boolean
>类型别名 :=> 真假
>obj.z : number
>类型别名 :=> 数字
>obj : { z: number; q: string; }
>z : number
>类型别名 :=> 数字
>10 : 10

            obj.z = 12;
>obj.z = 12 : 12
>obj.z : number
>类型别名 :=> 数字
>obj : { z: number; q: string; }
>z : number
>类型别名 :=> 数字
>12 : 12

        } else {
            obj.q = "hmm";
>obj.q = "hmm" : "hmm"
>obj.q : string
>类型别名 :=> 文字
>obj : { z: number; q: string; }
>q : string
>类型别名 :=> 文字
>"hmm" : "hmm"
        }
    }
    try {
        throw new Error();
>new Error() : Error
>Error : ErrorConstructor

    } catch (e1) {
>e1 : any
>类型别名 :=> 任意

        var b = e1;
>b : any
>类型别名 :=> 任意
>e1 : any
>类型别名 :=> 任意

    } finally {
        y = 70;
>y = 70 : 70
>y : any
>类型别名 :=> 任意
>70 : 70
    }
    with (obj) {
>obj : { z: number; q: string; }

        i = 2;
>i = 2 : any
>类型别名 :=> 任意
>i : any
>类型别名 :=> 任意
>2 : any
>类型别名 :=> 任意

        z = 10;
>z = 10 : any
>类型别名 :=> 任意
>z : any
>类型别名 :=> 任意
>10 : any
>类型别名 :=> 任意
    }
    switch (obj.z) {
>obj.z : number
>类型别名 :=> 数字
>obj : { z: number; q: string; }
>z : number
>类型别名 :=> 数字

        case 0: {
>0 : 0

            x++;
>x++ : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

            break;

        }
        case 1: {
>1 : 1

            x--;
>x-- : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

            break;

        }
        default: {
            x *= 2;
>x *= 2 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>2 : 2

            x = 50;
>x = 50 : 50
>x : number
>类型别名 :=> 数字
>50 : 50

            break;

        }
    }
    while (x < 10) {
>x < 10 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>10 : 10

        x++;
>x++ : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
    }
    do {
        x--;
>x-- : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

    } while (x > 4)
>x > 4 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>4 : 4

    x = y;
>x = y : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字
>y : any
>类型别名 :=> 任意

    var z = (x == 1) ? x + 1 : x - 1;
>z : number
>类型别名 :=> 数字
>(x == 1) ? x + 1 : x - 1 : number
>类型别名 :=> 数字
>(x == 1) : boolean
>类型别名 :=> 真假
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1
>x + 1 : number
>类型别名 :=> 数字
>x : 1
>1 : 1
>x - 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1

    (x == 1) ? x + 1 : x - 1;
>(x == 1) ? x + 1 : x - 1 : number
>类型别名 :=> 数字
>(x == 1) : boolean
>类型别名 :=> 真假
>x == 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1
>x + 1 : number
>类型别名 :=> 数字
>x : 1
>1 : 1
>x - 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1

    x === 1;
>x === 1 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>1 : 1

    x = z = 40;
>x = z = 40 : 40
>x : number
>类型别名 :=> 数字
>z = 40 : 40
>z : number
>类型别名 :=> 数字
>40 : 40

    eval("y");
>eval("y") : any
>类型别名 :=> 任意
>eval : (x: string) => any
>"y" : "y"

    return;
}
var b = function () {
>b : () => void
>function () {    var x = 10;    x = x + 1;} : () => void

    var x = 10;
>x : number
>类型别名 :=> 数字
>10 : 10

    x = x + 1;
>x = x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1

};
f();
>f() : void
>类型别名 :=> 无值
>f : () => void

