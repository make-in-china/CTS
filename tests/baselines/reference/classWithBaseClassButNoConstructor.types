=== tests/cases/conformance/classes/members/constructorFunctionTypes/classWithBaseClassButNoConstructor.ts ===
class Base {
>Base : Base

    constructor(x: number) { }
>x : 数字
>类型别名 :=> 数字
}

class C extends Base {
>C : C
>Base : Base

    foo: string;
>foo : 文字
>类型别名 :=> 文字
}

var r = C;
>r : 类为 C
>C : 类为 C

var c = new C(); // error
>c : 任意
>类型别名 :=> 任意
>new C() : 任意
>类型别名 :=> 任意
>C : 类为 C

var c2 = new C(1); // ok
>c2 : C
>new C(1) : C
>C : 类为 C
>1 : 1

class Base2<T,U> {
>Base2 : Base2<T, U>
>T : T
>U : U

    constructor(x: T) { }
>x : T
>T : T
}

class D<T,U> extends Base2<T,U> {
>D : D<T, U>
>T : T
>U : U
>Base2 : Base2<T, U>
>T : T
>U : U

    foo: U;
>foo : U
>U : U
}

var r2 = D;
>r2 : 类为 D
>D : 类为 D

var d = new D(); // error
>d : 任意
>类型别名 :=> 任意
>new D() : 任意
>类型别名 :=> 任意
>D : 类为 D

var d2 = new D(1); // ok
>d2 : D<数字, {}>
>new D(1) : D<数字, {}>
>D : 类为 D
>1 : 1

// specialized base class
class D2<T, U> extends Base2<string, number> {
>D2 : D2<T, U>
>T : T
>U : U
>Base2 : Base2<文字, 数字>

    foo: U;
>foo : U
>U : U
}

var r3 = D2;
>r3 : 类为 D2
>D2 : 类为 D2

var d3 = new D(); // error
>d3 : 任意
>类型别名 :=> 任意
>new D() : 任意
>类型别名 :=> 任意
>D : 类为 D

var d4 = new D(1); // ok
>d4 : D<数字, {}>
>new D(1) : D<数字, {}>
>D : 类为 D
>1 : 1

class D3 extends Base2<string, number> {
>D3 : D3
>Base2 : Base2<文字, 数字>

    foo: string;
>foo : 文字
>类型别名 :=> 文字
}

var r4 = D3;
>r4 : 类为 D3
>D3 : 类为 D3

var d5 = new D(); // error
>d5 : 任意
>类型别名 :=> 任意
>new D() : 任意
>类型别名 :=> 任意
>D : 类为 D

var d6 = new D(1); // ok
>d6 : D<数字, {}>
>new D(1) : D<数字, {}>
>D : 类为 D
>1 : 1

