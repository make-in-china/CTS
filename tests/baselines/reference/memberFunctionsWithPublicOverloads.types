=== tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionsWithPublicOverloads.ts ===
class C {
>C : C

    public foo(x: number);
>foo : { (x: number): any; (x: number, y: string): any; }
>x : number
>类型别名 :=> 数字

    public foo(x: number, y: string);
>foo : { (x: number): any; (x: number, y: string): any; }
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字

    public foo(x: any, y?: any) { }
>foo : { (x: number): any; (x: number, y: string): any; }
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    public bar(x: 'hi');
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : "hi"

    public bar(x: string);
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : string
>类型别名 :=> 文字

    public bar(x: number, y: string);
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字

    public bar(x: any, y?: any) { }
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    public static foo(x: number);
>foo : { (x: number): any; (x: number, y: string): any; }
>x : number
>类型别名 :=> 数字

    public static foo(x: number, y: string);
>foo : { (x: number): any; (x: number, y: string): any; }
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字

    public static foo(x: any, y?: any) { }
>foo : { (x: number): any; (x: number, y: string): any; }
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    public static bar(x: 'hi');
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : "hi"

    public static bar(x: string);
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : string
>类型别名 :=> 文字

    public static bar(x: number, y: string);
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字

    public static bar(x: any, y?: any) { }
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
}

class D<T> {
>D : D<T>
>T : T

    public foo(x: number);
>foo : { (x: number): any; (x: T, y: T): any; }
>x : number
>类型别名 :=> 数字

    public foo(x: T, y: T);
>foo : { (x: number): any; (x: T, y: T): any; }
>x : T
>T : T
>y : T
>T : T

    public foo(x: any, y?: any) { }
>foo : { (x: number): any; (x: T, y: T): any; }
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    public bar(x: 'hi');
>bar : { (x: "hi"): any; (x: string): any; (x: T, y: T): any; }
>x : "hi"

    public bar(x: string);
>bar : { (x: "hi"): any; (x: string): any; (x: T, y: T): any; }
>x : string
>类型别名 :=> 文字

    public bar(x: T, y: T);
>bar : { (x: "hi"): any; (x: string): any; (x: T, y: T): any; }
>x : T
>T : T
>y : T
>T : T

    public bar(x: any, y?: any) { }
>bar : { (x: "hi"): any; (x: string): any; (x: T, y: T): any; }
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    public static foo(x: number);
>foo : { (x: number): any; (x: number, y: string): any; }
>x : number
>类型别名 :=> 数字

    public static foo(x: number, y: string);
>foo : { (x: number): any; (x: number, y: string): any; }
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字

    public static foo(x: any, y?: any) { }
>foo : { (x: number): any; (x: number, y: string): any; }
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    public static bar(x: 'hi');
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : "hi"

    public static bar(x: string);
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : string
>类型别名 :=> 文字

    public static bar(x: number, y: string);
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字

    public static bar(x: any, y?: any) { }
>bar : { (x: "hi"): any; (x: string): any; (x: number, y: string): any; }
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

}
