=== tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionsWithPublicOverloads.ts ===
class C {
>C : C

    public foo(x: number);
>foo : { (x: 数字): 任意; (x: 数字, y: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字

    public foo(x: number, y: string);
>foo : { (x: 数字): 任意; (x: 数字, y: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

    public foo(x: any, y?: any) { }
>foo : { (x: 数字): 任意; (x: 数字, y: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    public bar(x: 'hi');
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : "hi"

    public bar(x: string);
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : 文字
>类型别名 :=> 文字

    public bar(x: number, y: string);
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

    public bar(x: any, y?: any) { }
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    public static foo(x: number);
>foo : { (x: 数字): 任意; (x: 数字, y: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字

    public static foo(x: number, y: string);
>foo : { (x: 数字): 任意; (x: 数字, y: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

    public static foo(x: any, y?: any) { }
>foo : { (x: 数字): 任意; (x: 数字, y: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    public static bar(x: 'hi');
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : "hi"

    public static bar(x: string);
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : 文字
>类型别名 :=> 文字

    public static bar(x: number, y: string);
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

    public static bar(x: any, y?: any) { }
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

class D<T> {
>D : D<T>
>T : T

    public foo(x: number);
>foo : { (x: 数字): 任意; (x: T, y: T): 任意; }
>x : 数字
>类型别名 :=> 数字

    public foo(x: T, y: T);
>foo : { (x: 数字): 任意; (x: T, y: T): 任意; }
>x : T
>T : T
>y : T
>T : T

    public foo(x: any, y?: any) { }
>foo : { (x: 数字): 任意; (x: T, y: T): 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    public bar(x: 'hi');
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: T, y: T): 任意; }
>x : "hi"

    public bar(x: string);
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: T, y: T): 任意; }
>x : 文字
>类型别名 :=> 文字

    public bar(x: T, y: T);
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: T, y: T): 任意; }
>x : T
>T : T
>y : T
>T : T

    public bar(x: any, y?: any) { }
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: T, y: T): 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    public static foo(x: number);
>foo : { (x: 数字): 任意; (x: 数字, y: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字

    public static foo(x: number, y: string);
>foo : { (x: 数字): 任意; (x: 数字, y: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

    public static foo(x: any, y?: any) { }
>foo : { (x: 数字): 任意; (x: 数字, y: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    public static bar(x: 'hi');
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : "hi"

    public static bar(x: string);
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : 文字
>类型别名 :=> 文字

    public static bar(x: number, y: string);
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

    public static bar(x: any, y?: any) { }
>bar : { (x: "hi"): 任意; (x: 文字): 任意; (x: 数字, y: 文字): 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

}
