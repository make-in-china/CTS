=== tests/cases/conformance/interfaces/interfaceDeclarations/interfaceExtendsObjectIntersection.ts ===
type T1 = { a: number };
>T1 : T1
>a : 数字
>类型别名 :=> 数字

type T2 = T1 & { b: number };
>T2 : T2
>T1 : T1
>b : 数字
>类型别名 :=> 数字

type T3 = () => void;
>T3 : T3

type T4 = new () => { a: number };
>T4 : T4
>a : 数字
>类型别名 :=> 数字

type T5 = number[];
>T5 : 数字[]

type T6 = [string, number];
>T6 : [文字, 数字]

type T7 = { [P in 'a' | 'b' | 'c']: string };
>T7 : T7
>P : P

interface I1 extends T1 { x: string }
>I1 : I1
>T1 : T1
>x : 文字
>类型别名 :=> 文字

interface I2 extends T2 { x: string }
>I2 : I2
>T2 : T2
>x : 文字
>类型别名 :=> 文字

interface I3 extends T3 { x: string }
>I3 : I3
>T3 : T3
>x : 文字
>类型别名 :=> 文字

interface I4 extends T4 { x: string }
>I4 : I4
>T4 : T4
>x : 文字
>类型别名 :=> 文字

interface I5 extends T5 { x: string }
>I5 : I5
>T5 : 数字[]
>x : 文字
>类型别名 :=> 文字

interface I6 extends T6 { x: string }
>I6 : I6
>T6 : [文字, 数字]
>x : 文字
>类型别名 :=> 文字

interface I7 extends T7 { x: string }
>I7 : I7
>T7 : T7
>x : 文字
>类型别名 :=> 文字

type Constructor<T> = new () => T;
>Constructor : Constructor<T>
>T : T
>T : T

declare function Constructor<T>(): Constructor<T>;
>Constructor : <T>() => Constructor<T>
>T : T
>Constructor : Constructor<T>
>T : T

class C1 extends Constructor<I1>() { x: string }
>C1 : C1
>Constructor<I1>() : I1
>Constructor : <T>() => Constructor<T>
>I1 : I1
>x : 文字
>类型别名 :=> 文字

class C2 extends Constructor<I2>() { x: string }
>C2 : C2
>Constructor<I2>() : I2
>Constructor : <T>() => Constructor<T>
>I2 : I2
>x : 文字
>类型别名 :=> 文字

class C3 extends Constructor<I3>() { x: string }
>C3 : C3
>Constructor<I3>() : I3
>Constructor : <T>() => Constructor<T>
>I3 : I3
>x : 文字
>类型别名 :=> 文字

class C4 extends Constructor<I4>() { x: string }
>C4 : C4
>Constructor<I4>() : I4
>Constructor : <T>() => Constructor<T>
>I4 : I4
>x : 文字
>类型别名 :=> 文字

class C5 extends Constructor<I5>() { x: string }
>C5 : C5
>Constructor<I5>() : I5
>Constructor : <T>() => Constructor<T>
>I5 : I5
>x : 文字
>类型别名 :=> 文字

class C6 extends Constructor<I6>() { x: string }
>C6 : C6
>Constructor<I6>() : I6
>Constructor : <T>() => Constructor<T>
>I6 : I6
>x : 文字
>类型别名 :=> 文字

class C7 extends Constructor<I7>() { x: string }
>C7 : C7
>Constructor<I7>() : I7
>Constructor : <T>() => Constructor<T>
>I7 : I7
>x : 文字
>类型别名 :=> 文字

declare function fx(x: string): string;
>fx : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字

declare class CX { a: number }
>CX : CX
>a : 数字
>类型别名 :=> 数字

declare enum EX { A, B, C }
>EX : EX
>A : EX
>B : EX
>C : EX

declare namespace NX { export const a = 1 }
>NX : 类为 NX
>a : 1
>1 : 1

type T10 = typeof fx;
>T10 : (x: 文字) => 文字
>fx : (x: 文字) => 文字

type T11 = typeof CX;
>T11 : 类为 CX
>CX : 类为 CX

type T12 = typeof EX;
>T12 : 类为 EX
>EX : 类为 EX

type T13 = typeof NX;
>T13 : 类为 NX
>NX : 类为 NX

interface I10 extends T10 { x: string }
>I10 : I10
>T10 : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字

interface I11 extends T11 { x: string }
>I11 : I11
>T11 : 类为 CX
>x : 文字
>类型别名 :=> 文字

interface I12 extends T12 { x: string }
>I12 : I12
>T12 : 类为 EX
>x : 文字
>类型别名 :=> 文字

interface I13 extends T13 { x: string }
>I13 : I13
>T13 : 类为 NX
>x : 文字
>类型别名 :=> 文字

type Identifiable<T> = { _id: string } & T;
>Identifiable : Identifiable<T>
>T : T
>_id : 文字
>类型别名 :=> 文字
>T : T

interface I20 extends Partial<T1> { x: string }
>I20 : I20
>Partial : Partial<T>
>T1 : T1
>x : 文字
>类型别名 :=> 文字

interface I21 extends Readonly<T1> { x: string }
>I21 : I21
>Readonly : Readonly<T>
>T1 : T1
>x : 文字
>类型别名 :=> 文字

interface I22 extends Identifiable<T1> { x: string }
>I22 : I22
>Identifiable : Identifiable<T>
>T1 : T1
>x : 文字
>类型别名 :=> 文字

interface I23 extends Identifiable<T1 & { b: number}> { x: string }
>I23 : I23
>Identifiable : Identifiable<T>
>T1 : T1
>b : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字

class C20 extends Constructor<Partial<T1>>() { x: string }
>C20 : C20
>Constructor<Partial<T1>>() : Partial<T1>
>Constructor : <T>() => Constructor<T>
>Partial : Partial<T>
>T1 : T1
>x : 文字
>类型别名 :=> 文字

class C21 extends Constructor<Readonly<T1>>() { x: string }
>C21 : C21
>Constructor<Readonly<T1>>() : Readonly<T1>
>Constructor : <T>() => Constructor<T>
>Readonly : Readonly<T>
>T1 : T1
>x : 文字
>类型别名 :=> 文字

class C22 extends Constructor<Identifiable<T1>>() { x: string }
>C22 : C22
>Constructor<Identifiable<T1>>() : Identifiable<T1>
>Constructor : <T>() => Constructor<T>
>Identifiable : Identifiable<T>
>T1 : T1
>x : 文字
>类型别名 :=> 文字

class C23 extends Constructor<Identifiable<T1 & { b: number}>>() { x: string }
>C23 : C23
>Constructor<Identifiable<T1 & { b: number}>>() : Identifiable<T1 & { b: 数字; }>
>Constructor : <T>() => Constructor<T>
>Identifiable : Identifiable<T>
>T1 : T1
>b : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字

