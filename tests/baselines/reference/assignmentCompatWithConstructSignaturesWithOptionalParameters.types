=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignaturesWithOptionalParameters.ts ===
// call signatures in derived types must have the same or fewer optional parameters as the base type

interface Base { 
>Base : Base

    a: new () => number;
>a : 新建 () => 数字

    a2: new (x?: number) => number;
>a2 : 新建 (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    a3: new (x: number) => number;
>a3 : 新建 (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    a4: new (x: number, y?: number) => number;
>a4 : 新建 (x: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    a5: new (x?: number, y?: number) => number;
>a5 : 新建 (x?: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    a6: new (x: number, y: number) => number;
>a6 : 新建 (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
}
var b: Base;
>b : Base
>Base : Base

var a: new () => number;
>a : 新建 () => 数字

    a = b.a; // ok
>a = b.a : 新建 () => 数字
>a : 新建 () => 数字
>b.a : 新建 () => 数字
>b : Base
>a : 新建 () => 数字

    a = b.a2; // ok
>a = b.a2 : 新建 (x?: 数字) => 数字
>a : 新建 () => 数字
>b.a2 : 新建 (x?: 数字) => 数字
>b : Base
>a2 : 新建 (x?: 数字) => 数字

    a = b.a3; // error
>a = b.a3 : 新建 (x: 数字) => 数字
>a : 新建 () => 数字
>b.a3 : 新建 (x: 数字) => 数字
>b : Base
>a3 : 新建 (x: 数字) => 数字

    a = b.a4; // error
>a = b.a4 : 新建 (x: 数字, y?: 数字) => 数字
>a : 新建 () => 数字
>b.a4 : 新建 (x: 数字, y?: 数字) => 数字
>b : Base
>a4 : 新建 (x: 数字, y?: 数字) => 数字

    a = b.a5; // ok
>a = b.a5 : 新建 (x?: 数字, y?: 数字) => 数字
>a : 新建 () => 数字
>b.a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b : Base
>a5 : 新建 (x?: 数字, y?: 数字) => 数字

    a = b.a6; // error
>a = b.a6 : 新建 (x: 数字, y: 数字) => 数字
>a : 新建 () => 数字
>b.a6 : 新建 (x: 数字, y: 数字) => 数字
>b : Base
>a6 : 新建 (x: 数字, y: 数字) => 数字

var a2: new (x?: number) => number; 
>a2 : 新建 (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    a2 = b.a; // ok
>a2 = b.a : 新建 () => 数字
>a2 : 新建 (x?: 数字) => 数字
>b.a : 新建 () => 数字
>b : Base
>a : 新建 () => 数字

    a2 = b.a2; // ok
>a2 = b.a2 : 新建 (x?: 数字) => 数字
>a2 : 新建 (x?: 数字) => 数字
>b.a2 : 新建 (x?: 数字) => 数字
>b : Base
>a2 : 新建 (x?: 数字) => 数字

    a2 = b.a3; // ok
>a2 = b.a3 : 新建 (x: 数字) => 数字
>a2 : 新建 (x?: 数字) => 数字
>b.a3 : 新建 (x: 数字) => 数字
>b : Base
>a3 : 新建 (x: 数字) => 数字

    a2 = b.a4; // ok
>a2 = b.a4 : 新建 (x: 数字, y?: 数字) => 数字
>a2 : 新建 (x?: 数字) => 数字
>b.a4 : 新建 (x: 数字, y?: 数字) => 数字
>b : Base
>a4 : 新建 (x: 数字, y?: 数字) => 数字

    a2 = b.a5; // ok
>a2 = b.a5 : 新建 (x?: 数字, y?: 数字) => 数字
>a2 : 新建 (x?: 数字) => 数字
>b.a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b : Base
>a5 : 新建 (x?: 数字, y?: 数字) => 数字

    a2 = b.a6; // error
>a2 = b.a6 : 新建 (x: 数字, y: 数字) => 数字
>a2 : 新建 (x?: 数字) => 数字
>b.a6 : 新建 (x: 数字, y: 数字) => 数字
>b : Base
>a6 : 新建 (x: 数字, y: 数字) => 数字

var a3: new (x: number) => number; 
>a3 : 新建 (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字

    a3 = b.a; // ok
>a3 = b.a : 新建 () => 数字
>a3 : 新建 (x: 数字) => 数字
>b.a : 新建 () => 数字
>b : Base
>a : 新建 () => 数字

    a3 = b.a2; // ok
>a3 = b.a2 : 新建 (x?: 数字) => 数字
>a3 : 新建 (x: 数字) => 数字
>b.a2 : 新建 (x?: 数字) => 数字
>b : Base
>a2 : 新建 (x?: 数字) => 数字

    a3 = b.a3; // ok
>a3 = b.a3 : 新建 (x: 数字) => 数字
>a3 : 新建 (x: 数字) => 数字
>b.a3 : 新建 (x: 数字) => 数字
>b : Base
>a3 : 新建 (x: 数字) => 数字

    a3 = b.a4; // ok
>a3 = b.a4 : 新建 (x: 数字, y?: 数字) => 数字
>a3 : 新建 (x: 数字) => 数字
>b.a4 : 新建 (x: 数字, y?: 数字) => 数字
>b : Base
>a4 : 新建 (x: 数字, y?: 数字) => 数字

    a3 = b.a5; // ok
>a3 = b.a5 : 新建 (x?: 数字, y?: 数字) => 数字
>a3 : 新建 (x: 数字) => 数字
>b.a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b : Base
>a5 : 新建 (x?: 数字, y?: 数字) => 数字

    a3 = b.a6; // error
>a3 = b.a6 : 新建 (x: 数字, y: 数字) => 数字
>a3 : 新建 (x: 数字) => 数字
>b.a6 : 新建 (x: 数字, y: 数字) => 数字
>b : Base
>a6 : 新建 (x: 数字, y: 数字) => 数字

var a4: new (x: number, y?: number) => number;
>a4 : 新建 (x: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    a4 = b.a; // ok
>a4 = b.a : 新建 () => 数字
>a4 : 新建 (x: 数字, y?: 数字) => 数字
>b.a : 新建 () => 数字
>b : Base
>a : 新建 () => 数字

    a4 = b.a2; // ok
>a4 = b.a2 : 新建 (x?: 数字) => 数字
>a4 : 新建 (x: 数字, y?: 数字) => 数字
>b.a2 : 新建 (x?: 数字) => 数字
>b : Base
>a2 : 新建 (x?: 数字) => 数字

    a4 = b.a3; // ok
>a4 = b.a3 : 新建 (x: 数字) => 数字
>a4 : 新建 (x: 数字, y?: 数字) => 数字
>b.a3 : 新建 (x: 数字) => 数字
>b : Base
>a3 : 新建 (x: 数字) => 数字

    a4 = b.a4; // ok
>a4 = b.a4 : 新建 (x: 数字, y?: 数字) => 数字
>a4 : 新建 (x: 数字, y?: 数字) => 数字
>b.a4 : 新建 (x: 数字, y?: 数字) => 数字
>b : Base
>a4 : 新建 (x: 数字, y?: 数字) => 数字

    a4 = b.a5; // ok
>a4 = b.a5 : 新建 (x?: 数字, y?: 数字) => 数字
>a4 : 新建 (x: 数字, y?: 数字) => 数字
>b.a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b : Base
>a5 : 新建 (x?: 数字, y?: 数字) => 数字

    a4 = b.a6; // ok
>a4 = b.a6 : 新建 (x: 数字, y: 数字) => 数字
>a4 : 新建 (x: 数字, y?: 数字) => 数字
>b.a6 : 新建 (x: 数字, y: 数字) => 数字
>b : Base
>a6 : 新建 (x: 数字, y: 数字) => 数字

var a5: new (x?: number, y?: number) => number;
>a5 : 新建 (x?: 数字, y?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    a5 = b.a; // ok
>a5 = b.a : 新建 () => 数字
>a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b.a : 新建 () => 数字
>b : Base
>a : 新建 () => 数字

    a5 = b.a2; // ok
>a5 = b.a2 : 新建 (x?: 数字) => 数字
>a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b.a2 : 新建 (x?: 数字) => 数字
>b : Base
>a2 : 新建 (x?: 数字) => 数字

    a5 = b.a3; // ok
>a5 = b.a3 : 新建 (x: 数字) => 数字
>a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b.a3 : 新建 (x: 数字) => 数字
>b : Base
>a3 : 新建 (x: 数字) => 数字

    a5 = b.a4; // ok
>a5 = b.a4 : 新建 (x: 数字, y?: 数字) => 数字
>a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b.a4 : 新建 (x: 数字, y?: 数字) => 数字
>b : Base
>a4 : 新建 (x: 数字, y?: 数字) => 数字

    a5 = b.a5; // ok
>a5 = b.a5 : 新建 (x?: 数字, y?: 数字) => 数字
>a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b.a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b : Base
>a5 : 新建 (x?: 数字, y?: 数字) => 数字

    a5 = b.a6; // ok
>a5 = b.a6 : 新建 (x: 数字, y: 数字) => 数字
>a5 : 新建 (x?: 数字, y?: 数字) => 数字
>b.a6 : 新建 (x: 数字, y: 数字) => 数字
>b : Base
>a6 : 新建 (x: 数字, y: 数字) => 数字

