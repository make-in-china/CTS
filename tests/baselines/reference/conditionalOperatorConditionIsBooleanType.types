=== tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditionIsBooleanType.ts ===
//Cond ? Expr1 : Expr2,  Cond is of boolean type, Expr1 and Expr2 have the same type
var condBoolean: boolean;
>condBoolean : 真假
>类型别名 :=> 真假

var exprAny1: any;
>exprAny1 : 任意
>类型别名 :=> 任意

var exprBoolean1: boolean;
>exprBoolean1 : 真假
>类型别名 :=> 真假

var exprNumber1: number;
>exprNumber1 : 数字
>类型别名 :=> 数字

var exprString1: string;
>exprString1 : 文字
>类型别名 :=> 文字

var exprIsObject1: Object;
>exprIsObject1 : Object
>Object : Object

var exprAny2: any;
>exprAny2 : 任意
>类型别名 :=> 任意

var exprBoolean2: boolean;
>exprBoolean2 : 真假
>类型别名 :=> 真假

var exprNumber2: number;
>exprNumber2 : 数字
>类型别名 :=> 数字

var exprString2: string;
>exprString2 : 文字
>类型别名 :=> 文字

var exprIsObject2: Object;
>exprIsObject2 : Object
>Object : Object

//Cond is a boolean type variable
condBoolean ? exprAny1 : exprAny2;
>condBoolean ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>condBoolean : 真假
>类型别名 :=> 真假
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

condBoolean ? exprBoolean1 : exprBoolean2;
>condBoolean ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>condBoolean : 真假
>类型别名 :=> 真假
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

condBoolean ? exprNumber1 : exprNumber2;
>condBoolean ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>condBoolean : 真假
>类型别名 :=> 真假
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

condBoolean ? exprString1 : exprString2;
>condBoolean ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>condBoolean : 真假
>类型别名 :=> 真假
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

condBoolean ? exprIsObject1 : exprIsObject2;
>condBoolean ? exprIsObject1 : exprIsObject2 : Object
>condBoolean : 真假
>类型别名 :=> 真假
>exprIsObject1 : Object
>exprIsObject2 : Object

condBoolean ? exprString1 : exprBoolean1; // union
>condBoolean ? exprString1 : exprBoolean1 : 文字 | 真假
>condBoolean : 真假
>类型别名 :=> 真假
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Cond is a boolean type literal
true ? exprAny1 : exprAny2;
>true ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

false ? exprBoolean1 : exprBoolean2;
>false ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

true ? exprNumber1 : exprNumber2;
>true ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>true : 为真
>类型别名 :=> 为真
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

false ? exprString1 : exprString2;
>false ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>false : 为假
>类型别名 :=> 为假
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

true ? exprIsObject1 : exprIsObject2;
>true ? exprIsObject1 : exprIsObject2 : Object
>true : 为真
>类型别名 :=> 为真
>exprIsObject1 : Object
>exprIsObject2 : Object

true ? exprString1 : exprBoolean1; // union
>true ? exprString1 : exprBoolean1 : 文字 | 真假
>true : 为真
>类型别名 :=> 为真
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Cond is a boolean type expression
!true ? exprAny1 : exprAny2;
>!true ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>!true : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

typeof "123" == "string" ? exprBoolean1 : exprBoolean2;
>typeof "123" == "string" ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>typeof "123" == "string" : 真假
>类型别名 :=> 真假
>typeof "123" : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>"123" : "123"
>"string" : "string"
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

2 > 1 ? exprNumber1 : exprNumber2;
>2 > 1 ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>2 > 1 : 真假
>类型别名 :=> 真假
>2 : 2
>1 : 1
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

null === undefined ? exprString1 : exprString2;
>null === undefined ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>null === undefined : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

true || false ? exprIsObject1 : exprIsObject2;
>true || false ? exprIsObject1 : exprIsObject2 : Object
>true || false : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>exprIsObject1 : Object
>exprIsObject2 : Object

null === undefined ? exprString1 : exprBoolean1; // union
>null === undefined ? exprString1 : exprBoolean1 : 文字 | 真假
>null === undefined : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Results shoud be same as Expr1 and Expr2
var resultIsAny1 = condBoolean ? exprAny1 : exprAny2;
>resultIsAny1 : 任意
>类型别名 :=> 任意
>condBoolean ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>condBoolean : 真假
>类型别名 :=> 真假
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean1 = condBoolean ? exprBoolean1 : exprBoolean2;
>resultIsBoolean1 : 真假
>类型别名 :=> 真假
>condBoolean ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>condBoolean : 真假
>类型别名 :=> 真假
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber1 = condBoolean ? exprNumber1 : exprNumber2;
>resultIsNumber1 : 数字
>类型别名 :=> 数字
>condBoolean ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>condBoolean : 真假
>类型别名 :=> 真假
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString1 = condBoolean ? exprString1 : exprString2;
>resultIsString1 : 文字
>类型别名 :=> 文字
>condBoolean ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>condBoolean : 真假
>类型别名 :=> 真假
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject1 = condBoolean ? exprIsObject1 : exprIsObject2;
>resultIsObject1 : Object
>condBoolean ? exprIsObject1 : exprIsObject2 : Object
>condBoolean : 真假
>类型别名 :=> 真假
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean1 = condBoolean ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean1 : 文字 | 真假
>condBoolean ? exprString1 : exprBoolean1 : 文字 | 真假
>condBoolean : 真假
>类型别名 :=> 真假
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsAny2 = true ? exprAny1 : exprAny2;
>resultIsAny2 : 任意
>类型别名 :=> 任意
>true ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean2 = false ? exprBoolean1 : exprBoolean2;
>resultIsBoolean2 : 真假
>类型别名 :=> 真假
>false ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber2 = true ? exprNumber1 : exprNumber2;
>resultIsNumber2 : 数字
>类型别名 :=> 数字
>true ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>true : 为真
>类型别名 :=> 为真
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString2 = false ? exprString1 : exprString2;
>resultIsString2 : 文字
>类型别名 :=> 文字
>false ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>false : 为假
>类型别名 :=> 为假
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject2 = true ? exprIsObject1 : exprIsObject2;
>resultIsObject2 : Object
>true ? exprIsObject1 : exprIsObject2 : Object
>true : 为真
>类型别名 :=> 为真
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean2 = true ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean2 : 文字 | 真假
>true ? exprString1 : exprBoolean1 : 文字 | 真假
>true : 为真
>类型别名 :=> 为真
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsStringOrBoolean3 = false ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean3 : 文字 | 真假
>false ? exprString1 : exprBoolean1 : 文字 | 真假
>false : 为假
>类型别名 :=> 为假
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsAny3 = !true ? exprAny1 : exprAny2;
>resultIsAny3 : 任意
>类型别名 :=> 任意
>!true ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>!true : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean3 = typeof "123" == "string" ? exprBoolean1 : exprBoolean2;
>resultIsBoolean3 : 真假
>类型别名 :=> 真假
>typeof "123" == "string" ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>typeof "123" == "string" : 真假
>类型别名 :=> 真假
>typeof "123" : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>"123" : "123"
>"string" : "string"
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber3 = 2 > 1 ? exprNumber1 : exprNumber2;
>resultIsNumber3 : 数字
>类型别名 :=> 数字
>2 > 1 ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>2 > 1 : 真假
>类型别名 :=> 真假
>2 : 2
>1 : 1
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString3 = null === undefined ? exprString1 : exprString2;
>resultIsString3 : 文字
>类型别名 :=> 文字
>null === undefined ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>null === undefined : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject3 = true || false ? exprIsObject1 : exprIsObject2;
>resultIsObject3 : Object
>true || false ? exprIsObject1 : exprIsObject2 : Object
>true || false : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean4 = typeof "123" === "string" ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean4 : 文字 | 真假
>typeof "123" === "string" ? exprString1 : exprBoolean1 : 文字 | 真假
>typeof "123" === "string" : 真假
>类型别名 :=> 真假
>typeof "123" : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>"123" : "123"
>"string" : "string"
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

