=== tests/cases/conformance/controlFlow/controlFlowDestructuringDeclaration.ts ===
function f1() {
>f1 : () => 无值

    let x: string | number = 1;
>x : 文字 | 数字
>1 : 1

    x;
>x : 数字
>类型别名 :=> 数字

    let y: string | undefined = "";
>y : 文字 | 未定
>"" : ""

    y;
>y : 文字
>类型别名 :=> 文字
}

function f2() {
>f2 : () => 无值

    let [x]: [string | number] = [1];
>x : 文字 | 数字
>[1] : [数字]
>1 : 1

    x;
>x : 数字
>类型别名 :=> 数字

    let [y]: [string | undefined] = [""];
>y : 文字 | 未定
>[""] : [文字]
>"" : ""

    y;
>y : 文字
>类型别名 :=> 文字

    let [z = ""]: [string | undefined] = [undefined];
>z : 文字
>类型别名 :=> 文字
>"" : ""
>[undefined] : [未定]
>undefined : 未定
>类型别名 :=> 未定

    z;
>z : 文字
>类型别名 :=> 文字
}

function f3() {
>f3 : () => 无值

    let [x]: (string | number)[] = [1];
>x : 文字 | 数字
>[1] : 数字[]
>1 : 1

    x;
>x : 数字
>类型别名 :=> 数字

    let [y]: (string | undefined)[] = [""];
>y : 文字 | 未定
>[""] : 文字[]
>"" : ""

    y;
>y : 文字
>类型别名 :=> 文字

    let [z = ""]: (string | undefined)[] = [undefined];
>z : 文字
>类型别名 :=> 文字
>"" : ""
>[undefined] : 未定[]
>undefined : 未定
>类型别名 :=> 未定

    z;
>z : 文字
>类型别名 :=> 文字
}

function f4() {
>f4 : () => 无值

    let { x }: { x: string | number } = { x: 1 };
>x : 文字 | 数字
>x : 文字 | 数字
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

    x;
>x : 数字
>类型别名 :=> 数字

    let { y }: { y: string | undefined } = { y: "" };
>y : 文字 | 未定
>y : 文字 | 未定
>{ y: "" } : { y: 文字; }
>y : 文字
>类型别名 :=> 文字
>"" : ""

    y;
>y : 文字
>类型别名 :=> 文字

    let { z = "" }: { z: string | undefined } = { z: undefined };
>z : 文字
>类型别名 :=> 文字
>"" : ""
>z : 文字 | 未定
>{ z: undefined } : { z: 未定; }
>z : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

    z;
>z : 文字
>类型别名 :=> 文字
}

function f5() {
>f5 : () => 无值

    let { x }: { x?: string | number } = { x: 1 };
>x : 文字 | 数字 | 未定
>x : 文字 | 数字 | 未定
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

    x;
>x : 数字
>类型别名 :=> 数字

    let { y }: { y?: string | undefined } = { y: "" };
>y : 文字 | 未定
>y : 文字 | 未定
>{ y: "" } : { y: 文字; }
>y : 文字
>类型别名 :=> 文字
>"" : ""

    y;
>y : 文字
>类型别名 :=> 文字

    let { z = "" }: { z?: string | undefined } = { z: undefined };
>z : 文字
>类型别名 :=> 文字
>"" : ""
>z : 文字 | 未定
>{ z: undefined } : { z: 未定; }
>z : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

    z;
>z : 文字
>类型别名 :=> 文字
}

function f6() {
>f6 : () => 无值

    let { x }: { x?: string | number } = {};
>x : 文字 | 数字 | 未定
>x : 文字 | 数字 | 未定
>{} : {}

    x;
>x : 文字 | 数字 | 未定

    let { y }: { y?: string | undefined } = {};
>y : 文字 | 未定
>y : 文字 | 未定
>{} : {}

    y;
>y : 文字 | 未定

    let { z = "" }: { z?: string | undefined } = {};
>z : 文字
>类型别名 :=> 文字
>"" : ""
>z : 文字 | 未定
>{} : {}

    z;
>z : 文字
>类型别名 :=> 文字
}

function f7() {
>f7 : () => 无值

    let o: { [x: string]: number } = { x: 1 };
>o : { [x: 文字]: 数字; }
>x : 文字
>类型别名 :=> 文字
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

    let { x }: { [x: string]: string | number } = o;
>x : 文字 | 数字
>x : 文字
>类型别名 :=> 文字
>o : { [x: 文字]: 数字; }

    x;
>x : 数字
>类型别名 :=> 数字
}

