=== tests/cases/conformance/controlFlow/controlFlowDestructuringDeclaration.ts ===
function f1() {
>f1 : () => void

    let x: string | number = 1;
>x : string | number
>1 : 1

    x;
>x : number
>类型别名 :=> 数字

    let y: string | undefined = "";
>y : string | undefined
>"" : ""

    y;
>y : string
>类型别名 :=> 文字
}

function f2() {
>f2 : () => void

    let [x]: [string | number] = [1];
>x : string | number
>[1] : [number]
>1 : 1

    x;
>x : number
>类型别名 :=> 数字

    let [y]: [string | undefined] = [""];
>y : string | undefined
>[""] : [string]
>"" : ""

    y;
>y : string
>类型别名 :=> 文字

    let [z = ""]: [string | undefined] = [undefined];
>z : string
>类型别名 :=> 文字
>"" : ""
>[undefined] : [undefined]
>undefined : undefined
>类型别名 :=> 未定

    z;
>z : string
>类型别名 :=> 文字
}

function f3() {
>f3 : () => void

    let [x]: (string | number)[] = [1];
>x : string | number
>[1] : number[]
>1 : 1

    x;
>x : number
>类型别名 :=> 数字

    let [y]: (string | undefined)[] = [""];
>y : string | undefined
>[""] : string[]
>"" : ""

    y;
>y : string
>类型别名 :=> 文字

    let [z = ""]: (string | undefined)[] = [undefined];
>z : string
>类型别名 :=> 文字
>"" : ""
>[undefined] : undefined[]
>undefined : undefined
>类型别名 :=> 未定

    z;
>z : string
>类型别名 :=> 文字
}

function f4() {
>f4 : () => void

    let { x }: { x: string | number } = { x: 1 };
>x : string | number
>x : string | number
>{ x: 1 } : { x: number; }
>x : number
>类型别名 :=> 数字
>1 : 1

    x;
>x : number
>类型别名 :=> 数字

    let { y }: { y: string | undefined } = { y: "" };
>y : string | undefined
>y : string | undefined
>{ y: "" } : { y: string; }
>y : string
>类型别名 :=> 文字
>"" : ""

    y;
>y : string
>类型别名 :=> 文字

    let { z = "" }: { z: string | undefined } = { z: undefined };
>z : string
>类型别名 :=> 文字
>"" : ""
>z : string | undefined
>{ z: undefined } : { z: undefined; }
>z : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

    z;
>z : string
>类型别名 :=> 文字
}

function f5() {
>f5 : () => void

    let { x }: { x?: string | number } = { x: 1 };
>x : string | number | undefined
>x : string | number | undefined
>{ x: 1 } : { x: number; }
>x : number
>类型别名 :=> 数字
>1 : 1

    x;
>x : number
>类型别名 :=> 数字

    let { y }: { y?: string | undefined } = { y: "" };
>y : string | undefined
>y : string | undefined
>{ y: "" } : { y: string; }
>y : string
>类型别名 :=> 文字
>"" : ""

    y;
>y : string
>类型别名 :=> 文字

    let { z = "" }: { z?: string | undefined } = { z: undefined };
>z : string
>类型别名 :=> 文字
>"" : ""
>z : string | undefined
>{ z: undefined } : { z: undefined; }
>z : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

    z;
>z : string
>类型别名 :=> 文字
}

function f6() {
>f6 : () => void

    let { x }: { x?: string | number } = {};
>x : string | number | undefined
>x : string | number | undefined
>{} : {}

    x;
>x : string | number | undefined

    let { y }: { y?: string | undefined } = {};
>y : string | undefined
>y : string | undefined
>{} : {}

    y;
>y : string | undefined

    let { z = "" }: { z?: string | undefined } = {};
>z : string
>类型别名 :=> 文字
>"" : ""
>z : string | undefined
>{} : {}

    z;
>z : string
>类型别名 :=> 文字
}

function f7() {
>f7 : () => void

    let o: { [x: string]: number } = { x: 1 };
>o : { [x: string]: number; }
>x : string
>类型别名 :=> 文字
>{ x: 1 } : { x: number; }
>x : number
>类型别名 :=> 数字
>1 : 1

    let { x }: { [x: string]: string | number } = o;
>x : string | number
>x : string
>类型别名 :=> 文字
>o : { [x: string]: number; }

    x;
>x : number
>类型别名 :=> 数字
}

