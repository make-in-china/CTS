=== tests/cases/compiler/assignmentCompatWithOverloads.ts ===
function f1(x: string): number { return null; }
>f1 : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

function f2(x: string): string { return null; }
>f2 : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

function f3(x: number): number { return null; }
>f3 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

function f4(x: string): string;
>f4 : { (x: 文字): 文字; (x: 数字): 数字; }
>x : 文字
>类型别名 :=> 文字

function f4(x: number): number;
>f4 : { (x: 文字): 文字; (x: 数字): 数字; }
>x : 数字
>类型别名 :=> 数字

function f4(x: any): any { return undefined; }
>f4 : { (x: 文字): 文字; (x: 数字): 数字; }
>x : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

var g: (s1: string) => number;
>g : (s1: 文字) => 数字
>s1 : 文字
>类型别名 :=> 文字

g = f1; // OK 
>g = f1 : (x: 文字) => 数字
>g : (s1: 文字) => 数字
>f1 : (x: 文字) => 数字

g = f2; // Error
>g = f2 : (x: 文字) => 文字
>g : (s1: 文字) => 数字
>f2 : (x: 文字) => 文字

g = f3; // Error
>g = f3 : (x: 数字) => 数字
>g : (s1: 文字) => 数字
>f3 : (x: 数字) => 数字

g = f4; // Error
>g = f4 : { (x: 文字): 文字; (x: 数字): 数字; }
>g : (s1: 文字) => 数字
>f4 : { (x: 文字): 文字; (x: 数字): 数字; }

class C {
>C : C

    constructor(x: string);
>x : 文字
>类型别名 :=> 文字

constructor(x: any) {}
>x : 任意
>类型别名 :=> 任意
}

var d: new(x: number) => void;
>d : 新建 (x: 数字) => 无值
>x : 数字
>类型别名 :=> 数字

d = C; // Error
>d = C : 类为 C
>d : 新建 (x: 数字) => 无值
>C : 类为 C

