=== tests/cases/compiler/typeMatch1.ts ===
interface I { z; }
>I : I
>z : 任意
>类型别名 :=> 任意

interface I2 { z; }
>I2 : I2
>z : 任意
>类型别名 :=> 任意

var x1: { z: number; f(n: number): string; f(s: string): number; }
>x1 : { z: 数字; f(n: 数字): 文字; f(s: 文字): 数字; }
>z : 数字
>类型别名 :=> 数字
>f : { (n: 数字): 文字; (s: 文字): 数字; }
>n : 数字
>类型别名 :=> 数字
>f : { (n: 数字): 文字; (s: 文字): 数字; }
>s : 文字
>类型别名 :=> 文字

var x2: { z:number;f:{(n:number):string;(s:string):number;}; } = x1;
>x2 : { z: 数字; f: { (n: 数字): 文字; (s: 文字): 数字; }; }
>z : 数字
>类型别名 :=> 数字
>f : { (n: 数字): 文字; (s: 文字): 数字; }
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>x1 : { z: 数字; f(n: 数字): 文字; f(s: 文字): 数字; }

var i:I;
>i : I
>I : I

var i2:I2;
>i2 : I2
>I2 : I2

var x3:{ z; }= i;
>x3 : { z: 任意; }
>z : 任意
>类型别名 :=> 任意
>i : I

var x4:{ z; }= i2;
>x4 : { z: 任意; }
>z : 任意
>类型别名 :=> 任意
>i2 : I2

var x5:I=i2;
>x5 : I
>I : I
>i2 : I2

class C { private x; }
>C : C
>x : 任意
>类型别名 :=> 任意

class D { private x; }
>D : D
>x : 任意
>类型别名 :=> 任意

var x6=new C();
>x6 : C
>new C() : C
>C : 类为 C

var x7=new D();
>x7 : D
>new D() : D
>D : 类为 D

x6 = x7;
>x6 = x7 : D
>x6 : C
>x7 : D

x6=C;
>x6=C : 类为 C
>x6 : C
>C : 类为 C

C==D;
>C==D : 真假
>类型别名 :=> 真假
>C : 类为 C
>D : 类为 D

C==C;
>C==C : 真假
>类型别名 :=> 真假
>C : 类为 C
>C : 类为 C


