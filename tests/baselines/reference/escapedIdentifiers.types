=== tests/cases/compiler/escapedIdentifiers.ts ===
/*
    0 .. \u0030
    9 .. \u0039

    A .. \u0041
    Z .. \u005a

    a .. \u0061
    z .. \u00za
*/

// var decl
var \u0061 = 1;
>\u0061 : number
>类型别名 :=> 数字
>1 : 1

a ++;
>a ++ : number
>类型别名 :=> 数字
>a : number
>类型别名 :=> 数字

\u0061 ++;
>\u0061 ++ : number
>类型别名 :=> 数字
>\u0061 : number
>类型别名 :=> 数字

var b = 1;
>b : number
>类型别名 :=> 数字
>1 : 1

b ++;
>b ++ : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字

\u0062 ++;
>\u0062 ++ : number
>类型别名 :=> 数字
>\u0062 : number
>类型别名 :=> 数字

// modules
module moduleType1 { 
>moduleType1 : typeof moduleType1

    export var baz1: number;
>baz1 : number
>类型别名 :=> 数字
}
module moduleType\u0032 { 
>moduleType\u0032 : typeof moduleType\u0032

    export var baz2: number;
>baz2 : number
>类型别名 :=> 数字
}

moduleType1.baz1 = 3;
>moduleType1.baz1 = 3 : 3
>moduleType1.baz1 : number
>类型别名 :=> 数字
>moduleType1 : typeof moduleType1
>baz1 : number
>类型别名 :=> 数字
>3 : 3

moduleType\u0031.baz1 = 3;
>moduleType\u0031.baz1 = 3 : 3
>moduleType\u0031.baz1 : number
>类型别名 :=> 数字
>moduleType\u0031 : typeof moduleType1
>baz1 : number
>类型别名 :=> 数字
>3 : 3

moduleType2.baz2 = 3;
>moduleType2.baz2 = 3 : 3
>moduleType2.baz2 : number
>类型别名 :=> 数字
>moduleType2 : typeof moduleType\u0032
>baz2 : number
>类型别名 :=> 数字
>3 : 3

moduleType\u0032.baz2 = 3;
>moduleType\u0032.baz2 = 3 : 3
>moduleType\u0032.baz2 : number
>类型别名 :=> 数字
>moduleType\u0032 : typeof moduleType\u0032
>baz2 : number
>类型别名 :=> 数字
>3 : 3

// classes

class classType1 { 
>classType1 : classType1

    public foo1: number;
>foo1 : number
>类型别名 :=> 数字
}
class classType\u0032 { 
>classType\u0032 : classType\u0032

    public foo2: number;
>foo2 : number
>类型别名 :=> 数字
}

var classType1Object1 = new classType1();
>classType1Object1 : classType1
>new classType1() : classType1
>classType1 : typeof classType1

classType1Object1.foo1 = 2;
>classType1Object1.foo1 = 2 : 2
>classType1Object1.foo1 : number
>类型别名 :=> 数字
>classType1Object1 : classType1
>foo1 : number
>类型别名 :=> 数字
>2 : 2

var classType1Object2 = new classType\u0031();
>classType1Object2 : classType1
>new classType\u0031() : classType1
>classType\u0031 : typeof classType1

classType1Object2.foo1 = 2;
>classType1Object2.foo1 = 2 : 2
>classType1Object2.foo1 : number
>类型别名 :=> 数字
>classType1Object2 : classType1
>foo1 : number
>类型别名 :=> 数字
>2 : 2

var classType2Object1 = new classType2();
>classType2Object1 : classType\u0032
>new classType2() : classType\u0032
>classType2 : typeof classType\u0032

classType2Object1.foo2 = 2;
>classType2Object1.foo2 = 2 : 2
>classType2Object1.foo2 : number
>类型别名 :=> 数字
>classType2Object1 : classType\u0032
>foo2 : number
>类型别名 :=> 数字
>2 : 2

var classType2Object2 = new classType\u0032();
>classType2Object2 : classType\u0032
>new classType\u0032() : classType\u0032
>classType\u0032 : typeof classType\u0032

classType2Object2.foo2 = 2;
>classType2Object2.foo2 = 2 : 2
>classType2Object2.foo2 : number
>类型别名 :=> 数字
>classType2Object2 : classType\u0032
>foo2 : number
>类型别名 :=> 数字
>2 : 2

// interfaces
interface interfaceType1 { 
>interfaceType1 : interfaceType1

    bar1: number;
>bar1 : number
>类型别名 :=> 数字
}
interface interfaceType\u0032 { 
>interfaceType\u0032 : interfaceType\u0032

    bar2: number;
>bar2 : number
>类型别名 :=> 数字
}

var interfaceType1Object1 = <interfaceType1>{ bar1: 0 };
>interfaceType1Object1 : interfaceType1
><interfaceType1>{ bar1: 0 } : interfaceType1
>interfaceType1 : interfaceType1
>{ bar1: 0 } : { bar1: number; }
>bar1 : number
>类型别名 :=> 数字
>0 : 0

interfaceType1Object1.bar1 = 2;
>interfaceType1Object1.bar1 = 2 : 2
>interfaceType1Object1.bar1 : number
>类型别名 :=> 数字
>interfaceType1Object1 : interfaceType1
>bar1 : number
>类型别名 :=> 数字
>2 : 2

var interfaceType1Object2 = <interfaceType\u0031>{ bar1: 0 };
>interfaceType1Object2 : interfaceType1
><interfaceType\u0031>{ bar1: 0 } : interfaceType1
>interfaceType\u0031 : interfaceType1
>{ bar1: 0 } : { bar1: number; }
>bar1 : number
>类型别名 :=> 数字
>0 : 0

interfaceType1Object2.bar1 = 2;
>interfaceType1Object2.bar1 = 2 : 2
>interfaceType1Object2.bar1 : number
>类型别名 :=> 数字
>interfaceType1Object2 : interfaceType1
>bar1 : number
>类型别名 :=> 数字
>2 : 2

var interfaceType2Object1 = <interfaceType2>{ bar2: 0 };
>interfaceType2Object1 : interfaceType\u0032
><interfaceType2>{ bar2: 0 } : interfaceType\u0032
>interfaceType2 : interfaceType\u0032
>{ bar2: 0 } : { bar2: number; }
>bar2 : number
>类型别名 :=> 数字
>0 : 0

interfaceType2Object1.bar2 = 2;
>interfaceType2Object1.bar2 = 2 : 2
>interfaceType2Object1.bar2 : number
>类型别名 :=> 数字
>interfaceType2Object1 : interfaceType\u0032
>bar2 : number
>类型别名 :=> 数字
>2 : 2

var interfaceType2Object2 = <interfaceType\u0032>{ bar2: 0 };
>interfaceType2Object2 : interfaceType\u0032
><interfaceType\u0032>{ bar2: 0 } : interfaceType\u0032
>interfaceType\u0032 : interfaceType\u0032
>{ bar2: 0 } : { bar2: number; }
>bar2 : number
>类型别名 :=> 数字
>0 : 0

interfaceType2Object2.bar2 = 2;
>interfaceType2Object2.bar2 = 2 : 2
>interfaceType2Object2.bar2 : number
>类型别名 :=> 数字
>interfaceType2Object2 : interfaceType\u0032
>bar2 : number
>类型别名 :=> 数字
>2 : 2


// arguments
class testClass { 
>testClass : testClass

    public func(arg1: number, arg\u0032: string, arg\u0033: boolean, arg4: number) { 
>func : (arg1: number, arg2: string, arg3: boolean, arg4: number) => void
>arg1 : number
>类型别名 :=> 数字
>arg\u0032 : string
>类型别名 :=> 文字
>arg\u0033 : boolean
>类型别名 :=> 真假
>arg4 : number
>类型别名 :=> 数字

        arg\u0031 = 1;
>arg\u0031 = 1 : 1
>arg\u0031 : number
>类型别名 :=> 数字
>1 : 1

        arg2 = 'string';
>arg2 = 'string' : "string"
>arg2 : string
>类型别名 :=> 文字
>'string' : "string"

        arg\u0033 = true;
>arg\u0033 = true : true
>类型别名 :=> 为真
>arg\u0033 : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

        arg4 = 2;
>arg4 = 2 : 2
>arg4 : number
>类型别名 :=> 数字
>2 : 2
    }
}

// constructors
class constructorTestClass { 
>constructorTestClass : constructorTestClass

    constructor (public arg1: number,public arg\u0032: string,public arg\u0033: boolean,public arg4: number) { 
>arg1 : number
>类型别名 :=> 数字
>arg\u0032 : string
>类型别名 :=> 文字
>arg\u0033 : boolean
>类型别名 :=> 真假
>arg4 : number
>类型别名 :=> 数字
    }
}
var constructorTestObject = new constructorTestClass(1, 'string', true, 2);
>constructorTestObject : constructorTestClass
>new constructorTestClass(1, 'string', true, 2) : constructorTestClass
>constructorTestClass : typeof constructorTestClass
>1 : 1
>'string' : "string"
>true : true
>类型别名 :=> 为真
>2 : 2

constructorTestObject.arg\u0031 = 1;
>constructorTestObject.arg\u0031 = 1 : 1
>constructorTestObject.arg\u0031 : number
>类型别名 :=> 数字
>constructorTestObject : constructorTestClass
>arg\u0031 : number
>类型别名 :=> 数字
>1 : 1

constructorTestObject.arg2 = 'string';
>constructorTestObject.arg2 = 'string' : "string"
>constructorTestObject.arg2 : string
>类型别名 :=> 文字
>constructorTestObject : constructorTestClass
>arg2 : string
>类型别名 :=> 文字
>'string' : "string"

constructorTestObject.arg\u0033 = true;
>constructorTestObject.arg\u0033 = true : true
>类型别名 :=> 为真
>constructorTestObject.arg\u0033 : boolean
>类型别名 :=> 真假
>constructorTestObject : constructorTestClass
>arg\u0033 : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

constructorTestObject.arg4 = 2;
>constructorTestObject.arg4 = 2 : 2
>constructorTestObject.arg4 : number
>类型别名 :=> 数字
>constructorTestObject : constructorTestClass
>arg4 : number
>类型别名 :=> 数字
>2 : 2

// Lables

l\u0061bel1: 
>l\u0061bel1 : any
>类型别名 :=> 任意

    while (false)
>false : false
>类型别名 :=> 为假
    {  
       while(false)
>false : false
>类型别名 :=> 为假

           continue label1;  // it will go to next iteration of outer loop 
>label1 : any
>类型别名 :=> 任意
    } 

label2: 
>label2 : any
>类型别名 :=> 任意

    while (false)
>false : false
>类型别名 :=> 为假
    {  
       while(false)
>false : false
>类型别名 :=> 为假

           continue l\u0061bel2;  // it will go to next iteration of outer loop 
>l\u0061bel2 : any
>类型别名 :=> 任意
    } 

label3: 
>label3 : any
>类型别名 :=> 任意

    while (false)
>false : false
>类型别名 :=> 为假
    {  
       while(false)
>false : false
>类型别名 :=> 为假

           continue label3;  // it will go to next iteration of outer loop 
>label3 : any
>类型别名 :=> 任意
    } 

l\u0061bel4: 
>l\u0061bel4 : any
>类型别名 :=> 任意

    while (false)
>false : false
>类型别名 :=> 为假
    {  
       while(false)
>false : false
>类型别名 :=> 为假

           continue l\u0061bel4;  // it will go to next iteration of outer loop 
>l\u0061bel4 : any
>类型别名 :=> 任意
    } 
