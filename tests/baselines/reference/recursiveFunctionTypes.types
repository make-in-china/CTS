=== tests/cases/compiler/recursiveFunctionTypes.ts ===
function fn(): typeof fn { return 1; }
>fn : () => 类为 fn
>fn : () => 类为 fn
>1 : 1

var x: number = fn; // error
>x : 数字
>类型别名 :=> 数字
>fn : () => 类为 fn

var y: () => number = fn; // ok
>y : () => 数字
>fn : () => 类为 fn

var f: () => typeof g;
>f : () => () => 任意
>g : () => () => 任意

var g: () => typeof f;
>g : () => () => 任意
>f : () => () => 任意

function f1(d: typeof f1) { }
>f1 : (d: 类为 f1) => 无值
>d : (d: 类为 f1) => 无值
>f1 : (d: 类为 f1) => 无值

function f2(): typeof g2 { } 
>f2 : () => () => 类为 f2
>g2 : () => () => 类为 g2

function g2(): typeof f2 { } 
>g2 : () => () => 类为 g2
>f2 : () => () => 类为 f2

interface I<T> { }
>I : I<T>
>T : T

function f3(): I<typeof f3> { return f3; }
>f3 : () => I<类为 f3>
>I : I<T>
>f3 : () => I<类为 f3>
>f3 : () => I<类为 f3>

var a: number = f3; // error
>a : 数字
>类型别名 :=> 数字
>f3 : () => I<类为 f3>

class C {
>C : C

     static g(t: typeof C.g){ }
>g : (t: 类为 C.g) => 无值
>t : (t: 类为 C.g) => 无值
>C.g : (t: 类为 C.g) => 无值
>C : 类为 C
>g : (t: 类为 C.g) => 无值
}
C.g(3); // error
>C.g(3) : 无值
>类型别名 :=> 无值
>C.g : (t: 类为 C.g) => 无值
>C : 类为 C
>g : (t: 类为 C.g) => 无值
>3 : 3

var f4: () => typeof f4;
>f4 : () => 任意
>f4 : () => 任意

f4 = 3; // error
>f4 = 3 : 3
>f4 : () => 任意
>3 : 3

function f5() { return f5; }
>f5 : () => 类为 f5
>f5 : () => 类为 f5

function f6(): typeof f6;
>f6 : { (): 类为 f6; (a: 类为 f6): () => 数字; }
>f6 : { (): 类为 f6; (a: 类为 f6): () => 数字; }

function f6(a: typeof f6): () => number;
>f6 : { (): 类为 f6; (a: 类为 f6): () => 数字; }
>a : { (): 类为 f6; (a: 类为 f6): () => 数字; }
>f6 : { (): 类为 f6; (a: 类为 f6): () => 数字; }

function f6(a?: any) { return f6; }
>f6 : { (): 类为 f6; (a: 类为 f6): () => 数字; }
>a : 任意
>类型别名 :=> 任意
>f6 : { (): 类为 f6; (a: 类为 f6): () => 数字; }

f6("", 3); // error (arity mismatch)
>f6("", 3) : 任意
>类型别名 :=> 任意
>f6 : { (): 类为 f6; (a: 类为 f6): () => 数字; }
>"" : ""
>3 : 3

f6(""); // ok (function takes an any param)
>f6("") : 任意
>类型别名 :=> 任意
>f6 : { (): 类为 f6; (a: 类为 f6): () => 数字; }
>"" : ""

f6(); // ok
>f6() : { (): 类为 f6; (a: 类为 f6): () => 数字; }
>f6 : { (): 类为 f6; (a: 类为 f6): () => 数字; }

declare function f7(): typeof f7;
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }

declare function f7(a: typeof f7): () => number;
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }
>a : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }

declare function f7(a: number): number;
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }
>a : 数字
>类型别名 :=> 数字

declare function f7(a?: typeof f7): typeof f7;
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }
>a : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }

f7("", 3); // error (arity mismatch)
>f7("", 3) : 任意
>类型别名 :=> 任意
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }
>"" : ""
>3 : 3

f7(""); // ok (function takes an any param)
>f7("") : 任意
>类型别名 :=> 任意
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }
>"" : ""

f7(); // ok
>f7() : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }
>f7 : { (): 类为 f7; (a: 类为 f7): () => 数字; (a: 数字): 数字; (a?: 类为 f7): 类为 f7; }

