=== tests/cases/compiler/es5-asyncFunctionTryStatements.ts ===
declare var x: any, y: any, z: any, a: any, b: any, c: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

async function tryCatch0() {
>tryCatch0 : () => Promise<无值>

    var x: any, y: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    try {
        x;
>x : 任意
>类型别名 :=> 任意
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        y;
>y : 任意
>类型别名 :=> 任意
    }
}

async function tryCatch1() {
>tryCatch1 : () => Promise<无值>

    var x: any, y: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    try {
        await x;
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        y;
>y : 任意
>类型别名 :=> 任意
    }
}

async function tryCatch2() {
>tryCatch2 : () => Promise<无值>

    var x: any, y: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    try {
        x;
>x : 任意
>类型别名 :=> 任意
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        await y;
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
    }
}

async function tryCatch3(): Promise<Function> {
>tryCatch3 : () => Promise<Function>
>Promise : Promise<T>
>Function : Function

    var x: any, y: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    try {
        await x;
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        return () => e;
>() => e : () => 任意
>e : 任意
>类型别名 :=> 任意
    }
}
async function tryFinally0() {
>tryFinally0 : () => Promise<无值>

    var x: any, y: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    try {
        x;
>x : 任意
>类型别名 :=> 任意
    }
    finally {
        y;
>y : 任意
>类型别名 :=> 任意
    }
}

async function tryFinally1() {
>tryFinally1 : () => Promise<无值>

    var x: any, y: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    try {
        await x;
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
    finally {
        y;
>y : 任意
>类型别名 :=> 任意
    }
}

async function tryFinally2() {
>tryFinally2 : () => Promise<无值>

    var x: any, y: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

    try {
        x;
>x : 任意
>类型别名 :=> 任意
    }
    finally {
        await y;
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
    }
}

async function tryCatchFinally0() {
>tryCatchFinally0 : () => Promise<无值>

    var x: any, y: any, z: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    try {
        x;
>x : 任意
>类型别名 :=> 任意
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        y;
>y : 任意
>类型别名 :=> 任意
    }
    finally {
        z;
>z : 任意
>类型别名 :=> 任意
    }
}

async function tryCatchFinally1() {
>tryCatchFinally1 : () => Promise<无值>

    var x: any, y: any, z: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    try {
        await x;
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        y;
>y : 任意
>类型别名 :=> 任意
    }
    finally {
        z;
>z : 任意
>类型别名 :=> 任意
    }
}

async function tryCatchFinally2() {
>tryCatchFinally2 : () => Promise<无值>

    var x: any, y: any, z: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    try {
        x;
>x : 任意
>类型别名 :=> 任意
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        await y;
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
    }
    finally {
        z;
>z : 任意
>类型别名 :=> 任意
    }
}

async function tryCatchFinally3() {
>tryCatchFinally3 : () => Promise<无值>

    var x: any, y: any, z: any;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    try {
        x;
>x : 任意
>类型别名 :=> 任意
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        y;
>y : 任意
>类型别名 :=> 任意
    }
    finally {
        await z;
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
    }
}
