=== tests/cases/compiler/lambdaArgCrash.ts ===
class Event {
>Event : Event

	 private _listeners: any[] = [];
>_listeners : 任意[]
>[] : 未定[]

	 constructor () {

		 // TODO: remove

		 this._listeners = [];
>this._listeners = [] : 未定[]
>this._listeners : 任意[]
>this : 本体
>_listeners : 任意[]
>[] : 未定[]

	}

	 add(listener: () => any): void {
>add : (listener: () => 任意) => 无值
>listener : () => 任意

		 /// <summary>Registers a new listener for the event.</summary>

		 /// <param name="listener">The callback function to register.</param>

		 this._listeners.push(listener);
>this._listeners.push(listener) : 数字
>类型别名 :=> 数字
>this._listeners.push : (...items: 任意[]) => 数字
>this._listeners : 任意[]
>this : 本体
>_listeners : 任意[]
>push : (...items: 任意[]) => 数字
>listener : () => 任意

	}

}
 
class ItemSetEvent extends Event {
>ItemSetEvent : ItemSetEvent
>Event : Event

	 add(listener: (items: ItemSet) => void ) {
>add : (listener: (items: 任意) => 无值) => 无值
>listener : (items: 任意) => 无值
>items : 任意
>类型别名 :=> 任意
>ItemSet : No type information available!

	 	super.add(listener);
>super.add(listener) : 无值
>类型别名 :=> 无值
>super.add : (listener: () => 任意) => 无值
>super : Event
>add : (listener: () => 任意) => 无值
>listener : (items: 任意) => 无值

	}

}

