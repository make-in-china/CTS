=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/parametersWithNoAnnotationAreAny.ts ===
function foo(x) { return x; }
>foo : (x: any) => any
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

var f = function foo(x) { return x; }
>f : (x: any) => any
>function foo(x) { return x; } : (x: any) => any
>foo : (x: any) => any
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

var f2 = (x) => x;
>f2 : (x: any) => any
>(x) => x : (x: any) => any
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

var f3 = <T>(x) => x;
>f3 : <T>(x: any) => any
><T>(x) => x : <T>(x: any) => any
>T : T
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

class C {
>C : C

    foo(x) {
>foo : (x: any) => any
>x : any
>类型别名 :=> 任意

        return x;
>x : any
>类型别名 :=> 任意
    }
}

interface I {
>I : I

    foo(x);
>foo : (x: any) => any
>x : any
>类型别名 :=> 任意

    foo2(x, y);
>foo2 : (x: any, y: any) => any
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
}

var a: {
>a : { foo(x: any): any; }

    foo(x);
>foo : (x: any) => any
>x : any
>类型别名 :=> 任意
}

var b = {
>b : { foo(x: any): any; a: (x: any) => any; b: (x: any) => any; }
>{    foo(x) {        return x;    },    a: function foo(x) {        return x;    },    b: (x) => x} : { foo(x: any): any; a: (x: any) => any; b: (x: any) => any; }

    foo(x) {
>foo : (x: any) => any
>x : any
>类型别名 :=> 任意

        return x;
>x : any
>类型别名 :=> 任意

    },
    a: function foo(x) {
>a : (x: any) => any
>function foo(x) {        return x;    } : (x: any) => any
>foo : (x: any) => any
>x : any
>类型别名 :=> 任意

        return x;
>x : any
>类型别名 :=> 任意

    },
    b: (x) => x
>b : (x: any) => any
>(x) => x : (x: any) => any
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
}
