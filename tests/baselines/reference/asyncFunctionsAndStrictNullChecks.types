=== tests/cases/compiler/asyncFunctionsAndStrictNullChecks.ts ===
declare namespace Windows.Foundation {
>Windows : 任意
>类型别名 :=> 任意
>Foundation : 任意
>类型别名 :=> 任意

    interface IPromise<TResult> {
>IPromise : IPromise<TResult>
>TResult : TResult

        then<U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: ((value: TResult) => IPromise<U>) | 未定, error?: ((error: 任意) => IPromise<U>) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => IPromise<U>) | 未定, error?: ((error: 任意) => U) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => U) | 未定, error?: ((error: 任意) => IPromise<U>) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => U) | 未定, error?: ((error: 任意) => U) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; }
>U : U
>success : ((value: TResult) => IPromise<U>) | 未定
>value : TResult
>TResult : TResult
>IPromise : IPromise<TResult>
>U : U
>error : ((error: 任意) => IPromise<U>) | 未定
>error : 任意
>类型别名 :=> 任意
>IPromise : IPromise<TResult>
>U : U
>progress : ((progress: 任意) => 无值) | 未定
>progress : 任意
>类型别名 :=> 任意
>IPromise : IPromise<TResult>
>U : U

        then<U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: ((value: TResult) => IPromise<U>) | 未定, error?: ((error: 任意) => IPromise<U>) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => IPromise<U>) | 未定, error?: ((error: 任意) => U) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => U) | 未定, error?: ((error: 任意) => IPromise<U>) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => U) | 未定, error?: ((error: 任意) => U) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; }
>U : U
>success : ((value: TResult) => IPromise<U>) | 未定
>value : TResult
>TResult : TResult
>IPromise : IPromise<TResult>
>U : U
>error : ((error: 任意) => U) | 未定
>error : 任意
>类型别名 :=> 任意
>U : U
>progress : ((progress: 任意) => 无值) | 未定
>progress : 任意
>类型别名 :=> 任意
>IPromise : IPromise<TResult>
>U : U

        then<U>(success?: (value: TResult) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: ((value: TResult) => IPromise<U>) | 未定, error?: ((error: 任意) => IPromise<U>) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => IPromise<U>) | 未定, error?: ((error: 任意) => U) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => U) | 未定, error?: ((error: 任意) => IPromise<U>) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => U) | 未定, error?: ((error: 任意) => U) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; }
>U : U
>success : ((value: TResult) => U) | 未定
>value : TResult
>TResult : TResult
>U : U
>error : ((error: 任意) => IPromise<U>) | 未定
>error : 任意
>类型别名 :=> 任意
>IPromise : IPromise<TResult>
>U : U
>progress : ((progress: 任意) => 无值) | 未定
>progress : 任意
>类型别名 :=> 任意
>IPromise : IPromise<TResult>
>U : U

        then<U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: ((value: TResult) => IPromise<U>) | 未定, error?: ((error: 任意) => IPromise<U>) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => IPromise<U>) | 未定, error?: ((error: 任意) => U) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => U) | 未定, error?: ((error: 任意) => IPromise<U>) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; <U>(success?: ((value: TResult) => U) | 未定, error?: ((error: 任意) => U) | 未定, progress?: ((progress: 任意) => 无值) | 未定): IPromise<U>; }
>U : U
>success : ((value: TResult) => U) | 未定
>value : TResult
>TResult : TResult
>U : U
>error : ((error: 任意) => U) | 未定
>error : 任意
>类型别名 :=> 任意
>U : U
>progress : ((progress: 任意) => 无值) | 未定
>progress : 任意
>类型别名 :=> 任意
>IPromise : IPromise<TResult>
>U : U

        done<U>(success?: (value: TResult) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
>done : <U>(success?: ((value: TResult) => 任意) | 未定, error?: ((error: 任意) => 任意) | 未定, progress?: ((progress: 任意) => 无值) | 未定) => 无值
>U : U
>success : ((value: TResult) => 任意) | 未定
>value : TResult
>TResult : TResult
>error : ((error: 任意) => 任意) | 未定
>error : 任意
>类型别名 :=> 任意
>progress : ((progress: 任意) => 无值) | 未定
>progress : 任意
>类型别名 :=> 任意

        cancel(): void;
>cancel : () => 无值
    }
}

async function sample(promise: Windows.Foundation.IPromise<number>) {
>sample : (promise: Windows.Foundation.IPromise<数字>) => Promise<无值>
>promise : Windows.Foundation.IPromise<数字>
>Windows : 任意
>类型别名 :=> 任意
>Foundation : 任意
>类型别名 :=> 任意
>IPromise : Windows.Foundation.IPromise<TResult>

    var number = await promise;
>number : 数字
>类型别名 :=> 数字
>await promise : 数字
>类型别名 :=> 数字
>promise : Windows.Foundation.IPromise<数字>
}


declare function resolve1<T>(value: T): Promise<T>;
>resolve1 : <T>(value: T) => Promise<T>
>T : T
>value : T
>T : T
>Promise : Promise<T>
>T : T

declare function resolve2<T>(value: T): Windows.Foundation.IPromise<T>;
>resolve2 : <T>(value: T) => Windows.Foundation.IPromise<T>
>T : T
>value : T
>T : T
>Windows : 任意
>类型别名 :=> 任意
>Foundation : 任意
>类型别名 :=> 任意
>IPromise : Windows.Foundation.IPromise<TResult>
>T : T

async function sample2(x?: number) {
>sample2 : (x?: 数字 | 未定) => Promise<无值>
>x : 数字 | 未定

    let x1 = await resolve1(x);
>x1 : 数字 | 未定
>await resolve1(x) : 数字 | 未定
>resolve1(x) : Promise<数字 | 未定>
>resolve1 : <T>(value: T) => Promise<T>
>x : 数字 | 未定

    let x2 = await resolve2(x);
>x2 : 数字 | 未定
>await resolve2(x) : 数字 | 未定
>resolve2(x) : Windows.Foundation.IPromise<数字 | 未定>
>resolve2 : <T>(value: T) => Windows.Foundation.IPromise<T>
>x : 数字 | 未定
}

