=== tests/cases/conformance/classes/mixinClassesAnonymous.ts ===
type Constructor<T> = new(...args: any[]) => T;
>Constructor : Constructor<T>
>T : T
>args : 任意[]
>T : T

class Base {
>Base : Base

    constructor(public x: number, public y: number) {}
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
}

class Derived extends Base {
>Derived : Derived
>Base : Base

    constructor(x: number, y: number, public z: number) {
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字

        super(x, y);
>super(x, y) : 无值
>类型别名 :=> 无值
>super : 类为 Base
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
    }
}

const Printable = <T extends Constructor<Base>>(superClass: T) => class extends superClass {
>Printable : <T 扩展 Constructor<Base>>(superClass: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & T
><T extends Constructor<Base>>(superClass: T) => class extends superClass {    static message = "hello";    print() {        const output = this.x + "," + this.y;    }} : <T 扩展 Constructor<Base>>(superClass: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & T
>T : T
>Constructor : Constructor<T>
>Base : Base
>superClass : T
>T : T
>class extends superClass {    static message = "hello";    print() {        const output = this.x + "," + this.y;    }} : { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & T
>superClass : Base

    static message = "hello";
>message : 文字
>类型别名 :=> 文字
>"hello" : "hello"

    print() {
>print : () => 无值

        const output = this.x + "," + this.y;
>output : 文字
>类型别名 :=> 文字
>this.x + "," + this.y : 文字
>类型别名 :=> 文字
>this.x + "," : 文字
>类型别名 :=> 文字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>"," : ","
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字
    }
}

function Tagged<T extends Constructor<{}>>(superClass: T) {
>Tagged : <T 扩展 Constructor<{}>>(superClass: T) => { 新建 (...args: 任意[]): C; prototype: Tagged<任意>.C; } & T
>T : T
>Constructor : Constructor<T>
>superClass : T
>T : T

    class C extends superClass {
>C : C
>superClass : {}

        _tag: string;
>_tag : 文字
>类型别名 :=> 文字

        constructor(...args: any[]) {
>args : 任意[]

            super(...args);
>super(...args) : 无值
>类型别名 :=> 无值
>super : T
>...args : 任意
>类型别名 :=> 任意
>args : 任意[]

            this._tag = "hello";
>this._tag = "hello" : "hello"
>this._tag : 文字
>类型别名 :=> 文字
>this : 本体
>_tag : 文字
>类型别名 :=> 文字
>"hello" : "hello"
        }
    }
    return C;
>C : { 新建 (...args: 任意[]): C; prototype: Tagged<任意>.C; } & T
}

const Thing1 = Tagged(Derived);
>Thing1 : { 新建 (...args: 任意[]): Tagged<类为 Derived>.C; prototype: Tagged<任意>.C; } & 类为 Derived
>Tagged(Derived) : { 新建 (...args: 任意[]): Tagged<类为 Derived>.C; prototype: Tagged<任意>.C; } & 类为 Derived
>Tagged : <T 扩展 Constructor<{}>>(superClass: T) => { 新建 (...args: 任意[]): C; prototype: Tagged<任意>.C; } & T
>Derived : 类为 Derived

const Thing2 = Tagged(Printable(Derived));
>Thing2 : { 新建 (...args: 任意[]): Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C; prototype: Tagged<任意>.C; } & { 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived
>Tagged(Printable(Derived)) : { 新建 (...args: 任意[]): Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C; prototype: Tagged<任意>.C; } & { 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived
>Tagged : <T 扩展 Constructor<{}>>(superClass: T) => { 新建 (...args: 任意[]): C; prototype: Tagged<任意>.C; } & T
>Printable(Derived) : { 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived
>Printable : <T 扩展 Constructor<Base>>(superClass: T) => { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & T
>Derived : 类为 Derived

Thing2.message;
>Thing2.message : 文字
>类型别名 :=> 文字
>Thing2 : { 新建 (...args: 任意[]): Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C; prototype: Tagged<任意>.C; } & { 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived
>message : 文字
>类型别名 :=> 文字

function f1() {
>f1 : () => 无值

    const thing = new Thing1(1, 2, 3);
>thing : Tagged<类为 Derived>.C & Derived
>new Thing1(1, 2, 3) : Tagged<类为 Derived>.C & Derived
>Thing1 : { 新建 (...args: 任意[]): Tagged<类为 Derived>.C; prototype: Tagged<任意>.C; } & 类为 Derived
>1 : 1
>2 : 2
>3 : 3

    thing.x;
>thing.x : 数字
>类型别名 :=> 数字
>thing : Tagged<类为 Derived>.C & Derived
>x : 数字
>类型别名 :=> 数字

    thing._tag;
>thing._tag : 文字
>类型别名 :=> 文字
>thing : Tagged<类为 Derived>.C & Derived
>_tag : 文字
>类型别名 :=> 文字
}

function f2() {
>f2 : () => 无值

    const thing = new Thing2(1, 2, 3);
>thing : Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C & <类为 Derived>.(Anonymous class) & Derived
>new Thing2(1, 2, 3) : Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C & <类为 Derived>.(Anonymous class) & Derived
>Thing2 : { 新建 (...args: 任意[]): Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C; prototype: Tagged<任意>.C; } & { 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived
>1 : 1
>2 : 2
>3 : 3

    thing.x;
>thing.x : 数字
>类型别名 :=> 数字
>thing : Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C & <类为 Derived>.(Anonymous class) & Derived
>x : 数字
>类型别名 :=> 数字

    thing._tag;
>thing._tag : 文字
>类型别名 :=> 文字
>thing : Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C & <类为 Derived>.(Anonymous class) & Derived
>_tag : 文字
>类型别名 :=> 文字

    thing.print();
>thing.print() : 无值
>类型别名 :=> 无值
>thing.print : () => 无值
>thing : Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C & <类为 Derived>.(Anonymous class) & Derived
>print : () => 无值
}

class Thing3 extends Thing2 {
>Thing3 : Thing3
>Thing2 : Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C & <类为 Derived>.(Anonymous class) & Derived

    constructor(tag: string) {
>tag : 文字
>类型别名 :=> 文字

        super(10, 20, 30);
>super(10, 20, 30) : 无值
>类型别名 :=> 无值
>super : { 新建 (...args: 任意[]): Tagged<{ 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived>.C; prototype: Tagged<任意>.C; } & { 新建 (...args: 任意[]): <类为 Derived>.(Anonymous class); prototype: <任意>.(Anonymous class); message: 文字; } & 类为 Derived
>10 : 10
>20 : 20
>30 : 30

        this._tag = tag;
>this._tag = tag : 文字
>类型别名 :=> 文字
>this._tag : 文字
>类型别名 :=> 文字
>this : 本体
>_tag : 文字
>类型别名 :=> 文字
>tag : 文字
>类型别名 :=> 文字
    }
    test() {
>test : () => 无值

        this.print();
>this.print() : 无值
>类型别名 :=> 无值
>this.print : () => 无值
>this : 本体
>print : () => 无值
    }
}

// Repro from #13805

const Timestamped = <CT extends Constructor<object>>(Base: CT) => {
>Timestamped : <CT 扩展 Constructor<实例>>(Base: CT) => { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); } & CT
><CT extends Constructor<object>>(Base: CT) => {    return class extends Base {        timestamp = new Date();    };} : <CT 扩展 Constructor<实例>>(Base: CT) => { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); } & CT
>CT : CT
>Constructor : Constructor<T>
>Base : CT
>CT : CT

    return class extends Base {
>class extends Base {        timestamp = new Date();    } : { 新建 (...args: 任意[]): (Anonymous class); prototype: <任意>.(Anonymous class); } & CT
>Base : 实例
>类型别名 :=> 实例

        timestamp = new Date();
>timestamp : Date
>new Date() : Date
>Date : DateConstructor

    };
}

