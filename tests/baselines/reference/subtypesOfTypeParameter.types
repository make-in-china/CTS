=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfTypeParameter.ts ===
// checking whether other types are subtypes of type parameters

class C3<T> {
>C3 : C3<T>
>T : T

    foo: T;
>foo : T
>T : T
}

class D1<T, U> extends C3<T> {
>D1 : D1<T, U>
>T : T
>U : U
>C3 : C3<T>
>T : T

    foo: U; // error
>foo : U
>U : U
}

function f1<T, U>(x: T, y: U) {
>f1 : <T, U>(x: T, y: U) => 无值
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U

    var r = true ? x : y; // error
>r : T | U
>true ? x : y : T | U
>true : 为真
>类型别名 :=> 为真
>x : T
>y : U

    var r = true ? y : x; // error
>r : T | U
>true ? y : x : T | U
>true : 为真
>类型别名 :=> 为真
>y : U
>x : T
}

interface I1 { foo: number; }
>I1 : I1
>foo : 数字
>类型别名 :=> 数字

class C1 { foo: number; }
>C1 : C1
>foo : 数字
>类型别名 :=> 数字

class C2<T> { foo: T; }
>C2 : C2<T>
>T : T
>foo : T
>T : T

enum E { A }
>E : E
>A : E

function f() { }
>f : 类为 f

module f {
>f : 类为 f

    export var bar = 1;
>bar : 数字
>类型别名 :=> 数字
>1 : 1
}
class c { baz: string }
>c : c
>baz : 文字
>类型别名 :=> 文字

module c {
>c : 类为 c

    export var bar = 1;
>bar : 数字
>类型别名 :=> 数字
>1 : 1
}

// errors throughout
function f2<T, U>(x: T, y: U) {
>f2 : <T, U>(x: T, y: U) => 无值
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U

    var r0 = true ? x : null;
>r0 : T
>true ? x : null : T
>true : 为真
>类型别名 :=> 为真
>x : T
>null : 空值
>类型别名 :=> 空值

    var r0 = true ? null : x;
>r0 : T
>true ? null : x : T
>true : 为真
>类型别名 :=> 为真
>null : 空值
>类型别名 :=> 空值
>x : T

    var u: typeof undefined;
>u : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

    var r0b = true ? u : x;
>r0b : 任意
>类型别名 :=> 任意
>true ? u : x : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>u : 任意
>类型别名 :=> 任意
>x : T

    var r0b = true ? x : u;
>r0b : 任意
>类型别名 :=> 任意
>true ? x : u : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>x : T
>u : 任意
>类型别名 :=> 任意

    var r1 = true ? 1 : x; 
>r1 : 数字 | T
>true ? 1 : x : 1 | T
>true : 为真
>类型别名 :=> 为真
>1 : 1
>x : T

    var r1 = true ? x : 1;
>r1 : 数字 | T
>true ? x : 1 : 1 | T
>true : 为真
>类型别名 :=> 为真
>x : T
>1 : 1

    var r2 = true ? '' : x;
>r2 : 文字 | T
>true ? '' : x : T | ""
>true : 为真
>类型别名 :=> 为真
>'' : ""
>x : T

    var r2 = true ? x : '';
>r2 : 文字 | T
>true ? x : '' : T | ""
>true : 为真
>类型别名 :=> 为真
>x : T
>'' : ""

    var r3 = true ? true : x;
>r3 : 真假 | T
>true ? true : x : 为真 | T
>true : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真
>x : T

    var r3 = true ? x : true;
>r3 : 真假 | T
>true ? x : true : 为真 | T
>true : 为真
>类型别名 :=> 为真
>x : T
>true : 为真
>类型别名 :=> 为真

    var r4 = true ? new Date() : x;
>r4 : T | Date
>true ? new Date() : x : T | Date
>true : 为真
>类型别名 :=> 为真
>new Date() : Date
>Date : DateConstructor
>x : T

    var r4 = true ? x : new Date();
>r4 : T | Date
>true ? x : new Date() : T | Date
>true : 为真
>类型别名 :=> 为真
>x : T
>new Date() : Date
>Date : DateConstructor

    var r5 = true ? /1/ : x;
>r5 : RegExp | T
>true ? /1/ : x : RegExp | T
>true : 为真
>类型别名 :=> 为真
>/1/ : RegExp
>x : T

    var r5 = true ? x : /1/;
>r5 : RegExp | T
>true ? x : /1/ : RegExp | T
>true : 为真
>类型别名 :=> 为真
>x : T
>/1/ : RegExp

    var r6 = true ? { foo: 1 } : x;
>r6 : T | { foo: 数字; }
>true ? { foo: 1 } : x : T | { foo: 数字; }
>true : 为真
>类型别名 :=> 为真
>{ foo: 1 } : { foo: 数字; }
>foo : 数字
>类型别名 :=> 数字
>1 : 1
>x : T

    var r6 = true ? x : { foo: 1 };
>r6 : T | { foo: 数字; }
>true ? x : { foo: 1 } : T | { foo: 数字; }
>true : 为真
>类型别名 :=> 为真
>x : T
>{ foo: 1 } : { foo: 数字; }
>foo : 数字
>类型别名 :=> 数字
>1 : 1

    var r7 = true ? () => { } : x;
>r7 : T | (() => 无值)
>true ? () => { } : x : T | (() => 无值)
>true : 为真
>类型别名 :=> 为真
>() => { } : () => 无值
>x : T

    var r7 = true ? x : () => { };
>r7 : T | (() => 无值)
>true ? x : () => { } : T | (() => 无值)
>true : 为真
>类型别名 :=> 为真
>x : T
>() => { } : () => 无值

    var r8 = true ? <T>(x: T) => { return x } : x;
>r8 : T | (<T>(x: T) => T)
>true ? <T>(x: T) => { return x } : x : T | (<T>(x: T) => T)
>true : 为真
>类型别名 :=> 为真
><T>(x: T) => { return x } : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T
>x : T

    var r8b = true ? x : <T>(x: T) => { return x }; // type parameters not identical across declarations
>r8b : T | (<T>(x: T) => T)
>true ? x : <T>(x: T) => { return x } : T | (<T>(x: T) => T)
>true : 为真
>类型别名 :=> 为真
>x : T
><T>(x: T) => { return x } : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T

    var i1: I1;
>i1 : I1
>I1 : I1

    var r9 = true ? i1 : x;
>r9 : I1 | T
>true ? i1 : x : I1 | T
>true : 为真
>类型别名 :=> 为真
>i1 : I1
>x : T

    var r9 = true ? x : i1;
>r9 : I1 | T
>true ? x : i1 : I1 | T
>true : 为真
>类型别名 :=> 为真
>x : T
>i1 : I1

    var c1: C1;
>c1 : C1
>C1 : C1

    var r10 = true ? c1 : x;
>r10 : C1 | T
>true ? c1 : x : C1 | T
>true : 为真
>类型别名 :=> 为真
>c1 : C1
>x : T

    var r10 = true ? x : c1;
>r10 : C1 | T
>true ? x : c1 : C1 | T
>true : 为真
>类型别名 :=> 为真
>x : T
>c1 : C1


    var c2: C2<number>;
>c2 : C2<数字>
>C2 : C2<T>

    var r12 = true ? c2 : x;
>r12 : T | C2<数字>
>true ? c2 : x : T | C2<数字>
>true : 为真
>类型别名 :=> 为真
>c2 : C2<数字>
>x : T

    var r12 = true ? x : c2;
>r12 : T | C2<数字>
>true ? x : c2 : T | C2<数字>
>true : 为真
>类型别名 :=> 为真
>x : T
>c2 : C2<数字>


    var r13 = true ? E : x;
>r13 : T | 类为 E
>true ? E : x : T | 类为 E
>true : 为真
>类型别名 :=> 为真
>E : 类为 E
>x : T

    var r13 = true ? x : E;
>r13 : T | 类为 E
>true ? x : E : T | 类为 E
>true : 为真
>类型别名 :=> 为真
>x : T
>E : 类为 E

    var r14 = true ? E.A : x;
>r14 : T | E
>true ? E.A : x : T | E
>true : 为真
>类型别名 :=> 为真
>E.A : E
>E : 类为 E
>A : E
>x : T

    var r14 = true ? x : E.A;
>r14 : T | E
>true ? x : E.A : T | E
>true : 为真
>类型别名 :=> 为真
>x : T
>E.A : E
>E : 类为 E
>A : E

    var af: typeof f;
>af : 类为 f
>f : 类为 f

    var r15 = true ? af : x;
>r15 : T | 类为 f
>true ? af : x : T | 类为 f
>true : 为真
>类型别名 :=> 为真
>af : 类为 f
>x : T

    var r15 = true ? x : af;
>r15 : T | 类为 f
>true ? x : af : T | 类为 f
>true : 为真
>类型别名 :=> 为真
>x : T
>af : 类为 f

    var ac: typeof c;
>ac : 类为 c
>c : 类为 c

    var r16 = true ? ac : x;
>r16 : 类为 c | T
>true ? ac : x : 类为 c | T
>true : 为真
>类型别名 :=> 为真
>ac : 类为 c
>x : T

    var r16 = true ? x : ac;
>r16 : 类为 c | T
>true ? x : ac : 类为 c | T
>true : 为真
>类型别名 :=> 为真
>x : T
>ac : 类为 c

    function f17<T>(a: T) {
>f17 : <T>(a: T) => 无值
>T : T
>a : T
>T : T

        var r17 = true ? x : a;
>r17 : T | T
>true ? x : a : T | T
>true : 为真
>类型别名 :=> 为真
>x : T
>a : T

        var r17 = true ? a : x;
>r17 : T | T
>true ? a : x : T | T
>true : 为真
>类型别名 :=> 为真
>a : T
>x : T
    }

    function f18<T, U extends T>(a: U) {
>f18 : <T, U 扩展 T>(a: U) => 无值
>T : T
>U : U
>T : T
>a : U
>U : U

        var r18 = true ? x : a;
>r18 : T | U
>true ? x : a : T | U
>true : 为真
>类型别名 :=> 为真
>x : T
>a : U

        var r18 = true ? a : x;
>r18 : T | U
>true ? a : x : T | U
>true : 为真
>类型别名 :=> 为真
>a : U
>x : T
    }

    var r19 = true ? new Object() : x; // BCT is Object
>r19 : Object
>true ? new Object() : x : Object
>true : 为真
>类型别名 :=> 为真
>new Object() : Object
>Object : ObjectConstructor
>x : T

    var r19 = true ? x : new Object(); // BCT is Object
>r19 : Object
>true ? x : new Object() : Object
>true : 为真
>类型别名 :=> 为真
>x : T
>new Object() : Object
>Object : ObjectConstructor

    var r20 = true ? {} : x; // ok
>r20 : {}
>true ? {} : x : {}
>true : 为真
>类型别名 :=> 为真
>{} : {}
>x : T

    var r20 = true ? x : {}; // ok
>r20 : {}
>true ? x : {} : {}
>true : 为真
>类型别名 :=> 为真
>x : T
>{} : {}
}
