=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParameterWithoutAnnotationIsAnyArray.ts ===
// Rest parameters without type annotations are 'any', errors only for the functions with 2 rest params

function foo(...x) { }
>foo : (...x: 任意[]) => 无值
>x : 任意[]

var f = function foo(...x) { }
>f : (...x: 任意[]) => 无值
>function foo(...x) { } : (...x: 任意[]) => 无值
>foo : (...x: 任意[]) => 无值
>x : 任意[]

var f2 = (...x, ...y) => { }
>f2 : (...x: 任意[], ...y: 任意[]) => 无值
>(...x, ...y) => { } : (...x: 任意[], ...y: 任意[]) => 无值
>x : 任意[]
>y : 任意[]

class C {
>C : C

    foo(...x) { }
>foo : (...x: 任意[]) => 无值
>x : 任意[]
}

interface I {
>I : I

    (...x);
>x : 任意[]

    foo(...x, ...y);
>foo : (...x: 任意[], ...y: 任意[]) => 任意
>x : 任意[]
>y : 任意[]
}

var a: {
>a : { (...x: 任意[]): 任意; foo(...x: 任意[]): 任意; }

    (...x);
>x : 任意[]

    foo(...x);
>foo : (...x: 任意[]) => 任意
>x : 任意[]
}

var b = {
>b : { foo(...x: 任意[]): 无值; a: (...x: 任意[], ...y: 任意[]) => 无值; b: (...x: 任意[]) => 无值; }
>{    foo(...x) { },    a: function foo(...x, ...y) { },    b: (...x) => { }} : { foo(...x: 任意[]): 无值; a: (...x: 任意[], ...y: 任意[]) => 无值; b: (...x: 任意[]) => 无值; }

    foo(...x) { },
>foo : (...x: 任意[]) => 无值
>x : 任意[]

    a: function foo(...x, ...y) { },
>a : (...x: 任意[], ...y: 任意[]) => 无值
>function foo(...x, ...y) { } : (...x: 任意[], ...y: 任意[]) => 无值
>foo : (...x: 任意[], ...y: 任意[]) => 无值
>x : 任意[]
>y : 任意[]

    b: (...x) => { }
>b : (...x: 任意[]) => 无值
>(...x) => { } : (...x: 任意[]) => 无值
>x : 任意[]
}

