=== tests/cases/compiler/generics2.ts ===
interface A { a: string; }
>A : A
>a : 文字
>类型别名 :=> 文字

interface B extends A { b: string; }
>B : B
>A : A
>b : 文字
>类型别名 :=> 文字

interface C extends B { c: string; }
>C : C
>B : B
>c : 文字
>类型别名 :=> 文字

interface G<T, U extends B> {
>G : G<T, U>
>T : T
>U : U
>B : B

    x: T;
>x : T
>T : T

    y: U;
>y : U
>U : U
}


var v1: {
>v1 : { x: { a: 文字; }; y: { a: 文字; b: 文字; c: 文字; }; }

    x: { a: string; }
>x : { a: 文字; }
>a : 文字
>类型别名 :=> 文字

    y: { a: string; b: string; c: string };
>y : { a: 文字; b: 文字; c: 文字; }
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字
>c : 文字
>类型别名 :=> 文字

}; // Ok


var v2: G<{ a: string }, C>;   // Ok, equivalent to G<A, C>
>v2 : G<{ a: 文字; }, C>
>G : G<T, U>
>a : 文字
>类型别名 :=> 文字
>C : C

var v3: G<A, A>;               // Error, A not valid argument for U
>v3 : G<A, A>
>G : G<T, U>
>A : A
>A : A

var v4: G<G<A, B>, C>;         // Ok
>v4 : G<G<A, B>, C>
>G : G<T, U>
>G : G<T, U>
>A : A
>B : B
>C : C

var v5: G<any, any>;           // Error, any does not satisfy constraint B
>v5 : G<任意, 任意>
>G : G<T, U>

var v6: G<any>;                // Error, wrong number of arguments
>v6 : 任意
>类型别名 :=> 任意
>G : G<T, U>

var v7: G;                     // Error, no type arguments
>v7 : 任意
>类型别名 :=> 任意
>G : G<T, U>

