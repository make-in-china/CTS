=== tests/cases/compiler/discriminantPropertyCheck.ts ===
type Item = Item1 | Item2;
>Item : Item
>Item1 : Item1
>Item2 : Item2

interface Base {
>Base : Base

    bar: boolean;
>bar : 真假
>类型别名 :=> 真假
}

interface Item1 extends Base {
>Item1 : Item1
>Base : Base

    kind: "A";
>kind : "A"

    foo: string | undefined;
>foo : 文字 | 未定

    baz: boolean;
>baz : 真假
>类型别名 :=> 真假

    qux: true;
>qux : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真
}

interface Item2 extends Base {
>Item2 : Item2
>Base : Base

    kind: "B";
>kind : "B"

    foo: string | undefined;
>foo : 文字 | 未定

    baz: boolean;
>baz : 真假
>类型别名 :=> 真假

    qux: false;
>qux : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假
}

function goo1(x: Item) {
>goo1 : (x: Item) => 无值
>x : Item
>Item : Item

    if (x.kind === "A" && x.foo !== undefined) {
>x.kind === "A" && x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.kind === "A" : 真假
>类型别名 :=> 真假
>x.kind : "A" | "B"
>x : Item
>kind : "A" | "B"
>"A" : "A"
>x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.foo : 文字 | 未定
>x : Item1
>foo : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定

        x.foo.length;
>x.foo.length : 数字
>类型别名 :=> 数字
>x.foo : 文字
>类型别名 :=> 文字
>x : Item1
>foo : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
    }
}

function goo2(x: Item) {
>goo2 : (x: Item) => 无值
>x : Item
>Item : Item

    if (x.foo !== undefined && x.kind === "A") {
>x.foo !== undefined && x.kind === "A" : 真假
>类型别名 :=> 真假
>x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.foo : 文字 | 未定
>x : Item
>foo : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定
>x.kind === "A" : 真假
>类型别名 :=> 真假
>x.kind : "A" | "B"
>x : Item
>kind : "A" | "B"
>"A" : "A"

        x.foo.length;  // Error, intervening discriminant guard
>x.foo.length : 数字
>类型别名 :=> 数字
>x.foo : 文字 | 未定
>x : Item1
>foo : 文字 | 未定
>length : 数字
>类型别名 :=> 数字
    }
}

function foo1(x: Item) {
>foo1 : (x: Item) => 无值
>x : Item
>Item : Item

    if (x.bar && x.foo !== undefined) {
>x.bar && x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.bar : 真假
>类型别名 :=> 真假
>x : Item
>bar : 真假
>类型别名 :=> 真假
>x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.foo : 文字 | 未定
>x : Item
>foo : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定

        x.foo.length;
>x.foo.length : 数字
>类型别名 :=> 数字
>x.foo : 文字
>类型别名 :=> 文字
>x : Item
>foo : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
    }
}

function foo2(x: Item) {
>foo2 : (x: Item) => 无值
>x : Item
>Item : Item

    if (x.foo !== undefined && x.bar) {
>x.foo !== undefined && x.bar : 真假
>类型别名 :=> 真假
>x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.foo : 文字 | 未定
>x : Item
>foo : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定
>x.bar : 真假
>类型别名 :=> 真假
>x : Item
>bar : 真假
>类型别名 :=> 真假

        x.foo.length;
>x.foo.length : 数字
>类型别名 :=> 数字
>x.foo : 文字
>类型别名 :=> 文字
>x : Item
>foo : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
    }
}

function foo3(x: Item) {
>foo3 : (x: Item) => 无值
>x : Item
>Item : Item

    if (x.baz && x.foo !== undefined) {
>x.baz && x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.baz : 真假
>类型别名 :=> 真假
>x : Item
>baz : 真假
>类型别名 :=> 真假
>x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.foo : 文字 | 未定
>x : Item
>foo : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定

        x.foo.length;
>x.foo.length : 数字
>类型别名 :=> 数字
>x.foo : 文字
>类型别名 :=> 文字
>x : Item
>foo : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
    }
}

function foo4(x: Item) {
>foo4 : (x: Item) => 无值
>x : Item
>Item : Item

    if (x.foo !== undefined && x.baz) {
>x.foo !== undefined && x.baz : 真假
>类型别名 :=> 真假
>x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.foo : 文字 | 未定
>x : Item
>foo : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定
>x.baz : 真假
>类型别名 :=> 真假
>x : Item
>baz : 真假
>类型别名 :=> 真假

        x.foo.length;
>x.foo.length : 数字
>类型别名 :=> 数字
>x.foo : 文字
>类型别名 :=> 文字
>x : Item
>foo : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
    }
}

function foo5(x: Item) {
>foo5 : (x: Item) => 无值
>x : Item
>Item : Item

    if (x.qux && x.foo !== undefined) {
>x.qux && x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.qux : 真假
>类型别名 :=> 真假
>x : Item
>qux : 真假
>类型别名 :=> 真假
>x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.foo : 文字 | 未定
>x : Item1
>foo : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定

        x.foo.length;
>x.foo.length : 数字
>类型别名 :=> 数字
>x.foo : 文字
>类型别名 :=> 文字
>x : Item1
>foo : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
    }
}

function foo6(x: Item) {
>foo6 : (x: Item) => 无值
>x : Item
>Item : Item

    if (x.foo !== undefined && x.qux) {
>x.foo !== undefined && x.qux : 真假
>类型别名 :=> 真假
>x.foo !== undefined : 真假
>类型别名 :=> 真假
>x.foo : 文字 | 未定
>x : Item
>foo : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定
>x.qux : 真假
>类型别名 :=> 真假
>x : Item
>qux : 真假
>类型别名 :=> 真假

        x.foo.length;  // Error, intervening discriminant guard
>x.foo.length : 数字
>类型别名 :=> 数字
>x.foo : 文字 | 未定
>x : Item1
>foo : 文字 | 未定
>length : 数字
>类型别名 :=> 数字
    }
}
