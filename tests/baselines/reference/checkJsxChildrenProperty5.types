=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : 类为 React

interface Prop {
>Prop : Prop

    a: number,
>a : 数字
>类型别名 :=> 数字

    b: string,
>b : 文字
>类型别名 :=> 文字

    children: Button;
>children : Button
>Button : Button
}

class Button extends React.Component<any, any> {
>Button : Button
>React.Component : React.Component<任意, 任意>
>React : 类为 React
>Component : 类为 React.Component

    render() {
>render : () => JSX.Element

        return (<div>My Button</div>)
>(<div>My Button</div>) : JSX.Element
><div>My Button</div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意
    }
}

function Comp(p: Prop) {
>Comp : (p: Prop) => JSX.Element
>p : Prop
>Prop : Prop

    return <div>{p.b}</div>;
><div>{p.b}</div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>p.b : 文字
>类型别名 :=> 文字
>p : Prop
>b : 文字
>类型别名 :=> 文字
>div : 任意
>类型别名 :=> 任意
}

// Error: no children specified
let k = <Comp a={10} b="hi" />;
>k : JSX.Element
><Comp a={10} b="hi" /> : JSX.Element
>Comp : (p: Prop) => JSX.Element
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 文字
>类型别名 :=> 文字

// Error: JSX.element is not the same as JSX.ElementClass
let k1 =
>k1 : JSX.Element

    <Comp a={10} b="hi">
><Comp a={10} b="hi">        <Button />    </Comp> : JSX.Element
>Comp : (p: Prop) => JSX.Element
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 文字
>类型别名 :=> 文字

        <Button />
><Button /> : JSX.Element
>Button : 类为 Button

    </Comp>;
>Comp : (p: Prop) => JSX.Element

let k2 =
>k2 : JSX.Element

    <Comp a={10} b="hi">
><Comp a={10} b="hi">        {Button}    </Comp> : JSX.Element
>Comp : (p: Prop) => JSX.Element
>a : 数字
>类型别名 :=> 数字
>10 : 10
>b : 文字
>类型别名 :=> 文字

        {Button}
>Button : 类为 Button

    </Comp>;
>Comp : (p: Prop) => JSX.Element

