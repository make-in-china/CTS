=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer.ts ===
// Derived type indexer must be subtype of base type indexer

interface Base { foo: string; }
>Base : Base
>foo : string
>类型别名 :=> 文字

interface Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : string
>类型别名 :=> 文字

interface Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : string
>类型别名 :=> 文字

class A {
>A : A

    [x: string]: Base;
>x : string
>类型别名 :=> 文字
>Base : Base
}

class B extends A {
>B : B
>A : A

    [x: string]: Derived; // ok
>x : string
>类型别名 :=> 文字
>Derived : Derived
}

class B2 extends A {
>B2 : B2
>A : A

    [x: string]: Derived2; // ok
>x : string
>类型别名 :=> 文字
>Derived2 : Derived2
}

module Generics {
>Generics : typeof Generics

    class A<T extends Base> {
>A : A<T>
>T : T
>Base : Base

        [x: string]: T;
>x : string
>类型别名 :=> 文字
>T : T
    }

    class B extends A<Base> {
>B : B
>A : A<Base>
>Base : Base

        [x: string]: Derived; // ok
>x : string
>类型别名 :=> 文字
>Derived : Derived
    }

    class B2 extends A<Base> {
>B2 : B2
>A : A<Base>
>Base : Base

        [x: string]: Derived2; // ok
>x : string
>类型别名 :=> 文字
>Derived2 : Derived2
    }

    class B3<T extends Base> extends A<T> {
>B3 : B3<T>
>T : T
>Base : Base
>A : A<T>
>T : T

        [x: string]: Derived; // error
>x : string
>类型别名 :=> 文字
>Derived : Derived
    }

    class B4<T extends Base> extends A<T> {
>B4 : B4<T>
>T : T
>Base : Base
>A : A<T>
>T : T

        [x: string]: Derived2; // error
>x : string
>类型别名 :=> 文字
>Derived2 : Derived2
    }
}

