=== tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithUndefinedValueAndValidOperands.ts ===
// If one operand is the undefined or undefined value, it is treated as having the type of the
// other operand.

enum E {
>E : E

    a,
>a : E.a

    b
>b : E.b
}

var a: any;
>a : any
>类型别名 :=> 任意

var b: number;
>b : number
>类型别名 :=> 数字

// operator *
var rk1 = undefined ** a;
>rk1 : number
>类型别名 :=> 数字
>undefined ** a : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>a : any
>类型别名 :=> 任意

var rk2 = undefined ** b;
>rk2 : number
>类型别名 :=> 数字
>undefined ** b : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>b : number
>类型别名 :=> 数字

var rk3 = undefined ** 1;
>rk3 : number
>类型别名 :=> 数字
>undefined ** 1 : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>1 : 1

var rk4 = undefined ** E.a;
>rk4 : number
>类型别名 :=> 数字
>undefined ** E.a : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定
>E.a : E.a
>E : typeof E
>a : E.a

var rk5 = a ** undefined;
>rk5 : number
>类型别名 :=> 数字
>a ** undefined : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定

var rk6 = b ** undefined;
>rk6 : number
>类型别名 :=> 数字
>b ** undefined : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>undefined : undefined
>类型别名 :=> 未定

var rk7 = 0 ** undefined;
>rk7 : number
>类型别名 :=> 数字
>0 ** undefined : number
>类型别名 :=> 数字
>0 : 0
>undefined : undefined
>类型别名 :=> 未定

var rk8 = E.b ** undefined;
>rk8 : number
>类型别名 :=> 数字
>E.b ** undefined : number
>类型别名 :=> 数字
>E.b : E.b
>E : typeof E
>b : E.b
>undefined : undefined
>类型别名 :=> 未定

