=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesWithVariousOperators02.ts ===
let abc: "ABC" = "ABC";
>abc : "ABC"
>"ABC" : "ABC"

let xyz: "XYZ" = "XYZ";
>xyz : "XYZ"
>"XYZ" : "XYZ"

let abcOrXyz: "ABC" | "XYZ" = abc || xyz;
>abcOrXyz : "ABC" | "XYZ"
>abc || xyz : "ABC" | "XYZ"
>abc : "ABC"
>xyz : "XYZ"

let abcOrXyzOrNumber: "ABC" | "XYZ" | number = abcOrXyz || 100;
>abcOrXyzOrNumber : number | "ABC" | "XYZ"
>abcOrXyz || 100 : "ABC" | "XYZ" | 100
>abcOrXyz : "ABC" | "XYZ"
>100 : 100

let a = abcOrXyzOrNumber + 100;
>a : any
>类型别名 :=> 任意
>abcOrXyzOrNumber + 100 : any
>类型别名 :=> 任意
>abcOrXyzOrNumber : number | "ABC" | "XYZ"
>100 : 100

let b = 100 + abcOrXyzOrNumber;
>b : any
>类型别名 :=> 任意
>100 + abcOrXyzOrNumber : any
>类型别名 :=> 任意
>100 : 100
>abcOrXyzOrNumber : number | "ABC" | "XYZ"

let c = abcOrXyzOrNumber + abcOrXyzOrNumber;
>c : any
>类型别名 :=> 任意
>abcOrXyzOrNumber + abcOrXyzOrNumber : any
>类型别名 :=> 任意
>abcOrXyzOrNumber : number | "ABC" | "XYZ"
>abcOrXyzOrNumber : number | "ABC" | "XYZ"

let d = abcOrXyzOrNumber + true;
>d : any
>类型别名 :=> 任意
>abcOrXyzOrNumber + true : any
>类型别名 :=> 任意
>abcOrXyzOrNumber : number | "ABC" | "XYZ"
>true : true
>类型别名 :=> 为真

let e = false + abcOrXyzOrNumber;
>e : any
>类型别名 :=> 任意
>false + abcOrXyzOrNumber : any
>类型别名 :=> 任意
>false : false
>类型别名 :=> 为假
>abcOrXyzOrNumber : number | "ABC" | "XYZ"

let f = abcOrXyzOrNumber++;
>f : number
>类型别名 :=> 数字
>abcOrXyzOrNumber++ : number
>类型别名 :=> 数字
>abcOrXyzOrNumber : string | number

let g = --abcOrXyzOrNumber;
>g : number
>类型别名 :=> 数字
>--abcOrXyzOrNumber : number
>类型别名 :=> 数字
>abcOrXyzOrNumber : string | number

let h = abcOrXyzOrNumber ^ 10;
>h : number
>类型别名 :=> 数字
>abcOrXyzOrNumber ^ 10 : number
>类型别名 :=> 数字
>abcOrXyzOrNumber : string | number
>10 : 10

let i = abcOrXyzOrNumber | 10;
>i : number
>类型别名 :=> 数字
>abcOrXyzOrNumber | 10 : number
>类型别名 :=> 数字
>abcOrXyzOrNumber : string | number
>10 : 10

let j = abc < xyz;
>j : boolean
>类型别名 :=> 真假
>abc < xyz : boolean
>类型别名 :=> 真假
>abc : "ABC"
>xyz : "XYZ"

let k = abc === xyz;
>k : boolean
>类型别名 :=> 真假
>abc === xyz : boolean
>类型别名 :=> 真假
>abc : "ABC"
>xyz : "XYZ"

let l = abc != xyz;
>l : boolean
>类型别名 :=> 真假
>abc != xyz : boolean
>类型别名 :=> 真假
>abc : "ABC"
>xyz : "XYZ"

