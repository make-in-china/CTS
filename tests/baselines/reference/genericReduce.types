=== tests/cases/compiler/genericReduce.ts ===
var a = ["An", "array", "of", "strings"];
>a : 文字[]
>["An", "array", "of", "strings"] : 文字[]
>"An" : "An"
>"array" : "array"
>"of" : "of"
>"strings" : "strings"

var b = a.map(s => s.length);
>b : 数字[]
>a.map(s => s.length) : 数字[]
>a.map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>a : 文字[]
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>s => s.length : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
>s.length : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

var n1 = b.reduce((x, y) => x + y);
>n1 : 数字
>类型别名 :=> 数字
>b.reduce((x, y) => x + y) : 数字
>类型别名 :=> 数字
>b.reduce : { (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字): 数字; (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字, initialValue: 数字): 数字; <U>(callbackfn: (previousValue: U, currentValue: 数字, currentIndex: 数字, array: 数字[]) => U, initialValue: U): U; }
>b : 数字[]
>reduce : { (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字): 数字; (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字, initialValue: 数字): 数字; <U>(callbackfn: (previousValue: U, currentValue: 数字, currentIndex: 数字, array: 数字[]) => U, initialValue: U): U; }
>(x, y) => x + y : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

var n2 = b.reduceRight((x, y) => x + y);
>n2 : 数字
>类型别名 :=> 数字
>b.reduceRight((x, y) => x + y) : 数字
>类型别名 :=> 数字
>b.reduceRight : { (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字): 数字; (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字, initialValue: 数字): 数字; <U>(callbackfn: (previousValue: U, currentValue: 数字, currentIndex: 数字, array: 数字[]) => U, initialValue: U): U; }
>b : 数字[]
>reduceRight : { (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字): 数字; (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字, initialValue: 数字): 数字; <U>(callbackfn: (previousValue: U, currentValue: 数字, currentIndex: 数字, array: 数字[]) => U, initialValue: U): U; }
>(x, y) => x + y : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>x + y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

n1.x = "fail";       // should error, as 'n1' should be type 'number', not 'any'.
>n1.x = "fail" : "fail"
>n1.x : 任意
>类型别名 :=> 任意
>n1 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>"fail" : "fail"

n1.toExponential(2); // should not error if 'n1' is correctly number.
>n1.toExponential(2) : 文字
>类型别名 :=> 文字
>n1.toExponential : (fractionDigits?: 数字) => 文字
>n1 : 数字
>类型别名 :=> 数字
>toExponential : (fractionDigits?: 数字) => 文字
>2 : 2

n2.x = "fail";       // should error, as 'n2' should be type 'number', not 'any'.
>n2.x = "fail" : "fail"
>n2.x : 任意
>类型别名 :=> 任意
>n2 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>"fail" : "fail"

n2.toExponential(2); // should not error if 'n2' is correctly number.
>n2.toExponential(2) : 文字
>类型别名 :=> 文字
>n2.toExponential : (fractionDigits?: 数字) => 文字
>n2 : 数字
>类型别名 :=> 数字
>toExponential : (fractionDigits?: 数字) => 文字
>2 : 2

var n3 = b.reduce<string>( (x, y) => x + y, ""); // Initial value is of type string
>n3 : 文字
>类型别名 :=> 文字
>b.reduce<string>( (x, y) => x + y, "") : 文字
>类型别名 :=> 文字
>b.reduce : { (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字): 数字; (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字, initialValue: 数字): 数字; <U>(callbackfn: (previousValue: U, currentValue: 数字, currentIndex: 数字, array: 数字[]) => U, initialValue: U): U; }
>b : 数字[]
>reduce : { (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字): 数字; (callbackfn: (previousValue: 数字, currentValue: 数字, currentIndex: 数字, array: 数字[]) => 数字, initialValue: 数字): 数字; <U>(callbackfn: (previousValue: U, currentValue: 数字, currentIndex: 数字, array: 数字[]) => U, initialValue: U): U; }
>(x, y) => x + y : (x: 文字, y: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>x + y : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>"" : ""

n3.toExponential(2); // should error if 'n3' is correctly type 'string'
>n3.toExponential(2) : 任意
>类型别名 :=> 任意
>n3.toExponential : 任意
>类型别名 :=> 任意
>n3 : 文字
>类型别名 :=> 文字
>toExponential : 任意
>类型别名 :=> 任意
>2 : 2

n3.charAt(0);        // should not error if 'n3' is correctly type 'string'
>n3.charAt(0) : 文字
>类型别名 :=> 文字
>n3.charAt : (pos: 数字) => 文字
>n3 : 文字
>类型别名 :=> 文字
>charAt : (pos: 数字) => 文字
>0 : 0

