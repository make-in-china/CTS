=== tests/cases/compiler/super1.ts ===
// Case 1
class Base1 {
>Base1 : Base1

    public foo() {
>foo : () => 文字

        return "base";
>"base" : "base"
    }
}

class Sub1 extends Base1 {
>Sub1 : Sub1
>Base1 : Base1

    public bar() {
>bar : () => 文字

        return "base";
>"base" : "base"
    }
}

class SubSub1 extends Sub1 {
>SubSub1 : SubSub1
>Sub1 : Sub1

    public bar() {
>bar : () => 任意

        return super.super.foo;
>super.super.foo : 任意
>类型别名 :=> 任意
>super.super : 任意
>类型别名 :=> 任意
>super : Sub1
>super : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
    }
}

// Case 2
class Base2 {
>Base2 : Base2

    public foo() {
>foo : () => 文字

        return "base";
>"base" : "base"
    }
}

class SubE2 extends Base2 {
>SubE2 : SubE2
>Base2 : Base2

    public bar() {
>bar : () => 任意

        return super.prototype.foo = null;
>super.prototype.foo = null : 空值
>类型别名 :=> 空值
>super.prototype.foo : 任意
>类型别名 :=> 任意
>super.prototype : 任意
>类型别名 :=> 任意
>super : Base2
>prototype : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
    }
}

// Case 3
class Base3 {
>Base3 : Base3

    public foo() {
>foo : () => 文字

        return "base";
>"base" : "base"
    }
}

class SubE3 extends Base3 {
>SubE3 : SubE3
>Base3 : Base3

    public bar() {
>bar : () => 任意

        return super.bar();
>super.bar() : 任意
>类型别名 :=> 任意
>super.bar : 任意
>类型别名 :=> 任意
>super : Base3
>bar : 任意
>类型别名 :=> 任意
    }
}

// Case 4
module Base4 {
>Base4 : 类为 Base4

    class Sub4 {
>Sub4 : Sub4

        public x(){
>x : () => 文字

            return "hello";
>"hello" : "hello"
        }
    }
    
    export class SubSub4 extends Sub4{
>SubSub4 : SubSub4
>Sub4 : Sub4

        public x(){
>x : () => 文字

            return super.x();
>super.x() : 文字
>类型别名 :=> 文字
>super.x : () => 文字
>super : Sub4
>x : () => 文字
        }
    }
    
    export class Sub4E {
>Sub4E : Sub4E

        public x() {
>x : () => 任意

            return super.x();
>super.x() : 任意
>类型别名 :=> 任意
>super.x : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
        }
    }
}

