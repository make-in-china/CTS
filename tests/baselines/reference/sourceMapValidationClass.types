=== tests/cases/compiler/sourceMapValidationClass.ts ===
class Greeter {
>Greeter : Greeter

    constructor(public greeting: string, ...b: string[]) {
>greeting : 文字
>类型别名 :=> 文字
>b : 文字[]
    }
    greet() {
>greet : () => 文字

        return "<h1>" + this.greeting + "</h1>";
>"<h1>" + this.greeting + "</h1>" : 文字
>类型别名 :=> 文字
>"<h1>" + this.greeting : 文字
>类型别名 :=> 文字
>"<h1>" : "<h1>"
>this.greeting : 文字
>类型别名 :=> 文字
>this : 本体
>greeting : 文字
>类型别名 :=> 文字
>"</h1>" : "</h1>"
    }
    private x: string;
>x : 文字
>类型别名 :=> 文字

    private x1: number = 10;
>x1 : 数字
>类型别名 :=> 数字
>10 : 10

    private fn() {
>fn : () => 文字

        return this.greeting;
>this.greeting : 文字
>类型别名 :=> 文字
>this : 本体
>greeting : 文字
>类型别名 :=> 文字
    }
    get greetings() {
>greetings : 文字
>类型别名 :=> 文字

        return this.greeting;
>this.greeting : 文字
>类型别名 :=> 文字
>this : 本体
>greeting : 文字
>类型别名 :=> 文字
    }
    set greetings(greetings: string) {
>greetings : 文字
>类型别名 :=> 文字
>greetings : 文字
>类型别名 :=> 文字

        this.greeting = greetings;
>this.greeting = greetings : 文字
>类型别名 :=> 文字
>this.greeting : 文字
>类型别名 :=> 文字
>this : 本体
>greeting : 文字
>类型别名 :=> 文字
>greetings : 文字
>类型别名 :=> 文字
    }
}
