=== tests/cases/compiler/nestedLoops.ts ===
export class Test  {
>Test : Test

    constructor() {

        let outerArray: Array<number> = [1, 2, 3];
>outerArray : number[]
>Array : T[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

        let innerArray: Array<number> = [1, 2, 3];
>innerArray : number[]
>Array : T[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

        for (let outer of outerArray)
>outer : number
>类型别名 :=> 数字
>outerArray : number[]

            for (let inner of innerArray) {
>inner : number
>类型别名 :=> 数字
>innerArray : number[]

                this.aFunction((newValue, oldValue) => {
>this.aFunction((newValue, oldValue) => {                    let x = outer + inner + newValue;                }) : void
>类型别名 :=> 无值
>this.aFunction : (func: (newValue: any, oldValue: any) => void) => void
>this : this
>aFunction : (func: (newValue: any, oldValue: any) => void) => void
>(newValue, oldValue) => {                    let x = outer + inner + newValue;                } : (newValue: any, oldValue: any) => void
>newValue : any
>类型别名 :=> 任意
>oldValue : any
>类型别名 :=> 任意

                    let x = outer + inner + newValue;
>x : any
>类型别名 :=> 任意
>outer + inner + newValue : any
>类型别名 :=> 任意
>outer + inner : number
>类型别名 :=> 数字
>outer : number
>类型别名 :=> 数字
>inner : number
>类型别名 :=> 数字
>newValue : any
>类型别名 :=> 任意

                });
            }
    }

    public aFunction(func: (newValue: any, oldValue: any) => void): void {
>aFunction : (func: (newValue: any, oldValue: any) => void) => void
>func : (newValue: any, oldValue: any) => void
>newValue : any
>类型别名 :=> 任意
>oldValue : any
>类型别名 :=> 任意
    }
}
