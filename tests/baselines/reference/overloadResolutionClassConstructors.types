=== tests/cases/conformance/expressions/functionCalls/overloadResolutionClassConstructors.ts ===
class SomeBase {
>SomeBase : SomeBase

    private n;
>n : any
>类型别名 :=> 任意

    public s: string;
>s : string
>类型别名 :=> 文字
}
class SomeDerived1 extends SomeBase {
>SomeDerived1 : SomeDerived1
>SomeBase : SomeBase

    private m;
>m : any
>类型别名 :=> 任意
}
class SomeDerived2 extends SomeBase {
>SomeDerived2 : SomeDerived2
>SomeBase : SomeBase

    private m;
>m : any
>类型别名 :=> 任意
}
class SomeDerived3 extends SomeBase {
>SomeDerived3 : SomeDerived3
>SomeBase : SomeBase

    private m;
>m : any
>类型别名 :=> 任意
}


// Ambiguous call picks the first overload in declaration order
class fn1 {
>fn1 : fn1

    constructor(s: string);
>s : string
>类型别名 :=> 文字

    constructor(s: number);
>s : number
>类型别名 :=> 数字

    constructor() { }
}

new fn1(undefined);
>new fn1(undefined) : fn1
>fn1 : typeof fn1
>undefined : undefined
>类型别名 :=> 未定

// No candidate overloads found
new fn1({}); // Error
>new fn1({}) : any
>类型别名 :=> 任意
>fn1 : typeof fn1
>{} : {}

// Generic and non - generic overload where generic overload is the only candidate when called with type arguments
class fn2<T> {
>fn2 : fn2<T>
>T : T

    constructor(s: string, n: number);
>s : string
>类型别名 :=> 文字
>n : number
>类型别名 :=> 数字

    constructor(n: number, t: T);
>n : number
>类型别名 :=> 数字
>t : T
>T : T

    constructor() { }
}

var d = new fn2<Date>(0, undefined);
>d : fn2<Date>
>new fn2<Date>(0, undefined) : fn2<Date>
>fn2 : typeof fn2
>Date : Date
>0 : 0
>undefined : undefined
>类型别名 :=> 未定

// Generic and non - generic overload where generic overload is the only candidate when called without type arguments
var s = new fn2(0, '');
>s : fn2<string>
>new fn2(0, '') : fn2<string>
>fn2 : typeof fn2
>0 : 0
>'' : ""

// Generic and non - generic overload where non - generic overload is the only candidate when called with type arguments
new fn2<Date>('', 0); // OK
>new fn2<Date>('', 0) : fn2<Date>
>fn2 : typeof fn2
>Date : Date
>'' : ""
>0 : 0

// Generic and non - generic overload where non - generic overload is the only candidate when called without type arguments
new fn2('', 0); // OK
>new fn2('', 0) : fn2<{}>
>fn2 : typeof fn2
>'' : ""
>0 : 0

// Generic overloads with differing arity called without type arguments
class fn3<T, U, V> {
>fn3 : fn3<T, U, V>
>T : T
>U : U
>V : V

    constructor(n: T);
>n : T
>T : T

    constructor(s: string, t: T, u: U);
>s : string
>类型别名 :=> 文字
>t : T
>T : T
>u : U
>U : U

    constructor(v: V, u: U, t: T);
>v : V
>V : V
>u : U
>U : U
>t : T
>T : T

    constructor() { }
}

new fn3(3);
>new fn3(3) : fn3<number, {}, {}>
>fn3 : typeof fn3
>3 : 3

new fn3('', 3, '');
>new fn3('', 3, '') : fn3<number, string, {}>
>fn3 : typeof fn3
>'' : ""
>3 : 3
>'' : ""

new fn3(5, 5, 5);
>new fn3(5, 5, 5) : fn3<number, number, number>
>fn3 : typeof fn3
>5 : 5
>5 : 5
>5 : 5

// Generic overloads with differing arity called with type arguments matching each overload type parameter count
new fn3<number>(4); // Error
>new fn3<number>(4) : any
>类型别名 :=> 任意
>fn3 : typeof fn3
>4 : 4

new fn3<string, string>('', '', '');  // Error
>new fn3<string, string>('', '', '') : any
>类型别名 :=> 任意
>fn3 : typeof fn3
>'' : ""
>'' : ""
>'' : ""

new fn3<number, string, string>('', '', 3);
>new fn3<number, string, string>('', '', 3) : fn3<number, string, string>
>fn3 : typeof fn3
>'' : ""
>'' : ""
>3 : 3

// Generic overloads with differing arity called with type argument count that doesn't match any overload
new fn3<number, number, number, number>(); // Error
>new fn3<number, number, number, number>() : any
>类型别名 :=> 任意
>fn3 : typeof fn3

// Generic overloads with constraints called with type arguments that satisfy the constraints
class fn4<T extends string, U extends number> {
>fn4 : fn4<T, U>
>T : T
>U : U

    constructor(n: T, m: U);
>n : T
>T : T
>m : U
>U : U

    constructor() { }
}
new fn4<string, number>('', 3);
>new fn4<string, number>('', 3) : fn4<string, number>
>fn4 : typeof fn4
>'' : ""
>3 : 3

new fn4<string, number>(3, ''); // Error
>new fn4<string, number>(3, '') : any
>类型别名 :=> 任意
>fn4 : typeof fn4
>3 : 3
>'' : ""

new fn4<number, string>('', 3); // Error
>new fn4<number, string>('', 3) : any
>类型别名 :=> 任意
>fn4 : typeof fn4
>'' : ""
>3 : 3

new fn4<number, string>(3, ''); // Error
>new fn4<number, string>(3, '') : any
>类型别名 :=> 任意
>fn4 : typeof fn4
>3 : 3
>'' : ""

// Generic overloads with constraints called without type arguments but with types that satisfy the constraints
new fn4('', 3);
>new fn4('', 3) : fn4<"", 3>
>fn4 : typeof fn4
>'' : ""
>3 : 3

new fn4(3, ''); // Error
>new fn4(3, '') : any
>类型别名 :=> 任意
>fn4 : typeof fn4
>3 : 3
>'' : ""

new fn4(3, undefined); // Error
>new fn4(3, undefined) : any
>类型别名 :=> 任意
>fn4 : typeof fn4
>3 : 3
>undefined : undefined
>类型别名 :=> 未定

new fn4('', null);
>new fn4('', null) : fn4<"", any>
>fn4 : typeof fn4
>'' : ""
>null : null
>类型别名 :=> 空值

// Generic overloads with constraints called with type arguments that do not satisfy the constraints
new fn4<boolean, Date>(null, null); // Error
>new fn4<boolean, Date>(null, null) : any
>类型别名 :=> 任意
>fn4 : typeof fn4
>Date : Date
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

// Generic overloads with constraints called without type arguments but with types that do not satisfy the constraints
new fn4(true, null); // Error
>new fn4(true, null) : any
>类型别名 :=> 任意
>fn4 : typeof fn4
>true : true
>类型别名 :=> 为真
>null : null
>类型别名 :=> 空值

new fn4(null, true); // Error
>new fn4(null, true) : any
>类型别名 :=> 任意
>fn4 : typeof fn4
>null : null
>类型别名 :=> 空值
>true : true
>类型别名 :=> 为真

// Non - generic overloads where contextual typing of function arguments has errors
class fn5 {
>fn5 : fn5

    constructor(f: (n: string) => void);
>f : (n: string) => void
>n : string
>类型别名 :=> 文字

    constructor(f: (n: number) => void);
>f : (n: number) => void
>n : number
>类型别名 :=> 数字

    constructor() { return undefined; }
>undefined : undefined
>类型别名 :=> 未定
}
new fn5((n) => n.toFixed());
>new fn5((n) => n.toFixed()) : fn5
>fn5 : typeof fn5
>(n) => n.toFixed() : (n: string) => any
>n : string
>类型别名 :=> 文字
>n.toFixed() : any
>类型别名 :=> 任意
>n.toFixed : any
>类型别名 :=> 任意
>n : string
>类型别名 :=> 文字
>toFixed : any
>类型别名 :=> 任意

new fn5((n) => n.substr(0));
>new fn5((n) => n.substr(0)) : fn5
>fn5 : typeof fn5
>(n) => n.substr(0) : (n: string) => string
>n : string
>类型别名 :=> 文字
>n.substr(0) : string
>类型别名 :=> 文字
>n.substr : (from: number, length?: number) => string
>n : string
>类型别名 :=> 文字
>substr : (from: number, length?: number) => string
>0 : 0

new fn5((n) => n.blah); // Error
>new fn5((n) => n.blah) : fn5
>fn5 : typeof fn5
>(n) => n.blah : (n: string) => any
>n : string
>类型别名 :=> 文字
>n.blah : any
>类型别名 :=> 任意
>n : string
>类型别名 :=> 文字
>blah : any
>类型别名 :=> 任意



