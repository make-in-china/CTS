=== tests/cases/compiler/functionExpressionShadowedByParams.ts ===
function b1(b1: number) {
>b1 : (b1: number) => void
>b1 : number
>类型别名 :=> 数字

   b1.toPrecision(2); // should not error
>b1.toPrecision(2) : string
>类型别名 :=> 文字
>b1.toPrecision : (precision?: number) => string
>b1 : number
>类型别名 :=> 数字
>toPrecision : (precision?: number) => string
>2 : 2

   b1(12); // should error
>b1(12) : any
>类型别名 :=> 任意
>b1 : number
>类型别名 :=> 数字
>12 : 12
}


var x = {
>x : { b: (b: number) => void; }
>{   b: function b(b: number) {      b.toPrecision(2); // should not error      b.apply(null, null); // should error   }} : { b: (b: number) => void; }

   b: function b(b: number) {
>b : (b: number) => void
>function b(b: number) {      b.toPrecision(2); // should not error      b.apply(null, null); // should error   } : (b: number) => void
>b : (b: number) => void
>b : number
>类型别名 :=> 数字

      b.toPrecision(2); // should not error
>b.toPrecision(2) : string
>类型别名 :=> 文字
>b.toPrecision : (precision?: number) => string
>b : number
>类型别名 :=> 数字
>toPrecision : (precision?: number) => string
>2 : 2

      b.apply(null, null); // should error
>b.apply(null, null) : any
>类型别名 :=> 任意
>b.apply : any
>类型别名 :=> 任意
>b : number
>类型别名 :=> 数字
>apply : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值
   }
};

