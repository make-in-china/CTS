=== tests/cases/compiler/declFilePrivateMethodOverloads.ts ===
interface IContext {
>IContext : IContext

    someMethod();
>someMethod : () => 任意
}
class c1 {
>c1 : c1

    private _forEachBindingContext(bindingContext: IContext, fn: (bindingContext: IContext) => void);
>_forEachBindingContext : { (bindingContext: IContext, fn: (bindingContext: IContext) => 无值): 任意; (bindingContextArray: IContext[], fn: (bindingContext: IContext) => 无值): 任意; }
>bindingContext : IContext
>IContext : IContext
>fn : (bindingContext: IContext) => 无值
>bindingContext : IContext
>IContext : IContext

    private _forEachBindingContext(bindingContextArray: Array<IContext>, fn: (bindingContext: IContext) => void);
>_forEachBindingContext : { (bindingContext: IContext, fn: (bindingContext: IContext) => 无值): 任意; (bindingContextArray: IContext[], fn: (bindingContext: IContext) => 无值): 任意; }
>bindingContextArray : IContext[]
>Array : T[]
>IContext : IContext
>fn : (bindingContext: IContext) => 无值
>bindingContext : IContext
>IContext : IContext

    private _forEachBindingContext(context, fn: (bindingContext: IContext) => void): void {
>_forEachBindingContext : { (bindingContext: IContext, fn: (bindingContext: IContext) => 无值): 任意; (bindingContextArray: IContext[], fn: (bindingContext: IContext) => 无值): 任意; }
>context : 任意
>类型别名 :=> 任意
>fn : (bindingContext: IContext) => 无值
>bindingContext : IContext
>IContext : IContext

        // Function here
    }

    private overloadWithArityDifference(bindingContext: IContext);
>overloadWithArityDifference : { (bindingContext: IContext): 任意; (bindingContextArray: IContext[], fn: (bindingContext: IContext) => 无值): 任意; }
>bindingContext : IContext
>IContext : IContext

    private overloadWithArityDifference(bindingContextArray: Array<IContext>, fn: (bindingContext: IContext) => void);
>overloadWithArityDifference : { (bindingContext: IContext): 任意; (bindingContextArray: IContext[], fn: (bindingContext: IContext) => 无值): 任意; }
>bindingContextArray : IContext[]
>Array : T[]
>IContext : IContext
>fn : (bindingContext: IContext) => 无值
>bindingContext : IContext
>IContext : IContext

    private overloadWithArityDifference(context): void {
>overloadWithArityDifference : { (bindingContext: IContext): 任意; (bindingContextArray: IContext[], fn: (bindingContext: IContext) => 无值): 任意; }
>context : 任意
>类型别名 :=> 任意

        // Function here
    }
}
declare class c2 {
>c2 : c2

    private overload1(context, fn);
>overload1 : (context: 任意, fn: 任意) => 任意
>context : 任意
>类型别名 :=> 任意
>fn : 任意
>类型别名 :=> 任意

    private overload2(context);
>overload2 : { (context: 任意): 任意; (context: 任意, fn: 任意): 任意; }
>context : 任意
>类型别名 :=> 任意

    private overload2(context, fn);
>overload2 : { (context: 任意): 任意; (context: 任意, fn: 任意): 任意; }
>context : 任意
>类型别名 :=> 任意
>fn : 任意
>类型别名 :=> 任意
}
