=== tests/cases/compiler/constructorWithIncompleteTypeAnnotation.ts ===
declare module "fs" {
    export class File {
>File : File

        constructor(filename: string);
>filename : string
>类型别名 :=> 文字

        public ReadAllText(): string;
>ReadAllText : () => string
    }
    export interface IFile {
>IFile : IFile

        [index: number]: string;
>index : number
>类型别名 :=> 数字
    }
}

import fs = module("fs");
>fs : any
>类型别名 :=> 任意
>module : No type information available!
>("fs") : "fs"
>"fs" : "fs"


module TypeScriptAllInOne {
>TypeScriptAllInOne : typeof TypeScriptAllInOne

    export class Program {
>Program : Program

        static Main(...args: string[]) {
>Main : (...args: string[]) => void
>args : string[]

            try {
                var bfs = new BasicFeatures();
>bfs : BasicFeatures
>new BasicFeatures() : BasicFeatures
>BasicFeatures : typeof BasicFeatures

                var retValue: number = 0;
>retValue : number
>类型别名 :=> 数字
>0 : 0

                retValue = bfs.VARIABLES();
>retValue = bfs.VARIABLES() : number
>类型别名 :=> 数字
>retValue : number
>类型别名 :=> 数字
>bfs.VARIABLES() : number
>类型别名 :=> 数字
>bfs.VARIABLES : () => number
>bfs : BasicFeatures
>VARIABLES : () => number

                if (retValue != 0 ^=  {
>retValue != 0 : boolean
>类型别名 :=> 真假
>retValue : number
>类型别名 :=> 数字
>0 : 0
>^=  {                    return 1;                } : number
>类型别名 :=> 数字
> : any
>类型别名 :=> 任意
>{                    return 1;                } : { return: number; }

                    return 1;
>return : number
>类型别名 :=> 数字
>1 : 1
                }

                 case  = bfs.STATEMENTS(4);
>case : any
>类型别名 :=> 任意
>bfs.STATEMENTS(4) : any
>类型别名 :=> 任意
>bfs.STATEMENTS : any
>类型别名 :=> 任意
>bfs : any
>类型别名 :=> 任意
>STATEMENTS : any
>类型别名 :=> 任意
>4 : 4

                if (retValue != 0) {
>if : (retValue?: boolean) => any
>retValue : boolean
>类型别名 :=> 真假
>!= 0 : boolean
>类型别名 :=> 真假
> : any
>类型别名 :=> 任意
>0 : 0

                    return 1;
>1 : 1

                 ^ 
>^                 retValue : number
>类型别名 :=> 数字
> : any
>类型别名 :=> 任意


                retValue = bfs.TYPES();
>retValue : boolean
>类型别名 :=> 真假
>bfs.TYPES() : any
>类型别名 :=> 任意
>bfs.TYPES : any
>类型别名 :=> 任意
>bfs : any
>类型别名 :=> 任意
>TYPES : any
>类型别名 :=> 任意

                if (retValue != 0) {
>retValue != 0 : boolean
>类型别名 :=> 真假
>retValue : boolean
>类型别名 :=> 真假
>0 : 0

                    return 1 && 
>1 && : any
>类型别名 :=> 任意
>1 : 1
                }
> : any
>类型别名 :=> 任意

                retValue = bfs.OPERATOR ' );
>retValue = bfs.OPERATOR : any
>类型别名 :=> 任意
>retValue : boolean
>类型别名 :=> 真假
>bfs.OPERATOR : any
>类型别名 :=> 任意
>bfs : any
>类型别名 :=> 任意
>OPERATOR : any
>类型别名 :=> 任意
>' ); : " );"

                if (retValue != 0) {
>retValue != 0 : boolean
>类型别名 :=> 真假
>retValue : boolean
>类型别名 :=> 真假
>0 : 0

                    return 1;
>1 : 1
                }
            }
            catch (e) {
>catch : (e: any) => void
>e : any
>类型别名 :=> 任意

                console.log(e);
>console.log(e) : any
>类型别名 :=> 任意
>console.log : any
>类型别名 :=> 任意
>console : any
>类型别名 :=> 任意
>log : any
>类型别名 :=> 任意
>e : any
>类型别名 :=> 任意
            }
            finally {

            }

            console.log('Done');
>console.log('Done') : any
>类型别名 :=> 任意
>console.log : any
>类型别名 :=> 任意
>console : any
>类型别名 :=> 任意
>log : any
>类型别名 :=> 任意
>'Done' : "Done"

            return 0;
>0 : 0

        }
    }

    class BasicFeatures {
>BasicFeatures : BasicFeatures

        /// <summary>
        /// Test various of variables. Including nullable,key world as variable,special format
        /// </summary>
        /// <returns></returns>
        public VARIABLES(): number {
>VARIABLES : () => number

            var local = Number.MAX_VALUE;
>local : number
>类型别名 :=> 数字
>Number.MAX_VALUE : number
>类型别名 :=> 数字
>Number : NumberConstructor
>MAX_VALUE : number
>类型别名 :=> 数字

            var min = Number.MIN_VALUE;
>min : number
>类型别名 :=> 数字
>Number.MIN_VALUE : number
>类型别名 :=> 数字
>Number : NumberConstructor
>MIN_VALUE : number
>类型别名 :=> 数字

            var inf = Number.NEGATIVE_INFINITY - 
>inf : number
>类型别名 :=> 数字
>Number.NEGATIVE_INFINITY - : number
>类型别名 :=> 数字
>Number.NEGATIVE_INFINITY : number
>类型别名 :=> 数字
>Number : NumberConstructor
>NEGATIVE_INFINITY : number
>类型别名 :=> 数字

            var nan = Number.NaN;
> : any
>类型别名 :=> 任意
>nan : number
>类型别名 :=> 数字
>Number.NaN : number
>类型别名 :=> 数字
>Number : NumberConstructor
>NaN : number
>类型别名 :=> 数字

            var undef = undefined;
>undef : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定

            var  _\uD4A5\u7204\uC316\uE59F  = local;
>_\uD4A5\u7204\uC316 : any
>类型别名 :=> 任意
>uE59F : number
>类型别名 :=> 数字
>local : number
>类型别名 :=> 数字

            var мир = local;
>мир : number
>类型别名 :=> 数字
>local : number
>类型别名 :=> 数字

            var local5 = <fs.File>null;
>local5 : any
>类型别名 :=> 任意
><fs.File>null : any
>类型别名 :=> 任意
>fs : any
>类型别名 :=> 任意
>File : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

            var local6 = local5 instanceof fs.File;
>local6 : boolean
>类型别名 :=> 真假
>local5 instanceof fs.File : boolean
>类型别名 :=> 真假
>local5 : any
>类型别名 :=> 任意
>fs.File : any
>类型别名 :=> 任意
>fs : any
>类型别名 :=> 任意
>File : any
>类型别名 :=> 任意

            var hex = 0xBADC0DE, Hex = 0XDEADBEEF;
>hex : number
>类型别名 :=> 数字
>0xBADC0DE : 195936478
>Hex : number
>类型别名 :=> 数字
>0XDEADBEEF : 3735928559

            var float = 6.02e23, float2 = 6.02E-23
>float : number
>类型别名 :=> 数字
>6.02e23 : 6.02e+23
>float2 : number
>类型别名 :=> 数字
>6.02E-23 : 6.02e-23

            var char = 'c', \u0066 = '\u0066', hexchar = '\x42' != 
>char : string
>类型别名 :=> 文字
>'c' : "c"
>\u0066 : string
>类型别名 :=> 文字
>'\u0066' : "f"
>hexchar : boolean
>类型别名 :=> 真假
>'\x42' != : boolean
>类型别名 :=> 真假
>'\x42' : "B"

            var quoted = '"', quoted2 = "'";
> : any
>类型别名 :=> 任意
>quoted : string
>类型别名 :=> 文字
>'"' : "\""
>quoted2 : string
>类型别名 :=> 文字
>"'" : "'"

            var reg = /\w*/;
>reg : RegExp
>/\w*/ : RegExp

            var objLit = { "var": number = 42, equals: function (x) { return x["var"] === 42; },  instanceof : () => 'objLit{42}' };
>objLit : { "var": number; equals: (x: any) => boolean; instanceof: () => string; }
>{ "var": number = 42, equals: function (x) { return x["var"] === 42; },  instanceof : () => 'objLit{42}' } : { "var": number; equals: (x: any) => boolean; instanceof: () => string; }
>number = 42 : 42
>number : number
>类型别名 :=> 数字
>42 : 42
>equals : (x: any) => boolean
>function (x) { return x["var"] === 42; } : (x: any) => boolean
>x : any
>类型别名 :=> 任意
>x["var"] === 42 : boolean
>类型别名 :=> 真假
>x["var"] : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>"var" : "var"
>42 : 42
>instanceof : () => string
>() => 'objLit{42}' : () => string
>'objLit{42}' : "objLit{42}"

            var weekday = Weekdays.Monday;
>weekday : Weekdays
>Weekdays.Monday : Weekdays.Monday
>Weekdays : typeof Weekdays
>Monday : Weekdays.Monday

            var con = char + f + hexchar + float.toString() + float2.toString() + reg.toString() + objLit + weekday;
>con : string
>类型别名 :=> 文字
>char + f + hexchar + float.toString() + float2.toString() + reg.toString() + objLit + weekday : string
>类型别名 :=> 文字
>char + f + hexchar + float.toString() + float2.toString() + reg.toString() + objLit : string
>类型别名 :=> 文字
>char + f + hexchar + float.toString() + float2.toString() + reg.toString() : string
>类型别名 :=> 文字
>char + f + hexchar + float.toString() + float2.toString() : string
>类型别名 :=> 文字
>char + f + hexchar + float.toString() : string
>类型别名 :=> 文字
>char + f + hexchar : string
>类型别名 :=> 文字
>char + f : string
>类型别名 :=> 文字
>char : string
>类型别名 :=> 文字
>f : string
>类型别名 :=> 文字
>hexchar : boolean
>类型别名 :=> 真假
>float.toString() : string
>类型别名 :=> 文字
>float.toString : (radix?: number) => string
>float : number
>类型别名 :=> 数字
>toString : (radix?: number) => string
>float2.toString() : string
>类型别名 :=> 文字
>float2.toString : (radix?: number) => string
>float2 : number
>类型别名 :=> 数字
>toString : (radix?: number) => string
>reg.toString() : string
>类型别名 :=> 文字
>reg.toString : () => string
>reg : RegExp
>toString : () => string
>objLit : { "var": number; equals: (x: any) => boolean; instanceof: () => string; }
>weekday : Weekdays.Monday

            //
            var any = 0 ^= 
>any : number
>类型别名 :=> 数字
>0 ^= : number
>类型别名 :=> 数字
>0 : 0

            var bool = 0;
> : any
>类型别名 :=> 任意
>bool : number
>类型别名 :=> 数字
>0 : 0

            var declare = 0;
>declare : number
>类型别名 :=> 数字
>0 : 0

            var constructor = 0;
>constructor : number
>类型别名 :=> 数字
>0 : 0

            var get = 0;
>get : number
>类型别名 :=> 数字
>0 : 0

            var implements = 0;
>implements : number
>类型别名 :=> 数字
>0 : 0

            var interface = 0;
>interface : number
>类型别名 :=> 数字
>0 : 0

            var let = 0;
>let : number
>类型别名 :=> 数字
>0 : 0

            var module = 0;
>module : number
>类型别名 :=> 数字
>0 : 0

            var number = 0;
>number : number
>类型别名 :=> 数字
>0 : 0

            var package = 0;
>package : number
>类型别名 :=> 数字
>0 : 0

            var private = 0;
>private : number
>类型别名 :=> 数字
>0 : 0

            var protected = 0;
>protected : number
>类型别名 :=> 数字
>0 : 0

            var public = 0;
>public : number
>类型别名 :=> 数字
>0 : 0

            var set = 0;
>set : number
>类型别名 :=> 数字
>0 : 0

            var static = 0;
>static : number
>类型别名 :=> 数字
>0 : 0

            var string = 0 /> 
>string : boolean
>类型别名 :=> 真假
>0 /> : boolean
>类型别名 :=> 真假
>0 / : number
>类型别名 :=> 数字
>0 : 0
> : any
>类型别名 :=> 任意

            var yield = 0;
> : any
>类型别名 :=> 任意
>yield : number
>类型别名 :=> 数字
>0 : 0

            var sum3 = any + bool + declare + constructor + get + implements + interface + let + module + number + package + private + protected + public + set + static + string + yield;
>sum3 : any
>类型别名 :=> 任意
>any + bool + declare + constructor + get + implements + interface + let + module + number + package + private + protected + public + set + static + string + yield : any
>类型别名 :=> 任意
>any + bool + declare + constructor + get + implements + interface + let + module + number + package + private + protected + public + set + static + string : any
>类型别名 :=> 任意
>any + bool + declare + constructor + get + implements + interface + let + module + number + package + private + protected + public + set + static : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get + implements + interface + let + module + number + package + private + protected + public + set : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get + implements + interface + let + module + number + package + private + protected + public : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get + implements + interface + let + module + number + package + private + protected : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get + implements + interface + let + module + number + package + private : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get + implements + interface + let + module + number + package : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get + implements + interface + let + module + number : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get + implements + interface + let + module : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get + implements + interface + let : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get + implements + interface : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get + implements : number
>类型别名 :=> 数字
>any + bool + declare + constructor + get : number
>类型别名 :=> 数字
>any + bool + declare + constructor : number
>类型别名 :=> 数字
>any + bool + declare : number
>类型别名 :=> 数字
>any + bool : number
>类型别名 :=> 数字
>any : number
>类型别名 :=> 数字
>bool : number
>类型别名 :=> 数字
>declare : number
>类型别名 :=> 数字
>constructor : number
>类型别名 :=> 数字
>get : number
>类型别名 :=> 数字
>implements : number
>类型别名 :=> 数字
>interface : number
>类型别名 :=> 数字
>let : number
>类型别名 :=> 数字
>module : number
>类型别名 :=> 数字
>number : number
>类型别名 :=> 数字
>package : number
>类型别名 :=> 数字
>private : number
>类型别名 :=> 数字
>protected : number
>类型别名 :=> 数字
>public : number
>类型别名 :=> 数字
>set : number
>类型别名 :=> 数字
>static : number
>类型别名 :=> 数字
>string : boolean
>类型别名 :=> 真假
>yield : number
>类型别名 :=> 数字

            return 0;
>0 : 0
        }

        /// <summary>
        /// Test different statements. Including if-else,swith,foreach,(un)checked,lock,using,try-catch-finally
        /// </summary>
        /// <param name="i"></param>
        /// <returns></returns>
        STATEMENTS(i: number): number {
>STATEMENTS : (i: number) => number
>i : number
>类型别名 :=> 数字

            var retVal = 0;
>retVal : number
>类型别名 :=> 数字
>0 : 0

            if (i == 1)
>i == 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1

                retVal = 1;
>retVal = 1 : 1
>retVal : number
>类型别名 :=> 数字
>1 : 1

            else
                retVal = 0;
>retVal = 0 : 0
>retVal : number
>类型别名 :=> 数字
>0 : 0

            switch (i) {
>i : number
>类型别名 :=> 数字

                case 2:
>2 : 2

                    retVal = 1;
>retVal = 1 : 1
>retVal : number
>类型别名 :=> 数字
>1 : 1

                    break;
                case 3:
>3 : 3

                    retVal = 1;
>retVal = 1 : 1
>retVal : number
>类型别名 :=> 数字
>1 : 1

                    break;
                default:
                    break;
            }

            for (var x in { x: 0, y: 1 }) {
>x : string
>类型别名 :=> 文字
>{ x: 0, y: 1 } : { x: number; y: number; }
>x : string
>类型别名 :=> 文字
>0 : 0
>y : string
>类型别名 :=> 文字
>1 : 1

             ! 
>! : boolean
>类型别名 :=> 真假

            try {
> : any
>类型别名 :=> 任意

                throw null;
>null : null
>类型别名 :=> 空值
            }
            catch (Exception)  ? 
>Exception : any
>类型别名 :=> 任意
            }
            finally {
                try { }
                catch (Exception) { }
>Exception : any
>类型别名 :=> 任意
            }

            return retVal;
>retVal : number
>类型别名 :=> 数字
        }

        /// <summary>
        /// Test types in ts language. Including class,struct,interface,delegate,anonymous type
        /// </summary>
        /// <returns></returns>
        public TYPES(): number {
>TYPES : () => number

            var retVal = 0;
>retVal : number
>类型别名 :=> 数字
>0 : 0

            var c = new CLASS();
>c : CLASS
>new CLASS() : CLASS
>CLASS : typeof CLASS

            var xx: IF = c;
>xx : IF
>IF : IF
>c : CLASS

            retVal +=  catch .Property;
>retVal += : any
>类型别名 :=> 任意
>retVal : number
>类型别名 :=> 数字
> : any
>类型别名 :=> 任意
>Property : any
>类型别名 :=> 任意

            retVal += c.Member();
>retVal += c.Member() : number
>类型别名 :=> 数字
>retVal : number
>类型别名 :=> 数字
>c.Member() : number
>类型别名 :=> 数字
>c.Member : () => number
>c : CLASS
>Member : () => number

            retVal += xx.Foo() ? 0 : 1;
>retVal += xx.Foo() ? 0 : 1 : number
>类型别名 :=> 数字
>retVal : number
>类型别名 :=> 数字
>xx.Foo() ? 0 : 1 : 0 | 1
>xx.Foo() : any
>类型别名 :=> 任意
>xx.Foo : () => any
>xx : IF
>Foo : () => any
>0 : 0
>1 : 1

            //anonymous type
            var anony = { a: new CLASS() };
>anony : { a: CLASS; }
>{ a: new CLASS() } : { a: CLASS; }
>a : CLASS
>new CLASS() : CLASS
>CLASS : typeof CLASS

            retVal += anony.a.d();
>retVal += anony.a.d() : any
>类型别名 :=> 任意
>retVal : number
>类型别名 :=> 数字
>anony.a.d() : void
>类型别名 :=> 无值
>anony.a.d : () => void
>anony.a : CLASS
>anony : { a: CLASS; }
>a : CLASS
>d : () => void

            return retVal;
>retVal : number
>类型别名 :=> 数字
        }


        ///// <summary>
        ///// Test different operators
        ///// </summary>
        ///// <returns></returns>
        public OPERATOR(): number {
>OPERATOR : () => number

            var a: number[] = [1, 2, 3, 4, 5, ];/*[] bug*/ // YES []
>a : number[]
>[1, 2, 3, 4, 5, ] : number[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>5 : 5

            var i = a[1];/*[]*/
>i : number
>类型别名 :=> 数字
>a[1] : number
>类型别名 :=> 数字
>a : number[]
>1 : 1

            i = i + i - i * i / i % i & i | i ^ i;/*+ - * / % & | ^*/
>i = i + i - i * i / i % i & i | i ^ i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i + i - i * i / i % i & i | i ^ i : number
>类型别名 :=> 数字
>i + i - i * i / i % i & i : number
>类型别名 :=> 数字
>i + i - i * i / i % i : number
>类型别名 :=> 数字
>i + i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i * i / i % i : number
>类型别名 :=> 数字
>i * i / i : number
>类型别名 :=> 数字
>i * i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i ^ i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            var b  =  true && false || true ^ false;/*& | ^*/
>b : number
>类型别名 :=> 数字
>true && false || true ^ false : number
>类型别名 :=> 数字
>true && false : false
>类型别名 :=> 为假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假
>true ^ false : number
>类型别名 :=> 数字
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

            b = !b;/*!*/
>b = !b : boolean
>类型别名 :=> 真假
>b : number
>类型别名 :=> 数字
>!b : boolean
>类型别名 :=> 真假
>b : number
>类型别名 :=> 数字

            i = ~i;/*~i*/
>i = ~i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>~i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            b = i < (i - 1) && (i + 1) > i;/*< && >*/
>b = i < (i - 1) && (i + 1) > i : boolean
>类型别名 :=> 真假
>b : number
>类型别名 :=> 数字
>i < (i - 1) && (i + 1) > i : boolean
>类型别名 :=> 真假
>i < (i - 1) : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>(i - 1) : number
>类型别名 :=> 数字
>i - 1 : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>1 : 1
>(i + 1) > i : boolean
>类型别名 :=> 真假
>(i + 1) : number
>类型别名 :=> 数字
>i + 1 : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>1 : 1
>i : number
>类型别名 :=> 数字

            var f = true ? 1 : 0;/*? :*/   // YES :
>f : number
>类型别名 :=> 数字
>true ? 1 : 0 : 0 | 1
>true : true
>类型别名 :=> 为真
>1 : 1
>0 : 0

            i++;/*++*/
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            i--;/*--*/
>i-- : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            b = true && false || true;/*&& ||*/
>b = true && false || true : true
>类型别名 :=> 为真
>b : number
>类型别名 :=> 数字
>true && false || true : true
>类型别名 :=> 为真
>true && false : false
>类型别名 :=> 为假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假
>true : true
>类型别名 :=> 为真

            i = i << 5;/*<<*/
>i = i << 5 : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i << 5 : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>5 : 5

            i = i >> 5;/*>>*/
>i = i >> 5 : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i >> 5 : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>5 : 5

            var j = i;
>j : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            b = i == j && i != j && i <= j && i >= j;/*= == && != <= >=*/
>b = i == j && i != j && i <= j && i >= j : boolean
>类型别名 :=> 真假
>b : number
>类型别名 :=> 数字
>i == j && i != j && i <= j && i >= j : boolean
>类型别名 :=> 真假
>i == j && i != j && i <= j : boolean
>类型别名 :=> 真假
>i == j && i != j : boolean
>类型别名 :=> 真假
>i == j : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>j : number
>类型别名 :=> 数字
>i != j : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>j : number
>类型别名 :=> 数字
>i <= j : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>j : number
>类型别名 :=> 数字
>i >= j : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>j : number
>类型别名 :=> 数字

            i += <number>5.0;/*+=*/
>i += <number>5.0 : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
><number>5.0 : number
>类型别名 :=> 数字
>5.0 : 5

            i -= i;/*-=*/
>i -= i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            i *= i;/**=*/
>i *= i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            if (i == 0)
>i == 0 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>0 : 0

                i++;
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            i /= i;/*/=*/
>i /= i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            i %= i;/*%=*/
>i %= i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            i &= i;/*&=*/
>i &= i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            i |= i;/*|=*/
>i |= i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            i ^= i;/*^=*/
>i ^= i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            i <<= i;/*<<=*/
>i <<= i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            i >>= i;/*>>=*/
>i >>= i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

            if (i == 0 &&  != b && f == 1)
>i == 0 &&  != b && f == 1 : boolean
>类型别名 :=> 真假
>i == 0 &&  != b : boolean
>类型别名 :=> 真假
>i == 0 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>0 : 0
>!= b : boolean
>类型别名 :=> 真假
> : any
>类型别名 :=> 任意
>b : number
>类型别名 :=> 数字
>f == 1 : boolean
>类型别名 :=> 真假
>f : number
>类型别名 :=> 数字
>1 : 1

                return 0;
>0 : 0

            else return 1;
>1 : 1
        }

    }

    interface IF {
>IF : IF

        Foo(): bool;
>Foo : () => any
>bool : No type information available!
    }

    class CLASS implements IF {
>CLASS : CLASS
>IF : IF

         case  d = () => {  yield  0; };
>d : () => void
>() => {  yield  0; } : () => void
>yield  0 : any
>类型别名 :=> 任意
>0 : 0

        public get Property() { return 0; }
>Property : number
>类型别名 :=> 数字
>0 : 0

        public Member() {
>Member : () => number

            return 0;
>0 : 0
        }
        public Foo(): bool {
>Foo : () => any
>bool : No type information available!

            var myEvent = () => { return 1; };
>myEvent : () => number
>() => { return 1; } : () => number
>1 : 1

            if (myEvent() == 1)
>myEvent() == 1 : boolean
>类型别名 :=> 真假
>myEvent() : number
>类型别名 :=> 数字
>myEvent : () => number
>1 : 1

                return true ? 
>true ? : any
>类型别名 :=> 任意
>true : true
>类型别名 :=> 为真

            else
> : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意

                return false;
>false : false
>类型别名 :=> 为假
        }
    }


    // todo: use these
    class A  . 
>A : A

        public method1(val:number) {
>method1(val:number) : any
>类型别名 :=> 任意
>method1 : any
>类型别名 :=> 任意
>val : any
>类型别名 :=> 任意
>number : any
>类型别名 :=> 任意

            return val;
>val : any
>类型别名 :=> 任意
        }
        public method2() {
>method2() : any
>类型别名 :=> 任意
>method2 : any
>类型别名 :=> 任意

            return 2 * this.method1(2);
>2 * this.method1(2) : number
>类型别名 :=> 数字
>2 : 2
>this.method1(2) : any
>类型别名 :=> 任意
>this.method1 : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>method1 : any
>类型别名 :=> 任意
>2 : 2
        }
    }

    class B extends A {
>B : B
>A : A

        public method2() {
>method2 : () => any

            return this.method1(2);
>this.method1(2) : any
>类型别名 :=> 任意
>this.method1 : any
>类型别名 :=> 任意
>this : this
>method1 : any
>类型别名 :=> 任意
>2 : 2
        }
    }

    class Overloading {
>Overloading : Overloading

        private otherValue = 42;
>otherValue : number
>类型别名 :=> 数字
>42 : 42

        constructor(private value: number, public name: string)  :  }
>value : number
>类型别名 :=> 数字
>name : string
>类型别名 :=> 文字
> : No type information available!
       
        public Overloads(value: string);
>Overloads(value: string) : any
>类型别名 :=> 任意
>Overloads : any
>类型别名 :=> 任意
>value : any
>类型别名 :=> 任意
>string : any
>类型别名 :=> 任意

        public Overloads( while : string, ...rest: string[]) {  & 
>Overloads( : any
>类型别名 :=> 任意
>Overloads : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
>string, : any
>类型别名 :=> 任意
>string : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
>rest : any
>类型别名 :=> 任意
>string[] : any
>类型别名 :=> 任意
>string : any
>类型别名 :=> 任意
>&         public : number
>类型别名 :=> 数字
> : any
>类型别名 :=> 任意

        public DefaultValue(value?: string = "Hello") { }
>public : any
>类型别名 :=> 任意
>DefaultValue(value?: string = "Hello") : any
>类型别名 :=> 任意
>DefaultValue : any
>类型别名 :=> 任意
>value?: string = "Hello" : any
>类型别名 :=> 任意
>value : any
>类型别名 :=> 任意
> : any
>类型别名 :=> 任意
>string = "Hello" : "Hello"
>string : any
>类型别名 :=> 任意
>"Hello" : "Hello"
    }
}

enum Weekdays {
>Weekdays : Weekdays

    Monday,
>Monday : Weekdays.Monday

    Tuesday,
>Tuesday : Weekdays.Tuesday

    Weekend,
>Weekend : Weekdays.Weekend
}

enum Fruit {
>Fruit : Fruit

    Apple,
>Apple : Fruit.Apple

    Pear
>Pear : Fruit.Pear
}

interface IDisposable {
>IDisposable : IDisposable

    Dispose(): void;
>Dispose : () => void
}

TypeScriptAllInOne.Program.Main();
>TypeScriptAllInOne.Program.Main() : void
>类型别名 :=> 无值
>TypeScriptAllInOne.Program.Main : (...args: string[]) => void
>TypeScriptAllInOne.Program : typeof TypeScriptAllInOne.Program
>TypeScriptAllInOne : typeof TypeScriptAllInOne
>Program : typeof TypeScriptAllInOne.Program
>Main : (...args: string[]) => void

