=== tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithRHSIsSubtypeOfFunction.ts ===
interface I extends Function { }
>I : I
>Function : Function

var x: any;
>x : any
>类型别名 :=> 任意

var f1: Function;
>f1 : Function
>Function : Function

var f2: I;
>f2 : I
>I : I

var f3: { (): void };
>f3 : () => void

var f4: { new (): number };
>f4 : new () => number

var r1 = x instanceof f1;
>r1 : boolean
>类型别名 :=> 真假
>x instanceof f1 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>f1 : Function

var r2 = x instanceof f2;
>r2 : boolean
>类型别名 :=> 真假
>x instanceof f2 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>f2 : I

var r3 = x instanceof f3;
>r3 : boolean
>类型别名 :=> 真假
>x instanceof f3 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>f3 : () => void

var r4 = x instanceof f4;
>r4 : boolean
>类型别名 :=> 真假
>x instanceof f4 : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>f4 : new () => number

var r5 = x instanceof null;
>r5 : boolean
>类型别名 :=> 真假
>x instanceof null : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

var r6 = x instanceof undefined;
>r6 : boolean
>类型别名 :=> 真假
>x instanceof undefined : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定

