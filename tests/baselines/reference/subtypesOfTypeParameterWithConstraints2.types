=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfTypeParameterWithConstraints2.ts ===
// checking whether other types are subtypes of type parameters with constraints

function f1<T extends U, U>(x: T, y: U) {
>f1 : <T 扩展 U, U>(x: T, y: U) => 无值
>T : T
>U : U
>U : U
>x : T
>T : T
>y : U
>U : U

    var r = true ? x : y;
>r : U
>true ? x : y : U
>true : 为真
>类型别名 :=> 为真
>x : T
>y : U

    var r = true ? y : x;
>r : U
>true ? y : x : U
>true : 为真
>类型别名 :=> 为真
>y : U
>x : T
}

// V > U > T
function f2<T extends U, U extends V, V>(x: T, y: U, z: V) {
>f2 : <T 扩展 U, U 扩展 V, V>(x: T, y: U, z: V) => 无值
>T : T
>U : U
>U : U
>V : V
>V : V
>x : T
>T : T
>y : U
>U : U
>z : V
>V : V

    var r = true ? x : y;
>r : U
>true ? x : y : U
>true : 为真
>类型别名 :=> 为真
>x : T
>y : U

    var r = true ? y : x;
>r : U
>true ? y : x : U
>true : 为真
>类型别名 :=> 为真
>y : U
>x : T

    // ok
    var r2 = true ? z : y;
>r2 : V
>true ? z : y : V
>true : 为真
>类型别名 :=> 为真
>z : V
>y : U

    var r2 = true ? y : z;
>r2 : V
>true ? y : z : V
>true : 为真
>类型别名 :=> 为真
>y : U
>z : V

    // ok
    var r2a = true ? z : x;
>r2a : V
>true ? z : x : V
>true : 为真
>类型别名 :=> 为真
>z : V
>x : T

    var r2b = true ? x : z;
>r2b : V
>true ? x : z : V
>true : 为真
>类型别名 :=> 为真
>x : T
>z : V
}

// Date > U > T
function f3<T extends U, U extends Date>(x: T, y: U) {
>f3 : <T 扩展 U, U 扩展 Date>(x: T, y: U) => 无值
>T : T
>U : U
>U : U
>Date : Date
>x : T
>T : T
>y : U
>U : U

    var r = true ? x : y;
>r : U
>true ? x : y : U
>true : 为真
>类型别名 :=> 为真
>x : T
>y : U

    var r = true ? y : x;
>r : U
>true ? y : x : U
>true : 为真
>类型别名 :=> 为真
>y : U
>x : T

    // ok
    var r2 = true ? x : new Date(); 
>r2 : Date
>true ? x : new Date() : Date
>true : 为真
>类型别名 :=> 为真
>x : T
>new Date() : Date
>Date : DateConstructor

    var r2 = true ? new Date() : x;
>r2 : Date
>true ? new Date() : x : Date
>true : 为真
>类型别名 :=> 为真
>new Date() : Date
>Date : DateConstructor
>x : T

    // ok
    var r3 = true ? y : new Date(); 
>r3 : Date
>true ? y : new Date() : Date
>true : 为真
>类型别名 :=> 为真
>y : U
>new Date() : Date
>Date : DateConstructor

    var r3 = true ? new Date() : y;
>r3 : Date
>true ? new Date() : y : Date
>true : 为真
>类型别名 :=> 为真
>new Date() : Date
>Date : DateConstructor
>y : U
}


interface I1 { foo: number; }
>I1 : I1
>foo : 数字
>类型别名 :=> 数字

class C1 { foo: number; }
>C1 : C1
>foo : 数字
>类型别名 :=> 数字

class C2<T> { foo: T; }
>C2 : C2<T>
>T : T
>foo : T
>T : T

enum E { A }
>E : E
>A : E

function f() { }
>f : 类为 f

module f {
>f : 类为 f

    export var bar = 1;
>bar : 数字
>类型别名 :=> 数字
>1 : 1
}
class c { baz: string }
>c : c
>baz : 文字
>类型别名 :=> 文字

module c {
>c : 类为 c

    export var bar = 1;
>bar : 数字
>类型别名 :=> 数字
>1 : 1
}

function f4<T extends Number>(x: T) {
>f4 : <T 扩展 Number>(x: T) => 无值
>T : T
>Number : Number
>x : T
>T : T

    var r0 = true ? x : null; // ok
>r0 : T
>true ? x : null : T
>true : 为真
>类型别名 :=> 为真
>x : T
>null : 空值
>类型别名 :=> 空值

    var r0 = true ? null : x; // ok
>r0 : T
>true ? null : x : T
>true : 为真
>类型别名 :=> 为真
>null : 空值
>类型别名 :=> 空值
>x : T

    var u: typeof undefined;
>u : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

    var r0b = true ? u : x; // ok
>r0b : 任意
>类型别名 :=> 任意
>true ? u : x : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>u : 任意
>类型别名 :=> 任意
>x : T

    var r0b = true ? x : u; // ok
>r0b : 任意
>类型别名 :=> 任意
>true ? x : u : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
>x : T
>u : 任意
>类型别名 :=> 任意
}

function f5<T extends Number>(x: T) {
>f5 : <T 扩展 Number>(x: T) => 无值
>T : T
>Number : Number
>x : T
>T : T

    var r1 = true ? 1 : x; // ok
>r1 : 数字 | T
>true ? 1 : x : 1 | T
>true : 为真
>类型别名 :=> 为真
>1 : 1
>x : T

    var r1 = true ? x : 1; // ok
>r1 : 数字 | T
>true ? x : 1 : 1 | T
>true : 为真
>类型别名 :=> 为真
>x : T
>1 : 1
}

function f6<T extends String>(x: T) {
>f6 : <T 扩展 String>(x: T) => 无值
>T : T
>String : String
>x : T
>T : T

    var r2 = true ? '' : x; // ok
>r2 : 文字 | T
>true ? '' : x : T | ""
>true : 为真
>类型别名 :=> 为真
>'' : ""
>x : T

    var r2 = true ? x : ''; // ok
>r2 : 文字 | T
>true ? x : '' : T | ""
>true : 为真
>类型别名 :=> 为真
>x : T
>'' : ""
}

function f7<T extends Boolean>(x: T) {
>f7 : <T 扩展 Boolean>(x: T) => 无值
>T : T
>Boolean : Boolean
>x : T
>T : T

    var r3 = true ? true : x; // ok
>r3 : 真假 | T
>true ? true : x : 为真 | T
>true : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真
>x : T

    var r3 = true ? x : true; // ok
>r3 : 真假 | T
>true ? x : true : 为真 | T
>true : 为真
>类型别名 :=> 为真
>x : T
>true : 为真
>类型别名 :=> 为真
}

function f8<T extends Date>(x: T) {
>f8 : <T 扩展 Date>(x: T) => 无值
>T : T
>Date : Date
>x : T
>T : T

    var r4 = true ? new Date() : x; // ok
>r4 : Date
>true ? new Date() : x : Date
>true : 为真
>类型别名 :=> 为真
>new Date() : Date
>Date : DateConstructor
>x : T

    var r4 = true ? x : new Date(); // ok
>r4 : Date
>true ? x : new Date() : Date
>true : 为真
>类型别名 :=> 为真
>x : T
>new Date() : Date
>Date : DateConstructor
}

function f9<T extends RegExp>(x: T) {
>f9 : <T 扩展 RegExp>(x: T) => 无值
>T : T
>RegExp : RegExp
>x : T
>T : T

    var r5 = true ? /1/ : x; // ok
>r5 : RegExp
>true ? /1/ : x : RegExp
>true : 为真
>类型别名 :=> 为真
>/1/ : RegExp
>x : T

    var r5 = true ? x : /1/; // ok
>r5 : RegExp
>true ? x : /1/ : RegExp
>true : 为真
>类型别名 :=> 为真
>x : T
>/1/ : RegExp
}

function f10<T extends { foo: number }>(x: T) {
>f10 : <T 扩展 { foo: 数字; }>(x: T) => 无值
>T : T
>foo : 数字
>类型别名 :=> 数字
>x : T
>T : T

    var r6 = true ? { foo: 1 } : x; // ok
>r6 : { foo: 数字; }
>true ? { foo: 1 } : x : { foo: 数字; }
>true : 为真
>类型别名 :=> 为真
>{ foo: 1 } : { foo: 数字; }
>foo : 数字
>类型别名 :=> 数字
>1 : 1
>x : T

    var r6 = true ? x : { foo: 1 }; // ok
>r6 : { foo: 数字; }
>true ? x : { foo: 1 } : { foo: 数字; }
>true : 为真
>类型别名 :=> 为真
>x : T
>{ foo: 1 } : { foo: 数字; }
>foo : 数字
>类型别名 :=> 数字
>1 : 1
}

function f11<T extends () => void>(x: T) {
>f11 : <T 扩展 () => 无值>(x: T) => 无值
>T : T
>x : T
>T : T

    var r7 = true ? () => { } : x; // ok
>r7 : () => 无值
>true ? () => { } : x : () => 无值
>true : 为真
>类型别名 :=> 为真
>() => { } : () => 无值
>x : T

    var r7 = true ? x : () => { }; // ok
>r7 : () => 无值
>true ? x : () => { } : () => 无值
>true : 为真
>类型别名 :=> 为真
>x : T
>() => { } : () => 无值
}

function f12<T extends <U>(x: U) => U>(x: T) {
>f12 : <T 扩展 <U>(x: U) => U>(x: T) => 无值
>T : T
>U : U
>x : U
>U : U
>U : U
>x : T
>T : T

    var r8 = true ? <T>(x: T) => { return x } : x; // ok
>r8 : <T>(x: T) => T
>true ? <T>(x: T) => { return x } : x : <T>(x: T) => T
>true : 为真
>类型别名 :=> 为真
><T>(x: T) => { return x } : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T
>x : T

    var r8b = true ? x : <T>(x: T) => { return x }; // ok, type parameters not identical across declarations
>r8b : <T>(x: T) => T
>true ? x : <T>(x: T) => { return x } : <T>(x: T) => T
>true : 为真
>类型别名 :=> 为真
>x : T
><T>(x: T) => { return x } : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T
}

function f13<T extends I1>(x: T) {
>f13 : <T 扩展 I1>(x: T) => 无值
>T : T
>I1 : I1
>x : T
>T : T

    var i1: I1;
>i1 : I1
>I1 : I1

    var r9 = true ? i1 : x; // ok
>r9 : I1
>true ? i1 : x : I1
>true : 为真
>类型别名 :=> 为真
>i1 : I1
>x : T

    var r9 = true ? x : i1; // ok
>r9 : I1
>true ? x : i1 : I1
>true : 为真
>类型别名 :=> 为真
>x : T
>i1 : I1
}

function f14<T extends C1>(x: T) {
>f14 : <T 扩展 C1>(x: T) => 无值
>T : T
>C1 : C1
>x : T
>T : T

    var c1: C1;
>c1 : C1
>C1 : C1

    var r10 = true ? c1 : x; // ok
>r10 : C1
>true ? c1 : x : C1
>true : 为真
>类型别名 :=> 为真
>c1 : C1
>x : T

    var r10 = true ? x : c1; // ok
>r10 : C1
>true ? x : c1 : C1
>true : 为真
>类型别名 :=> 为真
>x : T
>c1 : C1
}

function f15<T extends C2<number>>(x: T) {
>f15 : <T 扩展 C2<数字>>(x: T) => 无值
>T : T
>C2 : C2<T>
>x : T
>T : T

    var c2: C2<number>;
>c2 : C2<数字>
>C2 : C2<T>

    var r12 = true ? c2 : x; // ok
>r12 : C2<数字>
>true ? c2 : x : C2<数字>
>true : 为真
>类型别名 :=> 为真
>c2 : C2<数字>
>x : T

    var r12 = true ? x : c2; // ok
>r12 : C2<数字>
>true ? x : c2 : C2<数字>
>true : 为真
>类型别名 :=> 为真
>x : T
>c2 : C2<数字>
}

function f16<T extends E>(x: T) {
>f16 : <T 扩展 E>(x: T) => 无值
>T : T
>E : E
>x : T
>T : T

    var r13 = true ? E : x; // ok
>r13 : T | 类为 E
>true ? E : x : T | 类为 E
>true : 为真
>类型别名 :=> 为真
>E : 类为 E
>x : T

    var r13 = true ? x : E; // ok
>r13 : T | 类为 E
>true ? x : E : T | 类为 E
>true : 为真
>类型别名 :=> 为真
>x : T
>E : 类为 E

    var r14 = true ? E.A : x; // ok
>r14 : E
>true ? E.A : x : E
>true : 为真
>类型别名 :=> 为真
>E.A : E
>E : 类为 E
>A : E
>x : T

    var r14 = true ? x : E.A; // ok
>r14 : E
>true ? x : E.A : E
>true : 为真
>类型别名 :=> 为真
>x : T
>E.A : E
>E : 类为 E
>A : E
}

function f17<T extends typeof f>(x: T) {
>f17 : <T 扩展 类为 f>(x: T) => 无值
>T : T
>f : 类为 f
>x : T
>T : T

    var af: typeof f;
>af : 类为 f
>f : 类为 f

    var r15 = true ? af : x; // ok
>r15 : 类为 f
>true ? af : x : 类为 f
>true : 为真
>类型别名 :=> 为真
>af : 类为 f
>x : T

    var r15 = true ? x : af; // ok
>r15 : 类为 f
>true ? x : af : 类为 f
>true : 为真
>类型别名 :=> 为真
>x : T
>af : 类为 f
}

function f18<T extends typeof c>(x: T) {
>f18 : <T 扩展 类为 c>(x: T) => 无值
>T : T
>c : 类为 c
>x : T
>T : T

    var ac: typeof c;
>ac : 类为 c
>c : 类为 c

    var r16 = true ? ac : x; // ok
>r16 : 类为 c
>true ? ac : x : 类为 c
>true : 为真
>类型别名 :=> 为真
>ac : 类为 c
>x : T

    var r16 = true ? x : ac; // ok
>r16 : 类为 c
>true ? x : ac : 类为 c
>true : 为真
>类型别名 :=> 为真
>x : T
>ac : 类为 c
}

function f19<T>(x: T) {
>f19 : <T>(x: T) => 无值
>T : T
>x : T
>T : T

    function f17<U extends T>(a: U) {
>f17 : <U 扩展 T>(a: U) => 无值
>U : U
>T : T
>a : U
>U : U

        var r17 = true ? x : a; // ok
>r17 : T
>true ? x : a : T
>true : 为真
>类型别名 :=> 为真
>x : T
>a : U

        var r17 = true ? a : x; // ok
>r17 : T
>true ? a : x : T
>true : 为真
>类型别名 :=> 为真
>a : U
>x : T
    }

    function f18<V extends U, U extends T>(a: V) {
>f18 : <V 扩展 U, U 扩展 T>(a: V) => 无值
>V : V
>U : U
>U : U
>T : T
>a : V
>V : V

        var r18 = true ? x : a; // ok
>r18 : T
>true ? x : a : T
>true : 为真
>类型别名 :=> 为真
>x : T
>a : V

        var r18 = true ? a : x; // ok
>r18 : T
>true ? a : x : T
>true : 为真
>类型别名 :=> 为真
>a : V
>x : T
    }
}

function f20<T extends Number>(x: T) {
>f20 : <T 扩展 Number>(x: T) => 无值
>T : T
>Number : Number
>x : T
>T : T

    var r19 = true ? new Object() : x; // ok
>r19 : Object
>true ? new Object() : x : Object
>true : 为真
>类型别名 :=> 为真
>new Object() : Object
>Object : ObjectConstructor
>x : T

    var r19 = true ? x : new Object(); // ok
>r19 : Object
>true ? x : new Object() : Object
>true : 为真
>类型别名 :=> 为真
>x : T
>new Object() : Object
>Object : ObjectConstructor
}

function f21<T extends Number>(x: T) {
>f21 : <T 扩展 Number>(x: T) => 无值
>T : T
>Number : Number
>x : T
>T : T

    var r20 = true ? {} : x; // ok
>r20 : {}
>true ? {} : x : {}
>true : 为真
>类型别名 :=> 为真
>{} : {}
>x : T

    var r20 = true ? x : {}; // ok
>r20 : {}
>true ? x : {} : {}
>true : 为真
>类型别名 :=> 为真
>x : T
>{} : {}
}
