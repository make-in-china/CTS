=== tests/cases/conformance/types/any/assignEveryTypeToAny.ts ===
// all of these are valid

var x: any;
>x : any
>类型别名 :=> 任意

x = 1;
>x = 1 : 1
>x : any
>类型别名 :=> 任意
>1 : 1

var a = 2;
>a : number
>类型别名 :=> 数字
>2 : 2

x = a;
>x = a : number
>类型别名 :=> 数字
>x : any
>类型别名 :=> 任意
>a : number
>类型别名 :=> 数字

x = true;
>x = true : true
>类型别名 :=> 为真
>x : any
>类型别名 :=> 任意
>true : true
>类型别名 :=> 为真

var b = true;
>b : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

x = b;
>x = b : true
>类型别名 :=> 为真
>x : any
>类型别名 :=> 任意
>b : true
>类型别名 :=> 为真

x = "";
>x = "" : ""
>x : any
>类型别名 :=> 任意
>"" : ""

var c = "";
>c : string
>类型别名 :=> 文字
>"" : ""

x = c;
>x = c : string
>类型别名 :=> 文字
>x : any
>类型别名 :=> 任意
>c : string
>类型别名 :=> 文字

var d: void;
>d : void
>类型别名 :=> 无值

x = d;
>x = d : void
>类型别名 :=> 无值
>x : any
>类型别名 :=> 任意
>d : void
>类型别名 :=> 无值

var e = undefined;
>e : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定

x = e;
>x = e : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>e : any
>类型别名 :=> 任意

var e2: typeof undefined;
>e2 : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定

x = e2;
>x = e2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>e2 : any
>类型别名 :=> 任意

enum E {
>E : E

    A
>A : E
}

x = E.A;
>x = E.A : E
>x : any
>类型别名 :=> 任意
>E.A : E
>E : typeof E
>A : E

var f = E.A;
>f : E
>E.A : E
>E : typeof E
>A : E

x = f;
>x = f : E
>x : any
>类型别名 :=> 任意
>f : E

interface I {
>I : I

    foo: string;
>foo : string
>类型别名 :=> 文字
}

var g: I;
>g : I
>I : I

x = g;
>x = g : I
>x : any
>类型别名 :=> 任意
>g : I

class C {
>C : C

    bar: string;
>bar : string
>类型别名 :=> 文字
}

var h: C;
>h : C
>C : C

x = h;
>x = h : C
>x : any
>类型别名 :=> 任意
>h : C

var i: { (): string };
>i : () => string

x = i;
>x = i : () => string
>x : any
>类型别名 :=> 任意
>i : () => string

x = { f() { return 1; } }
>x = { f() { return 1; } } : { f(): number; }
>x : any
>类型别名 :=> 任意
>{ f() { return 1; } } : { f(): number; }
>f : () => number
>1 : 1

x = { f<T>(x: T) { return x; } }
>x = { f<T>(x: T) { return x; } } : { f<T>(x: T): T; }
>x : any
>类型别名 :=> 任意
>{ f<T>(x: T) { return x; } } : { f<T>(x: T): T; }
>f : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T

function j<T>(a: T) {
>j : <T>(a: T) => void
>T : T
>a : T
>T : T

    x = a;
>x = a : T
>x : any
>类型别名 :=> 任意
>a : T
}
