=== tests/cases/compiler/concatError.ts ===
var n1: number[];
>n1 : 数字[]

/*
interface Array<T> {
    concat(...items: T[][]): T[]; // Note: This overload needs to be picked for arrays of arrays, even though both are applicable
    concat(...items: T[]): T[];
}
*/
var fa: number[];
>fa : 数字[]

fa = fa.concat([0]);
>fa = fa.concat([0]) : 数字[]
>fa : 数字[]
>fa.concat([0]) : 数字[]
>fa.concat : { (...items: ReadonlyArray<数字>[]): 数字[]; (...items: (数字 | ReadonlyArray<数字>)[]): 数字[]; }
>fa : 数字[]
>concat : { (...items: ReadonlyArray<数字>[]): 数字[]; (...items: (数字 | ReadonlyArray<数字>)[]): 数字[]; }
>[0] : 数字[]
>0 : 0

fa = fa.concat(0);
>fa = fa.concat(0) : 数字[]
>fa : 数字[]
>fa.concat(0) : 数字[]
>fa.concat : { (...items: ReadonlyArray<数字>[]): 数字[]; (...items: (数字 | ReadonlyArray<数字>)[]): 数字[]; }
>fa : 数字[]
>concat : { (...items: ReadonlyArray<数字>[]): 数字[]; (...items: (数字 | ReadonlyArray<数字>)[]): 数字[]; }
>0 : 0





/*




declare class C<T> {
	public m(p1: C<C<T>>): C<T>;
	//public p: T;
}

var c: C<number>;
var cc: C<C<number>>;

c = c.m(cc);
*/
