=== tests/cases/conformance/expressions/typeGuards/typeGuardTautologicalConsistiency.ts ===
let stringOrNumber: string | number;
>stringOrNumber : 文字 | 数字

if (typeof stringOrNumber === "number") {
>typeof stringOrNumber === "number" : 真假
>类型别名 :=> 真假
>typeof stringOrNumber : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>stringOrNumber : 文字 | 数字
>"number" : "number"

    if (typeof stringOrNumber !== "number") {
>typeof stringOrNumber !== "number" : 真假
>类型别名 :=> 真假
>typeof stringOrNumber : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>stringOrNumber : 数字
>类型别名 :=> 数字
>"number" : "number"

        stringOrNumber;
>stringOrNumber : 不及
>类型别名 :=> 不及
    }
}

if (typeof stringOrNumber === "number" && typeof stringOrNumber !== "number") {
>typeof stringOrNumber === "number" && typeof stringOrNumber !== "number" : 真假
>类型别名 :=> 真假
>typeof stringOrNumber === "number" : 真假
>类型别名 :=> 真假
>typeof stringOrNumber : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>stringOrNumber : 文字 | 数字
>"number" : "number"
>typeof stringOrNumber !== "number" : 真假
>类型别名 :=> 真假
>typeof stringOrNumber : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>stringOrNumber : 数字
>类型别名 :=> 数字
>"number" : "number"

    stringOrNumber;
>stringOrNumber : 不及
>类型别名 :=> 不及
}

