=== tests/cases/compiler/targetTypeCalls.ts ===
var fra1: (v:any)=>string = function() { return function (v:string) {return v;}; }() // should work
>fra1 : (v: 任意) => 文字
>v : 任意
>类型别名 :=> 任意
>function() { return function (v:string) {return v;}; }() : (v: 文字) => 文字
>function() { return function (v:string) {return v;}; } : () => (v: 文字) => 文字
>function (v:string) {return v;} : (v: 文字) => 文字
>v : 文字
>类型别名 :=> 文字
>v : 文字
>类型别名 :=> 文字

var fra2: (v:any)=>number = function() { return function () { return 0; } }() // should work
>fra2 : (v: 任意) => 数字
>v : 任意
>类型别名 :=> 任意
>function() { return function () { return 0; } }() : () => 数字
>function() { return function () { return 0; } } : () => () => 数字
>function () { return 0; } : () => 数字
>0 : 0

var fra3: (v:any)=>string = function() { return function() { return function(v) {return v;};}(); }() // should work
>fra3 : (v: 任意) => 文字
>v : 任意
>类型别名 :=> 任意
>function() { return function() { return function(v) {return v;};}(); }() : (v: 任意) => 任意
>function() { return function() { return function(v) {return v;};}(); } : () => (v: 任意) => 任意
>function() { return function(v) {return v;};}() : (v: 任意) => 任意
>function() { return function(v) {return v;};} : () => (v: 任意) => 任意
>function(v) {return v;} : (v: 任意) => 任意
>v : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

var fra4: (v:any)=>void = function() { return function() { return function(v) {return v;};}(); }() // should work
>fra4 : (v: 任意) => 无值
>v : 任意
>类型别名 :=> 任意
>function() { return function() { return function(v) {return v;};}(); }() : (v: 任意) => 任意
>function() { return function() { return function(v) {return v;};}(); } : () => (v: 任意) => 任意
>function() { return function(v) {return v;};}() : (v: 任意) => 任意
>function() { return function(v) {return v;};} : () => (v: 任意) => 任意
>function(v) {return v;} : (v: 任意) => 任意
>v : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

