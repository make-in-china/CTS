=== tests/cases/compiler/targetTypeCalls.ts ===
var fra1: (v:any)=>string = function() { return function (v:string) {return v;}; }() // should work
>fra1 : (v: any) => string
>v : any
>类型别名 :=> 任意
>function() { return function (v:string) {return v;}; }() : (v: string) => string
>function() { return function (v:string) {return v;}; } : () => (v: string) => string
>function (v:string) {return v;} : (v: string) => string
>v : string
>类型别名 :=> 文字
>v : string
>类型别名 :=> 文字

var fra2: (v:any)=>number = function() { return function () { return 0; } }() // should work
>fra2 : (v: any) => number
>v : any
>类型别名 :=> 任意
>function() { return function () { return 0; } }() : () => number
>function() { return function () { return 0; } } : () => () => number
>function () { return 0; } : () => number
>0 : 0

var fra3: (v:any)=>string = function() { return function() { return function(v) {return v;};}(); }() // should work
>fra3 : (v: any) => string
>v : any
>类型别名 :=> 任意
>function() { return function() { return function(v) {return v;};}(); }() : (v: any) => any
>function() { return function() { return function(v) {return v;};}(); } : () => (v: any) => any
>function() { return function(v) {return v;};}() : (v: any) => any
>function() { return function(v) {return v;};} : () => (v: any) => any
>function(v) {return v;} : (v: any) => any
>v : any
>类型别名 :=> 任意
>v : any
>类型别名 :=> 任意

var fra4: (v:any)=>void = function() { return function() { return function(v) {return v;};}(); }() // should work
>fra4 : (v: any) => void
>v : any
>类型别名 :=> 任意
>function() { return function() { return function(v) {return v;};}(); }() : (v: any) => any
>function() { return function() { return function(v) {return v;};}(); } : () => (v: any) => any
>function() { return function(v) {return v;};}() : (v: any) => any
>function() { return function(v) {return v;};} : () => (v: any) => any
>function(v) {return v;} : (v: any) => any
>v : any
>类型别名 :=> 任意
>v : any
>类型别名 :=> 任意

