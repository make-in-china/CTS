=== tests/cases/conformance/types/objectTypeLiteral/indexSignatures/stringIndexerConstrainsPropertyDeclarations2.ts ===
// String indexer providing a constraint of a user defined type

class A {
>A : A

    foo(): string { return ''; }
>foo : () => 文字
>'' : ""
}

class B extends A {
>B : B
>A : A

    bar(): string { return ''; }
>bar : () => 文字
>'' : ""
}

class Foo {
>Foo : Foo

    [x: string]: A;
>x : 文字
>类型别名 :=> 文字
>A : A

    a: A; // ok
>a : A
>A : A

    b: B; // ok
>b : B
>B : B

    c: number; // error
>c : 数字
>类型别名 :=> 数字

    d: string; // error
>d : 文字
>类型别名 :=> 文字
}

interface Foo2 {
>Foo2 : Foo2

    [x: string]: A;
>x : 文字
>类型别名 :=> 文字
>A : A

    a: A; // ok
>a : A
>A : A

    b: B; // ok
>b : B
>B : B

    c: number; // error
>c : 数字
>类型别名 :=> 数字

    d: string; // error
>d : 文字
>类型别名 :=> 文字
}

var a: {
>a : { [x: 文字]: A; a: A; b: B; c: 数字; d: 文字; }

    [x: string]: A;
>x : 文字
>类型别名 :=> 文字
>A : A

    a: A; // ok
>a : A
>A : A

    b: B; // ok
>b : B
>B : B

    c: number; // error
>c : 数字
>类型别名 :=> 数字

    d: string; // error
>d : 文字
>类型别名 :=> 文字

};

// error
var b: { [x: string]: A } = {
>b : { [x: 文字]: A; }
>x : 文字
>类型别名 :=> 文字
>A : A
>{    a: A,    b: B} : { a: 类为 A; b: 类为 B; }

    a: A,
>a : 类为 A
>A : 类为 A

    b: B
>b : 类为 B
>B : 类为 B
}
