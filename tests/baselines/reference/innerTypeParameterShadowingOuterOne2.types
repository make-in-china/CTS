=== tests/cases/conformance/types/typeParameters/typeParameterLists/innerTypeParameterShadowingOuterOne2.ts ===
// inner type parameters shadow outer ones of the same name
// no errors expected

class C<T extends Date> {
>C : C<T>
>T : T
>Date : Date

    g<T extends Number>() {
>g : <T 扩展 Number>() => 无值
>T : T
>Number : Number

        var x: T;
>x : T
>T : T

        x.toFixed();
>x.toFixed() : 文字
>类型别名 :=> 文字
>x.toFixed : (fractionDigits?: 数字) => 文字
>x : T
>toFixed : (fractionDigits?: 数字) => 文字
    }

    h() {
>h : () => 无值

        var x: T;
>x : T
>T : T

        x.getDate();
>x.getDate() : 数字
>类型别名 :=> 数字
>x.getDate : () => 数字
>x : T
>getDate : () => 数字
    }
}

class C2<T extends Date, U extends Date> {
>C2 : C2<T, U>
>T : T
>Date : Date
>U : U
>Date : Date

    g<T extends Number, U extends Number>() {
>g : <T 扩展 Number, U 扩展 Number>() => 无值
>T : T
>Number : Number
>U : U
>Number : Number

        var x: U;
>x : U
>U : U

        x.toFixed();
>x.toFixed() : 文字
>类型别名 :=> 文字
>x.toFixed : (fractionDigits?: 数字) => 文字
>x : U
>toFixed : (fractionDigits?: 数字) => 文字
    }

    h() {
>h : () => 无值

        var x: U;
>x : U
>U : U

        x.getDate();
>x.getDate() : 数字
>类型别名 :=> 数字
>x.getDate : () => 数字
>x : U
>getDate : () => 数字
    }
}
//class C2<T extends Date, U extends T> {
//    g<T extends Number, U extends T>() {
//        var x: U;
//        x.toFixed();
//    }

//    h() {
//        var x: U;
//        x.getDate();
//    }
//}
