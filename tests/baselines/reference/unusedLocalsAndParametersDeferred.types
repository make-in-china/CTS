=== tests/cases/compiler/unusedLocalsAndParametersDeferred.ts ===
export { };

function defered<T>(a: () => T): T {
>defered : <T>(a: () => T) => T
>T : T
>a : () => T
>T : T
>T : T

    return a();
>a() : T
>a : () => T
}

// function declaration paramter
function f(a) {
>f : (a: any) => void
>a : any
>类型别名 :=> 任意

    defered(() => {
>defered(() => {        a;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        a;    } : () => void

        a;
>a : any
>类型别名 :=> 任意

    });
}
f(0);
>f(0) : void
>类型别名 :=> 无值
>f : (a: any) => void
>0 : 0

// function expression paramter
var fexp = function (a) {
>fexp : (a: any) => void
>function (a) {    defered(() => {        a;    });} : (a: any) => void
>a : any
>类型别名 :=> 任意

    defered(() => {
>defered(() => {        a;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        a;    } : () => void

        a;
>a : any
>类型别名 :=> 任意

    });
};
fexp(1);
>fexp(1) : void
>类型别名 :=> 无值
>fexp : (a: any) => void
>1 : 1

// arrow function paramter
var farrow = (a) => {
>farrow : (a: any) => void
>(a) => {    defered(() => {        a;    });} : (a: any) => void
>a : any
>类型别名 :=> 任意

    defered(() => {
>defered(() => {        a;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        a;    } : () => void

        a;
>a : any
>类型别名 :=> 任意

    });
};
farrow(2);
>farrow(2) : void
>类型别名 :=> 无值
>farrow : (a: any) => void
>2 : 2

let prop1;
>prop1 : any
>类型别名 :=> 任意

class C {
>C : C

    // Method declaration paramter
    method(a) {
>method : (a: any) => void
>a : any
>类型别名 :=> 任意

        defered(() => {
>defered(() => {            a;        }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {            a;        } : () => void

            a;
>a : any
>类型别名 :=> 任意

        });
    }
    // Accessor declaration paramter
    set x(v: number) {
>x : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字

        defered(() => {
>defered(() => {            v;        }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {            v;        } : () => void

            v;
>v : number
>类型别名 :=> 数字

        });
    }
    // in a property initalizer
    p = defered(() => {
>p : void
>类型别名 :=> 无值
>defered(() => {        prop1;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        prop1;    } : () => void

        prop1;
>prop1 : any
>类型别名 :=> 任意

    });
}

new C();
>new C() : C
>C : typeof C

let prop2;
>prop2 : any
>类型别名 :=> 任意

var E = class {
>E : typeof E
>class {    // Method declaration paramter    method(a) {        defered(() => {            a;        });    }    // Accessor declaration paramter    set x(v: number) {        defered(() => {            v;        });    }    // in a property initalizer    p = defered(() => {        prop2;    });} : typeof E

    // Method declaration paramter
    method(a) {
>method : (a: any) => void
>a : any
>类型别名 :=> 任意

        defered(() => {
>defered(() => {            a;        }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {            a;        } : () => void

            a;
>a : any
>类型别名 :=> 任意

        });
    }
    // Accessor declaration paramter
    set x(v: number) {
>x : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字

        defered(() => {
>defered(() => {            v;        }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {            v;        } : () => void

            v;
>v : number
>类型别名 :=> 数字

        });
    }
    // in a property initalizer
    p = defered(() => {
>p : void
>类型别名 :=> 无值
>defered(() => {        prop2;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        prop2;    } : () => void

        prop2;
>prop2 : any
>类型别名 :=> 任意

    });
}

new E();
>new E() : E
>E : typeof E


var o = {
>o : { method(a: any): void; x: number; p: void; }
>{    // Object literal method declaration paramter    method(a) {        defered(() => {            a;        });    },    // Accessor declaration paramter    set x(v: number) {        defered(() => {            v;        });    },    // in a property initalizer    p: defered(() => {        prop1;    })} : { method(a: any): void; x: number; p: void; }

    // Object literal method declaration paramter
    method(a) {
>method : (a: any) => void
>a : any
>类型别名 :=> 任意

        defered(() => {
>defered(() => {            a;        }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {            a;        } : () => void

            a;
>a : any
>类型别名 :=> 任意

        });
    },
    // Accessor declaration paramter
    set x(v: number) {
>x : number
>类型别名 :=> 数字
>v : number
>类型别名 :=> 数字

        defered(() => {
>defered(() => {            v;        }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {            v;        } : () => void

            v;
>v : number
>类型别名 :=> 数字

        });
    },
    // in a property initalizer
    p: defered(() => {
>p : void
>类型别名 :=> 无值
>defered(() => {        prop1;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        prop1;    } : () => void

        prop1;
>prop1 : any
>类型别名 :=> 任意

    })
};

o;
>o : { method(a: any): void; x: number; p: void; }

// in a for..in statment
for (let i in o) {
>i : string
>类型别名 :=> 文字
>o : { method(a: any): void; x: number; p: void; }

    defered(() => {
>defered(() => {        i;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        i;    } : () => void

        i;
>i : string
>类型别名 :=> 文字

    });
}

// in a for..of statment
for (let i of [1,2,3]) {
>i : number
>类型别名 :=> 数字
>[1,2,3] : number[]
>1 : 1
>2 : 2
>3 : 3

    defered(() => {
>defered(() => {        i;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        i;    } : () => void

        i;
>i : number
>类型别名 :=> 数字

    });
}

// in a for. statment
for (let i = 0; i < 10; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 10 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>10 : 10
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

    defered(() => {
>defered(() => {        i;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        i;    } : () => void

        i;
>i : number
>类型别名 :=> 数字

    });
}

// in a block

const condition = false;
>condition : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假

if (condition) {
>condition : false
>类型别名 :=> 为假

    const c = 0;
>c : 0
>0 : 0

    defered(() => {
>defered(() => {        c;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        c;    } : () => void

        c;
>c : 0

    });
}

// in try/catch/finally
try {
    const a = 0;
>a : 0
>0 : 0

    defered(() => {
>defered(() => {        a;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        a;    } : () => void

        a;
>a : 0

    });
}
catch (e) {
>e : any
>类型别名 :=> 任意

    const c = 1;
>c : 1
>1 : 1

    defered(() => {
>defered(() => {        c;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        c;    } : () => void

        c;
>c : 1

    });
}
finally {
    const c = 0;
>c : 0
>0 : 0

    defered(() => {
>defered(() => {        c;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        c;    } : () => void

        c;
>c : 0

    });
}


// in a namespace
namespace N {
>N : typeof N

    var x;
>x : any
>类型别名 :=> 任意

    defered(() => {
>defered(() => {        x;    }) : void
>类型别名 :=> 无值
>defered : <T>(a: () => T) => T
>() => {        x;    } : () => void

        x;
>x : any
>类型别名 :=> 任意

    });
}
N;
>N : typeof N
    
