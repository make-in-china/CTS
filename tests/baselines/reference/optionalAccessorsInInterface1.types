=== tests/cases/compiler/optionalAccessorsInInterface1.ts ===
interface MyPropertyDescriptor {
>MyPropertyDescriptor : MyPropertyDescriptor

    get? (): any;
>get : () => 任意

    set? (v: any): void;
>set : (v: 任意) => 无值
>v : 任意
>类型别名 :=> 任意
}

declare function defineMyProperty(o: any, p: string, attributes: MyPropertyDescriptor): any;
>defineMyProperty : (o: 任意, p: 文字, attributes: MyPropertyDescriptor) => 任意
>o : 任意
>类型别名 :=> 任意
>p : 文字
>类型别名 :=> 文字
>attributes : MyPropertyDescriptor
>MyPropertyDescriptor : MyPropertyDescriptor

defineMyProperty({}, "name", { get: function () { return 5; } });
>defineMyProperty({}, "name", { get: function () { return 5; } }) : 任意
>类型别名 :=> 任意
>defineMyProperty : (o: 任意, p: 文字, attributes: MyPropertyDescriptor) => 任意
>{} : {}
>"name" : "name"
>{ get: function () { return 5; } } : { get: () => 数字; }
>get : () => 数字
>function () { return 5; } : () => 数字
>5 : 5

interface MyPropertyDescriptor2 {
>MyPropertyDescriptor2 : MyPropertyDescriptor2

    get?: () => any;
>get : () => 任意

    set?: (v: any) => void;
>set : (v: 任意) => 无值
>v : 任意
>类型别名 :=> 任意
}

declare function defineMyProperty2(o: any, p: string, attributes: MyPropertyDescriptor2): any;
>defineMyProperty2 : (o: 任意, p: 文字, attributes: MyPropertyDescriptor2) => 任意
>o : 任意
>类型别名 :=> 任意
>p : 文字
>类型别名 :=> 文字
>attributes : MyPropertyDescriptor2
>MyPropertyDescriptor2 : MyPropertyDescriptor2

defineMyProperty2({}, "name", { get: function () { return 5; } });
>defineMyProperty2({}, "name", { get: function () { return 5; } }) : 任意
>类型别名 :=> 任意
>defineMyProperty2 : (o: 任意, p: 文字, attributes: MyPropertyDescriptor2) => 任意
>{} : {}
>"name" : "name"
>{ get: function () { return 5; } } : { get: () => 数字; }
>get : () => 数字
>function () { return 5; } : () => 数字
>5 : 5

