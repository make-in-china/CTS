=== tests/cases/compiler/primitiveMembers.ts ===
var x = 5;
>x : number
>类型别名 :=> 数字
>5 : 5

var r = /yo/;
>r : RegExp
>/yo/ : RegExp

r.source;
>r.source : string
>类型别名 :=> 文字
>r : RegExp
>source : string
>类型别名 :=> 文字

x.toBAZ();
>x.toBAZ() : any
>类型别名 :=> 任意
>x.toBAZ : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字
>toBAZ : any
>类型别名 :=> 任意

x.toString();
>x.toString() : string
>类型别名 :=> 文字
>x.toString : (radix?: number) => string
>x : number
>类型别名 :=> 数字
>toString : (radix?: number) => string

var n = 0;
>n : number
>类型别名 :=> 数字
>0 : 0

var N: Number;
>N : Number
>Number : Number

n = N;  // should not work, as 'number' has a different brand
>n = N : Number
>n : number
>类型别名 :=> 数字
>N : Number

N = n; // should work
>N = n : number
>类型别名 :=> 数字
>N : Number
>n : number
>类型别名 :=> 数字

var o: Object = {}
>o : Object
>Object : Object
>{} : {}

var f: Function = (x: string) => x.length;
>f : Function
>Function : Function
>(x: string) => x.length : (x: string) => number
>x : string
>类型别名 :=> 文字
>x.length : number
>类型别名 :=> 数字
>x : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字

var r2: RegExp = /./g;
>r2 : RegExp
>RegExp : RegExp
>/./g : RegExp

var n2: Number = 34;
>n2 : Number
>Number : Number
>34 : 34

var s: String = "yo";
>s : String
>String : String
>"yo" : "yo"

var b: Boolean = true;
>b : Boolean
>Boolean : Boolean
>true : true
>类型别名 :=> 为真

var n3 = 5 || {};
>n3 : {}
>5 || {} : {}
>5 : 5
>{} : {}


class baz { public bar(): void { }; }
>baz : baz
>bar : () => void

class foo extends baz { public bar(){ return undefined}; }
>foo : foo
>baz : baz
>bar : () => any
>undefined : undefined
>类型别名 :=> 未定



 


