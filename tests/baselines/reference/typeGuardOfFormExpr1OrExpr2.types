=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormExpr1OrExpr2.ts ===
var str: string;
>str : 文字
>类型别名 :=> 文字

var bool: boolean;
>bool : 真假
>类型别名 :=> 真假

var num: number;
>num : 数字
>类型别名 :=> 数字

var strOrNum: string | number;
>strOrNum : 文字 | 数字

var strOrNumOrBool: string | number | boolean;
>strOrNumOrBool : 文字 | 数字 | 真假

var numOrBool: number | boolean;
>numOrBool : 数字 | 真假

class C { private p; }
>C : C
>p : 任意
>类型别名 :=> 任意

var c: C;
>c : C
>C : C

var cOrBool: C| boolean;
>cOrBool : 真假 | C
>C : C

var strOrNumOrBoolOrC: string | number | boolean | C;
>strOrNumOrBoolOrC : 文字 | 数字 | 真假 | C
>C : C

// A type guard of the form expr1 || expr2
//  - when true, narrows the type of x to T1 | T2, where T1 is the type of x narrowed by expr1 when true, 
//    and T2 is the type of x narrowed by expr1 when false and then by expr2 when true, or
//  - when false, narrows the type of x by expr1 when false and then by expr2 when false.

// (typeguard1 || typeguard2)
if (typeof strOrNumOrBool === "string" || typeof strOrNumOrBool === "number") {
>typeof strOrNumOrBool === "string" || typeof strOrNumOrBool === "number" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool === "string" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : 文字 | 数字 | 真假
>"string" : "string"
>typeof strOrNumOrBool === "number" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : 数字 | 真假
>"number" : "number"

    strOrNum = strOrNumOrBool; // string | number
>strOrNum = strOrNumOrBool : 文字 | 数字
>strOrNum : 文字 | 数字
>strOrNumOrBool : 文字 | 数字
}
else {
    bool = strOrNumOrBool; // boolean
>bool = strOrNumOrBool : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>strOrNumOrBool : 真假
>类型别名 :=> 真假
}
// (typeguard1 || typeguard2 || typeguard3)
if (typeof strOrNumOrBoolOrC === "string" || typeof strOrNumOrBoolOrC === "number" || typeof strOrNumOrBoolOrC === "boolean") {
>typeof strOrNumOrBoolOrC === "string" || typeof strOrNumOrBoolOrC === "number" || typeof strOrNumOrBoolOrC === "boolean" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC === "string" || typeof strOrNumOrBoolOrC === "number" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC === "string" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBoolOrC : 文字 | 数字 | 真假 | C
>"string" : "string"
>typeof strOrNumOrBoolOrC === "number" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBoolOrC : 数字 | 真假 | C
>"number" : "number"
>typeof strOrNumOrBoolOrC === "boolean" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBoolOrC : 真假 | C
>"boolean" : "boolean"

    strOrNumOrBool = strOrNumOrBoolOrC; // string | number | boolean
>strOrNumOrBool = strOrNumOrBoolOrC : 文字 | 数字 | 真假
>strOrNumOrBool : 文字 | 数字 | 真假
>strOrNumOrBoolOrC : 文字 | 数字 | 真假
}
else {
    c = strOrNumOrBoolOrC; // C
>c = strOrNumOrBoolOrC : C
>c : C
>strOrNumOrBoolOrC : C
}
// (typeguard1 || typeguard2 || typeguard11(onAnotherType))
if (typeof strOrNumOrBoolOrC === "string" || typeof strOrNumOrBoolOrC === "number" || typeof strOrNumOrBool !== "boolean") {
>typeof strOrNumOrBoolOrC === "string" || typeof strOrNumOrBoolOrC === "number" || typeof strOrNumOrBool !== "boolean" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC === "string" || typeof strOrNumOrBoolOrC === "number" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC === "string" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBoolOrC : 文字 | 数字 | 真假 | C
>"string" : "string"
>typeof strOrNumOrBoolOrC === "number" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBoolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBoolOrC : 数字 | 真假 | C
>"number" : "number"
>typeof strOrNumOrBool !== "boolean" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : 文字 | 数字 | 真假
>"boolean" : "boolean"

    var r1: string | number | boolean | C = strOrNumOrBoolOrC; // string | number | boolean | C
>r1 : 文字 | 数字 | 真假 | C
>C : C
>strOrNumOrBoolOrC : 文字 | 数字 | 真假 | C

    var r2: string | number | boolean = strOrNumOrBool;
>r2 : 文字 | 数字 | 真假
>strOrNumOrBool : 文字 | 数字 | 真假
}
else {
    cOrBool = strOrNumOrBoolOrC; // C | boolean
>cOrBool = strOrNumOrBoolOrC : 真假 | C
>cOrBool : 真假 | C
>strOrNumOrBoolOrC : 真假 | C

    bool = strOrNumOrBool; // boolean
>bool = strOrNumOrBool : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>strOrNumOrBool : 真假
>类型别名 :=> 真假
}
// (typeguard1) || simpleExpr
if (typeof strOrNumOrBool === "string" || numOrBool !== strOrNumOrBool) {
>typeof strOrNumOrBool === "string" || numOrBool !== strOrNumOrBool : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool === "string" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : 文字 | 数字 | 真假
>"string" : "string"
>numOrBool !== strOrNumOrBool : 真假
>类型别名 :=> 真假
>numOrBool : 数字 | 真假
>strOrNumOrBool : 数字 | 真假

    var r3: string | number | boolean = strOrNumOrBool; // string | number | boolean
>r3 : 文字 | 数字 | 真假
>strOrNumOrBool : 文字 | 数字 | 真假
}
else {
    numOrBool = strOrNumOrBool; // number | boolean
>numOrBool = strOrNumOrBool : 数字 | 真假
>numOrBool : 数字 | 真假
>strOrNumOrBool : 数字 | 真假
}
