=== tests/cases/compiler/complicatedPrivacy.ts ===
module m1 {
>m1 : 类为 m1

    export module m2 {
>m2 : 类为 m2


        export function f1(c1: C1) {
>f1 : (c1: C1) => 无值
>c1 : C1
>C1 : C1
        }
        export function f2(c2: C2) {
>f2 : (c2: C2) => 无值
>c2 : C2
>C2 : C2
        }

        export class C2 implements m3.i3 {
>C2 : C2
>m3.i3 : 任意
>类型别名 :=> 任意
>m3 : 类为 m3
>i3 : m3.i3

            public get p1(arg) {
>p1 : C1
>arg : 任意
>类型别名 :=> 任意

                return new C1();
>new C1() : C1
>C1 : 类为 C1
            }

            public set p1(arg1: C1) {
>p1 : C1
>arg1 : C1
>C1 : C1
            }

            public f55() {
>f55 : () => 文字

                return "Hello world";
>"Hello world" : "Hello world"
            }
        }
    }

    export function f2(arg1: { x?: C1, y: number }) {
>f2 : (arg1: { x?: C1; y: 数字; }) => 无值
>arg1 : { x?: C1; y: 数字; }
>x : C1
>C1 : C1
>y : 数字
>类型别名 :=> 数字
    }

    export function f3(): {
>f3 : () => (a: 数字) => C1

        (a: number) : C1;
>a : 数字
>类型别名 :=> 数字
>C1 : C1

    } {
        return null;
>null : 空值
>类型别名 :=> 空值
    }

    export function f4(arg1: 
>f4 : (arg1: {}) => 无值
>arg1 : {}
    {
    [number]: C1; // Used to be indexer, now it is a computed property
>number : 任意
>类型别名 :=> 任意
>C1 : C1

    }) {
    }


    export function f5(arg2: {
>f5 : (arg2: 新建 (arg1: C1) => C1) => 无值
>arg2 : 新建 (arg1: C1) => C1

        new (arg1: C1) : C1
>arg1 : C1
>C1 : C1
>C1 : C1

    }) {
    }
    module m3 {
>m3 : 类为 m3

        function f2(f1: C1) {
>f2 : (f1: C1) => 无值
>f1 : C1
>C1 : C1
        }

        export interface i3 {
>i3 : i3

            f55(): string;
>f55 : () => 文字
        }
    }

    class C1 {
>C1 : C1
    }

    interface i {
>i : i

        x: number;
>x : 数字
>类型别名 :=> 数字
    }

    export class C5 implements i {
>C5 : C5
>i : i

        public x: number;
>x : 数字
>类型别名 :=> 数字
    }

    export var v2: C1[];
>v2 : C1[]
>C1 : C1
}

class C2 {
>C2 : C2
}

module m2 {
>m2 : 类为 m2

    export module m3 {
>m3 : 类为 m3

        export class c_pr  implements mglo5.i5, mglo5.i6 {
>c_pr : c_pr
>mglo5.i5 : 任意
>类型别名 :=> 任意
>mglo5 : 任意
>类型别名 :=> 任意
>i5 : mglo5.i5
>mglo5.i6 : 任意
>类型别名 :=> 任意
>mglo5 : 任意
>类型别名 :=> 任意
>i6 : No type information available!

            f1() {
>f1 : () => 文字

                return "Hello";
>"Hello" : "Hello"
            }
        }
        
        module m4 {
>m4 : 类为 m4

            class C {
>C : C
            }
            module m5 {
>m5 : 类为 m5
                
                export module m6 {
>m6 : 类为 m6

                    function f1() {
>f1 : () => C

                        return new C();
>new C() : C
>C : 类为 C
                    }
                }
            }
        }

    }
}

module mglo5 {
>mglo5 : 任意
>类型别名 :=> 任意

    export interface i5 {
>i5 : i5

        f1(): string;
>f1 : () => 文字
    }

    interface i6 {
>i6 : i6

        f6(): number;
>f6 : () => 数字
    }
}

