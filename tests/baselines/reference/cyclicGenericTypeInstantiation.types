=== tests/cases/compiler/cyclicGenericTypeInstantiation.ts ===
function foo<T>() {
>foo : <T>() => { y2: 任意; }
>T : T

    var z = foo<typeof y>();
>z : { y2: 任意; }
>foo<typeof y>() : { y2: 任意; }
>foo : <T>() => { y2: 任意; }
>y : { y2: 任意; }

    var y: {
>y : { y2: 任意; }

        y2: typeof z
>y2 : { y2: 任意; }
>z : { y2: 任意; }

    };
    return y;
>y : { y2: 任意; }
}


function bar<T>() {
>bar : <T>() => { y2: 任意; }
>T : T

    var z = bar<typeof y>();
>z : { y2: 任意; }
>bar<typeof y>() : { y2: 任意; }
>bar : <T>() => { y2: 任意; }
>y : { y2: 任意; }

    var y: {
>y : { y2: 任意; }

        y2: typeof z;
>y2 : { y2: 任意; }
>z : { y2: 任意; }
    }
    return y;
>y : { y2: 任意; }
}

var a = foo<number>();
>a : { y2: 任意; }
>foo<number>() : { y2: 任意; }
>foo : <T>() => { y2: 任意; }

var b = bar<number>();
>b : { y2: 任意; }
>bar<number>() : { y2: 任意; }
>bar : <T>() => { y2: 任意; }

a = b;
>a = b : { y2: 任意; }
>a : { y2: 任意; }
>b : { y2: 任意; }

