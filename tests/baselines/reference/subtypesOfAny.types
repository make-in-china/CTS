=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfAny.ts ===
// every type is a subtype of any, no errors expected

interface I {
>I : I

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: any;
>foo : any
>类型别名 :=> 任意
}


interface I2 {
>I2 : I2

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: number;
>foo : number
>类型别名 :=> 数字
}


interface I3 {
>I3 : I3

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: string;
>foo : string
>类型别名 :=> 文字
}


interface I4 {
>I4 : I4

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: boolean;
>foo : boolean
>类型别名 :=> 真假
}


interface I5 {
>I5 : I5

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: Date;
>foo : Date
>Date : Date
}


interface I6 {
>I6 : I6

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: RegExp;
>foo : RegExp
>RegExp : RegExp
}


interface I7 {
>I7 : I7

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: { bar: number };
>foo : { bar: number; }
>bar : number
>类型别名 :=> 数字
}


interface I8 {
>I8 : I8

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: number[];
>foo : number[]
}


interface I9 {
>I9 : I9

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: I8;
>foo : I8
>I8 : I8
}

class A { foo: number; }
>A : A
>foo : number
>类型别名 :=> 数字

interface I10 {
>I10 : I10

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: A;
>foo : A
>A : A
}

class A2<T> { foo: T; }
>A2 : A2<T>
>T : T
>foo : T
>T : T

interface I11 {
>I11 : I11

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: A2<number>;
>foo : A2<number>
>A2 : A2<T>
}


interface I12 {
>I12 : I12

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: (x) => number;
>foo : (x: any) => number
>x : any
>类型别名 :=> 任意
}


interface I13 {
>I13 : I13

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: <T>(x:T) => T;
>foo : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
}


enum E { A }
>E : E
>A : E

interface I14 {
>I14 : I14

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: E;
>foo : E
>E : E
}


function f() { }
>f : typeof f

module f {
>f : typeof f

    export var bar = 1;
>bar : number
>类型别名 :=> 数字
>1 : 1
}
interface I15 {
>I15 : I15

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: typeof f;
>foo : typeof f
>f : typeof f
}


class c { baz: string }
>c : c
>baz : string
>类型别名 :=> 文字

module c {
>c : typeof c

    export var bar = 1;
>bar : number
>类型别名 :=> 数字
>1 : 1
}
interface I16 {
>I16 : I16

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: typeof c;
>foo : typeof c
>c : typeof c
}


interface I17<T> {
>I17 : I17<T>
>T : T

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: T;
>foo : T
>T : T
}


interface I18<T, U> {
>I18 : I18<T, U>
>T : T
>U : U

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: U;
>foo : U
>U : U
}
//interface I18<T, U extends T> {
//    [x: string]: any;
//    foo: U;
//}


interface I19 {
>I19 : I19

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: Object;
>foo : Object
>Object : Object
}


interface I20 {
>I20 : I20

    [x: string]: any;
>x : string
>类型别名 :=> 文字

    foo: {};
>foo : {}
}
