=== tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithAnyOtherTypeInvalidOperations.ts ===
// ++ operator on any type
var ANY1: any;
>ANY1 : any
>类型别名 :=> 任意

var ANY2: any[] = [1, 2];
>ANY2 : any[]
>[1, 2] : number[]
>1 : 1
>2 : 2

var obj: () => {}
>obj : () => {}

var obj1 = { x: "", y: () => { } };
>obj1 : { x: string; y: () => void; }
>{ x: "", y: () => { } } : { x: string; y: () => void; }
>x : string
>类型别名 :=> 文字
>"" : ""
>y : () => void
>() => { } : () => void

function foo(): any {
>foo : () => any

    var a;
>a : any
>类型别名 :=> 任意

    return a;
>a : any
>类型别名 :=> 任意
}
class A {
>A : A

    public a: any;
>a : any
>类型别名 :=> 任意

    static foo(): any {
>foo : () => any

        var a;
>a : any
>类型别名 :=> 任意

        return a;
>a : any
>类型别名 :=> 任意
    }
}
module M {
>M : typeof M

    export var n: any;
>n : any
>类型别名 :=> 任意
}
var objA = new A();
>objA : A
>new A() : A
>A : typeof A

// any type var
var ResultIsNumber1 = ++ANY2;
>ResultIsNumber1 : number
>类型别名 :=> 数字
>++ANY2 : number
>类型别名 :=> 数字
>ANY2 : any[]

var ResultIsNumber2 = ++A;
>ResultIsNumber2 : number
>类型别名 :=> 数字
>++A : number
>类型别名 :=> 数字
>A : any
>类型别名 :=> 任意

var ResultIsNumber3 = ++M;
>ResultIsNumber3 : number
>类型别名 :=> 数字
>++M : number
>类型别名 :=> 数字
>M : any
>类型别名 :=> 任意

var ResultIsNumber4 = ++obj;
>ResultIsNumber4 : number
>类型别名 :=> 数字
>++obj : number
>类型别名 :=> 数字
>obj : () => {}

var ResultIsNumber5 = ++obj1;
>ResultIsNumber5 : number
>类型别名 :=> 数字
>++obj1 : number
>类型别名 :=> 数字
>obj1 : { x: string; y: () => void; }

var ResultIsNumber6 = ANY2++;
>ResultIsNumber6 : number
>类型别名 :=> 数字
>ANY2++ : number
>类型别名 :=> 数字
>ANY2 : any[]

var ResultIsNumber7 = A++;
>ResultIsNumber7 : number
>类型别名 :=> 数字
>A++ : number
>类型别名 :=> 数字
>A : any
>类型别名 :=> 任意

var ResultIsNumber8 = M++;
>ResultIsNumber8 : number
>类型别名 :=> 数字
>M++ : number
>类型别名 :=> 数字
>M : any
>类型别名 :=> 任意

var ResultIsNumber9 = obj++;
>ResultIsNumber9 : number
>类型别名 :=> 数字
>obj++ : number
>类型别名 :=> 数字
>obj : () => {}

var ResultIsNumber10 = obj1++;
>ResultIsNumber10 : number
>类型别名 :=> 数字
>obj1++ : number
>类型别名 :=> 数字
>obj1 : { x: string; y: () => void; }

// any type literal
var ResultIsNumber11 = ++{};
>ResultIsNumber11 : number
>类型别名 :=> 数字
>++{} : number
>类型别名 :=> 数字
>{} : {}

var ResultIsNumber12 = ++null;
>ResultIsNumber12 : number
>类型别名 :=> 数字
>++null : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

var ResultIsNumber13 = ++undefined;
>ResultIsNumber13 : number
>类型别名 :=> 数字
>++undefined : number
>类型别名 :=> 数字
>undefined : any
>类型别名 :=> 任意

var ResultIsNumber14 = null++;
>ResultIsNumber14 : number
>类型别名 :=> 数字
>null++ : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

var ResultIsNumber15 = {}++;
>ResultIsNumber15 : number
>类型别名 :=> 数字
>{}++ : number
>类型别名 :=> 数字
>{} : {}

var ResultIsNumber16 = undefined++;
>ResultIsNumber16 : number
>类型别名 :=> 数字
>undefined++ : number
>类型别名 :=> 数字
>undefined : any
>类型别名 :=> 任意

// any type expressions
var ResultIsNumber17 = ++foo();
>ResultIsNumber17 : number
>类型别名 :=> 数字
>++foo() : number
>类型别名 :=> 数字
>foo() : any
>类型别名 :=> 任意
>foo : () => any

var ResultIsNumber18 = ++A.foo();
>ResultIsNumber18 : number
>类型别名 :=> 数字
>++A.foo() : number
>类型别名 :=> 数字
>A.foo() : any
>类型别名 :=> 任意
>A.foo : () => any
>A : typeof A
>foo : () => any

var ResultIsNumber19 = ++(null + undefined);
>ResultIsNumber19 : number
>类型别名 :=> 数字
>++(null + undefined) : number
>类型别名 :=> 数字
>(null + undefined) : any
>类型别名 :=> 任意
>null + undefined : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>undefined : undefined
>类型别名 :=> 未定

var ResultIsNumber20 = ++(null + null);
>ResultIsNumber20 : number
>类型别名 :=> 数字
>++(null + null) : number
>类型别名 :=> 数字
>(null + null) : any
>类型别名 :=> 任意
>null + null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

var ResultIsNumber21 = ++(undefined + undefined);
>ResultIsNumber21 : number
>类型别名 :=> 数字
>++(undefined + undefined) : number
>类型别名 :=> 数字
>(undefined + undefined) : any
>类型别名 :=> 任意
>undefined + undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

var ResultIsNumber22 = ++obj1.x;
>ResultIsNumber22 : number
>类型别名 :=> 数字
>++obj1.x : number
>类型别名 :=> 数字
>obj1.x : string
>类型别名 :=> 文字
>obj1 : { x: string; y: () => void; }
>x : string
>类型别名 :=> 文字

var ResultIsNumber23 = ++obj1.y;
>ResultIsNumber23 : number
>类型别名 :=> 数字
>++obj1.y : number
>类型别名 :=> 数字
>obj1.y : () => void
>obj1 : { x: string; y: () => void; }
>y : () => void

var ResultIsNumber24 = foo()++;
>ResultIsNumber24 : number
>类型别名 :=> 数字
>foo()++ : number
>类型别名 :=> 数字
>foo() : any
>类型别名 :=> 任意
>foo : () => any

var ResultIsNumber25 = A.foo()++;
>ResultIsNumber25 : number
>类型别名 :=> 数字
>A.foo()++ : number
>类型别名 :=> 数字
>A.foo() : any
>类型别名 :=> 任意
>A.foo : () => any
>A : typeof A
>foo : () => any

var ResultIsNumber26 = (null + undefined)++;
>ResultIsNumber26 : number
>类型别名 :=> 数字
>(null + undefined)++ : number
>类型别名 :=> 数字
>(null + undefined) : any
>类型别名 :=> 任意
>null + undefined : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>undefined : undefined
>类型别名 :=> 未定

var ResultIsNumber27 = (null + null)++;
>ResultIsNumber27 : number
>类型别名 :=> 数字
>(null + null)++ : number
>类型别名 :=> 数字
>(null + null) : any
>类型别名 :=> 任意
>null + null : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

var ResultIsNumber28 = (undefined + undefined)++;
>ResultIsNumber28 : number
>类型别名 :=> 数字
>(undefined + undefined)++ : number
>类型别名 :=> 数字
>(undefined + undefined) : any
>类型别名 :=> 任意
>undefined + undefined : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

var ResultIsNumber29 = obj1.x++;
>ResultIsNumber29 : number
>类型别名 :=> 数字
>obj1.x++ : number
>类型别名 :=> 数字
>obj1.x : string
>类型别名 :=> 文字
>obj1 : { x: string; y: () => void; }
>x : string
>类型别名 :=> 文字

var ResultIsNumber30 = obj1.y++;
>ResultIsNumber30 : number
>类型别名 :=> 数字
>obj1.y++ : number
>类型别名 :=> 数字
>obj1.y : () => void
>obj1 : { x: string; y: () => void; }
>y : () => void

// miss assignment operators
++ANY2;
>++ANY2 : number
>类型别名 :=> 数字
>ANY2 : any[]

ANY2++;
>ANY2++ : number
>类型别名 :=> 数字
>ANY2 : any[]

++ANY1++;
>++ANY1 : number
>类型别名 :=> 数字
>ANY1 : any
>类型别名 :=> 任意
>++ : number
>类型别名 :=> 数字
> : any
>类型别名 :=> 任意

++ANY2++;
>++ANY2 : number
>类型别名 :=> 数字
>ANY2 : any[]
>++ : number
>类型别名 :=> 数字
> : any
>类型别名 :=> 任意

++ANY2[0]++;
>++ANY2[0] : number
>类型别名 :=> 数字
>ANY2[0] : any
>类型别名 :=> 任意
>ANY2 : any[]
>0 : 0
>++ : number
>类型别名 :=> 数字
> : any
>类型别名 :=> 任意

