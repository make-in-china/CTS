=== tests/cases/compiler/constructorOverloads1.ts ===
class Foo {
>Foo : Foo

    constructor(s: string);
>s : string
>类型别名 :=> 文字

    constructor(n: number);
>n : number
>类型别名 :=> 数字

    constructor(x: any) {
>x : any
>类型别名 :=> 任意

    }
    constructor(x: any) {
>x : any
>类型别名 :=> 任意

    }
    bar1() {  /*WScript.Echo("bar1");*/ }
>bar1 : () => void

    bar2() {  /*WScript.Echo("bar1");*/ }
>bar2 : () => void
}

var f1 = new Foo("hey");
>f1 : Foo
>new Foo("hey") : Foo
>Foo : typeof Foo
>"hey" : "hey"

var f2 = new Foo(0);
>f2 : Foo
>new Foo(0) : Foo
>Foo : typeof Foo
>0 : 0

var f3 = new Foo(f1);
>f3 : any
>类型别名 :=> 任意
>new Foo(f1) : any
>类型别名 :=> 任意
>Foo : typeof Foo
>f1 : Foo

var f4 = new Foo([f1,f2,f3]);
>f4 : any
>类型别名 :=> 任意
>new Foo([f1,f2,f3]) : any
>类型别名 :=> 任意
>Foo : typeof Foo
>[f1,f2,f3] : any[]
>f1 : Foo
>f2 : Foo
>f3 : any
>类型别名 :=> 任意

f1.bar1();
>f1.bar1() : void
>类型别名 :=> 无值
>f1.bar1 : () => void
>f1 : Foo
>bar1 : () => void

f1.bar2();
>f1.bar2() : void
>类型别名 :=> 无值
>f1.bar2 : () => void
>f1 : Foo
>bar2 : () => void

