=== tests/cases/compiler/circularInferredTypeOfVariable.ts ===
// Repro from #14428

(async () => {
>(async () => {    function foo(p: string[]): string[] {        return [];    }    function bar(p: string[]): string[] {        return [];    }    let a1: string[] | undefined = [];    while (true) {        let a2 = foo(a1!);        a1 = await bar(a2);    }}) : () => Promise<不及>
>async () => {    function foo(p: string[]): string[] {        return [];    }    function bar(p: string[]): string[] {        return [];    }    let a1: string[] | undefined = [];    while (true) {        let a2 = foo(a1!);        a1 = await bar(a2);    }} : () => Promise<不及>

    function foo(p: string[]): string[] {
>foo : (p: 文字[]) => 文字[]
>p : 文字[]

        return [];
>[] : 未定[]
    }

    function bar(p: string[]): string[] {
>bar : (p: 文字[]) => 文字[]
>p : 文字[]

        return [];
>[] : 未定[]
    }

    let a1: string[] | undefined = [];
>a1 : 文字[]
>[] : 未定[]

    while (true) {
>true : 为真
>类型别名 :=> 为真

        let a2 = foo(a1!);
>a2 : 文字[]
>foo(a1!) : 文字[]
>foo : (p: 文字[]) => 文字[]
>a1! : 文字[]
>a1 : 文字[]

        a1 = await bar(a2);
>a1 = await bar(a2) : 文字[]
>a1 : 文字[]
>await bar(a2) : 文字[]
>bar(a2) : 文字[]
>bar : (p: 文字[]) => 文字[]
>a2 : 文字[]
    }
});
