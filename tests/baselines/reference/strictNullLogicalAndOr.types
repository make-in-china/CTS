=== tests/cases/compiler/strictNullLogicalAndOr.ts ===
// Repro from #9113

let sinOrCos = Math.random() < .5;
>sinOrCos : boolean
>类型别名 :=> 真假
>Math.random() < .5 : boolean
>类型别名 :=> 真假
>Math.random() : number
>类型别名 :=> 数字
>Math.random : () => number
>Math : Math
>random : () => number
>.5 : 0.5

let choice = sinOrCos && Math.sin || Math.cos;
>choice : (x: number) => number
>sinOrCos && Math.sin || Math.cos : (x: number) => number
>sinOrCos && Math.sin : false | ((x: number) => number)
>sinOrCos : boolean
>类型别名 :=> 真假
>Math.sin : (x: number) => number
>Math : Math
>sin : (x: number) => number
>Math.cos : (x: number) => number
>Math : Math
>cos : (x: number) => number

choice(Math.PI);
>choice(Math.PI) : number
>类型别名 :=> 数字
>choice : (x: number) => number
>Math.PI : number
>类型别名 :=> 数字
>Math : Math
>PI : number
>类型别名 :=> 数字

function sq(n?: number): number {
>sq : (n?: number | undefined) => number
>n : number | undefined

  const r = n !== undefined && n*n || 0;
>r : number
>类型别名 :=> 数字
>n !== undefined && n*n || 0 : number
>类型别名 :=> 数字
>n !== undefined && n*n : number | false
>n !== undefined : boolean
>类型别名 :=> 真假
>n : number | undefined
>undefined : undefined
>类型别名 :=> 未定
>n*n : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字
>0 : 0

  return r;
>r : number
>类型别名 :=> 数字
}

sq(3);
>sq(3) : number
>类型别名 :=> 数字
>sq : (n?: number | undefined) => number
>3 : 3

