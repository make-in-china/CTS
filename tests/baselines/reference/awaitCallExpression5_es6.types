=== tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression5_es6.ts ===
declare var a: boolean;
>a : 真假
>类型别名 :=> 真假

declare var p: Promise<boolean>;
>p : Promise<真假>
>Promise : Promise<T>

declare function fn(arg0: boolean, arg1: boolean, arg2: boolean): void;
>fn : (arg0: 真假, arg1: 真假, arg2: 真假) => 无值
>arg0 : 真假
>类型别名 :=> 真假
>arg1 : 真假
>类型别名 :=> 真假
>arg2 : 真假
>类型别名 :=> 真假

declare var o: { fn(arg0: boolean, arg1: boolean, arg2: boolean): void; };
>o : { fn(arg0: 真假, arg1: 真假, arg2: 真假): 无值; }
>fn : (arg0: 真假, arg1: 真假, arg2: 真假) => 无值
>arg0 : 真假
>类型别名 :=> 真假
>arg1 : 真假
>类型别名 :=> 真假
>arg2 : 真假
>类型别名 :=> 真假

declare var pfn: Promise<{ (arg0: boolean, arg1: boolean, arg2: boolean): void; }>;
>pfn : Promise<(arg0: 真假, arg1: 真假, arg2: 真假) => 无值>
>Promise : Promise<T>
>arg0 : 真假
>类型别名 :=> 真假
>arg1 : 真假
>类型别名 :=> 真假
>arg2 : 真假
>类型别名 :=> 真假

declare var po: Promise<{ fn(arg0: boolean, arg1: boolean, arg2: boolean): void; }>;
>po : Promise<{ fn(arg0: 真假, arg1: 真假, arg2: 真假): 无值; }>
>Promise : Promise<T>
>fn : (arg0: 真假, arg1: 真假, arg2: 真假) => 无值
>arg0 : 真假
>类型别名 :=> 真假
>arg1 : 真假
>类型别名 :=> 真假
>arg2 : 真假
>类型别名 :=> 真假

declare function before(): void;
>before : () => 无值

declare function after(): void;
>after : () => 无值

async function func(): Promise<void> {
>func : () => Promise<无值>
>Promise : Promise<T>

    before();
>before() : 无值
>类型别名 :=> 无值
>before : () => 无值

    var b = o.fn(a, a, a);
>b : 无值
>类型别名 :=> 无值
>o.fn(a, a, a) : 无值
>类型别名 :=> 无值
>o.fn : (arg0: 真假, arg1: 真假, arg2: 真假) => 无值
>o : { fn(arg0: 真假, arg1: 真假, arg2: 真假): 无值; }
>fn : (arg0: 真假, arg1: 真假, arg2: 真假) => 无值
>a : 真假
>类型别名 :=> 真假
>a : 真假
>类型别名 :=> 真假
>a : 真假
>类型别名 :=> 真假

    after();
>after() : 无值
>类型别名 :=> 无值
>after : () => 无值
}
