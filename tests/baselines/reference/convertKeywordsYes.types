=== tests/cases/compiler/convertKeywordsYes.ts ===
// reserved ES5 future in strict mode

var constructor = 0;
>constructor : 数字
>类型别名 :=> 数字
>0 : 0

var any = 0;
>any : 数字
>类型别名 :=> 数字
>0 : 0

var boolean = 0;
>boolean : 数字
>类型别名 :=> 数字
>0 : 0

var implements = 0;
>implements : 数字
>类型别名 :=> 数字
>0 : 0

var interface = 0;
>interface : 数字
>类型别名 :=> 数字
>0 : 0

var let = 0;
>let : 数字
>类型别名 :=> 数字
>0 : 0

var module = 0;
>module : 数字
>类型别名 :=> 数字
>0 : 0

var number = 0;
>number : 数字
>类型别名 :=> 数字
>0 : 0

var package = 0;
>package : 数字
>类型别名 :=> 数字
>0 : 0

var private = 0;
>private : 数字
>类型别名 :=> 数字
>0 : 0

var protected = 0;
>protected : 数字
>类型别名 :=> 数字
>0 : 0

var public = 0;
>public : 数字
>类型别名 :=> 数字
>0 : 0

var set = 0;
>set : 数字
>类型别名 :=> 数字
>0 : 0

var static = 0;
>static : 数字
>类型别名 :=> 数字
>0 : 0

var string = 0;
>string : 数字
>类型别名 :=> 数字
>0 : 0

var get = 0;
>get : 数字
>类型别名 :=> 数字
>0 : 0

var yield = 0;
>yield : 数字
>类型别名 :=> 数字
>0 : 0

var declare = 0;
>declare : 数字
>类型别名 :=> 数字
>0 : 0

function bigGeneric<
>bigGeneric : <constructor, implements, interface, let, module, package, private, protected, public, set, static, get, yield, declare>(c: constructor, a: 任意, b2: 真假, i: implements, i2: interface, l: let, m: module, n: 数字, p: package, p2: private, p3: protected, p4: public, s: set, s2: static, s3: 文字, g: get, y: yield, d: declare) => 无值

    constructor,
>constructor : constructor

    implements ,
>implements : implements

    interface ,
>interface : interface

    let,
>let : let

    module ,
>module : module

    package,
>package : package

    private ,
>private : private

    protected,
>protected : protected

    public ,
>public : public

    set ,
>set : set

    static ,
>static : static

    get ,
>get : get

    yield,
>yield : yield

    declare
>declare : declare

    >(c: constructor,
>c : constructor
>constructor : constructor

    a: any,
>a : 任意
>类型别名 :=> 任意

    b2: boolean,
>b2 : 真假
>类型别名 :=> 真假

    i: implements ,
>i : implements
>implements : implements

    i2: interface ,
>i2 : interface
>interface : interface

    l: let,
>l : let
>let : let

    m: module ,
>m : module
>module : module

    n: number,
>n : 数字
>类型别名 :=> 数字

    p: package,
>p : package
>package : package

    p2: private ,
>p2 : private
>private : private

    p3: protected,
>p3 : protected
>protected : protected

    p4: public ,
>p4 : public
>public : public

    s: set ,
>s : set
>set : set

    s2: static ,
>s2 : static
>static : static

    s3: string,
>s3 : 文字
>类型别名 :=> 文字

    g: get ,
>g : get
>get : get

    y: yield,
>y : yield
>yield : yield

    d: declare ) { }
>d : declare
>declare : declare

var bigObject = {
>bigObject : { constructor: 数字; any: 数字; boolean: 数字; implements: 数字; interface: 数字; let: 数字; module: 数字; number: 数字; package: 数字; private: 数字; protected: 数字; public: 数字; set: 数字; static: 数字; string: 数字; get: 数字; yield: 数字; break: 数字; case: 数字; catch: 数字; class: 数字; continue: 数字; const: 数字; debugger: 数字; declare: 数字; default: 数字; delete: 数字; do: 数字; else: 数字; enum: 数字; export: 数字; extends: 数字; false: 数字; finally: 数字; for: 数字; function: 数字; if: 数字; import: 数字; in: 数字; instanceof: 数字; new: 数字; null: 数字; return: 数字; super: 数字; switch: 数字; this: 数字; throw: 数字; true: 数字; try: 数字; typeof: 数字; var: 数字; void: 数字; while: 数字; with: 数字; }
>{    constructor: 0,    any: 0,    boolean: 0,    implements: 0,    interface: 0,    let: 0,    module: 0,    number: 0,    package: 0,    private: 0,    protected: 0,    public: 0,    set: 0,    static: 0,    string: 0,    get: 0,    yield: 0,    break: 0,    case: 0,    catch: 0,    class: 0,    continue: 0,    const: 0,    debugger: 0,    declare: 0,    default: 0,    delete: 0,    do: 0,    else: 0,    enum: 0,    export: 0,    extends: 0,    false: 0,    finally: 0,    for: 0,    function: 0,    if: 0,    import: 0,    in: 0,    instanceof: 0,    new: 0,    null: 0,    return: 0,    super: 0,    switch: 0,    this: 0,    throw: 0,    true: 0,    try: 0,    typeof: 0,    var: 0,    void: 0,    while: 0,    with: 0,} : { constructor: 数字; any: 数字; boolean: 数字; implements: 数字; interface: 数字; let: 数字; module: 数字; number: 数字; package: 数字; private: 数字; protected: 数字; public: 数字; set: 数字; static: 数字; string: 数字; get: 数字; yield: 数字; break: 数字; case: 数字; catch: 数字; class: 数字; continue: 数字; const: 数字; debugger: 数字; declare: 数字; default: 数字; delete: 数字; do: 数字; else: 数字; enum: 数字; export: 数字; extends: 数字; false: 数字; finally: 数字; for: 数字; function: 数字; if: 数字; import: 数字; in: 数字; instanceof: 数字; new: 数字; null: 数字; return: 数字; super: 数字; switch: 数字; this: 数字; throw: 数字; true: 数字; try: 数字; typeof: 数字; var: 数字; void: 数字; while: 数字; with: 数字; }

    constructor: 0,
>constructor : 数字
>类型别名 :=> 数字
>0 : 0

    any: 0,
>any : 数字
>类型别名 :=> 数字
>0 : 0

    boolean: 0,
>boolean : 数字
>类型别名 :=> 数字
>0 : 0

    implements: 0,
>implements : 数字
>类型别名 :=> 数字
>0 : 0

    interface: 0,
>interface : 数字
>类型别名 :=> 数字
>0 : 0

    let: 0,
>let : 数字
>类型别名 :=> 数字
>0 : 0

    module: 0,
>module : 数字
>类型别名 :=> 数字
>0 : 0

    number: 0,
>number : 数字
>类型别名 :=> 数字
>0 : 0

    package: 0,
>package : 数字
>类型别名 :=> 数字
>0 : 0

    private: 0,
>private : 数字
>类型别名 :=> 数字
>0 : 0

    protected: 0,
>protected : 数字
>类型别名 :=> 数字
>0 : 0

    public: 0,
>public : 数字
>类型别名 :=> 数字
>0 : 0

    set: 0,
>set : 数字
>类型别名 :=> 数字
>0 : 0

    static: 0,
>static : 数字
>类型别名 :=> 数字
>0 : 0

    string: 0,
>string : 数字
>类型别名 :=> 数字
>0 : 0

    get: 0,
>get : 数字
>类型别名 :=> 数字
>0 : 0

    yield: 0,
>yield : 数字
>类型别名 :=> 数字
>0 : 0

    break: 0,
>break : 数字
>类型别名 :=> 数字
>0 : 0

    case: 0,
>case : 数字
>类型别名 :=> 数字
>0 : 0

    catch: 0,
>catch : 数字
>类型别名 :=> 数字
>0 : 0

    class: 0,
>class : 数字
>类型别名 :=> 数字
>0 : 0

    continue: 0,
>continue : 数字
>类型别名 :=> 数字
>0 : 0

    const: 0,
>const : 数字
>类型别名 :=> 数字
>0 : 0

    debugger: 0,
>debugger : 数字
>类型别名 :=> 数字
>0 : 0

    declare: 0,
>declare : 数字
>类型别名 :=> 数字
>0 : 0

    default: 0,
>default : 数字
>类型别名 :=> 数字
>0 : 0

    delete: 0,
>delete : 数字
>类型别名 :=> 数字
>0 : 0

    do: 0,
>do : 数字
>类型别名 :=> 数字
>0 : 0

    else: 0,
>else : 数字
>类型别名 :=> 数字
>0 : 0

    enum: 0,
>enum : 数字
>类型别名 :=> 数字
>0 : 0

    export: 0,
>export : 数字
>类型别名 :=> 数字
>0 : 0

    extends: 0,
>extends : 数字
>类型别名 :=> 数字
>0 : 0

    false: 0,
>false : 数字
>类型别名 :=> 数字
>0 : 0

    finally: 0,
>finally : 数字
>类型别名 :=> 数字
>0 : 0

    for: 0,
>for : 数字
>类型别名 :=> 数字
>0 : 0

    function: 0,
>function : 数字
>类型别名 :=> 数字
>0 : 0

    if: 0,
>if : 数字
>类型别名 :=> 数字
>0 : 0

    import: 0,
>import : 数字
>类型别名 :=> 数字
>0 : 0

    in: 0,
>in : 数字
>类型别名 :=> 数字
>0 : 0

    instanceof: 0,
>instanceof : 数字
>类型别名 :=> 数字
>0 : 0

    new: 0,
>new : 数字
>类型别名 :=> 数字
>0 : 0

    null: 0,
>null : 数字
>类型别名 :=> 数字
>0 : 0

    return: 0,
>return : 数字
>类型别名 :=> 数字
>0 : 0

    super: 0,
>super : 数字
>类型别名 :=> 数字
>0 : 0

    switch: 0,
>switch : 数字
>类型别名 :=> 数字
>0 : 0

    this: 0,
>this : 数字
>类型别名 :=> 数字
>0 : 0

    throw: 0,
>throw : 数字
>类型别名 :=> 数字
>0 : 0

    true: 0,
>true : 数字
>类型别名 :=> 数字
>0 : 0

    try: 0,
>try : 数字
>类型别名 :=> 数字
>0 : 0

    typeof: 0,
>typeof : 数字
>类型别名 :=> 数字
>0 : 0

    var: 0,
>var : 数字
>类型别名 :=> 数字
>0 : 0

    void: 0,
>void : 数字
>类型别名 :=> 数字
>0 : 0

    while: 0,
>while : 数字
>类型别名 :=> 数字
>0 : 0

    with: 0,
>with : 数字
>类型别名 :=> 数字
>0 : 0

};

interface bigInterface {
>bigInterface : bigInterface

    constructor;
>constructor : 任意
>类型别名 :=> 任意

    any;
>any : 任意
>类型别名 :=> 任意

    boolean;
>boolean : 任意
>类型别名 :=> 任意

    implements;
>implements : 任意
>类型别名 :=> 任意

    interface;
>interface : 任意
>类型别名 :=> 任意

    let;
>let : 任意
>类型别名 :=> 任意

    module;
>module : 任意
>类型别名 :=> 任意

    number;
>number : 任意
>类型别名 :=> 任意

    package;
>package : 任意
>类型别名 :=> 任意

    private;
>private : 任意
>类型别名 :=> 任意

    protected;
>protected : 任意
>类型别名 :=> 任意

    public;
>public : 任意
>类型别名 :=> 任意

    set;
>set : 任意
>类型别名 :=> 任意

    static;
>static : 任意
>类型别名 :=> 任意

    string;
>string : 任意
>类型别名 :=> 任意

    get;
>get : 任意
>类型别名 :=> 任意

    yield;
>yield : 任意
>类型别名 :=> 任意

    break;
>break : 任意
>类型别名 :=> 任意

    case;
>case : 任意
>类型别名 :=> 任意

    catch;
>catch : 任意
>类型别名 :=> 任意

    class;
>class : 任意
>类型别名 :=> 任意

    continue;
>continue : 任意
>类型别名 :=> 任意

    const;
>const : 任意
>类型别名 :=> 任意

    debugger;
>debugger : 任意
>类型别名 :=> 任意

    declare;
>declare : 任意
>类型别名 :=> 任意

    default;
>default : 任意
>类型别名 :=> 任意

    delete;
>delete : 任意
>类型别名 :=> 任意

    do;
>do : 任意
>类型别名 :=> 任意

    else;
>else : 任意
>类型别名 :=> 任意

    enum;
>enum : 任意
>类型别名 :=> 任意

    export;
>export : 任意
>类型别名 :=> 任意

    extends;
>extends : 任意
>类型别名 :=> 任意

    false;
>false : 任意
>类型别名 :=> 任意

    finally;
>finally : 任意
>类型别名 :=> 任意

    for;
>for : 任意
>类型别名 :=> 任意

    function;
>function : 任意
>类型别名 :=> 任意

    if;
>if : 任意
>类型别名 :=> 任意

    import;
>import : 任意
>类型别名 :=> 任意

    in;
>in : 任意
>类型别名 :=> 任意

    instanceof;
>instanceof : 任意
>类型别名 :=> 任意

    new;
>new : 任意
>类型别名 :=> 任意

    null;
>null : 任意
>类型别名 :=> 任意

    return;
>return : 任意
>类型别名 :=> 任意

    super;
>super : 任意
>类型别名 :=> 任意

    switch;
>switch : 任意
>类型别名 :=> 任意

    this;
>this : 任意
>类型别名 :=> 任意

    throw;
>throw : 任意
>类型别名 :=> 任意

    true;
>true : 任意
>类型别名 :=> 任意

    try;
>try : 任意
>类型别名 :=> 任意

    typeof;
>typeof : 任意
>类型别名 :=> 任意

    var;
>var : 任意
>类型别名 :=> 任意

    void;
>void : 任意
>类型别名 :=> 任意

    while;
>while : 任意
>类型别名 :=> 任意

    with;
>with : 任意
>类型别名 :=> 任意
}

class bigClass {
>bigClass : bigClass

    public "constructor" = 0;
>0 : 0

    public any = 0;
>any : 数字
>类型别名 :=> 数字
>0 : 0

    public boolean = 0;
>boolean : 数字
>类型别名 :=> 数字
>0 : 0

    public implements = 0;
>implements : 数字
>类型别名 :=> 数字
>0 : 0

    public interface = 0;
>interface : 数字
>类型别名 :=> 数字
>0 : 0

    public let = 0;
>let : 数字
>类型别名 :=> 数字
>0 : 0

    public module = 0;
>module : 数字
>类型别名 :=> 数字
>0 : 0

    public number = 0;
>number : 数字
>类型别名 :=> 数字
>0 : 0

    public package = 0;
>package : 数字
>类型别名 :=> 数字
>0 : 0

    public private = 0;
>private : 数字
>类型别名 :=> 数字
>0 : 0

    public protected = 0;
>protected : 数字
>类型别名 :=> 数字
>0 : 0

    public public = 0;
>public : 数字
>类型别名 :=> 数字
>0 : 0

    public set = 0;
>set : 数字
>类型别名 :=> 数字
>0 : 0

    public static = 0;
>static : 数字
>类型别名 :=> 数字
>0 : 0

    public string = 0;
>string : 数字
>类型别名 :=> 数字
>0 : 0

    public get = 0;
>get : 数字
>类型别名 :=> 数字
>0 : 0

    public yield = 0;
>yield : 数字
>类型别名 :=> 数字
>0 : 0

    public break = 0;
>break : 数字
>类型别名 :=> 数字
>0 : 0

    public case = 0;
>case : 数字
>类型别名 :=> 数字
>0 : 0

    public catch = 0;
>catch : 数字
>类型别名 :=> 数字
>0 : 0

    public class = 0;
>class : 数字
>类型别名 :=> 数字
>0 : 0

    public continue = 0;
>continue : 数字
>类型别名 :=> 数字
>0 : 0

    public const = 0;
>const : 数字
>类型别名 :=> 数字
>0 : 0

    public debugger = 0;
>debugger : 数字
>类型别名 :=> 数字
>0 : 0

    public declare = 0;
>declare : 数字
>类型别名 :=> 数字
>0 : 0

    public default = 0;
>default : 数字
>类型别名 :=> 数字
>0 : 0

    public delete = 0;
>delete : 数字
>类型别名 :=> 数字
>0 : 0

    public do = 0;
>do : 数字
>类型别名 :=> 数字
>0 : 0

    public else = 0;
>else : 数字
>类型别名 :=> 数字
>0 : 0

    public enum = 0;
>enum : 数字
>类型别名 :=> 数字
>0 : 0

    public export = 0;
>export : 数字
>类型别名 :=> 数字
>0 : 0

    public extends = 0;
>extends : 数字
>类型别名 :=> 数字
>0 : 0

    public false = 0;
>false : 数字
>类型别名 :=> 数字
>0 : 0

    public finally = 0;
>finally : 数字
>类型别名 :=> 数字
>0 : 0

    public for = 0;
>for : 数字
>类型别名 :=> 数字
>0 : 0

    public function = 0;
>function : 数字
>类型别名 :=> 数字
>0 : 0

    public if = 0;
>if : 数字
>类型别名 :=> 数字
>0 : 0

    public import = 0;
>import : 数字
>类型别名 :=> 数字
>0 : 0

    public in = 0;
>in : 数字
>类型别名 :=> 数字
>0 : 0

    public instanceof = 0;
>instanceof : 数字
>类型别名 :=> 数字
>0 : 0

    public new = 0;
>new : 数字
>类型别名 :=> 数字
>0 : 0

    public null = 0;
>null : 数字
>类型别名 :=> 数字
>0 : 0

    public return = 0;
>return : 数字
>类型别名 :=> 数字
>0 : 0

    public super = 0;
>super : 数字
>类型别名 :=> 数字
>0 : 0

    public switch = 0;
>switch : 数字
>类型别名 :=> 数字
>0 : 0

    public this = 0;
>this : 数字
>类型别名 :=> 数字
>0 : 0

    public throw = 0;
>throw : 数字
>类型别名 :=> 数字
>0 : 0

    public true = 0;
>true : 数字
>类型别名 :=> 数字
>0 : 0

    public try = 0;
>try : 数字
>类型别名 :=> 数字
>0 : 0

    public typeof = 0;
>typeof : 数字
>类型别名 :=> 数字
>0 : 0

    public var = 0;
>var : 数字
>类型别名 :=> 数字
>0 : 0

    public void = 0;
>void : 数字
>类型别名 :=> 数字
>0 : 0

    public while = 0;
>while : 数字
>类型别名 :=> 数字
>0 : 0

    public with = 0;
>with : 数字
>类型别名 :=> 数字
>0 : 0
}

enum bigEnum {
>bigEnum : bigEnum

    constructor,
>constructor : bigEnum.constructor

    any,
>any : bigEnum.any

    boolean,
>boolean : bigEnum.boolean

    implements,
>implements : bigEnum.implements

    interface,
>interface : bigEnum.interface

    let,
>let : bigEnum.let

    module,
>module : bigEnum.module

    number,
>number : bigEnum.number

    package,
>package : bigEnum.package

    private,
>private : bigEnum.private

    protected,
>protected : bigEnum.protected

    public,
>public : bigEnum.public

    set,
>set : bigEnum.set

    static,
>static : bigEnum.static

    string,
>string : bigEnum.string

    get,
>get : bigEnum.get

    yield,
>yield : bigEnum.yield

    break,
>break : bigEnum.break

    case,
>case : bigEnum.case

    catch,
>catch : bigEnum.catch

    class,
>class : bigEnum.class

    continue,
>continue : bigEnum.continue

    const,
>const : bigEnum.const

    debugger,
>debugger : bigEnum.debugger

    declare,
>declare : bigEnum.declare

    default,
>default : bigEnum.default

    delete,
>delete : bigEnum.delete

    do,
>do : bigEnum.do

    else,
>else : bigEnum.else

    enum,
>enum : bigEnum.enum

    export,
>export : bigEnum.export

    extends,
>extends : bigEnum.extends

    false,
>false : bigEnum.false

    finally,
>finally : bigEnum.finally

    for,
>for : bigEnum.for

    function,
>function : bigEnum.function

    if,
>if : bigEnum.if

    import,
>import : bigEnum.import

    in,
>in : bigEnum.in

    instanceof,
>instanceof : bigEnum.instanceof

    new,
>new : bigEnum.new

    null,
>null : bigEnum.null

    return,
>return : bigEnum.return

    super,
>super : bigEnum.super

    switch,
>switch : bigEnum.switch

    this,
>this : bigEnum.this

    throw,
>throw : bigEnum.throw

    true,
>true : bigEnum.true

    try,
>try : bigEnum.try

    typeof,
>typeof : bigEnum.typeof

    var,
>var : bigEnum.var

    void,
>void : bigEnum.void

    while,
>while : bigEnum.while

    with,
>with : bigEnum.with
}

module bigModule {
>bigModule : 类为 bigModule

    class constructor { }
>constructor : constructor

    class implements { }
>implements : implements

    class interface { }
>interface : interface

    class let { }
>let : let

    class module { }
>module : module

    class package { }
>package : package

    class private { }
>private : private

    class protected { }
>protected : protected

    class public { }
>public : public

    class set { }
>set : set

    class static { }
>static : static

    class get { }
>get : get

    class yield { }
>yield : yield

    class declare { }
>declare : declare
}
