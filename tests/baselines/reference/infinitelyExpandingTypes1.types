=== tests/cases/compiler/infinitelyExpandingTypes1.ts ===
interface List<T> {
>List : List<T>
>T : T

    data: T;
>data : T
>T : T

    next: List<T>;
>next : List<T>
>List : List<T>
>T : T

    owner: List<List<T>>;
>owner : List<List<T>>
>List : List<T>
>List : List<T>
>T : T
}


interface MyList<T> {
>MyList : MyList<T>
>T : T

    data: T;
>data : T
>T : T

    next: MyList<T>;
>next : MyList<T>
>MyList : MyList<T>
>T : T

    owner: MyList<MyList<T>>;
>owner : MyList<MyList<T>>
>MyList : MyList<T>
>MyList : MyList<T>
>T : T
}

var l: List<number>;
>l : List<数字>
>List : List<T>

var m: MyList<number>;
>m : MyList<数字>
>MyList : MyList<T>

l == m; // should error
>l == m : 真假
>类型别名 :=> 真假
>l : List<数字>
>m : MyList<数字>

var l2: List<string>;
>l2 : List<文字>
>List : List<T>

l == l2; // should error;
>l == l2 : 真假
>类型别名 :=> 真假
>l : List<数字>
>l2 : List<文字>

l == l; // should not error
>l == l : 真假
>类型别名 :=> 真假
>l : List<数字>
>l : List<数字>

