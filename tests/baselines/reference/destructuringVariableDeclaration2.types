=== tests/cases/conformance/es6/destructuring/destructuringVariableDeclaration2.ts ===
// The type T associated with a destructuring variable declaration is determined as follows:
//      If the declaration includes a type annotation, T is that type.
var {a1, a2}: { a1: number, a2: string } = { a1: true, a2: 1 }               // Error
>a1 : 数字
>类型别名 :=> 数字
>a2 : 文字
>类型别名 :=> 文字
>a1 : 数字
>类型别名 :=> 数字
>a2 : 文字
>类型别名 :=> 文字
>{ a1: true, a2: 1 } : { a1: 真假; a2: 数字; }
>a1 : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>a2 : 数字
>类型别名 :=> 数字
>1 : 1

var [a3, [[a4]], a5]: [number, [[string]], boolean] = [1, [[false]], true];  // Error
>a3 : 数字
>类型别名 :=> 数字
>a4 : 文字
>类型别名 :=> 文字
>a5 : 真假
>类型别名 :=> 真假
>[1, [[false]], true] : [数字, [[真假]], 为真]
>1 : 1
>[[false]] : [[真假]]
>[false] : [真假]
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真

// The type T associated with a destructuring variable declaration is determined as follows:
//      Otherwise, if the declaration includes an initializer expression, T is the type of that initializer expression.
var temp = { t1: true, t2: "false" };
>temp : { t1: 真假; t2: 文字; }
>{ t1: true, t2: "false" } : { t1: 真假; t2: 文字; }
>t1 : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>t2 : 文字
>类型别名 :=> 文字
>"false" : "false"

var [b0 = 3, b1 = true, b2 = temp] = [3, false, { t1: false, t2: 5}];  // Error
>b0 : 数字
>类型别名 :=> 数字
>3 : 3
>b1 : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>b2 : { t1: 真假; t2: 文字; } | { t1: 为假; t2: 数字; }
>temp : { t1: 真假; t2: 文字; }
>[3, false, { t1: false, t2: 5}] : [数字, 为假, { t1: 为假; t2: 数字; }]
>3 : 3
>false : 为假
>类型别名 :=> 为假
>{ t1: false, t2: 5} : { t1: 为假; t2: 数字; }
>t1 : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>t2 : 数字
>类型别名 :=> 数字
>5 : 5

// The type T associated with a binding element is determined as follows:
//      If the binding element is a rest element, T is an array type with
//          an element type E, where E is the type of the numeric index signature of S.
var [c1, c2, { c3: c4, c5 }, , ...c6] = [1, 2, { c3: 4, c5: 0 }];  // Error
>c1 : 数字 | { c3: 数字; c5: 数字; }
>c2 : 数字 | { c3: 数字; c5: 数字; }
>c3 : 任意
>类型别名 :=> 任意
>c4 : 任意
>类型别名 :=> 任意
>c5 : 任意
>类型别名 :=> 任意
> : 未定
>类型别名 :=> 未定
>c6 : (数字 | { c3: 数字; c5: 数字; })[]
>[1, 2, { c3: 4, c5: 0 }] : (数字 | { c3: 数字; c5: 数字; })[]
>1 : 1
>2 : 2
>{ c3: 4, c5: 0 } : { c3: 数字; c5: 数字; }
>c3 : 数字
>类型别名 :=> 数字
>4 : 4
>c5 : 数字
>类型别名 :=> 数字
>0 : 0

// When a destructuring variable declaration, binding property, or binding element specifies
// an initializer expression, the type of the initializer expression is required to be assignable
// to the widened form of the type associated with the destructuring variable declaration, binding property, or binding element.
var {d: {d1 = ["string", null]}}: { d: { d1: number[] } } = { d: { d1: [1, 2] } };  // Error
>d : 任意
>类型别名 :=> 任意
>d1 : 文字[] | 数字[]
>["string", null] : 文字[]
>"string" : "string"
>null : 空值
>类型别名 :=> 空值
>d : { d1: 数字[]; }
>d1 : 数字[]
>{ d: { d1: [1, 2] } } : { d: { d1: 数字[]; }; }
>d : { d1: 数字[]; }
>{ d1: [1, 2] } : { d1: 数字[]; }
>d1 : 数字[]
>[1, 2] : 数字[]
>1 : 1
>2 : 2

