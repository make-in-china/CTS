=== tests/cases/conformance/types/any/narrowFromAnyWithInstanceof.ts ===
declare var x: any;
>x : 任意
>类型别名 :=> 任意

if (x instanceof Function) { // 'any' is not narrowed when target type is 'Function'
>x instanceof Function : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>Function : FunctionConstructor

    x();
>x() : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

    x(1, 2, 3);
>x(1, 2, 3) : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>1 : 1
>2 : 2
>3 : 3

    x("hello!");
>x("hello!") : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>"hello!" : "hello!"

    x.prop;
>x.prop : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>prop : 任意
>类型别名 :=> 任意
}

if (x instanceof Object) { // 'any' is not narrowed when target type is 'Object'
>x instanceof Object : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>Object : ObjectConstructor

    x.method();
>x.method() : 任意
>类型别名 :=> 任意
>x.method : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

    x();
>x() : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
}

if (x instanceof Error) { // 'any' is narrowed to types other than 'Function'/'Object'
>x instanceof Error : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>Error : ErrorConstructor

    x.message;
>x.message : 文字
>类型别名 :=> 文字
>x : Error
>message : 文字
>类型别名 :=> 文字

    x.mesage;
>x.mesage : 任意
>类型别名 :=> 任意
>x : Error
>mesage : 任意
>类型别名 :=> 任意
}

if (x instanceof Date) {
>x instanceof Date : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>Date : DateConstructor

    x.getDate();
>x.getDate() : 数字
>类型别名 :=> 数字
>x.getDate : () => 数字
>x : Date
>getDate : () => 数字

    x.getHuors();
>x.getHuors() : 任意
>类型别名 :=> 任意
>x.getHuors : 任意
>类型别名 :=> 任意
>x : Date
>getHuors : 任意
>类型别名 :=> 任意
}

