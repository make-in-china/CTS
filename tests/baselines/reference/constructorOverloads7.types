=== tests/cases/compiler/constructorOverloads7.ts ===
declare class Point
>Point : Point
{
    x: number;
>x : number
>类型别名 :=> 数字

    y: number;
>y : number
>类型别名 :=> 数字

    constructor(x: number, y: number);
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

     add(dx: number, dy: number): Point;
>add : (dx: number, dy: number) => Point
>dx : number
>类型别名 :=> 数字
>dy : number
>类型别名 :=> 数字
>Point : Point

     origin: Point;
>origin : Point
>Point : Point

}

// Type provided by extern declaration
// Because Point is a constructor function, this is inferred
// to be Point and return type is inferred to be void
function Point(x, y) {
>Point : (x: any, y: any) => any
>x : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    this.x = x;
>this.x = x : any
>类型别名 :=> 任意
>this.x : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

    this.y = y;
>this.y = y : any
>类型别名 :=> 任意
>this.y : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意

    return this;
>this : any
>类型别名 :=> 任意
}

declare function EF1(a:number, b:number):number;
>EF1 : (a: number, b: number) => number
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字

function EF1(a,b) { return a+b; }
>EF1 : (a: number, b: number) => number
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>a+b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

