=== tests/cases/conformance/types/thisType/thisTypeInFunctions.ts ===
// body checking
class B {
>B : B

    n: number;
>n : 数字
>类型别名 :=> 数字
}
class C {
>C : C

    n: number;
>n : 数字
>类型别名 :=> 数字

    explicitThis(this: this, m: number): number {
>explicitThis : (this: 本体, m: 数字) => 数字
>this : 本体
>m : 数字
>类型别名 :=> 数字

        return this.n + m;
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : 本体
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
    }
    explicitC(this: C, m: number): number {
>explicitC : (this: C, m: 数字) => 数字
>this : C
>C : C
>m : 数字
>类型别名 :=> 数字

        return this.n + m;
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : C
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
    }
    explicitProperty(this: {n: number}, m: number): number {
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>this : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

        return this.n + m;
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
    }
    explicitVoid(this: void, m: number): number {
>explicitVoid : (this: 无值, m: 数字) => 数字
>this : 无值
>类型别名 :=> 无值
>m : 数字
>类型别名 :=> 数字

        return m + 1;
>m + 1 : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
>1 : 1
    }
}
class D extends C { }
>D : D
>C : C

interface I {
>I : I

    a: number;
>a : 数字
>类型别名 :=> 数字

    explicitVoid1(this: void): number;
>explicitVoid1 : (this: 无值) => 数字
>this : 无值
>类型别名 :=> 无值

    explicitVoid2(this: void): number;
>explicitVoid2 : (this: 无值) => 数字
>this : 无值
>类型别名 :=> 无值

    explicitStructural(this: {a: number}): number;
>explicitStructural : (this: { a: 数字; }) => 数字
>this : { a: 数字; }
>a : 数字
>类型别名 :=> 数字

    explicitInterface(this: I): number;
>explicitInterface : (this: I) => 数字
>this : I
>I : I

    explicitThis(this: this): number;
>explicitThis : (this: 本体) => 数字
>this : 本体
}
function explicitStructural(this: { y: number }, x: number): number {
>explicitStructural : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

    return x + this.y;
>x + this.y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>this.y : 数字
>类型别名 :=> 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
}
function justThis(this: { y: number }): number {
>justThis : (this: { y: 数字; }) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字

    return this.y;
>this.y : 数字
>类型别名 :=> 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
}
function implicitThis(n: number): number {
>implicitThis : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字

    return this.m + n + 12;
>this.m + n + 12 : 任意
>类型别名 :=> 任意
>this.m + n : 任意
>类型别名 :=> 任意
>this.m : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意
>n : 数字
>类型别名 :=> 数字
>12 : 12
}
let impl: I = {
>impl : I
>I : I
>{    a: 12,    explicitVoid2: () => this.a, // ok, this: any because it refers to some outer object (window?)    explicitVoid1() { return 12; },    explicitStructural() {        return this.a;    },    explicitInterface() {        return this.a;    },    explicitThis() {        return this.a;    },} : { a: 数字; explicitVoid2: () => 任意; explicitVoid1(this: 无值): 数字; explicitStructural(this: { a: 数字; }): 数字; explicitInterface(this: I): 数字; explicitThis(this: I): 数字; }

    a: 12,
>a : 数字
>类型别名 :=> 数字
>12 : 12

    explicitVoid2: () => this.a, // ok, this: any because it refers to some outer object (window?)
>explicitVoid2 : () => 任意
>() => this.a : () => 任意
>this.a : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

    explicitVoid1() { return 12; },
>explicitVoid1 : (this: 无值) => 数字
>12 : 12

    explicitStructural() {
>explicitStructural : (this: { a: 数字; }) => 数字

        return this.a;
>this.a : 数字
>类型别名 :=> 数字
>this : { a: 数字; }
>a : 数字
>类型别名 :=> 数字

    },
    explicitInterface() {
>explicitInterface : (this: I) => 数字

        return this.a;
>this.a : 数字
>类型别名 :=> 数字
>this : I
>a : 数字
>类型别名 :=> 数字

    },
    explicitThis() {
>explicitThis : (this: I) => 数字

        return this.a;
>this.a : 数字
>类型别名 :=> 数字
>this : I
>a : 数字
>类型别名 :=> 数字

    },
}
impl.explicitVoid1 = function () { return 12; };
>impl.explicitVoid1 = function () { return 12; } : (this: 无值) => 数字
>impl.explicitVoid1 : (this: 无值) => 数字
>impl : I
>explicitVoid1 : (this: 无值) => 数字
>function () { return 12; } : (this: 无值) => 数字
>12 : 12

impl.explicitVoid2 = () => 12;
>impl.explicitVoid2 = () => 12 : () => 数字
>impl.explicitVoid2 : (this: 无值) => 数字
>impl : I
>explicitVoid2 : (this: 无值) => 数字
>() => 12 : () => 数字
>12 : 12

impl.explicitStructural = function() { return this.a; };
>impl.explicitStructural = function() { return this.a; } : (this: { a: 数字; }) => 数字
>impl.explicitStructural : (this: { a: 数字; }) => 数字
>impl : I
>explicitStructural : (this: { a: 数字; }) => 数字
>function() { return this.a; } : (this: { a: 数字; }) => 数字
>this.a : 数字
>类型别名 :=> 数字
>this : { a: 数字; }
>a : 数字
>类型别名 :=> 数字

impl.explicitInterface = function() { return this.a; };
>impl.explicitInterface = function() { return this.a; } : (this: I) => 数字
>impl.explicitInterface : (this: I) => 数字
>impl : I
>explicitInterface : (this: I) => 数字
>function() { return this.a; } : (this: I) => 数字
>this.a : 数字
>类型别名 :=> 数字
>this : I
>a : 数字
>类型别名 :=> 数字

impl.explicitStructural = () => 12;
>impl.explicitStructural = () => 12 : () => 数字
>impl.explicitStructural : (this: { a: 数字; }) => 数字
>impl : I
>explicitStructural : (this: { a: 数字; }) => 数字
>() => 12 : () => 数字
>12 : 12

impl.explicitInterface = () => 12;
>impl.explicitInterface = () => 12 : () => 数字
>impl.explicitInterface : (this: I) => 数字
>impl : I
>explicitInterface : (this: I) => 数字
>() => 12 : () => 数字
>12 : 12

impl.explicitThis = function () { return this.a; };
>impl.explicitThis = function () { return this.a; } : (this: I) => 数字
>impl.explicitThis : (this: I) => 数字
>impl : I
>explicitThis : (this: I) => 数字
>function () { return this.a; } : (this: I) => 数字
>this.a : 数字
>类型别名 :=> 数字
>this : I
>a : 数字
>类型别名 :=> 数字

// parameter checking
let ok: {y: number, f: (this: { y: number }, x: number) => number} = { y: 12, f: explicitStructural };
>ok : { y: 数字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>y : 数字
>类型别名 :=> 数字
>f : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>{ y: 12, f: explicitStructural } : { y: 数字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>y : 数字
>类型别名 :=> 数字
>12 : 12
>f : (this: { y: 数字; }, x: 数字) => 数字
>explicitStructural : (this: { y: 数字; }, x: 数字) => 数字

let implicitAnyOk: {notSpecified: number, f: (x: number) => number} = { notSpecified: 12, f: implicitThis };
>implicitAnyOk : { notSpecified: 数字; f: (x: 数字) => 数字; }
>notSpecified : 数字
>类型别名 :=> 数字
>f : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>{ notSpecified: 12, f: implicitThis } : { notSpecified: 数字; f: (n: 数字) => 数字; }
>notSpecified : 数字
>类型别名 :=> 数字
>12 : 12
>f : (n: 数字) => 数字
>implicitThis : (n: 数字) => 数字

ok.f(13);
>ok.f(13) : 数字
>类型别名 :=> 数字
>ok.f : (this: { y: 数字; }, x: 数字) => 数字
>ok : { y: 数字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>f : (this: { y: 数字; }, x: 数字) => 数字
>13 : 13

implicitThis(12);
>implicitThis(12) : 数字
>类型别名 :=> 数字
>implicitThis : (n: 数字) => 数字
>12 : 12

implicitAnyOk.f(12);
>implicitAnyOk.f(12) : 数字
>类型别名 :=> 数字
>implicitAnyOk.f : (x: 数字) => 数字
>implicitAnyOk : { notSpecified: 数字; f: (x: 数字) => 数字; }
>f : (x: 数字) => 数字
>12 : 12

let c = new C();
>c : C
>new C() : C
>C : 类为 C

let d = new D();
>d : D
>new D() : D
>D : 类为 D

let ripped = c.explicitC;
>ripped : (this: C, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字

c.explicitC(12);
>c.explicitC(12) : 数字
>类型别名 :=> 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>12 : 12

c.explicitProperty(12);
>c.explicitProperty(12) : 数字
>类型别名 :=> 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>12 : 12

c.explicitThis(12);
>c.explicitThis(12) : 数字
>类型别名 :=> 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>12 : 12

d.explicitC(12);
>d.explicitC(12) : 数字
>类型别名 :=> 数字
>d.explicitC : (this: C, m: 数字) => 数字
>d : D
>explicitC : (this: C, m: 数字) => 数字
>12 : 12

d.explicitProperty(12);
>d.explicitProperty(12) : 数字
>类型别名 :=> 数字
>d.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>d : D
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>12 : 12

d.explicitThis(12);
>d.explicitThis(12) : 数字
>类型别名 :=> 数字
>d.explicitThis : (this: D, m: 数字) => 数字
>d : D
>explicitThis : (this: D, m: 数字) => 数字
>12 : 12

let reconstructed: { 
>reconstructed : { n: 数字; explicitThis(this: C, m: 数字): 数字; explicitC(this: C, m: 数字): 数字; explicitProperty: (this: { n: 数字; }, m: 数字) => 数字; explicitVoid(this: 无值, m: 数字): 数字; }

    n: number,
>n : 数字
>类型别名 :=> 数字

    explicitThis(this: C, m: number): number, // note: this: this is not allowed in an object literal type.
>explicitThis : (this: C, m: 数字) => 数字
>this : C
>C : C
>m : 数字
>类型别名 :=> 数字

    explicitC(this: C, m: number): number,
>explicitC : (this: C, m: 数字) => 数字
>this : C
>C : C
>m : 数字
>类型别名 :=> 数字

    explicitProperty: (this: {n : number}, m: number) => number,
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>this : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

    explicitVoid(this: void, m: number): number,
>explicitVoid : (this: 无值, m: 数字) => 数字
>this : 无值
>类型别名 :=> 无值
>m : 数字
>类型别名 :=> 数字

} = { 
>{     n: 12,    explicitThis: c.explicitThis,    explicitC: c.explicitC,    explicitProperty: c.explicitProperty,    explicitVoid: c.explicitVoid} : { n: 数字; explicitThis: (this: C, m: 数字) => 数字; explicitC: (this: C, m: 数字) => 数字; explicitProperty: (this: { n: 数字; }, m: 数字) => 数字; explicitVoid: (this: 无值, m: 数字) => 数字; }

    n: 12,
>n : 数字
>类型别名 :=> 数字
>12 : 12

    explicitThis: c.explicitThis,
>explicitThis : (this: C, m: 数字) => 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字

    explicitC: c.explicitC,
>explicitC : (this: C, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字

    explicitProperty: c.explicitProperty,
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字

    explicitVoid: c.explicitVoid
>explicitVoid : (this: 无值, m: 数字) => 数字
>c.explicitVoid : (this: 无值, m: 数字) => 数字
>c : C
>explicitVoid : (this: 无值, m: 数字) => 数字

};
reconstructed.explicitThis(10);
>reconstructed.explicitThis(10) : 数字
>类型别名 :=> 数字
>reconstructed.explicitThis : (this: C, m: 数字) => 数字
>reconstructed : { n: 数字; explicitThis(this: C, m: 数字): 数字; explicitC(this: C, m: 数字): 数字; explicitProperty: (this: { n: 数字; }, m: 数字) => 数字; explicitVoid(this: 无值, m: 数字): 数字; }
>explicitThis : (this: C, m: 数字) => 数字
>10 : 10

reconstructed.explicitProperty(11);
>reconstructed.explicitProperty(11) : 数字
>类型别名 :=> 数字
>reconstructed.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>reconstructed : { n: 数字; explicitThis(this: C, m: 数字): 数字; explicitC(this: C, m: 数字): 数字; explicitProperty: (this: { n: 数字; }, m: 数字) => 数字; explicitVoid(this: 无值, m: 数字): 数字; }
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>11 : 11

let explicitVoid = reconstructed.explicitVoid;
>explicitVoid : (this: 无值, m: 数字) => 数字
>reconstructed.explicitVoid : (this: 无值, m: 数字) => 数字
>reconstructed : { n: 数字; explicitThis(this: C, m: 数字): 数字; explicitC(this: C, m: 数字): 数字; explicitProperty: (this: { n: 数字; }, m: 数字) => 数字; explicitVoid(this: 无值, m: 数字): 数字; }
>explicitVoid : (this: 无值, m: 数字) => 数字

explicitVoid(12);
>explicitVoid(12) : 数字
>类型别名 :=> 数字
>explicitVoid : (this: 无值, m: 数字) => 数字
>12 : 12

// assignment checking
let unboundToSpecified: (this: { y: number }, x: number) => number = x => x + this.y; // ok, this:any
>unboundToSpecified : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>x => x + this.y : (this: { y: 数字; }, x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>x + this.y : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
>this.y : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

let specifiedToSpecified: (this: {y: number}, x: number) => number = explicitStructural;
>specifiedToSpecified : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>explicitStructural : (this: { y: 数字; }, x: 数字) => 数字

let anyToSpecified: (this: { y: number }, x: number) => number = function(x: number): number { return x + 12; };
>anyToSpecified : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>function(x: number): number { return x + 12; } : (this: { y: 数字; }, x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>x + 12 : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>12 : 12

let unspecifiedLambda: (x: number) => number = x => x + 12;
>unspecifiedLambda : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>x => x + 12 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>x + 12 : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>12 : 12

let specifiedLambda: (this: void, x: number) => number = x => x + 12;
>specifiedLambda : (this: 无值, x: 数字) => 数字
>this : 无值
>类型别名 :=> 无值
>x : 数字
>类型别名 :=> 数字
>x => x + 12 : (this: 无值, x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>x + 12 : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>12 : 12

let unspecifiedLambdaToSpecified: (this: {y: number}, x: number) => number = unspecifiedLambda;
>unspecifiedLambdaToSpecified : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>unspecifiedLambda : (x: 数字) => 数字

let specifiedLambdaToSpecified: (this: {y: number}, x: number) => number = specifiedLambda;
>specifiedLambdaToSpecified : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>specifiedLambda : (this: 无值, x: 数字) => 数字


let explicitCFunction: (this: C, m: number) => number;
>explicitCFunction : (this: C, m: 数字) => 数字
>this : C
>C : C
>m : 数字
>类型别名 :=> 数字

let explicitPropertyFunction: (this: {n: number}, m: number) => number;
>explicitPropertyFunction : (this: { n: 数字; }, m: 数字) => 数字
>this : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

c.explicitC = explicitCFunction;
>c.explicitC = explicitCFunction : (this: C, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>explicitCFunction : (this: C, m: 数字) => 数字

c.explicitC = function(this: C, m: number) { return this.n + m };
>c.explicitC = function(this: C, m: number) { return this.n + m } : (this: C, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>function(this: C, m: number) { return this.n + m } : (this: C, m: 数字) => 数字
>this : C
>C : C
>m : 数字
>类型别名 :=> 数字
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : C
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

c.explicitProperty = explicitPropertyFunction;
>c.explicitProperty = explicitPropertyFunction : (this: { n: 数字; }, m: 数字) => 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>explicitPropertyFunction : (this: { n: 数字; }, m: 数字) => 数字

c.explicitProperty = function(this: {n: number}, m: number) { return this.n + m };
>c.explicitProperty = function(this: {n: number}, m: number) { return this.n + m } : (this: { n: 数字; }, m: 数字) => 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>function(this: {n: number}, m: number) { return this.n + m } : (this: { n: 数字; }, m: 数字) => 数字
>this : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

c.explicitProperty = reconstructed.explicitProperty;
>c.explicitProperty = reconstructed.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>reconstructed.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>reconstructed : { n: 数字; explicitThis(this: C, m: 数字): 数字; explicitC(this: C, m: 数字): 数字; explicitProperty: (this: { n: 数字; }, m: 数字) => 数字; explicitVoid(this: 无值, m: 数字): 数字; }
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字

// lambdas are assignable to anything
c.explicitC = m => m;
>c.explicitC = m => m : (this: C, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>m => m : (this: C, m: 数字) => 数字
>m : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

c.explicitThis = m => m;
>c.explicitThis = m => m : (this: C, m: 数字) => 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>m => m : (this: C, m: 数字) => 数字
>m : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

c.explicitProperty = m => m;
>c.explicitProperty = m => m : (this: { n: 数字; }, m: 数字) => 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>m => m : (this: { n: 数字; }, m: 数字) => 数字
>m : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

// this inside lambdas refer to outer scope
// the outer-scoped lambda at top-level is still just `any`
c.explicitC = m => m + this.n;
>c.explicitC = m => m + this.n : (this: C, m: 数字) => 任意
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>m => m + this.n : (this: C, m: 数字) => 任意
>m : 数字
>类型别名 :=> 数字
>m + this.n : 任意
>类型别名 :=> 任意
>m : 数字
>类型别名 :=> 数字
>this.n : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

c.explicitThis = m => m + this.n;
>c.explicitThis = m => m + this.n : (this: C, m: 数字) => 任意
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>m => m + this.n : (this: C, m: 数字) => 任意
>m : 数字
>类型别名 :=> 数字
>m + this.n : 任意
>类型别名 :=> 任意
>m : 数字
>类型别名 :=> 数字
>this.n : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

c.explicitProperty = m => m + this.n;
>c.explicitProperty = m => m + this.n : (this: { n: 数字; }, m: 数字) => 任意
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>m => m + this.n : (this: { n: 数字; }, m: 数字) => 任意
>m : 数字
>类型别名 :=> 数字
>m + this.n : 任意
>类型别名 :=> 任意
>m : 数字
>类型别名 :=> 数字
>this.n : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

//NOTE: this=C here, I guess?
c.explicitThis = explicitCFunction;
>c.explicitThis = explicitCFunction : (this: C, m: 数字) => 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>explicitCFunction : (this: C, m: 数字) => 数字

c.explicitThis = function(this: C, m: number) { return this.n + m };
>c.explicitThis = function(this: C, m: number) { return this.n + m } : (this: C, m: 数字) => 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>function(this: C, m: number) { return this.n + m } : (this: C, m: 数字) => 数字
>this : C
>C : C
>m : 数字
>类型别名 :=> 数字
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : C
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

// this:any compatibility
c.explicitC = function(m) { return this.n + m };
>c.explicitC = function(m) { return this.n + m } : (this: C, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>function(m) { return this.n + m } : (this: C, m: 数字) => 数字
>m : 数字
>类型别名 :=> 数字
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : C
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

c.explicitProperty = function(m) { return this.n + m };
>c.explicitProperty = function(m) { return this.n + m } : (this: { n: 数字; }, m: 数字) => 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>function(m) { return this.n + m } : (this: { n: 数字; }, m: 数字) => 数字
>m : 数字
>类型别名 :=> 数字
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

c.explicitThis = function(m) { return this.n + m };
>c.explicitThis = function(m) { return this.n + m } : (this: C, m: 数字) => 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>function(m) { return this.n + m } : (this: C, m: 数字) => 数字
>m : 数字
>类型别名 :=> 数字
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : C
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

// this: contextual typing
c.explicitThis = function(this, m) { return this.n + m };
>c.explicitThis = function(this, m) { return this.n + m } : (this: C, m: 数字) => 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>function(this, m) { return this.n + m } : (this: C, m: 数字) => 数字
>this : C
>m : 数字
>类型别名 :=> 数字
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : C
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

// this: superclass compatibility
c.explicitC = function(this: B, m: number) { return this.n + m };
>c.explicitC = function(this: B, m: number) { return this.n + m } : (this: B, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>function(this: B, m: number) { return this.n + m } : (this: B, m: 数字) => 数字
>this : B
>B : B
>m : 数字
>类型别名 :=> 数字
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : B
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

// this:void compatibility
c.explicitVoid = n => n;
>c.explicitVoid = n => n : (this: 无值, n: 数字) => 数字
>c.explicitVoid : (this: 无值, m: 数字) => 数字
>c : C
>explicitVoid : (this: 无值, m: 数字) => 数字
>n => n : (this: 无值, n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

// class-based assignability
class Base1 {
>Base1 : Base1

    x: number;
>x : 数字
>类型别名 :=> 数字

    public polymorphic(this: this): number { return this.x; }
>polymorphic : (this: 本体) => 数字
>this : 本体
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字

    explicit(this: Base1): number { return this.x; }
>explicit : (this: Base1) => 数字
>this : Base1
>Base1 : Base1
>this.x : 数字
>类型别名 :=> 数字
>this : Base1
>x : 数字
>类型别名 :=> 数字

    static explicitStatic(this: typeof Base1): number { return this.y; }
>explicitStatic : (this: 类为 Base1) => 数字
>this : 类为 Base1
>Base1 : 类为 Base1
>this.y : 数字
>类型别名 :=> 数字
>this : 类为 Base1
>y : 数字
>类型别名 :=> 数字

    static y: number;
>y : 数字
>类型别名 :=> 数字
}
class Derived1 extends Base1 {
>Derived1 : Derived1
>Base1 : Base1

    y: number
>y : 数字
>类型别名 :=> 数字
}
class Base2 {
>Base2 : Base2

    y: number
>y : 数字
>类型别名 :=> 数字

    polymorphic(this: this): number { return this.y; }
>polymorphic : (this: 本体) => 数字
>this : 本体
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字

    explicit(this: Base1): number { return this.x; }
>explicit : (this: Base1) => 数字
>this : Base1
>Base1 : Base1
>this.x : 数字
>类型别名 :=> 数字
>this : Base1
>x : 数字
>类型别名 :=> 数字
}
class Derived2 extends Base2 {
>Derived2 : Derived2
>Base2 : Base2

    x: number
>x : 数字
>类型别名 :=> 数字
}
let b1 = new Base1();
>b1 : Base1
>new Base1() : Base1
>Base1 : 类为 Base1

let b2 = new Base2();
>b2 : Base2
>new Base2() : Base2
>Base2 : 类为 Base2

let d1 = new Derived1();
>d1 : Derived1
>new Derived1() : Derived1
>Derived1 : 类为 Derived1

let d2 = new Derived2();
>d2 : Derived2
>new Derived2() : Derived2
>Derived2 : 类为 Derived2

d2.polymorphic = d1.polymorphic // ok, 'x' and 'y' in { x, y }
>d2.polymorphic = d1.polymorphic : (this: Derived1) => 数字
>d2.polymorphic : (this: Derived2) => 数字
>d2 : Derived2
>polymorphic : (this: Derived2) => 数字
>d1.polymorphic : (this: Derived1) => 数字
>d1 : Derived1
>polymorphic : (this: Derived1) => 数字

d1.polymorphic = d2.polymorphic // ok, 'x' and 'y' in { x, y }
>d1.polymorphic = d2.polymorphic : (this: Derived2) => 数字
>d1.polymorphic : (this: Derived1) => 数字
>d1 : Derived1
>polymorphic : (this: Derived1) => 数字
>d2.polymorphic : (this: Derived2) => 数字
>d2 : Derived2
>polymorphic : (this: Derived2) => 数字

// bivariance-allowed cases
d1.polymorphic = b2.polymorphic // ok, 'y' in D: { x, y }
>d1.polymorphic = b2.polymorphic : (this: Base2) => 数字
>d1.polymorphic : (this: Derived1) => 数字
>d1 : Derived1
>polymorphic : (this: Derived1) => 数字
>b2.polymorphic : (this: Base2) => 数字
>b2 : Base2
>polymorphic : (this: Base2) => 数字

d2.polymorphic = d1.explicit // ok, 'y' in { x, y }
>d2.polymorphic = d1.explicit : (this: Base1) => 数字
>d2.polymorphic : (this: Derived2) => 数字
>d2 : Derived2
>polymorphic : (this: Derived2) => 数字
>d1.explicit : (this: Base1) => 数字
>d1 : Derived1
>explicit : (this: Base1) => 数字

b1.polymorphic = d2.polymorphic // ok, 'x' and 'y' not in Base1: { x }
>b1.polymorphic = d2.polymorphic : (this: Derived2) => 数字
>b1.polymorphic : (this: Base1) => 数字
>b1 : Base1
>polymorphic : (this: Base1) => 数字
>d2.polymorphic : (this: Derived2) => 数字
>d2 : Derived2
>polymorphic : (this: Derived2) => 数字

b1.explicit = d2.polymorphic // ok, 'x' and 'y' not in Base1: { x }
>b1.explicit = d2.polymorphic : (this: Derived2) => 数字
>b1.explicit : (this: Base1) => 数字
>b1 : Base1
>explicit : (this: Base1) => 数字
>d2.polymorphic : (this: Derived2) => 数字
>d2 : Derived2
>polymorphic : (this: Derived2) => 数字

////// use this-type for construction with new ////
function InterfaceThis(this: I) {
>InterfaceThis : (this: I) => 无值
>this : I
>I : I

    this.a = 12;
>this.a = 12 : 12
>this.a : 数字
>类型别名 :=> 数字
>this : I
>a : 数字
>类型别名 :=> 数字
>12 : 12
}
function LiteralTypeThis(this: {x: string}) {
>LiteralTypeThis : (this: { x: 文字; }) => 无值
>this : { x: 文字; }
>x : 文字
>类型别名 :=> 文字

    this.x = "ok";
>this.x = "ok" : "ok"
>this.x : 文字
>类型别名 :=> 文字
>this : { x: 文字; }
>x : 文字
>类型别名 :=> 文字
>"ok" : "ok"
}
function AnyThis(this: any) {
>AnyThis : (this: 任意) => 无值
>this : 任意
>类型别名 :=> 任意

    this.x = "ok";
>this.x = "ok" : "ok"
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>"ok" : "ok"
}
let interfaceThis = new InterfaceThis();
>interfaceThis : 任意
>类型别名 :=> 任意
>new InterfaceThis() : 任意
>类型别名 :=> 任意
>InterfaceThis : (this: I) => 无值

let literalTypeThis = new LiteralTypeThis();
>literalTypeThis : 任意
>类型别名 :=> 任意
>new LiteralTypeThis() : 任意
>类型别名 :=> 任意
>LiteralTypeThis : (this: { x: 文字; }) => 无值

let anyThis = new AnyThis();
>anyThis : 任意
>类型别名 :=> 任意
>new AnyThis() : 任意
>类型别名 :=> 任意
>AnyThis : (this: 任意) => 无值

//// type parameter inference ////
declare var f: { 
>f : { (this: 无值, x: 数字): 数字; call<U>(this: (...argArray: 任意[]) => U, ...argArray: 任意[]): U; }

    (this: void, x: number): number, 
>this : 无值
>类型别名 :=> 无值
>x : 数字
>类型别名 :=> 数字

    call<U>(this: (...argArray: any[]) => U, ...argArray: any[]): U;
>call : <U>(this: (...argArray: 任意[]) => U, ...argArray: 任意[]) => U
>U : U
>this : (...argArray: 任意[]) => U
>argArray : 任意[]
>U : U
>argArray : 任意[]
>U : U

};
let n: number = f.call(12);
>n : 数字
>类型别名 :=> 数字
>f.call(12) : 数字
>类型别名 :=> 数字
>f.call : <U>(this: (...argArray: 任意[]) => U, ...argArray: 任意[]) => U
>f : { (this: 无值, x: 数字): 数字; call<U>(this: (...argArray: 任意[]) => U, ...argArray: 任意[]): U; }
>call : <U>(this: (...argArray: 任意[]) => U, ...argArray: 任意[]) => U
>12 : 12

function missingTypeIsImplicitAny(this, a: number) { return this.anything + a; } 
>missingTypeIsImplicitAny : (this: 任意, a: 数字) => 任意
>this : 任意
>类型别名 :=> 任意
>a : 数字
>类型别名 :=> 数字
>this.anything + a : 任意
>类型别名 :=> 任意
>this.anything : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>anything : 任意
>类型别名 :=> 任意
>a : 数字
>类型别名 :=> 数字

