=== tests/cases/conformance/internalModules/moduleDeclarations/nonInstantiatedModule.ts ===
module M {
>M : 类为 M

    export interface Point { x: number; y: number }
>Point : Point
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    export var a = 1;
>a : 数字
>类型别名 :=> 数字
>1 : 1
}

// primary expression
var m : typeof M;
>m : 类为 M
>M : 类为 M

var m = M;
>m : 类为 M
>M : 类为 M

var a1: number;
>a1 : 数字
>类型别名 :=> 数字

var a1 = M.a;
>a1 : 数字
>类型别名 :=> 数字
>M.a : 数字
>类型别名 :=> 数字
>M : 类为 M
>a : 数字
>类型别名 :=> 数字

var a2: number;
>a2 : 数字
>类型别名 :=> 数字

var a2 = m.a;
>a2 : 数字
>类型别名 :=> 数字
>m.a : 数字
>类型别名 :=> 数字
>m : 类为 M
>a : 数字
>类型别名 :=> 数字

module M2 {
>M2 : 类为 M2

    export module Point {
>Point : 类为 Point

        export function Origin(): Point {
>Origin : () => Point
>Point : Point

            return { x: 0, y: 0 };
>{ x: 0, y: 0 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0
        }
    }

    export interface Point {
>Point : Point

        x: number;
>x : 数字
>类型别名 :=> 数字

        y: number;
>y : 数字
>类型别名 :=> 数字
    }
}

var p: { x: number; y: number; };
>p : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

var p: M2.Point;
>p : { x: 数字; y: 数字; }
>M2 : 任意
>类型别名 :=> 任意
>Point : M2.Point

var p2: { Origin() : { x: number; y: number; } };
>p2 : { Origin(): { x: 数字; y: 数字; }; }
>Origin : () => { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

var p2: typeof M2.Point;
>p2 : { Origin(): { x: 数字; y: 数字; }; }
>M2.Point : 类为 M2.Point
>M2 : 类为 M2
>Point : 类为 M2.Point

module M3 {
>M3 : 类为 M3

    export module Utils {
>Utils : 类为 Utils

        export interface Point {
>Point : Point

            x: number; y: number;
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
        }
    }

    export class Utils {
>Utils : Utils

        name: string;
>name : 文字
>类型别名 :=> 文字
    }
}
