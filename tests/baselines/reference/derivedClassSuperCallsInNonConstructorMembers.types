=== tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperCallsInNonConstructorMembers.ts ===
// error to use super calls outside a constructor

class Base {
>Base : Base

    x: string;
>x : 文字
>类型别名 :=> 文字
}

class Derived extends Base {
>Derived : Derived
>Base : Base

    a: super();
>a : 任意
>类型别名 :=> 任意
>super : No type information available!
>() : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

    b() {
>b : () => 无值

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }
    get C() {
>C : 数字
>类型别名 :=> 数字

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意

        return 1;
>1 : 1
    }
    set C(v) {
>C : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }

    static a: super();
>a : 任意
>类型别名 :=> 任意
>super : No type information available!
>() : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

    static b() {
>b : () => 无值

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }
    static get C() {
>C : 数字
>类型别名 :=> 数字

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意

        return 1;
>1 : 1
    }
    static set C(v) {
>C : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }
}
