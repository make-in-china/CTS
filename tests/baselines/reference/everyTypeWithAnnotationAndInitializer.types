=== tests/cases/conformance/statements/VariableStatements/everyTypeWithAnnotationAndInitializer.ts ===
interface I {
>I : I

    id: number;
>id : 数字
>类型别名 :=> 数字
}

class C implements I {
>C : C
>I : I

    id: number;
>id : 数字
>类型别名 :=> 数字
}

class D<T>{
>D : D<T>
>T : T

    source: T;
>source : T
>T : T

    recurse: D<T>;
>recurse : D<T>
>D : D<T>
>T : T

    wrapped: D<D<T>>
>wrapped : D<D<T>>
>D : D<T>
>D : D<T>
>T : T
}

function F(x: string): number { return 42; }
>F : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>42 : 42

module M {
>M : 类为 M

    export class A {
>A : A

        name: string;
>name : 文字
>类型别名 :=> 文字
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : (radix?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
}

var aNumber: number = 9.9;
>aNumber : 数字
>类型别名 :=> 数字
>9.9 : 9.9

var aString: string = 'this is a string';
>aString : 文字
>类型别名 :=> 文字
>'this is a string' : "this is a string"

var aDate: Date = new Date(12);
>aDate : Date
>Date : Date
>new Date(12) : Date
>Date : DateConstructor
>12 : 12

var anObject: Object = new Object();
>anObject : Object
>Object : Object
>new Object() : Object
>Object : ObjectConstructor

var anAny: any = null;
>anAny : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

var aSecondAny: any = undefined;
>aSecondAny : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

var aVoid: void = undefined;
>aVoid : 无值
>类型别名 :=> 无值
>undefined : 未定
>类型别名 :=> 未定

var anInterface: I = new C();
>anInterface : I
>I : I
>new C() : C
>C : 类为 C

var aClass: C = new C();
>aClass : C
>C : C
>new C() : C
>C : 类为 C

var aGenericClass: D<string> = new D<string>();
>aGenericClass : D<文字>
>D : D<T>
>new D<string>() : D<文字>
>D : 类为 D

var anObjectLiteral: I = { id: 12 };
>anObjectLiteral : I
>I : I
>{ id: 12 } : { id: 数字; }
>id : 数字
>类型别名 :=> 数字
>12 : 12

var anOtherObjectLiteral: { id: number } = new C();
>anOtherObjectLiteral : { id: 数字; }
>id : 数字
>类型别名 :=> 数字
>new C() : C
>C : 类为 C

var aFunction: typeof F = F;
>aFunction : (x: 文字) => 数字
>F : (x: 文字) => 数字
>F : (x: 文字) => 数字

var anOtherFunction: (x: string) => number = F;
>anOtherFunction : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>F : (x: 文字) => 数字

var aLambda: typeof F = (x) => 2;
>aLambda : (x: 文字) => 数字
>F : (x: 文字) => 数字
>(x) => 2 : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>2 : 2

var aModule: typeof M = M;
>aModule : 类为 M
>M : 类为 M
>M : 类为 M

var aClassInModule: M.A = new M.A();
>aClassInModule : M.A
>M : 任意
>类型别名 :=> 任意
>A : M.A
>new M.A() : M.A
>M.A : 类为 M.A
>M : 类为 M
>A : 类为 M.A

var aFunctionInModule: typeof M.F2 = (x) => 'this is a string';
>aFunctionInModule : (x: 数字) => 文字
>M.F2 : (x: 数字) => 文字
>M : 类为 M
>F2 : (x: 数字) => 文字
>(x) => 'this is a string' : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>'this is a string' : "this is a string"


