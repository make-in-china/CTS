=== tests/cases/conformance/es6/destructuring/destructuringParameterProperties3.ts ===
class C1<T, U, V> {
>C1 : C1<T, U, V>
>T : T
>U : U
>V : V

    constructor(private k: T, private [a, b, c]: [T,U,V]) {
>k : T
>T : T
>a : T
>b : U
>c : V
>T : T
>U : U
>V : V

        if ((b === undefined && c === undefined) || (this.b === undefined && this.c === undefined)) {
>(b === undefined && c === undefined) || (this.b === undefined && this.c === undefined) : 真假
>类型别名 :=> 真假
>(b === undefined && c === undefined) : 真假
>类型别名 :=> 真假
>b === undefined && c === undefined : 真假
>类型别名 :=> 真假
>b === undefined : 真假
>类型别名 :=> 真假
>b : U
>undefined : 未定
>类型别名 :=> 未定
>c === undefined : 真假
>类型别名 :=> 真假
>c : V
>undefined : 未定
>类型别名 :=> 未定
>(this.b === undefined && this.c === undefined) : 真假
>类型别名 :=> 真假
>this.b === undefined && this.c === undefined : 真假
>类型别名 :=> 真假
>this.b === undefined : 真假
>类型别名 :=> 真假
>this.b : 任意
>类型别名 :=> 任意
>this : 本体
>b : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>this.c === undefined : 真假
>类型别名 :=> 真假
>this.c : 任意
>类型别名 :=> 任意
>this : 本体
>c : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

            this.a = a || k;
>this.a = a || k : T
>this.a : 任意
>类型别名 :=> 任意
>this : 本体
>a : 任意
>类型别名 :=> 任意
>a || k : T
>a : T
>k : T
        }
    }

    public getA() {
>getA : () => 任意

        return this.a
>this.a : 任意
>类型别名 :=> 任意
>this : 本体
>a : 任意
>类型别名 :=> 任意
    }

    public getB() {
>getB : () => 任意

        return this.b
>this.b : 任意
>类型别名 :=> 任意
>this : 本体
>b : 任意
>类型别名 :=> 任意
    }

    public getC() {
>getC : () => 任意

        return this.c;
>this.c : 任意
>类型别名 :=> 任意
>this : 本体
>c : 任意
>类型别名 :=> 任意
    }
}

var x = new C1(undefined, [0, true, ""]);
>x : C1<数字, 真假, 文字>
>new C1(undefined, [0, true, ""]) : C1<数字, 真假, 文字>
>C1 : 类为 C1
>undefined : 未定
>类型别名 :=> 未定
>[0, true, ""] : [数字, 为真, 文字]
>0 : 0
>true : 为真
>类型别名 :=> 为真
>"" : ""

var [x_a, x_b, x_c] = [x.getA(), x.getB(), x.getC()];
>x_a : 任意
>类型别名 :=> 任意
>x_b : 任意
>类型别名 :=> 任意
>x_c : 任意
>类型别名 :=> 任意
>[x.getA(), x.getB(), x.getC()] : [任意, 任意, 任意]
>x.getA() : 任意
>类型别名 :=> 任意
>x.getA : () => 任意
>x : C1<数字, 真假, 文字>
>getA : () => 任意
>x.getB() : 任意
>类型别名 :=> 任意
>x.getB : () => 任意
>x : C1<数字, 真假, 文字>
>getB : () => 任意
>x.getC() : 任意
>类型别名 :=> 任意
>x.getC : () => 任意
>x : C1<数字, 真假, 文字>
>getC : () => 任意

var y = new C1(10, [0, true, true]);
>y : C1<数字, 真假, 真假>
>new C1(10, [0, true, true]) : C1<数字, 真假, 真假>
>C1 : 类为 C1
>10 : 10
>[0, true, true] : [数字, 为真, 为真]
>0 : 0
>true : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真

var [y_a, y_b, y_c] = [y.getA(), y.getB(), y.getC()];
>y_a : 任意
>类型别名 :=> 任意
>y_b : 任意
>类型别名 :=> 任意
>y_c : 任意
>类型别名 :=> 任意
>[y.getA(), y.getB(), y.getC()] : [任意, 任意, 任意]
>y.getA() : 任意
>类型别名 :=> 任意
>y.getA : () => 任意
>y : C1<数字, 真假, 真假>
>getA : () => 任意
>y.getB() : 任意
>类型别名 :=> 任意
>y.getB : () => 任意
>y : C1<数字, 真假, 真假>
>getB : () => 任意
>y.getC() : 任意
>类型别名 :=> 任意
>y.getC : () => 任意
>y : C1<数字, 真假, 真假>
>getC : () => 任意

var z = new C1(10, [undefined, "", ""]);
>z : C1<10, 文字, 文字>
>new C1(10, [undefined, "", ""]) : C1<10, 文字, 文字>
>C1 : 类为 C1
>10 : 10
>[undefined, "", ""] : [未定, 文字, 文字]
>undefined : 未定
>类型别名 :=> 未定
>"" : ""
>"" : ""

var [z_a, z_b, z_c] = [z.getA(), z.getB(), z.getC()];
>z_a : 任意
>类型别名 :=> 任意
>z_b : 任意
>类型别名 :=> 任意
>z_c : 任意
>类型别名 :=> 任意
>[z.getA(), z.getB(), z.getC()] : [任意, 任意, 任意]
>z.getA() : 任意
>类型别名 :=> 任意
>z.getA : () => 任意
>z : C1<10, 文字, 文字>
>getA : () => 任意
>z.getB() : 任意
>类型别名 :=> 任意
>z.getB : () => 任意
>z : C1<10, 文字, 文字>
>getB : () => 任意
>z.getC() : 任意
>类型别名 :=> 任意
>z.getC : () => 任意
>z : C1<10, 文字, 文字>
>getC : () => 任意

var w = new C1(10, [undefined, undefined, undefined]);
>w : C1<10, 任意, 任意>
>new C1(10, [undefined, undefined, undefined]) : C1<10, 任意, 任意>
>C1 : 类为 C1
>10 : 10
>[undefined, undefined, undefined] : [未定, 未定, 未定]
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

var [z_a, z_b, z_c] = [z.getA(), z.getB(), z.getC()];
>z_a : 任意
>类型别名 :=> 任意
>z_b : 任意
>类型别名 :=> 任意
>z_c : 任意
>类型别名 :=> 任意
>[z.getA(), z.getB(), z.getC()] : [任意, 任意, 任意]
>z.getA() : 任意
>类型别名 :=> 任意
>z.getA : () => 任意
>z : C1<10, 文字, 文字>
>getA : () => 任意
>z.getB() : 任意
>类型别名 :=> 任意
>z.getB : () => 任意
>z : C1<10, 文字, 文字>
>getB : () => 任意
>z.getC() : 任意
>类型别名 :=> 任意
>z.getC : () => 任意
>z : C1<10, 文字, 文字>
>getC : () => 任意

