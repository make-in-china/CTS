=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignatures.ts ===
module CallSignature {
>CallSignature : 类为 CallSignature

    declare function foo1(cb: (x: number) => void): typeof cb;
>foo1 : { (cb: (x: 数字) => 无值): (x: 数字) => 无值; (cb: 任意): 任意; }
>cb : (x: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>cb : (x: 数字) => 无值

    declare function foo1(cb: any): any;
>foo1 : { (cb: (x: 数字) => 无值): (x: 数字) => 无值; (cb: 任意): 任意; }
>cb : 任意
>类型别名 :=> 任意

    var r = foo1((x: number) => 1); // ok because base returns void
>r : (x: 数字) => 无值
>foo1((x: number) => 1) : (x: 数字) => 无值
>foo1 : { (cb: (x: 数字) => 无值): (x: 数字) => 无值; (cb: 任意): 任意; }
>(x: number) => 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

    var r2 = foo1(<T>(x: T) => ''); // ok because base returns void
>r2 : (x: 数字) => 无值
>foo1(<T>(x: T) => '') : (x: 数字) => 无值
>foo1 : { (cb: (x: 数字) => 无值): (x: 数字) => 无值; (cb: 任意): 任意; }
><T>(x: T) => '' : <T>(x: T) => 文字
>T : T
>x : T
>T : T
>'' : ""

    declare function foo2(cb: (x: number, y: number) => void): typeof cb;
>foo2 : { (cb: (x: 数字, y: 数字) => 无值): (x: 数字, y: 数字) => 无值; (cb: 任意): 任意; }
>cb : (x: 数字, y: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>cb : (x: 数字, y: 数字) => 无值

    declare function foo2(cb: any): any;
>foo2 : { (cb: (x: 数字, y: 数字) => 无值): (x: 数字, y: 数字) => 无值; (cb: 任意): 任意; }
>cb : 任意
>类型别名 :=> 任意

    var r3 = foo2((x: number, y: number) => 1); // ok because base returns void
>r3 : (x: 数字, y: 数字) => 无值
>foo2((x: number, y: number) => 1) : (x: 数字, y: 数字) => 无值
>foo2 : { (cb: (x: 数字, y: 数字) => 无值): (x: 数字, y: 数字) => 无值; (cb: 任意): 任意; }
>(x: number, y: number) => 1 : (x: 数字, y: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

    var r4 = foo2(<T>(x: T) => ''); // ok because base returns void
>r4 : (x: 数字, y: 数字) => 无值
>foo2(<T>(x: T) => '') : (x: 数字, y: 数字) => 无值
>foo2 : { (cb: (x: 数字, y: 数字) => 无值): (x: 数字, y: 数字) => 无值; (cb: 任意): 任意; }
><T>(x: T) => '' : <T>(x: T) => 文字
>T : T
>x : T
>T : T
>'' : ""
}
