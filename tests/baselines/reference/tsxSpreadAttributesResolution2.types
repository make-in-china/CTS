=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : typeof React

interface PoisonedProp {
>PoisonedProp : PoisonedProp

    x: string;
>x : string
>类型别名 :=> 文字

    y: "2";
>y : "2"
}

class Poisoned extends React.Component<PoisonedProp, {}> {
>Poisoned : Poisoned
>React.Component : React.Component<PoisonedProp, {}>
>React : typeof React
>Component : typeof React.Component
>PoisonedProp : PoisonedProp

    render() {
>render : () => JSX.Element

        return <div>Hello</div>;
><div>Hello</div> : JSX.Element
>div : any
>类型别名 :=> 任意
>div : any
>类型别名 :=> 任意
    }
}

const obj = {};
>obj : {}
>{} : {}

// Error
let p = <Poisoned {...obj} />;
>p : JSX.Element
><Poisoned {...obj} /> : JSX.Element
>Poisoned : typeof Poisoned
>obj : {}

let y = <Poisoned />;
>y : JSX.Element
><Poisoned /> : JSX.Element
>Poisoned : typeof Poisoned

let z = <Poisoned x y/>;
>z : JSX.Element
><Poisoned x y/> : JSX.Element
>Poisoned : typeof Poisoned
>x : true
>类型别名 :=> 为真
>y : true
>类型别名 :=> 为真

let w = <Poisoned {...{x: 5, y: "2"}}/>;
>w : JSX.Element
><Poisoned {...{x: 5, y: "2"}}/> : JSX.Element
>Poisoned : typeof Poisoned
>{x: 5, y: "2"} : { x: number; y: "2"; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : string
>类型别名 :=> 文字
>"2" : "2"

let w1 = <Poisoned {...{x: 5, y: "2"}} X="hi" />;
>w1 : JSX.Element
><Poisoned {...{x: 5, y: "2"}} X="hi" /> : JSX.Element
>Poisoned : typeof Poisoned
>{x: 5, y: "2"} : { x: number; y: "2"; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : string
>类型别名 :=> 文字
>"2" : "2"
>X : string
>类型别名 :=> 文字

