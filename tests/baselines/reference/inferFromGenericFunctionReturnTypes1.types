=== tests/cases/compiler/inferFromGenericFunctionReturnTypes1.ts ===
// Repro from #15680

// This is a contrived class. We could do the same thing with Observables, etc.
class SetOf<A> {
>SetOf : SetOf<A>
>A : A

  _store: A[];
>_store : A[]
>A : A

  add(a: A) {
>add : (a: A) => 无值
>a : A
>A : A

    this._store.push(a);
>this._store.push(a) : 数字
>类型别名 :=> 数字
>this._store.push : (...items: A[]) => 数字
>this._store : A[]
>this : 本体
>_store : A[]
>push : (...items: A[]) => 数字
>a : A
  }

  transform<B>(transformer: (a: SetOf<A>) => SetOf<B>): SetOf<B> {
>transform : <B>(transformer: (a: SetOf<A>) => SetOf<B>) => SetOf<B>
>B : B
>transformer : (a: SetOf<A>) => SetOf<B>
>a : SetOf<A>
>SetOf : SetOf<A>
>A : A
>SetOf : SetOf<A>
>B : B
>SetOf : SetOf<A>
>B : B

    return transformer(this);
>transformer(this) : SetOf<B>
>transformer : (a: SetOf<A>) => SetOf<B>
>this : 本体
  }

  forEach(fn: (a: A, index: number) => void) {
>forEach : (fn: (a: A, index: 数字) => 无值) => 无值
>fn : (a: A, index: 数字) => 无值
>a : A
>A : A
>index : 数字
>类型别名 :=> 数字

      this._store.forEach((a, i) => fn(a, i));
>this._store.forEach((a, i) => fn(a, i)) : 无值
>类型别名 :=> 无值
>this._store.forEach : (callbackfn: (value: A, index: 数字, array: A[]) => 无值, thisArg?: 任意) => 无值
>this._store : A[]
>this : 本体
>_store : A[]
>forEach : (callbackfn: (value: A, index: 数字, array: A[]) => 无值, thisArg?: 任意) => 无值
>(a, i) => fn(a, i) : (a: A, i: 数字) => 无值
>a : A
>i : 数字
>类型别名 :=> 数字
>fn(a, i) : 无值
>类型别名 :=> 无值
>fn : (a: A, index: 数字) => 无值
>a : A
>i : 数字
>类型别名 :=> 数字
  }
}

function compose<A, B, C, D, E>(
>compose : <A, B, C, D, E>(fnA: (a: SetOf<A>) => SetOf<B>, fnB: (b: SetOf<B>) => SetOf<C>, fnC: (c: SetOf<C>) => SetOf<D>, fnD: (c: SetOf<D>) => SetOf<E>) => (x: SetOf<A>) => SetOf<E>
>A : A
>B : B
>C : C
>D : D
>E : E

  fnA: (a: SetOf<A>) => SetOf<B>, 
>fnA : (a: SetOf<A>) => SetOf<B>
>a : SetOf<A>
>SetOf : SetOf<A>
>A : A
>SetOf : SetOf<A>
>B : B

  fnB: (b: SetOf<B>) => SetOf<C>, 
>fnB : (b: SetOf<B>) => SetOf<C>
>b : SetOf<B>
>SetOf : SetOf<A>
>B : B
>SetOf : SetOf<A>
>C : C

  fnC: (c: SetOf<C>) => SetOf<D>,
>fnC : (c: SetOf<C>) => SetOf<D>
>c : SetOf<C>
>SetOf : SetOf<A>
>C : C
>SetOf : SetOf<A>
>D : D

  fnD: (c: SetOf<D>) => SetOf<E>,
>fnD : (c: SetOf<D>) => SetOf<E>
>c : SetOf<D>
>SetOf : SetOf<A>
>D : D
>SetOf : SetOf<A>
>E : E

):(x: SetOf<A>) => SetOf<E>;
>x : SetOf<A>
>SetOf : SetOf<A>
>A : A
>SetOf : SetOf<A>
>E : E

/* ... etc ... */
function compose<T>(...fns: ((x: T) => T)[]): (x: T) => T {
>compose : <A, B, C, D, E>(fnA: (a: SetOf<A>) => SetOf<B>, fnB: (b: SetOf<B>) => SetOf<C>, fnC: (c: SetOf<C>) => SetOf<D>, fnD: (c: SetOf<D>) => SetOf<E>) => (x: SetOf<A>) => SetOf<E>
>T : T
>fns : ((x: T) => T)[]
>x : T
>T : T
>T : T
>x : T
>T : T
>T : T

  return (x: T) => fns.reduce((prev, fn) => fn(prev), x);
>(x: T) => fns.reduce((prev, fn) => fn(prev), x) : (x: T) => T
>x : T
>T : T
>fns.reduce((prev, fn) => fn(prev), x) : T
>fns.reduce : { (callbackfn: (previousValue: (x: T) => T, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => (x: T) => T): (x: T) => T; (callbackfn: (previousValue: (x: T) => T, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => (x: T) => T, initialValue: (x: T) => T): (x: T) => T; <U>(callbackfn: (previousValue: U, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => U, initialValue: U): U; }
>fns : ((x: T) => T)[]
>reduce : { (callbackfn: (previousValue: (x: T) => T, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => (x: T) => T): (x: T) => T; (callbackfn: (previousValue: (x: T) => T, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => (x: T) => T, initialValue: (x: T) => T): (x: T) => T; <U>(callbackfn: (previousValue: U, currentValue: (x: T) => T, currentIndex: 数字, array: ((x: T) => T)[]) => U, initialValue: U): U; }
>(prev, fn) => fn(prev) : (prev: T, fn: (x: T) => T) => T
>prev : T
>fn : (x: T) => T
>fn(prev) : T
>fn : (x: T) => T
>prev : T
>x : T
}

function map<A, B>(fn: (a: A) => B): (s: SetOf<A>) => SetOf<B> {
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>A : A
>B : B
>fn : (a: A) => B
>a : A
>A : A
>B : B
>s : SetOf<A>
>SetOf : SetOf<A>
>A : A
>SetOf : SetOf<A>
>B : B

  return (a: SetOf<A>) => {
>(a: SetOf<A>) => {    const b: SetOf<B> = new SetOf();    a.forEach(x => b.add(fn(x)));    return b;  } : (a: SetOf<A>) => SetOf<B>
>a : SetOf<A>
>SetOf : SetOf<A>
>A : A

    const b: SetOf<B> = new SetOf();
>b : SetOf<B>
>SetOf : SetOf<A>
>B : B
>new SetOf() : SetOf<B>
>SetOf : 类为 SetOf

    a.forEach(x => b.add(fn(x)));
>a.forEach(x => b.add(fn(x))) : 无值
>类型别名 :=> 无值
>a.forEach : (fn: (a: A, index: 数字) => 无值) => 无值
>a : SetOf<A>
>forEach : (fn: (a: A, index: 数字) => 无值) => 无值
>x => b.add(fn(x)) : (x: A) => 无值
>x : A
>b.add(fn(x)) : 无值
>类型别名 :=> 无值
>b.add : (a: B) => 无值
>b : SetOf<B>
>add : (a: B) => 无值
>fn(x) : B
>fn : (a: A) => B
>x : A

    return b;
>b : SetOf<B>
  }
}

function filter<A>(predicate: (a: A) => boolean): (s: SetOf<A>) => SetOf<A> {
>filter : <A>(predicate: (a: A) => 真假) => (s: SetOf<A>) => SetOf<A>
>A : A
>predicate : (a: A) => 真假
>a : A
>A : A
>s : SetOf<A>
>SetOf : SetOf<A>
>A : A
>SetOf : SetOf<A>
>A : A

  return (a: SetOf<A>) => {
>(a: SetOf<A>) => {    const result = new SetOf<A>();    a.forEach(x => {      if (predicate(x)) result.add(x);    });   return result;  } : (a: SetOf<A>) => SetOf<A>
>a : SetOf<A>
>SetOf : SetOf<A>
>A : A

    const result = new SetOf<A>();
>result : SetOf<A>
>new SetOf<A>() : SetOf<A>
>SetOf : 类为 SetOf
>A : A

    a.forEach(x => {
>a.forEach(x => {      if (predicate(x)) result.add(x);    }) : 无值
>类型别名 :=> 无值
>a.forEach : (fn: (a: A, index: 数字) => 无值) => 无值
>a : SetOf<A>
>forEach : (fn: (a: A, index: 数字) => 无值) => 无值
>x => {      if (predicate(x)) result.add(x);    } : (x: A) => 无值
>x : A

      if (predicate(x)) result.add(x);
>predicate(x) : 真假
>类型别名 :=> 真假
>predicate : (a: A) => 真假
>x : A
>result.add(x) : 无值
>类型别名 :=> 无值
>result.add : (a: A) => 无值
>result : SetOf<A>
>add : (a: A) => 无值
>x : A

    });
   return result;
>result : SetOf<A>
  }
}

const testSet = new SetOf<number>();
>testSet : SetOf<数字>
>new SetOf<number>() : SetOf<数字>
>SetOf : 类为 SetOf

testSet.add(1);
>testSet.add(1) : 无值
>类型别名 :=> 无值
>testSet.add : (a: 数字) => 无值
>testSet : SetOf<数字>
>add : (a: 数字) => 无值
>1 : 1

testSet.add(2);
>testSet.add(2) : 无值
>类型别名 :=> 无值
>testSet.add : (a: 数字) => 无值
>testSet : SetOf<数字>
>add : (a: 数字) => 无值
>2 : 2

testSet.add(3);
>testSet.add(3) : 无值
>类型别名 :=> 无值
>testSet.add : (a: 数字) => 无值
>testSet : SetOf<数字>
>add : (a: 数字) => 无值
>3 : 3

testSet.transform(
>testSet.transform(  compose(    filter(x => x % 1 === 0),    map(x => x + x),    map(x => x + '!!!'),    map(x => x.toUpperCase())  )) : SetOf<文字>
>testSet.transform : <B>(transformer: (a: SetOf<数字>) => SetOf<B>) => SetOf<B>
>testSet : SetOf<数字>
>transform : <B>(transformer: (a: SetOf<数字>) => SetOf<B>) => SetOf<B>

  compose(
>compose(    filter(x => x % 1 === 0),    map(x => x + x),    map(x => x + '!!!'),    map(x => x.toUpperCase())  ) : (x: SetOf<数字>) => SetOf<文字>
>compose : <A, B, C, D, E>(fnA: (a: SetOf<A>) => SetOf<B>, fnB: (b: SetOf<B>) => SetOf<C>, fnC: (c: SetOf<C>) => SetOf<D>, fnD: (c: SetOf<D>) => SetOf<E>) => (x: SetOf<A>) => SetOf<E>

    filter(x => x % 1 === 0),
>filter(x => x % 1 === 0) : (s: SetOf<数字>) => SetOf<数字>
>filter : <A>(predicate: (a: A) => 真假) => (s: SetOf<A>) => SetOf<A>
>x => x % 1 === 0 : (x: 数字) => 真假
>x : 数字
>类型别名 :=> 数字
>x % 1 === 0 : 真假
>类型别名 :=> 真假
>x % 1 : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1
>0 : 0

    map(x => x + x),
>map(x => x + x) : (s: SetOf<数字>) => SetOf<数字>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => x + x : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>x + x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

    map(x => x + '!!!'),
>map(x => x + '!!!') : (s: SetOf<数字>) => SetOf<文字>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => x + '!!!' : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>x + '!!!' : 文字
>类型别名 :=> 文字
>x : 数字
>类型别名 :=> 数字
>'!!!' : "!!!"

    map(x => x.toUpperCase())
>map(x => x.toUpperCase()) : (s: SetOf<文字>) => SetOf<文字>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => x.toUpperCase() : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>x.toUpperCase() : 文字
>类型别名 :=> 文字
>x.toUpperCase : () => 文字
>x : 文字
>类型别名 :=> 文字
>toUpperCase : () => 文字

  )
)

testSet.transform(
>testSet.transform(  compose(    filter(x => x % 1 === 0),    map(x => x + x),    map(x => 123),  // Whoops a bug    map(x => x.toUpperCase()) // causes an error!  )) : SetOf<任意>
>testSet.transform : <B>(transformer: (a: SetOf<数字>) => SetOf<B>) => SetOf<B>
>testSet : SetOf<数字>
>transform : <B>(transformer: (a: SetOf<数字>) => SetOf<B>) => SetOf<B>

  compose(
>compose(    filter(x => x % 1 === 0),    map(x => x + x),    map(x => 123),  // Whoops a bug    map(x => x.toUpperCase()) // causes an error!  ) : (x: SetOf<数字>) => SetOf<任意>
>compose : <A, B, C, D, E>(fnA: (a: SetOf<A>) => SetOf<B>, fnB: (b: SetOf<B>) => SetOf<C>, fnC: (c: SetOf<C>) => SetOf<D>, fnD: (c: SetOf<D>) => SetOf<E>) => (x: SetOf<A>) => SetOf<E>

    filter(x => x % 1 === 0),
>filter(x => x % 1 === 0) : (s: SetOf<数字>) => SetOf<数字>
>filter : <A>(predicate: (a: A) => 真假) => (s: SetOf<A>) => SetOf<A>
>x => x % 1 === 0 : (x: 数字) => 真假
>x : 数字
>类型别名 :=> 数字
>x % 1 === 0 : 真假
>类型别名 :=> 真假
>x % 1 : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1
>0 : 0

    map(x => x + x),
>map(x => x + x) : (s: SetOf<数字>) => SetOf<数字>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => x + x : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>x + x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

    map(x => 123),  // Whoops a bug
>map(x => 123) : (s: SetOf<数字>) => SetOf<数字>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => 123 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>123 : 123

    map(x => x.toUpperCase()) // causes an error!
>map(x => x.toUpperCase()) : (s: SetOf<数字>) => SetOf<任意>
>map : <A, B>(fn: (a: A) => B) => (s: SetOf<A>) => SetOf<B>
>x => x.toUpperCase() : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>x.toUpperCase() : 任意
>类型别名 :=> 任意
>x.toUpperCase : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
>toUpperCase : 任意
>类型别名 :=> 任意

  )
)

