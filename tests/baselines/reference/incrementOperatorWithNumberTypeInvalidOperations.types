=== tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithNumberTypeInvalidOperations.ts ===
// ++ operator on number type
var NUMBER: number;
>NUMBER : 数字
>类型别名 :=> 数字

var NUMBER1: number[] = [1, 2];
>NUMBER1 : 数字[]
>[1, 2] : 数字[]
>1 : 1
>2 : 2

function foo(): number { return 1; }
>foo : () => 数字
>1 : 1

class A {
>A : A

    public a: number;
>a : 数字
>类型别名 :=> 数字

    static foo() { return 1; }
>foo : () => 数字
>1 : 1
}
module M {
>M : 类为 M

    export var n: number;
>n : 数字
>类型别名 :=> 数字
}

var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

//number type var
var ResultIsNumber1 = ++NUMBER1;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>++NUMBER1 : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]

var ResultIsNumber2 = NUMBER1++;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>NUMBER1++ : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]

// number type literal
var ResultIsNumber3 = ++1;
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>++1 : 数字
>类型别名 :=> 数字
>1 : 1

var ResultIsNumber4 = ++{ x: 1, y: 2};
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>++{ x: 1, y: 2} : 数字
>类型别名 :=> 数字
>{ x: 1, y: 2} : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

var ResultIsNumber5 = ++{ x: 1, y: (n: number) => { return n; } };
>ResultIsNumber5 : 数字
>类型别名 :=> 数字
>++{ x: 1, y: (n: number) => { return n; } } : 数字
>类型别名 :=> 数字
>{ x: 1, y: (n: number) => { return n; } } : { x: 数字; y: (n: 数字) => 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : (n: 数字) => 数字
>(n: number) => { return n; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

var ResultIsNumber6 = 1++;
>ResultIsNumber6 : 数字
>类型别名 :=> 数字
>1++ : 数字
>类型别名 :=> 数字
>1 : 1

var ResultIsNumber7 = { x: 1, y: 2 }++;
>ResultIsNumber7 : 数字
>类型别名 :=> 数字
>{ x: 1, y: 2 }++ : 数字
>类型别名 :=> 数字
>{ x: 1, y: 2 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

var ResultIsNumber8 = { x: 1, y: (n: number) => { return n; } }++;
>ResultIsNumber8 : 数字
>类型别名 :=> 数字
>{ x: 1, y: (n: number) => { return n; } }++ : 数字
>类型别名 :=> 数字
>{ x: 1, y: (n: number) => { return n; } } : { x: 数字; y: (n: 数字) => 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : (n: 数字) => 数字
>(n: number) => { return n; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

// number type expressions
var ResultIsNumber9 = ++foo();
>ResultIsNumber9 : 数字
>类型别名 :=> 数字
>++foo() : 数字
>类型别名 :=> 数字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字

var ResultIsNumber10 = ++A.foo();
>ResultIsNumber10 : 数字
>类型别名 :=> 数字
>++A.foo() : 数字
>类型别名 :=> 数字
>A.foo() : 数字
>类型别名 :=> 数字
>A.foo : () => 数字
>A : 类为 A
>foo : () => 数字

var ResultIsNumber11 = ++(NUMBER + NUMBER);
>ResultIsNumber11 : 数字
>类型别名 :=> 数字
>++(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>NUMBER + NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

var ResultIsNumber12 = foo()++;
>ResultIsNumber12 : 数字
>类型别名 :=> 数字
>foo()++ : 数字
>类型别名 :=> 数字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字

var ResultIsNumber13 = A.foo()++;
>ResultIsNumber13 : 数字
>类型别名 :=> 数字
>A.foo()++ : 数字
>类型别名 :=> 数字
>A.foo() : 数字
>类型别名 :=> 数字
>A.foo : () => 数字
>A : 类为 A
>foo : () => 数字

var ResultIsNumber14 = (NUMBER + NUMBER)++;
>ResultIsNumber14 : 数字
>类型别名 :=> 数字
>(NUMBER + NUMBER)++ : 数字
>类型别名 :=> 数字
>(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>NUMBER + NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

// miss assignment operator
++1;
>++1 : 数字
>类型别名 :=> 数字
>1 : 1

++NUMBER1;
>++NUMBER1 : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]

++foo();
>++foo() : 数字
>类型别名 :=> 数字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字

1++;
>1++ : 数字
>类型别名 :=> 数字
>1 : 1

NUMBER1++;
>NUMBER1++ : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]

foo()++;
>foo()++ : 数字
>类型别名 :=> 数字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字

