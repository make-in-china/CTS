=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : 类为 React

const obj = {};
>obj : {}
>{} : {}

const obj1: { x: 2 } = {
>obj1 : { x: 2; }
>x : 2
>{    x: 2} : { x: 2; }

    x: 2
>x : 数字
>类型别名 :=> 数字
>2 : 2
}
const obj3: {y: true, overwrite: string } = {
>obj3 : { y: 为真; overwrite: 文字; }
>y : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真
>overwrite : 文字
>类型别名 :=> 文字
>{    y: true,    overwrite: "hi"} : { y: 为真; overwrite: 文字; }

    y: true,
>y : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

    overwrite: "hi"
>overwrite : 文字
>类型别名 :=> 文字
>"hi" : "hi"
}

interface Prop {
>Prop : Prop

    x: 2
>x : 2

    y: true
>y : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真

    overwrite: string
>overwrite : 文字
>类型别名 :=> 文字
}

class OverWriteAttr extends React.Component<Prop, {}> {
>OverWriteAttr : OverWriteAttr
>React.Component : React.Component<Prop, {}>
>React : 类为 React
>Component : 类为 React.Component
>Prop : Prop

    render() {
>render : () => JSX.Element

        return <div>Hello</div>;
><div>Hello</div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意
    }
}

let anyobj: any;
>anyobj : 任意
>类型别名 :=> 任意

// OK
let x = <OverWriteAttr {...obj} y overwrite="hi" {...obj1} />
>x : JSX.Element
><OverWriteAttr {...obj} y overwrite="hi" {...obj1} /> : JSX.Element
>OverWriteAttr : 类为 OverWriteAttr
>obj : {}
>y : 为真
>类型别名 :=> 为真
>overwrite : 文字
>类型别名 :=> 文字
>obj1 : { x: 2; }

let x1 = <OverWriteAttr {...obj1} {...obj3} />
>x1 : JSX.Element
><OverWriteAttr {...obj1} {...obj3} /> : JSX.Element
>OverWriteAttr : 类为 OverWriteAttr
>obj1 : { x: 2; }
>obj3 : { y: 为真; overwrite: 文字; }

let x2 = <OverWriteAttr x={3} overwrite="hi" {...obj1} {...{y: true}} />
>x2 : JSX.Element
><OverWriteAttr x={3} overwrite="hi" {...obj1} {...{y: true}} /> : JSX.Element
>OverWriteAttr : 类为 OverWriteAttr
>x : 数字
>类型别名 :=> 数字
>3 : 3
>overwrite : 文字
>类型别名 :=> 文字
>obj1 : { x: 2; }
>{y: true} : { y: 为真; }
>y : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

let x3 = <OverWriteAttr overwrite="hi" {...obj1} x={3} {...{y: true, x: 2, overwrite:"world"}} />
>x3 : JSX.Element
><OverWriteAttr overwrite="hi" {...obj1} x={3} {...{y: true, x: 2, overwrite:"world"}} /> : JSX.Element
>OverWriteAttr : 类为 OverWriteAttr
>overwrite : 文字
>类型别名 :=> 文字
>obj1 : { x: 2; }
>x : 数字
>类型别名 :=> 数字
>3 : 3
>{y: true, x: 2, overwrite:"world"} : { y: 为真; x: 2; overwrite: 文字; }
>y : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>x : 数字
>类型别名 :=> 数字
>2 : 2
>overwrite : 文字
>类型别名 :=> 文字
>"world" : "world"

let x4 = <OverWriteAttr {...{x: 2}} {...{overwrite: "world"}} {...{y: true}} />
>x4 : JSX.Element
><OverWriteAttr {...{x: 2}} {...{overwrite: "world"}} {...{y: true}} /> : JSX.Element
>OverWriteAttr : 类为 OverWriteAttr
>{x: 2} : { x: 2; }
>x : 数字
>类型别名 :=> 数字
>2 : 2
>{overwrite: "world"} : { overwrite: 文字; }
>overwrite : 文字
>类型别名 :=> 文字
>"world" : "world"
>{y: true} : { y: 为真; }
>y : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

let x5 = <OverWriteAttr {...anyobj} />
>x5 : JSX.Element
><OverWriteAttr {...anyobj} /> : JSX.Element
>OverWriteAttr : 类为 OverWriteAttr
>anyobj : 任意
>类型别名 :=> 任意

