=== tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithNumberType.ts ===
// ~ operator on number type
var NUMBER: number;
>NUMBER : 数字
>类型别名 :=> 数字

var NUMBER1: number[] = [1, 2];
>NUMBER1 : 数字[]
>[1, 2] : 数字[]
>1 : 1
>2 : 2

function foo(): number { return 1; }
>foo : () => 数字
>1 : 1

class A {
>A : A

    public a: number;
>a : 数字
>类型别名 :=> 数字

    static foo() { return 1; }
>foo : () => 数字
>1 : 1
}
module M {
>M : 类为 M

    export var n: number;
>n : 数字
>类型别名 :=> 数字
}

var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// number type var
var ResultIsNumber1 = ~NUMBER;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>~NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

var ResultIsNumber2 = ~NUMBER1;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>~NUMBER1 : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]

// number type literal
var ResultIsNumber3 = ~1;
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>~1 : 数字
>类型别名 :=> 数字
>1 : 1

var ResultIsNumber4 = ~{ x: 1, y: 2};
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>~{ x: 1, y: 2} : 数字
>类型别名 :=> 数字
>{ x: 1, y: 2} : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

var ResultIsNumber5 = ~{ x: 1, y: (n: number) => { return n; } };
>ResultIsNumber5 : 数字
>类型别名 :=> 数字
>~{ x: 1, y: (n: number) => { return n; } } : 数字
>类型别名 :=> 数字
>{ x: 1, y: (n: number) => { return n; } } : { x: 数字; y: (n: 数字) => 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : (n: 数字) => 数字
>(n: number) => { return n; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

// number type expressions
var ResultIsNumber6 = ~objA.a;
>ResultIsNumber6 : 数字
>类型别名 :=> 数字
>~objA.a : 数字
>类型别名 :=> 数字
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字

var ResultIsNumber7 = ~M.n;
>ResultIsNumber7 : 数字
>类型别名 :=> 数字
>~M.n : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

var ResultIsNumber8 = ~NUMBER1[0];
>ResultIsNumber8 : 数字
>类型别名 :=> 数字
>~NUMBER1[0] : 数字
>类型别名 :=> 数字
>NUMBER1[0] : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]
>0 : 0

var ResultIsNumber9 = ~foo();
>ResultIsNumber9 : 数字
>类型别名 :=> 数字
>~foo() : 数字
>类型别名 :=> 数字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字

var ResultIsNumber10 = ~A.foo();
>ResultIsNumber10 : 数字
>类型别名 :=> 数字
>~A.foo() : 数字
>类型别名 :=> 数字
>A.foo() : 数字
>类型别名 :=> 数字
>A.foo : () => 数字
>A : 类为 A
>foo : () => 数字

var ResultIsNumber11 = ~(NUMBER + NUMBER);
>ResultIsNumber11 : 数字
>类型别名 :=> 数字
>~(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>NUMBER + NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

// multiple ~ operators
var ResultIsNumber12 = ~~NUMBER;
>ResultIsNumber12 : 数字
>类型别名 :=> 数字
>~~NUMBER : 数字
>类型别名 :=> 数字
>~NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

var ResultIsNumber13 = ~~~(NUMBER + NUMBER);
>ResultIsNumber13 : 数字
>类型别名 :=> 数字
>~~~(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>~~(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>~(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>NUMBER + NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

// miss assignment operators
~NUMBER;
>~NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

~NUMBER1;
>~NUMBER1 : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]

~foo();
>~foo() : 数字
>类型别名 :=> 数字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字

~objA.a;
>~objA.a : 数字
>类型别名 :=> 数字
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字

~M.n;
>~M.n : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

~objA.a, M.n;
>~objA.a, M.n : 数字
>类型别名 :=> 数字
>~objA.a : 数字
>类型别名 :=> 数字
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

