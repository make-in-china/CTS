=== tests/cases/conformance/types/union/unionTypeFromArrayLiteral.ts ===
// The resulting type an array literal expression is determined as follows:
// If the array literal is empty, the resulting type is an array type with the element type Undefined.
// Otherwise, if the array literal is contextually typed by a type that has a property with the numeric name ‘0’, the resulting type is a tuple type constructed from the types of the element expressions.
// Otherwise, the resulting type is an array type with an element type that is the union of the types of the element expressions.

var arr1 = [1, 2]; // number[]
>arr1 : 数字[]
>[1, 2] : 数字[]
>1 : 1
>2 : 2

var arr2 = ["hello", true]; // (string | number)[]
>arr2 : (文字 | 真假)[]
>["hello", true] : (文字 | 真假)[]
>"hello" : "hello"
>true : 为真
>类型别名 :=> 为真

var arr3Tuple: [number, string] = [3, "three"]; // [number, string]
>arr3Tuple : [数字, 文字]
>[3, "three"] : [数字, 文字]
>3 : 3
>"three" : "three"

var arr4Tuple: [number, string] = [3, "three", "hello"]; // [number, string, string]
>arr4Tuple : [数字, 文字]
>[3, "three", "hello"] : [数字, 文字, 文字]
>3 : 3
>"three" : "three"
>"hello" : "hello"

var arrEmpty = [];
>arrEmpty : 任意[]
>[] : 未定[]

var arr5Tuple: {
>arr5Tuple : { 0: 文字; 5: 数字; }

    0: string;
    5: number;
} = ["hello", true, false, " hello", true, 10, "any"]; // Tuple
>["hello", true, false, " hello", true, 10, "any"] : [文字, 真假, 真假, 文字, 真假, 数字, 文字]
>"hello" : "hello"
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>" hello" : " hello"
>true : 为真
>类型别名 :=> 为真
>10 : 10
>"any" : "any"

class C { foo() { } }
>C : C
>foo : () => 无值

class D { foo2() { } }
>D : D
>foo2 : () => 无值

class E extends C { foo3() { } }
>E : E
>C : C
>foo3 : () => 无值

class F extends C { foo4() { } }
>F : F
>C : C
>foo4 : () => 无值

var c: C, d: D, e: E, f: F;
>c : C
>C : C
>d : D
>D : D
>e : E
>E : E
>f : F
>F : F

var arr6 = [c, d];  // (C | D)[]
>arr6 : (C | D)[]
>[c, d] : (C | D)[]
>c : C
>d : D

var arr7 = [c, d, e]; // (C | D)[]
>arr7 : (C | D)[]
>[c, d, e] : (C | D)[]
>c : C
>d : D
>e : E

var arr8 = [c, e]; // C[]
>arr8 : C[]
>[c, e] : C[]
>c : C
>e : E

var arr9 = [e, f]; // (E|F)[]
>arr9 : (E | F)[]
>[e, f] : (E | F)[]
>e : E
>f : F

