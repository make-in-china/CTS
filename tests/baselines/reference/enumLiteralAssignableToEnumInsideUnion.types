=== tests/cases/compiler/enumLiteralAssignableToEnumInsideUnion.ts ===
module X {
>X : 类为 X

    export enum Foo {
>Foo : Foo

        A, B
>A : Foo.A
>B : Foo.B
    }
}
module Y {
>Y : 类为 Y

    export enum Foo {
>Foo : Foo

        A, B
>A : Foo.A
>B : Foo.B
    }
}
module Z {
>Z : 类为 Z

    export enum Foo {
>Foo : Foo

        A = 1 << 1,
>A : Foo
>1 << 1 : 数字
>类型别名 :=> 数字
>1 : 1
>1 : 1

        B = 1 << 2,
>B : Foo
>1 << 2 : 数字
>类型别名 :=> 数字
>1 : 1
>2 : 2
    }
}
module Ka {
>Ka : 类为 Ka

    export enum Foo {
>Foo : Foo

        A = 1 << 10,
>A : Foo
>1 << 10 : 数字
>类型别名 :=> 数字
>1 : 1
>10 : 10

        B = 1 << 11,
>B : Foo
>1 << 11 : 数字
>类型别名 :=> 数字
>1 : 1
>11 : 11
    }
}
const e0: X.Foo | boolean = Y.Foo.A; // ok
>e0 : 真假 | X.Foo
>X : 任意
>类型别名 :=> 任意
>Foo : X.Foo
>Y.Foo.A : Y.Foo.A
>Y.Foo : 类为 Y.Foo
>Y : 类为 Y
>Foo : 类为 Y.Foo
>A : Y.Foo.A

const e1: X.Foo | boolean = Z.Foo.A; // not legal, Z is computed
>e1 : 真假 | X.Foo
>X : 任意
>类型别名 :=> 任意
>Foo : X.Foo
>Z.Foo.A : Z.Foo
>Z.Foo : 类为 Z.Foo
>Z : 类为 Z
>Foo : 类为 Z.Foo
>A : Z.Foo

const e2: X.Foo.A | X.Foo.B | boolean = Z.Foo.A; // still not legal
>e2 : 真假 | X.Foo
>X : 任意
>类型别名 :=> 任意
>Foo : 任意
>类型别名 :=> 任意
>A : X.Foo.A
>X : 任意
>类型别名 :=> 任意
>Foo : 任意
>类型别名 :=> 任意
>B : X.Foo.B
>Z.Foo.A : Z.Foo
>Z.Foo : 类为 Z.Foo
>Z : 类为 Z
>Foo : 类为 Z.Foo
>A : Z.Foo

const e3: X.Foo.B | boolean = Z.Foo.A; // not legal
>e3 : 真假 | X.Foo.B
>X : 任意
>类型别名 :=> 任意
>Foo : 任意
>类型别名 :=> 任意
>B : X.Foo.B
>Z.Foo.A : Z.Foo
>Z.Foo : 类为 Z.Foo
>Z : 类为 Z
>Foo : 类为 Z.Foo
>A : Z.Foo

const e4: X.Foo.A | boolean = Z.Foo.A; // not legal either because Z.Foo is computed and Z.Foo.A is not necessarily assignable to X.Foo.A
>e4 : 真假 | X.Foo.A
>X : 任意
>类型别名 :=> 任意
>Foo : 任意
>类型别名 :=> 任意
>A : X.Foo.A
>Z.Foo.A : Z.Foo
>Z.Foo : 类为 Z.Foo
>Z : 类为 Z
>Foo : 类为 Z.Foo
>A : Z.Foo

const e5: Ka.Foo | boolean = Z.Foo.A; // ok
>e5 : 真假 | Ka.Foo
>Ka : 任意
>类型别名 :=> 任意
>Foo : Ka.Foo
>Z.Foo.A : Z.Foo
>Z.Foo : 类为 Z.Foo
>Z : 类为 Z
>Foo : 类为 Z.Foo
>A : Z.Foo

