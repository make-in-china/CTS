=== tests/cases/conformance/salsa/a.ts ===
var a: any;
>a : 任意
>类型别名 :=> 任意

var t: [any, any];
>t : [任意, 任意]

declare function f1<T>(t: T): T
>f1 : <T>(t: T) => T
>T : T
>t : T
>T : T
>T : T

declare function f2<T>(t: T[]): T;
>f2 : <T>(t: T[]) => T
>T : T
>t : T[]
>T : T
>T : T

declare function f3<T, U>(t: [T, U]): [T, U];
>f3 : <T, U>(t: [T, U]) => [T, U]
>T : T
>U : U
>t : [T, U]
>T : T
>U : U
>T : T
>U : U

declare function f4<T>(x: { bar: T; baz: T }): T;
>f4 : <T>(x: { bar: T; baz: T; }) => T
>T : T
>x : { bar: T; baz: T; }
>bar : T
>T : T
>baz : T
>T : T
>T : T

declare function f5<T>(x: (a: T) => void): T;
>f5 : <T>(x: (a: T) => 无值) => T
>T : T
>x : (a: T) => 无值
>a : T
>T : T
>T : T

declare function f6<T>(x: new (a: T) => {}): T;
>f6 : <T>(x: 新建 (a: T) => {}) => T
>T : T
>x : 新建 (a: T) => {}
>a : T
>T : T
>T : T

declare function f7<T>(x: (a: any) => a is T): T;
>f7 : <T>(x: (a: 任意) => a 作为 T) => T
>T : T
>x : (a: 任意) => a 作为 T
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>T : T
>T : T

declare function f8<T>(x: () => T): T;
>f8 : <T>(x: () => T) => T
>T : T
>x : () => T
>T : T
>T : T

declare function f9<T>(x: new () => T): T;
>f9 : <T>(x: 新建 () => T) => T
>T : T
>x : 新建 () => T
>T : T
>T : T

declare function f10<T>(x: { [x: string]: T }): T;
>f10 : <T>(x: { [x: 文字]: T; }) => T
>T : T
>x : { [x: 文字]: T; }
>x : 文字
>类型别名 :=> 文字
>T : T
>T : T

declare function f11<T>(x: { [x: number]: T }): T;
>f11 : <T>(x: { [x: 数字]: T; }) => T
>T : T
>x : { [x: 数字]: T; }
>x : 数字
>类型别名 :=> 数字
>T : T
>T : T

declare function f12<T, U>(x: T | U): [T, U];
>f12 : <T, U>(x: T | U) => [T, U]
>T : T
>U : U
>x : T | U
>T : T
>U : U
>T : T
>U : U

declare function f13<T, U>(x: T & U): [T, U];
>f13 : <T, U>(x: T & U) => [T, U]
>T : T
>U : U
>x : T & U
>T : T
>U : U
>T : T
>U : U

declare function f14<T, U>(x: { a: T | U, b: U & T }): [T, U];
>f14 : <T, U>(x: { a: T | U; b: U & T; }) => [T, U]
>T : T
>U : U
>x : { a: T | U; b: U & T; }
>a : T | U
>T : T
>U : U
>b : U & T
>U : U
>T : T
>T : T
>U : U

interface I<T> { }
>I : I<T>
>T : T

declare function f15<T>(x: I<T>): T;
>f15 : <T>(x: I<T>) => T
>T : T
>x : I<T>
>I : I<T>
>T : T
>T : T

declare function f16<T>(x: Partial<T>): T;
>f16 : <T>(x: Partial<T>) => T
>T : T
>x : Partial<T>
>Partial : Partial<T>
>T : T
>T : T

declare function f17<T, K>(x: {[P in keyof T]: K}): T;
>f17 : <T, K>(x: { [P 位于 键集 T]: K; }) => T
>T : T
>K : K
>x : { [P 位于 键集 T]: K; }
>P : P
>T : T
>K : K
>T : T

declare function f18<T, K extends keyof T>(x: {[P in K]: T[P]}): T;
>f18 : <T, K 扩展 键集 T>(x: { [P 位于 K]: T[P]; }) => T
>T : T
>K : K
>T : T
>x : { [P 位于 K]: T[P]; }
>P : P
>K : K
>T : T
>P : P
>T : T

declare function f19<T, K extends keyof T>(k: K, x: T[K]): T;
>f19 : <T, K 扩展 键集 T>(k: K, x: T[K]) => T
>T : T
>K : K
>T : T
>k : K
>K : K
>x : T[K]
>T : T
>K : K
>T : T

=== tests/cases/conformance/salsa/a.js ===
var a = f1(a);
>a : 任意
>类型别名 :=> 任意
>f1(a) : 任意
>类型别名 :=> 任意
>f1 : <T>(t: T) => T
>a : 任意
>类型别名 :=> 任意

var a = f2(a);
>a : 任意
>类型别名 :=> 任意
>f2(a) : 任意
>类型别名 :=> 任意
>f2 : <T>(t: T[]) => T
>a : 任意
>类型别名 :=> 任意

var t = f3(a);
>t : [任意, 任意]
>f3(a) : [任意, 任意]
>f3 : <T, U>(t: [T, U]) => [T, U]
>a : 任意
>类型别名 :=> 任意

var a = f4(a);
>a : 任意
>类型别名 :=> 任意
>f4(a) : 任意
>类型别名 :=> 任意
>f4 : <T>(x: { bar: T; baz: T; }) => T
>a : 任意
>类型别名 :=> 任意

var a = f5(a);
>a : 任意
>类型别名 :=> 任意
>f5(a) : 任意
>类型别名 :=> 任意
>f5 : <T>(x: (a: T) => 无值) => T
>a : 任意
>类型别名 :=> 任意

var a = f6(a);
>a : 任意
>类型别名 :=> 任意
>f6(a) : 任意
>类型别名 :=> 任意
>f6 : <T>(x: 新建 (a: T) => {}) => T
>a : 任意
>类型别名 :=> 任意

var a = f7(a);
>a : 任意
>类型别名 :=> 任意
>f7(a) : 任意
>类型别名 :=> 任意
>f7 : <T>(x: (a: 任意) => a 作为 T) => T
>a : 任意
>类型别名 :=> 任意

var a = f8(a);
>a : 任意
>类型别名 :=> 任意
>f8(a) : 任意
>类型别名 :=> 任意
>f8 : <T>(x: () => T) => T
>a : 任意
>类型别名 :=> 任意

var a = f9(a);
>a : 任意
>类型别名 :=> 任意
>f9(a) : 任意
>类型别名 :=> 任意
>f9 : <T>(x: 新建 () => T) => T
>a : 任意
>类型别名 :=> 任意

var a = f10(a);
>a : 任意
>类型别名 :=> 任意
>f10(a) : 任意
>类型别名 :=> 任意
>f10 : <T>(x: { [x: 文字]: T; }) => T
>a : 任意
>类型别名 :=> 任意

var a = f11(a);
>a : 任意
>类型别名 :=> 任意
>f11(a) : 任意
>类型别名 :=> 任意
>f11 : <T>(x: { [x: 数字]: T; }) => T
>a : 任意
>类型别名 :=> 任意

var t = f12(a);
>t : [任意, 任意]
>f12(a) : [任意, 任意]
>f12 : <T, U>(x: T | U) => [T, U]
>a : 任意
>类型别名 :=> 任意

var t = f13(a);
>t : [任意, 任意]
>f13(a) : [任意, 任意]
>f13 : <T, U>(x: T & U) => [T, U]
>a : 任意
>类型别名 :=> 任意

var t = f14(a);
>t : [任意, 任意]
>f14(a) : [任意, 任意]
>f14 : <T, U>(x: { a: T | U; b: U & T; }) => [T, U]
>a : 任意
>类型别名 :=> 任意

var a = f15(a);
>a : 任意
>类型别名 :=> 任意
>f15(a) : 任意
>类型别名 :=> 任意
>f15 : <T>(x: I<T>) => T
>a : 任意
>类型别名 :=> 任意

var a = f16(a);
>a : 任意
>类型别名 :=> 任意
>f16(a) : 任意
>类型别名 :=> 任意
>f16 : <T>(x: Partial<T>) => T
>a : 任意
>类型别名 :=> 任意

var a = f17(a);
>a : 任意
>类型别名 :=> 任意
>f17(a) : 任意
>类型别名 :=> 任意
>f17 : <T, K>(x: { [P 位于 键集 T]: K; }) => T
>a : 任意
>类型别名 :=> 任意

var a = f18(a);
>a : 任意
>类型别名 :=> 任意
>f18(a) : 任意
>类型别名 :=> 任意
>f18 : <T, K 扩展 键集 T>(x: { [P 位于 K]: T[P]; }) => T
>a : 任意
>类型别名 :=> 任意

var a = f19(a, a);
>a : 任意
>类型别名 :=> 任意
>f19(a, a) : 任意
>类型别名 :=> 任意
>f19 : <T, K 扩展 键集 T>(k: K, x: T[K]) => T
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

