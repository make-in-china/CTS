=== tests/cases/conformance/types/typeParameters/typeArgumentLists/callNonGenericFunctionWithTypeArguments.ts ===
// it is always illegal to provide type arguments to a non-generic function
// all invocations here are illegal

function f(x: number) { return null; }
>f : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

var r = f<string>(1);
>r : 任意
>类型别名 :=> 任意
>f<string>(1) : 任意
>类型别名 :=> 任意
>f : (x: 数字) => 任意
>1 : 1

var f2 = (x: number) => { return null; }
>f2 : (x: 数字) => 任意
>(x: number) => { return null; } : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

var r2 = f2<string>(1);
>r2 : 任意
>类型别名 :=> 任意
>f2<string>(1) : 任意
>类型别名 :=> 任意
>f2 : (x: 数字) => 任意
>1 : 1

var f3: { (x: number): any; }
>f3 : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字

var r3 = f3<string>(1);
>r3 : 任意
>类型别名 :=> 任意
>f3<string>(1) : 任意
>类型别名 :=> 任意
>f3 : (x: 数字) => 任意
>1 : 1

class C {
>C : C

    f(x: number) {
>f : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}
var r4 = (new C()).f<string>(1);
>r4 : 任意
>类型别名 :=> 任意
>(new C()).f<string>(1) : 任意
>类型别名 :=> 任意
>(new C()).f : (x: 数字) => 任意
>(new C()) : C
>new C() : C
>C : 类为 C
>f : (x: 数字) => 任意
>1 : 1

interface I {
>I : I

    f(x: number): any;
>f : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
}
var i: I;
>i : I
>I : I

var r5 = i.f<string>(1);
>r5 : 任意
>类型别名 :=> 任意
>i.f<string>(1) : 任意
>类型别名 :=> 任意
>i.f : (x: 数字) => 任意
>i : I
>f : (x: 数字) => 任意
>1 : 1

class C2 {
>C2 : C2

    f(x: number) {
>f : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}
var r6 = (new C2()).f<string>(1);
>r6 : 任意
>类型别名 :=> 任意
>(new C2()).f<string>(1) : 任意
>类型别名 :=> 任意
>(new C2()).f : (x: 数字) => 任意
>(new C2()) : C2
>new C2() : C2
>C2 : 类为 C2
>f : (x: 数字) => 任意
>1 : 1

interface I2 {
>I2 : I2

    f(x: number);
>f : (x: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
}
var i2: I2;
>i2 : I2
>I2 : I2

var r7 = i2.f<string>(1);
>r7 : 任意
>类型别名 :=> 任意
>i2.f<string>(1) : 任意
>类型别名 :=> 任意
>i2.f : (x: 数字) => 任意
>i2 : I2
>f : (x: 数字) => 任意
>1 : 1

var a;
>a : 任意
>类型别名 :=> 任意

var r8 = a<number>();
>r8 : 任意
>类型别名 :=> 任意
>a<number>() : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

var a2: any;
>a2 : 任意
>类型别名 :=> 任意

var r8 = a2<number>();
>r8 : 任意
>类型别名 :=> 任意
>a2<number>() : 任意
>类型别名 :=> 任意
>a2 : 任意
>类型别名 :=> 任意

