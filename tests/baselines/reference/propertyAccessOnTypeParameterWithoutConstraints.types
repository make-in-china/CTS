=== tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithoutConstraints.ts ===
class C<T> {
>C : C<T>
>T : T

    f() {
>f : () => 文字

        var x: T;
>x : T
>T : T

        var a = x['toString'](); // should be string
>a : 文字
>类型别名 :=> 文字
>x['toString']() : 文字
>类型别名 :=> 文字
>x['toString'] : () => 文字
>x : T
>'toString' : "toString"

        return a + x.toString();
>a + x.toString() : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : () => 文字
>x : T
>toString : () => 文字
    }
}

var r = (new C<number>()).f();
>r : 文字
>类型别名 :=> 文字
>(new C<number>()).f() : 文字
>类型别名 :=> 文字
>(new C<number>()).f : () => 文字
>(new C<number>()) : C<数字>
>new C<number>() : C<数字>
>C : 类为 C
>f : () => 文字

interface I<T> {
>I : I<T>
>T : T

    foo: T;
>foo : T
>T : T
}
var i: I<number>;
>i : I<数字>
>I : I<T>

var r2 = i.foo.toString();
>r2 : 文字
>类型别名 :=> 文字
>i.foo.toString() : 文字
>类型别名 :=> 文字
>i.foo.toString : (radix?: 数字) => 文字
>i.foo : 数字
>类型别名 :=> 数字
>i : I<数字>
>foo : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

var r2b = i.foo['toString']();
>r2b : 文字
>类型别名 :=> 文字
>i.foo['toString']() : 文字
>类型别名 :=> 文字
>i.foo['toString'] : (radix?: 数字) => 文字
>i.foo : 数字
>类型别名 :=> 数字
>i : I<数字>
>foo : 数字
>类型别名 :=> 数字
>'toString' : "toString"

var a: {
>a : <T>() => T

    <T>(): T;
>T : T
>T : T
}
var r3: string = a().toString();
>r3 : 文字
>类型别名 :=> 文字
>a().toString() : 文字
>类型别名 :=> 文字
>a().toString : () => 文字
>a() : {}
>a : <T>() => T
>toString : () => 文字

var r3b: string = a()['toString']();
>r3b : 文字
>类型别名 :=> 文字
>a()['toString']() : 文字
>类型别名 :=> 文字
>a()['toString'] : () => 文字
>a() : {}
>a : <T>() => T
>'toString' : "toString"

var b = {
>b : { foo: <T>(x: T) => 文字; }
>{    foo: <T>(x: T) => {        var a = x['toString'](); // should be string        return a + x.toString();    }} : { foo: <T>(x: T) => 文字; }

    foo: <T>(x: T) => {
>foo : <T>(x: T) => 文字
><T>(x: T) => {        var a = x['toString'](); // should be string        return a + x.toString();    } : <T>(x: T) => 文字
>T : T
>x : T
>T : T

        var a = x['toString'](); // should be string
>a : 文字
>类型别名 :=> 文字
>x['toString']() : 文字
>类型别名 :=> 文字
>x['toString'] : () => 文字
>x : T
>'toString' : "toString"

        return a + x.toString();
>a + x.toString() : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : () => 文字
>x : T
>toString : () => 文字
    }
}

var r4 = b.foo(1);
>r4 : 文字
>类型别名 :=> 文字
>b.foo(1) : 文字
>类型别名 :=> 文字
>b.foo : <T>(x: T) => 文字
>b : { foo: <T>(x: T) => 文字; }
>foo : <T>(x: T) => 文字
>1 : 1

