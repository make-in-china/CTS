=== tests/cases/conformance/statements/throwStatements/throwStatements.ts ===
// all legal

interface I {
>I : I

    id: number;
>id : 数字
>类型别名 :=> 数字
}

class C implements I {
>C : C
>I : I

    id: number;
>id : 数字
>类型别名 :=> 数字
}

class D<T>{
>D : D<T>
>T : T

    source: T;
>source : T
>T : T

    recurse: D<T>;
>recurse : D<T>
>D : D<T>
>T : T

    wrapped: D<D<T>>
>wrapped : D<D<T>>
>D : D<T>
>D : D<T>
>T : T
}

function F(x: string): number { return 42; }
>F : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>42 : 42

module M {
>M : 类为 M

    export class A {
>A : A

        name: string;
>name : 文字
>类型别名 :=> 文字
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>x.toString() : 文字
>类型别名 :=> 文字
>x.toString : (radix?: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字
}

var aNumber = 9.9;
>aNumber : 数字
>类型别名 :=> 数字
>9.9 : 9.9

throw aNumber;
>aNumber : 数字
>类型别名 :=> 数字

var aString = 'this is a string';
>aString : 文字
>类型别名 :=> 文字
>'this is a string' : "this is a string"

throw aString;
>aString : 文字
>类型别名 :=> 文字

var aDate = new Date(12);
>aDate : Date
>new Date(12) : Date
>Date : DateConstructor
>12 : 12

throw aDate;
>aDate : Date

var anObject = new Object();
>anObject : Object
>new Object() : Object
>Object : ObjectConstructor

throw anObject;
>anObject : Object

var anAny = null;
>anAny : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

throw anAny;
>anAny : 任意
>类型别名 :=> 任意

var anOtherAny = <any> new C();
>anOtherAny : 任意
>类型别名 :=> 任意
><any> new C() : 任意
>类型别名 :=> 任意
>new C() : C
>C : 类为 C

throw anOtherAny;
>anOtherAny : 任意
>类型别名 :=> 任意

var anUndefined = undefined;
>anUndefined : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

throw anUndefined;
>anUndefined : 任意
>类型别名 :=> 任意

var aClass = new C();
>aClass : C
>new C() : C
>C : 类为 C

throw aClass;
>aClass : C

var aGenericClass = new D<string>();
>aGenericClass : D<文字>
>new D<string>() : D<文字>
>D : 类为 D

throw aGenericClass;
>aGenericClass : D<文字>

var anObjectLiteral = { id: 12 };
>anObjectLiteral : { id: 数字; }
>{ id: 12 } : { id: 数字; }
>id : 数字
>类型别名 :=> 数字
>12 : 12

throw anObjectLiteral;
>anObjectLiteral : { id: 数字; }

var aFunction = F;
>aFunction : (x: 文字) => 数字
>F : (x: 文字) => 数字

throw aFunction;
>aFunction : (x: 文字) => 数字

throw aFunction('');
>aFunction('') : 数字
>类型别名 :=> 数字
>aFunction : (x: 文字) => 数字
>'' : ""

var aLambda = (x) => 2;
>aLambda : (x: 任意) => 数字
>(x) => 2 : (x: 任意) => 数字
>x : 任意
>类型别名 :=> 任意
>2 : 2

throw aLambda;
>aLambda : (x: 任意) => 数字

throw aLambda(1);
>aLambda(1) : 数字
>类型别名 :=> 数字
>aLambda : (x: 任意) => 数字
>1 : 1

var aModule = M;
>aModule : 类为 M
>M : 类为 M

throw aModule;
>aModule : 类为 M

throw typeof M;
>typeof M : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>M : 类为 M

var aClassInModule = new M.A();
>aClassInModule : M.A
>new M.A() : M.A
>M.A : 类为 M.A
>M : 类为 M
>A : 类为 M.A

throw aClassInModule;
>aClassInModule : M.A

var aFunctionInModule = M.F2;
>aFunctionInModule : (x: 数字) => 文字
>M.F2 : (x: 数字) => 文字
>M : 类为 M
>F2 : (x: 数字) => 文字

throw aFunctionInModule;
>aFunctionInModule : (x: 数字) => 文字

// no initializer or annotation, so this is an 'any'
var x;
>x : 任意
>类型别名 :=> 任意

throw x;
>x : 任意
>类型别名 :=> 任意

// literals
throw 0.0;
>0.0 : 0

throw false;
>false : 为假
>类型别名 :=> 为假

throw null;
>null : 空值
>类型别名 :=> 空值

throw undefined;
>undefined : 未定
>类型别名 :=> 未定

throw 'a string';
>'a string' : "a string"

throw function () { return 'a string' };
>function () { return 'a string' } : () => 文字
>'a string' : "a string"

throw <T>(x:T) => 42;
><T>(x:T) => 42 : <T>(x: T) => 数字
>T : T
>x : T
>T : T
>42 : 42

throw { x: 12, y: 13 };
>{ x: 12, y: 13 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>12 : 12
>y : 数字
>类型别名 :=> 数字
>13 : 13

throw [];
>[] : 未定[]

throw ['a', ['b']];
>['a', ['b']] : (文字 | 文字[])[]
>'a' : "a"
>['b'] : 文字[]
>'b' : "b"

throw /[a-z]/;
>/[a-z]/ : RegExp

throw new Date();
>new Date() : Date
>Date : DateConstructor

throw new C();
>new C() : C
>C : 类为 C

throw new Object();
>new Object() : Object
>Object : ObjectConstructor

throw new D<number>();
>new D<number>() : D<数字>
>D : 类为 D

