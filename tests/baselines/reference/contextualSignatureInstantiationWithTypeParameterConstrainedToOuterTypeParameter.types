=== tests/cases/compiler/contextualSignatureInstantiationWithTypeParameterConstrainedToOuterTypeParameter.ts ===
function f<T>() {
>f : <T>() => <U 扩展 T>(u: U) => U
>T : T

    function g<U extends T>(u: U): U { return null }
>g : <U 扩展 T>(u: U) => U
>U : U
>T : T
>u : U
>U : U
>U : U
>null : 空值
>类型别名 :=> 空值

    return g;
>g : <U 扩展 T>(u: U) => U
}
var h: <V, W>(v: V, func: (v: V) => W) => W;
>h : <V, W>(v: V, func: (v: V) => W) => W
>V : V
>W : W
>v : V
>V : V
>func : (v: V) => W
>v : V
>V : V
>W : W
>W : W

var x = h("", f<string>()); // Call should succeed and x should be string. All type parameters should be instantiated to string
>x : 文字
>类型别名 :=> 文字
>h("", f<string>()) : 文字
>类型别名 :=> 文字
>h : <V, W>(v: V, func: (v: V) => W) => W
>"" : ""
>f<string>() : <U 扩展 文字>(u: U) => U
>f : <T>() => <U 扩展 T>(u: U) => U

