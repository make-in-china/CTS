=== tests/cases/compiler/arrayBestCommonTypes.ts ===
module EmptyTypes {
>EmptyTypes : typeof EmptyTypes

    interface iface { }
>iface : iface

    class base implements iface { }
>base : base
>iface : iface

    class base2 implements iface { }
>base2 : base2
>iface : iface

    class derived extends base { }
>derived : derived
>base : base


    class f {
>f : f

        public voidIfAny(x: boolean, y?: boolean): number;
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>x : boolean
>类型别名 :=> 真假
>y : boolean
>类型别名 :=> 真假

        public voidIfAny(x: string, y?: boolean): number;
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>x : string
>类型别名 :=> 文字
>y : boolean
>类型别名 :=> 真假

        public voidIfAny(x: number, y?: boolean): number;
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>x : number
>类型别名 :=> 数字
>y : boolean
>类型别名 :=> 真假

        public voidIfAny(x: any, y = false): any { return null; }
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>x : any
>类型别名 :=> 任意
>y : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>null : null
>类型别名 :=> 空值

        public x() {
>x : () => void

            <number>(this.voidIfAny([4, 2][0]));
><number>(this.voidIfAny([4, 2][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([4, 2][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([4, 2][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[4, 2][0] : number
>类型别名 :=> 数字
>[4, 2] : number[]
>4 : 4
>2 : 2
>0 : 0

            <number>(this.voidIfAny([4, 2, undefined][0]));
><number>(this.voidIfAny([4, 2, undefined][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([4, 2, undefined][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([4, 2, undefined][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[4, 2, undefined][0] : number
>类型别名 :=> 数字
>[4, 2, undefined] : number[]
>4 : 4
>2 : 2
>undefined : undefined
>类型别名 :=> 未定
>0 : 0

            <number>(this.voidIfAny([undefined, 2, 4][0]));
><number>(this.voidIfAny([undefined, 2, 4][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([undefined, 2, 4][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([undefined, 2, 4][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[undefined, 2, 4][0] : number
>类型别名 :=> 数字
>[undefined, 2, 4] : number[]
>undefined : undefined
>类型别名 :=> 未定
>2 : 2
>4 : 4
>0 : 0

            <number>(this.voidIfAny([null, 2, 4][0]));
><number>(this.voidIfAny([null, 2, 4][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([null, 2, 4][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([null, 2, 4][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[null, 2, 4][0] : number
>类型别名 :=> 数字
>[null, 2, 4] : number[]
>null : null
>类型别名 :=> 空值
>2 : 2
>4 : 4
>0 : 0

            <number>(this.voidIfAny([2, 4, null][0]));
><number>(this.voidIfAny([2, 4, null][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([2, 4, null][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([2, 4, null][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[2, 4, null][0] : number
>类型别名 :=> 数字
>[2, 4, null] : number[]
>2 : 2
>4 : 4
>null : null
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([undefined, 4, null][0]));
><number>(this.voidIfAny([undefined, 4, null][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([undefined, 4, null][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([undefined, 4, null][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[undefined, 4, null][0] : number
>类型别名 :=> 数字
>[undefined, 4, null] : number[]
>undefined : undefined
>类型别名 :=> 未定
>4 : 4
>null : null
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny(['', "q"][0]));
><number>(this.voidIfAny(['', "q"][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny(['', "q"][0])) : number
>类型别名 :=> 数字
>this.voidIfAny(['', "q"][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>['', "q"][0] : string
>类型别名 :=> 文字
>['', "q"] : string[]
>'' : ""
>"q" : "q"
>0 : 0

            <number>(this.voidIfAny(['', "q", undefined][0]));
><number>(this.voidIfAny(['', "q", undefined][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny(['', "q", undefined][0])) : number
>类型别名 :=> 数字
>this.voidIfAny(['', "q", undefined][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>['', "q", undefined][0] : string
>类型别名 :=> 文字
>['', "q", undefined] : string[]
>'' : ""
>"q" : "q"
>undefined : undefined
>类型别名 :=> 未定
>0 : 0

            <number>(this.voidIfAny([undefined, "q", ''][0]));
><number>(this.voidIfAny([undefined, "q", ''][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([undefined, "q", ''][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([undefined, "q", ''][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[undefined, "q", ''][0] : string
>类型别名 :=> 文字
>[undefined, "q", ''] : string[]
>undefined : undefined
>类型别名 :=> 未定
>"q" : "q"
>'' : ""
>0 : 0

            <number>(this.voidIfAny([null, "q", ''][0]));
><number>(this.voidIfAny([null, "q", ''][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([null, "q", ''][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([null, "q", ''][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[null, "q", ''][0] : string
>类型别名 :=> 文字
>[null, "q", ''] : string[]
>null : null
>类型别名 :=> 空值
>"q" : "q"
>'' : ""
>0 : 0

            <number>(this.voidIfAny(["q", '', null][0]));
><number>(this.voidIfAny(["q", '', null][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny(["q", '', null][0])) : number
>类型别名 :=> 数字
>this.voidIfAny(["q", '', null][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>["q", '', null][0] : string
>类型别名 :=> 文字
>["q", '', null] : string[]
>"q" : "q"
>'' : ""
>null : null
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([undefined, '', null][0]));
><number>(this.voidIfAny([undefined, '', null][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([undefined, '', null][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([undefined, '', null][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[undefined, '', null][0] : string
>类型别名 :=> 文字
>[undefined, '', null] : string[]
>undefined : undefined
>类型别名 :=> 未定
>'' : ""
>null : null
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([[3, 4], [null]][0][0]));
><number>(this.voidIfAny([[3, 4], [null]][0][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([[3, 4], [null]][0][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([[3, 4], [null]][0][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[[3, 4], [null]][0][0] : number
>类型别名 :=> 数字
>[[3, 4], [null]][0] : number[]
>[[3, 4], [null]] : number[][]
>[3, 4] : number[]
>3 : 3
>4 : 4
>[null] : null[]
>null : null
>类型别名 :=> 空值
>0 : 0
>0 : 0


            var t1: { x: number; y: base; }[] = [{ x: 7, y: new derived() }, { x: 5, y: new base() }];
>t1 : { x: number; y: base; }[]
>x : number
>类型别名 :=> 数字
>y : base
>base : base
>[{ x: 7, y: new derived() }, { x: 5, y: new base() }] : { x: number; y: derived; }[]
>{ x: 7, y: new derived() } : { x: number; y: derived; }
>x : number
>类型别名 :=> 数字
>7 : 7
>y : derived
>new derived() : derived
>derived : typeof derived
>{ x: 5, y: new base() } : { x: number; y: base; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : base
>new base() : base
>base : typeof base

            var t2: { x: boolean; y: base; }[] = [{ x: true, y: new derived() }, { x: false, y: new base() }];
>t2 : { x: boolean; y: base; }[]
>x : boolean
>类型别名 :=> 真假
>y : base
>base : base
>[{ x: true, y: new derived() }, { x: false, y: new base() }] : ({ x: true; y: derived; } | { x: false; y: base; })[]
>{ x: true, y: new derived() } : { x: true; y: derived; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>y : derived
>new derived() : derived
>derived : typeof derived
>{ x: false, y: new base() } : { x: false; y: base; }
>x : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>y : base
>new base() : base
>base : typeof base

            var t3: { x: string; y: base; }[] = [{ x: undefined, y: new base() }, { x: '', y: new derived() }];
>t3 : { x: string; y: base; }[]
>x : string
>类型别名 :=> 文字
>y : base
>base : base
>[{ x: undefined, y: new base() }, { x: '', y: new derived() }] : { x: string; y: derived; }[]
>{ x: undefined, y: new base() } : { x: undefined; y: base; }
>x : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定
>y : base
>new base() : base
>base : typeof base
>{ x: '', y: new derived() } : { x: string; y: derived; }
>x : string
>类型别名 :=> 文字
>'' : ""
>y : derived
>new derived() : derived
>derived : typeof derived

            var anyObj: any = null;
>anyObj : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

            // Order matters here so test all the variants
            var a1 = [{ x: 0, y: 'a' }, { x: 'a', y: 'a' }, { x: anyObj, y: 'a' }];
>a1 : { x: any; y: string; }[]
>[{ x: 0, y: 'a' }, { x: 'a', y: 'a' }, { x: anyObj, y: 'a' }] : { x: any; y: string; }[]
>{ x: 0, y: 'a' } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: string; y: string; }
>x : string
>类型别名 :=> 文字
>'a' : "a"
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: anyObj, y: 'a' } : { x: any; y: string; }
>x : any
>类型别名 :=> 任意
>anyObj : any
>类型别名 :=> 任意
>y : string
>类型别名 :=> 文字
>'a' : "a"

            var a2 = [{ x: anyObj, y: 'a' }, { x: 0, y: 'a' }, { x: 'a', y: 'a' }];
>a2 : { x: any; y: string; }[]
>[{ x: anyObj, y: 'a' }, { x: 0, y: 'a' }, { x: 'a', y: 'a' }] : { x: any; y: string; }[]
>{ x: anyObj, y: 'a' } : { x: any; y: string; }
>x : any
>类型别名 :=> 任意
>anyObj : any
>类型别名 :=> 任意
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: 0, y: 'a' } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: string; y: string; }
>x : string
>类型别名 :=> 文字
>'a' : "a"
>y : string
>类型别名 :=> 文字
>'a' : "a"

            var a3 = [{ x: 0, y: 'a' }, { x: anyObj, y: 'a' }, { x: 'a', y: 'a' }];
>a3 : { x: any; y: string; }[]
>[{ x: 0, y: 'a' }, { x: anyObj, y: 'a' }, { x: 'a', y: 'a' }] : { x: any; y: string; }[]
>{ x: 0, y: 'a' } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: anyObj, y: 'a' } : { x: any; y: string; }
>x : any
>类型别名 :=> 任意
>anyObj : any
>类型别名 :=> 任意
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: string; y: string; }
>x : string
>类型别名 :=> 文字
>'a' : "a"
>y : string
>类型别名 :=> 文字
>'a' : "a"

            var ifaceObj: iface = null;
>ifaceObj : iface
>iface : iface
>null : null
>类型别名 :=> 空值

            var baseObj = new base();
>baseObj : base
>new base() : base
>base : typeof base

            var base2Obj = new base2();
>base2Obj : base2
>new base2() : base2
>base2 : typeof base2

            var b1 = [baseObj, base2Obj, ifaceObj];
>b1 : iface[]
>[baseObj, base2Obj, ifaceObj] : iface[]
>baseObj : base
>base2Obj : base2
>ifaceObj : iface

            var b2 = [base2Obj, baseObj, ifaceObj];
>b2 : iface[]
>[base2Obj, baseObj, ifaceObj] : iface[]
>base2Obj : base2
>baseObj : base
>ifaceObj : iface

            var b3 = [baseObj, ifaceObj, base2Obj];
>b3 : iface[]
>[baseObj, ifaceObj, base2Obj] : iface[]
>baseObj : base
>ifaceObj : iface
>base2Obj : base2

            var b4 = [ifaceObj, baseObj, base2Obj];
>b4 : iface[]
>[ifaceObj, baseObj, base2Obj] : iface[]
>ifaceObj : iface
>baseObj : base
>base2Obj : base2
        }
    }
}

module NonEmptyTypes {
>NonEmptyTypes : typeof NonEmptyTypes

    interface iface { x: string; }
>iface : iface
>x : string
>类型别名 :=> 文字

    class base implements iface { x: string; y: string; }
>base : base
>iface : iface
>x : string
>类型别名 :=> 文字
>y : string
>类型别名 :=> 文字

    class base2 implements iface { x: string; z: string; }
>base2 : base2
>iface : iface
>x : string
>类型别名 :=> 文字
>z : string
>类型别名 :=> 文字

    class derived extends base { a: string; }
>derived : derived
>base : base
>a : string
>类型别名 :=> 文字


    class f {
>f : f

        public voidIfAny(x: boolean, y?: boolean): number;
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>x : boolean
>类型别名 :=> 真假
>y : boolean
>类型别名 :=> 真假

        public voidIfAny(x: string, y?: boolean): number;
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>x : string
>类型别名 :=> 文字
>y : boolean
>类型别名 :=> 真假

        public voidIfAny(x: number, y?: boolean): number;
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>x : number
>类型别名 :=> 数字
>y : boolean
>类型别名 :=> 真假

        public voidIfAny(x: any, y = false): any { return null; }
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>x : any
>类型别名 :=> 任意
>y : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>null : null
>类型别名 :=> 空值

        public x() {
>x : () => void

            <number>(this.voidIfAny([4, 2][0]));
><number>(this.voidIfAny([4, 2][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([4, 2][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([4, 2][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[4, 2][0] : number
>类型别名 :=> 数字
>[4, 2] : number[]
>4 : 4
>2 : 2
>0 : 0

            <number>(this.voidIfAny([4, 2, undefined][0]));
><number>(this.voidIfAny([4, 2, undefined][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([4, 2, undefined][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([4, 2, undefined][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[4, 2, undefined][0] : number
>类型别名 :=> 数字
>[4, 2, undefined] : number[]
>4 : 4
>2 : 2
>undefined : undefined
>类型别名 :=> 未定
>0 : 0

            <number>(this.voidIfAny([undefined, 2, 4][0]));
><number>(this.voidIfAny([undefined, 2, 4][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([undefined, 2, 4][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([undefined, 2, 4][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[undefined, 2, 4][0] : number
>类型别名 :=> 数字
>[undefined, 2, 4] : number[]
>undefined : undefined
>类型别名 :=> 未定
>2 : 2
>4 : 4
>0 : 0

            <number>(this.voidIfAny([null, 2, 4][0]));
><number>(this.voidIfAny([null, 2, 4][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([null, 2, 4][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([null, 2, 4][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[null, 2, 4][0] : number
>类型别名 :=> 数字
>[null, 2, 4] : number[]
>null : null
>类型别名 :=> 空值
>2 : 2
>4 : 4
>0 : 0

            <number>(this.voidIfAny([2, 4, null][0]));
><number>(this.voidIfAny([2, 4, null][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([2, 4, null][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([2, 4, null][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[2, 4, null][0] : number
>类型别名 :=> 数字
>[2, 4, null] : number[]
>2 : 2
>4 : 4
>null : null
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([undefined, 4, null][0]));
><number>(this.voidIfAny([undefined, 4, null][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([undefined, 4, null][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([undefined, 4, null][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[undefined, 4, null][0] : number
>类型别名 :=> 数字
>[undefined, 4, null] : number[]
>undefined : undefined
>类型别名 :=> 未定
>4 : 4
>null : null
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny(['', "q"][0]));
><number>(this.voidIfAny(['', "q"][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny(['', "q"][0])) : number
>类型别名 :=> 数字
>this.voidIfAny(['', "q"][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>['', "q"][0] : string
>类型别名 :=> 文字
>['', "q"] : string[]
>'' : ""
>"q" : "q"
>0 : 0

            <number>(this.voidIfAny(['', "q", undefined][0]));
><number>(this.voidIfAny(['', "q", undefined][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny(['', "q", undefined][0])) : number
>类型别名 :=> 数字
>this.voidIfAny(['', "q", undefined][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>['', "q", undefined][0] : string
>类型别名 :=> 文字
>['', "q", undefined] : string[]
>'' : ""
>"q" : "q"
>undefined : undefined
>类型别名 :=> 未定
>0 : 0

            <number>(this.voidIfAny([undefined, "q", ''][0]));
><number>(this.voidIfAny([undefined, "q", ''][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([undefined, "q", ''][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([undefined, "q", ''][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[undefined, "q", ''][0] : string
>类型别名 :=> 文字
>[undefined, "q", ''] : string[]
>undefined : undefined
>类型别名 :=> 未定
>"q" : "q"
>'' : ""
>0 : 0

            <number>(this.voidIfAny([null, "q", ''][0]));
><number>(this.voidIfAny([null, "q", ''][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([null, "q", ''][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([null, "q", ''][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[null, "q", ''][0] : string
>类型别名 :=> 文字
>[null, "q", ''] : string[]
>null : null
>类型别名 :=> 空值
>"q" : "q"
>'' : ""
>0 : 0

            <number>(this.voidIfAny(["q", '', null][0]));
><number>(this.voidIfAny(["q", '', null][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny(["q", '', null][0])) : number
>类型别名 :=> 数字
>this.voidIfAny(["q", '', null][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>["q", '', null][0] : string
>类型别名 :=> 文字
>["q", '', null] : string[]
>"q" : "q"
>'' : ""
>null : null
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([undefined, '', null][0]));
><number>(this.voidIfAny([undefined, '', null][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([undefined, '', null][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([undefined, '', null][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[undefined, '', null][0] : string
>类型别名 :=> 文字
>[undefined, '', null] : string[]
>undefined : undefined
>类型别名 :=> 未定
>'' : ""
>null : null
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([[3, 4], [null]][0][0]));
><number>(this.voidIfAny([[3, 4], [null]][0][0])) : number
>类型别名 :=> 数字
>(this.voidIfAny([[3, 4], [null]][0][0])) : number
>类型别名 :=> 数字
>this.voidIfAny([[3, 4], [null]][0][0]) : number
>类型别名 :=> 数字
>this.voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>this : this
>voidIfAny : { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
>[[3, 4], [null]][0][0] : number
>类型别名 :=> 数字
>[[3, 4], [null]][0] : number[]
>[[3, 4], [null]] : number[][]
>[3, 4] : number[]
>3 : 3
>4 : 4
>[null] : null[]
>null : null
>类型别名 :=> 空值
>0 : 0
>0 : 0


            var t1: { x: number; y: base; }[] = [{ x: 7, y: new derived() }, { x: 5, y: new base() }];
>t1 : { x: number; y: base; }[]
>x : number
>类型别名 :=> 数字
>y : base
>base : base
>[{ x: 7, y: new derived() }, { x: 5, y: new base() }] : { x: number; y: base; }[]
>{ x: 7, y: new derived() } : { x: number; y: derived; }
>x : number
>类型别名 :=> 数字
>7 : 7
>y : derived
>new derived() : derived
>derived : typeof derived
>{ x: 5, y: new base() } : { x: number; y: base; }
>x : number
>类型别名 :=> 数字
>5 : 5
>y : base
>new base() : base
>base : typeof base

            var t2: { x: boolean; y: base; }[] = [{ x: true, y: new derived() }, { x: false, y: new base() }];
>t2 : { x: boolean; y: base; }[]
>x : boolean
>类型别名 :=> 真假
>y : base
>base : base
>[{ x: true, y: new derived() }, { x: false, y: new base() }] : ({ x: true; y: derived; } | { x: false; y: base; })[]
>{ x: true, y: new derived() } : { x: true; y: derived; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>y : derived
>new derived() : derived
>derived : typeof derived
>{ x: false, y: new base() } : { x: false; y: base; }
>x : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>y : base
>new base() : base
>base : typeof base

            var t3: { x: string; y: base; }[] = [{ x: undefined, y: new base() }, { x: '', y: new derived() }];
>t3 : { x: string; y: base; }[]
>x : string
>类型别名 :=> 文字
>y : base
>base : base
>[{ x: undefined, y: new base() }, { x: '', y: new derived() }] : ({ x: undefined; y: base; } | { x: string; y: derived; })[]
>{ x: undefined, y: new base() } : { x: undefined; y: base; }
>x : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定
>y : base
>new base() : base
>base : typeof base
>{ x: '', y: new derived() } : { x: string; y: derived; }
>x : string
>类型别名 :=> 文字
>'' : ""
>y : derived
>new derived() : derived
>derived : typeof derived

            var anyObj: any = null;
>anyObj : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

            // Order matters here so test all the variants
            var a1 = [{ x: 0, y: 'a' }, { x: 'a', y: 'a' }, { x: anyObj, y: 'a' }];
>a1 : { x: any; y: string; }[]
>[{ x: 0, y: 'a' }, { x: 'a', y: 'a' }, { x: anyObj, y: 'a' }] : { x: any; y: string; }[]
>{ x: 0, y: 'a' } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: string; y: string; }
>x : string
>类型别名 :=> 文字
>'a' : "a"
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: anyObj, y: 'a' } : { x: any; y: string; }
>x : any
>类型别名 :=> 任意
>anyObj : any
>类型别名 :=> 任意
>y : string
>类型别名 :=> 文字
>'a' : "a"

            var a2 = [{ x: anyObj, y: 'a' }, { x: 0, y: 'a' }, { x: 'a', y: 'a' }];
>a2 : { x: any; y: string; }[]
>[{ x: anyObj, y: 'a' }, { x: 0, y: 'a' }, { x: 'a', y: 'a' }] : { x: any; y: string; }[]
>{ x: anyObj, y: 'a' } : { x: any; y: string; }
>x : any
>类型别名 :=> 任意
>anyObj : any
>类型别名 :=> 任意
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: 0, y: 'a' } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: string; y: string; }
>x : string
>类型别名 :=> 文字
>'a' : "a"
>y : string
>类型别名 :=> 文字
>'a' : "a"

            var a3 = [{ x: 0, y: 'a' }, { x: anyObj, y: 'a' }, { x: 'a', y: 'a' }];
>a3 : { x: any; y: string; }[]
>[{ x: 0, y: 'a' }, { x: anyObj, y: 'a' }, { x: 'a', y: 'a' }] : { x: any; y: string; }[]
>{ x: 0, y: 'a' } : { x: number; y: string; }
>x : number
>类型别名 :=> 数字
>0 : 0
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: anyObj, y: 'a' } : { x: any; y: string; }
>x : any
>类型别名 :=> 任意
>anyObj : any
>类型别名 :=> 任意
>y : string
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: string; y: string; }
>x : string
>类型别名 :=> 文字
>'a' : "a"
>y : string
>类型别名 :=> 文字
>'a' : "a"

            var ifaceObj: iface = null;
>ifaceObj : iface
>iface : iface
>null : null
>类型别名 :=> 空值

            var baseObj = new base();
>baseObj : base
>new base() : base
>base : typeof base

            var base2Obj = new base2();
>base2Obj : base2
>new base2() : base2
>base2 : typeof base2

            var b1 = [baseObj, base2Obj, ifaceObj];
>b1 : iface[]
>[baseObj, base2Obj, ifaceObj] : iface[]
>baseObj : base
>base2Obj : base2
>ifaceObj : iface

            var b2 = [base2Obj, baseObj, ifaceObj];
>b2 : iface[]
>[base2Obj, baseObj, ifaceObj] : iface[]
>base2Obj : base2
>baseObj : base
>ifaceObj : iface

            var b3 = [baseObj, ifaceObj, base2Obj];
>b3 : iface[]
>[baseObj, ifaceObj, base2Obj] : iface[]
>baseObj : base
>ifaceObj : iface
>base2Obj : base2

            var b4 = [ifaceObj, baseObj, base2Obj];
>b4 : iface[]
>[ifaceObj, baseObj, base2Obj] : iface[]
>ifaceObj : iface
>baseObj : base
>base2Obj : base2
        }
    }
}


