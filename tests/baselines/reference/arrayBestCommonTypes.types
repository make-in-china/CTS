=== tests/cases/compiler/arrayBestCommonTypes.ts ===
module EmptyTypes {
>EmptyTypes : 类为 EmptyTypes

    interface iface { }
>iface : iface

    class base implements iface { }
>base : base
>iface : iface

    class base2 implements iface { }
>base2 : base2
>iface : iface

    class derived extends base { }
>derived : derived
>base : base


    class f {
>f : f

        public voidIfAny(x: boolean, y?: boolean): number;
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>x : 真假
>类型别名 :=> 真假
>y : 真假
>类型别名 :=> 真假

        public voidIfAny(x: string, y?: boolean): number;
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>x : 文字
>类型别名 :=> 文字
>y : 真假
>类型别名 :=> 真假

        public voidIfAny(x: number, y?: boolean): number;
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 真假
>类型别名 :=> 真假

        public voidIfAny(x: any, y = false): any { return null; }
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>x : 任意
>类型别名 :=> 任意
>y : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值

        public x() {
>x : () => 无值

            <number>(this.voidIfAny([4, 2][0]));
><number>(this.voidIfAny([4, 2][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([4, 2][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([4, 2][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[4, 2][0] : 数字
>类型别名 :=> 数字
>[4, 2] : 数字[]
>4 : 4
>2 : 2
>0 : 0

            <number>(this.voidIfAny([4, 2, undefined][0]));
><number>(this.voidIfAny([4, 2, undefined][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([4, 2, undefined][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([4, 2, undefined][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[4, 2, undefined][0] : 数字
>类型别名 :=> 数字
>[4, 2, undefined] : 数字[]
>4 : 4
>2 : 2
>undefined : 未定
>类型别名 :=> 未定
>0 : 0

            <number>(this.voidIfAny([undefined, 2, 4][0]));
><number>(this.voidIfAny([undefined, 2, 4][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([undefined, 2, 4][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([undefined, 2, 4][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[undefined, 2, 4][0] : 数字
>类型别名 :=> 数字
>[undefined, 2, 4] : 数字[]
>undefined : 未定
>类型别名 :=> 未定
>2 : 2
>4 : 4
>0 : 0

            <number>(this.voidIfAny([null, 2, 4][0]));
><number>(this.voidIfAny([null, 2, 4][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([null, 2, 4][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([null, 2, 4][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[null, 2, 4][0] : 数字
>类型别名 :=> 数字
>[null, 2, 4] : 数字[]
>null : 空值
>类型别名 :=> 空值
>2 : 2
>4 : 4
>0 : 0

            <number>(this.voidIfAny([2, 4, null][0]));
><number>(this.voidIfAny([2, 4, null][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([2, 4, null][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([2, 4, null][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[2, 4, null][0] : 数字
>类型别名 :=> 数字
>[2, 4, null] : 数字[]
>2 : 2
>4 : 4
>null : 空值
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([undefined, 4, null][0]));
><number>(this.voidIfAny([undefined, 4, null][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([undefined, 4, null][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([undefined, 4, null][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[undefined, 4, null][0] : 数字
>类型别名 :=> 数字
>[undefined, 4, null] : 数字[]
>undefined : 未定
>类型别名 :=> 未定
>4 : 4
>null : 空值
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny(['', "q"][0]));
><number>(this.voidIfAny(['', "q"][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny(['', "q"][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny(['', "q"][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>['', "q"][0] : 文字
>类型别名 :=> 文字
>['', "q"] : 文字[]
>'' : ""
>"q" : "q"
>0 : 0

            <number>(this.voidIfAny(['', "q", undefined][0]));
><number>(this.voidIfAny(['', "q", undefined][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny(['', "q", undefined][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny(['', "q", undefined][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>['', "q", undefined][0] : 文字
>类型别名 :=> 文字
>['', "q", undefined] : 文字[]
>'' : ""
>"q" : "q"
>undefined : 未定
>类型别名 :=> 未定
>0 : 0

            <number>(this.voidIfAny([undefined, "q", ''][0]));
><number>(this.voidIfAny([undefined, "q", ''][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([undefined, "q", ''][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([undefined, "q", ''][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[undefined, "q", ''][0] : 文字
>类型别名 :=> 文字
>[undefined, "q", ''] : 文字[]
>undefined : 未定
>类型别名 :=> 未定
>"q" : "q"
>'' : ""
>0 : 0

            <number>(this.voidIfAny([null, "q", ''][0]));
><number>(this.voidIfAny([null, "q", ''][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([null, "q", ''][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([null, "q", ''][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[null, "q", ''][0] : 文字
>类型别名 :=> 文字
>[null, "q", ''] : 文字[]
>null : 空值
>类型别名 :=> 空值
>"q" : "q"
>'' : ""
>0 : 0

            <number>(this.voidIfAny(["q", '', null][0]));
><number>(this.voidIfAny(["q", '', null][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny(["q", '', null][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny(["q", '', null][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>["q", '', null][0] : 文字
>类型别名 :=> 文字
>["q", '', null] : 文字[]
>"q" : "q"
>'' : ""
>null : 空值
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([undefined, '', null][0]));
><number>(this.voidIfAny([undefined, '', null][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([undefined, '', null][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([undefined, '', null][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[undefined, '', null][0] : 文字
>类型别名 :=> 文字
>[undefined, '', null] : 文字[]
>undefined : 未定
>类型别名 :=> 未定
>'' : ""
>null : 空值
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([[3, 4], [null]][0][0]));
><number>(this.voidIfAny([[3, 4], [null]][0][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([[3, 4], [null]][0][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([[3, 4], [null]][0][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[[3, 4], [null]][0][0] : 数字
>类型别名 :=> 数字
>[[3, 4], [null]][0] : 数字[]
>[[3, 4], [null]] : 数字[][]
>[3, 4] : 数字[]
>3 : 3
>4 : 4
>[null] : 空值[]
>null : 空值
>类型别名 :=> 空值
>0 : 0
>0 : 0


            var t1: { x: number; y: base; }[] = [{ x: 7, y: new derived() }, { x: 5, y: new base() }];
>t1 : { x: 数字; y: base; }[]
>x : 数字
>类型别名 :=> 数字
>y : base
>base : base
>[{ x: 7, y: new derived() }, { x: 5, y: new base() }] : { x: 数字; y: derived; }[]
>{ x: 7, y: new derived() } : { x: 数字; y: derived; }
>x : 数字
>类型别名 :=> 数字
>7 : 7
>y : derived
>new derived() : derived
>derived : 类为 derived
>{ x: 5, y: new base() } : { x: 数字; y: base; }
>x : 数字
>类型别名 :=> 数字
>5 : 5
>y : base
>new base() : base
>base : 类为 base

            var t2: { x: boolean; y: base; }[] = [{ x: true, y: new derived() }, { x: false, y: new base() }];
>t2 : { x: 真假; y: base; }[]
>x : 真假
>类型别名 :=> 真假
>y : base
>base : base
>[{ x: true, y: new derived() }, { x: false, y: new base() }] : ({ x: 为真; y: derived; } | { x: 为假; y: base; })[]
>{ x: true, y: new derived() } : { x: 为真; y: derived; }
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>y : derived
>new derived() : derived
>derived : 类为 derived
>{ x: false, y: new base() } : { x: 为假; y: base; }
>x : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>y : base
>new base() : base
>base : 类为 base

            var t3: { x: string; y: base; }[] = [{ x: undefined, y: new base() }, { x: '', y: new derived() }];
>t3 : { x: 文字; y: base; }[]
>x : 文字
>类型别名 :=> 文字
>y : base
>base : base
>[{ x: undefined, y: new base() }, { x: '', y: new derived() }] : { x: 文字; y: derived; }[]
>{ x: undefined, y: new base() } : { x: 未定; y: base; }
>x : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定
>y : base
>new base() : base
>base : 类为 base
>{ x: '', y: new derived() } : { x: 文字; y: derived; }
>x : 文字
>类型别名 :=> 文字
>'' : ""
>y : derived
>new derived() : derived
>derived : 类为 derived

            var anyObj: any = null;
>anyObj : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

            // Order matters here so test all the variants
            var a1 = [{ x: 0, y: 'a' }, { x: 'a', y: 'a' }, { x: anyObj, y: 'a' }];
>a1 : { x: 任意; y: 文字; }[]
>[{ x: 0, y: 'a' }, { x: 'a', y: 'a' }, { x: anyObj, y: 'a' }] : { x: 任意; y: 文字; }[]
>{ x: 0, y: 'a' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>'a' : "a"
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: anyObj, y: 'a' } : { x: 任意; y: 文字; }
>x : 任意
>类型别名 :=> 任意
>anyObj : 任意
>类型别名 :=> 任意
>y : 文字
>类型别名 :=> 文字
>'a' : "a"

            var a2 = [{ x: anyObj, y: 'a' }, { x: 0, y: 'a' }, { x: 'a', y: 'a' }];
>a2 : { x: 任意; y: 文字; }[]
>[{ x: anyObj, y: 'a' }, { x: 0, y: 'a' }, { x: 'a', y: 'a' }] : { x: 任意; y: 文字; }[]
>{ x: anyObj, y: 'a' } : { x: 任意; y: 文字; }
>x : 任意
>类型别名 :=> 任意
>anyObj : 任意
>类型别名 :=> 任意
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: 0, y: 'a' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>'a' : "a"
>y : 文字
>类型别名 :=> 文字
>'a' : "a"

            var a3 = [{ x: 0, y: 'a' }, { x: anyObj, y: 'a' }, { x: 'a', y: 'a' }];
>a3 : { x: 任意; y: 文字; }[]
>[{ x: 0, y: 'a' }, { x: anyObj, y: 'a' }, { x: 'a', y: 'a' }] : { x: 任意; y: 文字; }[]
>{ x: 0, y: 'a' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: anyObj, y: 'a' } : { x: 任意; y: 文字; }
>x : 任意
>类型别名 :=> 任意
>anyObj : 任意
>类型别名 :=> 任意
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>'a' : "a"
>y : 文字
>类型别名 :=> 文字
>'a' : "a"

            var ifaceObj: iface = null;
>ifaceObj : iface
>iface : iface
>null : 空值
>类型别名 :=> 空值

            var baseObj = new base();
>baseObj : base
>new base() : base
>base : 类为 base

            var base2Obj = new base2();
>base2Obj : base2
>new base2() : base2
>base2 : 类为 base2

            var b1 = [baseObj, base2Obj, ifaceObj];
>b1 : iface[]
>[baseObj, base2Obj, ifaceObj] : iface[]
>baseObj : base
>base2Obj : base2
>ifaceObj : iface

            var b2 = [base2Obj, baseObj, ifaceObj];
>b2 : iface[]
>[base2Obj, baseObj, ifaceObj] : iface[]
>base2Obj : base2
>baseObj : base
>ifaceObj : iface

            var b3 = [baseObj, ifaceObj, base2Obj];
>b3 : iface[]
>[baseObj, ifaceObj, base2Obj] : iface[]
>baseObj : base
>ifaceObj : iface
>base2Obj : base2

            var b4 = [ifaceObj, baseObj, base2Obj];
>b4 : iface[]
>[ifaceObj, baseObj, base2Obj] : iface[]
>ifaceObj : iface
>baseObj : base
>base2Obj : base2
        }
    }
}

module NonEmptyTypes {
>NonEmptyTypes : 类为 NonEmptyTypes

    interface iface { x: string; }
>iface : iface
>x : 文字
>类型别名 :=> 文字

    class base implements iface { x: string; y: string; }
>base : base
>iface : iface
>x : 文字
>类型别名 :=> 文字
>y : 文字
>类型别名 :=> 文字

    class base2 implements iface { x: string; z: string; }
>base2 : base2
>iface : iface
>x : 文字
>类型别名 :=> 文字
>z : 文字
>类型别名 :=> 文字

    class derived extends base { a: string; }
>derived : derived
>base : base
>a : 文字
>类型别名 :=> 文字


    class f {
>f : f

        public voidIfAny(x: boolean, y?: boolean): number;
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>x : 真假
>类型别名 :=> 真假
>y : 真假
>类型别名 :=> 真假

        public voidIfAny(x: string, y?: boolean): number;
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>x : 文字
>类型别名 :=> 文字
>y : 真假
>类型别名 :=> 真假

        public voidIfAny(x: number, y?: boolean): number;
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>x : 数字
>类型别名 :=> 数字
>y : 真假
>类型别名 :=> 真假

        public voidIfAny(x: any, y = false): any { return null; }
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>x : 任意
>类型别名 :=> 任意
>y : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>null : 空值
>类型别名 :=> 空值

        public x() {
>x : () => 无值

            <number>(this.voidIfAny([4, 2][0]));
><number>(this.voidIfAny([4, 2][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([4, 2][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([4, 2][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[4, 2][0] : 数字
>类型别名 :=> 数字
>[4, 2] : 数字[]
>4 : 4
>2 : 2
>0 : 0

            <number>(this.voidIfAny([4, 2, undefined][0]));
><number>(this.voidIfAny([4, 2, undefined][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([4, 2, undefined][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([4, 2, undefined][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[4, 2, undefined][0] : 数字
>类型别名 :=> 数字
>[4, 2, undefined] : 数字[]
>4 : 4
>2 : 2
>undefined : 未定
>类型别名 :=> 未定
>0 : 0

            <number>(this.voidIfAny([undefined, 2, 4][0]));
><number>(this.voidIfAny([undefined, 2, 4][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([undefined, 2, 4][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([undefined, 2, 4][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[undefined, 2, 4][0] : 数字
>类型别名 :=> 数字
>[undefined, 2, 4] : 数字[]
>undefined : 未定
>类型别名 :=> 未定
>2 : 2
>4 : 4
>0 : 0

            <number>(this.voidIfAny([null, 2, 4][0]));
><number>(this.voidIfAny([null, 2, 4][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([null, 2, 4][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([null, 2, 4][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[null, 2, 4][0] : 数字
>类型别名 :=> 数字
>[null, 2, 4] : 数字[]
>null : 空值
>类型别名 :=> 空值
>2 : 2
>4 : 4
>0 : 0

            <number>(this.voidIfAny([2, 4, null][0]));
><number>(this.voidIfAny([2, 4, null][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([2, 4, null][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([2, 4, null][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[2, 4, null][0] : 数字
>类型别名 :=> 数字
>[2, 4, null] : 数字[]
>2 : 2
>4 : 4
>null : 空值
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([undefined, 4, null][0]));
><number>(this.voidIfAny([undefined, 4, null][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([undefined, 4, null][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([undefined, 4, null][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[undefined, 4, null][0] : 数字
>类型别名 :=> 数字
>[undefined, 4, null] : 数字[]
>undefined : 未定
>类型别名 :=> 未定
>4 : 4
>null : 空值
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny(['', "q"][0]));
><number>(this.voidIfAny(['', "q"][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny(['', "q"][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny(['', "q"][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>['', "q"][0] : 文字
>类型别名 :=> 文字
>['', "q"] : 文字[]
>'' : ""
>"q" : "q"
>0 : 0

            <number>(this.voidIfAny(['', "q", undefined][0]));
><number>(this.voidIfAny(['', "q", undefined][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny(['', "q", undefined][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny(['', "q", undefined][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>['', "q", undefined][0] : 文字
>类型别名 :=> 文字
>['', "q", undefined] : 文字[]
>'' : ""
>"q" : "q"
>undefined : 未定
>类型别名 :=> 未定
>0 : 0

            <number>(this.voidIfAny([undefined, "q", ''][0]));
><number>(this.voidIfAny([undefined, "q", ''][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([undefined, "q", ''][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([undefined, "q", ''][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[undefined, "q", ''][0] : 文字
>类型别名 :=> 文字
>[undefined, "q", ''] : 文字[]
>undefined : 未定
>类型别名 :=> 未定
>"q" : "q"
>'' : ""
>0 : 0

            <number>(this.voidIfAny([null, "q", ''][0]));
><number>(this.voidIfAny([null, "q", ''][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([null, "q", ''][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([null, "q", ''][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[null, "q", ''][0] : 文字
>类型别名 :=> 文字
>[null, "q", ''] : 文字[]
>null : 空值
>类型别名 :=> 空值
>"q" : "q"
>'' : ""
>0 : 0

            <number>(this.voidIfAny(["q", '', null][0]));
><number>(this.voidIfAny(["q", '', null][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny(["q", '', null][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny(["q", '', null][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>["q", '', null][0] : 文字
>类型别名 :=> 文字
>["q", '', null] : 文字[]
>"q" : "q"
>'' : ""
>null : 空值
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([undefined, '', null][0]));
><number>(this.voidIfAny([undefined, '', null][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([undefined, '', null][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([undefined, '', null][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[undefined, '', null][0] : 文字
>类型别名 :=> 文字
>[undefined, '', null] : 文字[]
>undefined : 未定
>类型别名 :=> 未定
>'' : ""
>null : 空值
>类型别名 :=> 空值
>0 : 0

            <number>(this.voidIfAny([[3, 4], [null]][0][0]));
><number>(this.voidIfAny([[3, 4], [null]][0][0])) : 数字
>类型别名 :=> 数字
>(this.voidIfAny([[3, 4], [null]][0][0])) : 数字
>类型别名 :=> 数字
>this.voidIfAny([[3, 4], [null]][0][0]) : 数字
>类型别名 :=> 数字
>this.voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>this : 本体
>voidIfAny : { (x: 真假, y?: 真假): 数字; (x: 文字, y?: 真假): 数字; (x: 数字, y?: 真假): 数字; }
>[[3, 4], [null]][0][0] : 数字
>类型别名 :=> 数字
>[[3, 4], [null]][0] : 数字[]
>[[3, 4], [null]] : 数字[][]
>[3, 4] : 数字[]
>3 : 3
>4 : 4
>[null] : 空值[]
>null : 空值
>类型别名 :=> 空值
>0 : 0
>0 : 0


            var t1: { x: number; y: base; }[] = [{ x: 7, y: new derived() }, { x: 5, y: new base() }];
>t1 : { x: 数字; y: base; }[]
>x : 数字
>类型别名 :=> 数字
>y : base
>base : base
>[{ x: 7, y: new derived() }, { x: 5, y: new base() }] : { x: 数字; y: base; }[]
>{ x: 7, y: new derived() } : { x: 数字; y: derived; }
>x : 数字
>类型别名 :=> 数字
>7 : 7
>y : derived
>new derived() : derived
>derived : 类为 derived
>{ x: 5, y: new base() } : { x: 数字; y: base; }
>x : 数字
>类型别名 :=> 数字
>5 : 5
>y : base
>new base() : base
>base : 类为 base

            var t2: { x: boolean; y: base; }[] = [{ x: true, y: new derived() }, { x: false, y: new base() }];
>t2 : { x: 真假; y: base; }[]
>x : 真假
>类型别名 :=> 真假
>y : base
>base : base
>[{ x: true, y: new derived() }, { x: false, y: new base() }] : ({ x: 为真; y: derived; } | { x: 为假; y: base; })[]
>{ x: true, y: new derived() } : { x: 为真; y: derived; }
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>y : derived
>new derived() : derived
>derived : 类为 derived
>{ x: false, y: new base() } : { x: 为假; y: base; }
>x : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>y : base
>new base() : base
>base : 类为 base

            var t3: { x: string; y: base; }[] = [{ x: undefined, y: new base() }, { x: '', y: new derived() }];
>t3 : { x: 文字; y: base; }[]
>x : 文字
>类型别名 :=> 文字
>y : base
>base : base
>[{ x: undefined, y: new base() }, { x: '', y: new derived() }] : ({ x: 未定; y: base; } | { x: 文字; y: derived; })[]
>{ x: undefined, y: new base() } : { x: 未定; y: base; }
>x : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定
>y : base
>new base() : base
>base : 类为 base
>{ x: '', y: new derived() } : { x: 文字; y: derived; }
>x : 文字
>类型别名 :=> 文字
>'' : ""
>y : derived
>new derived() : derived
>derived : 类为 derived

            var anyObj: any = null;
>anyObj : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

            // Order matters here so test all the variants
            var a1 = [{ x: 0, y: 'a' }, { x: 'a', y: 'a' }, { x: anyObj, y: 'a' }];
>a1 : { x: 任意; y: 文字; }[]
>[{ x: 0, y: 'a' }, { x: 'a', y: 'a' }, { x: anyObj, y: 'a' }] : { x: 任意; y: 文字; }[]
>{ x: 0, y: 'a' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>'a' : "a"
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: anyObj, y: 'a' } : { x: 任意; y: 文字; }
>x : 任意
>类型别名 :=> 任意
>anyObj : 任意
>类型别名 :=> 任意
>y : 文字
>类型别名 :=> 文字
>'a' : "a"

            var a2 = [{ x: anyObj, y: 'a' }, { x: 0, y: 'a' }, { x: 'a', y: 'a' }];
>a2 : { x: 任意; y: 文字; }[]
>[{ x: anyObj, y: 'a' }, { x: 0, y: 'a' }, { x: 'a', y: 'a' }] : { x: 任意; y: 文字; }[]
>{ x: anyObj, y: 'a' } : { x: 任意; y: 文字; }
>x : 任意
>类型别名 :=> 任意
>anyObj : 任意
>类型别名 :=> 任意
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: 0, y: 'a' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>'a' : "a"
>y : 文字
>类型别名 :=> 文字
>'a' : "a"

            var a3 = [{ x: 0, y: 'a' }, { x: anyObj, y: 'a' }, { x: 'a', y: 'a' }];
>a3 : { x: 任意; y: 文字; }[]
>[{ x: 0, y: 'a' }, { x: anyObj, y: 'a' }, { x: 'a', y: 'a' }] : { x: 任意; y: 文字; }[]
>{ x: 0, y: 'a' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: anyObj, y: 'a' } : { x: 任意; y: 文字; }
>x : 任意
>类型别名 :=> 任意
>anyObj : 任意
>类型别名 :=> 任意
>y : 文字
>类型别名 :=> 文字
>'a' : "a"
>{ x: 'a', y: 'a' } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>'a' : "a"
>y : 文字
>类型别名 :=> 文字
>'a' : "a"

            var ifaceObj: iface = null;
>ifaceObj : iface
>iface : iface
>null : 空值
>类型别名 :=> 空值

            var baseObj = new base();
>baseObj : base
>new base() : base
>base : 类为 base

            var base2Obj = new base2();
>base2Obj : base2
>new base2() : base2
>base2 : 类为 base2

            var b1 = [baseObj, base2Obj, ifaceObj];
>b1 : iface[]
>[baseObj, base2Obj, ifaceObj] : iface[]
>baseObj : base
>base2Obj : base2
>ifaceObj : iface

            var b2 = [base2Obj, baseObj, ifaceObj];
>b2 : iface[]
>[base2Obj, baseObj, ifaceObj] : iface[]
>base2Obj : base2
>baseObj : base
>ifaceObj : iface

            var b3 = [baseObj, ifaceObj, base2Obj];
>b3 : iface[]
>[baseObj, ifaceObj, base2Obj] : iface[]
>baseObj : base
>ifaceObj : iface
>base2Obj : base2

            var b4 = [ifaceObj, baseObj, base2Obj];
>b4 : iface[]
>[ifaceObj, baseObj, base2Obj] : iface[]
>ifaceObj : iface
>baseObj : base
>base2Obj : base2
        }
    }
}


