=== tests/cases/compiler/destructuringWithGenericParameter.ts ===
class GenericClass<T> {
>GenericClass : GenericClass<T>
>T : T

    payload: T;
>payload : T
>T : T
}

var genericObject = new GenericClass<{ greeting: string }>();
>genericObject : GenericClass<{ greeting: 文字; }>
>new GenericClass<{ greeting: string }>() : GenericClass<{ greeting: 文字; }>
>GenericClass : 类为 GenericClass
>greeting : 文字
>类型别名 :=> 文字

function genericFunction<T>(object: GenericClass<T>, callback: (payload: T) => void) {
>genericFunction : <T>(object: GenericClass<T>, callback: (payload: T) => 无值) => 无值
>T : T
>object : GenericClass<T>
>GenericClass : GenericClass<T>
>T : T
>callback : (payload: T) => 无值
>payload : T
>T : T

    callback(object.payload);
>callback(object.payload) : 无值
>类型别名 :=> 无值
>callback : (payload: T) => 无值
>object.payload : T
>object : GenericClass<T>
>payload : T
}

genericFunction(genericObject, ({greeting}) => {
>genericFunction(genericObject, ({greeting}) => {    var s = greeting.toLocaleLowerCase();  // Greeting should be of type string}) : 无值
>类型别名 :=> 无值
>genericFunction : <T>(object: GenericClass<T>, callback: (payload: T) => 无值) => 无值
>genericObject : GenericClass<{ greeting: 文字; }>
>({greeting}) => {    var s = greeting.toLocaleLowerCase();  // Greeting should be of type string} : ({ greeting }: { greeting: 文字; }) => 无值
>greeting : 文字
>类型别名 :=> 文字

    var s = greeting.toLocaleLowerCase();  // Greeting should be of type string
>s : 文字
>类型别名 :=> 文字
>greeting.toLocaleLowerCase() : 文字
>类型别名 :=> 文字
>greeting.toLocaleLowerCase : () => 文字
>greeting : 文字
>类型别名 :=> 文字
>toLocaleLowerCase : () => 文字

});

