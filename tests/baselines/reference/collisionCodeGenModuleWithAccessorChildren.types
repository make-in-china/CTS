=== tests/cases/compiler/collisionCodeGenModuleWithAccessorChildren.ts ===
module M {
>M : typeof M

    export var x = 3;
>x : number
>类型别名 :=> 数字
>3 : 3

    class c {
>c : c

        private y;
>y : any
>类型别名 :=> 任意

        set Z(M) {
>Z : any
>类型别名 :=> 任意
>M : any
>类型别名 :=> 任意

            this.y = x;
>this.y = x : number
>类型别名 :=> 数字
>this.y : any
>类型别名 :=> 任意
>this : this
>y : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字
        }
    }
}

module M {
>M : typeof M

    class d {
>d : d

        private y;
>y : any
>类型别名 :=> 任意

        set Z(p) {
>Z : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意

            var M = 10;
>M : number
>类型别名 :=> 数字
>10 : 10

            this.y = x;
>this.y = x : number
>类型别名 :=> 数字
>this.y : any
>类型别名 :=> 任意
>this : this
>y : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字
        }
    }
}

module M { // Shouldnt be _M
>M : typeof M

    class e {
>e : e

        private y;
>y : any
>类型别名 :=> 任意

        set M(p) {
>M : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意

            this.y = x;
>this.y = x : number
>类型别名 :=> 数字
>this.y : any
>类型别名 :=> 任意
>this : this
>y : any
>类型别名 :=> 任意
>x : number
>类型别名 :=> 数字
        }
    }
}

module M {
>M : typeof M

    class f {
>f : f

        get Z() {
>Z : number
>类型别名 :=> 数字

            var M = 10;
>M : number
>类型别名 :=> 数字
>10 : 10

            return x;
>x : number
>类型别名 :=> 数字
        }
    }
}

module M { // Shouldnt be _M
>M : typeof M

    class e {
>e : e

        get M() {
>M : number
>类型别名 :=> 数字

            return x;
>x : number
>类型别名 :=> 数字
        }
    }
}
