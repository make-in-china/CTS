=== tests/cases/compiler/collisionCodeGenModuleWithAccessorChildren.ts ===
module M {
>M : 类为 M

    export var x = 3;
>x : 数字
>类型别名 :=> 数字
>3 : 3

    class c {
>c : c

        private y;
>y : 任意
>类型别名 :=> 任意

        set Z(M) {
>Z : 任意
>类型别名 :=> 任意
>M : 任意
>类型别名 :=> 任意

            this.y = x;
>this.y = x : 数字
>类型别名 :=> 数字
>this.y : 任意
>类型别名 :=> 任意
>this : 本体
>y : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
        }
    }
}

module M {
>M : 类为 M

    class d {
>d : d

        private y;
>y : 任意
>类型别名 :=> 任意

        set Z(p) {
>Z : 任意
>类型别名 :=> 任意
>p : 任意
>类型别名 :=> 任意

            var M = 10;
>M : 数字
>类型别名 :=> 数字
>10 : 10

            this.y = x;
>this.y = x : 数字
>类型别名 :=> 数字
>this.y : 任意
>类型别名 :=> 任意
>this : 本体
>y : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
        }
    }
}

module M { // Shouldnt be _M
>M : 类为 M

    class e {
>e : e

        private y;
>y : 任意
>类型别名 :=> 任意

        set M(p) {
>M : 任意
>类型别名 :=> 任意
>p : 任意
>类型别名 :=> 任意

            this.y = x;
>this.y = x : 数字
>类型别名 :=> 数字
>this.y : 任意
>类型别名 :=> 任意
>this : 本体
>y : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
        }
    }
}

module M {
>M : 类为 M

    class f {
>f : f

        get Z() {
>Z : 数字
>类型别名 :=> 数字

            var M = 10;
>M : 数字
>类型别名 :=> 数字
>10 : 10

            return x;
>x : 数字
>类型别名 :=> 数字
        }
    }
}

module M { // Shouldnt be _M
>M : 类为 M

    class e {
>e : e

        get M() {
>M : 数字
>类型别名 :=> 数字

            return x;
>x : 数字
>类型别名 :=> 数字
        }
    }
}
