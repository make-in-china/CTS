=== tests/cases/compiler/functionOverloads43.ts ===
function foo(bar: { a:number }[]): number;
>foo : { (bar: { a: 数字; }[]): 数字; (bar: { a: 文字; }[]): 文字; }
>bar : { a: 数字; }[]
>a : 数字
>类型别名 :=> 数字

function foo(bar: { a:string }[]): string;
>foo : { (bar: { a: 数字; }[]): 数字; (bar: { a: 文字; }[]): 文字; }
>bar : { a: 文字; }[]
>a : 文字
>类型别名 :=> 文字

function foo([x]: { a:number | string }[]): string | number {
>foo : { (bar: { a: 数字; }[]): 数字; (bar: { a: 文字; }[]): 文字; }
>x : { a: 文字 | 数字; }
>a : 文字 | 数字

    if (x) {
>x : { a: 文字 | 数字; }

        return x.a;
>x.a : 文字 | 数字
>x : { a: 文字 | 数字; }
>a : 文字 | 数字
    }
    
    return undefined;
>undefined : 未定
>类型别名 :=> 未定
}

var x = foo([{a: "str"}]);
>x : 文字
>类型别名 :=> 文字
>foo([{a: "str"}]) : 文字
>类型别名 :=> 文字
>foo : { (bar: { a: 数字; }[]): 数字; (bar: { a: 文字; }[]): 文字; }
>[{a: "str"}] : { a: 文字; }[]
>{a: "str"} : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>"str" : "str"

var y = foo([{a: 100}]);
>y : 数字
>类型别名 :=> 数字
>foo([{a: 100}]) : 数字
>类型别名 :=> 数字
>foo : { (bar: { a: 数字; }[]): 数字; (bar: { a: 文字; }[]): 文字; }
>[{a: 100}] : { a: 数字; }[]
>{a: 100} : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>100 : 100

