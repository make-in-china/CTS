=== tests/cases/compiler/functionOverloads43.ts ===
function foo(bar: { a:number }[]): number;
>foo : { (bar: { a: number; }[]): number; (bar: { a: string; }[]): string; }
>bar : { a: number; }[]
>a : number
>类型别名 :=> 数字

function foo(bar: { a:string }[]): string;
>foo : { (bar: { a: number; }[]): number; (bar: { a: string; }[]): string; }
>bar : { a: string; }[]
>a : string
>类型别名 :=> 文字

function foo([x]: { a:number | string }[]): string | number {
>foo : { (bar: { a: number; }[]): number; (bar: { a: string; }[]): string; }
>x : { a: string | number; }
>a : string | number

    if (x) {
>x : { a: string | number; }

        return x.a;
>x.a : string | number
>x : { a: string | number; }
>a : string | number
    }
    
    return undefined;
>undefined : undefined
>类型别名 :=> 未定
}

var x = foo([{a: "str"}]);
>x : string
>类型别名 :=> 文字
>foo([{a: "str"}]) : string
>类型别名 :=> 文字
>foo : { (bar: { a: number; }[]): number; (bar: { a: string; }[]): string; }
>[{a: "str"}] : { a: string; }[]
>{a: "str"} : { a: string; }
>a : string
>类型别名 :=> 文字
>"str" : "str"

var y = foo([{a: 100}]);
>y : number
>类型别名 :=> 数字
>foo([{a: 100}]) : number
>类型别名 :=> 数字
>foo : { (bar: { a: number; }[]): number; (bar: { a: string; }[]): string; }
>[{a: 100}] : { a: number; }[]
>{a: 100} : { a: number; }
>a : number
>类型别名 :=> 数字
>100 : 100

