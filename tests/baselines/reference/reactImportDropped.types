=== tests/cases/compiler/react.d.ts ===
export = React;
>React : 类为 React

export as namespace React;
>React : 类为 React

declare namespace React {
>React : 类为 React

    function createClass(spec: any): ClassicComponentClass;
>createClass : (spec: 任意) => ClassicComponentClass
>spec : 任意
>类型别名 :=> 任意
>ClassicComponentClass : ClassicComponentClass

    interface ClassicComponentClass {
>ClassicComponentClass : ClassicComponentClass

        new (props?: any): ClassicComponentClass;
>props : 任意
>类型别名 :=> 任意
>ClassicComponentClass : ClassicComponentClass
    }
}

declare global {
>global : 任意
>类型别名 :=> 任意

    namespace JSX {
>JSX : 任意
>类型别名 :=> 任意

        interface ElementAttributesProperty { }
>ElementAttributesProperty : ElementAttributesProperty
    }
}


=== tests/cases/compiler/src/components/TabBar.js ===
export default React.createClass({
>React.createClass({  render() {    return (      null    );  }}) : React.ClassicComponentClass
>React.createClass : (spec: 任意) => React.ClassicComponentClass
>React : 类为 React
>createClass : (spec: 任意) => React.ClassicComponentClass
>{  render() {    return (      null    );  }} : { render(): 任意; }

  render() {
>render : () => 任意

    return (
>(      null    ) : 空值
>类型别名 :=> 空值

      null
>null : 空值
>类型别名 :=> 空值

    );
  }
});

=== tests/cases/compiler/src/modules/navigation/NavigationView.js ===
import TabBar from '../../components/TabBar';
>TabBar : React.ClassicComponentClass

import {layout} from '../../utils/theme'; // <- DO NOT DROP this import
>layout : 任意
>类型别名 :=> 任意

const x = <TabBar height={layout.footerHeight} />;
>x : 任意
>类型别名 :=> 任意
><TabBar height={layout.footerHeight} /> : 任意
>类型别名 :=> 任意
>TabBar : React.ClassicComponentClass
>height : 任意
>类型别名 :=> 任意
>layout.footerHeight : 任意
>类型别名 :=> 任意
>layout : 任意
>类型别名 :=> 任意
>footerHeight : 任意
>类型别名 :=> 任意

