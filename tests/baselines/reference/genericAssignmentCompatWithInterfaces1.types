=== tests/cases/compiler/genericAssignmentCompatWithInterfaces1.ts ===
interface Comparable<T> {
>Comparable : Comparable<T>
>T : T

   compareTo(other: T): number;
>compareTo : (other: T) => 数字
>other : T
>T : T
}
interface I<T> {
>I : I<T>
>T : T

    x: Comparable<T>;
>x : Comparable<T>
>Comparable : Comparable<T>
>T : T
}
interface K<T> {
>K : K<T>
>T : T

   x: A<T>;
>x : A<T>
>A : A<T>
>T : T
}
class A<T> implements Comparable<T> { compareTo(other: T) { return 1; } }
>A : A<T>
>T : T
>Comparable : Comparable<T>
>T : T
>compareTo : (other: T) => 数字
>other : T
>T : T
>1 : 1

var z = { x: new A<number>() };
>z : { x: A<数字>; }
>{ x: new A<number>() } : { x: A<数字>; }
>x : A<数字>
>new A<number>() : A<数字>
>A : 类为 A

var a1: I<string> = { x: new A<number>() };
>a1 : I<文字>
>I : I<T>
>{ x: new A<number>() } : { x: A<数字>; }
>x : A<数字>
>new A<number>() : A<数字>
>A : 类为 A

var a2: I<string> = function (): { x: A<number> } {
>a2 : I<文字>
>I : I<T>
>function (): { x: A<number> } {   var z = { x: new A<number>() }; return z;} () : { x: A<数字>; }
>function (): { x: A<number> } {   var z = { x: new A<number>() }; return z;} : () => { x: A<数字>; }
>x : A<数字>
>A : A<T>

   var z = { x: new A<number>() }; return z;
>z : { x: A<数字>; }
>{ x: new A<number>() } : { x: A<数字>; }
>x : A<数字>
>new A<number>() : A<数字>
>A : 类为 A
>z : { x: A<数字>; }

} ();
var a3: I<string> = z;
>a3 : I<文字>
>I : I<T>
>z : { x: A<数字>; }

var a4: I<string> = <K<number>>z;
>a4 : I<文字>
>I : I<T>
><K<number>>z : K<数字>
>K : K<T>
>z : { x: A<数字>; }
 

