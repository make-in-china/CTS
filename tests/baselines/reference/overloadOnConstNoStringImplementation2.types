=== tests/cases/compiler/overloadOnConstNoStringImplementation2.ts ===
interface I {
>I : I

    x1(a: number, callback: (x: 'hi') => number);
>x1 : (a: number, callback: (x: "hi") => number) => any
>a : number
>类型别名 :=> 数字
>callback : (x: "hi") => number
>x : "hi"
}

class C implements I {
>C : C
>I : I

    x1(a: number, callback: (x: 'hi') => number);
>x1 : (a: number, callback: (x: "hi") => number) => any
>a : number
>类型别名 :=> 数字
>callback : (x: "hi") => number
>x : "hi"

    x1(a: number, callback: (x: any) => number) {
>x1 : (a: number, callback: (x: "hi") => number) => any
>a : number
>类型别名 :=> 数字
>callback : (x: any) => number
>x : any
>类型别名 :=> 任意

        callback('hi');
>callback('hi') : number
>类型别名 :=> 数字
>callback : (x: any) => number
>'hi' : "hi"

        callback('bye');
>callback('bye') : number
>类型别名 :=> 数字
>callback : (x: any) => number
>'bye' : "bye"

        var hm = "hm";
>hm : string
>类型别名 :=> 文字
>"hm" : "hm"

        callback(hm);
>callback(hm) : number
>类型别名 :=> 数字
>callback : (x: any) => number
>hm : string
>类型别名 :=> 文字

        callback(1);
>callback(1) : number
>类型别名 :=> 数字
>callback : (x: any) => number
>1 : 1
    }
}

var c: C;
>c : C
>C : C

c.x1(1, (x: 'hi') => { return 1; } );
>c.x1(1, (x: 'hi') => { return 1; } ) : any
>类型别名 :=> 任意
>c.x1 : (a: number, callback: (x: "hi") => number) => any
>c : C
>x1 : (a: number, callback: (x: "hi") => number) => any
>1 : 1
>(x: 'hi') => { return 1; } : (x: "hi") => number
>x : "hi"
>1 : 1

c.x1(1, (x: 'bye') => { return 1; } ); 
>c.x1(1, (x: 'bye') => { return 1; } ) : any
>类型别名 :=> 任意
>c.x1 : (a: number, callback: (x: "hi") => number) => any
>c : C
>x1 : (a: number, callback: (x: "hi") => number) => any
>1 : 1
>(x: 'bye') => { return 1; } : (x: "bye") => number
>x : "bye"
>1 : 1

c.x1(1, (x: string) => { return 1; } );
>c.x1(1, (x: string) => { return 1; } ) : any
>类型别名 :=> 任意
>c.x1 : (a: number, callback: (x: "hi") => number) => any
>c : C
>x1 : (a: number, callback: (x: "hi") => number) => any
>1 : 1
>(x: string) => { return 1; } : (x: string) => number
>x : string
>类型别名 :=> 文字
>1 : 1

c.x1(1, (x: number) => { return 1; } );
>c.x1(1, (x: number) => { return 1; } ) : any
>类型别名 :=> 任意
>c.x1 : (a: number, callback: (x: "hi") => number) => any
>c : C
>x1 : (a: number, callback: (x: "hi") => number) => any
>1 : 1
>(x: number) => { return 1; } : (x: number) => number
>x : number
>类型别名 :=> 数字
>1 : 1

