=== tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints4.ts ===
class C<T extends Date> {
>C : C<T>
>T : T
>Date : Date

    f() {
>f : () => 任意

        var x: T;
>x : T
>T : T

        var a = x['notHere'](); // should be string
>a : 任意
>类型别名 :=> 任意
>x['notHere']() : 任意
>类型别名 :=> 任意
>x['notHere'] : 任意
>类型别名 :=> 任意
>x : T
>'notHere' : "notHere"

        return a + x.notHere();
>a + x.notHere() : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>x.notHere() : 任意
>类型别名 :=> 任意
>x.notHere : 任意
>类型别名 :=> 任意
>x : T
>notHere : 任意
>类型别名 :=> 任意
    }
}

var r = (new C<Date>()).f();
>r : 任意
>类型别名 :=> 任意
>(new C<Date>()).f() : 任意
>类型别名 :=> 任意
>(new C<Date>()).f : () => 任意
>(new C<Date>()) : C<Date>
>new C<Date>() : C<Date>
>C : 类为 C
>Date : Date
>f : () => 任意

interface I<T extends Date> {
>I : I<T>
>T : T
>Date : Date

    foo: T;
>foo : T
>T : T
}
var i: I<Date>;
>i : I<Date>
>I : I<T>
>Date : Date

var r2 = i.foo.notHere();
>r2 : 任意
>类型别名 :=> 任意
>i.foo.notHere() : 任意
>类型别名 :=> 任意
>i.foo.notHere : 任意
>类型别名 :=> 任意
>i.foo : Date
>i : I<Date>
>foo : Date
>notHere : 任意
>类型别名 :=> 任意

var r2b = i.foo['notHere']();
>r2b : 任意
>类型别名 :=> 任意
>i.foo['notHere']() : 任意
>类型别名 :=> 任意
>i.foo['notHere'] : 任意
>类型别名 :=> 任意
>i.foo : Date
>i : I<Date>
>foo : Date
>'notHere' : "notHere"

var a: {
>a : <T 扩展 Date>() => T

    <T extends Date>(): T;
>T : T
>Date : Date
>T : T
}
var r3: string = a().notHere();
>r3 : 文字
>类型别名 :=> 文字
>a().notHere() : 任意
>类型别名 :=> 任意
>a().notHere : 任意
>类型别名 :=> 任意
>a() : Date
>a : <T 扩展 Date>() => T
>notHere : 任意
>类型别名 :=> 任意

var r3b: string = a()['notHere']();
>r3b : 文字
>类型别名 :=> 文字
>a()['notHere']() : 任意
>类型别名 :=> 任意
>a()['notHere'] : 任意
>类型别名 :=> 任意
>a() : Date
>a : <T 扩展 Date>() => T
>'notHere' : "notHere"

var b = {
>b : 任意
>类型别名 :=> 任意
>{    foo: <T extends Date>(x: T): T => {        var a = x['notHere'](); // should be string        return a + x.notHere();    },    bar: b.foo().notHere()} : { foo: <T 扩展 Date>(x: T) => T; bar: 任意; }

    foo: <T extends Date>(x: T): T => {
>foo : <T 扩展 Date>(x: T) => T
><T extends Date>(x: T): T => {        var a = x['notHere'](); // should be string        return a + x.notHere();    } : <T 扩展 Date>(x: T) => T
>T : T
>Date : Date
>x : T
>T : T
>T : T

        var a = x['notHere'](); // should be string
>a : 任意
>类型别名 :=> 任意
>x['notHere']() : 任意
>类型别名 :=> 任意
>x['notHere'] : 任意
>类型别名 :=> 任意
>x : T
>'notHere' : "notHere"

        return a + x.notHere();
>a + x.notHere() : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>x.notHere() : 任意
>类型别名 :=> 任意
>x.notHere : 任意
>类型别名 :=> 任意
>x : T
>notHere : 任意
>类型别名 :=> 任意

    },
    bar: b.foo().notHere()
>bar : 任意
>类型别名 :=> 任意
>b.foo().notHere() : 任意
>类型别名 :=> 任意
>b.foo().notHere : 任意
>类型别名 :=> 任意
>b.foo() : 任意
>类型别名 :=> 任意
>b.foo : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>notHere : 任意
>类型别名 :=> 任意
}

var r4 = b.foo(new Date());
>r4 : 任意
>类型别名 :=> 任意
>b.foo(new Date()) : 任意
>类型别名 :=> 任意
>b.foo : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>new Date() : Date
>Date : DateConstructor

