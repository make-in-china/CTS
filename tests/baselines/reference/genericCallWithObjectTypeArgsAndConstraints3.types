=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints3.ts ===
// Generic call with constraints infering type parameter from object member properties

class Base {
>Base : Base

    x: string;
>x : 文字
>类型别名 :=> 文字
}
class Derived extends Base {
>Derived : Derived
>Base : Base

    y: string;
>y : 文字
>类型别名 :=> 文字
}
class Derived2 extends Base {
>Derived2 : Derived2
>Base : Base

    z: string;
>z : 文字
>类型别名 :=> 文字
}

function f<T extends Base>(a: { x: T; y: T }) {
>f : <T 扩展 Base>(a: { x: T; y: T; }) => T
>T : T
>Base : Base
>a : { x: T; y: T; }
>x : T
>T : T
>y : T
>T : T

    var r: T;
>r : T
>T : T

    return r;
>r : T
}

var r1 = f({ x: new Derived(), y: new Derived2() }); // error because neither is supertype of the other
>r1 : 任意
>类型别名 :=> 任意
>f({ x: new Derived(), y: new Derived2() }) : 任意
>类型别名 :=> 任意
>f : <T 扩展 Base>(a: { x: T; y: T; }) => T
>{ x: new Derived(), y: new Derived2() } : { x: Derived; y: Derived2; }
>x : Derived
>new Derived() : Derived
>Derived : 类为 Derived
>y : Derived2
>new Derived2() : Derived2
>Derived2 : 类为 Derived2

function f2<T extends Base, U extends { x: T; y: T }>(a: U) {
>f2 : <T 扩展 Base, U 扩展 { x: T; y: T; }>(a: U) => T
>T : T
>Base : Base
>U : U
>x : T
>T : T
>y : T
>T : T
>a : U
>U : U

    var r: T;
>r : T
>T : T

    return r;
>r : T
}

var r2 = f2({ x: new Derived(), y: new Derived2() }); // ok
>r2 : Base
>f2({ x: new Derived(), y: new Derived2() }) : Base
>f2 : <T 扩展 Base, U 扩展 { x: T; y: T; }>(a: U) => T
>{ x: new Derived(), y: new Derived2() } : { x: Derived; y: Derived2; }
>x : Derived
>new Derived() : Derived
>Derived : 类为 Derived
>y : Derived2
>new Derived2() : Derived2
>Derived2 : 类为 Derived2

var r3 = f2({ x: new Derived(), y: new Derived2() }); // ok
>r3 : Base
>f2({ x: new Derived(), y: new Derived2() }) : Base
>f2 : <T 扩展 Base, U 扩展 { x: T; y: T; }>(a: U) => T
>{ x: new Derived(), y: new Derived2() } : { x: Derived; y: Derived2; }
>x : Derived
>new Derived() : Derived
>Derived : 类为 Derived
>y : Derived2
>new Derived2() : Derived2
>Derived2 : 类为 Derived2


function f3<T extends Base>(y: (a: T) => T, x: T) {
>f3 : <T 扩展 Base>(y: (a: T) => T, x: T) => T
>T : T
>Base : Base
>y : (a: T) => T
>a : T
>T : T
>T : T
>x : T
>T : T

    return y(null);
>y(null) : T
>y : (a: T) => T
>null : 空值
>类型别名 :=> 空值
}

// all ok - second argument is processed before x is fixed
var r4 = f3(x => x, new Base());
>r4 : Base
>f3(x => x, new Base()) : Base
>f3 : <T 扩展 Base>(y: (a: T) => T, x: T) => T
>x => x : (x: Base) => Base
>x : Base
>x : Base
>new Base() : Base
>Base : 类为 Base

var r5 = f3(x => x, new Derived());
>r5 : Derived
>f3(x => x, new Derived()) : Derived
>f3 : <T 扩展 Base>(y: (a: T) => T, x: T) => T
>x => x : (x: Derived) => Derived
>x : Derived
>x : Derived
>new Derived() : Derived
>Derived : 类为 Derived

var r6 = f3(x => x, null);
>r6 : 任意
>类型别名 :=> 任意
>f3(x => x, null) : 任意
>类型别名 :=> 任意
>f3 : <T 扩展 Base>(y: (a: T) => T, x: T) => T
>x => x : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

