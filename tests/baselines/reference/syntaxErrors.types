=== tests/cases/conformance/jsdoc/dummyType.d.ts ===
declare class C<T> { t: T }
>C : C<T>
>T : T
>t : T
>T : T

=== tests/cases/conformance/jsdoc/badTypeArguments.js ===
/** @param {C.<>} x */
/** @param {C.<number,>} y */
function f(x, y) {
>f : (x: C<any>, y: C<number>) => any
>x : C<any>
>y : C<number>

    return x.t + y.t;
>x.t + y.t : any
>类型别名 :=> 任意
>x.t : any
>类型别名 :=> 任意
>x : C<any>
>t : any
>类型别名 :=> 任意
>y.t : number
>类型别名 :=> 数字
>y : C<number>
>t : number
>类型别名 :=> 数字
}
var x = f({ t: 1000 }, { t: 3000 });
>x : any
>类型别名 :=> 任意
>f({ t: 1000 }, { t: 3000 }) : any
>类型别名 :=> 任意
>f : (x: C<any>, y: C<number>) => any
>{ t: 1000 } : { t: number; }
>t : number
>类型别名 :=> 数字
>1000 : 1000
>{ t: 3000 } : { t: number; }
>t : number
>类型别名 :=> 数字
>3000 : 3000

