=== tests/cases/compiler/constDeclarations-access3.ts ===
module M {
>M : typeof M

    export const x = 0;
>x : 0
>0 : 0
}

// Errors
M.x = 1;
>M.x = 1 : 1
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>1 : 1

M.x += 2;
>M.x += 2 : any
>类型别名 :=> 任意
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>2 : 2

M.x -= 3;
>M.x -= 3 : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>3 : 3

M.x *= 4;
>M.x *= 4 : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>4 : 4

M.x /= 5;
>M.x /= 5 : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>5 : 5

M.x %= 6;
>M.x %= 6 : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>6 : 6

M.x <<= 7;
>M.x <<= 7 : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>7 : 7

M.x >>= 8;
>M.x >>= 8 : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>8 : 8

M.x >>>= 9;
>M.x >>>= 9 : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>9 : 9

M.x &= 10;
>M.x &= 10 : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>10 : 10

M.x |= 11;
>M.x |= 11 : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>11 : 11

M.x ^= 12;
>M.x ^= 12 : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意
>12 : 12

M.x++;
>M.x++ : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意

M.x--;
>M.x-- : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意

++M.x;
>++M.x : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意

--M.x;
>--M.x : number
>类型别名 :=> 数字
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意

++((M.x));
>++((M.x)) : number
>类型别名 :=> 数字
>((M.x)) : any
>类型别名 :=> 任意
>(M.x) : any
>类型别名 :=> 任意
>M.x : any
>类型别名 :=> 任意
>M : typeof M
>x : any
>类型别名 :=> 任意

M["x"] = 0;
>M["x"] = 0 : 0
>M["x"] : any
>类型别名 :=> 任意
>M : typeof M
>"x" : "x"
>0 : 0

// OK
var a = M.x + 1;
>a : number
>类型别名 :=> 数字
>M.x + 1 : number
>类型别名 :=> 数字
>M.x : number
>类型别名 :=> 数字
>M : typeof M
>x : number
>类型别名 :=> 数字
>1 : 1

function f(v: number) { }
>f : (v: number) => void
>v : number
>类型别名 :=> 数字

f(M.x);
>f(M.x) : void
>类型别名 :=> 无值
>f : (v: number) => void
>M.x : number
>类型别名 :=> 数字
>M : typeof M
>x : number
>类型别名 :=> 数字

if (M.x) { }
>M.x : number
>类型别名 :=> 数字
>M : typeof M
>x : number
>类型别名 :=> 数字

M.x;
>M.x : number
>类型别名 :=> 数字
>M : typeof M
>x : number
>类型别名 :=> 数字

(M.x);
>(M.x) : number
>类型别名 :=> 数字
>M.x : number
>类型别名 :=> 数字
>M : typeof M
>x : number
>类型别名 :=> 数字

-M.x;
>-M.x : number
>类型别名 :=> 数字
>M.x : number
>类型别名 :=> 数字
>M : typeof M
>x : number
>类型别名 :=> 数字

+M.x;
>+M.x : number
>类型别名 :=> 数字
>M.x : number
>类型别名 :=> 数字
>M : typeof M
>x : number
>类型别名 :=> 数字

M.x.toString();
>M.x.toString() : string
>类型别名 :=> 文字
>M.x.toString : (radix?: number) => string
>M.x : number
>类型别名 :=> 数字
>M : typeof M
>x : number
>类型别名 :=> 数字
>toString : (radix?: number) => string

