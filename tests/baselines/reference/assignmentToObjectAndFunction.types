=== tests/cases/compiler/assignmentToObjectAndFunction.ts ===
var errObj: Object = { toString: 0 }; // Error, incompatible toString
>errObj : Object
>Object : Object
>{ toString: 0 } : { toString: 数字; }
>toString : 数字
>类型别名 :=> 数字
>0 : 0

var goodObj: Object = {
>goodObj : Object
>Object : Object
>{    toString(x?) {        return "";    }} : { toString(x?: 任意): 文字; }

    toString(x?) {
>toString : (x?: 任意) => 文字
>x : 任意
>类型别名 :=> 任意

        return "";
>"" : ""
    }
}; // Ok, because toString is a subtype of Object's toString

var errFun: Function = {}; // Error for no call signature
>errFun : Function
>Function : Function
>{} : {}

function foo() { }
>foo : 类为 foo

module foo {
>foo : 类为 foo

    export var boom = 0;
>boom : 数字
>类型别名 :=> 数字
>0 : 0
}

var goodFundule: Function = foo; // ok
>goodFundule : Function
>Function : Function
>foo : 类为 foo

function bar() { }
>bar : 类为 bar

module bar {
>bar : 类为 bar

    export function apply(thisArg: string, argArray?: string) { }
>apply : (thisArg: 文字, argArray?: 文字) => 无值
>thisArg : 文字
>类型别名 :=> 文字
>argArray : 文字
>类型别名 :=> 文字
}

var goodFundule2: Function = bar; // ok
>goodFundule2 : Function
>Function : Function
>bar : 类为 bar

function bad() { }
>bad : 类为 bad

module bad {
>bad : 类为 bad

    export var apply = 0;
>apply : 数字
>类型别名 :=> 数字
>0 : 0
}

var badFundule: Function = bad; // error
>badFundule : Function
>Function : Function
>bad : 类为 bad

