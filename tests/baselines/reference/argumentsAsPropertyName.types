=== tests/cases/compiler/argumentsAsPropertyName.ts ===
// target: es5
type MyType = {
>MyType : MyType

    arguments: Array<string>
>arguments : string[]
>Array : T[]
}

declare function use(s: any);
>use : (s: any) => any
>s : any
>类型别名 :=> 任意

function myFunction(myType: MyType) {
>myFunction : (myType: MyType) => void
>myType : MyType
>MyType : MyType

    for (let i = 0; i < 10; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 10 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>10 : 10
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

        use(myType.arguments[i]);
>use(myType.arguments[i]) : any
>类型别名 :=> 任意
>use : (s: any) => any
>myType.arguments[i] : string
>类型别名 :=> 文字
>myType.arguments : string[]
>myType : MyType
>arguments : string[]
>i : number
>类型别名 :=> 数字

        // create closure so that tsc will turn loop body into function
        const x = 5;
>x : 5
>5 : 5

        [1, 2, 3].forEach(function(j) { use(x); })
>[1, 2, 3].forEach(function(j) { use(x); }) : void
>类型别名 :=> 无值
>[1, 2, 3].forEach : (callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3
>forEach : (callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void
>function(j) { use(x); } : (j: number) => void
>j : number
>类型别名 :=> 数字
>use(x) : any
>类型别名 :=> 任意
>use : (s: any) => any
>x : 5
    }
}
