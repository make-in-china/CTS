=== tests/cases/compiler/argumentsAsPropertyName.ts ===
// target: es5
type MyType = {
>MyType : MyType

    arguments: Array<string>
>arguments : 文字[]
>Array : T[]
}

declare function use(s: any);
>use : (s: 任意) => 任意
>s : 任意
>类型别名 :=> 任意

function myFunction(myType: MyType) {
>myFunction : (myType: MyType) => 无值
>myType : MyType
>MyType : MyType

    for (let i = 0; i < 10; i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < 10 : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>10 : 10
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

        use(myType.arguments[i]);
>use(myType.arguments[i]) : 任意
>类型别名 :=> 任意
>use : (s: 任意) => 任意
>myType.arguments[i] : 文字
>类型别名 :=> 文字
>myType.arguments : 文字[]
>myType : MyType
>arguments : 文字[]
>i : 数字
>类型别名 :=> 数字

        // create closure so that tsc will turn loop body into function
        const x = 5;
>x : 5
>5 : 5

        [1, 2, 3].forEach(function(j) { use(x); })
>[1, 2, 3].forEach(function(j) { use(x); }) : 无值
>类型别名 :=> 无值
>[1, 2, 3].forEach : (callbackfn: (value: 数字, index: 数字, array: 数字[]) => 无值, thisArg?: 任意) => 无值
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>forEach : (callbackfn: (value: 数字, index: 数字, array: 数字[]) => 无值, thisArg?: 任意) => 无值
>function(j) { use(x); } : (j: 数字) => 无值
>j : 数字
>类型别名 :=> 数字
>use(x) : 任意
>类型别名 :=> 任意
>use : (s: 任意) => 任意
>x : 5
    }
}
