=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : 类为 React

interface IUser {
>IUser : IUser

    Name: string;
>Name : 文字
>类型别名 :=> 文字
}

interface IFetchUserProps {
>IFetchUserProps : IFetchUserProps

    children: (user: IUser) => JSX.Element;
>children : (user: IUser) => JSX.Element
>user : IUser
>IUser : IUser
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element
}

class FetchUser extends React.Component<IFetchUserProps, any> {
>FetchUser : FetchUser
>React.Component : React.Component<IFetchUserProps, 任意>
>React : 类为 React
>Component : 类为 React.Component
>IFetchUserProps : IFetchUserProps

    render() {
>render : () => JSX.Element

        return this.state
>this.state            ? this.props.children(this.state.result)            : null : JSX.Element
>this.state : 任意
>类型别名 :=> 任意
>this : 本体
>state : 任意
>类型别名 :=> 任意

            ? this.props.children(this.state.result)
>this.props.children(this.state.result) : JSX.Element
>this.props.children : ((user: IUser) => JSX.Element) | (((user: IUser) => JSX.Element) & 文字) | (((user: IUser) => JSX.Element) & 数字) | (((user: IUser) => JSX.Element) & 为真) | (((user: IUser) => JSX.Element) & 为假) | (((user: IUser) => JSX.Element) & React.ReactElement<任意>) | (((user: IUser) => JSX.Element) & (文字 | 数字 | 真假 | 任意[] | React.ReactElement<任意>)[])
>this.props : IFetchUserProps & { children?: React.ReactNode; }
>this : 本体
>props : IFetchUserProps & { children?: React.ReactNode; }
>children : ((user: IUser) => JSX.Element) | (((user: IUser) => JSX.Element) & 文字) | (((user: IUser) => JSX.Element) & 数字) | (((user: IUser) => JSX.Element) & 为真) | (((user: IUser) => JSX.Element) & 为假) | (((user: IUser) => JSX.Element) & React.ReactElement<任意>) | (((user: IUser) => JSX.Element) & (文字 | 数字 | 真假 | 任意[] | React.ReactElement<任意>)[])
>this.state.result : 任意
>类型别名 :=> 任意
>this.state : 任意
>类型别名 :=> 任意
>this : 本体
>state : 任意
>类型别名 :=> 任意
>result : 任意
>类型别名 :=> 任意

            : null;
>null : 空值
>类型别名 :=> 空值
    }
}

// Ok
function UserName0() {
>UserName0 : () => JSX.Element

    return (
>(        <FetchUser>            { user => (                <h1>{ user.Name }</h1>            ) }        </FetchUser>    ) : JSX.Element

        <FetchUser>
><FetchUser>            { user => (                <h1>{ user.Name }</h1>            ) }        </FetchUser> : JSX.Element
>FetchUser : 类为 FetchUser

            { user => (
>user => (                <h1>{ user.Name }</h1>            ) : (user: IUser) => JSX.Element
>user : IUser
>(                <h1>{ user.Name }</h1>            ) : JSX.Element

                <h1>{ user.Name }</h1>
><h1>{ user.Name }</h1> : JSX.Element
>h1 : 任意
>类型别名 :=> 任意
>user.Name : 文字
>类型别名 :=> 文字
>user : IUser
>Name : 文字
>类型别名 :=> 文字
>h1 : 任意
>类型别名 :=> 任意

            ) }
        </FetchUser>
>FetchUser : 类为 FetchUser

    );
}

function UserName1() {
>UserName1 : () => JSX.Element

    return (
>(        <FetchUser>            { user => (                <h1>{ user.Name }</h1>            ) }        </FetchUser>    ) : JSX.Element

        <FetchUser>
><FetchUser>            { user => (                <h1>{ user.Name }</h1>            ) }        </FetchUser> : JSX.Element
>FetchUser : 类为 FetchUser

            { user => (
>user => (                <h1>{ user.Name }</h1>            ) : (user: IUser) => JSX.Element
>user : IUser
>(                <h1>{ user.Name }</h1>            ) : JSX.Element

                <h1>{ user.Name }</h1>
><h1>{ user.Name }</h1> : JSX.Element
>h1 : 任意
>类型别名 :=> 任意
>user.Name : 文字
>类型别名 :=> 文字
>user : IUser
>Name : 文字
>类型别名 :=> 文字
>h1 : 任意
>类型别名 :=> 任意

            ) }
        </FetchUser>
>FetchUser : 类为 FetchUser

    );
}
