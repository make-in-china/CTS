=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : 类为 React

const decorator = function <T>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {
>decorator : <T>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
>function <T>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component {...props}></Component>} : <T>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
>T : T
>Component : React.StatelessComponent<T>
>React : 任意
>类型别名 :=> 任意
>StatelessComponent : React.StatelessComponent<P>
>T : T
>React : 任意
>类型别名 :=> 任意
>StatelessComponent : React.StatelessComponent<P>
>T : T

    return (props) => <Component {...props}></Component>
>(props) => <Component {...props}></Component> : (props: T & { children?: React.ReactNode; }) => JSX.Element
>props : T & { children?: React.ReactNode; }
><Component {...props}></Component> : JSX.Element
>Component : React.StatelessComponent<T>
>props : T & { children?: React.ReactNode; }
>Component : React.StatelessComponent<T>

};

const decorator2 = function <T extends { x: number }>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {
>decorator2 : <T 扩展 { x: 数字; }>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
>function <T extends { x: number }>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component {...props} x={2} ></Component>} : <T 扩展 { x: 数字; }>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
>T : T
>x : 数字
>类型别名 :=> 数字
>Component : React.StatelessComponent<T>
>React : 任意
>类型别名 :=> 任意
>StatelessComponent : React.StatelessComponent<P>
>T : T
>React : 任意
>类型别名 :=> 任意
>StatelessComponent : React.StatelessComponent<P>
>T : T

    return (props) => <Component {...props} x={2} ></Component>
>(props) => <Component {...props} x={2} ></Component> : (props: T & { children?: React.ReactNode; }) => JSX.Element
>props : T & { children?: React.ReactNode; }
><Component {...props} x={2} ></Component> : JSX.Element
>Component : React.StatelessComponent<T>
>props : T & { children?: React.ReactNode; }
>x : 数字
>类型别名 :=> 数字
>2 : 2
>Component : React.StatelessComponent<T>

};

const decorator3 = function <T extends { x: number }, U extends { x: number } >(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {
>decorator3 : <T 扩展 { x: 数字; }, U 扩展 { x: 数字; }>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
>function <T extends { x: number }, U extends { x: number } >(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component x={2} {...props} ></Component>} : <T 扩展 { x: 数字; }, U 扩展 { x: 数字; }>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
>T : T
>x : 数字
>类型别名 :=> 数字
>U : U
>x : 数字
>类型别名 :=> 数字
>Component : React.StatelessComponent<T>
>React : 任意
>类型别名 :=> 任意
>StatelessComponent : React.StatelessComponent<P>
>T : T
>React : 任意
>类型别名 :=> 任意
>StatelessComponent : React.StatelessComponent<P>
>T : T

    return (props) => <Component x={2} {...props} ></Component>
>(props) => <Component x={2} {...props} ></Component> : (props: T & { children?: React.ReactNode; }) => JSX.Element
>props : T & { children?: React.ReactNode; }
><Component x={2} {...props} ></Component> : JSX.Element
>Component : React.StatelessComponent<T>
>x : 数字
>类型别名 :=> 数字
>2 : 2
>props : T & { children?: React.ReactNode; }
>Component : React.StatelessComponent<T>

};
