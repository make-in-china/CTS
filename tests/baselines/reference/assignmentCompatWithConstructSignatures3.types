=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures3.ts ===
// checking assignment compatibility relations for function types. All of these are valid.

class Base { foo: string; }
>Base : Base
>foo : 文字
>类型别名 :=> 文字

class Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : 文字
>类型别名 :=> 文字

class Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : 文字
>类型别名 :=> 文字

class OtherDerived extends Base { bing: string; }
>OtherDerived : OtherDerived
>Base : Base
>bing : 文字
>类型别名 :=> 文字

var a: new (x: number) => number[];
>a : 新建 (x: 数字) => 数字[]
>x : 数字
>类型别名 :=> 数字

var a2: new (x: number) => string[];
>a2 : 新建 (x: 数字) => 文字[]
>x : 数字
>类型别名 :=> 数字

var a3: new (x: number) => void;
>a3 : 新建 (x: 数字) => 无值
>x : 数字
>类型别名 :=> 数字

var a4: new (x: string, y: number) => string;
>a4 : 新建 (x: 文字, y: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字

var a5: new (x: (arg: string) => number) => string;
>a5 : 新建 (x: (arg: 文字) => 数字) => 文字
>x : (arg: 文字) => 数字
>arg : 文字
>类型别名 :=> 文字

var a6: new (x: (arg: Base) => Derived) => Base;
>a6 : 新建 (x: (arg: Base) => Derived) => Base
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>Base : Base

var a7: new (x: (arg: Base) => Derived) => (r: Base) => Derived;
>a7 : 新建 (x: (arg: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived : Derived

var a8: new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived;
>a8 : 新建 (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>y : (arg2: Base) => Derived
>arg2 : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived : Derived

var a9: new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived;
>a9 : 新建 (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>y : (arg2: Base) => Derived
>arg2 : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived : Derived

var a10: new (...x: Derived[]) => Derived;
>a10 : 新建 (...x: Derived[]) => Derived
>x : Derived[]
>Derived : Derived
>Derived : Derived

var a11: new (x: { foo: string }, y: { foo: string; bar: string }) => Base;
>a11 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>x : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字
>y : { foo: 文字; bar: 文字; }
>foo : 文字
>类型别名 :=> 文字
>bar : 文字
>类型别名 :=> 文字
>Base : Base

var a12: new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
>a12 : 新建 (x: Base[], y: Derived2[]) => Derived[]
>x : Base[]
>Array : T[]
>Base : Base
>y : Derived2[]
>Array : T[]
>Derived2 : Derived2
>Array : T[]
>Derived : Derived

var a13: new (x: Array<Base>, y: Array<Derived>) => Array<Derived>;
>a13 : 新建 (x: Base[], y: Derived[]) => Derived[]
>x : Base[]
>Array : T[]
>Base : Base
>y : Derived[]
>Array : T[]
>Derived : Derived
>Array : T[]
>Derived : Derived

var a14: new (x: { a: string; b: number }) => Object;
>a14 : 新建 (x: { a: 文字; b: 数字; }) => Object
>x : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
>Object : Object

var a15: {
>a15 : { 新建 (x: 数字): 数字[]; 新建 (x: 文字): 文字[]; }

    new (x: number): number[];
>x : 数字
>类型别名 :=> 数字

    new (x: string): string[];
>x : 文字
>类型别名 :=> 文字
}
var a16: {
>a16 : { 新建 <T 扩展 Derived>(x: T): 数字[]; 新建 <U 扩展 Base>(x: U): 数字[]; }

    new <T extends Derived>(x: T): number[];
>T : T
>Derived : Derived
>x : T
>T : T

    new <U extends Base>(x: U): number[];
>U : U
>Base : Base
>x : U
>U : U
}
var a17: {
>a17 : { 新建 (x: 新建 (a: 数字) => 数字): 数字[]; 新建 (x: 新建 (a: 文字) => 文字): 文字[]; }

    new (x: new (a: number) => number): number[];
>x : 新建 (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字

    new (x: new (a: string) => string): string[];
>x : 新建 (a: 文字) => 文字
>a : 文字
>类型别名 :=> 文字

};
var a18: {
>a18 : { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a: 文字): 文字; }): 任意[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a: Date): Date; }): 任意[]; }

    new (x: {
>x : { 新建 (a: 数字): 数字; 新建 (a: 文字): 文字; }

        new (a: number): number;
>a : 数字
>类型别名 :=> 数字

        new (a: string): string;
>a : 文字
>类型别名 :=> 文字

    }): any[];
    new (x: {
>x : { 新建 (a: 真假): 真假; 新建 (a: Date): Date; }

        new (a: boolean): boolean;
>a : 真假
>类型别名 :=> 真假

        new (a: Date): Date;
>a : Date
>Date : Date
>Date : Date

    }): any[];
}

var b: new <T>(x: T) => T[]; 
>b : 新建 <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T

a = b; // ok
>a = b : 新建 <T>(x: T) => T[]
>a : 新建 (x: 数字) => 数字[]
>b : 新建 <T>(x: T) => T[]

b = a; // ok
>b = a : 新建 (x: 数字) => 数字[]
>b : 新建 <T>(x: T) => T[]
>a : 新建 (x: 数字) => 数字[]

var b2: new <T>(x: T) => string[]; 
>b2 : 新建 <T>(x: T) => 文字[]
>T : T
>x : T
>T : T

a2 = b2; // ok 
>a2 = b2 : 新建 <T>(x: T) => 文字[]
>a2 : 新建 (x: 数字) => 文字[]
>b2 : 新建 <T>(x: T) => 文字[]

b2 = a2; // ok
>b2 = a2 : 新建 (x: 数字) => 文字[]
>b2 : 新建 <T>(x: T) => 文字[]
>a2 : 新建 (x: 数字) => 文字[]

var b3: new <T>(x: T) => T; 
>b3 : 新建 <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

a3 = b3; // ok
>a3 = b3 : 新建 <T>(x: T) => T
>a3 : 新建 (x: 数字) => 无值
>b3 : 新建 <T>(x: T) => T

b3 = a3; // ok
>b3 = a3 : 新建 (x: 数字) => 无值
>b3 : 新建 <T>(x: T) => T
>a3 : 新建 (x: 数字) => 无值

var b4: new <T, U>(x: T, y: U) => T; 
>b4 : 新建 <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

a4 = b4; // ok
>a4 = b4 : 新建 <T, U>(x: T, y: U) => T
>a4 : 新建 (x: 文字, y: 数字) => 文字
>b4 : 新建 <T, U>(x: T, y: U) => T

b4 = a4; // ok
>b4 = a4 : 新建 (x: 文字, y: 数字) => 文字
>b4 : 新建 <T, U>(x: T, y: U) => T
>a4 : 新建 (x: 文字, y: 数字) => 文字

var b5: new <T, U>(x: (arg: T) => U) => T; 
>b5 : 新建 <T, U>(x: (arg: T) => U) => T
>T : T
>U : U
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>T : T

a5 = b5; // ok
>a5 = b5 : 新建 <T, U>(x: (arg: T) => U) => T
>a5 : 新建 (x: (arg: 文字) => 数字) => 文字
>b5 : 新建 <T, U>(x: (arg: T) => U) => T

b5 = a5; // ok
>b5 = a5 : 新建 (x: (arg: 文字) => 数字) => 文字
>b5 : 新建 <T, U>(x: (arg: T) => U) => T
>a5 : 新建 (x: (arg: 文字) => 数字) => 文字

var b6: new <T extends Base, U extends Derived>(x: (arg: T) => U) => T; 
>b6 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => T
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>T : T

a6 = b6; // ok
>a6 = b6 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => T
>a6 : 新建 (x: (arg: Base) => Derived) => Base
>b6 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => T

b6 = a6; // ok
>b6 = a6 : 新建 (x: (arg: Base) => Derived) => Base
>b6 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => T
>a6 : 新建 (x: (arg: Base) => Derived) => Base

var b7: new <T extends Base, U extends Derived>(x: (arg: T) => U) => (r: T) => U; 
>b7 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => (r: T) => U
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>r : T
>T : T
>U : U

a7 = b7; // ok
>a7 = b7 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => (r: T) => U
>a7 : 新建 (x: (arg: Base) => Derived) => (r: Base) => Derived
>b7 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => (r: T) => U

b7 = a7; // ok
>b7 = a7 : 新建 (x: (arg: Base) => Derived) => (r: Base) => Derived
>b7 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => (r: T) => U
>a7 : 新建 (x: (arg: Base) => Derived) => (r: Base) => Derived

var b8: new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U;
>b8 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>y : (arg2: T) => U
>arg2 : T
>T : T
>U : U
>r : T
>T : T
>U : U

a8 = b8; // ok
>a8 = b8 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U
>a8 : 新建 (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>b8 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U

b8 = a8; // ok
>b8 = a8 : 新建 (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>b8 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U
>a8 : 新建 (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived

var b9: new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: string; bing: number }) => U) => (r: T) => U; 
>b9 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: { foo: 文字; bing: 数字; }) => U) => (r: T) => U
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>y : (arg2: { foo: 文字; bing: 数字; }) => U
>arg2 : { foo: 文字; bing: 数字; }
>foo : 文字
>类型别名 :=> 文字
>bing : 数字
>类型别名 :=> 数字
>U : U
>r : T
>T : T
>U : U

a9 = b9; // ok
>a9 = b9 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: { foo: 文字; bing: 数字; }) => U) => (r: T) => U
>a9 : 新建 (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>b9 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: { foo: 文字; bing: 数字; }) => U) => (r: T) => U

b9 = a9; // ok
>b9 = a9 : 新建 (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>b9 : 新建 <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: { foo: 文字; bing: 数字; }) => U) => (r: T) => U
>a9 : 新建 (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived

var b10: new <T extends Derived>(...x: T[]) => T; 
>b10 : 新建 <T 扩展 Derived>(...x: T[]) => T
>T : T
>Derived : Derived
>x : T[]
>T : T
>T : T

a10 = b10; // ok
>a10 = b10 : 新建 <T 扩展 Derived>(...x: T[]) => T
>a10 : 新建 (...x: Derived[]) => Derived
>b10 : 新建 <T 扩展 Derived>(...x: T[]) => T

b10 = a10; // ok
>b10 = a10 : 新建 (...x: Derived[]) => Derived
>b10 : 新建 <T 扩展 Derived>(...x: T[]) => T
>a10 : 新建 (...x: Derived[]) => Derived

var b11: new <T extends Base>(x: T, y: T) => T; 
>b11 : 新建 <T 扩展 Base>(x: T, y: T) => T
>T : T
>Base : Base
>x : T
>T : T
>y : T
>T : T
>T : T

a11 = b11; // ok
>a11 = b11 : 新建 <T 扩展 Base>(x: T, y: T) => T
>a11 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>b11 : 新建 <T 扩展 Base>(x: T, y: T) => T

b11 = a11; // ok
>b11 = a11 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>b11 : 新建 <T 扩展 Base>(x: T, y: T) => T
>a11 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base

var b12: new <T extends Array<Base>>(x: Array<Base>, y: T) => Array<Derived>; 
>b12 : 新建 <T 扩展 Base[]>(x: Base[], y: T) => Derived[]
>T : T
>Array : T[]
>Base : Base
>x : Base[]
>Array : T[]
>Base : Base
>y : T
>T : T
>Array : T[]
>Derived : Derived

a12 = b12; // ok
>a12 = b12 : 新建 <T 扩展 Base[]>(x: Base[], y: T) => Derived[]
>a12 : 新建 (x: Base[], y: Derived2[]) => Derived[]
>b12 : 新建 <T 扩展 Base[]>(x: Base[], y: T) => Derived[]

b12 = a12; // ok
>b12 = a12 : 新建 (x: Base[], y: Derived2[]) => Derived[]
>b12 : 新建 <T 扩展 Base[]>(x: Base[], y: T) => Derived[]
>a12 : 新建 (x: Base[], y: Derived2[]) => Derived[]

var b13: new <T extends Array<Derived>>(x: Array<Base>, y: T) => T; 
>b13 : 新建 <T 扩展 Derived[]>(x: Base[], y: T) => T
>T : T
>Array : T[]
>Derived : Derived
>x : Base[]
>Array : T[]
>Base : Base
>y : T
>T : T
>T : T

a13 = b13; // ok
>a13 = b13 : 新建 <T 扩展 Derived[]>(x: Base[], y: T) => T
>a13 : 新建 (x: Base[], y: Derived[]) => Derived[]
>b13 : 新建 <T 扩展 Derived[]>(x: Base[], y: T) => T

b13 = a13; // ok
>b13 = a13 : 新建 (x: Base[], y: Derived[]) => Derived[]
>b13 : 新建 <T 扩展 Derived[]>(x: Base[], y: T) => T
>a13 : 新建 (x: Base[], y: Derived[]) => Derived[]

var b14: new <T>(x: { a: T; b: T }) => T; 
>b14 : 新建 <T>(x: { a: T; b: T; }) => T
>T : T
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
>T : T

a14 = b14; // ok
>a14 = b14 : 新建 <T>(x: { a: T; b: T; }) => T
>a14 : 新建 (x: { a: 文字; b: 数字; }) => Object
>b14 : 新建 <T>(x: { a: T; b: T; }) => T

b14 = a14; // ok
>b14 = a14 : 新建 (x: { a: 文字; b: 数字; }) => Object
>b14 : 新建 <T>(x: { a: T; b: T; }) => T
>a14 : 新建 (x: { a: 文字; b: 数字; }) => Object

var b15: new <T>(x: T) => T[]; 
>b15 : 新建 <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T

a15 = b15; // ok
>a15 = b15 : 新建 <T>(x: T) => T[]
>a15 : { 新建 (x: 数字): 数字[]; 新建 (x: 文字): 文字[]; }
>b15 : 新建 <T>(x: T) => T[]

b15 = a15; // ok
>b15 = a15 : { 新建 (x: 数字): 数字[]; 新建 (x: 文字): 文字[]; }
>b15 : 新建 <T>(x: T) => T[]
>a15 : { 新建 (x: 数字): 数字[]; 新建 (x: 文字): 文字[]; }

var b16: new <T extends Base>(x: T) => number[];
>b16 : 新建 <T 扩展 Base>(x: T) => 数字[]
>T : T
>Base : Base
>x : T
>T : T

a16 = b16; // ok
>a16 = b16 : 新建 <T 扩展 Base>(x: T) => 数字[]
>a16 : { 新建 <T 扩展 Derived>(x: T): 数字[]; 新建 <U 扩展 Base>(x: U): 数字[]; }
>b16 : 新建 <T 扩展 Base>(x: T) => 数字[]

b16 = a16; // ok
>b16 = a16 : { 新建 <T 扩展 Derived>(x: T): 数字[]; 新建 <U 扩展 Base>(x: U): 数字[]; }
>b16 : 新建 <T 扩展 Base>(x: T) => 数字[]
>a16 : { 新建 <T 扩展 Derived>(x: T): 数字[]; 新建 <U 扩展 Base>(x: U): 数字[]; }

var b17: new <T>(x: new (a: T) => T) => T[]; // ok
>b17 : 新建 <T>(x: 新建 (a: T) => T) => T[]
>T : T
>x : 新建 (a: T) => T
>a : T
>T : T
>T : T
>T : T

a17 = b17; // ok
>a17 = b17 : 新建 <T>(x: 新建 (a: T) => T) => T[]
>a17 : { 新建 (x: 新建 (a: 数字) => 数字): 数字[]; 新建 (x: 新建 (a: 文字) => 文字): 文字[]; }
>b17 : 新建 <T>(x: 新建 (a: T) => T) => T[]

b17 = a17; // ok
>b17 = a17 : { 新建 (x: 新建 (a: 数字) => 数字): 数字[]; 新建 (x: 新建 (a: 文字) => 文字): 文字[]; }
>b17 : 新建 <T>(x: 新建 (a: T) => T) => T[]
>a17 : { 新建 (x: 新建 (a: 数字) => 数字): 数字[]; 新建 (x: 新建 (a: 文字) => 文字): 文字[]; }

var b18: new <T>(x: new (a: T) => T) => T[]; 
>b18 : 新建 <T>(x: 新建 (a: T) => T) => T[]
>T : T
>x : 新建 (a: T) => T
>a : T
>T : T
>T : T
>T : T

a18 = b18; // ok
>a18 = b18 : 新建 <T>(x: 新建 (a: T) => T) => T[]
>a18 : { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a: 文字): 文字; }): 任意[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a: Date): Date; }): 任意[]; }
>b18 : 新建 <T>(x: 新建 (a: T) => T) => T[]

b18 = a18; // ok
>b18 = a18 : { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a: 文字): 文字; }): 任意[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a: Date): Date; }): 任意[]; }
>b18 : 新建 <T>(x: 新建 (a: T) => T) => T[]
>a18 : { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a: 文字): 文字; }): 任意[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a: Date): Date; }): 任意[]; }

