=== tests/cases/compiler/relationalOperatorComparable.ts ===
function f(onethree: 1 | 3, two: 2) {
>f : (onethree: 1 | 3, two: 2) => void
>onethree : 1 | 3
>two : 2

    const t = true;
>t : true
>类型别名 :=> 为真
>true : true
>类型别名 :=> 为真

    const f = false;
>f : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假

    let a1 = onethree < two; // ok
>a1 : boolean
>类型别名 :=> 真假
>onethree < two : boolean
>类型别名 :=> 真假
>onethree : 1 | 3
>two : 2

    let a2 = onethree < true; // error, number and boolean
>a2 : boolean
>类型别名 :=> 真假
>onethree < true : boolean
>类型别名 :=> 真假
>onethree : 1 | 3
>true : true
>类型别名 :=> 为真

    let a3 = onethree <= false; // error, number and boolean
>a3 : boolean
>类型别名 :=> 真假
>onethree <= false : boolean
>类型别名 :=> 真假
>onethree : 1 | 3
>false : false
>类型别名 :=> 为假

    let a4 = onethree >= t; // error, number and boolean
>a4 : boolean
>类型别名 :=> 真假
>onethree >= t : boolean
>类型别名 :=> 真假
>onethree : 1 | 3
>t : true
>类型别名 :=> 为真

    let a5 = onethree > f; // error, number and boolean
>a5 : boolean
>类型别名 :=> 真假
>onethree > f : boolean
>类型别名 :=> 真假
>onethree : 1 | 3
>f : false
>类型别名 :=> 为假

    let a6 = true < onethree; // error, boolean and number
>a6 : boolean
>类型别名 :=> 真假
>true < onethree : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>onethree : 1 | 3

    let a7 = false < two; // error, boolean and number
>a7 : boolean
>类型别名 :=> 真假
>false < two : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>two : 2

    let a8 = 'foo' < onethree; // error, string and number
>a8 : boolean
>类型别名 :=> 真假
>'foo' < onethree : boolean
>类型别名 :=> 真假
>'foo' : "foo"
>onethree : 1 | 3

    let a9 = onethree < 1; // ok
>a9 : boolean
>类型别名 :=> 真假
>onethree < 1 : boolean
>类型别名 :=> 真假
>onethree : 1 | 3
>1 : 1

    let a10 = 1 < two; // ok
>a10 : boolean
>类型别名 :=> 真假
>1 < two : boolean
>类型别名 :=> 真假
>1 : 1
>two : 2

    let a11 = 2 < 1; // ok
>a11 : boolean
>类型别名 :=> 真假
>2 < 1 : boolean
>类型别名 :=> 真假
>2 : 2
>1 : 1
}

