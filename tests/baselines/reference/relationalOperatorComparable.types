=== tests/cases/compiler/relationalOperatorComparable.ts ===
function f(onethree: 1 | 3, two: 2) {
>f : (onethree: 1 | 3, two: 2) => 无值
>onethree : 1 | 3
>two : 2

    const t = true;
>t : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真

    const f = false;
>f : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假

    let a1 = onethree < two; // ok
>a1 : 真假
>类型别名 :=> 真假
>onethree < two : 真假
>类型别名 :=> 真假
>onethree : 1 | 3
>two : 2

    let a2 = onethree < true; // error, number and boolean
>a2 : 真假
>类型别名 :=> 真假
>onethree < true : 真假
>类型别名 :=> 真假
>onethree : 1 | 3
>true : 为真
>类型别名 :=> 为真

    let a3 = onethree <= false; // error, number and boolean
>a3 : 真假
>类型别名 :=> 真假
>onethree <= false : 真假
>类型别名 :=> 真假
>onethree : 1 | 3
>false : 为假
>类型别名 :=> 为假

    let a4 = onethree >= t; // error, number and boolean
>a4 : 真假
>类型别名 :=> 真假
>onethree >= t : 真假
>类型别名 :=> 真假
>onethree : 1 | 3
>t : 为真
>类型别名 :=> 为真

    let a5 = onethree > f; // error, number and boolean
>a5 : 真假
>类型别名 :=> 真假
>onethree > f : 真假
>类型别名 :=> 真假
>onethree : 1 | 3
>f : 为假
>类型别名 :=> 为假

    let a6 = true < onethree; // error, boolean and number
>a6 : 真假
>类型别名 :=> 真假
>true < onethree : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>onethree : 1 | 3

    let a7 = false < two; // error, boolean and number
>a7 : 真假
>类型别名 :=> 真假
>false < two : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>two : 2

    let a8 = 'foo' < onethree; // error, string and number
>a8 : 真假
>类型别名 :=> 真假
>'foo' < onethree : 真假
>类型别名 :=> 真假
>'foo' : "foo"
>onethree : 1 | 3

    let a9 = onethree < 1; // ok
>a9 : 真假
>类型别名 :=> 真假
>onethree < 1 : 真假
>类型别名 :=> 真假
>onethree : 1 | 3
>1 : 1

    let a10 = 1 < two; // ok
>a10 : 真假
>类型别名 :=> 真假
>1 < two : 真假
>类型别名 :=> 真假
>1 : 1
>two : 2

    let a11 = 2 < 1; // ok
>a11 : 真假
>类型别名 :=> 真假
>2 < 1 : 真假
>类型别名 :=> 真假
>2 : 2
>1 : 1
}

