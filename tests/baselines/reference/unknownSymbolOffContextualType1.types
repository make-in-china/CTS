=== tests/cases/compiler/unknownSymbolOffContextualType1.ts ===
declare var document: Document;
>document : Document
>Document : Document

interface Document {
>Document : Document

    getElementById(elementId: string): HTMLElement;
>getElementById : (elementId: 文字) => HTMLElement
>elementId : 文字
>类型别名 :=> 文字
>HTMLElement : HTMLElement
}
interface HTMLElement {
>HTMLElement : HTMLElement

    isDisabled: boolean;
>isDisabled : 真假
>类型别名 :=> 真假
}
function getMaxWidth(elementNames: string[]) {
>getMaxWidth : (elementNames: 文字[]) => 任意
>elementNames : 文字[]

    var elements = elementNames.map(function (name) {
>elements : HTMLElement[]
>elementNames.map(function (name) {        return document.getElementById(name);    }) : HTMLElement[]
>elementNames.map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>elementNames : 文字[]
>map : <U>(callbackfn: (value: 文字, index: 数字, array: 文字[]) => U, thisArg?: 任意) => U[]
>function (name) {        return document.getElementById(name);    } : (name: 文字) => HTMLElement
>name : 文字
>类型别名 :=> 文字

        return document.getElementById(name);
>document.getElementById(name) : HTMLElement
>document.getElementById : (elementId: 文字) => HTMLElement
>document : Document
>getElementById : (elementId: 文字) => HTMLElement
>name : 文字
>类型别名 :=> 文字

    });
    var enabled = elements.filter(function (e) {
>enabled : HTMLElement[]
>elements.filter(function (e) {        return !e.isDisabled;    }) : HTMLElement[]
>elements.filter : { <S 扩展 HTMLElement>(callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => value 作为 S, thisArg?: 任意): S[]; (callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => 任意, thisArg?: 任意): HTMLElement[]; }
>elements : HTMLElement[]
>filter : { <S 扩展 HTMLElement>(callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => value 作为 S, thisArg?: 任意): S[]; (callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => 任意, thisArg?: 任意): HTMLElement[]; }
>function (e) {        return !e.isDisabled;    } : (e: HTMLElement) => 真假
>e : HTMLElement

        return !e.isDisabled;
>!e.isDisabled : 真假
>类型别名 :=> 真假
>e.isDisabled : 真假
>类型别名 :=> 真假
>e : HTMLElement
>isDisabled : 真假
>类型别名 :=> 真假

    });
    var widths = enabled.map(function (e) {
>widths : 任意[]
>enabled.map(function (e) {        return e.xyxyxyx;  // error expected here    }) : 任意[]
>enabled.map : <U>(callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => U, thisArg?: 任意) => U[]
>enabled : HTMLElement[]
>map : <U>(callbackfn: (value: HTMLElement, index: 数字, array: HTMLElement[]) => U, thisArg?: 任意) => U[]
>function (e) {        return e.xyxyxyx;  // error expected here    } : (e: HTMLElement) => 任意
>e : HTMLElement

        return e.xyxyxyx;  // error expected here
>e.xyxyxyx : 任意
>类型别名 :=> 任意
>e : HTMLElement
>xyxyxyx : 任意
>类型别名 :=> 任意

    });
    var maxWidth = widths.reduce(function (a, b) {
>maxWidth : 任意
>类型别名 :=> 任意
>widths.reduce(function (a, b) {        return a > b ? a : b;    }) : 任意
>类型别名 :=> 任意
>widths.reduce : { (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意): 任意; (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意, initialValue: 任意): 任意; <U>(callbackfn: (previousValue: U, currentValue: 任意, currentIndex: 数字, array: 任意[]) => U, initialValue: U): U; }
>widths : 任意[]
>reduce : { (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意): 任意; (callbackfn: (previousValue: 任意, currentValue: 任意, currentIndex: 数字, array: 任意[]) => 任意, initialValue: 任意): 任意; <U>(callbackfn: (previousValue: U, currentValue: 任意, currentIndex: 数字, array: 任意[]) => U, initialValue: U): U; }
>function (a, b) {        return a > b ? a : b;    } : (a: 任意, b: 任意) => 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

        return a > b ? a : b;
>a > b ? a : b : 任意
>类型别名 :=> 任意
>a > b : 真假
>类型别名 :=> 真假
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

    });
    return maxWidth;
>maxWidth : 任意
>类型别名 :=> 任意
}

