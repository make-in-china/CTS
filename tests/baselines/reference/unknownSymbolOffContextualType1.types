=== tests/cases/compiler/unknownSymbolOffContextualType1.ts ===
declare var document: Document;
>document : Document
>Document : Document

interface Document {
>Document : Document

    getElementById(elementId: string): HTMLElement;
>getElementById : (elementId: string) => HTMLElement
>elementId : string
>类型别名 :=> 文字
>HTMLElement : HTMLElement
}
interface HTMLElement {
>HTMLElement : HTMLElement

    isDisabled: boolean;
>isDisabled : boolean
>类型别名 :=> 真假
}
function getMaxWidth(elementNames: string[]) {
>getMaxWidth : (elementNames: string[]) => any
>elementNames : string[]

    var elements = elementNames.map(function (name) {
>elements : HTMLElement[]
>elementNames.map(function (name) {        return document.getElementById(name);    }) : HTMLElement[]
>elementNames.map : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>elementNames : string[]
>map : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>function (name) {        return document.getElementById(name);    } : (name: string) => HTMLElement
>name : string
>类型别名 :=> 文字

        return document.getElementById(name);
>document.getElementById(name) : HTMLElement
>document.getElementById : (elementId: string) => HTMLElement
>document : Document
>getElementById : (elementId: string) => HTMLElement
>name : string
>类型别名 :=> 文字

    });
    var enabled = elements.filter(function (e) {
>enabled : HTMLElement[]
>elements.filter(function (e) {        return !e.isDisabled;    }) : HTMLElement[]
>elements.filter : { <S extends HTMLElement>(callbackfn: (value: HTMLElement, index: number, array: HTMLElement[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: HTMLElement, index: number, array: HTMLElement[]) => any, thisArg?: any): HTMLElement[]; }
>elements : HTMLElement[]
>filter : { <S extends HTMLElement>(callbackfn: (value: HTMLElement, index: number, array: HTMLElement[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: HTMLElement, index: number, array: HTMLElement[]) => any, thisArg?: any): HTMLElement[]; }
>function (e) {        return !e.isDisabled;    } : (e: HTMLElement) => boolean
>e : HTMLElement

        return !e.isDisabled;
>!e.isDisabled : boolean
>类型别名 :=> 真假
>e.isDisabled : boolean
>类型别名 :=> 真假
>e : HTMLElement
>isDisabled : boolean
>类型别名 :=> 真假

    });
    var widths = enabled.map(function (e) {
>widths : any[]
>enabled.map(function (e) {        return e.xyxyxyx;  // error expected here    }) : any[]
>enabled.map : <U>(callbackfn: (value: HTMLElement, index: number, array: HTMLElement[]) => U, thisArg?: any) => U[]
>enabled : HTMLElement[]
>map : <U>(callbackfn: (value: HTMLElement, index: number, array: HTMLElement[]) => U, thisArg?: any) => U[]
>function (e) {        return e.xyxyxyx;  // error expected here    } : (e: HTMLElement) => any
>e : HTMLElement

        return e.xyxyxyx;  // error expected here
>e.xyxyxyx : any
>类型别名 :=> 任意
>e : HTMLElement
>xyxyxyx : any
>类型别名 :=> 任意

    });
    var maxWidth = widths.reduce(function (a, b) {
>maxWidth : any
>类型别名 :=> 任意
>widths.reduce(function (a, b) {        return a > b ? a : b;    }) : any
>类型别名 :=> 任意
>widths.reduce : { (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any; (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any; <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) => U, initialValue: U): U; }
>widths : any[]
>reduce : { (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any; (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any; <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) => U, initialValue: U): U; }
>function (a, b) {        return a > b ? a : b;    } : (a: any, b: any) => any
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

        return a > b ? a : b;
>a > b ? a : b : any
>类型别名 :=> 任意
>a > b : boolean
>类型别名 :=> 真假
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

    });
    return maxWidth;
>maxWidth : any
>类型别名 :=> 任意
}

