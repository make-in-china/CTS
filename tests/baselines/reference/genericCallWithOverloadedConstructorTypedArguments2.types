=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithOverloadedConstructorTypedArguments2.ts ===
// Function typed arguments with multiple signatures must be passed an implementation that matches all of them
// Inferences are made quadratic-pairwise to and from these overload sets

module NonGenericParameter {
>NonGenericParameter : 类为 NonGenericParameter

    var a: {
>a : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }

        new(x: boolean): boolean;
>x : 真假
>类型别名 :=> 真假

        new(x: string): string;
>x : 文字
>类型别名 :=> 文字
    }

    function foo4(cb: typeof a) {
>foo4 : (cb: { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }) => { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }
>cb : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }
>a : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }

        return cb;
>cb : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }
    }

    var b: { new <T, U>(x: T): U }
>b : 新建 <T, U>(x: T) => U
>T : T
>U : U
>x : T
>T : T
>U : U

    var r3 = foo4(b); // ok
>r3 : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }
>foo4(b) : { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }
>foo4 : (cb: { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }) => { 新建 (x: 真假): 真假; 新建 (x: 文字): 文字; }
>b : 新建 <T, U>(x: T) => U
}

module GenericParameter {
>GenericParameter : 类为 GenericParameter

    function foo5<T>(cb: { new(x: T): string; new(x: number): T }) {
>foo5 : <T>(cb: { 新建 (x: T): 文字; 新建 (x: 数字): T; }) => { 新建 (x: T): 文字; 新建 (x: 数字): T; }
>T : T
>cb : { 新建 (x: T): 文字; 新建 (x: 数字): T; }
>x : T
>T : T
>x : 数字
>类型别名 :=> 数字
>T : T

        return cb;
>cb : { 新建 (x: T): 文字; 新建 (x: 数字): T; }
    }

    var a: { new <T>(x: T): T };
>a : 新建 <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

    var r6 = foo5(a); // ok
>r6 : { 新建 (x: 任意): 文字; 新建 (x: 数字): 任意; }
>foo5(a) : { 新建 (x: 任意): 文字; 新建 (x: 数字): 任意; }
>foo5 : <T>(cb: { 新建 (x: T): 文字; 新建 (x: 数字): T; }) => { 新建 (x: T): 文字; 新建 (x: 数字): T; }
>a : 新建 <T>(x: T) => T

    function foo6<T>(cb: { new(x: T): string; new(x: T, y?: T): string }) {
>foo6 : <T>(cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>T : T
>cb : { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>x : T
>T : T
>x : T
>T : T
>y : T
>T : T

        return cb;
>cb : { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
    }

    var b: { new <T>(x: T, y: T): string };
>b : 新建 <T>(x: T, y: T) => 文字
>T : T
>x : T
>T : T
>y : T
>T : T

    var r10 = foo6(b); // error
>r10 : 任意
>类型别名 :=> 任意
>foo6(b) : 任意
>类型别名 :=> 任意
>foo6 : <T>(cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>b : 新建 <T>(x: T, y: T) => 文字

    function foo7<T>(x:T, cb: { new(x: T): string; new(x: T, y?: T): string }) {
>foo7 : <T>(x: T, cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>T : T
>x : T
>T : T
>cb : { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>x : T
>T : T
>x : T
>T : T
>y : T
>T : T

        return cb;
>cb : { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
    }

    var r13 = foo7(1, a); // ok
>r13 : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo7(1, a) : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo7 : <T>(x: T, cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>1 : 1
>a : 新建 <T>(x: T) => T

    var c: { new<T>(x: T): number; new<T>(x: number): T; }
>c : { 新建 <T>(x: T): 数字; 新建 <T>(x: 数字): T; }
>T : T
>x : T
>T : T
>T : T
>x : 数字
>类型别名 :=> 数字
>T : T

    var r14 = foo7(1, c); // ok
>r14 : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo7(1, c) : { 新建 (x: 任意): 文字; 新建 (x: 任意, y?: 任意): 文字; }
>foo7 : <T>(x: T, cb: { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }) => { 新建 (x: T): 文字; 新建 (x: T, y?: T): 文字; }
>1 : 1
>c : { 新建 <T>(x: T): 数字; 新建 <T>(x: 数字): T; }
}
