=== tests/cases/compiler/weird.js ===
someFunction(function(BaseClass) {
>someFunction(function(BaseClass) {    'use strict';    const DEFAULT_MESSAGE = "nop!";    class Hello extends BaseClass {        constructor() {            super();            this.foo = "bar";        }        _render(error) {            const message = error.message || DEFAULT_MESSAGE;        }    }}) : any
>类型别名 :=> 任意
>someFunction : any
>类型别名 :=> 任意
>function(BaseClass) {    'use strict';    const DEFAULT_MESSAGE = "nop!";    class Hello extends BaseClass {        constructor() {            super();            this.foo = "bar";        }        _render(error) {            const message = error.message || DEFAULT_MESSAGE;        }    }} : (BaseClass: any) => void
>BaseClass : any
>类型别名 :=> 任意

    'use strict';
>'use strict' : "use strict"

    const DEFAULT_MESSAGE = "nop!";
>DEFAULT_MESSAGE : "nop!"
>"nop!" : "nop!"

    class Hello extends BaseClass {
>Hello : Hello
>BaseClass : any
>类型别名 :=> 任意

        constructor() {
            super();
>super() : void
>类型别名 :=> 无值
>super : any
>类型别名 :=> 任意

            this.foo = "bar";
>this.foo = "bar" : "bar"
>this.foo : string
>类型别名 :=> 文字
>this : this
>foo : string
>类型别名 :=> 文字
>"bar" : "bar"
        }
        _render(error) {
>_render : (error: any) => void
>error : any
>类型别名 :=> 任意

            const message = error.message || DEFAULT_MESSAGE;
>message : any
>类型别名 :=> 任意
>error.message || DEFAULT_MESSAGE : any
>类型别名 :=> 任意
>error.message : any
>类型别名 :=> 任意
>error : any
>类型别名 :=> 任意
>message : any
>类型别名 :=> 任意
>DEFAULT_MESSAGE : "nop!"
        }
    }
});

