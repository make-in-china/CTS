=== tests/cases/compiler/unusedLocalsAndParametersOverloadSignatures.ts ===
export function func(details: number, message: string, ...args: any[]): void;
>func : (details: 数字, message: 文字, ...args: 任意[]) => 无值
>details : 数字
>类型别名 :=> 数字
>message : 文字
>类型别名 :=> 文字
>args : 任意[]

export function func(details: number, message: string): any {
>func : (details: 数字, message: 文字, ...args: 任意[]) => 无值
>details : 数字
>类型别名 :=> 数字
>message : 文字
>类型别名 :=> 文字

    return details + message;
>details + message : 文字
>类型别名 :=> 文字
>details : 数字
>类型别名 :=> 数字
>message : 文字
>类型别名 :=> 文字
}

export class C {
>C : C

    constructor(details: number, message: string, ...args: any[]);
>details : 数字
>类型别名 :=> 数字
>message : 文字
>类型别名 :=> 文字
>args : 任意[]

    constructor(details: number, message: string) {
>details : 数字
>类型别名 :=> 数字
>message : 文字
>类型别名 :=> 文字

        details + message;
>details + message : 文字
>类型别名 :=> 文字
>details : 数字
>类型别名 :=> 数字
>message : 文字
>类型别名 :=> 文字
    }

    method(details: number, message: string, ...args: any[]): void;
>method : (details: 数字, message: 文字, ...args: 任意[]) => 无值
>details : 数字
>类型别名 :=> 数字
>message : 文字
>类型别名 :=> 文字
>args : 任意[]

    method(details: number, message: string): any {
>method : (details: 数字, message: 文字, ...args: 任意[]) => 无值
>details : 数字
>类型别名 :=> 数字
>message : 文字
>类型别名 :=> 文字

        return details + message;
>details + message : 文字
>类型别名 :=> 文字
>details : 数字
>类型别名 :=> 数字
>message : 文字
>类型别名 :=> 文字
    }
}


export function genericFunc<T>(details: number, message: T, ...args: any[]): void;
>genericFunc : <T>(details: 数字, message: T, ...args: 任意[]) => 无值
>T : T
>details : 数字
>类型别名 :=> 数字
>message : T
>T : T
>args : 任意[]

export function genericFunc(details: number, message: any): any {
>genericFunc : <T>(details: 数字, message: T, ...args: 任意[]) => 无值
>details : 数字
>类型别名 :=> 数字
>message : 任意
>类型别名 :=> 任意

    return details + message;
>details + message : 任意
>类型别名 :=> 任意
>details : 数字
>类型别名 :=> 数字
>message : 任意
>类型别名 :=> 任意
}
