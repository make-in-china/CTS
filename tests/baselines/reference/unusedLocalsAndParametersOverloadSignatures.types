=== tests/cases/compiler/unusedLocalsAndParametersOverloadSignatures.ts ===
export function func(details: number, message: string, ...args: any[]): void;
>func : (details: number, message: string, ...args: any[]) => void
>details : number
>类型别名 :=> 数字
>message : string
>类型别名 :=> 文字
>args : any[]

export function func(details: number, message: string): any {
>func : (details: number, message: string, ...args: any[]) => void
>details : number
>类型别名 :=> 数字
>message : string
>类型别名 :=> 文字

    return details + message;
>details + message : string
>类型别名 :=> 文字
>details : number
>类型别名 :=> 数字
>message : string
>类型别名 :=> 文字
}

export class C {
>C : C

    constructor(details: number, message: string, ...args: any[]);
>details : number
>类型别名 :=> 数字
>message : string
>类型别名 :=> 文字
>args : any[]

    constructor(details: number, message: string) {
>details : number
>类型别名 :=> 数字
>message : string
>类型别名 :=> 文字

        details + message;
>details + message : string
>类型别名 :=> 文字
>details : number
>类型别名 :=> 数字
>message : string
>类型别名 :=> 文字
    }

    method(details: number, message: string, ...args: any[]): void;
>method : (details: number, message: string, ...args: any[]) => void
>details : number
>类型别名 :=> 数字
>message : string
>类型别名 :=> 文字
>args : any[]

    method(details: number, message: string): any {
>method : (details: number, message: string, ...args: any[]) => void
>details : number
>类型别名 :=> 数字
>message : string
>类型别名 :=> 文字

        return details + message;
>details + message : string
>类型别名 :=> 文字
>details : number
>类型别名 :=> 数字
>message : string
>类型别名 :=> 文字
    }
}


export function genericFunc<T>(details: number, message: T, ...args: any[]): void;
>genericFunc : <T>(details: number, message: T, ...args: any[]) => void
>T : T
>details : number
>类型别名 :=> 数字
>message : T
>T : T
>args : any[]

export function genericFunc(details: number, message: any): any {
>genericFunc : <T>(details: number, message: T, ...args: any[]) => void
>details : number
>类型别名 :=> 数字
>message : any
>类型别名 :=> 任意

    return details + message;
>details + message : any
>类型别名 :=> 任意
>details : number
>类型别名 :=> 数字
>message : any
>类型别名 :=> 任意
}
