=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesWithVariousOperators01.ts ===
let abc: "ABC" = "ABC";
>abc : "ABC"
>"ABC" : "ABC"

let xyz: "XYZ" = "XYZ";
>xyz : "XYZ"
>"XYZ" : "XYZ"

let abcOrXyz: "ABC" | "XYZ" = abc || xyz;
>abcOrXyz : "ABC" | "XYZ"
>abc || xyz : "ABC" | "XYZ"
>abc : "ABC"
>xyz : "XYZ"

let abcOrXyzOrNumber: "ABC" | "XYZ" | number = abcOrXyz || 100;
>abcOrXyzOrNumber : number | "ABC" | "XYZ"
>abcOrXyz || 100 : "ABC" | "XYZ" | 100
>abcOrXyz : "ABC" | "XYZ"
>100 : 100

let a = "" + abc;
>a : string
>类型别名 :=> 文字
>"" + abc : string
>类型别名 :=> 文字
>"" : ""
>abc : "ABC"

let b = abc + "";
>b : string
>类型别名 :=> 文字
>abc + "" : string
>类型别名 :=> 文字
>abc : "ABC"
>"" : ""

let c = 10 + abc;
>c : string
>类型别名 :=> 文字
>10 + abc : string
>类型别名 :=> 文字
>10 : 10
>abc : "ABC"

let d = abc + 10;
>d : string
>类型别名 :=> 文字
>abc + 10 : string
>类型别名 :=> 文字
>abc : "ABC"
>10 : 10

let e = xyz + abc;
>e : string
>类型别名 :=> 文字
>xyz + abc : string
>类型别名 :=> 文字
>xyz : "XYZ"
>abc : "ABC"

let f = abc + xyz;
>f : string
>类型别名 :=> 文字
>abc + xyz : string
>类型别名 :=> 文字
>abc : "ABC"
>xyz : "XYZ"

let g = true + abc;
>g : string
>类型别名 :=> 文字
>true + abc : string
>类型别名 :=> 文字
>true : true
>类型别名 :=> 为真
>abc : "ABC"

let h = abc + true;
>h : string
>类型别名 :=> 文字
>abc + true : string
>类型别名 :=> 文字
>abc : "ABC"
>true : true
>类型别名 :=> 为真

let i = abc + abcOrXyz + xyz;
>i : string
>类型别名 :=> 文字
>abc + abcOrXyz + xyz : string
>类型别名 :=> 文字
>abc + abcOrXyz : string
>类型别名 :=> 文字
>abc : "ABC"
>abcOrXyz : "ABC" | "XYZ"
>xyz : "XYZ"

let j = abcOrXyz + abcOrXyz;
>j : string
>类型别名 :=> 文字
>abcOrXyz + abcOrXyz : string
>类型别名 :=> 文字
>abcOrXyz : "ABC" | "XYZ"
>abcOrXyz : "ABC" | "XYZ"

let k = +abcOrXyz;
>k : number
>类型别名 :=> 数字
>+abcOrXyz : number
>类型别名 :=> 数字
>abcOrXyz : "ABC" | "XYZ"

let l = -abcOrXyz;
>l : number
>类型别名 :=> 数字
>-abcOrXyz : number
>类型别名 :=> 数字
>abcOrXyz : "ABC" | "XYZ"

let m = abcOrXyzOrNumber + "";
>m : string
>类型别名 :=> 文字
>abcOrXyzOrNumber + "" : string
>类型别名 :=> 文字
>abcOrXyzOrNumber : number | "ABC" | "XYZ"
>"" : ""

let n = "" + abcOrXyzOrNumber;
>n : string
>类型别名 :=> 文字
>"" + abcOrXyzOrNumber : string
>类型别名 :=> 文字
>"" : ""
>abcOrXyzOrNumber : number | "ABC" | "XYZ"

let o = abcOrXyzOrNumber + abcOrXyz;
>o : string
>类型别名 :=> 文字
>abcOrXyzOrNumber + abcOrXyz : string
>类型别名 :=> 文字
>abcOrXyzOrNumber : number | "ABC" | "XYZ"
>abcOrXyz : "ABC" | "XYZ"

let p = abcOrXyz + abcOrXyzOrNumber;
>p : string
>类型别名 :=> 文字
>abcOrXyz + abcOrXyzOrNumber : string
>类型别名 :=> 文字
>abcOrXyz : "ABC" | "XYZ"
>abcOrXyzOrNumber : number | "ABC" | "XYZ"

let q = !abcOrXyzOrNumber;
>q : boolean
>类型别名 :=> 真假
>!abcOrXyzOrNumber : boolean
>类型别名 :=> 真假
>abcOrXyzOrNumber : number | "ABC" | "XYZ"

let r = ~abcOrXyzOrNumber;
>r : number
>类型别名 :=> 数字
>~abcOrXyzOrNumber : number
>类型别名 :=> 数字
>abcOrXyzOrNumber : number | "ABC" | "XYZ"

let s = abcOrXyzOrNumber < abcOrXyzOrNumber;
>s : boolean
>类型别名 :=> 真假
>abcOrXyzOrNumber < abcOrXyzOrNumber : boolean
>类型别名 :=> 真假
>abcOrXyzOrNumber : number | "ABC" | "XYZ"
>abcOrXyzOrNumber : number | "ABC" | "XYZ"

let t = abcOrXyzOrNumber >= abcOrXyz;
>t : boolean
>类型别名 :=> 真假
>abcOrXyzOrNumber >= abcOrXyz : boolean
>类型别名 :=> 真假
>abcOrXyzOrNumber : number | "ABC" | "XYZ"
>abcOrXyz : "ABC" | "XYZ"

let u = abc === abcOrXyz;
>u : boolean
>类型别名 :=> 真假
>abc === abcOrXyz : boolean
>类型别名 :=> 真假
>abc : "ABC"
>abcOrXyz : "ABC" | "XYZ"

let v = abcOrXyz === abcOrXyzOrNumber;
>v : boolean
>类型别名 :=> 真假
>abcOrXyz === abcOrXyzOrNumber : boolean
>类型别名 :=> 真假
>abcOrXyz : "ABC" | "XYZ"
>abcOrXyzOrNumber : number | "ABC" | "XYZ"

