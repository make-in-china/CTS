=== tests/cases/compiler/contextualSignatureInstantiation3.ts ===
function map<T, U>(items: T[], f: (x: T) => U): U[]{
>map : <T, U>(items: T[], f: (x: T) => U) => U[]
>T : T
>U : U
>items : T[]
>T : T
>f : (x: T) => U
>x : T
>T : T
>U : U
>U : U

    return items.map(f);
>items.map(f) : U[]
>items.map : <U>(callbackfn: (value: T, index: 数字, array: T[]) => U, thisArg?: 任意) => U[]
>items : T[]
>map : <U>(callbackfn: (value: T, index: 数字, array: T[]) => U, thisArg?: 任意) => U[]
>f : (x: T) => U
}

function identity<T>(x: T) {
>identity : <T>(x: T) => T
>T : T
>x : T
>T : T

    return x;
>x : T
}

function singleton<T>(x: T) {
>singleton : <T>(x: T) => T[]
>T : T
>x : T
>T : T

    return [x];
>[x] : T[]
>x : T
}

var xs = [1, 2, 3];
>xs : 数字[]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

// Have compiler check that we get the correct types
var v1: number[];
>v1 : 数字[]

var v1 = xs.map(identity);      // Error if not number[]
>v1 : 数字[]
>xs.map(identity) : 数字[]
>xs.map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>xs : 数字[]
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>identity : <T>(x: T) => T

var v1 = map(xs, identity);     // Error if not number[]
>v1 : 数字[]
>map(xs, identity) : 数字[]
>map : <T, U>(items: T[], f: (x: T) => U) => U[]
>xs : 数字[]
>identity : <T>(x: T) => T

var v2: number[][];         
>v2 : 数字[][]

var v2 = xs.map(singleton);     // Error if not number[][]
>v2 : 数字[][]
>xs.map(singleton) : 数字[][]
>xs.map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>xs : 数字[]
>map : <U>(callbackfn: (value: 数字, index: 数字, array: 数字[]) => U, thisArg?: 任意) => U[]
>singleton : <T>(x: T) => T[]

var v2 = map(xs, singleton);    // Error if not number[][]
>v2 : 数字[][]
>map(xs, singleton) : 数字[][]
>map : <T, U>(items: T[], f: (x: T) => U) => U[]
>xs : 数字[]
>singleton : <T>(x: T) => T[]

