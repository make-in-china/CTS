=== tests/cases/conformance/expressions/typeGuards/typeGuardsInProperties.ts ===
// Note that type guards affect types of variables and parameters only and 
// have no effect on members of objects such as properties. 

var num: number;
>num : 数字
>类型别名 :=> 数字

var strOrNum: string | number;
>strOrNum : 文字 | 数字

class C1 {
>C1 : C1

    private pp1: string | number;
>pp1 : 文字 | 数字

    pp2: string | number;
>pp2 : 文字 | 数字

    // Inside public accessor getter
    get pp3() {
>pp3 : 文字 | 数字

        return strOrNum;
>strOrNum : 文字 | 数字
    }
    method() {
>method : () => 无值

        strOrNum = typeof this.pp1 === "string" && this.pp1; // string | number
>strOrNum = typeof this.pp1 === "string" && this.pp1 : 文字
>类型别名 :=> 文字
>strOrNum : 文字 | 数字
>typeof this.pp1 === "string" && this.pp1 : 文字
>类型别名 :=> 文字
>typeof this.pp1 === "string" : 真假
>类型别名 :=> 真假
>typeof this.pp1 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>this.pp1 : 文字 | 数字
>this : 本体
>pp1 : 文字 | 数字
>"string" : "string"
>this.pp1 : 文字
>类型别名 :=> 文字
>this : 本体
>pp1 : 文字
>类型别名 :=> 文字

        strOrNum = typeof this.pp2 === "string" && this.pp2; // string | number
>strOrNum = typeof this.pp2 === "string" && this.pp2 : 文字
>类型别名 :=> 文字
>strOrNum : 文字 | 数字
>typeof this.pp2 === "string" && this.pp2 : 文字
>类型别名 :=> 文字
>typeof this.pp2 === "string" : 真假
>类型别名 :=> 真假
>typeof this.pp2 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>this.pp2 : 文字 | 数字
>this : 本体
>pp2 : 文字 | 数字
>"string" : "string"
>this.pp2 : 文字
>类型别名 :=> 文字
>this : 本体
>pp2 : 文字
>类型别名 :=> 文字

        strOrNum = typeof this.pp3 === "string" && this.pp3; // string | number
>strOrNum = typeof this.pp3 === "string" && this.pp3 : 文字
>类型别名 :=> 文字
>strOrNum : 文字 | 数字
>typeof this.pp3 === "string" && this.pp3 : 文字
>类型别名 :=> 文字
>typeof this.pp3 === "string" : 真假
>类型别名 :=> 真假
>typeof this.pp3 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>this.pp3 : 文字 | 数字
>this : 本体
>pp3 : 文字 | 数字
>"string" : "string"
>this.pp3 : 文字
>类型别名 :=> 文字
>this : 本体
>pp3 : 文字
>类型别名 :=> 文字
    }
}
var c1: C1;
>c1 : C1
>C1 : C1

strOrNum = typeof c1.pp2 === "string" && c1.pp2; // string | number
>strOrNum = typeof c1.pp2 === "string" && c1.pp2 : 文字
>类型别名 :=> 文字
>strOrNum : 文字 | 数字
>typeof c1.pp2 === "string" && c1.pp2 : 文字
>类型别名 :=> 文字
>typeof c1.pp2 === "string" : 真假
>类型别名 :=> 真假
>typeof c1.pp2 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>c1.pp2 : 文字 | 数字
>c1 : C1
>pp2 : 文字 | 数字
>"string" : "string"
>c1.pp2 : 文字
>类型别名 :=> 文字
>c1 : C1
>pp2 : 文字
>类型别名 :=> 文字

strOrNum = typeof c1.pp3 === "string" && c1.pp3; // string | number
>strOrNum = typeof c1.pp3 === "string" && c1.pp3 : 文字
>类型别名 :=> 文字
>strOrNum : 文字 | 数字
>typeof c1.pp3 === "string" && c1.pp3 : 文字
>类型别名 :=> 文字
>typeof c1.pp3 === "string" : 真假
>类型别名 :=> 真假
>typeof c1.pp3 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>c1.pp3 : 文字 | 数字
>c1 : C1
>pp3 : 文字 | 数字
>"string" : "string"
>c1.pp3 : 文字
>类型别名 :=> 文字
>c1 : C1
>pp3 : 文字
>类型别名 :=> 文字

var obj1: {
>obj1 : { x: 文字 | 数字; }

    x: string | number;
>x : 文字 | 数字

};
strOrNum = typeof obj1.x === "string" && obj1.x;  // string | number
>strOrNum = typeof obj1.x === "string" && obj1.x : 文字
>类型别名 :=> 文字
>strOrNum : 文字 | 数字
>typeof obj1.x === "string" && obj1.x : 文字
>类型别名 :=> 文字
>typeof obj1.x === "string" : 真假
>类型别名 :=> 真假
>typeof obj1.x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>obj1.x : 文字 | 数字
>obj1 : { x: 文字 | 数字; }
>x : 文字 | 数字
>"string" : "string"
>obj1.x : 文字
>类型别名 :=> 文字
>obj1 : { x: 文字 | 数字; }
>x : 文字
>类型别名 :=> 文字

