=== tests/cases/compiler/a.ts ===
declare var dec: any;
>dec : 任意
>类型别名 :=> 任意

@dec export class A {
>dec : 任意
>类型别名 :=> 任意
>A : A

}

const o = { a: 1 };
>o : { a: 数字; }
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1

const y = { ...o };
>y : { a: 数字; }
>{ ...o } : { a: 数字; }
>o : { a: 数字; }

=== tests/cases/compiler/tslib.d.ts ===
export declare function __extends(d: Function, b: Function): void;
>__extends : (d: Function, b: Function) => 无值
>d : Function
>Function : Function
>b : Function
>Function : Function

export declare function __decorate(decorators: Function[], target: any, key?: string | symbol, desc?: any): any;
>__decorate : (decorators: Function[], target: 任意, key?: 文字 | 符号, desc?: 任意) => 任意
>decorators : Function[]
>Function : Function
>target : 任意
>类型别名 :=> 任意
>key : 文字 | 符号
>desc : 任意
>类型别名 :=> 任意

export declare function __param(paramIndex: number, decorator: Function): Function;
>__param : (paramIndex: 数字, decorator: Function) => Function
>paramIndex : 数字
>类型别名 :=> 数字
>decorator : Function
>Function : Function
>Function : Function

export declare function __metadata(metadataKey: any, metadataValue: any): Function;
>__metadata : (metadataKey: 任意, metadataValue: 任意) => Function
>metadataKey : 任意
>类型别名 :=> 任意
>metadataValue : 任意
>类型别名 :=> 任意
>Function : Function

export declare function __awaiter(thisArg: any, _arguments: any, P: Function, generator: Function): any;
>__awaiter : (thisArg: 任意, _arguments: 任意, P: Function, generator: Function) => 任意
>thisArg : 任意
>类型别名 :=> 任意
>_arguments : 任意
>类型别名 :=> 任意
>P : Function
>Function : Function
>generator : Function
>Function : Function

