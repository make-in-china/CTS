=== tests/cases/compiler/collisionRestParameterClassMethod.ts ===
class c1 {
>c1 : c1

    public foo(_i: number, ...restParameters) { //_i is error
>foo : (_i: 数字, ...restParameters: 任意[]) => 无值
>_i : 数字
>类型别名 :=> 数字
>restParameters : 任意[]

        var _i = 10; // no error
>_i : 数字
>类型别名 :=> 数字
>10 : 10
    }
    public fooNoError(_i: number) { // no error
>fooNoError : (_i: 数字) => 无值
>_i : 数字
>类型别名 :=> 数字

        var _i = 10; // no error
>_i : 数字
>类型别名 :=> 数字
>10 : 10
    }
    public f4(_i: number, ...rest); // no codegen no error
>f4 : { (_i: 数字, ...rest: 任意[]): 任意; (_i: 文字, ...rest: 任意[]): 任意; }
>_i : 数字
>类型别名 :=> 数字
>rest : 任意[]

    public f4(_i: string, ...rest); // no codegen no error
>f4 : { (_i: 数字, ...rest: 任意[]): 任意; (_i: 文字, ...rest: 任意[]): 任意; }
>_i : 文字
>类型别名 :=> 文字
>rest : 任意[]

    public f4(_i: any, ...rest) { // error
>f4 : { (_i: 数字, ...rest: 任意[]): 任意; (_i: 文字, ...rest: 任意[]): 任意; }
>_i : 任意
>类型别名 :=> 任意
>rest : 任意[]

        var _i: any; // no error
>_i : 任意
>类型别名 :=> 任意
    }

    public f4NoError(_i: number); // no error
>f4NoError : { (_i: 数字): 任意; (_i: 文字): 任意; }
>_i : 数字
>类型别名 :=> 数字

    public f4NoError(_i: string); // no error
>f4NoError : { (_i: 数字): 任意; (_i: 文字): 任意; }
>_i : 文字
>类型别名 :=> 文字

    public f4NoError(_i: any) { // no error
>f4NoError : { (_i: 数字): 任意; (_i: 文字): 任意; }
>_i : 任意
>类型别名 :=> 任意

        var _i: any; // no error
>_i : 任意
>类型别名 :=> 任意
    }
}

declare class c2 {
>c2 : c2

    public foo(_i: number, ...restParameters); // No error - no code gen
>foo : (_i: 数字, ...restParameters: 任意[]) => 任意
>_i : 数字
>类型别名 :=> 数字
>restParameters : 任意[]

    public fooNoError(_i: number); // no error
>fooNoError : (_i: 数字) => 任意
>_i : 数字
>类型别名 :=> 数字

    public f4(_i: number, ...rest); // no codegen no error
>f4 : { (_i: 数字, ...rest: 任意[]): 任意; (_i: 文字, ...rest: 任意[]): 任意; }
>_i : 数字
>类型别名 :=> 数字
>rest : 任意[]

    public f4(_i: string, ...rest); // no codegen no error
>f4 : { (_i: 数字, ...rest: 任意[]): 任意; (_i: 文字, ...rest: 任意[]): 任意; }
>_i : 文字
>类型别名 :=> 文字
>rest : 任意[]

    public f4NoError(_i: number); // no error
>f4NoError : { (_i: 数字): 任意; (_i: 文字): 任意; }
>_i : 数字
>类型别名 :=> 数字

    public f4NoError(_i: string); // no error
>f4NoError : { (_i: 数字): 任意; (_i: 文字): 任意; }
>_i : 文字
>类型别名 :=> 文字
}

class c3 {
>c3 : c3

    public foo(...restParameters) {
>foo : (...restParameters: 任意[]) => 无值
>restParameters : 任意[]

        var _i = 10; // no error
>_i : 数字
>类型别名 :=> 数字
>10 : 10
    }
    public fooNoError() {
>fooNoError : () => 无值

        var _i = 10; // no error
>_i : 数字
>类型别名 :=> 数字
>10 : 10
    }
}
