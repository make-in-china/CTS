=== tests/cases/compiler/typeUsedAsValueError.ts ===
interface Interface {
>Interface : Interface

}

class SomeClass {
>SomeClass : SomeClass

}

type TypeAliasForSomeClass = SomeClass;
>TypeAliasForSomeClass : SomeClass
>SomeClass : SomeClass

type someType = { x: number };
>someType : someType
>x : number
>类型别名 :=> 数字

function acceptsSomeType(a: someType) {
>acceptsSomeType : (a: someType) => void
>a : someType
>someType : someType

}

let one = Interface;
>one : any
>类型别名 :=> 任意
>Interface : any
>类型别名 :=> 任意

let two = InterfaceNotFound;
>two : any
>类型别名 :=> 任意
>InterfaceNotFound : any
>类型别名 :=> 任意

let three = TypeAliasForSomeClass;
>three : any
>类型别名 :=> 任意
>TypeAliasForSomeClass : any
>类型别名 :=> 任意

let four = new TypeAliasForSomeClass();
>four : any
>类型别名 :=> 任意
>new TypeAliasForSomeClass() : any
>类型别名 :=> 任意
>TypeAliasForSomeClass : any
>类型别名 :=> 任意

let five = new TypeAliasForSomeClassNotFound();
>five : any
>类型别名 :=> 任意
>new TypeAliasForSomeClassNotFound() : any
>类型别名 :=> 任意
>TypeAliasForSomeClassNotFound : any
>类型别名 :=> 任意

let six = someType;
>six : any
>类型别名 :=> 任意
>someType : any
>类型别名 :=> 任意

acceptsSomeType(someType);
>acceptsSomeType(someType) : void
>类型别名 :=> 无值
>acceptsSomeType : (a: someType) => void
>someType : any
>类型别名 :=> 任意

acceptsSomeType(someTypeNotFound);
>acceptsSomeType(someTypeNotFound) : void
>类型别名 :=> 无值
>acceptsSomeType : (a: someType) => void
>someTypeNotFound : any
>类型别名 :=> 任意

