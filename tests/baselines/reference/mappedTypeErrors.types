=== tests/cases/conformance/types/mapped/mappedTypeErrors.ts ===
interface Shape {
>Shape : Shape

    name: string;
>name : 文字
>类型别名 :=> 文字

    width: number;
>width : 数字
>类型别名 :=> 数字

    height: number;
>height : 数字
>类型别名 :=> 数字

    visible: boolean;
>visible : 真假
>类型别名 :=> 真假
}

interface Named {
>Named : Named

    name: string;
>name : 文字
>类型别名 :=> 文字
}

interface Point {
>Point : Point

    x: number;
>x : 数字
>类型别名 :=> 数字

    y: number;
>y : 数字
>类型别名 :=> 数字
}

// Constraint checking

type T00 = { [P in P]: string };  // Error
>T00 : T00
>P : P
>P : P

type T01 = { [P in number]: string };  // Error
>T01 : T01
>P : P

type T02 = { [P in Date]: number };  // Error
>T02 : T02
>P : P
>Date : Date

type T03 = Record<Date, number>;  // Error
>T03 : Record<Date, 数字>
>Record : Record<K, T>
>Date : Date

type T10 = Pick<Shape, "name">;
>T10 : Pick<Shape, "name">
>Pick : Pick<T, K>
>Shape : Shape

type T11 = Pick<Shape, "foo">;  // Error
>T11 : Pick<Shape, "foo">
>Pick : Pick<T, K>
>Shape : Shape

type T12 = Pick<Shape, "name" | "foo">;  // Error
>T12 : Pick<Shape, "name" | "foo">
>Pick : Pick<T, K>
>Shape : Shape

type T13 = Pick<Shape, keyof Named>;
>T13 : Pick<Shape, "name">
>Pick : Pick<T, K>
>Shape : Shape
>Named : Named

type T14 = Pick<Shape, keyof Point>;  // Error
>T14 : Pick<Shape, "x" | "y">
>Pick : Pick<T, K>
>Shape : Shape
>Point : Point

type T15 = Pick<Shape, never>;
>T15 : Pick<Shape, 不及>
>Pick : Pick<T, K>
>Shape : Shape

type T16 = Pick<Shape, undefined>;  // Error
>T16 : Pick<Shape, 未定>
>Pick : Pick<T, K>
>Shape : Shape

function f1<T>(x: T) {
>f1 : <T>(x: T) => 无值
>T : T
>x : T
>T : T

    let y: Pick<Shape, T>;  // Error
>y : Pick<Shape, T>
>Pick : Pick<T, K>
>Shape : Shape
>T : T
}

function f2<T extends string | number>(x: T) {
>f2 : <T 扩展 文字 | 数字>(x: T) => 无值
>T : T
>x : T
>T : T

    let y: Pick<Shape, T>;  // Error
>y : Pick<Shape, T>
>Pick : Pick<T, K>
>Shape : Shape
>T : T
}

function f3<T extends keyof Shape>(x: T) {
>f3 : <T 扩展 "name" | "width" | "height" | "visible">(x: T) => 无值
>T : T
>Shape : Shape
>x : T
>T : T

    let y: Pick<Shape, T>;
>y : Pick<Shape, T>
>Pick : Pick<T, K>
>Shape : Shape
>T : T
}

function f4<T extends keyof Named>(x: T) {
>f4 : <T 扩展 "name">(x: T) => 无值
>T : T
>Named : Named
>x : T
>T : T

    let y: Pick<Shape, T>;
>y : Pick<Shape, T>
>Pick : Pick<T, K>
>Shape : Shape
>T : T
}

// Type identity checking

function f10<T>() {
>f10 : <T>() => 无值
>T : T

    type K = keyof T;
>K : 键集 T
>T : T

    var x: { [P in keyof T]: T[P] };
>x : { [P 位于 键集 T]: T[P]; }
>P : P
>T : T
>T : T
>P : P

    var x: { [Q in keyof T]: T[Q] };
>x : { [P 位于 键集 T]: T[P]; }
>Q : Q
>T : T
>T : T
>Q : Q

    var x: { [R in K]: T[R] };
>x : { [P 位于 键集 T]: T[P]; }
>R : R
>K : 键集 T
>T : T
>R : R
}

function f11<T>() {
>f11 : <T>() => 无值
>T : T

    var x: { [P in keyof T]: T[P] };
>x : { [P 位于 键集 T]: T[P]; }
>P : P
>T : T
>T : T
>P : P

    var x: { [P in keyof T]?: T[P] };  // Error
>x : { [P 位于 键集 T]: T[P]; }
>P : P
>T : T
>T : T
>P : P

    var x: { readonly [P in keyof T]: T[P] };  // Error
>x : { [P 位于 键集 T]: T[P]; }
>P : P
>T : T
>T : T
>P : P

    var x: { readonly [P in keyof T]?: T[P] };  // Error
>x : { [P 位于 键集 T]: T[P]; }
>P : P
>T : T
>T : T
>P : P
}

function f12<T>() {
>f12 : <T>() => 无值
>T : T

    var x: { [P in keyof T]: T[P] };
>x : { [P 位于 键集 T]: T[P]; }
>P : P
>T : T
>T : T
>P : P

    var x: { [P in keyof T]: T[P][] };  // Error
>x : { [P 位于 键集 T]: T[P]; }
>P : P
>T : T
>T : T
>P : P
}

// Check that inferences to mapped types are secondary

declare function objAndReadonly<T>(primary: T, secondary: Readonly<T>): T;
>objAndReadonly : <T>(primary: T, secondary: Readonly<T>) => T
>T : T
>primary : T
>T : T
>secondary : Readonly<T>
>Readonly : Readonly<T>
>T : T
>T : T

declare function objAndPartial<T>(primary: T, secondary: Partial<T>): T;
>objAndPartial : <T>(primary: T, secondary: Partial<T>) => T
>T : T
>primary : T
>T : T
>secondary : Partial<T>
>Partial : Partial<T>
>T : T
>T : T

function f20() {
>f20 : () => 无值

    let x1 = objAndReadonly({ x: 0, y: 0 }, { x: 1 });  // Error
>x1 : 任意
>类型别名 :=> 任意
>objAndReadonly({ x: 0, y: 0 }, { x: 1 }) : 任意
>类型别名 :=> 任意
>objAndReadonly : <T>(primary: T, secondary: Readonly<T>) => T
>{ x: 0, y: 0 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

    let x2 = objAndReadonly({ x: 0, y: 0 }, { x: 1, y: 1 });
>x2 : { x: 数字; y: 数字; }
>objAndReadonly({ x: 0, y: 0 }, { x: 1, y: 1 }) : { x: 数字; y: 数字; }
>objAndReadonly : <T>(primary: T, secondary: Readonly<T>) => T
>{ x: 0, y: 0 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0
>{ x: 1, y: 1 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1

    let x3 = objAndReadonly({ x: 0, y: 0 }, { x: 1, y: 1, z: 1 });  // Error
>x3 : 任意
>类型别名 :=> 任意
>objAndReadonly({ x: 0, y: 0 }, { x: 1, y: 1, z: 1 }) : 任意
>类型别名 :=> 任意
>objAndReadonly : <T>(primary: T, secondary: Readonly<T>) => T
>{ x: 0, y: 0 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0
>{ x: 1, y: 1, z: 1 } : { x: 数字; y: 数字; z: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1
>z : 数字
>类型别名 :=> 数字
>1 : 1
}

function f21() {
>f21 : () => 无值

    let x1 = objAndPartial({ x: 0, y: 0 }, { x: 1 });
>x1 : { x: 数字; y: 数字; }
>objAndPartial({ x: 0, y: 0 }, { x: 1 }) : { x: 数字; y: 数字; }
>objAndPartial : <T>(primary: T, secondary: Partial<T>) => T
>{ x: 0, y: 0 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

    let x2 = objAndPartial({ x: 0, y: 0 }, { x: 1, y: 1 });
>x2 : { x: 数字; y: 数字; }
>objAndPartial({ x: 0, y: 0 }, { x: 1, y: 1 }) : { x: 数字; y: 数字; }
>objAndPartial : <T>(primary: T, secondary: Partial<T>) => T
>{ x: 0, y: 0 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0
>{ x: 1, y: 1 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1

    let x3 = objAndPartial({ x: 0, y: 0 }, { x: 1, y: 1, z: 1 });  // Error
>x3 : 任意
>类型别名 :=> 任意
>objAndPartial({ x: 0, y: 0 }, { x: 1, y: 1, z: 1 }) : 任意
>类型别名 :=> 任意
>objAndPartial : <T>(primary: T, secondary: Partial<T>) => T
>{ x: 0, y: 0 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0
>{ x: 1, y: 1, z: 1 } : { x: 数字; y: 数字; z: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1
>z : 数字
>类型别名 :=> 数字
>1 : 1
}

// Verify use of Pick<T, K> for setState functions (#12793)

interface Foo {
>Foo : Foo

    a: string;
>a : 文字
>类型别名 :=> 文字

    b?: number;
>b : 数字 | 未定
}

function setState<T, K extends keyof T>(obj: T, props: Pick<T, K>) {
>setState : <T, K 扩展 键集 T>(obj: T, props: Pick<T, K>) => 无值
>T : T
>K : K
>T : T
>obj : T
>T : T
>props : Pick<T, K>
>Pick : Pick<T, K>
>T : T
>K : K

    for (let k in props) {
>k : K
>props : Pick<T, K>

        obj[k] = props[k];
>obj[k] = props[k] : Pick<T, K>[K]
>obj[k] : T[K]
>obj : T
>k : K
>props[k] : Pick<T, K>[K]
>props : Pick<T, K>
>k : K
    }
}

let foo: Foo = { a: "hello", b: 42 };
>foo : Foo
>Foo : Foo
>{ a: "hello", b: 42 } : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>"hello" : "hello"
>b : 数字
>类型别名 :=> 数字
>42 : 42

setState(foo, { a: "test", b: 43 })
>setState(foo, { a: "test", b: 43 }) : 无值
>类型别名 :=> 无值
>setState : <T, K 扩展 键集 T>(obj: T, props: Pick<T, K>) => 无值
>foo : Foo
>{ a: "test", b: 43 } : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>"test" : "test"
>b : 数字
>类型别名 :=> 数字
>43 : 43

setState(foo, { a: "hi" });
>setState(foo, { a: "hi" }) : 无值
>类型别名 :=> 无值
>setState : <T, K 扩展 键集 T>(obj: T, props: Pick<T, K>) => 无值
>foo : Foo
>{ a: "hi" } : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>"hi" : "hi"

setState(foo, { b: undefined });
>setState(foo, { b: undefined }) : 无值
>类型别名 :=> 无值
>setState : <T, K 扩展 键集 T>(obj: T, props: Pick<T, K>) => 无值
>foo : Foo
>{ b: undefined } : { b: 未定; }
>b : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

setState(foo, { });
>setState(foo, { }) : 无值
>类型别名 :=> 无值
>setState : <T, K 扩展 键集 T>(obj: T, props: Pick<T, K>) => 无值
>foo : Foo
>{ } : {}

setState(foo, foo);
>setState(foo, foo) : 无值
>类型别名 :=> 无值
>setState : <T, K 扩展 键集 T>(obj: T, props: Pick<T, K>) => 无值
>foo : Foo
>foo : Foo

setState(foo, { a: undefined });  // Error
>setState(foo, { a: undefined }) : 任意
>类型别名 :=> 任意
>setState : <T, K 扩展 键集 T>(obj: T, props: Pick<T, K>) => 无值
>foo : Foo
>{ a: undefined } : { a: 未定; }
>a : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

setState(foo, { c: true });  // Error
>setState(foo, { c: true }) : 任意
>类型别名 :=> 任意
>setState : <T, K 扩展 键集 T>(obj: T, props: Pick<T, K>) => 无值
>foo : Foo
>{ c: true } : { c: 真假; }
>c : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

class C<T> {
>C : C<T>
>T : T

    state: T;
>state : T
>T : T

    setState<K extends keyof T>(props: Pick<T, K>) {
>setState : <K 扩展 键集 T>(props: Pick<T, K>) => 无值
>K : K
>T : T
>props : Pick<T, K>
>Pick : Pick<T, K>
>T : T
>K : K

        for (let k in props) {
>k : K
>props : Pick<T, K>

            this.state[k] = props[k];
>this.state[k] = props[k] : Pick<T, K>[K]
>this.state[k] : T[K]
>this.state : T
>this : 本体
>state : T
>k : K
>props[k] : Pick<T, K>[K]
>props : Pick<T, K>
>k : K
        }
    }
}

let c = new C<Foo>();
>c : C<Foo>
>new C<Foo>() : C<Foo>
>C : 类为 C
>Foo : Foo

c.setState({ a: "test", b: 43 });
>c.setState({ a: "test", b: 43 }) : 无值
>类型别名 :=> 无值
>c.setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>c : C<Foo>
>setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>{ a: "test", b: 43 } : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>"test" : "test"
>b : 数字
>类型别名 :=> 数字
>43 : 43

c.setState({ a: "hi" });
>c.setState({ a: "hi" }) : 无值
>类型别名 :=> 无值
>c.setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>c : C<Foo>
>setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>{ a: "hi" } : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>"hi" : "hi"

c.setState({ b: undefined });
>c.setState({ b: undefined }) : 无值
>类型别名 :=> 无值
>c.setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>c : C<Foo>
>setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>{ b: undefined } : { b: 未定; }
>b : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

c.setState({ });
>c.setState({ }) : 无值
>类型别名 :=> 无值
>c.setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>c : C<Foo>
>setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>{ } : {}

c.setState(foo);
>c.setState(foo) : 无值
>类型别名 :=> 无值
>c.setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>c : C<Foo>
>setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>foo : Foo

c.setState({ a: undefined });  // Error
>c.setState({ a: undefined }) : 任意
>类型别名 :=> 任意
>c.setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>c : C<Foo>
>setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>{ a: undefined } : { a: 未定; }
>a : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

c.setState({ c: true });  // Error
>c.setState({ c: true }) : 任意
>类型别名 :=> 任意
>c.setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>c : C<Foo>
>setState : <K 扩展 "a" | "b">(props: Pick<Foo, K>) => 无值
>{ c: true } : { c: 真假; }
>c : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

type T2 = { a?: number, [key: string]: any };
>T2 : T2
>a : 数字 | 未定
>key : 文字
>类型别名 :=> 文字

let x1: T2 = { a: 'no' };  // Error
>x1 : T2
>T2 : T2
>{ a: 'no' } : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>'no' : "no"

let x2: Partial<T2> = { a: 'no' }; // Error
>x2 : Partial<T2>
>Partial : Partial<T>
>T2 : T2
>{ a: 'no' } : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>'no' : "no"

let x3: { [P in keyof T2]: T2[P]} = { a: 'no' };  // Error
>x3 : { [x: 文字]: 任意; a?: 数字 | 未定; }
>P : P
>T2 : T2
>T2 : T2
>P : P
>{ a: 'no' } : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>'no' : "no"

// Repro from #13044

type Foo2<T, F extends keyof T> = {
>Foo2 : Foo2<T, F>
>T : T
>F : F
>T : T

    pf: {[P in F]?: T[P]},
>pf : { [P 位于 F]?: T[P] | 未定; }
>P : P
>F : F
>T : T
>P : P

    pt: {[P in T]?: T[P]}, // note: should be in keyof T
>pt : { [P 位于 T]?: T[P] | 未定; }
>P : P
>T : T
>T : T
>P : P

};
type O = {x: number, y: boolean};
>O : O
>x : 数字
>类型别名 :=> 数字
>y : 真假
>类型别名 :=> 真假

let o: O = {x: 5, y: false};
>o : O
>O : O
>{x: 5, y: false} : { x: 数字; y: 为假; }
>x : 数字
>类型别名 :=> 数字
>5 : 5
>y : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

let f: Foo2<O, 'x'> = {
>f : Foo2<O, "x">
>Foo2 : Foo2<T, F>
>O : O
>{    pf: {x: 7},    pt: {x: 7, y: false},} : { pf: { x: 数字; }; pt: { x: 数字; y: 真假; }; }

    pf: {x: 7},
>pf : { x: 数字; }
>{x: 7} : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>7 : 7

    pt: {x: 7, y: false},
>pt : { x: 数字; y: 真假; }
>{x: 7, y: false} : { x: 数字; y: 真假; }
>x : 数字
>类型别名 :=> 数字
>7 : 7
>y : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

};

