=== tests/cases/compiler/declarationEmitNameConflicts3.ts ===
module M {
>M : 类为 M

    export interface D { }
>D : D

    export module D {
>D : 类为 D

        export function f() { }
>f : () => 无值
    }
    export module C {
>C : 类为 C

        export function f() { }
>f : () => 无值
    }
    export module E {
>E : 类为 E

        export function f() { }
>f : () => 无值
    }
}

module M.P {
>M : 类为 M
>P : 类为 P

    export class C {
>C : C

        static f() { }
>f : () => 无值
    }
    export class E extends C { }
>E : E
>C : C

    export enum D {
>D : D

        f
>f : D
    }
    export var v: M.D; // ok
>v : M.D
>M : 任意
>类型别名 :=> 任意
>D : M.D

    export var w = M.D.f; // error, should be typeof M.D.f
>w : () => 无值
>M.D.f : () => 无值
>M.D : 类为 M.D
>M : 类为 M
>D : 类为 M.D
>f : () => 无值

    export var x = M.C.f; // error, should be typeof M.C.f
>x : () => 无值
>M.C.f : () => 无值
>M.C : 类为 M.C
>M : 类为 M
>C : 类为 M.C
>f : () => 无值

    export var x = M.E.f; // error, should be typeof M.E.f
>x : () => 无值
>M.E.f : () => 无值
>M.E : 类为 M.E
>M : 类为 M
>E : 类为 M.E
>f : () => 无值
}
