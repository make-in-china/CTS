=== tests/cases/conformance/controlFlow/controlFlowBinaryOrExpression.ts ===
let x: string | number | boolean;
>x : 文字 | 数字 | 真假

let cond: boolean;
>cond : 真假
>类型别名 :=> 真假

(x = "") || (x = 0);
>(x = "") || (x = 0) : 0
>(x = "") : ""
>x = "" : ""
>x : 文字 | 数字 | 真假
>"" : ""
>(x = 0) : 0
>x = 0 : 0
>x : 文字 | 数字 | 真假
>0 : 0

x; // string | number
>x : 文字 | 数字

x = "";
>x = "" : ""
>x : 文字 | 数字 | 真假
>"" : ""

cond || (x = 0);
>cond || (x = 0) : 为真 | 0
>cond : 真假
>类型别名 :=> 真假
>(x = 0) : 0
>x = 0 : 0
>x : 文字 | 数字 | 真假
>0 : 0

x; // string | number
>x : 文字 | 数字

export interface NodeList {
>NodeList : NodeList

    length: number;
>length : 数字
>类型别名 :=> 数字
}

export interface HTMLCollection {
>HTMLCollection : HTMLCollection

    length: number;
>length : 数字
>类型别名 :=> 数字
}

declare function isNodeList(sourceObj: any): sourceObj is NodeList;
>isNodeList : (sourceObj: 任意) => sourceObj 作为 NodeList
>sourceObj : 任意
>类型别名 :=> 任意
>sourceObj : 任意
>类型别名 :=> 任意
>NodeList : NodeList

declare function isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection;
>isHTMLCollection : (sourceObj: 任意) => sourceObj 作为 HTMLCollection
>sourceObj : 任意
>类型别名 :=> 任意
>sourceObj : 任意
>类型别名 :=> 任意
>HTMLCollection : HTMLCollection

type EventTargetLike = {a: string} | HTMLCollection | NodeList;
>EventTargetLike : NodeList | HTMLCollection | { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>HTMLCollection : HTMLCollection
>NodeList : NodeList

var sourceObj: EventTargetLike = <any>undefined;
>sourceObj : NodeList | HTMLCollection | { a: 文字; }
>EventTargetLike : NodeList | HTMLCollection | { a: 文字; }
><any>undefined : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

if (isNodeList(sourceObj)) {
>isNodeList(sourceObj) : 真假
>类型别名 :=> 真假
>isNodeList : (sourceObj: 任意) => sourceObj 作为 NodeList
>sourceObj : NodeList | HTMLCollection | { a: 文字; }

    sourceObj.length;
>sourceObj.length : 数字
>类型别名 :=> 数字
>sourceObj : NodeList | HTMLCollection
>length : 数字
>类型别名 :=> 数字
}

if (isHTMLCollection(sourceObj)) {
>isHTMLCollection(sourceObj) : 真假
>类型别名 :=> 真假
>isHTMLCollection : (sourceObj: 任意) => sourceObj 作为 HTMLCollection
>sourceObj : NodeList | HTMLCollection | { a: 文字; }

    sourceObj.length;
>sourceObj.length : 数字
>类型别名 :=> 数字
>sourceObj : NodeList | HTMLCollection
>length : 数字
>类型别名 :=> 数字
}

if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
>isNodeList(sourceObj) || isHTMLCollection(sourceObj) : 真假
>类型别名 :=> 真假
>isNodeList(sourceObj) : 真假
>类型别名 :=> 真假
>isNodeList : (sourceObj: 任意) => sourceObj 作为 NodeList
>sourceObj : NodeList | HTMLCollection | { a: 文字; }
>isHTMLCollection(sourceObj) : 真假
>类型别名 :=> 真假
>isHTMLCollection : (sourceObj: 任意) => sourceObj 作为 HTMLCollection
>sourceObj : { a: 文字; }

    sourceObj.length;
>sourceObj.length : 数字
>类型别名 :=> 数字
>sourceObj : NodeList
>length : 数字
>类型别名 :=> 数字
}

