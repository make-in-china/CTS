=== tests/cases/compiler/objectCreationOfElementAccessExpression.ts ===
class Food {
>Food : Food

    private amount: number;
>amount : number
>类型别名 :=> 数字

    constructor(public name: string) {
>name : string
>类型别名 :=> 文字

        this.amount = 100;
>this.amount = 100 : 100
>this.amount : number
>类型别名 :=> 数字
>this : this
>amount : number
>类型别名 :=> 数字
>100 : 100
    }
    public eat(amountToEat: number): boolean {
>eat : (amountToEat: number) => boolean
>amountToEat : number
>类型别名 :=> 数字

        this.amount -= amountToEat;
>this.amount -= amountToEat : number
>类型别名 :=> 数字
>this.amount : number
>类型别名 :=> 数字
>this : this
>amount : number
>类型别名 :=> 数字
>amountToEat : number
>类型别名 :=> 数字

        if (this.amount <= 0) {
>this.amount <= 0 : boolean
>类型别名 :=> 真假
>this.amount : number
>类型别名 :=> 数字
>this : this
>amount : number
>类型别名 :=> 数字
>0 : 0

            this.amount = 0;
>this.amount = 0 : 0
>this.amount : number
>类型别名 :=> 数字
>this : this
>amount : number
>类型别名 :=> 数字
>0 : 0

            return false;
>false : false
>类型别名 :=> 为假
        }
        else {
            return true;
>true : true
>类型别名 :=> 为真
        }
    }
}
class MonsterFood extends Food {
>MonsterFood : MonsterFood
>Food : Food

    constructor(name: string, public flavor: string) {
>name : string
>类型别名 :=> 文字
>flavor : string
>类型别名 :=> 文字

        super(name);
>super(name) : void
>类型别名 :=> 无值
>super : typeof Food
>name : string
>类型别名 :=> 文字
    }
}
class IceCream extends MonsterFood {
>IceCream : IceCream
>MonsterFood : MonsterFood

    private isDairyFree: boolean;
>isDairyFree : boolean
>类型别名 :=> 真假

    constructor(public flavor: string) {
>flavor : string
>类型别名 :=> 文字

        super("Ice Cream", flavor);
>super("Ice Cream", flavor) : void
>类型别名 :=> 无值
>super : typeof MonsterFood
>"Ice Cream" : "Ice Cream"
>flavor : string
>类型别名 :=> 文字
    }
}
class Cookie extends MonsterFood {
>Cookie : Cookie
>MonsterFood : MonsterFood

    constructor(public flavor: string, public isGlutenFree: boolean) {
>flavor : string
>类型别名 :=> 文字
>isGlutenFree : boolean
>类型别名 :=> 真假

        super("Cookie", flavor);
>super("Cookie", flavor) : void
>类型别名 :=> 无值
>super : typeof MonsterFood
>"Cookie" : "Cookie"
>flavor : string
>类型别名 :=> 文字
    }
}
class PetFood extends Food {
>PetFood : PetFood
>Food : Food

    constructor(name: string, public whereToBuy: number) {
>name : string
>类型别名 :=> 文字
>whereToBuy : number
>类型别名 :=> 数字

        super(name);
>super(name) : void
>类型别名 :=> 无值
>super : typeof Food
>name : string
>类型别名 :=> 文字
    }
}
class ExpensiveOrganicDogFood extends PetFood {
>ExpensiveOrganicDogFood : ExpensiveOrganicDogFood
>PetFood : PetFood

    constructor(public whereToBuy: number) {
>whereToBuy : number
>类型别名 :=> 数字

        super("Origen", whereToBuy);
>super("Origen", whereToBuy) : void
>类型别名 :=> 无值
>super : typeof PetFood
>"Origen" : "Origen"
>whereToBuy : number
>类型别名 :=> 数字
    }
}
class ExpensiveOrganicCatFood extends PetFood {
>ExpensiveOrganicCatFood : ExpensiveOrganicCatFood
>PetFood : PetFood

    constructor(public whereToBuy: number, public containsFish: boolean) {
>whereToBuy : number
>类型别名 :=> 数字
>containsFish : boolean
>类型别名 :=> 真假

        super("Nature's Logic", whereToBuy);
>super("Nature's Logic", whereToBuy) : void
>类型别名 :=> 无值
>super : typeof PetFood
>"Nature's Logic" : "Nature's Logic"
>whereToBuy : number
>类型别名 :=> 数字
    }
}
class Slug {
>Slug : Slug

    // This is NOT a food!!!
}

// ElementAccessExpressions can only contain one expression.  There should be a parse error here.
var foods = new PetFood[new IceCream('Mint chocolate chip') , Cookie('Chocolate chip', false) , new Cookie('Peanut butter', true)];
>foods : any
>类型别名 :=> 任意
>new PetFood[new IceCream('Mint chocolate chip') , Cookie('Chocolate chip', false) , new Cookie('Peanut butter', true)] : any
>类型别名 :=> 任意
>PetFood[new IceCream('Mint chocolate chip') , Cookie('Chocolate chip', false) , new Cookie('Peanut butter', true)] : any
>类型别名 :=> 任意
>PetFood : typeof PetFood
>new IceCream('Mint chocolate chip') , Cookie('Chocolate chip', false) , new Cookie('Peanut butter', true) : Cookie
>new IceCream('Mint chocolate chip') , Cookie('Chocolate chip', false) : any
>类型别名 :=> 任意
>new IceCream('Mint chocolate chip') : IceCream
>IceCream : typeof IceCream
>'Mint chocolate chip' : "Mint chocolate chip"
>Cookie('Chocolate chip', false) : any
>类型别名 :=> 任意
>Cookie : typeof Cookie
>'Chocolate chip' : "Chocolate chip"
>false : false
>类型别名 :=> 为假
>new Cookie('Peanut butter', true) : Cookie
>Cookie : typeof Cookie
>'Peanut butter' : "Peanut butter"
>true : true
>类型别名 :=> 为真

var foods2: MonsterFood[] = new PetFood[new IceCream('Mint chocolate chip') , Cookie('Chocolate chip', false) , new Cookie('Peanut butter', true)];
>foods2 : MonsterFood[]
>MonsterFood : MonsterFood
>new PetFood[new IceCream('Mint chocolate chip') , Cookie('Chocolate chip', false) , new Cookie('Peanut butter', true)] : any
>类型别名 :=> 任意
>PetFood[new IceCream('Mint chocolate chip') , Cookie('Chocolate chip', false) , new Cookie('Peanut butter', true)] : any
>类型别名 :=> 任意
>PetFood : typeof PetFood
>new IceCream('Mint chocolate chip') , Cookie('Chocolate chip', false) , new Cookie('Peanut butter', true) : Cookie
>new IceCream('Mint chocolate chip') , Cookie('Chocolate chip', false) : any
>类型别名 :=> 任意
>new IceCream('Mint chocolate chip') : IceCream
>IceCream : typeof IceCream
>'Mint chocolate chip' : "Mint chocolate chip"
>Cookie('Chocolate chip', false) : any
>类型别名 :=> 任意
>Cookie : typeof Cookie
>'Chocolate chip' : "Chocolate chip"
>false : false
>类型别名 :=> 为假
>new Cookie('Peanut butter', true) : Cookie
>Cookie : typeof Cookie
>'Peanut butter' : "Peanut butter"
>true : true
>类型别名 :=> 为真

