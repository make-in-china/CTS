=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : typeof React

type TextProps = { editable: false }
>TextProps : { editable: false; } | { editable: true; onEdit: (newText: string) => void; }
>editable : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假

               | { editable: true, onEdit: (newText: string) => void };
>editable : true
>类型别名 :=> 为真
>true : true
>类型别名 :=> 为真
>onEdit : (newText: string) => void
>newText : string
>类型别名 :=> 文字

class TextComponent extends React.Component<TextProps, {}> {
>TextComponent : TextComponent
>React.Component : React.Component<{ editable: false; } | { editable: true; onEdit: (newText: string) => void; }, {}>
>React : typeof React
>Component : typeof React.Component
>TextProps : { editable: false; } | { editable: true; onEdit: (newText: string) => void; }

    render() {
>render : () => JSX.Element

        return <span>Some Text..</span>;
><span>Some Text..</span> : JSX.Element
>span : any
>类型别名 :=> 任意
>span : any
>类型别名 :=> 任意
    }
}

// Error
let x = <TextComponent editable={true} />
>x : JSX.Element
><TextComponent editable={true} /> : JSX.Element
>TextComponent : typeof TextComponent
>editable : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

const textProps: TextProps = {
>textProps : { editable: false; } | { editable: true; onEdit: (newText: string) => void; }
>TextProps : { editable: false; } | { editable: true; onEdit: (newText: string) => void; }
>{    editable: false} : { editable: false; }

    editable: false
>editable : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

};
