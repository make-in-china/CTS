=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignatures.ts ===
// void returning call signatures can be assigned a non-void returning call signature that otherwise matches

interface T {
>T : T

    (x: number): void;
>x : 数字
>类型别名 :=> 数字
}
var t: T;
>t : T
>T : T

var a: { (x: number): void };
>a : (x: 数字) => 无值
>x : 数字
>类型别名 :=> 数字

t = a;
>t = a : (x: 数字) => 无值
>t : T
>a : (x: 数字) => 无值

a = t;
>a = t : T
>a : (x: 数字) => 无值
>t : T

interface S {
>S : S

    (x: number): string;
>x : 数字
>类型别名 :=> 数字
}
var s: S;
>s : S
>S : S

var a2: { (x: number): string };
>a2 : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字

t = s;
>t = s : S
>t : T
>s : S

t = a2;
>t = a2 : (x: 数字) => 文字
>t : T
>a2 : (x: 数字) => 文字

a = s;
>a = s : S
>a : (x: 数字) => 无值
>s : S

a = a2;
>a = a2 : (x: 数字) => 文字
>a : (x: 数字) => 无值
>a2 : (x: 数字) => 文字

t = <T>(x: T) => 1;
>t = <T>(x: T) => 1 : <T>(x: T) => 数字
>t : T
><T>(x: T) => 1 : <T>(x: T) => 数字
>T : T
>x : T
>T : T
>1 : 1

t = () => 1;
>t = () => 1 : () => 数字
>t : T
>() => 1 : () => 数字
>1 : 1

t = function (x: number) { return ''; }
>t = function (x: number) { return ''; } : (x: 数字) => 文字
>t : T
>function (x: number) { return ''; } : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>'' : ""

a = <T>(x: T) => 1;
>a = <T>(x: T) => 1 : <T>(x: T) => 数字
>a : (x: 数字) => 无值
><T>(x: T) => 1 : <T>(x: T) => 数字
>T : T
>x : T
>T : T
>1 : 1

a = () => 1;
>a = () => 1 : () => 数字
>a : (x: 数字) => 无值
>() => 1 : () => 数字
>1 : 1

a = function (x: number) { return ''; }
>a = function (x: number) { return ''; } : (x: 数字) => 文字
>a : (x: 数字) => 无值
>function (x: number) { return ''; } : (x: 数字) => 文字
>x : 数字
>类型别名 :=> 数字
>'' : ""

interface S2 {
>S2 : S2

    (x: string): void;
>x : 文字
>类型别名 :=> 文字
}
var s2: S2;
>s2 : S2
>S2 : S2

var a3: { (x: string): void };
>a3 : (x: 文字) => 无值
>x : 文字
>类型别名 :=> 文字

// these are errors
t = s2;
>t = s2 : S2
>t : T
>s2 : S2

t = a3;
>t = a3 : (x: 文字) => 无值
>t : T
>a3 : (x: 文字) => 无值

t = (x: string) => 1;
>t = (x: string) => 1 : (x: 文字) => 数字
>t : T
>(x: string) => 1 : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>1 : 1

t = function (x: string) { return ''; }
>t = function (x: string) { return ''; } : (x: 文字) => 文字
>t : T
>function (x: string) { return ''; } : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>'' : ""

a = s2;
>a = s2 : S2
>a : (x: 数字) => 无值
>s2 : S2

a = a3;
>a = a3 : (x: 文字) => 无值
>a : (x: 数字) => 无值
>a3 : (x: 文字) => 无值

a = (x: string) => 1;
>a = (x: string) => 1 : (x: 文字) => 数字
>a : (x: 数字) => 无值
>(x: string) => 1 : (x: 文字) => 数字
>x : 文字
>类型别名 :=> 文字
>1 : 1

a = function (x: string) { return ''; }
>a = function (x: string) { return ''; } : (x: 文字) => 文字
>a : (x: 数字) => 无值
>function (x: string) { return ''; } : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>'' : ""

