=== tests/cases/compiler/external.ts ===
export class A { }
>A : A

export class B extends A { }
>B : B
>A : A

declare var dec: any;
>dec : 任意
>类型别名 :=> 任意

@dec
>dec : 任意
>类型别名 :=> 任意

class C {
>C : C

    method(@dec x: number) {
>method : (x: 数字) => 无值
>dec : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
    }
}

function id<T>(x: T) {
>id : <T>(x: T) => T
>T : T
>x : T
>T : T

    return x;
>x : T
}

export const result = id`hello world`;
>result : TemplateStringsArray
>id`hello world` : TemplateStringsArray
>id : <T>(x: T) => T
>`hello world` : "hello world"

=== tests/cases/compiler/script.ts ===
class A { }
>A : A

class B extends A { }
>B : B
>A : A

declare var dec: any;
>dec : 任意
>类型别名 :=> 任意

@dec
>dec : 任意
>类型别名 :=> 任意

class C {
>C : C

    method(@dec x: number) {
>method : (x: 数字) => 无值
>dec : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
    }
}

function id<T>(x: T) {
>id : <T>(x: T) => T
>T : T
>x : T
>T : T

    return x;
>x : T
}

const result = id`hello world`;
>result : TemplateStringsArray
>id`hello world` : TemplateStringsArray
>id : <T>(x: T) => T
>`hello world` : "hello world"

=== tests/cases/compiler/tslib.d.ts ===
export declare function __extends(d: Function, b: Function): void;
>__extends : (d: Function, b: Function) => 无值
>d : Function
>Function : Function
>b : Function
>Function : Function

export declare function __assign(t: any, ...sources: any[]): any;
>__assign : (t: 任意, ...sources: 任意[]) => 任意
>t : 任意
>类型别名 :=> 任意
>sources : 任意[]

export declare function __decorate(decorators: Function[], target: any, key?: string | symbol, desc?: any): any;
>__decorate : (decorators: Function[], target: 任意, key?: 文字 | 符号, desc?: 任意) => 任意
>decorators : Function[]
>Function : Function
>target : 任意
>类型别名 :=> 任意
>key : 文字 | 符号
>desc : 任意
>类型别名 :=> 任意

export declare function __param(paramIndex: number, decorator: Function): Function;
>__param : (paramIndex: 数字, decorator: Function) => Function
>paramIndex : 数字
>类型别名 :=> 数字
>decorator : Function
>Function : Function
>Function : Function

export declare function __metadata(metadataKey: any, metadataValue: any): Function;
>__metadata : (metadataKey: 任意, metadataValue: 任意) => Function
>metadataKey : 任意
>类型别名 :=> 任意
>metadataValue : 任意
>类型别名 :=> 任意
>Function : Function

export declare function __awaiter(thisArg: any, _arguments: any, P: Function, generator: Function): any;
>__awaiter : (thisArg: 任意, _arguments: 任意, P: Function, generator: Function) => 任意
>thisArg : 任意
>类型别名 :=> 任意
>_arguments : 任意
>类型别名 :=> 任意
>P : Function
>Function : Function
>generator : Function
>Function : Function

export declare function __makeTemplateObject(cooked: string[], raw: string[]): TemplateStringsArray;
>__makeTemplateObject : (cooked: 文字[], raw: 文字[]) => TemplateStringsArray
>cooked : 文字[]
>raw : 文字[]
>TemplateStringsArray : TemplateStringsArray

