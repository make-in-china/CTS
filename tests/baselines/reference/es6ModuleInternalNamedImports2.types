=== tests/cases/compiler/es6ModuleInternalNamedImports2.ts ===
export module M {
>M : 类为 M

    // variable
    export var M_V = 0;
>M_V : 数字
>类型别名 :=> 数字
>0 : 0

    // interface
    export interface M_I { }
>M_I : M_I

    //calss
    export class M_C { }
>M_C : M_C

    // instantiated module
    export module M_M { var x; }
>M_M : 类为 M_M
>x : 任意
>类型别名 :=> 任意

    // uninstantiated module
    export module M_MU { }
>M_MU : 任意
>类型别名 :=> 任意

    // function
    export function M_F() { }
>M_F : () => 无值

    // enum
    export enum M_E { }
>M_E : M_E

    // type
    export type M_T = number;
>M_T : 数字
>类型别名 :=> 数字

    // alias
    export import M_A = M_M;
>M_A : 类为 M_M
>M_M : 类为 M_M
}

export module M {
>M : 类为 M

    // Reexports
    export {M_V as v};
>M_V : 数字
>类型别名 :=> 数字
>v : 数字
>类型别名 :=> 数字

    export {M_I as i};
>M_I : 任意
>类型别名 :=> 任意
>i : 任意
>类型别名 :=> 任意

    export {M_C as c};
>M_C : 类为 M_C
>c : 类为 M_C

    export {M_M as m};
>M_M : 类为 M_M
>m : 类为 M_M

    export {M_MU as mu};
>M_MU : 任意
>类型别名 :=> 任意
>mu : 任意
>类型别名 :=> 任意

    export {M_F as f};
>M_F : () => 无值
>f : () => 无值

    export {M_E as e};
>M_E : 类为 M_E
>e : 类为 M_E

    export {M_A as a};
>M_A : 类为 M_M
>a : 类为 M_M
}

