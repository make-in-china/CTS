=== tests/cases/conformance/types/union/unionTypeCallSignatures3.ts ===
function f1(s: string) { }
>f1 : (s: string) => void
>s : string
>类型别名 :=> 文字

function f2(s?: string) { }
>f2 : (s?: string) => void
>s : string
>类型别名 :=> 文字

function f3(...s: string[]) { }
>f3 : (...s: string[]) => void
>s : string[]

function f4(s: string, s2?: string) { }
>f4 : (s: string, s2?: string) => void
>s : string
>类型别名 :=> 文字
>s2 : string
>类型别名 :=> 文字

function f5(s?: string, n?: number) { }
>f5 : (s?: string, n?: number) => void
>s : string
>类型别名 :=> 文字
>n : number
>类型别名 :=> 数字

function f6(s?: string, ...n: number[]) { }
>f6 : (s?: string, ...n: number[]) => void
>s : string
>类型别名 :=> 文字
>n : number[]

function f7(s: string, ...sRest: string[]) { }
>f7 : (s: string, ...sRest: string[]) => void
>s : string
>类型别名 :=> 文字
>sRest : string[]

var fUnion: typeof f1 | typeof f2 | typeof f3 | typeof f4 | typeof f5 | typeof f6 | typeof f7;
>fUnion : ((s: string) => void) | ((s?: string) => void) | ((...s: string[]) => void) | ((s: string, s2?: string) => void) | ((s?: string, n?: number) => void) | ((s?: string, ...n: number[]) => void) | ((s: string, ...sRest: string[]) => void)
>f1 : (s: string) => void
>f2 : (s?: string) => void
>f3 : (...s: string[]) => void
>f4 : (s: string, s2?: string) => void
>f5 : (s?: string, n?: number) => void
>f6 : (s?: string, ...n: number[]) => void
>f7 : (s: string, ...sRest: string[]) => void

fUnion(""); // All constituents can be called by passing a single string.
>fUnion("") : void
>类型别名 :=> 无值
>fUnion : ((s: string) => void) | ((s?: string) => void) | ((...s: string[]) => void) | ((s: string, s2?: string) => void) | ((s?: string, n?: number) => void) | ((s?: string, ...n: number[]) => void) | ((s: string, ...sRest: string[]) => void)
>"" : ""

