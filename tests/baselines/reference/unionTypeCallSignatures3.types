=== tests/cases/conformance/types/union/unionTypeCallSignatures3.ts ===
function f1(s: string) { }
>f1 : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字

function f2(s?: string) { }
>f2 : (s?: 文字) => 无值
>s : 文字
>类型别名 :=> 文字

function f3(...s: string[]) { }
>f3 : (...s: 文字[]) => 无值
>s : 文字[]

function f4(s: string, s2?: string) { }
>f4 : (s: 文字, s2?: 文字) => 无值
>s : 文字
>类型别名 :=> 文字
>s2 : 文字
>类型别名 :=> 文字

function f5(s?: string, n?: number) { }
>f5 : (s?: 文字, n?: 数字) => 无值
>s : 文字
>类型别名 :=> 文字
>n : 数字
>类型别名 :=> 数字

function f6(s?: string, ...n: number[]) { }
>f6 : (s?: 文字, ...n: 数字[]) => 无值
>s : 文字
>类型别名 :=> 文字
>n : 数字[]

function f7(s: string, ...sRest: string[]) { }
>f7 : (s: 文字, ...sRest: 文字[]) => 无值
>s : 文字
>类型别名 :=> 文字
>sRest : 文字[]

var fUnion: typeof f1 | typeof f2 | typeof f3 | typeof f4 | typeof f5 | typeof f6 | typeof f7;
>fUnion : ((s: 文字) => 无值) | ((s?: 文字) => 无值) | ((...s: 文字[]) => 无值) | ((s: 文字, s2?: 文字) => 无值) | ((s?: 文字, n?: 数字) => 无值) | ((s?: 文字, ...n: 数字[]) => 无值) | ((s: 文字, ...sRest: 文字[]) => 无值)
>f1 : (s: 文字) => 无值
>f2 : (s?: 文字) => 无值
>f3 : (...s: 文字[]) => 无值
>f4 : (s: 文字, s2?: 文字) => 无值
>f5 : (s?: 文字, n?: 数字) => 无值
>f6 : (s?: 文字, ...n: 数字[]) => 无值
>f7 : (s: 文字, ...sRest: 文字[]) => 无值

fUnion(""); // All constituents can be called by passing a single string.
>fUnion("") : 无值
>类型别名 :=> 无值
>fUnion : ((s: 文字) => 无值) | ((s?: 文字) => 无值) | ((...s: 文字[]) => 无值) | ((s: 文字, s2?: 文字) => 无值) | ((s?: 文字, n?: 数字) => 无值) | ((s?: 文字, ...n: 数字[]) => 无值) | ((s: 文字, ...sRest: 文字[]) => 无值)
>"" : ""

