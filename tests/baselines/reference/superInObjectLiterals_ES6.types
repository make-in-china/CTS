=== tests/cases/compiler/superInObjectLiterals_ES6.ts ===
var obj = {
>obj : { __proto__: { method(): 无值; }; method(): 无值; prop: 数字; p1: () => 无值; p2: () => 无值; p3: () => 无值; }
>{    __proto__: {        method() {        }    },    method() {        super.method();    },    get prop() {        super.method();        return 10;    },    set prop(value) {        super.method();    },    p1: function () {        super.method();    },    p2: function f() {        super.method();    },    p3: () => {        super.method();    }} : { __proto__: { method(): 无值; }; method(): 无值; prop: 数字; p1: () => 无值; p2: () => 无值; p3: () => 无值; }

    __proto__: {
>__proto__ : { method(): 无值; }
>{        method() {        }    } : { method(): 无值; }

        method() {
>method : () => 无值
        }
    },
    method() {
>method : () => 无值

        super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

    },
    get prop() {
>prop : 数字
>类型别名 :=> 数字

        super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

        return 10;
>10 : 10

    },
    set prop(value) {
>prop : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字

        super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

    },
    p1: function () {
>p1 : () => 无值
>function () {        super.method();    } : () => 无值

        super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

    },
    p2: function f() {
>p2 : () => 无值
>function f() {        super.method();    } : () => 无值
>f : () => 无值

        super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

    },
    p3: () => {
>p3 : () => 无值
>() => {        super.method();    } : () => 无值

        super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意
    }
};

class A {
>A : A

    method() { }
>method : () => 无值
}

class B extends A {
>B : B
>A : A

    f() {
>f : () => 无值

        var obj = {
>obj : { __proto__: { method(): 无值; }; method(): 无值; prop: 数字; p1: () => 无值; p2: () => 无值; p3: () => 无值; }
>{            __proto__: {                method() {                }            },            method() {                super.method();            },            get prop() {                super.method();                return 10;            },            set prop(value) {                super.method();            },            p1: function () {                super.method();            },            p2: function f() {                super.method();            },            p3: () => {                super.method();            }        } : { __proto__: { method(): 无值; }; method(): 无值; prop: 数字; p1: () => 无值; p2: () => 无值; p3: () => 无值; }

            __proto__: {
>__proto__ : { method(): 无值; }
>{                method() {                }            } : { method(): 无值; }

                method() {
>method : () => 无值
                }
            },
            method() {
>method : () => 无值

                super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

            },
            get prop() {
>prop : 数字
>类型别名 :=> 数字

                super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

                return 10;
>10 : 10

            },
            set prop(value) {
>prop : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字

                super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

            },
            p1: function () {
>p1 : () => 无值
>function () {                super.method();            } : () => 无值

                super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

            },
            p2: function f() {
>p2 : () => 无值
>function f() {                super.method();            } : () => 无值
>f : () => 无值

                super.method();
>super.method() : 任意
>类型别名 :=> 任意
>super.method : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>method : 任意
>类型别名 :=> 任意

            },
            p3: () => {
>p3 : () => 无值
>() => {                super.method();            } : () => 无值

                super.method();
>super.method() : 无值
>类型别名 :=> 无值
>super.method : () => 无值
>super : A
>method : () => 无值
            }
        };
    }
}
