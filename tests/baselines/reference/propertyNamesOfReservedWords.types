=== tests/cases/conformance/types/objectTypeLiteral/propertySignatures/propertyNamesOfReservedWords.ts ===
class C {
>C : C

    abstract;
>abstract : any
>类型别名 :=> 任意

    as;
>as : any
>类型别名 :=> 任意

    boolean;
>boolean : any
>类型别名 :=> 任意

    break;
>break : any
>类型别名 :=> 任意

    byte;
>byte : any
>类型别名 :=> 任意

    case;
>case : any
>类型别名 :=> 任意

    catch;
>catch : any
>类型别名 :=> 任意

    char;
>char : any
>类型别名 :=> 任意

    class;
>class : any
>类型别名 :=> 任意

    continue;
>continue : any
>类型别名 :=> 任意

    const;
>const : any
>类型别名 :=> 任意

    debugger;
>debugger : any
>类型别名 :=> 任意

    default;
>default : any
>类型别名 :=> 任意

    delete;
>delete : any
>类型别名 :=> 任意

    do;
>do : any
>类型别名 :=> 任意

    double;
>double : any
>类型别名 :=> 任意

    else;
>else : any
>类型别名 :=> 任意

    enum;
>enum : any
>类型别名 :=> 任意

    export;
>export : any
>类型别名 :=> 任意

    extends;
>extends : any
>类型别名 :=> 任意

    false;
>false : any
>类型别名 :=> 任意

    final;
>final : any
>类型别名 :=> 任意

    finally;
>finally : any
>类型别名 :=> 任意

    float;
>float : any
>类型别名 :=> 任意

    for;
>for : any
>类型别名 :=> 任意

    function;
>function : any
>类型别名 :=> 任意

    goto;
>goto : any
>类型别名 :=> 任意

    if;
>if : any
>类型别名 :=> 任意

    implements;
>implements : any
>类型别名 :=> 任意

    import;
>import : any
>类型别名 :=> 任意

    in;
>in : any
>类型别名 :=> 任意

    instanceof;
>instanceof : any
>类型别名 :=> 任意

    int;
>int : any
>类型别名 :=> 任意

    interface;
>interface : any
>类型别名 :=> 任意

    is;
>is : any
>类型别名 :=> 任意

    long;
>long : any
>类型别名 :=> 任意

    namespace;
>namespace : any
>类型别名 :=> 任意

    native;
>native : any
>类型别名 :=> 任意

    new;
>new : any
>类型别名 :=> 任意

    null;
>null : any
>类型别名 :=> 任意

    package;
>package : any
>类型别名 :=> 任意

    private;
>private : any
>类型别名 :=> 任意

    protected;
>protected : any
>类型别名 :=> 任意

    public;
>public : any
>类型别名 :=> 任意

    return;
>return : any
>类型别名 :=> 任意

    short;
>short : any
>类型别名 :=> 任意

    static;
>static : any
>类型别名 :=> 任意

    super;
>super : any
>类型别名 :=> 任意

    switch;
>switch : any
>类型别名 :=> 任意

    synchronized;
>synchronized : any
>类型别名 :=> 任意

    this;
>this : any
>类型别名 :=> 任意

    throw;
>throw : any
>类型别名 :=> 任意

    throws;
>throws : any
>类型别名 :=> 任意

    transient;
>transient : any
>类型别名 :=> 任意

    true;
>true : any
>类型别名 :=> 任意

    try;
>try : any
>类型别名 :=> 任意

    typeof;
>typeof : any
>类型别名 :=> 任意

    use;
>use : any
>类型别名 :=> 任意

    var;
>var : any
>类型别名 :=> 任意

    void;
>void : any
>类型别名 :=> 任意

    volatile;
>volatile : any
>类型别名 :=> 任意

    while;
>while : any
>类型别名 :=> 任意

    with;
>with : any
>类型别名 :=> 任意
}
var c: C;
>c : C
>C : C

var r1 = c.abstract;
>r1 : any
>类型别名 :=> 任意
>c.abstract : any
>类型别名 :=> 任意
>c : C
>abstract : any
>类型别名 :=> 任意

var r2 = c.as;
>r2 : any
>类型别名 :=> 任意
>c.as : any
>类型别名 :=> 任意
>c : C
>as : any
>类型别名 :=> 任意

interface I {
>I : I

    abstract;
>abstract : any
>类型别名 :=> 任意

    as;
>as : any
>类型别名 :=> 任意

    boolean;
>boolean : any
>类型别名 :=> 任意

    break;
>break : any
>类型别名 :=> 任意

    byte;
>byte : any
>类型别名 :=> 任意

    case;
>case : any
>类型别名 :=> 任意

    catch;
>catch : any
>类型别名 :=> 任意

    char;
>char : any
>类型别名 :=> 任意

    class;
>class : any
>类型别名 :=> 任意

    continue;
>continue : any
>类型别名 :=> 任意

    const;
>const : any
>类型别名 :=> 任意

    debugger;
>debugger : any
>类型别名 :=> 任意

    default;
>default : any
>类型别名 :=> 任意

    delete;
>delete : any
>类型别名 :=> 任意

    do;
>do : any
>类型别名 :=> 任意

    double;
>double : any
>类型别名 :=> 任意

    else;
>else : any
>类型别名 :=> 任意

    enum;
>enum : any
>类型别名 :=> 任意

    export;
>export : any
>类型别名 :=> 任意

    extends;
>extends : any
>类型别名 :=> 任意

    false;
>false : any
>类型别名 :=> 任意

    final;
>final : any
>类型别名 :=> 任意

    finally;
>finally : any
>类型别名 :=> 任意

    float;
>float : any
>类型别名 :=> 任意

    for;
>for : any
>类型别名 :=> 任意

    function;
>function : any
>类型别名 :=> 任意

    goto;
>goto : any
>类型别名 :=> 任意

    if;
>if : any
>类型别名 :=> 任意

    implements;
>implements : any
>类型别名 :=> 任意

    import;
>import : any
>类型别名 :=> 任意

    in;
>in : any
>类型别名 :=> 任意

    instanceof;
>instanceof : any
>类型别名 :=> 任意

    int;
>int : any
>类型别名 :=> 任意

    interface;
>interface : any
>类型别名 :=> 任意

    is;
>is : any
>类型别名 :=> 任意

    long;
>long : any
>类型别名 :=> 任意

    namespace;
>namespace : any
>类型别名 :=> 任意

    native;
>native : any
>类型别名 :=> 任意

    new;
>new : any
>类型别名 :=> 任意

    null;
>null : any
>类型别名 :=> 任意

    package;
>package : any
>类型别名 :=> 任意

    private;
>private : any
>类型别名 :=> 任意

    protected;
>protected : any
>类型别名 :=> 任意

    public;
>public : any
>类型别名 :=> 任意

    return;
>return : any
>类型别名 :=> 任意

    short;
>short : any
>类型别名 :=> 任意

    static;
>static : any
>类型别名 :=> 任意

    super;
>super : any
>类型别名 :=> 任意

    switch;
>switch : any
>类型别名 :=> 任意

    synchronized;
>synchronized : any
>类型别名 :=> 任意

    this;
>this : any
>类型别名 :=> 任意

    throw;
>throw : any
>类型别名 :=> 任意

    throws;
>throws : any
>类型别名 :=> 任意

    transient;
>transient : any
>类型别名 :=> 任意

    true;
>true : any
>类型别名 :=> 任意

    try;
>try : any
>类型别名 :=> 任意

    typeof;
>typeof : any
>类型别名 :=> 任意

    use;
>use : any
>类型别名 :=> 任意

    var;
>var : any
>类型别名 :=> 任意

    void;
>void : any
>类型别名 :=> 任意

    volatile;
>volatile : any
>类型别名 :=> 任意

    while;
>while : any
>类型别名 :=> 任意

    with;
>with : any
>类型别名 :=> 任意
}

var i: I;
>i : I
>I : I

var r3 = i.abstract;
>r3 : any
>类型别名 :=> 任意
>i.abstract : any
>类型别名 :=> 任意
>i : I
>abstract : any
>类型别名 :=> 任意

var r4 = i.as;
>r4 : any
>类型别名 :=> 任意
>i.as : any
>类型别名 :=> 任意
>i : I
>as : any
>类型别名 :=> 任意

var a: {
>a : { abstract: any; as: any; boolean: any; break: any; byte: any; case: any; catch: any; char: any; class: any; continue: any; const: any; debugger: any; default: any; delete: any; do: any; double: any; else: any; enum: any; export: any; extends: any; false: any; final: any; finally: any; float: any; for: any; function: any; goto: any; if: any; implements: any; import: any; in: any; instanceof: any; int: any; interface: any; is: any; long: any; namespace: any; native: any; new: any; null: any; package: any; private: any; protected: any; public: any; return: any; short: any; static: any; super: any; switch: any; synchronized: any; this: any; throw: any; throws: any; transient: any; true: any; try: any; typeof: any; use: any; var: any; void: any; volatile: any; while: any; with: any; }

    abstract;
>abstract : any
>类型别名 :=> 任意

    as;
>as : any
>类型别名 :=> 任意

    boolean;
>boolean : any
>类型别名 :=> 任意

    break;
>break : any
>类型别名 :=> 任意

    byte;
>byte : any
>类型别名 :=> 任意

    case;
>case : any
>类型别名 :=> 任意

    catch;
>catch : any
>类型别名 :=> 任意

    char;
>char : any
>类型别名 :=> 任意

    class;
>class : any
>类型别名 :=> 任意

    continue;
>continue : any
>类型别名 :=> 任意

    const;
>const : any
>类型别名 :=> 任意

    debugger;
>debugger : any
>类型别名 :=> 任意

    default;
>default : any
>类型别名 :=> 任意

    delete;
>delete : any
>类型别名 :=> 任意

    do;
>do : any
>类型别名 :=> 任意

    double;
>double : any
>类型别名 :=> 任意

    else;
>else : any
>类型别名 :=> 任意

    enum;
>enum : any
>类型别名 :=> 任意

    export;
>export : any
>类型别名 :=> 任意

    extends;
>extends : any
>类型别名 :=> 任意

    false;
>false : any
>类型别名 :=> 任意

    final;
>final : any
>类型别名 :=> 任意

    finally;
>finally : any
>类型别名 :=> 任意

    float;
>float : any
>类型别名 :=> 任意

    for;
>for : any
>类型别名 :=> 任意

    function;
>function : any
>类型别名 :=> 任意

    goto;
>goto : any
>类型别名 :=> 任意

    if;
>if : any
>类型别名 :=> 任意

    implements;
>implements : any
>类型别名 :=> 任意

    import;
>import : any
>类型别名 :=> 任意

    in;
>in : any
>类型别名 :=> 任意

    instanceof;
>instanceof : any
>类型别名 :=> 任意

    int;
>int : any
>类型别名 :=> 任意

    interface;
>interface : any
>类型别名 :=> 任意

    is;
>is : any
>类型别名 :=> 任意

    long;
>long : any
>类型别名 :=> 任意

    namespace;
>namespace : any
>类型别名 :=> 任意

    native;
>native : any
>类型别名 :=> 任意

    new;
>new : any
>类型别名 :=> 任意

    null;
>null : any
>类型别名 :=> 任意

    package;
>package : any
>类型别名 :=> 任意

    private;
>private : any
>类型别名 :=> 任意

    protected;
>protected : any
>类型别名 :=> 任意

    public;
>public : any
>类型别名 :=> 任意

    return;
>return : any
>类型别名 :=> 任意

    short;
>short : any
>类型别名 :=> 任意

    static;
>static : any
>类型别名 :=> 任意

    super;
>super : any
>类型别名 :=> 任意

    switch;
>switch : any
>类型别名 :=> 任意

    synchronized;
>synchronized : any
>类型别名 :=> 任意

    this;
>this : any
>类型别名 :=> 任意

    throw;
>throw : any
>类型别名 :=> 任意

    throws;
>throws : any
>类型别名 :=> 任意

    transient;
>transient : any
>类型别名 :=> 任意

    true;
>true : any
>类型别名 :=> 任意

    try;
>try : any
>类型别名 :=> 任意

    typeof;
>typeof : any
>类型别名 :=> 任意

    use;
>use : any
>类型别名 :=> 任意

    var;
>var : any
>类型别名 :=> 任意

    void;
>void : any
>类型别名 :=> 任意

    volatile;
>volatile : any
>类型别名 :=> 任意

    while;
>while : any
>类型别名 :=> 任意

    with;
>with : any
>类型别名 :=> 任意
}

var r5 = a.abstract;
>r5 : any
>类型别名 :=> 任意
>a.abstract : any
>类型别名 :=> 任意
>a : { abstract: any; as: any; boolean: any; break: any; byte: any; case: any; catch: any; char: any; class: any; continue: any; const: any; debugger: any; default: any; delete: any; do: any; double: any; else: any; enum: any; export: any; extends: any; false: any; final: any; finally: any; float: any; for: any; function: any; goto: any; if: any; implements: any; import: any; in: any; instanceof: any; int: any; interface: any; is: any; long: any; namespace: any; native: any; new: any; null: any; package: any; private: any; protected: any; public: any; return: any; short: any; static: any; super: any; switch: any; synchronized: any; this: any; throw: any; throws: any; transient: any; true: any; try: any; typeof: any; use: any; var: any; void: any; volatile: any; while: any; with: any; }
>abstract : any
>类型别名 :=> 任意

var r6 = a.as;
>r6 : any
>类型别名 :=> 任意
>a.as : any
>类型别名 :=> 任意
>a : { abstract: any; as: any; boolean: any; break: any; byte: any; case: any; catch: any; char: any; class: any; continue: any; const: any; debugger: any; default: any; delete: any; do: any; double: any; else: any; enum: any; export: any; extends: any; false: any; final: any; finally: any; float: any; for: any; function: any; goto: any; if: any; implements: any; import: any; in: any; instanceof: any; int: any; interface: any; is: any; long: any; namespace: any; native: any; new: any; null: any; package: any; private: any; protected: any; public: any; return: any; short: any; static: any; super: any; switch: any; synchronized: any; this: any; throw: any; throws: any; transient: any; true: any; try: any; typeof: any; use: any; var: any; void: any; volatile: any; while: any; with: any; }
>as : any
>类型别名 :=> 任意

enum E {
>E : E

    abstract,
>abstract : E.abstract

    as,
>as : E.as

    boolean,
>boolean : E.boolean

    break,
>break : E.break

    byte,
>byte : E.byte

    case,
>case : E.case

    catch,
>catch : E.catch

    char,
>char : E.char

    class,
>class : E.class

    continue,
>continue : E.continue

    const,
>const : E.const

    debugger,
>debugger : E.debugger

    default,
>default : E.default

    delete,
>delete : E.delete

    do,
>do : E.do

    double,
>double : E.double

    else,
>else : E.else

    enum,
>enum : E.enum

    export,
>export : E.export

    extends,
>extends : E.extends

    false,
>false : E.false

    final,
>final : E.final

    finally,
>finally : E.finally

    float,
>float : E.float

    for,
>for : E.for

    function,
>function : E.function

    goto,
>goto : E.goto

    if,
>if : E.if

    implements,
>implements : E.implements

    import,
>import : E.import

    in,
>in : E.in

    instanceof,
>instanceof : E.instanceof

    int,
>int : E.int

    interface,
>interface : E.interface

    is,
>is : E.is

    long,
>long : E.long

    namespace,
>namespace : E.namespace

    native,
>native : E.native

    new,
>new : E.new

    null,
>null : E.null

    package,
>package : E.package

    private,
>private : E.private

    protected,
>protected : E.protected

    public,
>public : E.public

    return,
>return : E.return

    short,
>short : E.short

    static,
>static : E.static

    super,
>super : E.super

    switch,
>switch : E.switch

    synchronized,
>synchronized : E.synchronized

    this,
>this : E.this

    throw,
>throw : E.throw

    throws,
>throws : E.throws

    transient,
>transient : E.transient

    true,
>true : E.true

    try,
>try : E.try

    typeof,
>typeof : E.typeof

    use,
>use : E.use

    var,
>var : E.var

    void,
>void : E.void

    volatile,
>volatile : E.volatile

    while,
>while : E.while

    with,
>with : E.with
}

var r7 = E.abstract;
>r7 : E
>E.abstract : E.abstract
>E : typeof E
>abstract : E.abstract

var r8 = E.as;
>r8 : E
>E.as : E.as
>E : typeof E
>as : E.as

