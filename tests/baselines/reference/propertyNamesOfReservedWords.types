=== tests/cases/conformance/types/objectTypeLiteral/propertySignatures/propertyNamesOfReservedWords.ts ===
class C {
>C : C

    abstract;
>abstract : 任意
>类型别名 :=> 任意

    as;
>as : 任意
>类型别名 :=> 任意

    boolean;
>boolean : 任意
>类型别名 :=> 任意

    break;
>break : 任意
>类型别名 :=> 任意

    byte;
>byte : 任意
>类型别名 :=> 任意

    case;
>case : 任意
>类型别名 :=> 任意

    catch;
>catch : 任意
>类型别名 :=> 任意

    char;
>char : 任意
>类型别名 :=> 任意

    class;
>class : 任意
>类型别名 :=> 任意

    continue;
>continue : 任意
>类型别名 :=> 任意

    const;
>const : 任意
>类型别名 :=> 任意

    debugger;
>debugger : 任意
>类型别名 :=> 任意

    default;
>default : 任意
>类型别名 :=> 任意

    delete;
>delete : 任意
>类型别名 :=> 任意

    do;
>do : 任意
>类型别名 :=> 任意

    double;
>double : 任意
>类型别名 :=> 任意

    else;
>else : 任意
>类型别名 :=> 任意

    enum;
>enum : 任意
>类型别名 :=> 任意

    export;
>export : 任意
>类型别名 :=> 任意

    extends;
>extends : 任意
>类型别名 :=> 任意

    false;
>false : 任意
>类型别名 :=> 任意

    final;
>final : 任意
>类型别名 :=> 任意

    finally;
>finally : 任意
>类型别名 :=> 任意

    float;
>float : 任意
>类型别名 :=> 任意

    for;
>for : 任意
>类型别名 :=> 任意

    function;
>function : 任意
>类型别名 :=> 任意

    goto;
>goto : 任意
>类型别名 :=> 任意

    if;
>if : 任意
>类型别名 :=> 任意

    implements;
>implements : 任意
>类型别名 :=> 任意

    import;
>import : 任意
>类型别名 :=> 任意

    in;
>in : 任意
>类型别名 :=> 任意

    instanceof;
>instanceof : 任意
>类型别名 :=> 任意

    int;
>int : 任意
>类型别名 :=> 任意

    interface;
>interface : 任意
>类型别名 :=> 任意

    is;
>is : 任意
>类型别名 :=> 任意

    long;
>long : 任意
>类型别名 :=> 任意

    namespace;
>namespace : 任意
>类型别名 :=> 任意

    native;
>native : 任意
>类型别名 :=> 任意

    new;
>new : 任意
>类型别名 :=> 任意

    null;
>null : 任意
>类型别名 :=> 任意

    package;
>package : 任意
>类型别名 :=> 任意

    private;
>private : 任意
>类型别名 :=> 任意

    protected;
>protected : 任意
>类型别名 :=> 任意

    public;
>public : 任意
>类型别名 :=> 任意

    return;
>return : 任意
>类型别名 :=> 任意

    short;
>short : 任意
>类型别名 :=> 任意

    static;
>static : 任意
>类型别名 :=> 任意

    super;
>super : 任意
>类型别名 :=> 任意

    switch;
>switch : 任意
>类型别名 :=> 任意

    synchronized;
>synchronized : 任意
>类型别名 :=> 任意

    this;
>this : 任意
>类型别名 :=> 任意

    throw;
>throw : 任意
>类型别名 :=> 任意

    throws;
>throws : 任意
>类型别名 :=> 任意

    transient;
>transient : 任意
>类型别名 :=> 任意

    true;
>true : 任意
>类型别名 :=> 任意

    try;
>try : 任意
>类型别名 :=> 任意

    typeof;
>typeof : 任意
>类型别名 :=> 任意

    use;
>use : 任意
>类型别名 :=> 任意

    var;
>var : 任意
>类型别名 :=> 任意

    void;
>void : 任意
>类型别名 :=> 任意

    volatile;
>volatile : 任意
>类型别名 :=> 任意

    while;
>while : 任意
>类型别名 :=> 任意

    with;
>with : 任意
>类型别名 :=> 任意
}
var c: C;
>c : C
>C : C

var r1 = c.abstract;
>r1 : 任意
>类型别名 :=> 任意
>c.abstract : 任意
>类型别名 :=> 任意
>c : C
>abstract : 任意
>类型别名 :=> 任意

var r2 = c.as;
>r2 : 任意
>类型别名 :=> 任意
>c.as : 任意
>类型别名 :=> 任意
>c : C
>as : 任意
>类型别名 :=> 任意

interface I {
>I : I

    abstract;
>abstract : 任意
>类型别名 :=> 任意

    as;
>as : 任意
>类型别名 :=> 任意

    boolean;
>boolean : 任意
>类型别名 :=> 任意

    break;
>break : 任意
>类型别名 :=> 任意

    byte;
>byte : 任意
>类型别名 :=> 任意

    case;
>case : 任意
>类型别名 :=> 任意

    catch;
>catch : 任意
>类型别名 :=> 任意

    char;
>char : 任意
>类型别名 :=> 任意

    class;
>class : 任意
>类型别名 :=> 任意

    continue;
>continue : 任意
>类型别名 :=> 任意

    const;
>const : 任意
>类型别名 :=> 任意

    debugger;
>debugger : 任意
>类型别名 :=> 任意

    default;
>default : 任意
>类型别名 :=> 任意

    delete;
>delete : 任意
>类型别名 :=> 任意

    do;
>do : 任意
>类型别名 :=> 任意

    double;
>double : 任意
>类型别名 :=> 任意

    else;
>else : 任意
>类型别名 :=> 任意

    enum;
>enum : 任意
>类型别名 :=> 任意

    export;
>export : 任意
>类型别名 :=> 任意

    extends;
>extends : 任意
>类型别名 :=> 任意

    false;
>false : 任意
>类型别名 :=> 任意

    final;
>final : 任意
>类型别名 :=> 任意

    finally;
>finally : 任意
>类型别名 :=> 任意

    float;
>float : 任意
>类型别名 :=> 任意

    for;
>for : 任意
>类型别名 :=> 任意

    function;
>function : 任意
>类型别名 :=> 任意

    goto;
>goto : 任意
>类型别名 :=> 任意

    if;
>if : 任意
>类型别名 :=> 任意

    implements;
>implements : 任意
>类型别名 :=> 任意

    import;
>import : 任意
>类型别名 :=> 任意

    in;
>in : 任意
>类型别名 :=> 任意

    instanceof;
>instanceof : 任意
>类型别名 :=> 任意

    int;
>int : 任意
>类型别名 :=> 任意

    interface;
>interface : 任意
>类型别名 :=> 任意

    is;
>is : 任意
>类型别名 :=> 任意

    long;
>long : 任意
>类型别名 :=> 任意

    namespace;
>namespace : 任意
>类型别名 :=> 任意

    native;
>native : 任意
>类型别名 :=> 任意

    new;
>new : 任意
>类型别名 :=> 任意

    null;
>null : 任意
>类型别名 :=> 任意

    package;
>package : 任意
>类型别名 :=> 任意

    private;
>private : 任意
>类型别名 :=> 任意

    protected;
>protected : 任意
>类型别名 :=> 任意

    public;
>public : 任意
>类型别名 :=> 任意

    return;
>return : 任意
>类型别名 :=> 任意

    short;
>short : 任意
>类型别名 :=> 任意

    static;
>static : 任意
>类型别名 :=> 任意

    super;
>super : 任意
>类型别名 :=> 任意

    switch;
>switch : 任意
>类型别名 :=> 任意

    synchronized;
>synchronized : 任意
>类型别名 :=> 任意

    this;
>this : 任意
>类型别名 :=> 任意

    throw;
>throw : 任意
>类型别名 :=> 任意

    throws;
>throws : 任意
>类型别名 :=> 任意

    transient;
>transient : 任意
>类型别名 :=> 任意

    true;
>true : 任意
>类型别名 :=> 任意

    try;
>try : 任意
>类型别名 :=> 任意

    typeof;
>typeof : 任意
>类型别名 :=> 任意

    use;
>use : 任意
>类型别名 :=> 任意

    var;
>var : 任意
>类型别名 :=> 任意

    void;
>void : 任意
>类型别名 :=> 任意

    volatile;
>volatile : 任意
>类型别名 :=> 任意

    while;
>while : 任意
>类型别名 :=> 任意

    with;
>with : 任意
>类型别名 :=> 任意
}

var i: I;
>i : I
>I : I

var r3 = i.abstract;
>r3 : 任意
>类型别名 :=> 任意
>i.abstract : 任意
>类型别名 :=> 任意
>i : I
>abstract : 任意
>类型别名 :=> 任意

var r4 = i.as;
>r4 : 任意
>类型别名 :=> 任意
>i.as : 任意
>类型别名 :=> 任意
>i : I
>as : 任意
>类型别名 :=> 任意

var a: {
>a : { abstract: 任意; as: 任意; boolean: 任意; break: 任意; byte: 任意; case: 任意; catch: 任意; char: 任意; class: 任意; continue: 任意; const: 任意; debugger: 任意; default: 任意; delete: 任意; do: 任意; double: 任意; else: 任意; enum: 任意; export: 任意; extends: 任意; false: 任意; final: 任意; finally: 任意; float: 任意; for: 任意; function: 任意; goto: 任意; if: 任意; implements: 任意; import: 任意; in: 任意; instanceof: 任意; int: 任意; interface: 任意; is: 任意; long: 任意; namespace: 任意; native: 任意; new: 任意; null: 任意; package: 任意; private: 任意; protected: 任意; public: 任意; return: 任意; short: 任意; static: 任意; super: 任意; switch: 任意; synchronized: 任意; this: 任意; throw: 任意; throws: 任意; transient: 任意; true: 任意; try: 任意; typeof: 任意; use: 任意; var: 任意; void: 任意; volatile: 任意; while: 任意; with: 任意; }

    abstract;
>abstract : 任意
>类型别名 :=> 任意

    as;
>as : 任意
>类型别名 :=> 任意

    boolean;
>boolean : 任意
>类型别名 :=> 任意

    break;
>break : 任意
>类型别名 :=> 任意

    byte;
>byte : 任意
>类型别名 :=> 任意

    case;
>case : 任意
>类型别名 :=> 任意

    catch;
>catch : 任意
>类型别名 :=> 任意

    char;
>char : 任意
>类型别名 :=> 任意

    class;
>class : 任意
>类型别名 :=> 任意

    continue;
>continue : 任意
>类型别名 :=> 任意

    const;
>const : 任意
>类型别名 :=> 任意

    debugger;
>debugger : 任意
>类型别名 :=> 任意

    default;
>default : 任意
>类型别名 :=> 任意

    delete;
>delete : 任意
>类型别名 :=> 任意

    do;
>do : 任意
>类型别名 :=> 任意

    double;
>double : 任意
>类型别名 :=> 任意

    else;
>else : 任意
>类型别名 :=> 任意

    enum;
>enum : 任意
>类型别名 :=> 任意

    export;
>export : 任意
>类型别名 :=> 任意

    extends;
>extends : 任意
>类型别名 :=> 任意

    false;
>false : 任意
>类型别名 :=> 任意

    final;
>final : 任意
>类型别名 :=> 任意

    finally;
>finally : 任意
>类型别名 :=> 任意

    float;
>float : 任意
>类型别名 :=> 任意

    for;
>for : 任意
>类型别名 :=> 任意

    function;
>function : 任意
>类型别名 :=> 任意

    goto;
>goto : 任意
>类型别名 :=> 任意

    if;
>if : 任意
>类型别名 :=> 任意

    implements;
>implements : 任意
>类型别名 :=> 任意

    import;
>import : 任意
>类型别名 :=> 任意

    in;
>in : 任意
>类型别名 :=> 任意

    instanceof;
>instanceof : 任意
>类型别名 :=> 任意

    int;
>int : 任意
>类型别名 :=> 任意

    interface;
>interface : 任意
>类型别名 :=> 任意

    is;
>is : 任意
>类型别名 :=> 任意

    long;
>long : 任意
>类型别名 :=> 任意

    namespace;
>namespace : 任意
>类型别名 :=> 任意

    native;
>native : 任意
>类型别名 :=> 任意

    new;
>new : 任意
>类型别名 :=> 任意

    null;
>null : 任意
>类型别名 :=> 任意

    package;
>package : 任意
>类型别名 :=> 任意

    private;
>private : 任意
>类型别名 :=> 任意

    protected;
>protected : 任意
>类型别名 :=> 任意

    public;
>public : 任意
>类型别名 :=> 任意

    return;
>return : 任意
>类型别名 :=> 任意

    short;
>short : 任意
>类型别名 :=> 任意

    static;
>static : 任意
>类型别名 :=> 任意

    super;
>super : 任意
>类型别名 :=> 任意

    switch;
>switch : 任意
>类型别名 :=> 任意

    synchronized;
>synchronized : 任意
>类型别名 :=> 任意

    this;
>this : 任意
>类型别名 :=> 任意

    throw;
>throw : 任意
>类型别名 :=> 任意

    throws;
>throws : 任意
>类型别名 :=> 任意

    transient;
>transient : 任意
>类型别名 :=> 任意

    true;
>true : 任意
>类型别名 :=> 任意

    try;
>try : 任意
>类型别名 :=> 任意

    typeof;
>typeof : 任意
>类型别名 :=> 任意

    use;
>use : 任意
>类型别名 :=> 任意

    var;
>var : 任意
>类型别名 :=> 任意

    void;
>void : 任意
>类型别名 :=> 任意

    volatile;
>volatile : 任意
>类型别名 :=> 任意

    while;
>while : 任意
>类型别名 :=> 任意

    with;
>with : 任意
>类型别名 :=> 任意
}

var r5 = a.abstract;
>r5 : 任意
>类型别名 :=> 任意
>a.abstract : 任意
>类型别名 :=> 任意
>a : { abstract: 任意; as: 任意; boolean: 任意; break: 任意; byte: 任意; case: 任意; catch: 任意; char: 任意; class: 任意; continue: 任意; const: 任意; debugger: 任意; default: 任意; delete: 任意; do: 任意; double: 任意; else: 任意; enum: 任意; export: 任意; extends: 任意; false: 任意; final: 任意; finally: 任意; float: 任意; for: 任意; function: 任意; goto: 任意; if: 任意; implements: 任意; import: 任意; in: 任意; instanceof: 任意; int: 任意; interface: 任意; is: 任意; long: 任意; namespace: 任意; native: 任意; new: 任意; null: 任意; package: 任意; private: 任意; protected: 任意; public: 任意; return: 任意; short: 任意; static: 任意; super: 任意; switch: 任意; synchronized: 任意; this: 任意; throw: 任意; throws: 任意; transient: 任意; true: 任意; try: 任意; typeof: 任意; use: 任意; var: 任意; void: 任意; volatile: 任意; while: 任意; with: 任意; }
>abstract : 任意
>类型别名 :=> 任意

var r6 = a.as;
>r6 : 任意
>类型别名 :=> 任意
>a.as : 任意
>类型别名 :=> 任意
>a : { abstract: 任意; as: 任意; boolean: 任意; break: 任意; byte: 任意; case: 任意; catch: 任意; char: 任意; class: 任意; continue: 任意; const: 任意; debugger: 任意; default: 任意; delete: 任意; do: 任意; double: 任意; else: 任意; enum: 任意; export: 任意; extends: 任意; false: 任意; final: 任意; finally: 任意; float: 任意; for: 任意; function: 任意; goto: 任意; if: 任意; implements: 任意; import: 任意; in: 任意; instanceof: 任意; int: 任意; interface: 任意; is: 任意; long: 任意; namespace: 任意; native: 任意; new: 任意; null: 任意; package: 任意; private: 任意; protected: 任意; public: 任意; return: 任意; short: 任意; static: 任意; super: 任意; switch: 任意; synchronized: 任意; this: 任意; throw: 任意; throws: 任意; transient: 任意; true: 任意; try: 任意; typeof: 任意; use: 任意; var: 任意; void: 任意; volatile: 任意; while: 任意; with: 任意; }
>as : 任意
>类型别名 :=> 任意

enum E {
>E : E

    abstract,
>abstract : E.abstract

    as,
>as : E.as

    boolean,
>boolean : E.boolean

    break,
>break : E.break

    byte,
>byte : E.byte

    case,
>case : E.case

    catch,
>catch : E.catch

    char,
>char : E.char

    class,
>class : E.class

    continue,
>continue : E.continue

    const,
>const : E.const

    debugger,
>debugger : E.debugger

    default,
>default : E.default

    delete,
>delete : E.delete

    do,
>do : E.do

    double,
>double : E.double

    else,
>else : E.else

    enum,
>enum : E.enum

    export,
>export : E.export

    extends,
>extends : E.extends

    false,
>false : E.false

    final,
>final : E.final

    finally,
>finally : E.finally

    float,
>float : E.float

    for,
>for : E.for

    function,
>function : E.function

    goto,
>goto : E.goto

    if,
>if : E.if

    implements,
>implements : E.implements

    import,
>import : E.import

    in,
>in : E.in

    instanceof,
>instanceof : E.instanceof

    int,
>int : E.int

    interface,
>interface : E.interface

    is,
>is : E.is

    long,
>long : E.long

    namespace,
>namespace : E.namespace

    native,
>native : E.native

    new,
>new : E.new

    null,
>null : E.null

    package,
>package : E.package

    private,
>private : E.private

    protected,
>protected : E.protected

    public,
>public : E.public

    return,
>return : E.return

    short,
>short : E.short

    static,
>static : E.static

    super,
>super : E.super

    switch,
>switch : E.switch

    synchronized,
>synchronized : E.synchronized

    this,
>this : E.this

    throw,
>throw : E.throw

    throws,
>throws : E.throws

    transient,
>transient : E.transient

    true,
>true : E.true

    try,
>try : E.try

    typeof,
>typeof : E.typeof

    use,
>use : E.use

    var,
>var : E.var

    void,
>void : E.void

    volatile,
>volatile : E.volatile

    while,
>while : E.while

    with,
>with : E.with
}

var r7 = E.abstract;
>r7 : E
>E.abstract : E.abstract
>E : 类为 E
>abstract : E.abstract

var r8 = E.as;
>r8 : E
>E.as : E.as
>E : 类为 E
>as : E.as

