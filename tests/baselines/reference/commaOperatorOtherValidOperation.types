=== tests/cases/conformance/expressions/commaOperator/commaOperatorOtherValidOperation.ts ===
//Comma operator in for loop
for (var i = 0, j = 10; i < j; i++, j--)
>i : number
>类型别名 :=> 数字
>0 : 0
>j : number
>类型别名 :=> 数字
>10 : 10
>i < j : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>j : number
>类型别名 :=> 数字
>i++, j-- : number
>类型别名 :=> 数字
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>j-- : number
>类型别名 :=> 数字
>j : number
>类型别名 :=> 数字
{
}

//Comma operator in fuction arguments and return
function foo(x: number, y: string)
>foo : (x: number, y: string) => string
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字
{
    return x, y;
>x, y : string
>类型别名 :=> 文字
>x : number
>类型别名 :=> 数字
>y : string
>类型别名 :=> 文字
}
var resultIsString = foo(1, "123");
>resultIsString : string
>类型别名 :=> 文字
>foo(1, "123") : string
>类型别名 :=> 文字
>foo : (x: number, y: string) => string
>1 : 1
>"123" : "123"

//TypeParameters
function foo1<T1, T2>()
>foo1 : <T1, T2>() => void
>T1 : T1
>T2 : T2
{
    var x: T1;
>x : T1
>T1 : T1

    var y: T2;
>y : T2
>T2 : T2

    x, y;
>x, y : T2
>x : T1
>y : T2

    var resultIsT1 = (y, x);
>resultIsT1 : T1
>(y, x) : T1
>y, x : T1
>y : T2
>x : T1
}

