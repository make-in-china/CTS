=== tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints.ts ===
// Two call or construct signatures are considered identical when they have the same number of type parameters and, considering those 
// parameters pairwise identical, have identical type parameter constraints, identical number of parameters with identical kind(required, 
// optional or rest) and types, and identical return types.

class B<T extends Array<number>> {
>B : B<T>
>T : T
>Array : T[]

    constructor(x: T) { return null; }
>x : T
>T : T
>null : 空值
>类型别名 :=> 空值
}

class C<T extends String> {
>C : C<T>
>T : T
>String : String

    constructor(x: T) { return null; }
>x : T
>T : T
>null : 空值
>类型别名 :=> 空值
}

interface I<T extends Number> {
>I : I<T>
>T : T
>Number : Number

    new(x: T): string;
>x : T
>T : T
}

interface I2 {
>I2 : I2

    new<T extends Boolean>(x: T): string;
>T : T
>Boolean : Boolean
>x : T
>T : T
}

var a: { new<T extends Array<string>>(x: T): string }
>a : 新建 <T 扩展 文字[]>(x: T) => 文字
>T : T
>Array : T[]
>x : T
>T : T

var b = { new<T extends RegExp>(x: T) { return ''; } }; // not a construct signature, function called new
>b : { new<T 扩展 RegExp>(x: T): 文字; }
>{ new<T extends RegExp>(x: T) { return ''; } } : { new<T 扩展 RegExp>(x: T): 文字; }
>new : <T 扩展 RegExp>(x: T) => 文字
>T : T
>RegExp : RegExp
>x : T
>T : T
>'' : ""

function foo1b(x: B<Array<number>>);
>foo1b : { (x: B<数字[]>): 任意; (x: B<数字[]>): 任意; }
>x : B<数字[]>
>B : B<T>
>Array : T[]

function foo1b(x: B<Array<number>>); // error
>foo1b : { (x: B<数字[]>): 任意; (x: B<数字[]>): 任意; }
>x : B<数字[]>
>B : B<T>
>Array : T[]

function foo1b(x: any) { }
>foo1b : { (x: B<数字[]>): 任意; (x: B<数字[]>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo1c(x: C<String>);
>foo1c : { (x: C<String>): 任意; (x: C<String>): 任意; }
>x : C<String>
>C : C<T>
>String : String

function foo1c(x: C<String>); // error
>foo1c : { (x: C<String>): 任意; (x: C<String>): 任意; }
>x : C<String>
>C : C<T>
>String : String

function foo1c(x: any) { }
>foo1c : { (x: C<String>): 任意; (x: C<String>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo2(x: I<Number>);
>foo2 : { (x: I<Number>): 任意; (x: I<Number>): 任意; }
>x : I<Number>
>I : I<T>
>Number : Number

function foo2(x: I<Number>); // error
>foo2 : { (x: I<Number>): 任意; (x: I<Number>): 任意; }
>x : I<Number>
>I : I<T>
>Number : Number

function foo2(x: any) { }
>foo2 : { (x: I<Number>): 任意; (x: I<Number>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo3(x: typeof a);
>foo3 : { (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; }
>x : 新建 <T 扩展 文字[]>(x: T) => 文字
>a : 新建 <T 扩展 文字[]>(x: T) => 文字

function foo3(x: typeof a); // error
>foo3 : { (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; }
>x : 新建 <T 扩展 文字[]>(x: T) => 文字
>a : 新建 <T 扩展 文字[]>(x: T) => 文字

function foo3(x: any) { }
>foo3 : { (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo4(x: typeof b);
>foo4 : { (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; }
>x : { new<T 扩展 RegExp>(x: T): 文字; }
>b : { new<T 扩展 RegExp>(x: T): 文字; }

function foo4(x: typeof b); // error
>foo4 : { (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; }
>x : { new<T 扩展 RegExp>(x: T): 文字; }
>b : { new<T 扩展 RegExp>(x: T): 文字; }

function foo4(x: any) { }
>foo4 : { (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo8(x: B<Array<number>>);
>foo8 : { (x: B<数字[]>): 任意; (x: I<Number>): 任意; }
>x : B<数字[]>
>B : B<T>
>Array : T[]

function foo8(x: I<Number>); // ok
>foo8 : { (x: B<数字[]>): 任意; (x: I<Number>): 任意; }
>x : I<Number>
>I : I<T>
>Number : Number

function foo8(x: any) { }
>foo8 : { (x: B<数字[]>): 任意; (x: I<Number>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo9(x: B<Array<number>>);
>foo9 : { (x: B<数字[]>): 任意; (x: C<String>): 任意; }
>x : B<数字[]>
>B : B<T>
>Array : T[]

function foo9(x: C<String>); // error, types are structurally equal
>foo9 : { (x: B<数字[]>): 任意; (x: C<String>): 任意; }
>x : C<String>
>C : C<T>
>String : String

function foo9(x: any) { }
>foo9 : { (x: B<数字[]>): 任意; (x: C<String>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo10(x: B<Array<number>>);
>foo10 : { (x: B<数字[]>): 任意; (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; }
>x : B<数字[]>
>B : B<T>
>Array : T[]

function foo10(x: typeof a); // ok
>foo10 : { (x: B<数字[]>): 任意; (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; }
>x : 新建 <T 扩展 文字[]>(x: T) => 文字
>a : 新建 <T 扩展 文字[]>(x: T) => 文字

function foo10(x: any) { }
>foo10 : { (x: B<数字[]>): 任意; (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo11(x: B<Array<number>>);
>foo11 : { (x: B<数字[]>): 任意; (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; }
>x : B<数字[]>
>B : B<T>
>Array : T[]

function foo11(x: typeof b); // ok
>foo11 : { (x: B<数字[]>): 任意; (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; }
>x : { new<T 扩展 RegExp>(x: T): 文字; }
>b : { new<T 扩展 RegExp>(x: T): 文字; }

function foo11(x: any) { }
>foo11 : { (x: B<数字[]>): 任意; (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo12(x: I<Number>);
>foo12 : { (x: I<Number>): 任意; (x: C<String>): 任意; }
>x : I<Number>
>I : I<T>
>Number : Number

function foo12(x: C<String>); // ok
>foo12 : { (x: I<Number>): 任意; (x: C<String>): 任意; }
>x : C<String>
>C : C<T>
>String : String

function foo12(x: any) { }
>foo12 : { (x: I<Number>): 任意; (x: C<String>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo12b(x: I2);
>foo12b : { (x: I2): 任意; (x: C<String>): 任意; }
>x : I2
>I2 : I2

function foo12b(x: C<String>); // ok
>foo12b : { (x: I2): 任意; (x: C<String>): 任意; }
>x : C<String>
>C : C<T>
>String : String

function foo12b(x: any) { }
>foo12b : { (x: I2): 任意; (x: C<String>): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo13(x: I<Number>);
>foo13 : { (x: I<Number>): 任意; (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; }
>x : I<Number>
>I : I<T>
>Number : Number

function foo13(x: typeof a); // ok
>foo13 : { (x: I<Number>): 任意; (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; }
>x : 新建 <T 扩展 文字[]>(x: T) => 文字
>a : 新建 <T 扩展 文字[]>(x: T) => 文字

function foo13(x: any) { }
>foo13 : { (x: I<Number>): 任意; (x: 新建 <T 扩展 文字[]>(x: T) => 文字): 任意; }
>x : 任意
>类型别名 :=> 任意

function foo14(x: I<Number>);
>foo14 : { (x: I<Number>): 任意; (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; }
>x : I<Number>
>I : I<T>
>Number : Number

function foo14(x: typeof b); // ok
>foo14 : { (x: I<Number>): 任意; (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; }
>x : { new<T 扩展 RegExp>(x: T): 文字; }
>b : { new<T 扩展 RegExp>(x: T): 文字; }

function foo14(x: any) { }
>foo14 : { (x: I<Number>): 任意; (x: { new<T 扩展 RegExp>(x: T): 文字; }): 任意; }
>x : 任意
>类型别名 :=> 任意

