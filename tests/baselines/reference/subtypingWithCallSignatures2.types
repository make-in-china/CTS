=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignatures2.ts ===
// checking subtype relations for function types as it relates to contextual signature instantiation

class Base { foo: string; }
>Base : Base
>foo : 文字
>类型别名 :=> 文字

class Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : 文字
>类型别名 :=> 文字

class Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : 文字
>类型别名 :=> 文字

class OtherDerived extends Base { bing: string; }
>OtherDerived : OtherDerived
>Base : Base
>bing : 文字
>类型别名 :=> 文字

declare function foo1(a: (x: number) => number[]): typeof a;
>foo1 : { (a: (x: 数字) => 数字[]): (x: 数字) => 数字[]; (a: 任意): 任意; }
>a : (x: 数字) => 数字[]
>x : 数字
>类型别名 :=> 数字
>a : (x: 数字) => 数字[]

declare function foo1(a: any): any;
>foo1 : { (a: (x: 数字) => 数字[]): (x: 数字) => 数字[]; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo2(a: (x: number) => string[]): typeof a;
>foo2 : { (a: (x: 数字) => 文字[]): (x: 数字) => 文字[]; (a: 任意): 任意; }
>a : (x: 数字) => 文字[]
>x : 数字
>类型别名 :=> 数字
>a : (x: 数字) => 文字[]

declare function foo2(a: any): any;
>foo2 : { (a: (x: 数字) => 文字[]): (x: 数字) => 文字[]; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo3(a: (x: number) => void): typeof a;
>foo3 : { (a: (x: 数字) => 无值): (x: 数字) => 无值; (a: 任意): 任意; }
>a : (x: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>a : (x: 数字) => 无值

declare function foo3(a: any): any;
>foo3 : { (a: (x: 数字) => 无值): (x: 数字) => 无值; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo4(a: (x: string, y: number) => string): typeof a;
>foo4 : { (a: (x: 文字, y: 数字) => 文字): (x: 文字, y: 数字) => 文字; (a: 任意): 任意; }
>a : (x: 文字, y: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>a : (x: 文字, y: 数字) => 文字

declare function foo4(a: any): any;
>foo4 : { (a: (x: 文字, y: 数字) => 文字): (x: 文字, y: 数字) => 文字; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo5(a: (x: (arg: string) => number) => string): typeof a;
>foo5 : { (a: (x: (arg: 文字) => 数字) => 文字): (x: (arg: 文字) => 数字) => 文字; (a: 任意): 任意; }
>a : (x: (arg: 文字) => 数字) => 文字
>x : (arg: 文字) => 数字
>arg : 文字
>类型别名 :=> 文字
>a : (x: (arg: 文字) => 数字) => 文字

declare function foo5(a: any): any;
>foo5 : { (a: (x: (arg: 文字) => 数字) => 文字): (x: (arg: 文字) => 数字) => 文字; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo6(a: (x: (arg: Base) => Derived) => Base): typeof a;
>foo6 : { (a: (x: (arg: Base) => Derived) => Base): (x: (arg: Base) => Derived) => Base; (a: 任意): 任意; }
>a : (x: (arg: Base) => Derived) => Base
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>Base : Base
>a : (x: (arg: Base) => Derived) => Base

declare function foo6(a: any): any;
>foo6 : { (a: (x: (arg: Base) => Derived) => Base): (x: (arg: Base) => Derived) => Base; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo7(a: (x: (arg: Base) => Derived) => (r: Base) => Derived): typeof a;
>foo7 : { (a: (x: (arg: Base) => Derived) => (r: Base) => Derived): (x: (arg: Base) => Derived) => (r: Base) => Derived; (a: 任意): 任意; }
>a : (x: (arg: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived : Derived
>a : (x: (arg: Base) => Derived) => (r: Base) => Derived

declare function foo7(a: any): any;
>foo7 : { (a: (x: (arg: Base) => Derived) => (r: Base) => Derived): (x: (arg: Base) => Derived) => (r: Base) => Derived; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo8(a: (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived): typeof a;
>foo8 : { (a: (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived): (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived; (a: 任意): 任意; }
>a : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>y : (arg2: Base) => Derived
>arg2 : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived : Derived
>a : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived

declare function foo8(a: any): any;
>foo8 : { (a: (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived): (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo9(a: (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived): typeof a;
>foo9 : { (a: (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived): (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived; (a: 任意): 任意; }
>a : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>y : (arg2: Base) => Derived
>arg2 : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived : Derived
>a : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived

declare function foo9(a: any): any;
>foo9 : { (a: (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived): (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo10(a: (...x: Derived[]) => Derived): typeof a;
>foo10 : { (a: (...x: Derived[]) => Derived): (...x: Derived[]) => Derived; (a: 任意): 任意; }
>a : (...x: Derived[]) => Derived
>x : Derived[]
>Derived : Derived
>Derived : Derived
>a : (...x: Derived[]) => Derived

declare function foo10(a: any): any;
>foo10 : { (a: (...x: Derived[]) => Derived): (...x: Derived[]) => Derived; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo11(a: (x: { foo: string }, y: { foo: string; bar: string }) => Base): typeof a;
>foo11 : { (a: (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base): (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base; (a: 任意): 任意; }
>a : (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>x : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字
>y : { foo: 文字; bar: 文字; }
>foo : 文字
>类型别名 :=> 文字
>bar : 文字
>类型别名 :=> 文字
>Base : Base
>a : (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base

declare function foo11(a: any): any;
>foo11 : { (a: (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base): (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo12(a: (x: Array<Base>, y: Array<Derived2>) => Array<Derived>): typeof a;
>foo12 : { (a: (x: Base[], y: Derived2[]) => Derived[]): (x: Base[], y: Derived2[]) => Derived[]; (a: 任意): 任意; }
>a : (x: Base[], y: Derived2[]) => Derived[]
>x : Base[]
>Array : T[]
>Base : Base
>y : Derived2[]
>Array : T[]
>Derived2 : Derived2
>Array : T[]
>Derived : Derived
>a : (x: Base[], y: Derived2[]) => Derived[]

declare function foo12(a: any): any;
>foo12 : { (a: (x: Base[], y: Derived2[]) => Derived[]): (x: Base[], y: Derived2[]) => Derived[]; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo13(a: (x: Array<Base>, y: Array<Derived>) => Array<Derived>): typeof a;
>foo13 : { (a: (x: Base[], y: Derived[]) => Derived[]): (x: Base[], y: Derived[]) => Derived[]; (a: 任意): 任意; }
>a : (x: Base[], y: Derived[]) => Derived[]
>x : Base[]
>Array : T[]
>Base : Base
>y : Derived[]
>Array : T[]
>Derived : Derived
>Array : T[]
>Derived : Derived
>a : (x: Base[], y: Derived[]) => Derived[]

declare function foo13(a: any): any;
>foo13 : { (a: (x: Base[], y: Derived[]) => Derived[]): (x: Base[], y: Derived[]) => Derived[]; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo14(a: (x: { a: string; b: number }) => Object): typeof a;
>foo14 : { (a: (x: { a: 文字; b: 数字; }) => Object): (x: { a: 文字; b: 数字; }) => Object; (a: 任意): 任意; }
>a : (x: { a: 文字; b: 数字; }) => Object
>x : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
>Object : Object
>a : (x: { a: 文字; b: 数字; }) => Object

declare function foo14(a: any): any;
>foo14 : { (a: (x: { a: 文字; b: 数字; }) => Object): (x: { a: 文字; b: 数字; }) => Object; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo15(a: { 
>foo15 : { (a: { (x: 数字): 数字[]; (x: 文字): 文字[]; }): { (x: 数字): 数字[]; (x: 文字): 文字[]; }; (a: 任意): 任意; }
>a : { (x: 数字): 数字[]; (x: 文字): 文字[]; }

    (x: number): number[];
>x : 数字
>类型别名 :=> 数字

    (x: string): string[]; 
>x : 文字
>类型别名 :=> 文字

}): typeof a;
>a : { (x: 数字): 数字[]; (x: 文字): 文字[]; }

declare function foo15(a: any): any;
>foo15 : { (a: { (x: 数字): 数字[]; (x: 文字): 文字[]; }): { (x: 数字): 数字[]; (x: 文字): 文字[]; }; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo16(a: {
>foo16 : { (a: { <T 扩展 Derived>(x: T): 数字[]; <U 扩展 Base>(x: U): 数字[]; }): { <T 扩展 Derived>(x: T): 数字[]; <U 扩展 Base>(x: U): 数字[]; }; (a: 任意): 任意; }
>a : { <T 扩展 Derived>(x: T): 数字[]; <U 扩展 Base>(x: U): 数字[]; }

    <T extends Derived>(x: T): number[];
>T : T
>Derived : Derived
>x : T
>T : T

    <U extends Base>(x: U): number[];
>U : U
>Base : Base
>x : U
>U : U

}): typeof a;
>a : { <T 扩展 Derived>(x: T): 数字[]; <U 扩展 Base>(x: U): 数字[]; }

declare function foo16(a: any): any;
>foo16 : { (a: { <T 扩展 Derived>(x: T): 数字[]; <U 扩展 Base>(x: U): 数字[]; }): { <T 扩展 Derived>(x: T): 数字[]; <U 扩展 Base>(x: U): 数字[]; }; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo17(a: {
>foo17 : { (a: { (x: (a: 数字) => 数字): 数字[]; (x: (a: 文字) => 文字): 文字[]; }): { (x: (a: 数字) => 数字): 数字[]; (x: (a: 文字) => 文字): 文字[]; }; (a: 任意): 任意; }
>a : { (x: (a: 数字) => 数字): 数字[]; (x: (a: 文字) => 文字): 文字[]; }

    (x: (a: number) => number): number[];
>x : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字

    (x: (a: string) => string): string[];
>x : (a: 文字) => 文字
>a : 文字
>类型别名 :=> 文字

}): typeof a;
>a : { (x: (a: 数字) => 数字): 数字[]; (x: (a: 文字) => 文字): 文字[]; }

declare function foo17(a: any): any;
>foo17 : { (a: { (x: (a: 数字) => 数字): 数字[]; (x: (a: 文字) => 文字): 文字[]; }): { (x: (a: 数字) => 数字): 数字[]; (x: (a: 文字) => 文字): 文字[]; }; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo18(a: {
>foo18 : { (a: { (x: { (a: 数字): 数字; (a: 文字): 文字; }): 任意[]; (x: { (a: 真假): 真假; (a: Date): Date; }): 任意[]; }): { (x: { (a: 数字): 数字; (a: 文字): 文字; }): 任意[]; (x: { (a: 真假): 真假; (a: Date): Date; }): 任意[]; }; (a: 任意): 任意; }
>a : { (x: { (a: 数字): 数字; (a: 文字): 文字; }): 任意[]; (x: { (a: 真假): 真假; (a: Date): Date; }): 任意[]; }

    (x: {
>x : { (a: 数字): 数字; (a: 文字): 文字; }

        (a: number): number;
>a : 数字
>类型别名 :=> 数字

        (a: string): string;
>a : 文字
>类型别名 :=> 文字

    }): any[];
    (x: {
>x : { (a: 真假): 真假; (a: Date): Date; }

        (a: boolean): boolean;
>a : 真假
>类型别名 :=> 真假

        (a: Date): Date;
>a : Date
>Date : Date
>Date : Date

    }): any[];
}): typeof a;
>a : { (x: { (a: 数字): 数字; (a: 文字): 文字; }): 任意[]; (x: { (a: 真假): 真假; (a: Date): Date; }): 任意[]; }

declare function foo18(a: any): any;
>foo18 : { (a: { (x: { (a: 数字): 数字; (a: 文字): 文字; }): 任意[]; (x: { (a: 真假): 真假; (a: Date): Date; }): 任意[]; }): { (x: { (a: 数字): 数字; (a: 文字): 文字; }): 任意[]; (x: { (a: 真假): 真假; (a: Date): Date; }): 任意[]; }; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

var r1arg1 = <T>(x: T) => [x];
>r1arg1 : <T>(x: T) => T[]
><T>(x: T) => [x] : <T>(x: T) => T[]
>T : T
>x : T
>T : T
>[x] : T[]
>x : T

var r1arg2 = (x: number) => [1];
>r1arg2 : (x: 数字) => 数字[]
>(x: number) => [1] : (x: 数字) => 数字[]
>x : 数字
>类型别名 :=> 数字
>[1] : 数字[]
>1 : 1

var r1 = foo1(r1arg1); // any, return types are not subtype of first overload
>r1 : (x: 数字) => 数字[]
>foo1(r1arg1) : (x: 数字) => 数字[]
>foo1 : { (a: (x: 数字) => 数字[]): (x: 数字) => 数字[]; (a: 任意): 任意; }
>r1arg1 : <T>(x: T) => T[]

var r1a = [r1arg2, r1arg1]; // generic signature, subtype in both directions
>r1a : ((x: 数字) => 数字[])[]
>[r1arg2, r1arg1] : ((x: 数字) => 数字[])[]
>r1arg2 : (x: 数字) => 数字[]
>r1arg1 : <T>(x: T) => T[]

var r1b = [r1arg1, r1arg2]; // generic signature, subtype in both directions
>r1b : ((x: 数字) => 数字[])[]
>[r1arg1, r1arg2] : ((x: 数字) => 数字[])[]
>r1arg1 : <T>(x: T) => T[]
>r1arg2 : (x: 数字) => 数字[]

var r2arg1 = <T>(x: T) => [''];
>r2arg1 : <T>(x: T) => 文字[]
><T>(x: T) => [''] : <T>(x: T) => 文字[]
>T : T
>x : T
>T : T
>[''] : 文字[]
>'' : ""

var r2arg2 = (x: number) => [''];
>r2arg2 : (x: 数字) => 文字[]
>(x: number) => [''] : (x: 数字) => 文字[]
>x : 数字
>类型别名 :=> 数字
>[''] : 文字[]
>'' : ""

var r2 = foo2(r2arg1); 
>r2 : (x: 数字) => 文字[]
>foo2(r2arg1) : (x: 数字) => 文字[]
>foo2 : { (a: (x: 数字) => 文字[]): (x: 数字) => 文字[]; (a: 任意): 任意; }
>r2arg1 : <T>(x: T) => 文字[]

var r2a = [r2arg1, r2arg2];
>r2a : ((x: 数字) => 文字[])[]
>[r2arg1, r2arg2] : ((x: 数字) => 文字[])[]
>r2arg1 : <T>(x: T) => 文字[]
>r2arg2 : (x: 数字) => 文字[]

var r2b = [r2arg2, r2arg1];
>r2b : ((x: 数字) => 文字[])[]
>[r2arg2, r2arg1] : ((x: 数字) => 文字[])[]
>r2arg2 : (x: 数字) => 文字[]
>r2arg1 : <T>(x: T) => 文字[]

var r3arg1 = <T>(x: T) => x;
>r3arg1 : <T>(x: T) => T
><T>(x: T) => x : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T

var r3arg2 = (x: number) => { };
>r3arg2 : (x: 数字) => 无值
>(x: number) => { } : (x: 数字) => 无值
>x : 数字
>类型别名 :=> 数字

var r3 = foo3(r3arg1); 
>r3 : (x: 数字) => 无值
>foo3(r3arg1) : (x: 数字) => 无值
>foo3 : { (a: (x: 数字) => 无值): (x: 数字) => 无值; (a: 任意): 任意; }
>r3arg1 : <T>(x: T) => T

var r3a = [r3arg1, r3arg2];
>r3a : ((x: 数字) => 无值)[]
>[r3arg1, r3arg2] : ((x: 数字) => 无值)[]
>r3arg1 : <T>(x: T) => T
>r3arg2 : (x: 数字) => 无值

var r3b = [r3arg2, r3arg1];
>r3b : ((x: 数字) => 无值)[]
>[r3arg2, r3arg1] : ((x: 数字) => 无值)[]
>r3arg2 : (x: 数字) => 无值
>r3arg1 : <T>(x: T) => T

var r4arg1 = <T, U>(x: T, y: U) => x;
>r4arg1 : <T, U>(x: T, y: U) => T
><T, U>(x: T, y: U) => x : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>x : T

var r4arg2 = (x: string, y: number) => '';
>r4arg2 : (x: 文字, y: 数字) => 文字
>(x: string, y: number) => '' : (x: 文字, y: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>'' : ""

var r4 = foo4(r4arg1); // any
>r4 : (x: 文字, y: 数字) => 文字
>foo4(r4arg1) : (x: 文字, y: 数字) => 文字
>foo4 : { (a: (x: 文字, y: 数字) => 文字): (x: 文字, y: 数字) => 文字; (a: 任意): 任意; }
>r4arg1 : <T, U>(x: T, y: U) => T

var r4a = [r4arg1, r4arg2];
>r4a : ((x: 文字, y: 数字) => 文字)[]
>[r4arg1, r4arg2] : ((x: 文字, y: 数字) => 文字)[]
>r4arg1 : <T, U>(x: T, y: U) => T
>r4arg2 : (x: 文字, y: 数字) => 文字

var r4b = [r4arg2, r4arg1];
>r4b : ((x: 文字, y: 数字) => 文字)[]
>[r4arg2, r4arg1] : ((x: 文字, y: 数字) => 文字)[]
>r4arg2 : (x: 文字, y: 数字) => 文字
>r4arg1 : <T, U>(x: T, y: U) => T

var r5arg1 = <T, U>(x: (arg: T) => U) => <T>null;
>r5arg1 : <T, U>(x: (arg: T) => U) => T
><T, U>(x: (arg: T) => U) => <T>null : <T, U>(x: (arg: T) => U) => T
>T : T
>U : U
>x : (arg: T) => U
>arg : T
>T : T
>U : U
><T>null : T
>T : T
>null : 空值
>类型别名 :=> 空值

var r5arg2 = (x: (arg: string) => number) => '';
>r5arg2 : (x: (arg: 文字) => 数字) => 文字
>(x: (arg: string) => number) => '' : (x: (arg: 文字) => 数字) => 文字
>x : (arg: 文字) => 数字
>arg : 文字
>类型别名 :=> 文字
>'' : ""

var r5 = foo5(r5arg1); // any
>r5 : (x: (arg: 文字) => 数字) => 文字
>foo5(r5arg1) : (x: (arg: 文字) => 数字) => 文字
>foo5 : { (a: (x: (arg: 文字) => 数字) => 文字): (x: (arg: 文字) => 数字) => 文字; (a: 任意): 任意; }
>r5arg1 : <T, U>(x: (arg: T) => U) => T

var r5a = [r5arg1, r5arg2];
>r5a : ((x: (arg: 文字) => 数字) => 文字)[]
>[r5arg1, r5arg2] : ((x: (arg: 文字) => 数字) => 文字)[]
>r5arg1 : <T, U>(x: (arg: T) => U) => T
>r5arg2 : (x: (arg: 文字) => 数字) => 文字

var r5b = [r5arg2, r5arg1];
>r5b : ((x: (arg: 文字) => 数字) => 文字)[]
>[r5arg2, r5arg1] : ((x: (arg: 文字) => 数字) => 文字)[]
>r5arg2 : (x: (arg: 文字) => 数字) => 文字
>r5arg1 : <T, U>(x: (arg: T) => U) => T

var r6arg1 = <T extends Base, U extends Derived>(x: (arg: T) => U) => <T>null;
>r6arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => T
><T extends Base, U extends Derived>(x: (arg: T) => U) => <T>null : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => T
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : (arg: T) => U
>arg : T
>T : T
>U : U
><T>null : T
>T : T
>null : 空值
>类型别名 :=> 空值

var r6arg2 = (x: (arg: Base) => Derived) => <Base>null;
>r6arg2 : (x: (arg: Base) => Derived) => Base
>(x: (arg: Base) => Derived) => <Base>null : (x: (arg: Base) => Derived) => Base
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
><Base>null : Base
>Base : Base
>null : 空值
>类型别名 :=> 空值

var r6 = foo6(r6arg1); // any
>r6 : (x: (arg: Base) => Derived) => Base
>foo6(r6arg1) : (x: (arg: Base) => Derived) => Base
>foo6 : { (a: (x: (arg: Base) => Derived) => Base): (x: (arg: Base) => Derived) => Base; (a: 任意): 任意; }
>r6arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => T

var r6a = [r6arg1, r6arg2];
>r6a : ((x: (arg: Base) => Derived) => Base)[]
>[r6arg1, r6arg2] : ((x: (arg: Base) => Derived) => Base)[]
>r6arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => T
>r6arg2 : (x: (arg: Base) => Derived) => Base

var r6b = [r6arg2, r6arg1];
>r6b : ((x: (arg: Base) => Derived) => Base)[]
>[r6arg2, r6arg1] : ((x: (arg: Base) => Derived) => Base)[]
>r6arg2 : (x: (arg: Base) => Derived) => Base
>r6arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => T

var r7arg1 = <T extends Base, U extends Derived>(x: (arg: T) => U) => (r: T) => <U>null;
>r7arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => (r: T) => U
><T extends Base, U extends Derived>(x: (arg: T) => U) => (r: T) => <U>null : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => (r: T) => U
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>(r: T) => <U>null : (r: T) => U
>r : T
>T : T
><U>null : U
>U : U
>null : 空值
>类型别名 :=> 空值

var r7arg2 = (x: (arg: Base) => Derived) => (r: Base) => <Derived>null;
>r7arg2 : (x: (arg: Base) => Derived) => (r: Base) => Derived
>(x: (arg: Base) => Derived) => (r: Base) => <Derived>null : (x: (arg: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>(r: Base) => <Derived>null : (r: Base) => Derived
>r : Base
>Base : Base
><Derived>null : Derived
>Derived : Derived
>null : 空值
>类型别名 :=> 空值

var r7 = foo7(r7arg1); // any
>r7 : (x: (arg: Base) => Derived) => (r: Base) => Derived
>foo7(r7arg1) : (x: (arg: Base) => Derived) => (r: Base) => Derived
>foo7 : { (a: (x: (arg: Base) => Derived) => (r: Base) => Derived): (x: (arg: Base) => Derived) => (r: Base) => Derived; (a: 任意): 任意; }
>r7arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => (r: T) => U

var r7a = [r7arg1, r7arg2];
>r7a : ((x: (arg: Base) => Derived) => (r: Base) => Derived)[]
>[r7arg1, r7arg2] : ((x: (arg: Base) => Derived) => (r: Base) => Derived)[]
>r7arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => (r: T) => U
>r7arg2 : (x: (arg: Base) => Derived) => (r: Base) => Derived

var r7b = [r7arg2, r7arg1];
>r7b : ((x: (arg: Base) => Derived) => (r: Base) => Derived)[]
>[r7arg2, r7arg1] : ((x: (arg: Base) => Derived) => (r: Base) => Derived)[]
>r7arg2 : (x: (arg: Base) => Derived) => (r: Base) => Derived
>r7arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U) => (r: T) => U

var r8arg1 = <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => <U>null;
>r8arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U
><T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => <U>null : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>y : (arg2: T) => U
>arg2 : T
>T : T
>U : U
>(r: T) => <U>null : (r: T) => U
>r : T
>T : T
><U>null : U
>U : U
>null : 空值
>类型别名 :=> 空值

var r8arg2 = (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => <Derived>null;
>r8arg2 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>(x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => <Derived>null : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>y : (arg2: Base) => Derived
>arg2 : Base
>Base : Base
>Derived : Derived
>(r: Base) => <Derived>null : (r: Base) => Derived
>r : Base
>Base : Base
><Derived>null : Derived
>Derived : Derived
>null : 空值
>类型别名 :=> 空值

var r8 = foo8(r8arg1); // any
>r8 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>foo8(r8arg1) : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>foo8 : { (a: (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived): (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived; (a: 任意): 任意; }
>r8arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U

var r8a = [r8arg1, r8arg2];
>r8a : ((x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived)[]
>[r8arg1, r8arg2] : ((x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived)[]
>r8arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U
>r8arg2 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived

var r8b = [r8arg2, r8arg1];
>r8b : ((x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived)[]
>[r8arg2, r8arg1] : ((x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived)[]
>r8arg2 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>r8arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U

var r9arg1 = <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: string; bing: number }) => U) => (r: T) => <U>null;
>r9arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: { foo: 文字; bing: 数字; }) => U) => (r: T) => U
><T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: string; bing: number }) => U) => (r: T) => <U>null : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: { foo: 文字; bing: 数字; }) => U) => (r: T) => U
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : (arg: T) => U
>arg : T
>T : T
>U : U
>y : (arg2: { foo: 文字; bing: 数字; }) => U
>arg2 : { foo: 文字; bing: 数字; }
>foo : 文字
>类型别名 :=> 文字
>bing : 数字
>类型别名 :=> 数字
>U : U
>(r: T) => <U>null : (r: T) => U
>r : T
>T : T
><U>null : U
>U : U
>null : 空值
>类型别名 :=> 空值

var r9arg2 = (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => <Derived>null;
>r9arg2 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>(x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => <Derived>null : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>y : (arg2: Base) => Derived
>arg2 : Base
>Base : Base
>Derived : Derived
>(r: Base) => <Derived>null : (r: Base) => Derived
>r : Base
>Base : Base
><Derived>null : Derived
>Derived : Derived
>null : 空值
>类型别名 :=> 空值

var r9 = foo9(r9arg1); // any
>r9 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>foo9(r9arg1) : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>foo9 : { (a: (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived): (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived; (a: 任意): 任意; }
>r9arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: { foo: 文字; bing: 数字; }) => U) => (r: T) => U

var r9a = [r9arg1, r9arg2];
>r9a : ((x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived)[]
>[r9arg1, r9arg2] : ((x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived)[]
>r9arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: { foo: 文字; bing: 数字; }) => U) => (r: T) => U
>r9arg2 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived

var r9b = [r9arg2, r9arg1];
>r9b : ((x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived)[]
>[r9arg2, r9arg1] : ((x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived)[]
>r9arg2 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>r9arg1 : <T 扩展 Base, U 扩展 Derived>(x: (arg: T) => U, y: (arg2: { foo: 文字; bing: 数字; }) => U) => (r: T) => U

var r10arg1 = <T extends Derived>(...x: T[]) => x[0];
>r10arg1 : <T 扩展 Derived>(...x: T[]) => T
><T extends Derived>(...x: T[]) => x[0] : <T 扩展 Derived>(...x: T[]) => T
>T : T
>Derived : Derived
>x : T[]
>T : T
>x[0] : T
>x : T[]
>0 : 0

var r10arg2 = (...x: Derived[]) => <Derived>null;
>r10arg2 : (...x: Derived[]) => Derived
>(...x: Derived[]) => <Derived>null : (...x: Derived[]) => Derived
>x : Derived[]
>Derived : Derived
><Derived>null : Derived
>Derived : Derived
>null : 空值
>类型别名 :=> 空值

var r10 = foo10(r10arg1); // any
>r10 : (...x: Derived[]) => Derived
>foo10(r10arg1) : (...x: Derived[]) => Derived
>foo10 : { (a: (...x: Derived[]) => Derived): (...x: Derived[]) => Derived; (a: 任意): 任意; }
>r10arg1 : <T 扩展 Derived>(...x: T[]) => T

var r10a = [r10arg1, r10arg2];
>r10a : ((...x: Derived[]) => Derived)[]
>[r10arg1, r10arg2] : ((...x: Derived[]) => Derived)[]
>r10arg1 : <T 扩展 Derived>(...x: T[]) => T
>r10arg2 : (...x: Derived[]) => Derived

var r10b = [r10arg2, r10arg1];
>r10b : ((...x: Derived[]) => Derived)[]
>[r10arg2, r10arg1] : ((...x: Derived[]) => Derived)[]
>r10arg2 : (...x: Derived[]) => Derived
>r10arg1 : <T 扩展 Derived>(...x: T[]) => T

var r11arg1 = <T extends Base>(x: T, y: T) => x;
>r11arg1 : <T 扩展 Base>(x: T, y: T) => T
><T extends Base>(x: T, y: T) => x : <T 扩展 Base>(x: T, y: T) => T
>T : T
>Base : Base
>x : T
>T : T
>y : T
>T : T
>x : T

var r11arg2 = (x: { foo: string }, y: { foo: string; bar: string }) => <Base>null;
>r11arg2 : (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>(x: { foo: string }, y: { foo: string; bar: string }) => <Base>null : (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>x : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字
>y : { foo: 文字; bar: 文字; }
>foo : 文字
>类型别名 :=> 文字
>bar : 文字
>类型别名 :=> 文字
><Base>null : Base
>Base : Base
>null : 空值
>类型别名 :=> 空值

var r11 = foo11(r11arg1); // any
>r11 : (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>foo11(r11arg1) : (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>foo11 : { (a: (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base): (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base; (a: 任意): 任意; }
>r11arg1 : <T 扩展 Base>(x: T, y: T) => T

var r11a = [r11arg1, r11arg2];
>r11a : ((x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base)[]
>[r11arg1, r11arg2] : ((x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base)[]
>r11arg1 : <T 扩展 Base>(x: T, y: T) => T
>r11arg2 : (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base

var r11b = [r11arg2, r11arg1];
>r11b : ((x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base)[]
>[r11arg2, r11arg1] : ((x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base)[]
>r11arg2 : (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>r11arg1 : <T 扩展 Base>(x: T, y: T) => T

var r12arg1 = <T extends Array<Base>>(x: Array<Base>, y: T) => <Array<Derived>>null;
>r12arg1 : <T 扩展 Base[]>(x: Base[], y: T) => Derived[]
><T extends Array<Base>>(x: Array<Base>, y: T) => <Array<Derived>>null : <T 扩展 Base[]>(x: Base[], y: T) => Derived[]
>T : T
>Array : T[]
>Base : Base
>x : Base[]
>Array : T[]
>Base : Base
>y : T
>T : T
><Array<Derived>>null : Derived[]
>Array : T[]
>Derived : Derived
>null : 空值
>类型别名 :=> 空值

var r12arg2 = (x: Array<Base>, y: Array<Derived2>) => <Array<Derived>>null;
>r12arg2 : (x: Base[], y: Derived2[]) => Derived[]
>(x: Array<Base>, y: Array<Derived2>) => <Array<Derived>>null : (x: Base[], y: Derived2[]) => Derived[]
>x : Base[]
>Array : T[]
>Base : Base
>y : Derived2[]
>Array : T[]
>Derived2 : Derived2
><Array<Derived>>null : Derived[]
>Array : T[]
>Derived : Derived
>null : 空值
>类型别名 :=> 空值

var r12 = foo12(r12arg1); // any
>r12 : (x: Base[], y: Derived2[]) => Derived[]
>foo12(r12arg1) : (x: Base[], y: Derived2[]) => Derived[]
>foo12 : { (a: (x: Base[], y: Derived2[]) => Derived[]): (x: Base[], y: Derived2[]) => Derived[]; (a: 任意): 任意; }
>r12arg1 : <T 扩展 Base[]>(x: Base[], y: T) => Derived[]

var r12a = [r12arg1, r12arg2];
>r12a : ((x: Base[], y: Derived2[]) => Derived[])[]
>[r12arg1, r12arg2] : ((x: Base[], y: Derived2[]) => Derived[])[]
>r12arg1 : <T 扩展 Base[]>(x: Base[], y: T) => Derived[]
>r12arg2 : (x: Base[], y: Derived2[]) => Derived[]

var r12b = [r12arg2, r12arg1];
>r12b : ((x: Base[], y: Derived2[]) => Derived[])[]
>[r12arg2, r12arg1] : ((x: Base[], y: Derived2[]) => Derived[])[]
>r12arg2 : (x: Base[], y: Derived2[]) => Derived[]
>r12arg1 : <T 扩展 Base[]>(x: Base[], y: T) => Derived[]

var r13arg1 = <T extends Array<Derived>>(x: Array<Base>, y: T) => y;
>r13arg1 : <T 扩展 Derived[]>(x: Base[], y: T) => T
><T extends Array<Derived>>(x: Array<Base>, y: T) => y : <T 扩展 Derived[]>(x: Base[], y: T) => T
>T : T
>Array : T[]
>Derived : Derived
>x : Base[]
>Array : T[]
>Base : Base
>y : T
>T : T
>y : T

var r13arg2 = (x: Array<Base>, y: Array<Derived>) => <Array<Derived>>null;
>r13arg2 : (x: Base[], y: Derived[]) => Derived[]
>(x: Array<Base>, y: Array<Derived>) => <Array<Derived>>null : (x: Base[], y: Derived[]) => Derived[]
>x : Base[]
>Array : T[]
>Base : Base
>y : Derived[]
>Array : T[]
>Derived : Derived
><Array<Derived>>null : Derived[]
>Array : T[]
>Derived : Derived
>null : 空值
>类型别名 :=> 空值

var r13 = foo13(r13arg1); // any
>r13 : (x: Base[], y: Derived[]) => Derived[]
>foo13(r13arg1) : (x: Base[], y: Derived[]) => Derived[]
>foo13 : { (a: (x: Base[], y: Derived[]) => Derived[]): (x: Base[], y: Derived[]) => Derived[]; (a: 任意): 任意; }
>r13arg1 : <T 扩展 Derived[]>(x: Base[], y: T) => T

var r13a = [r13arg1, r13arg2];
>r13a : ((x: Base[], y: Derived[]) => Derived[])[]
>[r13arg1, r13arg2] : ((x: Base[], y: Derived[]) => Derived[])[]
>r13arg1 : <T 扩展 Derived[]>(x: Base[], y: T) => T
>r13arg2 : (x: Base[], y: Derived[]) => Derived[]

var r13b = [r13arg2, r13arg1];
>r13b : ((x: Base[], y: Derived[]) => Derived[])[]
>[r13arg2, r13arg1] : ((x: Base[], y: Derived[]) => Derived[])[]
>r13arg2 : (x: Base[], y: Derived[]) => Derived[]
>r13arg1 : <T 扩展 Derived[]>(x: Base[], y: T) => T

var r14arg1 = <T>(x: { a: T; b: T }) => x.a;
>r14arg1 : <T>(x: { a: T; b: T; }) => T
><T>(x: { a: T; b: T }) => x.a : <T>(x: { a: T; b: T; }) => T
>T : T
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
>x.a : T
>x : { a: T; b: T; }
>a : T

var r14arg2 = (x: { a: string; b: number }) => <Object>null;
>r14arg2 : (x: { a: 文字; b: 数字; }) => Object
>(x: { a: string; b: number }) => <Object>null : (x: { a: 文字; b: 数字; }) => Object
>x : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
><Object>null : Object
>Object : Object
>null : 空值
>类型别名 :=> 空值

var r14 = foo14(r14arg1); // any
>r14 : (x: { a: 文字; b: 数字; }) => Object
>foo14(r14arg1) : (x: { a: 文字; b: 数字; }) => Object
>foo14 : { (a: (x: { a: 文字; b: 数字; }) => Object): (x: { a: 文字; b: 数字; }) => Object; (a: 任意): 任意; }
>r14arg1 : <T>(x: { a: T; b: T; }) => T

var r14a = [r14arg1, r14arg2];
>r14a : ((x: { a: 文字; b: 数字; }) => Object)[]
>[r14arg1, r14arg2] : ((x: { a: 文字; b: 数字; }) => Object)[]
>r14arg1 : <T>(x: { a: T; b: T; }) => T
>r14arg2 : (x: { a: 文字; b: 数字; }) => Object

var r14b = [r14arg2, r14arg1];
>r14b : ((x: { a: 文字; b: 数字; }) => Object)[]
>[r14arg2, r14arg1] : ((x: { a: 文字; b: 数字; }) => Object)[]
>r14arg2 : (x: { a: 文字; b: 数字; }) => Object
>r14arg1 : <T>(x: { a: T; b: T; }) => T

var r15arg1 = <T>(x: T) => <T[]>null
>r15arg1 : <T>(x: T) => T[]
><T>(x: T) => <T[]>null : <T>(x: T) => T[]
>T : T
>x : T
>T : T
><T[]>null : T[]
>T : T
>null : 空值
>类型别名 :=> 空值

var r15 = foo15(r15arg1); // any
>r15 : 任意
>类型别名 :=> 任意
>foo15(r15arg1) : 任意
>类型别名 :=> 任意
>foo15 : { (a: { (x: 数字): 数字[]; (x: 文字): 文字[]; }): { (x: 数字): 数字[]; (x: 文字): 文字[]; }; (a: 任意): 任意; }
>r15arg1 : <T>(x: T) => T[]

var r16arg1 = <T extends Base>(x: T) => [1];
>r16arg1 : <T 扩展 Base>(x: T) => 数字[]
><T extends Base>(x: T) => [1] : <T 扩展 Base>(x: T) => 数字[]
>T : T
>Base : Base
>x : T
>T : T
>[1] : 数字[]
>1 : 1

var r16 = foo16(r16arg1); 
>r16 : { <T 扩展 Derived>(x: T): 数字[]; <U 扩展 Base>(x: U): 数字[]; }
>foo16(r16arg1) : { <T 扩展 Derived>(x: T): 数字[]; <U 扩展 Base>(x: U): 数字[]; }
>foo16 : { (a: { <T 扩展 Derived>(x: T): 数字[]; <U 扩展 Base>(x: U): 数字[]; }): { <T 扩展 Derived>(x: T): 数字[]; <U 扩展 Base>(x: U): 数字[]; }; (a: 任意): 任意; }
>r16arg1 : <T 扩展 Base>(x: T) => 数字[]

var r17arg1 = <T>(x: (a: T) => T) => <T[]>null;
>r17arg1 : <T>(x: (a: T) => T) => T[]
><T>(x: (a: T) => T) => <T[]>null : <T>(x: (a: T) => T) => T[]
>T : T
>x : (a: T) => T
>a : T
>T : T
>T : T
><T[]>null : T[]
>T : T
>null : 空值
>类型别名 :=> 空值

var r17 = foo17(r17arg1); // any
>r17 : 任意
>类型别名 :=> 任意
>foo17(r17arg1) : 任意
>类型别名 :=> 任意
>foo17 : { (a: { (x: (a: 数字) => 数字): 数字[]; (x: (a: 文字) => 文字): 文字[]; }): { (x: (a: 数字) => 数字): 数字[]; (x: (a: 文字) => 文字): 文字[]; }; (a: 任意): 任意; }
>r17arg1 : <T>(x: (a: T) => T) => T[]

var r18arg1 = <T>(x: (a: T) => T) => <T[]>null;
>r18arg1 : <T>(x: (a: T) => T) => T[]
><T>(x: (a: T) => T) => <T[]>null : <T>(x: (a: T) => T) => T[]
>T : T
>x : (a: T) => T
>a : T
>T : T
>T : T
><T[]>null : T[]
>T : T
>null : 空值
>类型别名 :=> 空值

var r18 = foo18(r18arg1); 
>r18 : { (x: { (a: 数字): 数字; (a: 文字): 文字; }): 任意[]; (x: { (a: 真假): 真假; (a: Date): Date; }): 任意[]; }
>foo18(r18arg1) : { (x: { (a: 数字): 数字; (a: 文字): 文字; }): 任意[]; (x: { (a: 真假): 真假; (a: Date): Date; }): 任意[]; }
>foo18 : { (a: { (x: { (a: 数字): 数字; (a: 文字): 文字; }): 任意[]; (x: { (a: 真假): 真假; (a: Date): Date; }): 任意[]; }): { (x: { (a: 数字): 数字; (a: 文字): 文字; }): 任意[]; (x: { (a: 真假): 真假; (a: Date): Date; }): 任意[]; }; (a: 任意): 任意; }
>r18arg1 : <T>(x: (a: T) => T) => T[]

