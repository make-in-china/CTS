=== tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts ===
//super call in class constructor with no base type
class NoBase {
>NoBase : NoBase

    constructor() {
        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }

    //super call in class member function with no base type
    fn() {
>fn : () => 无值

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }

    //super call in class accessor (get and set) with no base type
    get foo() {
>foo : 任意
>类型别名 :=> 任意

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
    set foo(v) {
>foo : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }

    //super call in class member initializer with no base type
    p = super();
>p : 无值
>类型别名 :=> 无值
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意

    //super call in static class member function with no base type
    static fn() {
>fn : () => 无值

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }

    //super call in static class member initializer with no base type
    static k = super();
>k : 无值
>类型别名 :=> 无值
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意

    //super call in static class accessor (get and set) with no base type
    static get q() {
>q : 任意
>类型别名 :=> 任意

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
    static set q(n) {
>q : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }
}

class Base<T> { private n: T; }
>Base : Base<T>
>T : T
>n : T
>T : T

class Derived<T> extends Base<T> {
>Derived : Derived<T>
>T : T
>Base : Base<T>
>T : T

    //super call with type arguments 
    constructor() {
        super<string>();
>super<string>() : 任意
>类型别名 :=> 任意
>super : 任意
>类型别名 :=> 任意
>super : Base<T>
> : 任意
>类型别名 :=> 任意

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 Base
    }
}


class OtherBase {
>OtherBase : OtherBase

    private n: string;
>n : 文字
>类型别名 :=> 文字
}

class OtherDerived extends OtherBase {
>OtherDerived : OtherDerived
>OtherBase : OtherBase

    //super call in class member initializer of derived type
    t = super();
>t : 无值
>类型别名 :=> 无值
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意

    fn() {
>fn : () => 无值

        //super call in class member function of derived type
        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }

    //super call in class accessor (get and set) of derived type
    get foo() {
>foo : 任意
>类型别名 :=> 任意

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
    set foo(n) {
>foo : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

        super();
>super() : 无值
>类型别名 :=> 无值
>super : 任意
>类型别名 :=> 任意
    }
}

