=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints.ts ===
// Generic call with constraints infering type parameter from object member properties
// No errors expected

class C {
>C : C

    x: string;
>x : 文字
>类型别名 :=> 文字
}

class D {
>D : D

    x: string;
>x : 文字
>类型别名 :=> 文字

    y: string;
>y : 文字
>类型别名 :=> 文字
}

class X<T> {
>X : X<T>
>T : T

    x: T;
>x : T
>T : T
}

function foo<T extends { x: string }>(t: X<T>, t2: X<T>) {
>foo : <T 扩展 { x: 文字; }>(t: X<T>, t2: X<T>) => T
>T : T
>x : 文字
>类型别名 :=> 文字
>t : X<T>
>X : X<T>
>T : T
>t2 : X<T>
>X : X<T>
>T : T

    var x: T;
>x : T
>T : T

    return x;
>x : T
}

var c1 = new X<C>();
>c1 : X<C>
>new X<C>() : X<C>
>X : 类为 X
>C : C

var d1 = new X<D>();
>d1 : X<D>
>new X<D>() : X<D>
>X : 类为 X
>D : D

var r = foo(c1, d1); 
>r : C
>foo(c1, d1) : C
>foo : <T 扩展 { x: 文字; }>(t: X<T>, t2: X<T>) => T
>c1 : X<C>
>d1 : X<D>

var r2 = foo(c1, c1);
>r2 : C
>foo(c1, c1) : C
>foo : <T 扩展 { x: 文字; }>(t: X<T>, t2: X<T>) => T
>c1 : X<C>
>c1 : X<C>

function foo2<T extends C>(t: X<T>, t2: X<T>) {
>foo2 : <T 扩展 C>(t: X<T>, t2: X<T>) => T
>T : T
>C : C
>t : X<T>
>X : X<T>
>T : T
>t2 : X<T>
>X : X<T>
>T : T

    var x: T;
>x : T
>T : T

    return x;
>x : T
}

var r = foo2(c1, d1); 
>r : C
>foo2(c1, d1) : C
>foo2 : <T 扩展 C>(t: X<T>, t2: X<T>) => T
>c1 : X<C>
>d1 : X<D>

var r2 = foo2(c1, c1);
>r2 : C
>foo2(c1, c1) : C
>foo2 : <T 扩展 C>(t: X<T>, t2: X<T>) => T
>c1 : X<C>
>c1 : X<C>

