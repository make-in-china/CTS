=== tests/cases/compiler/typePredicateInLoop.ts ===
// Repro from #12101

interface Type {
>Type : Type

  type: number;
>type : number
>类型别名 :=> 数字
}

interface TypeExt extends Type {
>TypeExt : TypeExt
>Type : Type

  arr: Type[];
>arr : Type[]
>Type : Type
}

const guard = (arg: Type): arg is TypeExt => arg.type === 1;
>guard : (arg: Type) => arg is TypeExt
>(arg: Type): arg is TypeExt => arg.type === 1 : (arg: Type) => arg is TypeExt
>arg : Type
>Type : Type
>arg : any
>类型别名 :=> 任意
>TypeExt : TypeExt
>arg.type === 1 : boolean
>类型别名 :=> 真假
>arg.type : number
>类型别名 :=> 数字
>arg : Type
>type : number
>类型别名 :=> 数字
>1 : 1

const otherFunc = (arg1: Type, arg2: TypeExt): void => {};
>otherFunc : (arg1: Type, arg2: TypeExt) => void
>(arg1: Type, arg2: TypeExt): void => {} : (arg1: Type, arg2: TypeExt) => void
>arg1 : Type
>Type : Type
>arg2 : TypeExt
>TypeExt : TypeExt

export function y(arg: Type): void {
>y : (arg: Type) => void
>arg : Type
>Type : Type

  if (guard(arg)) {
>guard(arg) : boolean
>类型别名 :=> 真假
>guard : (arg: Type) => arg is TypeExt
>arg : Type

    for (const ITEM of arg.arr) {
>ITEM : Type
>arg.arr : Type[]
>arg : TypeExt
>arr : Type[]

      if (otherFunc(ITEM, arg)) {
>otherFunc(ITEM, arg) : void
>类型别名 :=> 无值
>otherFunc : (arg1: Type, arg2: TypeExt) => void
>ITEM : Type
>arg : TypeExt
      }
    }
  }
}
