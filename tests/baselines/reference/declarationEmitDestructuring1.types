=== tests/cases/compiler/declarationEmitDestructuring1.ts ===
function foo([a, b, c]: [string, string, string]): void { }
>foo : ([a, b, c]: [文字, 文字, 文字]) => 无值
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字
>c : 文字
>类型别名 :=> 文字

function far([a, [b], [[c]]]: [number, boolean[], string[][]]): void { }
>far : ([a, [b], [[c]]]: [数字, 真假[], 文字[][]]) => 无值
>a : 数字
>类型别名 :=> 数字
>b : 真假
>类型别名 :=> 真假
>c : 文字
>类型别名 :=> 文字

function bar({a1, b1, c1}: { a1: number, b1: boolean, c1: string }): void { }
>bar : ({ a1, b1, c1 }: { a1: 数字; b1: 真假; c1: 文字; }) => 无值
>a1 : 数字
>类型别名 :=> 数字
>b1 : 真假
>类型别名 :=> 真假
>c1 : 文字
>类型别名 :=> 文字
>a1 : 数字
>类型别名 :=> 数字
>b1 : 真假
>类型别名 :=> 真假
>c1 : 文字
>类型别名 :=> 文字

function baz({a2, b2: {b1, c1}}: { a2: number, b2: { b1: boolean, c1: string } }): void { } 
>baz : ({ a2, b2: { b1, c1 } }: { a2: 数字; b2: { b1: 真假; c1: 文字; }; }) => 无值
>a2 : 数字
>类型别名 :=> 数字
>b2 : 任意
>类型别名 :=> 任意
>b1 : 真假
>类型别名 :=> 真假
>c1 : 文字
>类型别名 :=> 文字
>a2 : 数字
>类型别名 :=> 数字
>b2 : { b1: 真假; c1: 文字; }
>b1 : 真假
>类型别名 :=> 真假
>c1 : 文字
>类型别名 :=> 文字

