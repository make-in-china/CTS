=== tests/cases/compiler/parseTypes.ts ===
var x = <() => number>null;
>x : () => 数字
><() => number>null : () => 数字
>null : 空值
>类型别名 :=> 空值

var y = <{(): number; }>null;
>y : () => 数字
><{(): number; }>null : () => 数字
>null : 空值
>类型别名 :=> 空值

var z = <{new(): number; }>null
>z : 新建 () => 数字
><{new(): number; }>null : 新建 () => 数字
>null : 空值
>类型别名 :=> 空值

var w = <{[x:number]: number; }>null
>w : { [x: 数字]: 数字; }
><{[x:number]: number; }>null : { [x: 数字]: 数字; }
>x : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

function f() { return 3 };
>f : () => 数字
>3 : 3

function g(s: string) { true };
>g : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字
>true : 为真
>类型别名 :=> 为真

y=f;
>y=f : () => 数字
>y : () => 数字
>f : () => 数字

y=g;
>y=g : (s: 文字) => 无值
>y : () => 数字
>g : (s: 文字) => 无值

x=g;
>x=g : (s: 文字) => 无值
>x : () => 数字
>g : (s: 文字) => 无值

w=g;
>w=g : (s: 文字) => 无值
>w : { [x: 数字]: 数字; }
>g : (s: 文字) => 无值

z=g;
>z=g : (s: 文字) => 无值
>z : 新建 () => 数字
>g : (s: 文字) => 无值

