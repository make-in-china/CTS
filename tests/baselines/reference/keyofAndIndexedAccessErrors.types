=== tests/cases/conformance/types/keyof/keyofAndIndexedAccessErrors.ts ===
class Shape {
>Shape : Shape

    name: string;
>name : 文字
>类型别名 :=> 文字

    width: number;
>width : 数字
>类型别名 :=> 数字

    height: number;
>height : 数字
>类型别名 :=> 数字

    visible: boolean;
>visible : 真假
>类型别名 :=> 真假
}

type Dictionary<T> = { [x: string]: T };
>Dictionary : Dictionary<T>
>T : T
>x : 文字
>类型别名 :=> 文字
>T : T

type T00 = keyof K0;  // Error
>T00 : 文字
>类型别名 :=> 文字
>K0 : No type information available!

type T01 = keyof Object;
>T01 : "toString" | "constructor" | "toLocaleString" | "valueOf" | "hasOwnProperty" | "isPrototypeOf" | "propertyIsEnumerable"
>Object : Object

type T02 = keyof keyof Object;
>T02 : "length" | "toString" | "valueOf" | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substring" | "toLowerCase" | "toLocaleLowerCase" | "toUpperCase" | "toLocaleUpperCase" | "trim" | "substr"
>Object : Object

type T03 = keyof keyof keyof Object;
>T03 : "length" | "toString" | "valueOf" | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substring" | "toLowerCase" | "toLocaleLowerCase" | "toUpperCase" | "toLocaleUpperCase" | "trim" | "substr"
>Object : Object

type T04 = keyof keyof keyof keyof Object;
>T04 : "length" | "toString" | "valueOf" | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substring" | "toLowerCase" | "toLocaleLowerCase" | "toUpperCase" | "toLocaleUpperCase" | "trim" | "substr"
>Object : Object

type T05 = keyof keyof keyof keyof keyof Object;
>T05 : "length" | "toString" | "valueOf" | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substring" | "toLowerCase" | "toLocaleLowerCase" | "toUpperCase" | "toLocaleUpperCase" | "trim" | "substr"
>Object : Object

type T06 = keyof keyof keyof keyof keyof keyof Object;
>T06 : "length" | "toString" | "valueOf" | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substring" | "toLowerCase" | "toLocaleLowerCase" | "toUpperCase" | "toLocaleUpperCase" | "trim" | "substr"
>Object : Object

type T10 = Shape["name"];
>T10 : 文字
>类型别名 :=> 文字
>Shape : Shape

type T11 = Shape["foo"];  // Error
>T11 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T12 = Shape["name" | "foo"];  // Error
>T12 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T13 = Shape[any];  // Error
>T13 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T14 = Shape[string];  // Error
>T14 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T15 = Shape[number];  // Error
>T15 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T16 = Shape[boolean];  // Error
>T16 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T17 = Shape[void];  // Error
>T17 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T18 = Shape[undefined];  // Error
>T18 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T19 = Shape[{ x: string }];  // Error
>T19 : 任意
>类型别名 :=> 任意
>Shape : Shape
>x : 文字
>类型别名 :=> 文字

type T20 = Shape[string | number];  // Error
>T20 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T21 = Shape[string & number];  // Error
>T21 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T22 = Shape[string | boolean];  // Error
>T22 : 任意
>类型别名 :=> 任意
>Shape : Shape

type T30 = string[]["length"];
>T30 : 数字
>类型别名 :=> 数字

type T31 = string[][number];
>T31 : 文字
>类型别名 :=> 文字

type T32 = string[][string];  // Error
>T32 : 任意
>类型别名 :=> 任意

type T33 = string[][boolean];  // Error
>T33 : 任意
>类型别名 :=> 任意

type T40 = Dictionary<string>[any];
>T40 : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>

type T41 = Dictionary<string>[number];
>T41 : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>

type T42 = Dictionary<string>[string];
>T42 : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>

type T43 = Dictionary<string>[boolean];  // Error
>T43 : 任意
>类型别名 :=> 任意
>Dictionary : Dictionary<T>

type T50 = any[any];
>T50 : 任意
>类型别名 :=> 任意

type T51 = any[number];
>T51 : 任意
>类型别名 :=> 任意

type T52 = any[string];
>T52 : 任意
>类型别名 :=> 任意

type T53 = any[boolean];  // Error
>T53 : 任意
>类型别名 :=> 任意

type T60 = {}["toString"];
>T60 : () => 文字

type T61 = []["toString"];
>T61 : () => 文字

declare let cond: boolean;
>cond : 真假
>类型别名 :=> 真假

function getProperty<T, K extends keyof T>(obj: T, key: K) {
>getProperty : <T, K 扩展 键集 T>(obj: T, key: K) => T[K]
>T : T
>K : K
>T : T
>obj : T
>T : T
>key : K
>K : K

    return obj[key];
>obj[key] : T[K]
>obj : T
>key : K
}

function setProperty<T, K extends keyof T>(obj: T, key: K, value: T[K]) {
>setProperty : <T, K 扩展 键集 T>(obj: T, key: K, value: T[K]) => 无值
>T : T
>K : K
>T : T
>obj : T
>T : T
>key : K
>K : K
>value : T[K]
>T : T
>K : K

    obj[key] = value;
>obj[key] = value : T[K]
>obj[key] : T[K]
>obj : T
>key : K
>value : T[K]
}

function f10(shape: Shape) {
>f10 : (shape: Shape) => 无值
>shape : Shape
>Shape : Shape

    let x1 = getProperty(shape, "name");
>x1 : 文字
>类型别名 :=> 文字
>getProperty(shape, "name") : 文字
>类型别名 :=> 文字
>getProperty : <T, K 扩展 键集 T>(obj: T, key: K) => T[K]
>shape : Shape
>"name" : "name"

    let x2 = getProperty(shape, "size");  // Error
>x2 : 任意
>类型别名 :=> 任意
>getProperty(shape, "size") : 任意
>类型别名 :=> 任意
>getProperty : <T, K 扩展 键集 T>(obj: T, key: K) => T[K]
>shape : Shape
>"size" : "size"

    let x3 = getProperty(shape, cond ? "name" : "size");  // Error
>x3 : 任意
>类型别名 :=> 任意
>getProperty(shape, cond ? "name" : "size") : 任意
>类型别名 :=> 任意
>getProperty : <T, K 扩展 键集 T>(obj: T, key: K) => T[K]
>shape : Shape
>cond ? "name" : "size" : "name" | "size"
>cond : 真假
>类型别名 :=> 真假
>"name" : "name"
>"size" : "size"

    setProperty(shape, "name", "rectangle");
>setProperty(shape, "name", "rectangle") : 无值
>类型别名 :=> 无值
>setProperty : <T, K 扩展 键集 T>(obj: T, key: K, value: T[K]) => 无值
>shape : Shape
>"name" : "name"
>"rectangle" : "rectangle"

    setProperty(shape, "size", 10);  // Error
>setProperty(shape, "size", 10) : 任意
>类型别名 :=> 任意
>setProperty : <T, K 扩展 键集 T>(obj: T, key: K, value: T[K]) => 无值
>shape : Shape
>"size" : "size"
>10 : 10

    setProperty(shape, cond ? "name" : "size", 10);  // Error
>setProperty(shape, cond ? "name" : "size", 10) : 任意
>类型别名 :=> 任意
>setProperty : <T, K 扩展 键集 T>(obj: T, key: K, value: T[K]) => 无值
>shape : Shape
>cond ? "name" : "size" : "name" | "size"
>cond : 真假
>类型别名 :=> 真假
>"name" : "name"
>"size" : "size"
>10 : 10
}

function f20<T, U>(k1: keyof (T | U), k2: keyof (T & U), o1: T | U, o2: T & U) {
>f20 : <T, U>(k1: 键集 (T | U), k2: 键集 (T & U), o1: T | U, o2: T & U) => 无值
>T : T
>U : U
>k1 : 键集 (T | U)
>T : T
>U : U
>k2 : 键集 (T & U)
>T : T
>U : U
>o1 : T | U
>T : T
>U : U
>o2 : T & U
>T : T
>U : U

    o1[k1];
>o1[k1] : (T | U)[键集 (T | U)]
>o1 : T | U
>k1 : 键集 (T | U)

    o1[k2];   // Error
>o1[k2] : (T | U)[键集 (T & U)]
>o1 : T | U
>k2 : 键集 (T & U)

    o2[k1];
>o2[k1] : (T & U)[键集 (T | U)]
>o2 : T & U
>k1 : 键集 (T | U)

    o2[k2];
>o2[k2] : (T & U)[键集 (T & U)]
>o2 : T & U
>k2 : 键集 (T & U)

    o1 = o2;
>o1 = o2 : T & U
>o1 : T | U
>o2 : T & U

    o2 = o1;  // Error
>o2 = o1 : T | U
>o2 : T & U
>o1 : T | U

    k1 = k2;  // Error
>k1 = k2 : 键集 (T & U)
>k1 : 键集 (T | U)
>k2 : 键集 (T & U)

    k2 = k1;
>k2 = k1 : 键集 (T | U)
>k2 : 键集 (T & U)
>k1 : 键集 (T | U)
}
