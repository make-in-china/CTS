=== tests/cases/compiler/constDeclarations_access_2.ts ===
///<reference path='constDeclarations_access_1.ts'/>
import m = require('constDeclarations_access_1');
>m : 类为 m

// Errors
m.x = 1;
>m.x = 1 : 1
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>1 : 1

m.x += 2;
>m.x += 2 : 任意
>类型别名 :=> 任意
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>2 : 2

m.x -= 3;
>m.x -= 3 : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>3 : 3

m.x *= 4;
>m.x *= 4 : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>4 : 4

m.x /= 5;
>m.x /= 5 : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>5 : 5

m.x %= 6;
>m.x %= 6 : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>6 : 6

m.x <<= 7;
>m.x <<= 7 : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>7 : 7

m.x >>= 8;
>m.x >>= 8 : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>8 : 8

m.x >>>= 9;
>m.x >>>= 9 : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>9 : 9

m.x &= 10;
>m.x &= 10 : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>10 : 10

m.x |= 11;
>m.x |= 11 : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>11 : 11

m.x ^= 12;
>m.x ^= 12 : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意
>12 : 12

m
>m : 类为 m

m.x++;
>m.x++ : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意

m.x--;
>m.x-- : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意

++m.x;
>++m.x : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意

--m.x;
>--m.x : 数字
>类型别名 :=> 数字
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意

++((m.x));
>++((m.x)) : 数字
>类型别名 :=> 数字
>((m.x)) : 任意
>类型别名 :=> 任意
>(m.x) : 任意
>类型别名 :=> 任意
>m.x : 任意
>类型别名 :=> 任意
>m : 类为 m
>x : 任意
>类型别名 :=> 任意

m["x"] = 0;
>m["x"] = 0 : 0
>m["x"] : 任意
>类型别名 :=> 任意
>m : 类为 m
>"x" : "x"
>0 : 0

// OK
var a = m.x + 1;
>a : 数字
>类型别名 :=> 数字
>m.x + 1 : 数字
>类型别名 :=> 数字
>m.x : 数字
>类型别名 :=> 数字
>m : 类为 m
>x : 数字
>类型别名 :=> 数字
>1 : 1

function f(v: number) { }
>f : (v: 数字) => 无值
>v : 数字
>类型别名 :=> 数字

f(m.x);
>f(m.x) : 无值
>类型别名 :=> 无值
>f : (v: 数字) => 无值
>m.x : 数字
>类型别名 :=> 数字
>m : 类为 m
>x : 数字
>类型别名 :=> 数字

if (m.x) { }
>m.x : 数字
>类型别名 :=> 数字
>m : 类为 m
>x : 数字
>类型别名 :=> 数字

m.x;
>m.x : 数字
>类型别名 :=> 数字
>m : 类为 m
>x : 数字
>类型别名 :=> 数字

(m.x);
>(m.x) : 数字
>类型别名 :=> 数字
>m.x : 数字
>类型别名 :=> 数字
>m : 类为 m
>x : 数字
>类型别名 :=> 数字

-m.x;
>-m.x : 数字
>类型别名 :=> 数字
>m.x : 数字
>类型别名 :=> 数字
>m : 类为 m
>x : 数字
>类型别名 :=> 数字

+m.x;
>+m.x : 数字
>类型别名 :=> 数字
>m.x : 数字
>类型别名 :=> 数字
>m : 类为 m
>x : 数字
>类型别名 :=> 数字

m.x.toString();
>m.x.toString() : 文字
>类型别名 :=> 文字
>m.x.toString : (radix?: 数字) => 文字
>m.x : 数字
>类型别名 :=> 数字
>m : 类为 m
>x : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

=== tests/cases/compiler/constDeclarations_access_1.ts ===
export const x = 0;
>x : 0
>0 : 0

