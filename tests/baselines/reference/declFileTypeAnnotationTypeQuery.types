=== tests/cases/compiler/declFileTypeAnnotationTypeQuery.ts ===
class c {
>c : c
}
module m {
>m : 类为 m

    export class c {
>c : c
    }
    export class g<T> {
>g : g<T>
>T : T
    }
}
class g<T> {
>g : g<T>
>T : T
}

// Just the name
function foo(): typeof c {
>foo : () => 类为 c
>c : 类为 c

    return c;
>c : 类为 c
}
function foo2() {
>foo2 : () => 类为 c

    return c;
>c : 类为 c
}

// Qualified name
function foo3(): typeof m.c {
>foo3 : () => 类为 m.c
>m.c : 类为 m.c
>m : 类为 m
>c : 类为 m.c

    return m.c;
>m.c : 类为 m.c
>m : 类为 m
>c : 类为 m.c
}
function foo4() {
>foo4 : () => 类为 m.c

    return m.c;
>m.c : 类为 m.c
>m : 类为 m
>c : 类为 m.c
}

// Just the name with type arguments
function foo5(): typeof g {
>foo5 : () => 类为 g
>g : 类为 g

    return g;
>g : 类为 g
}
function foo6() {
>foo6 : () => 类为 g

    return g;
>g : 类为 g
}

// Qualified name with type arguments
function foo7(): typeof m.g {
>foo7 : () => 类为 m.g
>m.g : 类为 m.g
>m : 类为 m
>g : 类为 m.g

    return m.g
>m.g : 类为 m.g
>m : 类为 m
>g : 类为 m.g
}
function foo8() {
>foo8 : () => 类为 m.g

    return m.g
>m.g : 类为 m.g
>m : 类为 m
>g : 类为 m.g
}
