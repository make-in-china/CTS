=== tests/cases/compiler/underscoreMapFirst.ts ===
declare module _ {
>_ : 类为 _

    interface Collection<T> { }
>Collection : Collection<T>
>T : T

    interface List<T> extends Collection<T> {
>List : List<T>
>T : T
>Collection : Collection<T>
>T : T

        [index: number]: T;
>index : 数字
>类型别名 :=> 数字
>T : T

        length: number;
>length : 数字
>类型别名 :=> 数字
    }

    interface ListIterator<T, TResult> {
>ListIterator : ListIterator<T, TResult>
>T : T
>TResult : TResult

        (value: T, index: number, list: T[]): TResult;
>value : T
>T : T
>index : 数字
>类型别名 :=> 数字
>list : T[]
>T : T
>TResult : TResult
    }

    interface Dictionary<T> extends Collection<T> {
>Dictionary : Dictionary<T>
>T : T
>Collection : Collection<T>
>T : T

        [index: string]: T;
>index : 文字
>类型别名 :=> 文字
>T : T
    }
    export function pluck<T extends {}>(
>pluck : <T 扩展 {}>(list: Collection<T>, propertyName: 文字) => 任意[]
>T : T

        list: Collection<T>,
>list : Collection<T>
>Collection : Collection<T>
>T : T

        propertyName: string): any[];
>propertyName : 文字
>类型别名 :=> 文字

    export function map<T, TResult>(
>map : <T, TResult>(list: List<T>, iterator: ListIterator<T, TResult>, context?: 任意) => TResult[]
>T : T
>TResult : TResult

        list: List<T>,
>list : List<T>
>List : List<T>
>T : T

        iterator: ListIterator<T, TResult>,
>iterator : ListIterator<T, TResult>
>ListIterator : ListIterator<T, TResult>
>T : T
>TResult : TResult

        context?: any): TResult[];
>context : 任意
>类型别名 :=> 任意
>TResult : TResult

    export function first<T>(array: List<T>): T;
>first : <T>(array: List<T>) => T
>T : T
>array : List<T>
>List : List<T>
>T : T
>T : T
}

declare class View {
>View : View

    model: any;
>model : 任意
>类型别名 :=> 任意
}

interface IData {
>IData : IData

    series: ISeries[];
>series : ISeries[]
>ISeries : ISeries
}

interface ISeries {
>ISeries : ISeries

    items: any[];
>items : 任意[]

    key: string;
>key : 文字
>类型别名 :=> 文字
}

class MyView extends View {
>MyView : MyView
>View : View

    public getDataSeries(): ISeries[] {
>getDataSeries : () => ISeries[]
>ISeries : ISeries

        var data: IData[] = this.model.get("data");
>data : IData[]
>IData : IData
>this.model.get("data") : 任意
>类型别名 :=> 任意
>this.model.get : 任意
>类型别名 :=> 任意
>this.model : 任意
>类型别名 :=> 任意
>this : 本体
>model : 任意
>类型别名 :=> 任意
>get : 任意
>类型别名 :=> 任意
>"data" : "data"

        var allSeries: ISeries[][] = _.pluck(data, "series");
>allSeries : ISeries[][]
>ISeries : ISeries
>_.pluck(data, "series") : 任意[]
>_.pluck : <T 扩展 {}>(list: _.Collection<T>, propertyName: 文字) => 任意[]
>_ : 类为 _
>pluck : <T 扩展 {}>(list: _.Collection<T>, propertyName: 文字) => 任意[]
>data : IData[]
>"series" : "series"

        return _.map(allSeries, _.first);
>_.map(allSeries, _.first) : ISeries[]
>_.map : <T, TResult>(list: _.List<T>, iterator: _.ListIterator<T, TResult>, context?: 任意) => TResult[]
>_ : 类为 _
>map : <T, TResult>(list: _.List<T>, iterator: _.ListIterator<T, TResult>, context?: 任意) => TResult[]
>allSeries : ISeries[][]
>_.first : <T>(array: _.List<T>) => T
>_ : 类为 _
>first : <T>(array: _.List<T>) => T
    }
}

