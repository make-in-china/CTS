=== tests/cases/conformance/types/any/assignAnyToEveryType.ts ===
// all of these are valid

var x: any;
>x : any
>类型别名 :=> 任意

var a: number = x;
>a : number
>类型别名 :=> 数字
>x : any
>类型别名 :=> 任意

var b: boolean = x;
>b : boolean
>类型别名 :=> 真假
>x : any
>类型别名 :=> 任意

var c: string = x;
>c : string
>类型别名 :=> 文字
>x : any
>类型别名 :=> 任意

var d: void = x;
>d : void
>类型别名 :=> 无值
>x : any
>类型别名 :=> 任意

var e = null;
>e : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

e = x;
>e = x : any
>类型别名 :=> 任意
>e : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

var f = undefined;
>f : any
>类型别名 :=> 任意
>undefined : undefined
>类型别名 :=> 未定

f = x;
>f = x : any
>类型别名 :=> 任意
>f : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

enum E {
>E : E

    A
>A : E
}

var g: E = x;
>g : E
>E : E
>x : any
>类型别名 :=> 任意

var g2 = E.A;
>g2 : E
>E.A : E
>E : typeof E
>A : E

g2 = x;
>g2 = x : any
>类型别名 :=> 任意
>g2 : E
>x : any
>类型别名 :=> 任意

class C {
>C : C

    foo: string;
>foo : string
>类型别名 :=> 文字
}

var h: C = x;
>h : C
>C : C
>x : any
>类型别名 :=> 任意

interface I {
>I : I

    foo: string;
>foo : string
>类型别名 :=> 文字
}

var i: I = x;
>i : I
>I : I
>x : any
>类型别名 :=> 任意

var j: { (): string } = x;
>j : () => string
>x : any
>类型别名 :=> 任意

var j2: { <T>(x: T): string } = x;
>j2 : <T>(x: T) => string
>T : T
>x : T
>T : T
>x : any
>类型别名 :=> 任意

module M {
>M : typeof M

    export var foo = 1;
>foo : number
>类型别名 :=> 数字
>1 : 1
}

M = x;
>M = x : any
>类型别名 :=> 任意
>M : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意

function k<T>(a: T) {
>k : <T>(a: T) => void
>T : T
>a : T
>T : T

    a = x;
>a = x : any
>类型别名 :=> 任意
>a : T
>x : any
>类型别名 :=> 任意
}
