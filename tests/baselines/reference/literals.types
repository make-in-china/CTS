=== tests/cases/conformance/expressions/literals/literals.ts ===
//typeof null is Null
//typeof true is Boolean
//typeof false is Boolean
//typeof numeric literal is Number
//typeof string literal is String
//typeof regex literal is Regex

var nu = null / null;
>nu : 数字
>类型别名 :=> 数字
>null / null : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

var u = undefined / undefined;
>u : 数字
>类型别名 :=> 数字
>undefined / undefined : 数字
>类型别名 :=> 数字
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

var b: boolean;
>b : 真假
>类型别名 :=> 真假

var b = true;
>b : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

var b = false;
>b : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

var n: number;
>n : 数字
>类型别名 :=> 数字

var n = 1;
>n : 数字
>类型别名 :=> 数字
>1 : 1

var n = 1.0;
>n : 数字
>类型别名 :=> 数字
>1.0 : 1

var n = 1e4;
>n : 数字
>类型别名 :=> 数字
>1e4 : 10000

var n = 001; // Error in ES5
>n : 数字
>类型别名 :=> 数字
>001 : 1

var n = 0x1;
>n : 数字
>类型别名 :=> 数字
>0x1 : 1

var n = -1;
>n : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1

var n = -1.0;
>n : 数字
>类型别名 :=> 数字
>-1.0 : -1
>1.0 : 1

var n = -1e-4;
>n : 数字
>类型别名 :=> 数字
>-1e-4 : -0.0001
>1e-4 : 0.0001

var n = -003; // Error in ES5
>n : 数字
>类型别名 :=> 数字
>-003 : -3
>003 : 3

var n = -0x1;
>n : 数字
>类型别名 :=> 数字
>-0x1 : -1
>0x1 : 1

var s: string;
>s : 文字
>类型别名 :=> 文字

var s = '';
>s : 文字
>类型别名 :=> 文字
>'' : ""

var s = "";
>s : 文字
>类型别名 :=> 文字
>"" : ""

var s = 'foo\
>s : 文字
>类型别名 :=> 文字
>'foo\    bar' : "foo    bar"

    bar';
var s = "foo\
>s : 文字
>类型别名 :=> 文字
>"foo\    bar" : "foo    bar"

    bar";

var r: RegExp;
>r : RegExp
>RegExp : RegExp

var r = /what/;
>r : RegExp
>/what/ : RegExp

var r = /\\\\/;
>r : RegExp
>/\\\\/ : RegExp

