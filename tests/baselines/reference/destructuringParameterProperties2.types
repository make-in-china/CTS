=== tests/cases/conformance/es6/destructuring/destructuringParameterProperties2.ts ===
class C1 {
>C1 : C1

    constructor(private k: number, private [a, b, c]: [number, string, boolean]) {
>k : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
>c : 真假
>类型别名 :=> 真假

        if ((b === undefined && c === undefined) || (this.b === undefined && this.c === undefined)) {
>(b === undefined && c === undefined) || (this.b === undefined && this.c === undefined) : 真假
>类型别名 :=> 真假
>(b === undefined && c === undefined) : 真假
>类型别名 :=> 真假
>b === undefined && c === undefined : 真假
>类型别名 :=> 真假
>b === undefined : 真假
>类型别名 :=> 真假
>b : 文字
>类型别名 :=> 文字
>undefined : 未定
>类型别名 :=> 未定
>c === undefined : 真假
>类型别名 :=> 真假
>c : 真假
>类型别名 :=> 真假
>undefined : 未定
>类型别名 :=> 未定
>(this.b === undefined && this.c === undefined) : 真假
>类型别名 :=> 真假
>this.b === undefined && this.c === undefined : 真假
>类型别名 :=> 真假
>this.b === undefined : 真假
>类型别名 :=> 真假
>this.b : 任意
>类型别名 :=> 任意
>this : 本体
>b : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
>this.c === undefined : 真假
>类型别名 :=> 真假
>this.c : 任意
>类型别名 :=> 任意
>this : 本体
>c : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

            this.a = a || k;
>this.a = a || k : 数字
>类型别名 :=> 数字
>this.a : 任意
>类型别名 :=> 任意
>this : 本体
>a : 任意
>类型别名 :=> 任意
>a || k : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字
>k : 数字
>类型别名 :=> 数字
        }
    }

    public getA() {
>getA : () => 任意

        return this.a
>this.a : 任意
>类型别名 :=> 任意
>this : 本体
>a : 任意
>类型别名 :=> 任意
    }

    public getB() {
>getB : () => 任意

        return this.b
>this.b : 任意
>类型别名 :=> 任意
>this : 本体
>b : 任意
>类型别名 :=> 任意
    }

    public getC() {
>getC : () => 任意

        return this.c;
>this.c : 任意
>类型别名 :=> 任意
>this : 本体
>c : 任意
>类型别名 :=> 任意
    }
}

var x = new C1(undefined, [0, undefined, ""]);
>x : 任意
>类型别名 :=> 任意
>new C1(undefined, [0, undefined, ""]) : 任意
>类型别名 :=> 任意
>C1 : 类为 C1
>undefined : 未定
>类型别名 :=> 未定
>[0, undefined, ""] : (文字 | 数字)[]
>0 : 0
>undefined : 未定
>类型别名 :=> 未定
>"" : ""

var [x_a, x_b, x_c] = [x.getA(), x.getB(), x.getC()];
>x_a : 任意
>类型别名 :=> 任意
>x_b : 任意
>类型别名 :=> 任意
>x_c : 任意
>类型别名 :=> 任意
>[x.getA(), x.getB(), x.getC()] : [任意, 任意, 任意]
>x.getA() : 任意
>类型别名 :=> 任意
>x.getA : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>getA : 任意
>类型别名 :=> 任意
>x.getB() : 任意
>类型别名 :=> 任意
>x.getB : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>getB : 任意
>类型别名 :=> 任意
>x.getC() : 任意
>类型别名 :=> 任意
>x.getC : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>getC : 任意
>类型别名 :=> 任意

var y = new C1(10, [0, "", true]);
>y : C1
>new C1(10, [0, "", true]) : C1
>C1 : 类为 C1
>10 : 10
>[0, "", true] : [数字, 文字, 为真]
>0 : 0
>"" : ""
>true : 为真
>类型别名 :=> 为真

var [y_a, y_b, y_c] = [y.getA(), y.getB(), y.getC()];
>y_a : 任意
>类型别名 :=> 任意
>y_b : 任意
>类型别名 :=> 任意
>y_c : 任意
>类型别名 :=> 任意
>[y.getA(), y.getB(), y.getC()] : [任意, 任意, 任意]
>y.getA() : 任意
>类型别名 :=> 任意
>y.getA : () => 任意
>y : C1
>getA : () => 任意
>y.getB() : 任意
>类型别名 :=> 任意
>y.getB : () => 任意
>y : C1
>getB : () => 任意
>y.getC() : 任意
>类型别名 :=> 任意
>y.getC : () => 任意
>y : C1
>getC : () => 任意

var z = new C1(10, [undefined, "", null]);
>z : C1
>new C1(10, [undefined, "", null]) : C1
>C1 : 类为 C1
>10 : 10
>[undefined, "", null] : [未定, 文字, 空值]
>undefined : 未定
>类型别名 :=> 未定
>"" : ""
>null : 空值
>类型别名 :=> 空值

var [z_a, z_b, z_c] = [z.getA(), z.getB(), z.getC()];
>z_a : 任意
>类型别名 :=> 任意
>z_b : 任意
>类型别名 :=> 任意
>z_c : 任意
>类型别名 :=> 任意
>[z.getA(), z.getB(), z.getC()] : [任意, 任意, 任意]
>z.getA() : 任意
>类型别名 :=> 任意
>z.getA : () => 任意
>z : C1
>getA : () => 任意
>z.getB() : 任意
>类型别名 :=> 任意
>z.getB : () => 任意
>z : C1
>getB : () => 任意
>z.getC() : 任意
>类型别名 :=> 任意
>z.getC : () => 任意
>z : C1
>getC : () => 任意

