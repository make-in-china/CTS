=== tests/cases/compiler/functionAssignment.ts ===
function f(n: Function) { }
>f : (n: Function) => 无值
>n : Function
>Function : Function

f(function () { });
>f(function () { }) : 无值
>类型别名 :=> 无值
>f : (n: Function) => 无值
>function () { } : () => 无值

interface foo {
>foo : foo

    get(handler: (bar: number)=>void): void;
>get : (handler: (bar: 数字) => 无值) => 无值
>handler : (bar: 数字) => 无值
>bar : 数字
>类型别名 :=> 数字
}

interface baz {
>baz : baz

    get(callback: Function): number;
>get : (callback: Function) => 数字
>callback : Function
>Function : Function
}

var barbaz: baz;
>barbaz : baz
>baz : baz

var test: foo;
>test : foo
>foo : foo

test.get(function (param) {
>test.get(function (param) {    var x = barbaz.get(function () { });}) : 无值
>类型别名 :=> 无值
>test.get : (handler: (bar: 数字) => 无值) => 无值
>test : foo
>get : (handler: (bar: 数字) => 无值) => 无值
>function (param) {    var x = barbaz.get(function () { });} : (param: 数字) => 无值
>param : 数字
>类型别名 :=> 数字

    var x = barbaz.get(function () { });
>x : 数字
>类型别名 :=> 数字
>barbaz.get(function () { }) : 数字
>类型别名 :=> 数字
>barbaz.get : (callback: Function) => 数字
>barbaz : baz
>get : (callback: Function) => 数字
>function () { } : () => 无值

});

function f2(n: () => void) { }
>f2 : (n: () => 无值) => 无值
>n : () => 无值

f2(() => {
>f2(() => {    var n = '';    n = 4;}) : 无值
>类型别名 :=> 无值
>f2 : (n: () => 无值) => 无值
>() => {    var n = '';    n = 4;} : () => 无值

    var n = '';
>n : 文字
>类型别名 :=> 文字
>'' : ""

    n = 4;
>n = 4 : 4
>n : 文字
>类型别名 :=> 文字
>4 : 4

});

function f3(a: { a: number; b: number; }) { }
>f3 : (a: { a: 数字; b: 数字; }) => 无值
>a : { a: 数字; b: 数字; }
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字

f3({ a: 0, b: 0 });
>f3({ a: 0, b: 0 }) : 无值
>类型别名 :=> 无值
>f3 : (a: { a: 数字; b: 数字; }) => 无值
>{ a: 0, b: 0 } : { a: 数字; b: 数字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0
>b : 数字
>类型别名 :=> 数字
>0 : 0


function callb(lam:(l: number) => void );
>callb : { (lam: (l: 数字) => 无值): 任意; (lam: (n: 文字) => 无值): 任意; }
>lam : (l: 数字) => 无值
>l : 数字
>类型别名 :=> 数字

function callb(lam:(n: string)=>void);
>callb : { (lam: (l: 数字) => 无值): 任意; (lam: (n: 文字) => 无值): 任意; }
>lam : (n: 文字) => 无值
>n : 文字
>类型别名 :=> 文字

function callb(a) { }
>callb : { (lam: (l: 数字) => 无值): 任意; (lam: (n: 文字) => 无值): 任意; }
>a : 任意
>类型别名 :=> 任意

callb((a) =>{ a.length; });
>callb((a) =>{ a.length; }) : 任意
>类型别名 :=> 任意
>callb : { (lam: (l: 数字) => 无值): 任意; (lam: (n: 文字) => 无值): 任意; }
>(a) =>{ a.length; } : (a: 数字) => 无值
>a : 数字
>类型别名 :=> 数字
>a.length : 任意
>类型别名 :=> 任意
>a : 数字
>类型别名 :=> 数字
>length : 任意
>类型别名 :=> 任意



