=== tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractFactoryFunction.ts ===
class A {}
>A : A

abstract class B extends A {}
>B : B
>A : A

function NewA(Factory: typeof A) {
>NewA : (Factory: 类为 A) => A
>Factory : 类为 A
>A : 类为 A

    return new A;
>new A : A
>A : 类为 A
}

function NewB(Factory: typeof B) {
>NewB : (Factory: 类为 B) => 任意
>Factory : 类为 B
>B : 类为 B

    return new B;
>new B : 任意
>类型别名 :=> 任意
>B : 类为 B
}

NewA(A);
>NewA(A) : A
>NewA : (Factory: 类为 A) => A
>A : 类为 A

NewA(B);
>NewA(B) : A
>NewA : (Factory: 类为 A) => A
>B : 类为 B

NewB(A);
>NewB(A) : 任意
>类型别名 :=> 任意
>NewB : (Factory: 类为 B) => 任意
>A : 类为 A

NewB(B);
>NewB(B) : 任意
>类型别名 :=> 任意
>NewB : (Factory: 类为 B) => 任意
>B : 类为 B

