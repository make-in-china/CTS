=== tests/cases/compiler/ambientConstLiterals.ts ===
function f<T>(x: T): T {
>f : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

    return x;
>x : T
}

enum E { A, B, C }
>E : E
>A : E.A
>B : E.B
>C : E.C

const c1 = "abc";
>c1 : "abc"
>"abc" : "abc"

const c2 = 123;
>c2 : 123
>123 : 123

const c3 = c1;
>c3 : "abc"
>c1 : "abc"

const c4 = c2;
>c4 : 123
>c2 : 123

const c5 = f(123);
>c5 : 123
>f(123) : 123
>f : <T>(x: T) => T
>123 : 123

const c6 = f(-123);
>c6 : -123
>f(-123) : -123
>f : <T>(x: T) => T
>-123 : -123
>123 : 123

const c7 = true;
>c7 : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真

const c8 = E.A;
>c8 : E.A
>E.A : E.A
>E : 类为 E
>A : E.A

const c9 = { x: "abc" };
>c9 : { x: 文字; }
>{ x: "abc" } : { x: 文字; }
>x : 文字
>类型别名 :=> 文字
>"abc" : "abc"

const c10 = [123];
>c10 : 数字[]
>[123] : 数字[]
>123 : 123

const c11 = "abc" + "def";
>c11 : 文字
>类型别名 :=> 文字
>"abc" + "def" : 文字
>类型别名 :=> 文字
>"abc" : "abc"
>"def" : "def"

const c12 = 123 + 456;
>c12 : 数字
>类型别名 :=> 数字
>123 + 456 : 数字
>类型别名 :=> 数字
>123 : 123
>456 : 456

const c13 = Math.random() > 0.5 ? "abc" : "def";
>c13 : "abc" | "def"
>Math.random() > 0.5 ? "abc" : "def" : "abc" | "def"
>Math.random() > 0.5 : 真假
>类型别名 :=> 真假
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字
>0.5 : 0.5
>"abc" : "abc"
>"def" : "def"

const c14 = Math.random() > 0.5 ? 123 : 456;
>c14 : 123 | 456
>Math.random() > 0.5 ? 123 : 456 : 123 | 456
>Math.random() > 0.5 : 真假
>类型别名 :=> 真假
>Math.random() : 数字
>类型别名 :=> 数字
>Math.random : () => 数字
>Math : Math
>random : () => 数字
>0.5 : 0.5
>123 : 123
>456 : 456

