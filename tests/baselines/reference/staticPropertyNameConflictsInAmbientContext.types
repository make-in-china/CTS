=== tests/cases/conformance/classes/propertyMemberDeclarations/decl.d.ts ===
// name
declare class StaticName {
>StaticName : StaticName

    static name: number; // ok
>name : 数字
>类型别名 :=> 数字

    name: string; // ok
>name : 文字
>类型别名 :=> 文字
}

declare class StaticNameFn {
>StaticNameFn : StaticNameFn

    static name(): string; // ok
>name : () => 文字

    name(): string; // ok
>name : () => 文字
}

// length
declare class StaticLength {
>StaticLength : StaticLength

    static length: number; // ok
>length : 数字
>类型别名 :=> 数字

    length: string; // ok
>length : 文字
>类型别名 :=> 文字
}

declare class StaticLengthFn {
>StaticLengthFn : StaticLengthFn

    static length(): number; // ok
>length : () => 数字

    length(): number; // ok
>length : () => 数字
}

// prototype
declare class StaticPrototype {
>StaticPrototype : StaticPrototype

    static prototype: number; // ok
>prototype : StaticPrototype

    prototype: string; // ok
>prototype : 文字
>类型别名 :=> 文字
}

declare class StaticPrototypeFn {
>StaticPrototypeFn : StaticPrototypeFn

    static prototype: any; // ok
>prototype : StaticPrototypeFn

    prototype(): any; // ok
>prototype : () => 任意
}

// caller
declare class StaticCaller {
>StaticCaller : StaticCaller

    static caller: number; // ok
>caller : 数字
>类型别名 :=> 数字

    caller: string; // ok
>caller : 文字
>类型别名 :=> 文字
}

declare class StaticCallerFn {
>StaticCallerFn : StaticCallerFn

    static caller(): any; // ok
>caller : () => 任意

    caller(): any; // ok
>caller : () => 任意
}

// arguments
declare class StaticArguments {
>StaticArguments : StaticArguments

    static arguments: number; // ok
>arguments : 数字
>类型别名 :=> 数字

    arguments: string; // ok
>arguments : 文字
>类型别名 :=> 文字
}

declare class StaticArgumentsFn {
>StaticArgumentsFn : StaticArgumentsFn

    static arguments(): any; // ok
>arguments : () => 任意

    arguments(): any; // ok
>arguments : () => 任意
}

