=== tests/cases/compiler/mergedDeclarations3.ts ===
module M {
>M : 类为 M

 export enum Color {
>Color : Color

   Red, Green
>Red : Color.Red
>Green : Color.Green
 }
}
module M {
>M : 类为 M

 export module Color {
>Color : 类为 Color

   export var Blue = 4;
>Blue : 数字
>类型别名 :=> 数字
>4 : 4
  }
}
var p = M.Color.Blue; // ok
>p : 数字
>类型别名 :=> 数字
>M.Color.Blue : 数字
>类型别名 :=> 数字
>M.Color : 类为 M.Color
>M : 类为 M
>Color : 类为 M.Color
>Blue : 数字
>类型别名 :=> 数字

module M {
>M : 类为 M

    export function foo() {
>foo : 类为 foo
    }
}

module M {
>M : 类为 M

    module foo {
>foo : 类为 foo

        export var x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1
    }
}

module M {
>M : 类为 M

    export module foo {
>foo : 类为 foo

        export var y = 2
>y : 数字
>类型别名 :=> 数字
>2 : 2
    }
}

module M {
>M : 类为 M

    module foo {
>foo : 类为 foo

        export var z = 1;
>z : 数字
>类型别名 :=> 数字
>1 : 1
    }
}

M.foo() // ok
>M.foo() : 无值
>类型别名 :=> 无值
>M.foo : 类为 M.foo
>M : 类为 M
>foo : 类为 M.foo

M.foo.x // error
>M.foo.x : 任意
>类型别名 :=> 任意
>M.foo : 类为 M.foo
>M : 类为 M
>foo : 类为 M.foo
>x : 任意
>类型别名 :=> 任意

M.foo.y // ok
>M.foo.y : 数字
>类型别名 :=> 数字
>M.foo : 类为 M.foo
>M : 类为 M
>foo : 类为 M.foo
>y : 数字
>类型别名 :=> 数字

M.foo.z // error
>M.foo.z : 任意
>类型别名 :=> 任意
>M.foo : 类为 M.foo
>M : 类为 M
>foo : 类为 M.foo
>z : 任意
>类型别名 :=> 任意

