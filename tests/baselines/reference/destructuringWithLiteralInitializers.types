=== tests/cases/conformance/es6/destructuring/destructuringWithLiteralInitializers.ts ===
// (arg: { x: any, y: any }) => void
function f1({ x, y }) { }
>f1 : ({ x, y }: { x: 任意; y: 任意; }) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

f1({ x: 1, y: 1 });
>f1({ x: 1, y: 1 }) : 无值
>类型别名 :=> 无值
>f1 : ({ x, y }: { x: 任意; y: 任意; }) => 无值
>{ x: 1, y: 1 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1

// (arg: { x: any, y?: number }) => void
function f2({ x, y = 0 }) { }
>f2 : ({ x, y }: { x: 任意; y?: 数字; }) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 数字
>类型别名 :=> 数字
>0 : 0

f2({ x: 1 });
>f2({ x: 1 }) : 无值
>类型别名 :=> 无值
>f2 : ({ x, y }: { x: 任意; y?: 数字; }) => 无值
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

f2({ x: 1, y: 1 });
>f2({ x: 1, y: 1 }) : 无值
>类型别名 :=> 无值
>f2 : ({ x, y }: { x: 任意; y?: 数字; }) => 无值
>{ x: 1, y: 1 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1

// (arg: { x?: number, y?: number }) => void
function f3({ x = 0, y = 0 }) { }
>f3 : ({ x, y }: { x?: 数字; y?: 数字; }) => 无值
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0

f3({});
>f3({}) : 无值
>类型别名 :=> 无值
>f3 : ({ x, y }: { x?: 数字; y?: 数字; }) => 无值
>{} : {}

f3({ x: 1 });
>f3({ x: 1 }) : 无值
>类型别名 :=> 无值
>f3 : ({ x, y }: { x?: 数字; y?: 数字; }) => 无值
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

f3({ y: 1 });
>f3({ y: 1 }) : 无值
>类型别名 :=> 无值
>f3 : ({ x, y }: { x?: 数字; y?: 数字; }) => 无值
>{ y: 1 } : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>1 : 1

f3({ x: 1, y: 1 });
>f3({ x: 1, y: 1 }) : 无值
>类型别名 :=> 无值
>f3 : ({ x, y }: { x?: 数字; y?: 数字; }) => 无值
>{ x: 1, y: 1 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1

// (arg?: { x: number, y: number }) => void
function f4({ x, y } = { x: 0, y: 0 }) { }
>f4 : ({ x, y }?: { x: 数字; y: 数字; }) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>{ x: 0, y: 0 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0

f4();
>f4() : 无值
>类型别名 :=> 无值
>f4 : ({ x, y }?: { x: 数字; y: 数字; }) => 无值

f4({ x: 1, y: 1 });
>f4({ x: 1, y: 1 }) : 无值
>类型别名 :=> 无值
>f4 : ({ x, y }?: { x: 数字; y: 数字; }) => 无值
>{ x: 1, y: 1 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1

// (arg?: { x: number, y?: number }) => void
function f5({ x, y = 0 } = { x: 0 }) { }
>f5 : ({ x, y }?: { x: 数字; y?: 数字; }) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>0 : 0
>{ x: 0 } : { x: 数字; y?: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0

f5();
>f5() : 无值
>类型别名 :=> 无值
>f5 : ({ x, y }?: { x: 数字; y?: 数字; }) => 无值

f5({ x: 1 });
>f5({ x: 1 }) : 无值
>类型别名 :=> 无值
>f5 : ({ x, y }?: { x: 数字; y?: 数字; }) => 无值
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

f5({ x: 1, y: 1 });
>f5({ x: 1, y: 1 }) : 无值
>类型别名 :=> 无值
>f5 : ({ x, y }?: { x: 数字; y?: 数字; }) => 无值
>{ x: 1, y: 1 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1

// (arg?: { x?: number, y?: number }) => void
function f6({ x = 0, y = 0 } = {}) { }
>f6 : ({ x, y }?: { x?: 数字; y?: 数字; }) => 无值
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0
>{} : { x?: 数字; y?: 数字; }

f6();
>f6() : 无值
>类型别名 :=> 无值
>f6 : ({ x, y }?: { x?: 数字; y?: 数字; }) => 无值

f6({});
>f6({}) : 无值
>类型别名 :=> 无值
>f6 : ({ x, y }?: { x?: 数字; y?: 数字; }) => 无值
>{} : {}

f6({ x: 1 });
>f6({ x: 1 }) : 无值
>类型别名 :=> 无值
>f6 : ({ x, y }?: { x?: 数字; y?: 数字; }) => 无值
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

f6({ y: 1 });
>f6({ y: 1 }) : 无值
>类型别名 :=> 无值
>f6 : ({ x, y }?: { x?: 数字; y?: 数字; }) => 无值
>{ y: 1 } : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>1 : 1

f6({ x: 1, y: 1 });
>f6({ x: 1, y: 1 }) : 无值
>类型别名 :=> 无值
>f6 : ({ x, y }?: { x?: 数字; y?: 数字; }) => 无值
>{ x: 1, y: 1 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1

// (arg?: { a: { x?: number, y?: number } }) => void
function f7({ a: { x = 0, y = 0 } } = { a: {} }) { }
>f7 : ({ a: { x, y } }?: { a: { x?: 数字; y?: 数字; }; }) => 无值
>a : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0
>{ a: {} } : { a: { x?: 数字; y?: 数字; }; }
>a : { x?: 数字; y?: 数字; }
>{} : { x?: 数字; y?: 数字; }

f7();
>f7() : 无值
>类型别名 :=> 无值
>f7 : ({ a: { x, y } }?: { a: { x?: 数字; y?: 数字; }; }) => 无值

f7({ a: {} });
>f7({ a: {} }) : 无值
>类型别名 :=> 无值
>f7 : ({ a: { x, y } }?: { a: { x?: 数字; y?: 数字; }; }) => 无值
>{ a: {} } : { a: {}; }
>a : {}
>{} : {}

f7({ a: { x: 1 } });
>f7({ a: { x: 1 } }) : 无值
>类型别名 :=> 无值
>f7 : ({ a: { x, y } }?: { a: { x?: 数字; y?: 数字; }; }) => 无值
>{ a: { x: 1 } } : { a: { x: 数字; }; }
>a : { x: 数字; }
>{ x: 1 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1

f7({ a: { y: 1 } });
>f7({ a: { y: 1 } }) : 无值
>类型别名 :=> 无值
>f7 : ({ a: { x, y } }?: { a: { x?: 数字; y?: 数字; }; }) => 无值
>{ a: { y: 1 } } : { a: { y: 数字; }; }
>a : { y: 数字; }
>{ y: 1 } : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>1 : 1

f7({ a: { x: 1, y: 1 } });
>f7({ a: { x: 1, y: 1 } }) : 无值
>类型别名 :=> 无值
>f7 : ({ a: { x, y } }?: { a: { x?: 数字; y?: 数字; }; }) => 无值
>{ a: { x: 1, y: 1 } } : { a: { x: 数字; y: 数字; }; }
>a : { x: 数字; y: 数字; }
>{ x: 1, y: 1 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>1 : 1

// (arg: [any, any]) => void
function g1([x, y]) { }
>g1 : ([x, y]: [任意, 任意]) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

g1([1, 1]);
>g1([1, 1]) : 无值
>类型别名 :=> 无值
>g1 : ([x, y]: [任意, 任意]) => 无值
>[1, 1] : [数字, 数字]
>1 : 1
>1 : 1

// (arg: [number, number]) => void
function g2([x = 0, y = 0]) { }
>g2 : ([x, y]: [数字, 数字]) => 无值
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0

g2([1, 1]);
>g2([1, 1]) : 无值
>类型别名 :=> 无值
>g2 : ([x, y]: [数字, 数字]) => 无值
>[1, 1] : [数字, 数字]
>1 : 1
>1 : 1

// (arg?: [number, number]) => void
function g3([x, y] = [0, 0]) { }
>g3 : ([x, y]?: [数字, 数字]) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>[0, 0] : [数字, 数字]
>0 : 0
>0 : 0

g3();
>g3() : 无值
>类型别名 :=> 无值
>g3 : ([x, y]?: [数字, 数字]) => 无值

g3([1, 1]);
>g3([1, 1]) : 无值
>类型别名 :=> 无值
>g3 : ([x, y]?: [数字, 数字]) => 无值
>[1, 1] : [数字, 数字]
>1 : 1
>1 : 1

// (arg?: [number, number]) => void
function g4([x, y = 0] = [0]) { }
>g4 : ([x, y]?: [数字, 数字]) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>0 : 0
>[0] : [数字, 数字]
>0 : 0

g4();
>g4() : 无值
>类型别名 :=> 无值
>g4 : ([x, y]?: [数字, 数字]) => 无值

g4([1, 1]);
>g4([1, 1]) : 无值
>类型别名 :=> 无值
>g4 : ([x, y]?: [数字, 数字]) => 无值
>[1, 1] : [数字, 数字]
>1 : 1
>1 : 1

// (arg?: [number, number]) => void
function g5([x = 0, y = 0] = []) { }
>g5 : ([x, y]?: [数字, 数字]) => 无值
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 数字
>类型别名 :=> 数字
>0 : 0
>[] : [数字, 数字]

g5();
>g5() : 无值
>类型别名 :=> 无值
>g5 : ([x, y]?: [数字, 数字]) => 无值

g5([1, 1]);
>g5([1, 1]) : 无值
>类型别名 :=> 无值
>g5 : ([x, y]?: [数字, 数字]) => 无值
>[1, 1] : [数字, 数字]
>1 : 1
>1 : 1

