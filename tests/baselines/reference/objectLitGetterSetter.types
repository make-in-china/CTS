=== tests/cases/compiler/objectLitGetterSetter.ts ===
            var obj = {};
>obj : {}
>{} : {}

            Object.defineProperty(obj, "accProperty", <PropertyDescriptor>({
>Object.defineProperty(obj, "accProperty", <PropertyDescriptor>({                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            })) : 任意
>类型别名 :=> 任意
>Object.defineProperty : (o: 任意, p: 文字, attributes: PropertyDescriptor & ThisType<任意>) => 任意
>Object : ObjectConstructor
>defineProperty : (o: 任意, p: 文字, attributes: PropertyDescriptor & ThisType<任意>) => 任意
>obj : {}
>"accProperty" : "accProperty"
><PropertyDescriptor>({                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            }) : PropertyDescriptor
>PropertyDescriptor : PropertyDescriptor
>({                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            }) : { get: () => 数字; set: (v: 任意) => 无值; }
>{                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            } : { get: () => 数字; set: (v: 任意) => 无值; }

                get: function () {
>get : () => 数字
>function () {                    eval("public = 1;");                    return 11;                } : () => 数字

                    eval("public = 1;");
>eval("public = 1;") : 任意
>类型别名 :=> 任意
>eval : (x: 文字) => 任意
>"public = 1;" : "public = 1;"

                    return 11;
>11 : 11

                },
                set: function (v) {
>set : (v: 任意) => 无值
>function (v) {                } : (v: 任意) => 无值
>v : 任意
>类型别名 :=> 任意
                }
            }))

