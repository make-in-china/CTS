=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes.ts ===
// Rest parameters must be an array type if they have a type annotation, so all these are errors

function foo(...x: string) { }
>foo : (...x: string) => void
>x : string
>类型别名 :=> 文字

var f = function foo(...x: number) { }
>f : (...x: number) => void
>function foo(...x: number) { } : (...x: number) => void
>foo : (...x: number) => void
>x : number
>类型别名 :=> 数字

var f2 = (...x: Date, ...y: boolean) => { }
>f2 : (...x: Date, ...y: boolean) => void
>(...x: Date, ...y: boolean) => { } : (...x: Date, ...y: boolean) => void
>x : Date
>Date : Date
>y : boolean
>类型别名 :=> 真假

class C {
>C : C

    foo(...x: C) { }
>foo : (...x: C) => void
>x : C
>C : C
}

interface I {
>I : I

    (...x: string);
>x : string
>类型别名 :=> 文字

    foo(...x: number, ...y: number);
>foo : (...x: number, ...y: number) => any
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
}

var a: {
>a : { (...x: string): any; foo(...x: string): any; }

    (...x: string);
>x : string
>类型别名 :=> 文字

    foo(...x: string);
>foo : (...x: string) => any
>x : string
>类型别名 :=> 文字
}

var b = {
>b : { foo(...x: string): void; a: (...x: number, ...y: Date) => void; b: (...x: string) => void; }
>{    foo(...x: string) { },    a: function foo(...x: number, ...y: Date) { },    b: (...x: string) => { }} : { foo(...x: string): void; a: (...x: number, ...y: Date) => void; b: (...x: string) => void; }

    foo(...x: string) { },
>foo : (...x: string) => void
>x : string
>类型别名 :=> 文字

    a: function foo(...x: number, ...y: Date) { },
>a : (...x: number, ...y: Date) => void
>function foo(...x: number, ...y: Date) { } : (...x: number, ...y: Date) => void
>foo : (...x: number, ...y: Date) => void
>x : number
>类型别名 :=> 数字
>y : Date
>Date : Date

    b: (...x: string) => { }
>b : (...x: string) => void
>(...x: string) => { } : (...x: string) => void
>x : string
>类型别名 :=> 文字
}
