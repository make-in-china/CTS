=== tests/cases/compiler/letDeclarations-scopes-duplicates.ts ===
// Errors: redeclaration
let var1 = 0;
>var1 : 数字
>类型别名 :=> 数字
>0 : 0

let var1 = 0; // error
>var1 : 数字
>类型别名 :=> 数字
>0 : 0

let var2 = 0;
>var2 : 数字
>类型别名 :=> 数字
>0 : 0

const var2 = 0;
>var2 : 0
>0 : 0

const var3 = 0;
>var3 : 0
>0 : 0

let var3 = 0;
>var3 : 数字
>类型别名 :=> 数字
>0 : 0

const var4 = 0;
>var4 : 0
>0 : 0

const var4 = 0;
>var4 : 0
>0 : 0

var var5 = 0;
>var5 : 数字
>类型别名 :=> 数字
>0 : 0

let var5 = 0;
>var5 : 数字
>类型别名 :=> 数字
>0 : 0

let var6 = 0;
>var6 : 数字
>类型别名 :=> 数字
>0 : 0

var var6 = 0;
>var6 : 数字
>类型别名 :=> 数字
>0 : 0

{
    let var7 = 0;
>var7 : 数字
>类型别名 :=> 数字
>0 : 0

    let var7 = 0;
>var7 : 数字
>类型别名 :=> 数字
>0 : 0
    {
        let var8 = 0;
>var8 : 数字
>类型别名 :=> 数字
>0 : 0

        const var8 = 0;
>var8 : 0
>0 : 0
    }
}

switch (0) {
>0 : 0

    default:
        let var9 = 0;
>var9 : 数字
>类型别名 :=> 数字
>0 : 0

        let var9 = 0;
>var9 : 数字
>类型别名 :=> 数字
>0 : 0
}

try {
    const var10 = 0;
>var10 : 0
>0 : 0

    const var10 = 0;
>var10 : 0
>0 : 0
}
catch (e) {
>e : 任意
>类型别名 :=> 任意

    let var11 = 0;
>var11 : 数字
>类型别名 :=> 数字
>0 : 0

    let var11 = 0;
>var11 : 数字
>类型别名 :=> 数字
>0 : 0
}

function F1() {
>F1 : () => 无值

    let var12;
>var12 : 任意
>类型别名 :=> 任意

    let var12;
>var12 : 任意
>类型别名 :=> 任意
}

// OK
var var20 = 0;
>var20 : 数字
>类型别名 :=> 数字
>0 : 0

var var20 = 0
>var20 : 数字
>类型别名 :=> 数字
>0 : 0
{
    let var20 = 0;
>var20 : 数字
>类型别名 :=> 数字
>0 : 0
    {
        let var20 = 0;
>var20 : 数字
>类型别名 :=> 数字
>0 : 0
    }
}

switch (0) {
>0 : 0

    default:
        let var20 = 0;
>var20 : 数字
>类型别名 :=> 数字
>0 : 0
}

try {
    let var20 = 0;
>var20 : 数字
>类型别名 :=> 数字
>0 : 0
}
catch (e) {
>e : 任意
>类型别名 :=> 任意

    let var20 = 0;
>var20 : 数字
>类型别名 :=> 数字
>0 : 0
}

function F() {
>F : () => 无值

    let var20;
>var20 : 任意
>类型别名 :=> 任意
}


