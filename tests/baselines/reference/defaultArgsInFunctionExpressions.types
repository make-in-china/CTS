=== tests/cases/compiler/defaultArgsInFunctionExpressions.ts ===
var f = function (a = 3) { return a; }; // Type should be (a?: number) => number
>f : (a?: 数字) => 数字
>function (a = 3) { return a; } : (a?: 数字) => 数字
>a : 数字
>类型别名 :=> 数字
>3 : 3
>a : 数字
>类型别名 :=> 数字

var n: number = f(4);
>n : 数字
>类型别名 :=> 数字
>f(4) : 数字
>类型别名 :=> 数字
>f : (a?: 数字) => 数字
>4 : 4

n = f();
>n = f() : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字
>f() : 数字
>类型别名 :=> 数字
>f : (a?: 数字) => 数字

var s: string = f('');
>s : 文字
>类型别名 :=> 文字
>f('') : 数字
>类型别名 :=> 数字
>f : (a?: 数字) => 数字
>'' : ""

s = f();
>s = f() : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
>f() : 数字
>类型别名 :=> 数字
>f : (a?: 数字) => 数字

// Type check the default argument with the type annotation
var f2 = function (a: string = 3) { return a; }; // Should error, but be of type (a: string) => string;
>f2 : (a?: 文字) => 文字
>function (a: string = 3) { return a; } : (a?: 文字) => 文字
>a : 文字
>类型别名 :=> 文字
>3 : 3
>a : 文字
>类型别名 :=> 文字

s = f2('');
>s = f2('') : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字
>f2('') : 文字
>类型别名 :=> 文字
>f2 : (a?: 文字) => 文字
>'' : ""

s = f2();
>s = f2() : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字
>f2() : 文字
>类型别名 :=> 文字
>f2 : (a?: 文字) => 文字

n = f2();
>n = f2() : 文字
>类型别名 :=> 文字
>n : 数字
>类型别名 :=> 数字
>f2() : 文字
>类型别名 :=> 文字
>f2 : (a?: 文字) => 文字

// Contextually type the default arg with the type annotation
var f3 = function (a: (s: string) => any = (s) => <number>s) { };
>f3 : (a?: (s: 文字) => 任意) => 无值
>function (a: (s: string) => any = (s) => <number>s) { } : (a?: (s: 文字) => 任意) => 无值
>a : (s: 文字) => 任意
>s : 文字
>类型别名 :=> 文字
>(s) => <number>s : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
><number>s : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

// Type check using the function's contextual type
var f4: (a: number) => void = function (a = "") { };
>f4 : (a: 数字) => 无值
>a : 数字
>类型别名 :=> 数字
>function (a = "") { } : (a?: 数字) => 无值
>a : 数字
>类型别名 :=> 数字
>"" : ""

// Contextually type the default arg using the function's contextual type
var f5: (a: (s: string) => any) => void = function (a = s => <number>s) { };
>f5 : (a: (s: 文字) => 任意) => 无值
>a : (s: 文字) => 任意
>s : 文字
>类型别名 :=> 文字
>function (a = s => <number>s) { } : (a?: (s: 文字) => 任意) => 无值
>a : (s: 文字) => 任意
>s => <number>s : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
><number>s : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字

// Instantiated module
module T { }
>T : 任意
>类型别名 :=> 任意

module U {
>U : 类为 U

    export var x;
>x : 任意
>类型别名 :=> 任意
}

var f6 = (t = T) => { };
>f6 : (t?: 任意) => 无值
>(t = T) => { } : (t?: 任意) => 无值
>t : 任意
>类型别名 :=> 任意
>T : 任意
>类型别名 :=> 任意

var f7 = (t = U) => { return t; };
>f7 : (t?: 类为 U) => 类为 U
>(t = U) => { return t; } : (t?: 类为 U) => 类为 U
>t : 类为 U
>U : 类为 U
>t : 类为 U

f7().x;
>f7().x : 任意
>类型别名 :=> 任意
>f7() : 类为 U
>f7 : (t?: 类为 U) => 类为 U
>x : 任意
>类型别名 :=> 任意

