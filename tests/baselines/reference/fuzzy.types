=== tests/cases/compiler/fuzzy.ts ===
module M {
>M : 类为 M

    export interface I {
>I : I

        works:()=>R;
>works : () => R
>R : R

        alsoWorks:()=>R;
>alsoWorks : () => R
>R : R

        doesntWork:()=>R;
>doesntWork : () => R
>R : R
    }

    export interface R {
>R : R

        anything:number;
>anything : 数字
>类型别名 :=> 数字

        oneI:I;
>oneI : I
>I : I
    }

    export class C implements I {
>C : C
>I : I

        constructor(public x:number) {
>x : 数字
>类型别名 :=> 数字
        }
        works():R {
>works : () => R
>R : R

            return <R>({ anything: 1 });
><R>({ anything: 1 }) : R
>R : R
>({ anything: 1 }) : { anything: 数字; }
>{ anything: 1 } : { anything: 数字; }
>anything : 数字
>类型别名 :=> 数字
>1 : 1
        }

        doesntWork():R {
>doesntWork : () => R
>R : R

            return { anything:1, oneI:this };
>{ anything:1, oneI:this } : { anything: 数字; oneI: 本体; }
>anything : 数字
>类型别名 :=> 数字
>1 : 1
>oneI : 本体
>this : 本体
        }

        worksToo():R {
>worksToo : () => R
>R : R

            return <R>({ oneI: this });
><R>({ oneI: this }) : R
>R : R
>({ oneI: this }) : { oneI: 本体; }
>{ oneI: this } : { oneI: 本体; }
>oneI : 本体
>this : 本体
        }
    }
}


