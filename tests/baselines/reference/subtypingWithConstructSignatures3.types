=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures3.ts ===
// checking subtype relations for function types as it relates to contextual signature instantiation
// error cases, so function calls will all result in 'any'

module Errors {
>Errors : 类为 Errors

    class Base { foo: string; }
>Base : Base
>foo : 文字
>类型别名 :=> 文字

    class Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : 文字
>类型别名 :=> 文字

    class Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : 文字
>类型别名 :=> 文字

    class OtherDerived extends Base { bing: string; }
>OtherDerived : OtherDerived
>Base : Base
>bing : 文字
>类型别名 :=> 文字

    declare function foo2(a2: new (x: number) => string[]): typeof a2;
>foo2 : { (a2: 新建 (x: 数字) => 文字[]): 新建 (x: 数字) => 文字[]; (a2: 任意): 任意; }
>a2 : 新建 (x: 数字) => 文字[]
>x : 数字
>类型别名 :=> 数字
>a2 : 新建 (x: 数字) => 文字[]

    declare function foo2(a2: any): any;
>foo2 : { (a2: 新建 (x: 数字) => 文字[]): 新建 (x: 数字) => 文字[]; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    declare function foo7(a2: new (x: new (arg: Base) => Derived) => new (r: Base) => Derived2): typeof a2;
>foo7 : { (a2: 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2): 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2; (a2: 任意): 任意; }
>a2 : 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2
>x : 新建 (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived2 : Derived2
>a2 : 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2

    declare function foo7(a2: any): any;
>foo7 : { (a2: 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2): 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    declare function foo8(a2: new (x: new (arg: Base) => Derived, y: new (arg2: Base) => Derived) => new (r: Base) => Derived): typeof a2;
>foo8 : { (a2: 新建 (x: 新建 (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived): 新建 (x: 新建 (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived; (a2: 任意): 任意; }
>a2 : 新建 (x: 新建 (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived
>x : 新建 (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>y : 新建 (arg2: Base) => Derived
>arg2 : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived : Derived
>a2 : 新建 (x: 新建 (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived

    declare function foo8(a2: any): any;
>foo8 : { (a2: 新建 (x: 新建 (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived): 新建 (x: 新建 (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    declare function foo10(a2: new (...x: Base[]) => Base): typeof a2;
>foo10 : { (a2: 新建 (...x: Base[]) => Base): 新建 (...x: Base[]) => Base; (a2: 任意): 任意; }
>a2 : 新建 (...x: Base[]) => Base
>x : Base[]
>Base : Base
>Base : Base
>a2 : 新建 (...x: Base[]) => Base

    declare function foo10(a2: any): any;
>foo10 : { (a2: 新建 (...x: Base[]) => Base): 新建 (...x: Base[]) => Base; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    declare function foo11(a2: new (x: { foo: string }, y: { foo: string; bar: string }) => Base): typeof a2;
>foo11 : { (a2: 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base): 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base; (a2: 任意): 任意; }
>a2 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>x : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字
>y : { foo: 文字; bar: 文字; }
>foo : 文字
>类型别名 :=> 文字
>bar : 文字
>类型别名 :=> 文字
>Base : Base
>a2 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base

    declare function foo11(a2: any): any;
>foo11 : { (a2: 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base): 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    declare function foo12(a2: new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>): typeof a2;
>foo12 : { (a2: 新建 (x: Base[], y: Derived2[]) => Derived[]): 新建 (x: Base[], y: Derived2[]) => Derived[]; (a2: 任意): 任意; }
>a2 : 新建 (x: Base[], y: Derived2[]) => Derived[]
>x : Base[]
>Array : T[]
>Base : Base
>y : Derived2[]
>Array : T[]
>Derived2 : Derived2
>Array : T[]
>Derived : Derived
>a2 : 新建 (x: Base[], y: Derived2[]) => Derived[]

    declare function foo12(a2: any): any;
>foo12 : { (a2: 新建 (x: Base[], y: Derived2[]) => Derived[]): 新建 (x: Base[], y: Derived2[]) => Derived[]; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    declare function foo15(a2: new (x: { a: string; b: number }) => number): typeof a2;
>foo15 : { (a2: 新建 (x: { a: 文字; b: 数字; }) => 数字): 新建 (x: { a: 文字; b: 数字; }) => 数字; (a2: 任意): 任意; }
>a2 : 新建 (x: { a: 文字; b: 数字; }) => 数字
>x : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
>a2 : 新建 (x: { a: 文字; b: 数字; }) => 数字

    declare function foo15(a2: any): any;
>foo15 : { (a2: 新建 (x: { a: 文字; b: 数字; }) => 数字): 新建 (x: { a: 文字; b: 数字; }) => 数字; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    declare function foo16(a2: {
>foo16 : { (a2: { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }): 数字[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }): 真假[]; }): { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }): 数字[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }): 真假[]; }; (a2: 任意): 任意; }
>a2 : { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }): 数字[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }): 真假[]; }

        // type of parameter is overload set which means we can't do inference based on this type
        new (x: {
>x : { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }

            new (a: number): number;
>a : 数字
>类型别名 :=> 数字

            new (a?: number): number;
>a : 数字
>类型别名 :=> 数字

        }): number[];
        new (x: {
>x : { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }

            new (a: boolean): boolean;
>a : 真假
>类型别名 :=> 真假

            new (a?: boolean): boolean;
>a : 真假
>类型别名 :=> 真假

        }): boolean[];
    }): typeof a2;
>a2 : { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }): 数字[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }): 真假[]; }

    declare function foo16(a2: any): any;
>foo16 : { (a2: { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }): 数字[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }): 真假[]; }): { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }): 数字[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }): 真假[]; }; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    declare function foo17(a2: {
>foo17 : { (a2: { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }): { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }; (a2: 任意): 任意; }
>a2 : { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }

        new (x: {
>x : { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }

            new <T extends Derived>(a: T): T;
>T : T
>Derived : Derived
>a : T
>T : T
>T : T

            new <T extends Base>(a: T): T;
>T : T
>Base : Base
>a : T
>T : T
>T : T

        }): any[];
        new (x: {
>x : { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }

            new <T extends Derived2>(a: T): T;
>T : T
>Derived2 : Derived2
>a : T
>T : T
>T : T

            new <T extends Base>(a: T): T;
>T : T
>Base : Base
>a : T
>T : T
>T : T

        }): any[];
    }): typeof a2;
>a2 : { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }

    declare function foo17(a2: any): any;
>foo17 : { (a2: { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }): { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    var r1arg1: new <T, U>(x: T) => U[];
>r1arg1 : 新建 <T, U>(x: T) => U[]
>T : T
>U : U
>x : T
>T : T
>U : U

    var r1arg2: new (x: number) => string[]; 
>r1arg2 : 新建 (x: 数字) => 文字[]
>x : 数字
>类型别名 :=> 数字

    var r1 = foo2(r1arg1); // any
>r1 : 新建 (x: 数字) => 文字[]
>foo2(r1arg1) : 新建 (x: 数字) => 文字[]
>foo2 : { (a2: 新建 (x: 数字) => 文字[]): 新建 (x: 数字) => 文字[]; (a2: 任意): 任意; }
>r1arg1 : 新建 <T, U>(x: T) => U[]

    var r1a = [r1arg2, r1arg1];
>r1a : (新建 (x: 数字) => 文字[])[]
>[r1arg2, r1arg1] : (新建 (x: 数字) => 文字[])[]
>r1arg2 : 新建 (x: 数字) => 文字[]
>r1arg1 : 新建 <T, U>(x: T) => U[]

    var r1b = [r1arg1, r1arg2];
>r1b : (新建 (x: 数字) => 文字[])[]
>[r1arg1, r1arg2] : (新建 (x: 数字) => 文字[])[]
>r1arg1 : 新建 <T, U>(x: T) => U[]
>r1arg2 : 新建 (x: 数字) => 文字[]

    var r2arg1: new <T extends Base, U extends Derived, V extends Derived2>(x: new (arg: T) => U) => new (r: T) => V;
>r2arg1 : 新建 <T 扩展 Base, U 扩展 Derived, V 扩展 Derived2>(x: 新建 (arg: T) => U) => 新建 (r: T) => V
>T : T
>Base : Base
>U : U
>Derived : Derived
>V : V
>Derived2 : Derived2
>x : 新建 (arg: T) => U
>arg : T
>T : T
>U : U
>r : T
>T : T
>V : V

    var r2arg2: new (x: new (arg: Base) => Derived) => new (r: Base) => Derived2;
>r2arg2 : 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2
>x : 新建 (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived2 : Derived2

    var r2 = foo7(r2arg1); // any
>r2 : 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2
>foo7(r2arg1) : 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2
>foo7 : { (a2: 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2): 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2; (a2: 任意): 任意; }
>r2arg1 : 新建 <T 扩展 Base, U 扩展 Derived, V 扩展 Derived2>(x: 新建 (arg: T) => U) => 新建 (r: T) => V

    var r2a = [r2arg2, r2arg1];
>r2a : (新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2)[]
>[r2arg2, r2arg1] : (新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2)[]
>r2arg2 : 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2
>r2arg1 : 新建 <T 扩展 Base, U 扩展 Derived, V 扩展 Derived2>(x: 新建 (arg: T) => U) => 新建 (r: T) => V

    var r2b = [r2arg1, r2arg2];
>r2b : (新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2)[]
>[r2arg1, r2arg2] : (新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2)[]
>r2arg1 : 新建 <T 扩展 Base, U 扩展 Derived, V 扩展 Derived2>(x: 新建 (arg: T) => U) => 新建 (r: T) => V
>r2arg2 : 新建 (x: 新建 (arg: Base) => Derived) => 新建 (r: Base) => Derived2

    var r3arg1: new <T extends Base, U extends Derived>(x: new (arg: T) => U, y: (arg2: { foo: number; }) => U) => new (r: T) => U;
>r3arg1 : 新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U, y: (arg2: { foo: 数字; }) => U) => 新建 (r: T) => U
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : 新建 (arg: T) => U
>arg : T
>T : T
>U : U
>y : (arg2: { foo: 数字; }) => U
>arg2 : { foo: 数字; }
>foo : 数字
>类型别名 :=> 数字
>U : U
>r : T
>T : T
>U : U

    var r3arg2: new (x: (arg: Base) => Derived, y: new (arg2: Base) => Derived) => new (r: Base) => Derived;
>r3arg2 : 新建 (x: (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived
>x : (arg: Base) => Derived
>arg : Base
>Base : Base
>Derived : Derived
>y : 新建 (arg2: Base) => Derived
>arg2 : Base
>Base : Base
>Derived : Derived
>r : Base
>Base : Base
>Derived : Derived

    var r3 = foo8(r3arg1); // any
>r3 : 任意
>类型别名 :=> 任意
>foo8(r3arg1) : 任意
>类型别名 :=> 任意
>foo8 : { (a2: 新建 (x: 新建 (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived): 新建 (x: 新建 (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived; (a2: 任意): 任意; }
>r3arg1 : 新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U, y: (arg2: { foo: 数字; }) => U) => 新建 (r: T) => U

    var r3a = [r3arg2, r3arg1];
>r3a : ((新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U, y: (arg2: { foo: 数字; }) => U) => 新建 (r: T) => U) | (新建 (x: (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived))[]
>[r3arg2, r3arg1] : ((新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U, y: (arg2: { foo: 数字; }) => U) => 新建 (r: T) => U) | (新建 (x: (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived))[]
>r3arg2 : 新建 (x: (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived
>r3arg1 : 新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U, y: (arg2: { foo: 数字; }) => U) => 新建 (r: T) => U

    var r3b = [r3arg1, r3arg2];
>r3b : ((新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U, y: (arg2: { foo: 数字; }) => U) => 新建 (r: T) => U) | (新建 (x: (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived))[]
>[r3arg1, r3arg2] : ((新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U, y: (arg2: { foo: 数字; }) => U) => 新建 (r: T) => U) | (新建 (x: (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived))[]
>r3arg1 : 新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U, y: (arg2: { foo: 数字; }) => U) => 新建 (r: T) => U
>r3arg2 : 新建 (x: (arg: Base) => Derived, y: 新建 (arg2: Base) => Derived) => 新建 (r: Base) => Derived

    var r4arg1: new <T extends Derived>(...x: T[]) => T;
>r4arg1 : 新建 <T 扩展 Derived>(...x: T[]) => T
>T : T
>Derived : Derived
>x : T[]
>T : T
>T : T

    var r4arg2: new (...x: Base[]) => Base;
>r4arg2 : 新建 (...x: Base[]) => Base
>x : Base[]
>Base : Base
>Base : Base

    var r4 = foo10(r4arg1); // any
>r4 : 新建 (...x: Base[]) => Base
>foo10(r4arg1) : 新建 (...x: Base[]) => Base
>foo10 : { (a2: 新建 (...x: Base[]) => Base): 新建 (...x: Base[]) => Base; (a2: 任意): 任意; }
>r4arg1 : 新建 <T 扩展 Derived>(...x: T[]) => T

    var r4a = [r4arg2, r4arg1];
>r4a : (新建 (...x: Base[]) => Base)[]
>[r4arg2, r4arg1] : (新建 (...x: Base[]) => Base)[]
>r4arg2 : 新建 (...x: Base[]) => Base
>r4arg1 : 新建 <T 扩展 Derived>(...x: T[]) => T

    var r4b = [r4arg1, r4arg2];
>r4b : (新建 (...x: Base[]) => Base)[]
>[r4arg1, r4arg2] : (新建 (...x: Base[]) => Base)[]
>r4arg1 : 新建 <T 扩展 Derived>(...x: T[]) => T
>r4arg2 : 新建 (...x: Base[]) => Base

    var r5arg1: new <T extends Derived>(x: T, y: T) => T;
>r5arg1 : 新建 <T 扩展 Derived>(x: T, y: T) => T
>T : T
>Derived : Derived
>x : T
>T : T
>y : T
>T : T
>T : T

    var r5arg2: new (x: { foo: string }, y: { foo: string; bar: string }) => Base;
>r5arg2 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>x : { foo: 文字; }
>foo : 文字
>类型别名 :=> 文字
>y : { foo: 文字; bar: 文字; }
>foo : 文字
>类型别名 :=> 文字
>bar : 文字
>类型别名 :=> 文字
>Base : Base

    var r5 = foo11(r5arg1); // any
>r5 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>foo11(r5arg1) : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>foo11 : { (a2: 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base): 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base; (a2: 任意): 任意; }
>r5arg1 : 新建 <T 扩展 Derived>(x: T, y: T) => T

    var r5a = [r5arg2, r5arg1];
>r5a : (新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base)[]
>[r5arg2, r5arg1] : (新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base)[]
>r5arg2 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base
>r5arg1 : 新建 <T 扩展 Derived>(x: T, y: T) => T

    var r5b = [r5arg1, r5arg2];
>r5b : (新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base)[]
>[r5arg1, r5arg2] : (新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base)[]
>r5arg1 : 新建 <T 扩展 Derived>(x: T, y: T) => T
>r5arg2 : 新建 (x: { foo: 文字; }, y: { foo: 文字; bar: 文字; }) => Base

    var r6arg1: new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
>r6arg1 : 新建 (x: Base[], y: Derived2[]) => Derived[]
>x : Base[]
>Array : T[]
>Base : Base
>y : Derived2[]
>Array : T[]
>Derived2 : Derived2
>Array : T[]
>Derived : Derived

    var r6arg2: new <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T;
>r6arg2 : 新建 <T 扩展 Derived2[]>(x: Base[], y: Base[]) => T
>T : T
>Array : T[]
>Derived2 : Derived2
>x : Base[]
>Array : T[]
>Base : Base
>y : Base[]
>Array : T[]
>Base : Base
>T : T

    var r6 = foo12(r6arg1); // new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
>r6 : 新建 (x: Base[], y: Derived2[]) => Derived[]
>foo12(r6arg1) : 新建 (x: Base[], y: Derived2[]) => Derived[]
>foo12 : { (a2: 新建 (x: Base[], y: Derived2[]) => Derived[]): 新建 (x: Base[], y: Derived2[]) => Derived[]; (a2: 任意): 任意; }
>r6arg1 : 新建 (x: Base[], y: Derived2[]) => Derived[]

    var r6a = [r6arg2, r6arg1];
>r6a : (新建 (x: Base[], y: Derived2[]) => Derived[])[]
>[r6arg2, r6arg1] : (新建 (x: Base[], y: Derived2[]) => Derived[])[]
>r6arg2 : 新建 <T 扩展 Derived2[]>(x: Base[], y: Base[]) => T
>r6arg1 : 新建 (x: Base[], y: Derived2[]) => Derived[]

    var r6b = [r6arg1, r6arg2];
>r6b : (新建 (x: Base[], y: Derived2[]) => Derived[])[]
>[r6arg1, r6arg2] : (新建 (x: Base[], y: Derived2[]) => Derived[])[]
>r6arg1 : 新建 (x: Base[], y: Derived2[]) => Derived[]
>r6arg2 : 新建 <T 扩展 Derived2[]>(x: Base[], y: Base[]) => T

    var r7arg1: new <T>(x: { a: T; b: T }) => T;
>r7arg1 : 新建 <T>(x: { a: T; b: T; }) => T
>T : T
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
>T : T

    var r7arg2: new (x: { a: string; b: number }) => number;
>r7arg2 : 新建 (x: { a: 文字; b: 数字; }) => 数字
>x : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字

    var r7 = foo15(r7arg1); // (x: { a: string; b: number }) => number): number;
>r7 : 任意
>类型别名 :=> 任意
>foo15(r7arg1) : 任意
>类型别名 :=> 任意
>foo15 : { (a2: 新建 (x: { a: 文字; b: 数字; }) => 数字): 新建 (x: { a: 文字; b: 数字; }) => 数字; (a2: 任意): 任意; }
>r7arg1 : 新建 <T>(x: { a: T; b: T; }) => T

    var r7a = [r7arg2, r7arg1];
>r7a : ((新建 <T>(x: { a: T; b: T; }) => T) | (新建 (x: { a: 文字; b: 数字; }) => 数字))[]
>[r7arg2, r7arg1] : ((新建 <T>(x: { a: T; b: T; }) => T) | (新建 (x: { a: 文字; b: 数字; }) => 数字))[]
>r7arg2 : 新建 (x: { a: 文字; b: 数字; }) => 数字
>r7arg1 : 新建 <T>(x: { a: T; b: T; }) => T

    var r7b = [r7arg1, r7arg2];
>r7b : ((新建 <T>(x: { a: T; b: T; }) => T) | (新建 (x: { a: 文字; b: 数字; }) => 数字))[]
>[r7arg1, r7arg2] : ((新建 <T>(x: { a: T; b: T; }) => T) | (新建 (x: { a: 文字; b: 数字; }) => 数字))[]
>r7arg1 : 新建 <T>(x: { a: T; b: T; }) => T
>r7arg2 : 新建 (x: { a: 文字; b: 数字; }) => 数字

    var r7arg3: new <T extends Base>(x: { a: T; b: T }) => number;
>r7arg3 : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => 数字
>T : T
>Base : Base
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T

    var r7c = foo15(r7arg3); // any
>r7c : 任意
>类型别名 :=> 任意
>foo15(r7arg3) : 任意
>类型别名 :=> 任意
>foo15 : { (a2: 新建 (x: { a: 文字; b: 数字; }) => 数字): 新建 (x: { a: 文字; b: 数字; }) => 数字; (a2: 任意): 任意; }
>r7arg3 : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => 数字

    var r7d = [r7arg2, r7arg3];
>r7d : ((新建 (x: { a: 文字; b: 数字; }) => 数字) | (新建 <T 扩展 Base>(x: { a: T; b: T; }) => 数字))[]
>[r7arg2, r7arg3] : ((新建 (x: { a: 文字; b: 数字; }) => 数字) | (新建 <T 扩展 Base>(x: { a: T; b: T; }) => 数字))[]
>r7arg2 : 新建 (x: { a: 文字; b: 数字; }) => 数字
>r7arg3 : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => 数字

    var r7e = [r7arg3, r7arg2];
>r7e : ((新建 (x: { a: 文字; b: 数字; }) => 数字) | (新建 <T 扩展 Base>(x: { a: T; b: T; }) => 数字))[]
>[r7arg3, r7arg2] : ((新建 (x: { a: 文字; b: 数字; }) => 数字) | (新建 <T 扩展 Base>(x: { a: T; b: T; }) => 数字))[]
>r7arg3 : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => 数字
>r7arg2 : 新建 (x: { a: 文字; b: 数字; }) => 数字

    var r8arg: new <T>(x: new (a: T) => T) => T[];
>r8arg : 新建 <T>(x: 新建 (a: T) => T) => T[]
>T : T
>x : 新建 (a: T) => T
>a : T
>T : T
>T : T
>T : T

    var r8 = foo16(r8arg); // any
>r8 : 任意
>类型别名 :=> 任意
>foo16(r8arg) : 任意
>类型别名 :=> 任意
>foo16 : { (a2: { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }): 数字[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }): 真假[]; }): { 新建 (x: { 新建 (a: 数字): 数字; 新建 (a?: 数字): 数字; }): 数字[]; 新建 (x: { 新建 (a: 真假): 真假; 新建 (a?: 真假): 真假; }): 真假[]; }; (a2: 任意): 任意; }
>r8arg : 新建 <T>(x: 新建 (a: T) => T) => T[]

    var r9arg: new <T>(x: new (a: T) => T) => any[];
>r9arg : 新建 <T>(x: 新建 (a: T) => T) => 任意[]
>T : T
>x : 新建 (a: T) => T
>a : T
>T : T
>T : T

    var r9 = foo17(r9arg); // // (x: { <T extends Derived >(a: T): T; <T extends Base >(a: T): T; }): any[]; (x: { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }): any[];
>r9 : { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }
>foo17(r9arg) : { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }
>foo17 : { (a2: { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }): { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }; (a2: 任意): 任意; }
>r9arg : 新建 <T>(x: 新建 (a: T) => T) => 任意[]
}

module WithGenericSignaturesInBaseType {
>WithGenericSignaturesInBaseType : 类为 WithGenericSignaturesInBaseType

    declare function foo2(a2: new <T>(x: T) => T[]): typeof a2;
>foo2 : { (a2: 新建 <T>(x: T) => T[]): 新建 <T>(x: T) => T[]; (a2: 任意): 任意; }
>a2 : 新建 <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T
>a2 : 新建 <T>(x: T) => T[]

    declare function foo2(a2: any): any;
>foo2 : { (a2: 新建 <T>(x: T) => T[]): 新建 <T>(x: T) => T[]; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    var r2arg2: new <T>(x: T) => string[];
>r2arg2 : 新建 <T>(x: T) => 文字[]
>T : T
>x : T
>T : T

    var r2 = foo2(r2arg2); // <T>(x:T) => T[] since we can infer from generic signatures now
>r2 : 任意
>类型别名 :=> 任意
>foo2(r2arg2) : 任意
>类型别名 :=> 任意
>foo2 : { (a2: 新建 <T>(x: T) => T[]): 新建 <T>(x: T) => T[]; (a2: 任意): 任意; }
>r2arg2 : 新建 <T>(x: T) => 文字[]

    declare function foo3(a2: new <T>(x: T) => string[]): typeof a2;
>foo3 : { (a2: 新建 <T>(x: T) => 文字[]): 新建 <T>(x: T) => 文字[]; (a2: 任意): 任意; }
>a2 : 新建 <T>(x: T) => 文字[]
>T : T
>x : T
>T : T
>a2 : 新建 <T>(x: T) => 文字[]

    declare function foo3(a2: any): any;
>foo3 : { (a2: 新建 <T>(x: T) => 文字[]): 新建 <T>(x: T) => 文字[]; (a2: 任意): 任意; }
>a2 : 任意
>类型别名 :=> 任意

    var r3arg2: new <T>(x: T) => T[];
>r3arg2 : 新建 <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T

    var r3 = foo3(r3arg2); // any
>r3 : 任意
>类型别名 :=> 任意
>foo3(r3arg2) : 任意
>类型别名 :=> 任意
>foo3 : { (a2: 新建 <T>(x: T) => 文字[]): 新建 <T>(x: T) => 文字[]; (a2: 任意): 任意; }
>r3arg2 : 新建 <T>(x: T) => T[]
}
