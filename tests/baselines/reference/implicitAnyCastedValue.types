=== tests/cases/compiler/implicitAnyCastedValue.ts ===
var x = function () {
>x : () => 任意
>function () {    return <any>0;  // this should not be an error} : () => 任意

    return <any>0;  // this should not be an error
><any>0 : 任意
>类型别名 :=> 任意
>0 : 0
}

function foo() {
>foo : () => 任意

    return <any>"hello world";  // this should not be an error
><any>"hello world" : 任意
>类型别名 :=> 任意
>"hello world" : "hello world"
}

class C {
>C : C

    bar = null;  // this should be an error
>bar : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

    foo = undefined;  // this should be an error
>foo : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

    public get tempVar() {
>tempVar : 任意
>类型别名 :=> 任意

        return <any>0;  // this should not be an error
><any>0 : 任意
>类型别名 :=> 任意
>0 : 0
    }

    public returnBarWithCase() {    // this should not be an error
>returnBarWithCase : () => 任意

        return <any>this.bar;
><any>this.bar : 任意
>类型别名 :=> 任意
>this.bar : 任意
>类型别名 :=> 任意
>this : 本体
>bar : 任意
>类型别名 :=> 任意
    }

    public returnFooWithCase() {
>returnFooWithCase : () => 任意

        return <any>this.foo;  // this should not be an error
><any>this.foo : 任意
>类型别名 :=> 任意
>this.foo : 任意
>类型别名 :=> 任意
>this : 本体
>foo : 任意
>类型别名 :=> 任意
    }
}

class C1 {
>C1 : C1

    getValue = null;  // this should be an error
>getValue : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

    public get castedGet() {
>castedGet : 任意
>类型别名 :=> 任意

        return <any>this.getValue;  // this should not be an error
><any>this.getValue : 任意
>类型别名 :=> 任意
>this.getValue : 任意
>类型别名 :=> 任意
>this : 本体
>getValue : 任意
>类型别名 :=> 任意
    }

    public get notCastedGet() {
>notCastedGet : 任意
>类型别名 :=> 任意

        return this.getValue;  // this should not be an error
>this.getValue : 任意
>类型别名 :=> 任意
>this : 本体
>getValue : 任意
>类型别名 :=> 任意
    }
}

function castedNull() {
>castedNull : () => 任意

    return <any>null;  // this should not be an error
><any>null : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
}

function notCastedNull() {
>notCastedNull : () => 任意

    return null;  // this should be an error
>null : 空值
>类型别名 :=> 空值
}

function returnTypeBar(): any {
>returnTypeBar : () => 任意

    return null;  // this should not be an error
>null : 空值
>类型别名 :=> 空值
}

function undefinedBar() {
>undefinedBar : () => 任意

    return <any>undefined;  // this should not be an error
><any>undefined : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
}

function multipleRets1(x) {    // this should not be an error
>multipleRets1 : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

    if (x) {
>x : 任意
>类型别名 :=> 任意

        return <any>0;
><any>0 : 任意
>类型别名 :=> 任意
>0 : 0
    }
    else {
        return null;
>null : 空值
>类型别名 :=> 空值
    }
}

function multipleRets2(x) {    // this should not be an error
>multipleRets2 : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

    if (x) {
>x : 任意
>类型别名 :=> 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
    else if (x == 1) {
>x == 1 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>1 : 1

        return <any>0;
><any>0 : 任意
>类型别名 :=> 任意
>0 : 0
    }
    else {
        return undefined;
>undefined : 未定
>类型别名 :=> 未定
    }
}

// this should not be an error
var bar1 = <any>null;
>bar1 : 任意
>类型别名 :=> 任意
><any>null : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

var bar2 = <any>undefined;
>bar2 : 任意
>类型别名 :=> 任意
><any>undefined : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

var bar3 = <any>0;
>bar3 : 任意
>类型别名 :=> 任意
><any>0 : 任意
>类型别名 :=> 任意
>0 : 0

var array = <any>[null, undefined];
>array : 任意
>类型别名 :=> 任意
><any>[null, undefined] : 任意
>类型别名 :=> 任意
>[null, undefined] : 空值[]
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

