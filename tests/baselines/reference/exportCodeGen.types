=== tests/cases/conformance/internalModules/codeGeneration/exportCodeGen.ts ===
// should replace all refs to 'x' in the body,
// with fully qualified
module A {
>A : typeof A

    export var x = 12;
>x : number
>类型别名 :=> 数字
>12 : 12

    function lt12() {
>lt12 : () => boolean

        return x < 12;
>x < 12 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>12 : 12
    }
} 

// should not fully qualify 'x'
module B {
>B : typeof B

    var x = 12;
>x : number
>类型别名 :=> 数字
>12 : 12

    function lt12() {
>lt12 : () => boolean

        return x < 12;
>x < 12 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>12 : 12
    }
}

// not copied, since not exported
module C {
>C : typeof C

    function no() {
>no : () => boolean

        return false;
>false : false
>类型别名 :=> 为假
    }
}

// copies, since exported
module D {
>D : typeof D

    export function yes() {
>yes : () => boolean

        return true;
>true : true
>类型别名 :=> 为真
    }
}

// validate all exportable statements
module E {
>E : typeof E

    export enum Color { Red }
>Color : Color
>Red : Color

    export function fn() { }
>fn : () => void

    export interface I { id: number }
>I : I
>id : number
>类型别名 :=> 数字

    export class C { name: string }
>C : C
>name : string
>类型别名 :=> 文字

    export module M {
>M : typeof M

        export var x = 42;
>x : number
>类型别名 :=> 数字
>42 : 42
    }
}

// validate all exportable statements,
// which are not exported
module F {
>F : typeof F

    enum Color { Red }
>Color : Color
>Red : Color

    function fn() { }
>fn : () => void

    interface I { id: number }
>I : I
>id : number
>类型别名 :=> 数字

    class C { name: string }
>C : C
>name : string
>类型别名 :=> 文字

    module M {
>M : typeof M

        var x = 42;
>x : number
>类型别名 :=> 数字
>42 : 42
    }
}
