=== tests/cases/compiler/downlevelLetConst15.ts ===
'use strict'
>'use strict' : "use strict"

declare function use(a: any);
>use : (a: any) => any
>a : any
>类型别名 :=> 任意

var x = 10;
>x : number
>类型别名 :=> 数字
>10 : 10

var z0, z1, z2, z3;
>z0 : any
>类型别名 :=> 任意
>z1 : any
>类型别名 :=> 任意
>z2 : any
>类型别名 :=> 任意
>z3 : any
>类型别名 :=> 任意
{
    const x = 20;
>x : 20
>20 : 20

    use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : 20

    const [z0] = [1];
>z0 : number
>类型别名 :=> 数字
>[1] : [number]
>1 : 1

    use(z0);
>use(z0) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z0 : number
>类型别名 :=> 数字

    const [{a: z1}] = [{a: 1}]
>a : any
>类型别名 :=> 任意
>z1 : number
>类型别名 :=> 数字
>[{a: 1}] : [{ a: number; }]
>{a: 1} : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

    use(z1);
>use(z1) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z1 : number
>类型别名 :=> 数字

    const {a: z2} = { a: 1 };
>a : any
>类型别名 :=> 任意
>z2 : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

    use(z2);
>use(z2) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z2 : number
>类型别名 :=> 数字

    const {a: {b: z3}} = { a: {b: 1} };
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>z3 : number
>类型别名 :=> 数字
>{ a: {b: 1} } : { a: { b: number; }; }
>a : { b: number; }
>{b: 1} : { b: number; }
>b : number
>类型别名 :=> 数字
>1 : 1

    use(z3);
>use(z3) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z3 : number
>类型别名 :=> 数字
}
use(x);
>use(x) : any
>类型别名 :=> 任意
>use : (a: any) => any
>x : number
>类型别名 :=> 数字

use(z0);
>use(z0) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z0 : any
>类型别名 :=> 任意

use(z1);
>use(z1) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z1 : any
>类型别名 :=> 任意

use(z2);
>use(z2) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z2 : any
>类型别名 :=> 任意

use(z3);
>use(z3) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z3 : any
>类型别名 :=> 任意

var z6;
>z6 : any
>类型别名 :=> 任意

var y = true;
>y : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
{
    const y = "";
>y : ""
>"" : ""

    const [z6] = [true]
>z6 : boolean
>类型别名 :=> 真假
>[true] : [boolean]
>true : true
>类型别名 :=> 为真
    {
        const y = 1;
>y : 1
>1 : 1

        const {a: z6} = { a: 1 }
>a : any
>类型别名 :=> 任意
>z6 : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

        use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : 1

        use(z6);
>use(z6) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z6 : number
>类型别名 :=> 数字
    }
    use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : ""

    use(z6);
>use(z6) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z6 : boolean
>类型别名 :=> 真假
}
use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : true
>类型别名 :=> 为真

use(z6);
>use(z6) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z6 : any
>类型别名 :=> 任意

var z = false;
>z : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

var z5 = 1;
>z5 : number
>类型别名 :=> 数字
>1 : 1
{
    const z = "";
>z : ""
>"" : ""

    const [z5] = [5];
>z5 : number
>类型别名 :=> 数字
>[5] : [number]
>5 : 5
    {
        const _z = 1;
>_z : 1
>1 : 1

        const {a: _z5} = { a: 1 };
>a : any
>类型别名 :=> 任意
>_z5 : number
>类型别名 :=> 数字
>{ a: 1 } : { a: number; }
>a : number
>类型别名 :=> 数字
>1 : 1

        // try to step on generated name
        use(_z);
>use(_z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>_z : 1
    }
    use(z);
>use(z) : any
>类型别名 :=> 任意
>use : (a: any) => any
>z : ""
}
use(y);
>use(y) : any
>类型别名 :=> 任意
>use : (a: any) => any
>y : true
>类型别名 :=> 为真

