=== tests/cases/compiler/defaultParameterAddsUndefinedWithStrictNullChecks.ts ===
function f(addUndefined1 = "J", addUndefined2?: number) {
>f : (addUndefined1?: 文字, addUndefined2?: 数字 | 未定) => 数字
>addUndefined1 : 文字
>类型别名 :=> 文字
>"J" : "J"
>addUndefined2 : 数字 | 未定

    return addUndefined1.length + (addUndefined2 || 0);
>addUndefined1.length + (addUndefined2 || 0) : 数字
>类型别名 :=> 数字
>addUndefined1.length : 数字
>类型别名 :=> 数字
>addUndefined1 : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>(addUndefined2 || 0) : 数字
>类型别名 :=> 数字
>addUndefined2 || 0 : 数字
>类型别名 :=> 数字
>addUndefined2 : 数字 | 未定
>0 : 0
}
function g(addUndefined = "J", addDefined: number) {
>g : (addUndefined: 文字 | 未定, addDefined: 数字) => 数字
>addUndefined : 文字
>类型别名 :=> 文字
>"J" : "J"
>addDefined : 数字
>类型别名 :=> 数字

    return addUndefined.length + addDefined;
>addUndefined.length + addDefined : 数字
>类型别名 :=> 数字
>addUndefined.length : 数字
>类型别名 :=> 数字
>addUndefined : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
>addDefined : 数字
>类型别名 :=> 数字
}
let total = f() + f('a', 1) + f('b') + f(undefined, 2);
>total : 数字
>类型别名 :=> 数字
>f() + f('a', 1) + f('b') + f(undefined, 2) : 数字
>类型别名 :=> 数字
>f() + f('a', 1) + f('b') : 数字
>类型别名 :=> 数字
>f() + f('a', 1) : 数字
>类型别名 :=> 数字
>f() : 数字
>类型别名 :=> 数字
>f : (addUndefined1?: 文字, addUndefined2?: 数字 | 未定) => 数字
>f('a', 1) : 数字
>类型别名 :=> 数字
>f : (addUndefined1?: 文字, addUndefined2?: 数字 | 未定) => 数字
>'a' : "a"
>1 : 1
>f('b') : 数字
>类型别名 :=> 数字
>f : (addUndefined1?: 文字, addUndefined2?: 数字 | 未定) => 数字
>'b' : "b"
>f(undefined, 2) : 数字
>类型别名 :=> 数字
>f : (addUndefined1?: 文字, addUndefined2?: 数字 | 未定) => 数字
>undefined : 未定
>类型别名 :=> 未定
>2 : 2

total = g('c', 3) + g(undefined, 4);
>total = g('c', 3) + g(undefined, 4) : 数字
>类型别名 :=> 数字
>total : 数字
>类型别名 :=> 数字
>g('c', 3) + g(undefined, 4) : 数字
>类型别名 :=> 数字
>g('c', 3) : 数字
>类型别名 :=> 数字
>g : (addUndefined: 文字 | 未定, addDefined: 数字) => 数字
>'c' : "c"
>3 : 3
>g(undefined, 4) : 数字
>类型别名 :=> 数字
>g : (addUndefined: 文字 | 未定, addDefined: 数字) => 数字
>undefined : 未定
>类型别名 :=> 未定
>4 : 4

function foo1(x: string = "string", b: number) {
>foo1 : (x: 文字 | 未定, b: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>"string" : "string"
>b : 数字
>类型别名 :=> 数字

    x.length;
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
}

function foo2(x = "string", b: number) {
>foo2 : (x: 文字 | 未定, b: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>"string" : "string"
>b : 数字
>类型别名 :=> 数字

    x.length; // ok, should be string
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字
}

function foo3(x: string | undefined = "string", b: number) {
>foo3 : (x: 文字 | 未定, b: 数字) => 无值
>x : 文字 | 未定
>"string" : "string"
>b : 数字
>类型别名 :=> 数字

    x.length; // ok, should be string
>x.length : 数字
>类型别名 :=> 数字
>x : 文字
>类型别名 :=> 文字
>length : 数字
>类型别名 :=> 数字

    x = undefined;
>x = undefined : 未定
>类型别名 :=> 未定
>x : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定
}

function foo4(x: string | undefined = undefined, b: number) {
>foo4 : (x: 文字 | 未定, b: 数字) => 无值
>x : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定
>b : 数字
>类型别名 :=> 数字

    x; // should be string | undefined
>x : 文字 | 未定

    x = undefined;
>x = undefined : 未定
>类型别名 :=> 未定
>x : 文字 | 未定
>undefined : 未定
>类型别名 :=> 未定
}

type OptionalNullableString = string | null | undefined;
>OptionalNullableString : OptionalNullableString
>null : 空值
>类型别名 :=> 空值

function allowsNull(val: OptionalNullableString = "") {
>allowsNull : (val?: OptionalNullableString) => 无值
>val : OptionalNullableString
>OptionalNullableString : OptionalNullableString
>"" : ""

    val = null;
>val = null : 空值
>类型别名 :=> 空值
>val : OptionalNullableString
>null : 空值
>类型别名 :=> 空值

    val = 'string and null are both ok';
>val = 'string and null are both ok' : "string and null are both ok"
>val : OptionalNullableString
>'string and null are both ok' : "string and null are both ok"
}
allowsNull(null); // still allows passing null
>allowsNull(null) : 无值
>类型别名 :=> 无值
>allowsNull : (val?: OptionalNullableString) => 无值
>null : 空值
>类型别名 :=> 空值



// .d.ts should have `string | undefined` for foo1, foo2, foo3 and foo4
foo1(undefined, 1);
>foo1(undefined, 1) : 无值
>类型别名 :=> 无值
>foo1 : (x: 文字 | 未定, b: 数字) => 无值
>undefined : 未定
>类型别名 :=> 未定
>1 : 1

foo2(undefined, 1);
>foo2(undefined, 1) : 无值
>类型别名 :=> 无值
>foo2 : (x: 文字 | 未定, b: 数字) => 无值
>undefined : 未定
>类型别名 :=> 未定
>1 : 1

foo3(undefined, 1);
>foo3(undefined, 1) : 无值
>类型别名 :=> 无值
>foo3 : (x: 文字 | 未定, b: 数字) => 无值
>undefined : 未定
>类型别名 :=> 未定
>1 : 1

foo4(undefined, 1);
>foo4(undefined, 1) : 无值
>类型别名 :=> 无值
>foo4 : (x: 文字 | 未定, b: 数字) => 无值
>undefined : 未定
>类型别名 :=> 未定
>1 : 1


function removeUndefinedButNotFalse(x = true) {
>removeUndefinedButNotFalse : (x?: 真假) => 为假 | 未定
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

    if (x === false) {
>x === false : 真假
>类型别名 :=> 真假
>x : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        return x;
>x : 为假
>类型别名 :=> 为假
    }
}

declare const cond: boolean;
>cond : 真假
>类型别名 :=> 真假

function removeNothing(y = cond ? true : undefined) {
>removeNothing : (y?: 真假 | 未定) => 真假
>y : 真假 | 未定
>cond ? true : undefined : 为真 | 未定
>cond : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>undefined : 未定
>类型别名 :=> 未定

    if (y !== undefined) {
>y !== undefined : 真假
>类型别名 :=> 真假
>y : 真假 | 未定
>undefined : 未定
>类型别名 :=> 未定

        if (y === false) {
>y === false : 真假
>类型别名 :=> 真假
>y : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

            return y;
>y : 为假
>类型别名 :=> 为假
        }
    }
    return true;
>true : 为真
>类型别名 :=> 为真
}

