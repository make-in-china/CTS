=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithGenericSignatureArguments3.ts ===
// When a function expression is inferentially typed (section 4.9.3) and a type assigned to a parameter in that expression references type parameters for which inferences are being made, 
// the corresponding inferred type arguments to become fixed and no further candidate inferences are made for them.

function foo<T>(x: T, a: (x: T) => T, b: (x: T) => T) {
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>T : T
>x : T
>T : T
>a : (x: T) => T
>x : T
>T : T
>T : T
>b : (x: T) => T
>x : T
>T : T
>T : T

    var r: (x: T) => T;
>r : (x: T) => T
>x : T
>T : T
>T : T

    return r;
>r : (x: T) => T
}

var r1 = foo('', (x: string) => '', (x: Object) => null); // any => any
>r1 : (x: 任意) => 任意
>foo('', (x: string) => '', (x: Object) => null) : (x: 任意) => 任意
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>'' : ""
>(x: string) => '' : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>'' : ""
>(x: Object) => null : (x: Object) => 任意
>x : Object
>Object : Object
>null : 空值
>类型别名 :=> 空值

var r1ii = foo('', (x) => '', (x) => null); // string => string
>r1ii : (x: 文字) => 文字
>foo('', (x) => '', (x) => null) : (x: 文字) => 文字
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>'' : ""
>(x) => '' : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>'' : ""
>(x) => null : (x: 文字) => 任意
>x : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

var r2 = foo('', (x: string) => '', (x: Object) => ''); // string => string
>r2 : (x: Object) => Object
>foo('', (x: string) => '', (x: Object) => '') : (x: Object) => Object
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>'' : ""
>(x: string) => '' : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>'' : ""
>(x: Object) => '' : (x: Object) => 文字
>x : Object
>Object : Object
>'' : ""

var r3 = foo(null, (x: Object) => '', (x: string) => ''); // Object => Object
>r3 : (x: Object) => Object
>foo(null, (x: Object) => '', (x: string) => '') : (x: Object) => Object
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>null : 空值
>类型别名 :=> 空值
>(x: Object) => '' : (x: Object) => 文字
>x : Object
>Object : Object
>'' : ""
>(x: string) => '' : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>'' : ""

var r4 = foo(null, (x) => '', (x) => ''); // any => any
>r4 : (x: 任意) => 任意
>foo(null, (x) => '', (x) => '') : (x: 任意) => 任意
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>null : 空值
>类型别名 :=> 空值
>(x) => '' : (x: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>'' : ""
>(x) => '' : (x: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>'' : ""

var r5 = foo(new Object(), (x) => '', (x) => ''); // Object => Object
>r5 : (x: Object) => Object
>foo(new Object(), (x) => '', (x) => '') : (x: Object) => Object
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>new Object() : Object
>Object : ObjectConstructor
>(x) => '' : (x: Object) => 文字
>x : Object
>'' : ""
>(x) => '' : (x: Object) => 文字
>x : Object
>'' : ""

enum E { A }
>E : E
>A : E

enum F { A }
>F : F
>A : F

var r6 = foo(E.A, (x: number) => E.A, (x: F) => F.A); // number => number 
>r6 : (x: 数字) => 数字
>foo(E.A, (x: number) => E.A, (x: F) => F.A) : (x: 数字) => 数字
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>E.A : E
>E : 类为 E
>A : E
>(x: number) => E.A : (x: 数字) => E
>x : 数字
>类型别名 :=> 数字
>E.A : E
>E : 类为 E
>A : E
>(x: F) => F.A : (x: F) => F
>x : F
>F : F
>F.A : F
>F : 类为 F
>A : F


function foo2<T, U>(x: T, a: (x: T) => U, b: (x: T) => U) {
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>T : T
>U : U
>x : T
>T : T
>a : (x: T) => U
>x : T
>T : T
>U : U
>b : (x: T) => U
>x : T
>T : T
>U : U

    var r: (x: T) => U;
>r : (x: T) => U
>x : T
>T : T
>U : U

    return r;
>r : (x: T) => U
}

var r8 = foo2('', (x) => '', (x) => null); // string => string
>r8 : (x: 文字) => 任意
>foo2('', (x) => '', (x) => null) : (x: 文字) => 任意
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>'' : ""
>(x) => '' : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>'' : ""
>(x) => null : (x: 文字) => 任意
>x : 文字
>类型别名 :=> 文字
>null : 空值
>类型别名 :=> 空值

var r9 = foo2(null, (x) => '', (x) => ''); // any => any
>r9 : (x: 任意) => 文字
>foo2(null, (x) => '', (x) => '') : (x: 任意) => 文字
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>null : 空值
>类型别名 :=> 空值
>(x) => '' : (x: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>'' : ""
>(x) => '' : (x: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>'' : ""

var r10 = foo2(null, (x: Object) => '', (x: string) => ''); // Object => Object
>r10 : (x: Object) => 文字
>foo2(null, (x: Object) => '', (x: string) => '') : (x: Object) => 文字
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>null : 空值
>类型别名 :=> 空值
>(x: Object) => '' : (x: Object) => 文字
>x : Object
>Object : Object
>'' : ""
>(x: string) => '' : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>'' : ""

var x: (a: string) => boolean;
>x : (a: 文字) => 真假
>a : 文字
>类型别名 :=> 文字

var r11 = foo2(x, (a1: (y: string) => string) => (n: Object) => 1, (a2: (z: string) => string) => 2); // error
>r11 : 任意
>类型别名 :=> 任意
>foo2(x, (a1: (y: string) => string) => (n: Object) => 1, (a2: (z: string) => string) => 2) : 任意
>类型别名 :=> 任意
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>x : (a: 文字) => 真假
>(a1: (y: string) => string) => (n: Object) => 1 : (a1: (y: 文字) => 文字) => (n: Object) => 数字
>a1 : (y: 文字) => 文字
>y : 文字
>类型别名 :=> 文字
>(n: Object) => 1 : (n: Object) => 数字
>n : Object
>Object : Object
>1 : 1
>(a2: (z: string) => string) => 2 : (a2: (z: 文字) => 文字) => 数字
>a2 : (z: 文字) => 文字
>z : 文字
>类型别名 :=> 文字
>2 : 2

var r12 = foo2(x, (a1: (y: string) => boolean) => (n: Object) => 1, (a2: (z: string) => boolean) => 2); // error
>r12 : 任意
>类型别名 :=> 任意
>foo2(x, (a1: (y: string) => boolean) => (n: Object) => 1, (a2: (z: string) => boolean) => 2) : 任意
>类型别名 :=> 任意
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>x : (a: 文字) => 真假
>(a1: (y: string) => boolean) => (n: Object) => 1 : (a1: (y: 文字) => 真假) => (n: Object) => 数字
>a1 : (y: 文字) => 真假
>y : 文字
>类型别名 :=> 文字
>(n: Object) => 1 : (n: Object) => 数字
>n : Object
>Object : Object
>1 : 1
>(a2: (z: string) => boolean) => 2 : (a2: (z: 文字) => 真假) => 数字
>a2 : (z: 文字) => 真假
>z : 文字
>类型别名 :=> 文字
>2 : 2

