=== tests/cases/compiler/castTest.ts ===
var x : any = 0;
>x : any
>类型别名 :=> 任意
>0 : 0

var z = <number> x;
>z : number
>类型别名 :=> 数字
><number> x : number
>类型别名 :=> 数字
>x : any
>类型别名 :=> 任意

var y = x + z;
>y : any
>类型别名 :=> 任意
>x + z : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>z : number
>类型别名 :=> 数字

var a = <any>0;
>a : any
>类型别名 :=> 任意
><any>0 : any
>类型别名 :=> 任意
>0 : 0

var b = <boolean>true;
>b : boolean
>类型别名 :=> 真假
><boolean>true : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

var s = <string>"";
>s : string
>类型别名 :=> 文字
><string>"" : string
>类型别名 :=> 文字
>"" : ""

var ar = <any[]>null;
>ar : any[]
><any[]>null : any[]
>null : null
>类型别名 :=> 空值

var f = <(res : number) => void>null;
>f : (res: number) => void
><(res : number) => void>null : (res: number) => void
>res : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

declare class Point
>Point : Point
{
    x: number;
>x : number
>类型别名 :=> 数字

    y: number;
>y : number
>类型别名 :=> 数字

    add(dx: number, dy: number): Point;
>add : (dx: number, dy: number) => Point
>dx : number
>类型别名 :=> 数字
>dy : number
>类型别名 :=> 数字
>Point : Point

    mult(p: Point): Point;
>mult : (p: Point) => Point
>p : Point
>Point : Point
>Point : Point

    constructor(x: number, y: number);
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
}

var p_cast = <Point> ({
>p_cast : Point
><Point> ({    x: 0,    y: 0,    add: function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    },    mult: function(p) { return p; }}) : Point
>Point : Point
>({    x: 0,    y: 0,    add: function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    },    mult: function(p) { return p; }}) : { x: number; y: number; add: (dx: number, dy: number) => Point; mult: (p: Point) => Point; }
>{    x: 0,    y: 0,    add: function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    },    mult: function(p) { return p; }} : { x: number; y: number; add: (dx: number, dy: number) => Point; mult: (p: Point) => Point; }

    x: 0,
>x : number
>类型别名 :=> 数字
>0 : 0

    y: 0,
>y : number
>类型别名 :=> 数字
>0 : 0

    add: function(dx, dy) {
>add : (dx: number, dy: number) => Point
>function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    } : (dx: number, dy: number) => Point
>dx : number
>类型别名 :=> 数字
>dy : number
>类型别名 :=> 数字

        return new Point(this.x + dx, this.y + dy);
>new Point(this.x + dx, this.y + dy) : Point
>Point : typeof Point
>this.x + dx : any
>类型别名 :=> 任意
>this.x : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>dx : number
>类型别名 :=> 数字
>this.y + dy : any
>类型别名 :=> 任意
>this.y : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意
>y : any
>类型别名 :=> 任意
>dy : number
>类型别名 :=> 数字

    },
    mult: function(p) { return p; }
>mult : (p: Point) => Point
>function(p) { return p; } : (p: Point) => Point
>p : Point
>p : Point

})


