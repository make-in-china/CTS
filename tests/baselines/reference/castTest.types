=== tests/cases/compiler/castTest.ts ===
var x : any = 0;
>x : 任意
>类型别名 :=> 任意
>0 : 0

var z = <number> x;
>z : 数字
>类型别名 :=> 数字
><number> x : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意

var y = x + z;
>y : 任意
>类型别名 :=> 任意
>x + z : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>z : 数字
>类型别名 :=> 数字

var a = <any>0;
>a : 任意
>类型别名 :=> 任意
><any>0 : 任意
>类型别名 :=> 任意
>0 : 0

var b = <boolean>true;
>b : 真假
>类型别名 :=> 真假
><boolean>true : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

var s = <string>"";
>s : 文字
>类型别名 :=> 文字
><string>"" : 文字
>类型别名 :=> 文字
>"" : ""

var ar = <any[]>null;
>ar : 任意[]
><any[]>null : 任意[]
>null : 空值
>类型别名 :=> 空值

var f = <(res : number) => void>null;
>f : (res: 数字) => 无值
><(res : number) => void>null : (res: 数字) => 无值
>res : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值

declare class Point
>Point : Point
{
    x: number;
>x : 数字
>类型别名 :=> 数字

    y: number;
>y : 数字
>类型别名 :=> 数字

    add(dx: number, dy: number): Point;
>add : (dx: 数字, dy: 数字) => Point
>dx : 数字
>类型别名 :=> 数字
>dy : 数字
>类型别名 :=> 数字
>Point : Point

    mult(p: Point): Point;
>mult : (p: Point) => Point
>p : Point
>Point : Point
>Point : Point

    constructor(x: number, y: number);
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
}

var p_cast = <Point> ({
>p_cast : Point
><Point> ({    x: 0,    y: 0,    add: function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    },    mult: function(p) { return p; }}) : Point
>Point : Point
>({    x: 0,    y: 0,    add: function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    },    mult: function(p) { return p; }}) : { x: 数字; y: 数字; add: (dx: 数字, dy: 数字) => Point; mult: (p: Point) => Point; }
>{    x: 0,    y: 0,    add: function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    },    mult: function(p) { return p; }} : { x: 数字; y: 数字; add: (dx: 数字, dy: 数字) => Point; mult: (p: Point) => Point; }

    x: 0,
>x : 数字
>类型别名 :=> 数字
>0 : 0

    y: 0,
>y : 数字
>类型别名 :=> 数字
>0 : 0

    add: function(dx, dy) {
>add : (dx: 数字, dy: 数字) => Point
>function(dx, dy) {        return new Point(this.x + dx, this.y + dy);    } : (dx: 数字, dy: 数字) => Point
>dx : 数字
>类型别名 :=> 数字
>dy : 数字
>类型别名 :=> 数字

        return new Point(this.x + dx, this.y + dy);
>new Point(this.x + dx, this.y + dy) : Point
>Point : 类为 Point
>this.x + dx : 任意
>类型别名 :=> 任意
>this.x : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>dx : 数字
>类型别名 :=> 数字
>this.y + dy : 任意
>类型别名 :=> 任意
>this.y : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>dy : 数字
>类型别名 :=> 数字

    },
    mult: function(p) { return p; }
>mult : (p: Point) => Point
>function(p) { return p; } : (p: Point) => Point
>p : Point
>p : Point

})


