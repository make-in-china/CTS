=== tests/cases/conformance/expressions/newOperator/newOperatorConformance.ts ===
class C0 {
>C0 : C0

}
class C1 {
>C1 : C1

    constructor(n: number, s: string) { }
>n : 数字
>类型别名 :=> 数字
>s : 文字
>类型别名 :=> 文字
}

class T<T> {
>T : T<T>
>T : T

    constructor(n?: T) { }
>n : T
>T : T
}

var anyCtor: {
>anyCtor : 新建 () => 任意

    new (): any;
};

var anyCtor1: {
>anyCtor1 : 新建 (n: 任意) => 任意

    new (n): any;
>n : 任意
>类型别名 :=> 任意

};

interface nestedCtor {
>nestedCtor : nestedCtor

    new (): nestedCtor;
>nestedCtor : nestedCtor
}
var nestedCtor: nestedCtor;
>nestedCtor : nestedCtor
>nestedCtor : nestedCtor

// Construct expression with no parentheses for construct signature with 0 parameters
var a = new C0;
>a : C0
>new C0 : C0
>C0 : 类为 C0

var a: C0;
>a : C0
>C0 : C0


// Generic construct expression with no parentheses
var c1 = new T;
>c1 : T<{}>
>new T : T<{}>
>T : 类为 T

var c1: T<{}>;
>c1 : T<{}>
>T : T<T>

// Construct expression where constructor is of type 'any' with no parentheses
var d = new anyCtor;
>d : 任意
>类型别名 :=> 任意
>new anyCtor : 任意
>类型别名 :=> 任意
>anyCtor : 新建 () => 任意

var d: any;
>d : 任意
>类型别名 :=> 任意

// Construct expression where constructor is of type 'any' with > 1 arg
var d = new anyCtor1(undefined);
>d : 任意
>类型别名 :=> 任意
>new anyCtor1(undefined) : 任意
>类型别名 :=> 任意
>anyCtor1 : 新建 (n: 任意) => 任意
>undefined : 未定
>类型别名 :=> 未定

// Construct expression of type where apparent type has a construct signature with 0 arguments
function newFn1<T extends { new (): number }>(s: T) {
>newFn1 : <T 扩展 新建 () => 数字>(s: T) => 无值
>T : T
>s : T
>T : T

    var p = new s;
>p : 数字
>类型别名 :=> 数字
>new s : 数字
>类型别名 :=> 数字
>s : T

    var p: number;
>p : 数字
>类型别名 :=> 数字
}

// Construct expression of type where apparent type has a construct signature with 1 arguments
function newFn2<T extends { new (s: number): string}>(s: T) {
>newFn2 : <T 扩展 新建 (s: 数字) => 文字>(s: T) => 无值
>T : T
>s : 数字
>类型别名 :=> 数字
>s : T
>T : T

    var p = new s(32);
>p : 文字
>类型别名 :=> 文字
>new s(32) : 文字
>类型别名 :=> 文字
>s : T
>32 : 32

    var p: string;
>p : 文字
>类型别名 :=> 文字
}

// Construct expression of void returning function
function fnVoid(): void { }
>fnVoid : () => 无值

var t = new fnVoid();
>t : 任意
>类型别名 :=> 任意
>new fnVoid() : 任意
>类型别名 :=> 任意
>fnVoid : () => 无值

var t: any;
>t : 任意
>类型别名 :=> 任意

// Chained new expressions
var nested = new (new (new nestedCtor())())();
>nested : nestedCtor
>new (new (new nestedCtor())())() : nestedCtor
>(new (new nestedCtor())()) : nestedCtor
>new (new nestedCtor())() : nestedCtor
>(new nestedCtor()) : nestedCtor
>new nestedCtor() : nestedCtor
>nestedCtor : nestedCtor

var n = new nested();
>n : nestedCtor
>new nested() : nestedCtor
>nested : nestedCtor

var n = new nested();
>n : nestedCtor
>new nested() : nestedCtor
>nested : nestedCtor

