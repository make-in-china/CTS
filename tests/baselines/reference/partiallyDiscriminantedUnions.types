=== tests/cases/compiler/partiallyDiscriminantedUnions.ts ===
// Repro from #10586

interface A1 {
>A1 : A1

    type: 'a';
>type : "a"

    subtype: 1;
>subtype : 1
}

interface A2 {
>A2 : A2

    type: 'a';
>type : "a"

    subtype: 2;
>subtype : 2

    foo: number;
>foo : 数字
>类型别名 :=> 数字
}

interface B {
>B : B

    type: 'b';
>type : "b"
}

type AB = A1 | A2 | B;
>AB : AB
>A1 : A1
>A2 : A2
>B : B

const ab: AB = <AB>{};
>ab : AB
>AB : AB
><AB>{} : AB
>AB : AB
>{} : {}

if (ab.type === 'a') {
>ab.type === 'a' : 真假
>类型别名 :=> 真假
>ab.type : "a" | "b"
>ab : AB
>type : "a" | "b"
>'a' : "a"

    if (ab.subtype === 2) {
>ab.subtype === 2 : 真假
>类型别名 :=> 真假
>ab.subtype : 1 | 2
>ab : A1 | A2
>subtype : 1 | 2
>2 : 2

        ab.foo;
>ab.foo : 数字
>类型别名 :=> 数字
>ab : A2
>foo : 数字
>类型别名 :=> 数字
    }
}

// Repro from #11185

class Square { kind: "square"; }
>Square : Square
>kind : "square"

class Circle { kind: "circle"; }
>Circle : Circle
>kind : "circle"

type Shape = Circle | Square;
>Shape : Shape
>Circle : Circle
>Square : Square

type Shapes = Shape | Array<Shape>;
>Shapes : Shapes
>Shape : Shape
>Array : T[]
>Shape : Shape

function isShape(s : Shapes): s is Shape {
>isShape : (s: Shapes) => s 作为 Shape
>s : Shapes
>Shapes : Shapes
>s : 任意
>类型别名 :=> 任意
>Shape : Shape

    return !Array.isArray(s);
>!Array.isArray(s) : 真假
>类型别名 :=> 真假
>Array.isArray(s) : 真假
>类型别名 :=> 真假
>Array.isArray : (arg: 任意) => arg 作为 任意[]
>Array : ArrayConstructor
>isArray : (arg: 任意) => arg 作为 任意[]
>s : Shapes
}

function fail(s: Shapes) {
>fail : (s: Shapes) => 无值
>s : Shapes
>Shapes : Shapes

    if (isShape(s)) {
>isShape(s) : 真假
>类型别名 :=> 真假
>isShape : (s: Shapes) => s 作为 Shape
>s : Shapes

        if (s.kind === "circle") {
>s.kind === "circle" : 真假
>类型别名 :=> 真假
>s.kind : "square" | "circle"
>s : Shape
>kind : "square" | "circle"
>"circle" : "circle"

            let c: Circle = s;
>c : Circle
>Circle : Circle
>s : Circle
        }
    }
}
