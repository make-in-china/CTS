=== tests/cases/conformance/expressions/thisKeyword/thisInObjectLiterals.ts ===
class MyClass {
>MyClass : MyClass

    t: number;
>t : number
>类型别名 :=> 数字

    fn() {
>fn : () => void

        type ContainingThis = this;
>ContainingThis : this

        //type of 'this' in an object literal is the containing scope's this
        var t = { x: this, y: this.t };
>t : { x: this; y: number; }
>{ x: this, y: this.t } : { x: this; y: number; }
>x : this
>this : this
>y : number
>类型别名 :=> 数字
>this.t : number
>类型别名 :=> 数字
>this : this
>t : number
>类型别名 :=> 数字

        var t: { x: ContainingThis; y: number };
>t : { x: this; y: number; }
>x : this
>ContainingThis : this
>y : number
>类型别名 :=> 数字
    }
}

//type of 'this' in an object literal method is the type of the object literal
var obj = {
>obj : { f(): any; }
>{    f() {        return this.spaaace;    }} : { f(): any; }

    f() {
>f : () => any

        return this.spaaace;
>this.spaaace : any
>类型别名 :=> 任意
>this : { f(): any; }
>spaaace : any
>类型别名 :=> 任意
    }
};
var obj: { f: () => any; };
>obj : { f(): any; }
>f : () => any

