=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react')
>React : 类为 React

declare function ComponentWithTwoAttributes<K,V>(l: {key1: K, value: V}): JSX.Element;
>ComponentWithTwoAttributes : <K, V>(l: { key1: K; value: V; }) => JSX.Element
>K : K
>V : V
>l : { key1: K; value: V; }
>key1 : K
>K : K
>value : V
>V : V
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

// OK
function Baz<T,U>(key1: T, value: U) {
>Baz : <T, U>(key1: T, value: U) => 无值
>T : T
>U : U
>key1 : T
>T : T
>value : U
>U : U

    let a0 = <ComponentWithTwoAttributes key1={key1} value={value} />
>a0 : JSX.Element
><ComponentWithTwoAttributes key1={key1} value={value} /> : JSX.Element
>ComponentWithTwoAttributes : <K, V>(l: { key1: K; value: V; }) => JSX.Element
>key1 : T
>key1 : T
>value : U
>value : U

    let a1 = <ComponentWithTwoAttributes {...{key1, value: value}} key="Component" />
>a1 : JSX.Element
><ComponentWithTwoAttributes {...{key1, value: value}} key="Component" /> : JSX.Element
>ComponentWithTwoAttributes : <K, V>(l: { key1: K; value: V; }) => JSX.Element
>{key1, value: value} : { key1: T; value: U; }
>key1 : T
>value : U
>value : U
>key : 文字
>类型别名 :=> 文字
}

declare function Link<U>(l: {func: (arg: U)=>void}): JSX.Element;
>Link : <U>(l: { func: (arg: U) => 无值; }) => JSX.Element
>U : U
>l : { func: (arg: U) => 无值; }
>func : (arg: U) => 无值
>arg : U
>U : U
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

// OK
function createLink(func: (a: number)=>void) {
>createLink : (func: (a: 数字) => 无值) => 无值
>func : (a: 数字) => 无值
>a : 数字
>类型别名 :=> 数字

    let o = <Link func={func} />
>o : JSX.Element
><Link func={func} /> : JSX.Element
>Link : <U>(l: { func: (arg: U) => 无值; }) => JSX.Element
>func : (a: 数字) => 无值
>func : (a: 数字) => 无值
}

function createLink1(func: (a: number)=>boolean) {
>createLink1 : (func: (a: 数字) => 真假) => 无值
>func : (a: 数字) => 真假
>a : 数字
>类型别名 :=> 数字

    let o = <Link func={func} />
>o : JSX.Element
><Link func={func} /> : JSX.Element
>Link : <U>(l: { func: (arg: U) => 无值; }) => JSX.Element
>func : (a: 数字) => 真假
>func : (a: 数字) => 真假
}

interface InferParamProp<T> {
>InferParamProp : InferParamProp<T>
>T : T

    values: Array<T>;
>values : T[]
>Array : T[]
>T : T

    selectHandler: (selectedVal: T) => void;
>selectHandler : (selectedVal: T) => 无值
>selectedVal : T
>T : T
}

declare function InferParamComponent<T>(attr: InferParamProp<T>): JSX.Element;
>InferParamComponent : <T>(attr: InferParamProp<T>) => JSX.Element
>T : T
>attr : InferParamProp<T>
>InferParamProp : InferParamProp<T>
>T : T
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

// OK
let i = <InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val) => { }} />;
>i : JSX.Element
><InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val) => { }} /> : JSX.Element
>InferParamComponent : <T>(attr: InferParamProp<T>) => JSX.Element
>values : 数字[]
>[1, 2, 3, 4] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>selectHandler : (val: 数字) => 无值
>(val) => { } : (val: 数字) => 无值
>val : 数字
>类型别名 :=> 数字

