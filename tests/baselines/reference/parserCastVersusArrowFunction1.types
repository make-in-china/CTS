=== tests/cases/conformance/parser/ecmascript5/Generics/parserCastVersusArrowFunction1.ts ===
var v = <T>() => 1;
>v : <T>() => 数字
><T>() => 1 : <T>() => 数字
>T : T
>1 : 1

var v = <T>a;
>v : <T>() => 数字
><T>a : 任意
>类型别名 :=> 任意
>T : No type information available!
>a : 任意
>类型别名 :=> 任意

var v = <T>(a) => 1;
>v : <T>() => 数字
><T>(a) => 1 : <T>(a: 任意) => 数字
>T : T
>a : 任意
>类型别名 :=> 任意
>1 : 1

var v = <T>(a, b) => 1;
>v : <T>() => 数字
><T>(a, b) => 1 : <T>(a: 任意, b: 任意) => 数字
>T : T
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>1 : 1

var v = <T>(a = 1, b = 2) => 1;
>v : <T>() => 数字
><T>(a = 1, b = 2) => 1 : <T>(a?: 数字, b?: 数字) => 数字
>T : T
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 数字
>类型别名 :=> 数字
>2 : 2
>1 : 1

var v = <T>(a);
>v : <T>() => 数字
><T>(a) : 任意
>类型别名 :=> 任意
>T : No type information available!
>(a) : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

var v = <T>(a, b);
>v : <T>() => 数字
><T>(a, b) : 任意
>类型别名 :=> 任意
>T : No type information available!
>(a, b) : 任意
>类型别名 :=> 任意
>a, b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

var v = <T>(a = 1, b = 2);
>v : <T>() => 数字
><T>(a = 1, b = 2) : 任意
>类型别名 :=> 任意
>T : No type information available!
>(a = 1, b = 2) : 2
>a = 1, b = 2 : 2
>a = 1 : 1
>a : 任意
>类型别名 :=> 任意
>1 : 1
>b = 2 : 2
>b : 任意
>类型别名 :=> 任意
>2 : 2

