=== tests/cases/conformance/parser/ecmascript5/Generics/parserCastVersusArrowFunction1.ts ===
var v = <T>() => 1;
>v : <T>() => number
><T>() => 1 : <T>() => number
>T : T
>1 : 1

var v = <T>a;
>v : <T>() => number
><T>a : any
>类型别名 :=> 任意
>T : No type information available!
>a : any
>类型别名 :=> 任意

var v = <T>(a) => 1;
>v : <T>() => number
><T>(a) => 1 : <T>(a: any) => number
>T : T
>a : any
>类型别名 :=> 任意
>1 : 1

var v = <T>(a, b) => 1;
>v : <T>() => number
><T>(a, b) => 1 : <T>(a: any, b: any) => number
>T : T
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>1 : 1

var v = <T>(a = 1, b = 2) => 1;
>v : <T>() => number
><T>(a = 1, b = 2) => 1 : <T>(a?: number, b?: number) => number
>T : T
>a : number
>类型别名 :=> 数字
>1 : 1
>b : number
>类型别名 :=> 数字
>2 : 2
>1 : 1

var v = <T>(a);
>v : <T>() => number
><T>(a) : any
>类型别名 :=> 任意
>T : No type information available!
>(a) : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

var v = <T>(a, b);
>v : <T>() => number
><T>(a, b) : any
>类型别名 :=> 任意
>T : No type information available!
>(a, b) : any
>类型别名 :=> 任意
>a, b : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

var v = <T>(a = 1, b = 2);
>v : <T>() => number
><T>(a = 1, b = 2) : any
>类型别名 :=> 任意
>T : No type information available!
>(a = 1, b = 2) : 2
>a = 1, b = 2 : 2
>a = 1 : 1
>a : any
>类型别名 :=> 任意
>1 : 1
>b = 2 : 2
>b : any
>类型别名 :=> 任意
>2 : 2

