=== tests/cases/compiler/cyclicTypeInstantiation.ts ===
function foo<T>() {
>foo : <T>() => { a: T; b: 任意; }
>T : T

    var x: {
>x : { a: T; b: 任意; }

        a: T;
>a : T
>T : T

        b: typeof x;
>b : { a: T; b: 任意; }
>x : { a: T; b: 任意; }

    };
    return x;
>x : { a: T; b: 任意; }
}

function bar<T>() {
>bar : <T>() => { a: T; b: 任意; }
>T : T

    var x: {
>x : { a: T; b: 任意; }

        a: T;
>a : T
>T : T

        b: typeof x;
>b : { a: T; b: 任意; }
>x : { a: T; b: 任意; }

    };
    return x;
>x : { a: T; b: 任意; }
}

var a = foo<string>();
>a : { a: 文字; b: 任意; }
>foo<string>() : { a: 文字; b: 任意; }
>foo : <T>() => { a: T; b: 任意; }

var b = bar<string>();
>b : { a: 文字; b: 任意; }
>bar<string>() : { a: 文字; b: 任意; }
>bar : <T>() => { a: T; b: 任意; }

// Relating types of a and b produces instantiations of the cyclic anonymous types in foo and bar
a = b;
>a = b : { a: 文字; b: 任意; }
>a : { a: 文字; b: 任意; }
>b : { a: 文字; b: 任意; }

