=== tests/cases/compiler/implicitAnyFunctionInvocationWithAnyArguements.ts ===
// this should be errors
var arg0 = null;  // error at "arg0"
>arg0 : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

var anyArray = [null, undefined];  // error at array literal
>anyArray : 任意[]
>[null, undefined] : 空值[]
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

var objL: { v; w; }             // error at "y,z"
>objL : { v: 任意; w: 任意; }
>v : 任意
>类型别名 :=> 任意
>w : 任意
>类型别名 :=> 任意

var funcL: (y2) => number;
>funcL : (y2: 任意) => 数字
>y2 : 任意
>类型别名 :=> 任意

function temp1(arg1) { }  // error at "temp1"
>temp1 : (arg1: 任意) => 无值
>arg1 : 任意
>类型别名 :=> 任意

function testFunctionExprC(subReplace: (s: string, ...arg: any[]) => string) { }
>testFunctionExprC : (subReplace: (s: 文字, ...arg: 任意[]) => 文字) => 无值
>subReplace : (s: 文字, ...arg: 任意[]) => 文字
>s : 文字
>类型别名 :=> 文字
>arg : 任意[]

function testFunctionExprC2(eq: (v1: any, v2: any) => number) { };
>testFunctionExprC2 : (eq: (v1: 任意, v2: 任意) => 数字) => 无值
>eq : (v1: 任意, v2: 任意) => 数字
>v1 : 任意
>类型别名 :=> 任意
>v2 : 任意
>类型别名 :=> 任意

function testObjLiteral(objLit: { v: any; w: any }) { }; 
>testObjLiteral : (objLit: { v: 任意; w: 任意; }) => 无值
>objLit : { v: 任意; w: 任意; }
>v : 任意
>类型别名 :=> 任意
>w : 任意
>类型别名 :=> 任意

function testFuncLiteral(funcLit: (y2) => number) { };
>testFuncLiteral : (funcLit: (y2: 任意) => 数字) => 无值
>funcLit : (y2: 任意) => 数字
>y2 : 任意
>类型别名 :=> 任意

// this should not be an error
testFunctionExprC2((v1, v2) => 1);
>testFunctionExprC2((v1, v2) => 1) : 无值
>类型别名 :=> 无值
>testFunctionExprC2 : (eq: (v1: 任意, v2: 任意) => 数字) => 无值
>(v1, v2) => 1 : (v1: 任意, v2: 任意) => 数字
>v1 : 任意
>类型别名 :=> 任意
>v2 : 任意
>类型别名 :=> 任意
>1 : 1

testObjLiteral(objL);
>testObjLiteral(objL) : 无值
>类型别名 :=> 无值
>testObjLiteral : (objLit: { v: 任意; w: 任意; }) => 无值
>objL : { v: 任意; w: 任意; }

testFuncLiteral(funcL);
>testFuncLiteral(funcL) : 无值
>类型别名 :=> 无值
>testFuncLiteral : (funcLit: (y2: 任意) => 数字) => 无值
>funcL : (y2: 任意) => 数字

var k = temp1(null);
>k : 无值
>类型别名 :=> 无值
>temp1(null) : 无值
>类型别名 :=> 无值
>temp1 : (arg1: 任意) => 无值
>null : 空值
>类型别名 :=> 空值

var result = temp1(arg0);
>result : 无值
>类型别名 :=> 无值
>temp1(arg0) : 无值
>类型别名 :=> 无值
>temp1 : (arg1: 任意) => 无值
>arg0 : 空值
>类型别名 :=> 空值

var result1 = temp1(anyArray);
>result1 : 无值
>类型别名 :=> 无值
>temp1(anyArray) : 无值
>类型别名 :=> 无值
>temp1 : (arg1: 任意) => 无值
>anyArray : 任意[]

function noError(variable: any, array?: any) { }
>noError : (variable: 任意, array?: 任意) => 无值
>variable : 任意
>类型别名 :=> 任意
>array : 任意
>类型别名 :=> 任意

noError(null, []);
>noError(null, []) : 无值
>类型别名 :=> 无值
>noError : (variable: 任意, array?: 任意) => 无值
>null : 空值
>类型别名 :=> 空值
>[] : 未定[]

noError(undefined, <any>[]);
>noError(undefined, <any>[]) : 无值
>类型别名 :=> 无值
>noError : (variable: 任意, array?: 任意) => 无值
>undefined : 未定
>类型别名 :=> 未定
><any>[] : 任意
>类型别名 :=> 任意
>[] : 未定[]

noError(null, [null, undefined]);
>noError(null, [null, undefined]) : 无值
>类型别名 :=> 无值
>noError : (variable: 任意, array?: 任意) => 无值
>null : 空值
>类型别名 :=> 空值
>[null, undefined] : 空值[]
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

noError(undefined, anyArray);
>noError(undefined, anyArray) : 无值
>类型别名 :=> 无值
>noError : (variable: 任意, array?: 任意) => 无值
>undefined : 未定
>类型别名 :=> 未定
>anyArray : 任意[]

class C {
>C : C

    constructor(emtpyArray: any, variable: any) {
>emtpyArray : 任意
>类型别名 :=> 任意
>variable : 任意
>类型别名 :=> 任意
    }
}

var newC = new C([], undefined);
>newC : C
>new C([], undefined) : C
>C : 类为 C
>[] : 未定[]
>undefined : 未定
>类型别名 :=> 未定

var newC1 = new C([], arg0);
>newC1 : C
>new C([], arg0) : C
>C : 类为 C
>[] : 未定[]
>arg0 : 空值
>类型别名 :=> 空值

var newC2 = new C(<any>[], null) 
>newC2 : C
>new C(<any>[], null) : C
>C : 类为 C
><any>[] : 任意
>类型别名 :=> 任意
>[] : 未定[]
>null : 空值
>类型别名 :=> 空值

