=== tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration1ES5iterable.ts ===
// A parameter declaration may specify either an identifier or a binding pattern.
// The identifiers specified in parameter declarations and binding patterns
// in a parameter list must be unique within that parameter list.

// If the declaration includes a type annotation, the parameter is of that type
function a1([a, b, [[c]]]: [number, number, string[][]]) { }
>a1 : ([a, b, [[c]]]: [数字, 数字, 文字[][]]) => 无值
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>c : 文字
>类型别名 :=> 文字

function a2(o: { x: number, a: number }) { }
>a2 : (o: { x: 数字; a: 数字; }) => 无值
>o : { x: 数字; a: 数字; }
>x : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

function a3({j, k, l: {m, n}, q: [a, b, c]}: { j: number, k: string, l: { m: boolean, n: number }, q: (number|string)[] }) { };
>a3 : ({ j, k, l: { m, n }, q: [a, b, c] }: { j: 数字; k: 文字; l: { m: 真假; n: 数字; }; q: (文字 | 数字)[]; }) => 无值
>j : 数字
>类型别名 :=> 数字
>k : 文字
>类型别名 :=> 文字
>l : 任意
>类型别名 :=> 任意
>m : 真假
>类型别名 :=> 真假
>n : 数字
>类型别名 :=> 数字
>q : 任意
>类型别名 :=> 任意
>a : 文字 | 数字
>b : 文字 | 数字
>c : 文字 | 数字
>j : 数字
>类型别名 :=> 数字
>k : 文字
>类型别名 :=> 文字
>l : { m: 真假; n: 数字; }
>m : 真假
>类型别名 :=> 真假
>n : 数字
>类型别名 :=> 数字
>q : (文字 | 数字)[]

function a4({x, a}: { x: number, a: number }) { }
>a4 : ({ x, a }: { x: 数字; a: 数字; }) => 无值
>x : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

a1([1, 2, [["world"]]]);
>a1([1, 2, [["world"]]]) : 无值
>类型别名 :=> 无值
>a1 : ([a, b, [[c]]]: [数字, 数字, 文字[][]]) => 无值
>[1, 2, [["world"]]] : [数字, 数字, 文字[][]]
>1 : 1
>2 : 2
>[["world"]] : 文字[][]
>["world"] : 文字[]
>"world" : "world"

a1([1, 2, [["world"]], 3]);
>a1([1, 2, [["world"]], 3]) : 无值
>类型别名 :=> 无值
>a1 : ([a, b, [[c]]]: [数字, 数字, 文字[][]]) => 无值
>[1, 2, [["world"]], 3] : [数字, 数字, 文字[][], 数字]
>1 : 1
>2 : 2
>[["world"]] : 文字[][]
>["world"] : 文字[]
>"world" : "world"
>3 : 3

// If the declaration includes an initializer expression (which is permitted only
// when the parameter list occurs in conjunction with a function body),
// the parameter type is the widened form (section 3.11) of the type of the initializer expression.

function b1(z = [undefined, null]) { };
>b1 : (z?: 任意[]) => 无值
>z : 任意[]
>[undefined, null] : 空值[]
>undefined : 未定
>类型别名 :=> 未定
>null : 空值
>类型别名 :=> 空值

function b2(z = null, o = { x: 0, y: undefined }) { }
>b2 : (z?: 任意, o?: { x: 数字; y: 任意; }) => 无值
>z : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>o : { x: 数字; y: 任意; }
>{ x: 0, y: undefined } : { x: 数字; y: 未定; }
>x : 数字
>类型别名 :=> 数字
>0 : 0
>y : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

function b3({z: {x, y: {j}}} = { z: { x: "hi", y: { j: 1 } } }) { }
>b3 : ({ z: { x, y: { j } } }?: { z: { x: 文字; y: { j: 数字; }; }; }) => 无值
>z : 任意
>类型别名 :=> 任意
>x : 文字
>类型别名 :=> 文字
>y : 任意
>类型别名 :=> 任意
>j : 数字
>类型别名 :=> 数字
>{ z: { x: "hi", y: { j: 1 } } } : { z: { x: 文字; y: { j: 数字; }; }; }
>z : { x: 文字; y: { j: 数字; }; }
>{ x: "hi", y: { j: 1 } } : { x: 文字; y: { j: 数字; }; }
>x : 文字
>类型别名 :=> 文字
>"hi" : "hi"
>y : { j: 数字; }
>{ j: 1 } : { j: 数字; }
>j : 数字
>类型别名 :=> 数字
>1 : 1

interface F1 {
>F1 : F1

    b5(z, y, [, a, b], {p, m: { q, r}});
>b5 : (z: 任意, y: 任意, [, a, b]: [任意, 任意, 任意], { p, m: { q, r } }: { p: 任意; m: { q: 任意; r: 任意; }; }) => 任意
>z : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
> : 未定
>类型别名 :=> 未定
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>p : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意
>q : 任意
>类型别名 :=> 任意
>r : 任意
>类型别名 :=> 任意
}

function b6([a, z, y] = [undefined, null, undefined]) { }
>b6 : ([a, z, y]?: [任意, 任意, 任意]) => 无值
>a : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>[undefined, null, undefined] : [未定, 空值, 未定]
>undefined : 未定
>类型别名 :=> 未定
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

function b7([[a], b, [[c, d]]] = [[undefined], undefined, [[undefined, undefined]]]) { }
>b7 : ([[a], b, [[c, d]]]?: [[任意], 任意, [[任意, 任意]]]) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
>d : 任意
>类型别名 :=> 任意
>[[undefined], undefined, [[undefined, undefined]]] : [[未定], 未定, [[未定, 未定]]]
>[undefined] : [未定]
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定
>[[undefined, undefined]] : [[未定, 未定]]
>[undefined, undefined] : [未定, 未定]
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

b1([1, 2, 3]);  // z is widen to the type any[]
>b1([1, 2, 3]) : 无值
>类型别名 :=> 无值
>b1 : (z?: 任意[]) => 无值
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

b2("string", { x: 200, y: "string" });
>b2("string", { x: 200, y: "string" }) : 无值
>类型别名 :=> 无值
>b2 : (z?: 任意, o?: { x: 数字; y: 任意; }) => 无值
>"string" : "string"
>{ x: 200, y: "string" } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>200 : 200
>y : 文字
>类型别名 :=> 文字
>"string" : "string"

b2("string", { x: 200, y: true });
>b2("string", { x: 200, y: true }) : 无值
>类型别名 :=> 无值
>b2 : (z?: 任意, o?: { x: 数字; y: 任意; }) => 无值
>"string" : "string"
>{ x: 200, y: true } : { x: 数字; y: 真假; }
>x : 数字
>类型别名 :=> 数字
>200 : 200
>y : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

b6(["string", 1, 2]);                    // Shouldn't be an error
>b6(["string", 1, 2]) : 无值
>类型别名 :=> 无值
>b6 : ([a, z, y]?: [任意, 任意, 任意]) => 无值
>["string", 1, 2] : [文字, 数字, 数字]
>"string" : "string"
>1 : 1
>2 : 2

b7([["string"], 1, [[true, false]]]);    // Shouldn't be an error
>b7([["string"], 1, [[true, false]]]) : 无值
>类型别名 :=> 无值
>b7 : ([[a], b, [[c, d]]]?: [[任意], 任意, [[任意, 任意]]]) => 无值
>[["string"], 1, [[true, false]]] : [[文字], 数字, [[真假, 真假]]]
>["string"] : [文字]
>"string" : "string"
>1 : 1
>[[true, false]] : [[真假, 真假]]
>[true, false] : [真假, 真假]
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假


// If the declaration specifies a binding pattern, the parameter type is the implied type of that binding pattern (section 5.1.3)
enum Foo { a }
>Foo : Foo
>a : Foo

function c0({z: {x, y: {j}}}) { }
>c0 : ({ z: { x, y: { j } } }: { z: { x: 任意; y: { j: 任意; }; }; }) => 无值
>z : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>j : 任意
>类型别名 :=> 任意

function c1({z} = { z: 10 }) { }
>c1 : ({ z }?: { z: 数字; }) => 无值
>z : 数字
>类型别名 :=> 数字
>{ z: 10 } : { z: 数字; }
>z : 数字
>类型别名 :=> 数字
>10 : 10

function c2({z = 10}) { }
>c2 : ({ z }: { z?: 数字; }) => 无值
>z : 数字
>类型别名 :=> 数字
>10 : 10

function c3({b}: { b: number|string} = { b: "hello" }) { }
>c3 : ({ b }?: { b: 文字 | 数字; }) => 无值
>b : 文字 | 数字
>b : 文字 | 数字
>{ b: "hello" } : { b: 文字; }
>b : 文字
>类型别名 :=> 文字
>"hello" : "hello"

function c5([a, b, [[c]]]) { }
>c5 : ([a, b, [[c]]]: [任意, 任意, [[任意]]]) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

function c6([a, b, [[c=1]]]) { }
>c6 : ([a, b, [[c]]]: [任意, 任意, [[数字]]]) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 数字
>类型别名 :=> 数字
>1 : 1

c0({z : { x: 1, y: { j: "world" } }});      // Implied type is { z: {x: any, y: {j: any}} }
>c0({z : { x: 1, y: { j: "world" } }}) : 无值
>类型别名 :=> 无值
>c0 : ({ z: { x, y: { j } } }: { z: { x: 任意; y: { j: 任意; }; }; }) => 无值
>{z : { x: 1, y: { j: "world" } }} : { z: { x: 数字; y: { j: 文字; }; }; }
>z : { x: 数字; y: { j: 文字; }; }
>{ x: 1, y: { j: "world" } } : { x: 数字; y: { j: 文字; }; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : { j: 文字; }
>{ j: "world" } : { j: 文字; }
>j : 文字
>类型别名 :=> 文字
>"world" : "world"

c0({z : { x: "string", y: { j: true } }});  // Implied type is { z: {x: any, y: {j: any}} }
>c0({z : { x: "string", y: { j: true } }}) : 无值
>类型别名 :=> 无值
>c0 : ({ z: { x, y: { j } } }: { z: { x: 任意; y: { j: 任意; }; }; }) => 无值
>{z : { x: "string", y: { j: true } }} : { z: { x: 文字; y: { j: 真假; }; }; }
>z : { x: 文字; y: { j: 真假; }; }
>{ x: "string", y: { j: true } } : { x: 文字; y: { j: 真假; }; }
>x : 文字
>类型别名 :=> 文字
>"string" : "string"
>y : { j: 真假; }
>{ j: true } : { j: 真假; }
>j : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

c1();             // Implied type is {z:number}?
>c1() : 无值
>类型别名 :=> 无值
>c1 : ({ z }?: { z: 数字; }) => 无值

c1({ z: 1 })      // Implied type is {z:number}?
>c1({ z: 1 }) : 无值
>类型别名 :=> 无值
>c1 : ({ z }?: { z: 数字; }) => 无值
>{ z: 1 } : { z: 数字; }
>z : 数字
>类型别名 :=> 数字
>1 : 1

c2({});         // Implied type is {z?: number}
>c2({}) : 无值
>类型别名 :=> 无值
>c2 : ({ z }: { z?: 数字; }) => 无值
>{} : {}

c2({z:1});      // Implied type is {z?: number}
>c2({z:1}) : 无值
>类型别名 :=> 无值
>c2 : ({ z }: { z?: 数字; }) => 无值
>{z:1} : { z: 数字; }
>z : 数字
>类型别名 :=> 数字
>1 : 1

c3({ b: 1 });     // Implied type is { b: number|string }.
>c3({ b: 1 }) : 无值
>类型别名 :=> 无值
>c3 : ({ b }?: { b: 文字 | 数字; }) => 无值
>{ b: 1 } : { b: 数字; }
>b : 数字
>类型别名 :=> 数字
>1 : 1

c5([1, 2, [["string"]]]);               // Implied type is is [any, any, [[any]]]
>c5([1, 2, [["string"]]]) : 无值
>类型别名 :=> 无值
>c5 : ([a, b, [[c]]]: [任意, 任意, [[任意]]]) => 无值
>[1, 2, [["string"]]] : [数字, 数字, [[文字]]]
>1 : 1
>2 : 2
>[["string"]] : [[文字]]
>["string"] : [文字]
>"string" : "string"

c5([1, 2, [["string"]], false, true]);  // Implied type is is [any, any, [[any]]]
>c5([1, 2, [["string"]], false, true]) : 无值
>类型别名 :=> 无值
>c5 : ([a, b, [[c]]]: [任意, 任意, [[任意]]]) => 无值
>[1, 2, [["string"]], false, true] : [数字, 数字, [[文字]], 真假, 真假]
>1 : 1
>2 : 2
>[["string"]] : [[文字]]
>["string"] : [文字]
>"string" : "string"
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真

// A parameter can be marked optional by following its name or binding pattern with a question mark (?)
// or by including an initializer.

function d0(x?) { }
>d0 : (x?: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

function d0(x = 10) { }
>d0 : (x?: 任意) => 无值
>x : 数字
>类型别名 :=> 数字
>10 : 10

interface F2 {
>F2 : F2

    d3([a, b, c]?);
>d3 : ([a, b, c]?: [任意, 任意, 任意]) => 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

    d4({x, y, z}?);
>d4 : ({ x, y, z }?: { x: 任意; y: 任意; z: 任意; }) => 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    e0([a, b, c]);
>e0 : ([a, b, c]: [任意, 任意, 任意]) => 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
}

class C2 implements F2 {
>C2 : C2
>F2 : F2

    constructor() { }
    d3() { }
>d3 : () => 无值

    d4() { }
>d4 : () => 无值

    e0([a, b, c]) { }
>e0 : ([a, b, c]: [任意, 任意, 任意]) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
}

class C3 implements F2 {
>C3 : C3
>F2 : F2

    d3([a, b, c]) { }
>d3 : ([a, b, c]: [任意, 任意, 任意]) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

    d4({x, y, z}) { }
>d4 : ({ x, y, z }: { x: 任意; y: 任意; z: 任意; }) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

    e0([a, b, c]) { }
>e0 : ([a, b, c]: [任意, 任意, 任意]) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意
}


function d5({x, y} = { x: 1, y: 2 }) { }
>d5 : ({ x, y }?: { x: 数字; y: 数字; }) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>{ x: 1, y: 2 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

d5();  // Parameter is optional as its declaration included an initializer
>d5() : 无值
>类型别名 :=> 无值
>d5 : ({ x, y }?: { x: 数字; y: 数字; }) => 无值

// Destructuring parameter declarations do not permit type annotations on the individual binding patterns,
// as such annotations would conflict with the already established meaning of colons in object literals.
// Type annotations must instead be written on the top- level parameter declaration

function e1({x: number}) { }  // x has type any NOT number
>e1 : ({ x: number }: { x: 任意; }) => 无值
>x : 任意
>类型别名 :=> 任意
>number : 任意
>类型别名 :=> 任意

function e2({x}: { x: number }) { }  // x is type number
>e2 : ({ x }: { x: 数字; }) => 无值
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

function e3({x}: { x?: number }) { }  // x is an optional with type number
>e3 : ({ x }: { x?: 数字; }) => 无值
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

function e4({x: [number,string,any] }) { }  // x has type [any, any, any]
>e4 : ({ x: [number, string, any] }: { x: [任意, 任意, 任意]; }) => 无值
>x : 任意
>类型别名 :=> 任意
>number : 任意
>类型别名 :=> 任意
>string : 任意
>类型别名 :=> 任意
>any : 任意
>类型别名 :=> 任意

function e5({x: [a, b, c]}: { x: [number, number, number] }) { }  // x has type [any, any, any]
>e5 : ({ x: [a, b, c] }: { x: [数字, 数字, 数字]; }) => 无值
>x : 任意
>类型别名 :=> 任意
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>c : 数字
>类型别名 :=> 数字
>x : [数字, 数字, 数字]

