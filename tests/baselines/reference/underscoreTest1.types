=== tests/cases/compiler/underscoreTest1_underscoreTests.ts ===
/// <reference path="underscoreTest1_underscore.ts" />

declare var $;
>$ : 任意
>类型别名 :=> 任意

declare function alert(x: string): void;
>alert : (x: 文字) => 无值
>x : 文字
>类型别名 :=> 文字

_.each([1, 2, 3], (num) => alert(num.toString()));
>_.each([1, 2, 3], (num) => alert(num.toString())) : 无值
>类型别名 :=> 无值
>_.each : { <T>(list: T[], iterator: Iterator_<T, 无值>, context?: 任意): 无值; <T>(list: Dictionary<T>, iterator: Iterator_<T, 无值>, context?: 任意): 无值; }
>_ : Underscore.Static
>each : { <T>(list: T[], iterator: Iterator_<T, 无值>, context?: 任意): 无值; <T>(list: Dictionary<T>, iterator: Iterator_<T, 无值>, context?: 任意): 无值; }
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>(num) => alert(num.toString()) : (num: 数字) => 无值
>num : 数字
>类型别名 :=> 数字
>alert(num.toString()) : 无值
>类型别名 :=> 无值
>alert : (x: 文字) => 无值
>num.toString() : 文字
>类型别名 :=> 文字
>num.toString : (radix?: 数字) => 文字
>num : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

_.each({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => alert(value.toString()));
>_.each({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => alert(value.toString())) : 无值
>类型别名 :=> 无值
>_.each : { <T>(list: T[], iterator: Iterator_<T, 无值>, context?: 任意): 无值; <T>(list: Dictionary<T>, iterator: Iterator_<T, 无值>, context?: 任意): 无值; }
>_ : Underscore.Static
>each : { <T>(list: T[], iterator: Iterator_<T, 无值>, context?: 任意): 无值; <T>(list: Dictionary<T>, iterator: Iterator_<T, 无值>, context?: 任意): 无值; }
>{ one: 1, two: 2, three: 3 } : { one: 数字; two: 数字; three: 数字; }
>one : 数字
>类型别名 :=> 数字
>1 : 1
>two : 数字
>类型别名 :=> 数字
>2 : 2
>three : 数字
>类型别名 :=> 数字
>3 : 3
>(value: number, key?: string) => alert(value.toString()) : (value: 数字, key?: 文字) => 无值
>value : 数字
>类型别名 :=> 数字
>key : 文字
>类型别名 :=> 文字
>alert(value.toString()) : 无值
>类型别名 :=> 无值
>alert : (x: 文字) => 无值
>value.toString() : 文字
>类型别名 :=> 文字
>value.toString : (radix?: 数字) => 文字
>value : 数字
>类型别名 :=> 数字
>toString : (radix?: 数字) => 文字

_.map([1, 2, 3], (num) => num * 3);
>_.map([1, 2, 3], (num) => num * 3) : 数字[]
>_.map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: 任意): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>_ : Underscore.Static
>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: 任意): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>(num) => num * 3 : (num: 数字) => 数字
>num : 数字
>类型别名 :=> 数字
>num * 3 : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>3 : 3

_.map({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => value * 3);
>_.map({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => value * 3) : 数字[]
>_.map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: 任意): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>_ : Underscore.Static
>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: 任意): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>{ one: 1, two: 2, three: 3 } : { one: 数字; two: 数字; three: 数字; }
>one : 数字
>类型别名 :=> 数字
>1 : 1
>two : 数字
>类型别名 :=> 数字
>2 : 2
>three : 数字
>类型别名 :=> 数字
>3 : 3
>(value: number, key?: string) => value * 3 : (value: 数字, key?: 文字) => 数字
>value : 数字
>类型别名 :=> 数字
>key : 文字
>类型别名 :=> 文字
>value * 3 : 数字
>类型别名 :=> 数字
>value : 数字
>类型别名 :=> 数字
>3 : 3

var sum = _.reduce([1, 2, 3], (memo, num) => memo + num, 0);
>sum : 数字
>类型别名 :=> 数字
>_.reduce([1, 2, 3], (memo, num) => memo + num, 0) : 数字
>类型别名 :=> 数字
>_.reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>_ : Underscore.Static
>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>(memo, num) => memo + num : (memo: 数字, num: 数字) => 数字
>memo : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>memo + num : 数字
>类型别名 :=> 数字
>memo : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>0 : 0

var list = [[0, 1], [2, 3], [4, 5]];
>list : 数字[][]
>[[0, 1], [2, 3], [4, 5]] : 数字[][]
>[0, 1] : 数字[]
>0 : 0
>1 : 1
>[2, 3] : 数字[]
>2 : 2
>3 : 3
>[4, 5] : 数字[]
>4 : 4
>5 : 5

var flat = _.reduceRight(list, (a, b) => a.concat(b), []);
>flat : 数字[]
>_.reduceRight(list, (a, b) => a.concat(b), []) : 数字[]
>_.reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>_ : Underscore.Static
>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>list : 数字[][]
>(a, b) => a.concat(b) : (a: 数字[], b: 数字[]) => 数字[]
>a : 数字[]
>b : 数字[]
>a.concat(b) : 数字[]
>a.concat : { (...items: ReadonlyArray<数字>[]): 数字[]; (...items: (数字 | ReadonlyArray<数字>)[]): 数字[]; }
>a : 数字[]
>concat : { (...items: ReadonlyArray<数字>[]): 数字[]; (...items: (数字 | ReadonlyArray<数字>)[]): 数字[]; }
>b : 数字[]
>[] : 未定[]

var even = _.find([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);
>even : 数字
>类型别名 :=> 数字
>_.find([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0) : 数字
>类型别名 :=> 数字
>_.find : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T; }
>_ : Underscore.Static
>find : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T; }
>[1, 2, 3, 4, 5, 6] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>5 : 5
>6 : 6
>(num) => num % 2 == 0 : (num: 数字) => 真假
>num : 数字
>类型别名 :=> 数字
>num % 2 == 0 : 真假
>类型别名 :=> 真假
>num % 2 : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>2 : 2
>0 : 0

var evens = _.filter([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);
>evens : 数字[]
>_.filter([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0) : 数字[]
>_.filter : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T[]; }
>_ : Underscore.Static
>filter : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T[]; }
>[1, 2, 3, 4, 5, 6] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>5 : 5
>6 : 6
>(num) => num % 2 == 0 : (num: 数字) => 真假
>num : 数字
>类型别名 :=> 数字
>num % 2 == 0 : 真假
>类型别名 :=> 真假
>num % 2 : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>2 : 2
>0 : 0

var listOfPlays = [{ title: "Cymbeline", author: "Shakespeare", year: 1611 }, { title: "The Tempest", author: "Shakespeare", year: 1611 }, { title: "Other", author: "Not Shakespeare", year: 2012 }];
>listOfPlays : { title: 文字; author: 文字; year: 数字; }[]
>[{ title: "Cymbeline", author: "Shakespeare", year: 1611 }, { title: "The Tempest", author: "Shakespeare", year: 1611 }, { title: "Other", author: "Not Shakespeare", year: 2012 }] : { title: 文字; author: 文字; year: 数字; }[]
>{ title: "Cymbeline", author: "Shakespeare", year: 1611 } : { title: 文字; author: 文字; year: 数字; }
>title : 文字
>类型别名 :=> 文字
>"Cymbeline" : "Cymbeline"
>author : 文字
>类型别名 :=> 文字
>"Shakespeare" : "Shakespeare"
>year : 数字
>类型别名 :=> 数字
>1611 : 1611
>{ title: "The Tempest", author: "Shakespeare", year: 1611 } : { title: 文字; author: 文字; year: 数字; }
>title : 文字
>类型别名 :=> 文字
>"The Tempest" : "The Tempest"
>author : 文字
>类型别名 :=> 文字
>"Shakespeare" : "Shakespeare"
>year : 数字
>类型别名 :=> 数字
>1611 : 1611
>{ title: "Other", author: "Not Shakespeare", year: 2012 } : { title: 文字; author: 文字; year: 数字; }
>title : 文字
>类型别名 :=> 文字
>"Other" : "Other"
>author : 文字
>类型别名 :=> 文字
>"Not Shakespeare" : "Not Shakespeare"
>year : 数字
>类型别名 :=> 数字
>2012 : 2012

_.where(listOfPlays, { author: "Shakespeare", year: 1611 });
>_.where(listOfPlays, { author: "Shakespeare", year: 1611 }) : { title: 文字; author: 文字; year: 数字; }[]
>_.where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
>_ : Underscore.Static
>where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
>listOfPlays : { title: 文字; author: 文字; year: 数字; }[]
>{ author: "Shakespeare", year: 1611 } : { author: 文字; year: 数字; }
>author : 文字
>类型别名 :=> 文字
>"Shakespeare" : "Shakespeare"
>year : 数字
>类型别名 :=> 数字
>1611 : 1611

var odds = _.reject([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);
>odds : 数字[]
>_.reject([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0) : 数字[]
>_.reject : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T[]; }
>_ : Underscore.Static
>reject : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T[]; }
>[1, 2, 3, 4, 5, 6] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>5 : 5
>6 : 6
>(num) => num % 2 == 0 : (num: 数字) => 真假
>num : 数字
>类型别名 :=> 数字
>num % 2 == 0 : 真假
>类型别名 :=> 真假
>num % 2 : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>2 : 2
>0 : 0

_.all([true, 1, null, 'yes'], _.identity);
>_.all([true, 1, null, 'yes'], _.identity) : 任意
>类型别名 :=> 任意
>_.all : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>_ : Underscore.Static
>all : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>[true, 1, null, 'yes'] : (文字 | 数字 | 真假)[]
>true : 为真
>类型别名 :=> 为真
>1 : 1
>null : 空值
>类型别名 :=> 空值
>'yes' : "yes"
>_.identity : <T>(value: T) => T
>_ : Underscore.Static
>identity : <T>(value: T) => T

_.any([null, 0, 'yes', false]);
>_.any([null, 0, 'yes', false]) : 真假
>类型别名 :=> 真假
>_.any : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>_ : Underscore.Static
>any : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>[null, 0, 'yes', false] : (为假 | 0 | "yes")[]
>null : 空值
>类型别名 :=> 空值
>0 : 0
>'yes' : "yes"
>false : 为假
>类型别名 :=> 为假

_.contains([1, 2, 3], 3);
>_.contains([1, 2, 3], 3) : 真假
>类型别名 :=> 真假
>_.contains : { <T>(list: T[], value: T): 真假; <T>(list: Dictionary<T>, value: T): 真假; }
>_ : Underscore.Static
>contains : { <T>(list: T[], value: T): 真假; <T>(list: Dictionary<T>, value: T): 真假; }
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>3 : 3

_.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
>_.invoke([[5, 1, 7], [3, 2, 1]], 'sort') : 任意[]
>_.invoke : { (list: 任意[], methodName: 文字, ...args: 任意[]): 任意[]; (list: Dictionary<任意>, methodName: 文字, ...args: 任意[]): 任意[]; }
>_ : Underscore.Static
>invoke : { (list: 任意[], methodName: 文字, ...args: 任意[]): 任意[]; (list: Dictionary<任意>, methodName: 文字, ...args: 任意[]): 任意[]; }
>[[5, 1, 7], [3, 2, 1]] : 数字[][]
>[5, 1, 7] : 数字[]
>5 : 5
>1 : 1
>7 : 7
>[3, 2, 1] : 数字[]
>3 : 3
>2 : 2
>1 : 1
>'sort' : "sort"

var stooges = [{ name: 'moe', age: 40 }, { name: 'larry', age: 50 }, { name: 'curly', age: 60 }];
>stooges : { name: 文字; age: 数字; }[]
>[{ name: 'moe', age: 40 }, { name: 'larry', age: 50 }, { name: 'curly', age: 60 }] : { name: 文字; age: 数字; }[]
>{ name: 'moe', age: 40 } : { name: 文字; age: 数字; }
>name : 文字
>类型别名 :=> 文字
>'moe' : "moe"
>age : 数字
>类型别名 :=> 数字
>40 : 40
>{ name: 'larry', age: 50 } : { name: 文字; age: 数字; }
>name : 文字
>类型别名 :=> 文字
>'larry' : "larry"
>age : 数字
>类型别名 :=> 数字
>50 : 50
>{ name: 'curly', age: 60 } : { name: 文字; age: 数字; }
>name : 文字
>类型别名 :=> 文字
>'curly' : "curly"
>age : 数字
>类型别名 :=> 数字
>60 : 60

_.pluck(stooges, 'name');
>_.pluck(stooges, 'name') : 任意[]
>_.pluck : { (list: 任意[], propertyName: 文字): 任意[]; (list: Dictionary<任意>, propertyName: 文字): 任意[]; }
>_ : Underscore.Static
>pluck : { (list: 任意[], propertyName: 文字): 任意[]; (list: Dictionary<任意>, propertyName: 文字): 任意[]; }
>stooges : { name: 文字; age: 数字; }[]
>'name' : "name"

_.max(stooges, (stooge) => stooge.age);
>_.max(stooges, (stooge) => stooge.age) : { name: 文字; age: 数字; }
>_.max : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): T; }
>_ : Underscore.Static
>max : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): T; }
>stooges : { name: 文字; age: 数字; }[]
>(stooge) => stooge.age : (stooge: { name: 文字; age: 数字; }) => 数字
>stooge : { name: 文字; age: 数字; }
>stooge.age : 数字
>类型别名 :=> 数字
>stooge : { name: 文字; age: 数字; }
>age : 数字
>类型别名 :=> 数字

var numbers = [10, 5, 100, 2, 1000];
>numbers : 数字[]
>[10, 5, 100, 2, 1000] : 数字[]
>10 : 10
>5 : 5
>100 : 100
>2 : 2
>1000 : 1000

_.min(numbers);
>_.min(numbers) : 数字
>类型别名 :=> 数字
>_.min : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): T; }
>_ : Underscore.Static
>min : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): T; }
>numbers : 数字[]

_.sortBy([1, 2, 3, 4, 5, 6], (num) => Math.sin(num));
>_.sortBy([1, 2, 3, 4, 5, 6], (num) => Math.sin(num)) : 数字[]
>_.sortBy : { <T>(list: T[], iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: T[], propertyName: 文字): T[]; <T>(list: Dictionary<T>, propertyName: 文字): T[]; }
>_ : Underscore.Static
>sortBy : { <T>(list: T[], iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: T[], propertyName: 文字): T[]; <T>(list: Dictionary<T>, propertyName: 文字): T[]; }
>[1, 2, 3, 4, 5, 6] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>5 : 5
>6 : 6
>(num) => Math.sin(num) : (num: 数字) => 数字
>num : 数字
>类型别名 :=> 数字
>Math.sin(num) : 数字
>类型别名 :=> 数字
>Math.sin : (x: 数字) => 数字
>Math : Math
>sin : (x: 数字) => 数字
>num : 数字
>类型别名 :=> 数字


// not sure how this is typechecking at all.. Math.floor(e) is number not string..?
_([1.3, 2.1, 2.4]).groupBy((e: number, i?: number, list?: number[]) => Math.floor(e));
>_([1.3, 2.1, 2.4]).groupBy((e: number, i?: number, list?: number[]) => Math.floor(e)) : Dictionary<数字[]>
>_([1.3, 2.1, 2.4]).groupBy : { (iterator?: Iterator_<数字, 任意>, context?: 任意): Dictionary<数字[]>; (propertyName: 文字): Dictionary<数字[]>; }
>_([1.3, 2.1, 2.4]) : Underscore.WrappedArray<数字>
>_ : Underscore.Static
>[1.3, 2.1, 2.4] : 数字[]
>1.3 : 1.3
>2.1 : 2.1
>2.4 : 2.4
>groupBy : { (iterator?: Iterator_<数字, 任意>, context?: 任意): Dictionary<数字[]>; (propertyName: 文字): Dictionary<数字[]>; }
>(e: number, i?: number, list?: number[]) => Math.floor(e) : (e: 数字, i?: 数字, list?: 数字[]) => 数字
>e : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
>list : 数字[]
>Math.floor(e) : 数字
>类型别名 :=> 数字
>Math.floor : (x: 数字) => 数字
>Math : Math
>floor : (x: 数字) => 数字
>e : 数字
>类型别名 :=> 数字

_.groupBy([1.3, 2.1, 2.4], (num: number) => Math.floor(num));
>_.groupBy([1.3, 2.1, 2.4], (num: number) => Math.floor(num)) : Dictionary<数字[]>
>_.groupBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: T[], propertyName: 文字): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<T[]>; }
>_ : Underscore.Static
>groupBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: T[], propertyName: 文字): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<T[]>; }
>[1.3, 2.1, 2.4] : 数字[]
>1.3 : 1.3
>2.1 : 2.1
>2.4 : 2.4
>(num: number) => Math.floor(num) : (num: 数字) => 数字
>num : 数字
>类型别名 :=> 数字
>Math.floor(num) : 数字
>类型别名 :=> 数字
>Math.floor : (x: 数字) => 数字
>Math : Math
>floor : (x: 数字) => 数字
>num : 数字
>类型别名 :=> 数字

_.groupBy(['one', 'two', 'three'], 'length');
>_.groupBy(['one', 'two', 'three'], 'length') : Dictionary<文字[]>
>_.groupBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: T[], propertyName: 文字): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<T[]>; }
>_ : Underscore.Static
>groupBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: T[], propertyName: 文字): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<T[]>; }
>['one', 'two', 'three'] : 文字[]
>'one' : "one"
>'two' : "two"
>'three' : "three"
>'length' : "length"

_.countBy([1, 2, 3, 4, 5], (num) => num % 2 == 0 ? 'even' : 'odd');
>_.countBy([1, 2, 3, 4, 5], (num) => num % 2 == 0 ? 'even' : 'odd') : Dictionary<数字>
>_.countBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: T[], propertyName: 文字): Dictionary<数字>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<数字>; }
>_ : Underscore.Static
>countBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: T[], propertyName: 文字): Dictionary<数字>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<数字>; }
>[1, 2, 3, 4, 5] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>5 : 5
>(num) => num % 2 == 0 ? 'even' : 'odd' : (num: 数字) => "even" | "odd"
>num : 数字
>类型别名 :=> 数字
>num % 2 == 0 ? 'even' : 'odd' : "even" | "odd"
>num % 2 == 0 : 真假
>类型别名 :=> 真假
>num % 2 : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>2 : 2
>0 : 0
>'even' : "even"
>'odd' : "odd"

_.shuffle([1, 2, 3, 4, 5, 6]);
>_.shuffle([1, 2, 3, 4, 5, 6]) : 数字[]
>_.shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
>_ : Underscore.Static
>shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
>[1, 2, 3, 4, 5, 6] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>5 : 5
>6 : 6

// (function(){ return _.toArray(arguments).slice(1); })(1, 2, 3, 4);

_.size({ one: 1, two: 2, three: 3 });
>_.size({ one: 1, two: 2, three: 3 }) : 数字
>类型别名 :=> 数字
>_.size : { <T>(list: T[]): 数字; <T>(list: Dictionary<T>): 数字; }
>_ : Underscore.Static
>size : { <T>(list: T[]): 数字; <T>(list: Dictionary<T>): 数字; }
>{ one: 1, two: 2, three: 3 } : { one: 数字; two: 数字; three: 数字; }
>one : 数字
>类型别名 :=> 数字
>1 : 1
>two : 数字
>类型别名 :=> 数字
>2 : 2
>three : 数字
>类型别名 :=> 数字
>3 : 3

///////////////////////////////////////////////////////////////////////////////////////

_.first([5, 4, 3, 2, 1]);
>_.first([5, 4, 3, 2, 1]) : 数字
>类型别名 :=> 数字
>_.first : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>_ : Underscore.Static
>first : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>[5, 4, 3, 2, 1] : 数字[]
>5 : 5
>4 : 4
>3 : 3
>2 : 2
>1 : 1

_.initial([5, 4, 3, 2, 1]);
>_.initial([5, 4, 3, 2, 1]) : 数字
>类型别名 :=> 数字
>_.initial : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>_ : Underscore.Static
>initial : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>[5, 4, 3, 2, 1] : 数字[]
>5 : 5
>4 : 4
>3 : 3
>2 : 2
>1 : 1

_.last([5, 4, 3, 2, 1]);
>_.last([5, 4, 3, 2, 1]) : 数字
>类型别名 :=> 数字
>_.last : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>_ : Underscore.Static
>last : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>[5, 4, 3, 2, 1] : 数字[]
>5 : 5
>4 : 4
>3 : 3
>2 : 2
>1 : 1

_.rest([5, 4, 3, 2, 1]);
>_.rest([5, 4, 3, 2, 1]) : 数字[]
>_.rest : <T>(list: T[], index?: 数字) => T[]
>_ : Underscore.Static
>rest : <T>(list: T[], index?: 数字) => T[]
>[5, 4, 3, 2, 1] : 数字[]
>5 : 5
>4 : 4
>3 : 3
>2 : 2
>1 : 1

_.compact([0, 1, false, 2, '', 3]);
>_.compact([0, 1, false, 2, '', 3]) : (文字 | 数字 | 真假)[]
>_.compact : <T>(list: T[]) => T[]
>_ : Underscore.Static
>compact : <T>(list: T[]) => T[]
>[0, 1, false, 2, '', 3] : (为假 | 1 | 2 | 3 | 0 | "")[]
>0 : 0
>1 : 1
>false : 为假
>类型别名 :=> 为假
>2 : 2
>'' : ""
>3 : 3

_.flatten([1, 2, 3, 4]);
>_.flatten([1, 2, 3, 4]) : {}[]
>_.flatten : { <T>(list: T[][]): T[]; <T>(array: 任意[], shallow?: 真假): T[]; }
>_ : Underscore.Static
>flatten : { <T>(list: T[][]): T[]; <T>(array: 任意[], shallow?: 真假): T[]; }
>[1, 2, 3, 4] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4

_.flatten([1, [2]]);
>_.flatten([1, [2]]) : {}[]
>_.flatten : { <T>(list: T[][]): T[]; <T>(array: 任意[], shallow?: 真假): T[]; }
>_ : Underscore.Static
>flatten : { <T>(list: T[][]): T[]; <T>(array: 任意[], shallow?: 真假): T[]; }
>[1, [2]] : (数字 | 数字[])[]
>1 : 1
>[2] : 数字[]
>2 : 2

// typescript doesn't like the elements being different
_.flatten([1, [2], [3, [[4]]]]);
>_.flatten([1, [2], [3, [[4]]]]) : {}[]
>_.flatten : { <T>(list: T[][]): T[]; <T>(array: 任意[], shallow?: 真假): T[]; }
>_ : Underscore.Static
>flatten : { <T>(list: T[][]): T[]; <T>(array: 任意[], shallow?: 真假): T[]; }
>[1, [2], [3, [[4]]]] : (数字 | (数字 | 数字[][])[])[]
>1 : 1
>[2] : 数字[]
>2 : 2
>[3, [[4]]] : (数字 | 数字[][])[]
>3 : 3
>[[4]] : 数字[][]
>[4] : 数字[]
>4 : 4

_.flatten([1, [2], [3, [[4]]]], true);
>_.flatten([1, [2], [3, [[4]]]], true) : {}[]
>_.flatten : { <T>(list: T[][]): T[]; <T>(array: 任意[], shallow?: 真假): T[]; }
>_ : Underscore.Static
>flatten : { <T>(list: T[][]): T[]; <T>(array: 任意[], shallow?: 真假): T[]; }
>[1, [2], [3, [[4]]]] : (数字 | (数字 | 数字[][])[])[]
>1 : 1
>[2] : 数字[]
>2 : 2
>[3, [[4]]] : (数字 | 数字[][])[]
>3 : 3
>[[4]] : 数字[][]
>[4] : 数字[]
>4 : 4
>true : 为真
>类型别名 :=> 为真

_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
>_.without([1, 2, 1, 0, 3, 1, 4], 0, 1) : 数字[]
>_.without : <T>(list: T[], ...values: T[]) => T[]
>_ : Underscore.Static
>without : <T>(list: T[], ...values: T[]) => T[]
>[1, 2, 1, 0, 3, 1, 4] : 数字[]
>1 : 1
>2 : 2
>1 : 1
>0 : 0
>3 : 3
>1 : 1
>4 : 4
>0 : 0
>1 : 1

_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);
>_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]) : 数字[]
>_.union : <T>(...arrays: T[][]) => T[]
>_ : Underscore.Static
>union : <T>(...arrays: T[][]) => T[]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>[101, 2, 1, 10] : 数字[]
>101 : 101
>2 : 2
>1 : 1
>10 : 10
>[2, 1] : 数字[]
>2 : 2
>1 : 1

_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);
>_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]) : 数字[]
>_.intersection : <T>(...arrays: T[][]) => T[]
>_ : Underscore.Static
>intersection : <T>(...arrays: T[][]) => T[]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>[101, 2, 1, 10] : 数字[]
>101 : 101
>2 : 2
>1 : 1
>10 : 10
>[2, 1] : 数字[]
>2 : 2
>1 : 1

_.difference([1, 2, 3, 4, 5], [5, 2, 10]);
>_.difference([1, 2, 3, 4, 5], [5, 2, 10]) : 数字[]
>_.difference : <T>(list: T[], ...others: T[][]) => T[]
>_ : Underscore.Static
>difference : <T>(list: T[], ...others: T[][]) => T[]
>[1, 2, 3, 4, 5] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>5 : 5
>[5, 2, 10] : 数字[]
>5 : 5
>2 : 2
>10 : 10

_.uniq([1, 2, 1, 3, 1, 4]);
>_.uniq([1, 2, 1, 3, 1, 4]) : 数字[]
>_.uniq : { <T>(list: T[], isSorted?: 真假): T[]; <T, U>(list: T[], isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>_ : Underscore.Static
>uniq : { <T>(list: T[], isSorted?: 真假): T[]; <T, U>(list: T[], isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>[1, 2, 1, 3, 1, 4] : 数字[]
>1 : 1
>2 : 2
>1 : 1
>3 : 3
>1 : 1
>4 : 4

_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
>_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]) : Tuple3<文字, 数字, 真假>[]
>_.zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: 任意[][]): 任意[][]; }
>_ : Underscore.Static
>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: 任意[][]): 任意[][]; }
>['moe', 'larry', 'curly'] : 文字[]
>'moe' : "moe"
>'larry' : "larry"
>'curly' : "curly"
>[30, 40, 50] : 数字[]
>30 : 30
>40 : 40
>50 : 50
>[true, false, false] : 真假[]
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假

_.object(['moe', 'larry', 'curly'], [30, 40, 50]);
>_.object(['moe', 'larry', 'curly'], [30, 40, 50]) : 任意
>类型别名 :=> 任意
>_.object : { (list: 任意[][]): 任意; (keys: 文字[], values: 任意[]): 任意; }
>_ : Underscore.Static
>object : { (list: 任意[][]): 任意; (keys: 文字[], values: 任意[]): 任意; }
>['moe', 'larry', 'curly'] : 文字[]
>'moe' : "moe"
>'larry' : "larry"
>'curly' : "curly"
>[30, 40, 50] : 数字[]
>30 : 30
>40 : 40
>50 : 50

_.object([['moe', 30], ['larry', 40], ['curly', 50]]);
>_.object([['moe', 30], ['larry', 40], ['curly', 50]]) : 任意
>类型别名 :=> 任意
>_.object : { (list: 任意[][]): 任意; (keys: 文字[], values: 任意[]): 任意; }
>_ : Underscore.Static
>object : { (list: 任意[][]): 任意; (keys: 文字[], values: 任意[]): 任意; }
>[['moe', 30], ['larry', 40], ['curly', 50]] : (文字 | 数字)[][]
>['moe', 30] : (文字 | 数字)[]
>'moe' : "moe"
>30 : 30
>['larry', 40] : (文字 | 数字)[]
>'larry' : "larry"
>40 : 40
>['curly', 50] : (文字 | 数字)[]
>'curly' : "curly"
>50 : 50

_.indexOf([1, 2, 3], 2);
>_.indexOf([1, 2, 3], 2) : 数字
>类型别名 :=> 数字
>_.indexOf : <T>(list: T[], value: T, isSorted?: 真假) => 数字
>_ : Underscore.Static
>indexOf : <T>(list: T[], value: T, isSorted?: 真假) => 数字
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>2 : 2

_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
>_.lastIndexOf([1, 2, 3, 1, 2, 3], 2) : 数字
>类型别名 :=> 数字
>_.lastIndexOf : <T>(list: T[], value: T, fromIndex?: 数字) => 数字
>_ : Underscore.Static
>lastIndexOf : <T>(list: T[], value: T, fromIndex?: 数字) => 数字
>[1, 2, 3, 1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>1 : 1
>2 : 2
>3 : 3
>2 : 2

_.sortedIndex([10, 20, 30, 40, 50], 35);
>_.sortedIndex([10, 20, 30, 40, 50], 35) : 数字
>类型别名 :=> 数字
>_.sortedIndex : { <T>(list: T[], obj: T, propertyName: 文字): 数字; <T>(list: T[], obj: T, iterator?: Iterator_<T, 任意>, context?: 任意): 数字; }
>_ : Underscore.Static
>sortedIndex : { <T>(list: T[], obj: T, propertyName: 文字): 数字; <T>(list: T[], obj: T, iterator?: Iterator_<T, 任意>, context?: 任意): 数字; }
>[10, 20, 30, 40, 50] : 数字[]
>10 : 10
>20 : 20
>30 : 30
>40 : 40
>50 : 50
>35 : 35

_.range(10);
>_.range(10) : 数字[]
>_.range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>_ : Underscore.Static
>range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>10 : 10

_.range(1, 11);
>_.range(1, 11) : 数字[]
>_.range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>_ : Underscore.Static
>range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>1 : 1
>11 : 11

_.range(0, 30, 5);
>_.range(0, 30, 5) : 数字[]
>_.range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>_ : Underscore.Static
>range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>0 : 0
>30 : 30
>5 : 5

_.range(0, 30, 5);
>_.range(0, 30, 5) : 数字[]
>_.range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>_ : Underscore.Static
>range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>0 : 0
>30 : 30
>5 : 5

_.range(0);
>_.range(0) : 数字[]
>_.range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>_ : Underscore.Static
>range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>0 : 0

///////////////////////////////////////////////////////////////////////////////////////

var func = function (greeting) { return greeting + ': ' + this.name };
>func : (greeting: 任意) => 文字
>function (greeting) { return greeting + ': ' + this.name } : (greeting: 任意) => 文字
>greeting : 任意
>类型别名 :=> 任意
>greeting + ': ' + this.name : 文字
>类型别名 :=> 文字
>greeting + ': ' : 文字
>类型别名 :=> 文字
>greeting : 任意
>类型别名 :=> 任意
>': ' : ": "
>this.name : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>name : 任意
>类型别名 :=> 任意

// need a second var otherwise typescript thinks func signature is the above func type,
// instead of the newly returned _bind => func type.
var func2 = _.bind(func, { name: 'moe' }, 'hi');
>func2 : Function
>_.bind(func, { name: 'moe' }, 'hi') : Function
>_.bind : { <T 扩展 Function>(func: T, object: 任意): T; (func: Function, object: 任意, ...args: 任意[]): Function; }
>_ : Underscore.Static
>bind : { <T 扩展 Function>(func: T, object: 任意): T; (func: Function, object: 任意, ...args: 任意[]): Function; }
>func : (greeting: 任意) => 文字
>{ name: 'moe' } : { name: 文字; }
>name : 文字
>类型别名 :=> 文字
>'moe' : "moe"
>'hi' : "hi"

func2();
>func2() : 任意
>类型别名 :=> 任意
>func2 : Function

var buttonView = {
>buttonView : { label: 文字; onClick: () => 无值; onHover: () => 无值; }
>{    label: 'underscore',    onClick: function () { alert('clicked: ' + this.label); },    onHover: function () { alert('hovering: ' + this.label); }} : { label: 文字; onClick: () => 无值; onHover: () => 无值; }

    label: 'underscore',
>label : 文字
>类型别名 :=> 文字
>'underscore' : "underscore"

    onClick: function () { alert('clicked: ' + this.label); },
>onClick : () => 无值
>function () { alert('clicked: ' + this.label); } : () => 无值
>alert('clicked: ' + this.label) : 无值
>类型别名 :=> 无值
>alert : (x: 文字) => 无值
>'clicked: ' + this.label : 文字
>类型别名 :=> 文字
>'clicked: ' : "clicked: "
>this.label : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>label : 任意
>类型别名 :=> 任意

    onHover: function () { alert('hovering: ' + this.label); }
>onHover : () => 无值
>function () { alert('hovering: ' + this.label); } : () => 无值
>alert('hovering: ' + this.label) : 无值
>类型别名 :=> 无值
>alert : (x: 文字) => 无值
>'hovering: ' + this.label : 文字
>类型别名 :=> 文字
>'hovering: ' : "hovering: "
>this.label : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>label : 任意
>类型别名 :=> 任意

};
_.bindAll(buttonView);
>_.bindAll(buttonView) : { label: 文字; onClick: () => 无值; onHover: () => 无值; }
>_.bindAll : <T>(object: T, ...methodNames: 文字[]) => T
>_ : Underscore.Static
>bindAll : <T>(object: T, ...methodNames: 文字[]) => T
>buttonView : { label: 文字; onClick: () => 无值; onHover: () => 无值; }

$('#underscore_button').bind('click', buttonView.onClick);
>$('#underscore_button').bind('click', buttonView.onClick) : 任意
>类型别名 :=> 任意
>$('#underscore_button').bind : 任意
>类型别名 :=> 任意
>$('#underscore_button') : 任意
>类型别名 :=> 任意
>$ : 任意
>类型别名 :=> 任意
>'#underscore_button' : "#underscore_button"
>bind : 任意
>类型别名 :=> 任意
>'click' : "click"
>buttonView.onClick : () => 无值
>buttonView : { label: 文字; onClick: () => 无值; onHover: () => 无值; }
>onClick : () => 无值

var fibonacci = _.memoize(function (n) {
>fibonacci : (n: 任意) => 任意
>_.memoize(function (n) {    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);}) : (n: 任意) => 任意
>_.memoize : <T 扩展 Function>(func: T, hashFunction?: Function) => T
>_ : Underscore.Static
>memoize : <T 扩展 Function>(func: T, hashFunction?: Function) => T
>function (n) {    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);} : (n: 任意) => 任意
>n : 任意
>类型别名 :=> 任意

    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
>n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2) : 任意
>类型别名 :=> 任意
>n < 2 : 真假
>类型别名 :=> 真假
>n : 任意
>类型别名 :=> 任意
>2 : 2
>n : 任意
>类型别名 :=> 任意
>fibonacci(n - 1) + fibonacci(n - 2) : 任意
>类型别名 :=> 任意
>fibonacci(n - 1) : 任意
>类型别名 :=> 任意
>fibonacci : (n: 任意) => 任意
>n - 1 : 数字
>类型别名 :=> 数字
>n : 任意
>类型别名 :=> 任意
>1 : 1
>fibonacci(n - 2) : 任意
>类型别名 :=> 任意
>fibonacci : (n: 任意) => 任意
>n - 2 : 数字
>类型别名 :=> 数字
>n : 任意
>类型别名 :=> 任意
>2 : 2

});

var log = _.bind((message?: string, ...rest: string[]) => { }, Date);
>log : (message?: 文字, ...rest: 文字[]) => 无值
>_.bind((message?: string, ...rest: string[]) => { }, Date) : (message?: 文字, ...rest: 文字[]) => 无值
>_.bind : { <T 扩展 Function>(func: T, object: 任意): T; (func: Function, object: 任意, ...args: 任意[]): Function; }
>_ : Underscore.Static
>bind : { <T 扩展 Function>(func: T, object: 任意): T; (func: Function, object: 任意, ...args: 任意[]): Function; }
>(message?: string, ...rest: string[]) => { } : (message?: 文字, ...rest: 文字[]) => 无值
>message : 文字
>类型别名 :=> 文字
>rest : 文字[]
>Date : DateConstructor

_.delay(log, 1000, 'logged later');
>_.delay(log, 1000, 'logged later') : 数字
>类型别名 :=> 数字
>_.delay : (func: Function, wait: 数字, ...args: 任意[]) => 数字
>_ : Underscore.Static
>delay : (func: Function, wait: 数字, ...args: 任意[]) => 数字
>log : (message?: 文字, ...rest: 文字[]) => 无值
>1000 : 1000
>'logged later' : "logged later"

_.defer(function () { alert('deferred'); });
>_.defer(function () { alert('deferred'); }) : 数字
>类型别名 :=> 数字
>_.defer : (func: Function, ...args: 任意[]) => 数字
>_ : Underscore.Static
>defer : (func: Function, ...args: 任意[]) => 数字
>function () { alert('deferred'); } : () => 无值
>alert('deferred') : 无值
>类型别名 :=> 无值
>alert : (x: 文字) => 无值
>'deferred' : "deferred"

var updatePosition = () => alert('updating position...');
>updatePosition : () => 无值
>() => alert('updating position...') : () => 无值
>alert('updating position...') : 无值
>类型别名 :=> 无值
>alert : (x: 文字) => 无值
>'updating position...' : "updating position..."

var throttled = _.throttle(updatePosition, 100);
>throttled : () => 无值
>_.throttle(updatePosition, 100) : () => 无值
>_.throttle : <T 扩展 Function>(func: T, wait: 数字) => T
>_ : Underscore.Static
>throttle : <T 扩展 Function>(func: T, wait: 数字) => T
>updatePosition : () => 无值
>100 : 100

$(null).scroll(throttled);
>$(null).scroll(throttled) : 任意
>类型别名 :=> 任意
>$(null).scroll : 任意
>类型别名 :=> 任意
>$(null) : 任意
>类型别名 :=> 任意
>$ : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>scroll : 任意
>类型别名 :=> 任意
>throttled : () => 无值

var calculateLayout = () => alert('calculating layout...');
>calculateLayout : () => 无值
>() => alert('calculating layout...') : () => 无值
>alert('calculating layout...') : 无值
>类型别名 :=> 无值
>alert : (x: 文字) => 无值
>'calculating layout...' : "calculating layout..."

var lazyLayout = _.debounce(calculateLayout, 300);
>lazyLayout : () => 无值
>_.debounce(calculateLayout, 300) : () => 无值
>_.debounce : <T 扩展 Function>(func: T, wait: 数字, immediate?: 真假) => T
>_ : Underscore.Static
>debounce : <T 扩展 Function>(func: T, wait: 数字, immediate?: 真假) => T
>calculateLayout : () => 无值
>300 : 300

$(null).resize(lazyLayout);
>$(null).resize(lazyLayout) : 任意
>类型别名 :=> 任意
>$(null).resize : 任意
>类型别名 :=> 任意
>$(null) : 任意
>类型别名 :=> 任意
>$ : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>resize : 任意
>类型别名 :=> 任意
>lazyLayout : () => 无值

var createApplication = () => alert('creating application...');
>createApplication : () => 无值
>() => alert('creating application...') : () => 无值
>alert('creating application...') : 无值
>类型别名 :=> 无值
>alert : (x: 文字) => 无值
>'creating application...' : "creating application..."

var initialize = _.once(createApplication);
>initialize : () => 无值
>_.once(createApplication) : () => 无值
>_.once : <T 扩展 Function>(func: T) => T
>_ : Underscore.Static
>once : <T 扩展 Function>(func: T) => T
>createApplication : () => 无值

initialize();
>initialize() : 无值
>类型别名 :=> 无值
>initialize : () => 无值

initialize();
>initialize() : 无值
>类型别名 :=> 无值
>initialize : () => 无值

var notes: any[];
>notes : 任意[]

var render = () => alert("rendering...");
>render : () => 无值
>() => alert("rendering...") : () => 无值
>alert("rendering...") : 无值
>类型别名 :=> 无值
>alert : (x: 文字) => 无值
>"rendering..." : "rendering..."

var renderNotes = _.after(notes.length, render);
>renderNotes : () => 无值
>_.after(notes.length, render) : () => 无值
>_.after : <T 扩展 Function>(count: 数字, func: T) => T
>_ : Underscore.Static
>after : <T 扩展 Function>(count: 数字, func: T) => T
>notes.length : 数字
>类型别名 :=> 数字
>notes : 任意[]
>length : 数字
>类型别名 :=> 数字
>render : () => 无值

_.each(notes, (note) => note.asyncSave({ success: renderNotes }));
>_.each(notes, (note) => note.asyncSave({ success: renderNotes })) : 无值
>类型别名 :=> 无值
>_.each : { <T>(list: T[], iterator: Iterator_<T, 无值>, context?: 任意): 无值; <T>(list: Dictionary<T>, iterator: Iterator_<T, 无值>, context?: 任意): 无值; }
>_ : Underscore.Static
>each : { <T>(list: T[], iterator: Iterator_<T, 无值>, context?: 任意): 无值; <T>(list: Dictionary<T>, iterator: Iterator_<T, 无值>, context?: 任意): 无值; }
>notes : 任意[]
>(note) => note.asyncSave({ success: renderNotes }) : (note: 任意) => 任意
>note : 任意
>类型别名 :=> 任意
>note.asyncSave({ success: renderNotes }) : 任意
>类型别名 :=> 任意
>note.asyncSave : 任意
>类型别名 :=> 任意
>note : 任意
>类型别名 :=> 任意
>asyncSave : 任意
>类型别名 :=> 任意
>{ success: renderNotes } : { success: () => 无值; }
>success : () => 无值
>renderNotes : () => 无值

var hello = function (name) { return "hello: " + name; };
>hello : (name: 任意) => 文字
>function (name) { return "hello: " + name; } : (name: 任意) => 文字
>name : 任意
>类型别名 :=> 任意
>"hello: " + name : 文字
>类型别名 :=> 文字
>"hello: " : "hello: "
>name : 任意
>类型别名 :=> 任意

hello = _.wrap(hello, (func, arg) => { return "before, " + func(arg) + ", after"; });
>hello = _.wrap(hello, (func, arg) => { return "before, " + func(arg) + ", after"; }) : (name: 任意) => 文字
>hello : (name: 任意) => 文字
>_.wrap(hello, (func, arg) => { return "before, " + func(arg) + ", after"; }) : (name: 任意) => 文字
>_.wrap : <T 扩展 Function>(func: T, wrapper: (func: T, ...args: 任意[]) => 任意) => T
>_ : Underscore.Static
>wrap : <T 扩展 Function>(func: T, wrapper: (func: T, ...args: 任意[]) => 任意) => T
>hello : (name: 任意) => 文字
>(func, arg) => { return "before, " + func(arg) + ", after"; } : (func: (name: 任意) => 文字, arg: 任意) => 文字
>func : (name: 任意) => 文字
>arg : 任意
>类型别名 :=> 任意
>"before, " + func(arg) + ", after" : 文字
>类型别名 :=> 文字
>"before, " + func(arg) : 文字
>类型别名 :=> 文字
>"before, " : "before, "
>func(arg) : 文字
>类型别名 :=> 文字
>func : (name: 任意) => 文字
>arg : 任意
>类型别名 :=> 任意
>", after" : ", after"

hello("moe");
>hello("moe") : 文字
>类型别名 :=> 文字
>hello : (name: 任意) => 文字
>"moe" : "moe"

var greet = function (name) { return "hi: " + name; };
>greet : (name: 任意) => 文字
>function (name) { return "hi: " + name; } : (name: 任意) => 文字
>name : 任意
>类型别名 :=> 任意
>"hi: " + name : 文字
>类型别名 :=> 文字
>"hi: " : "hi: "
>name : 任意
>类型别名 :=> 任意

var exclaim = function (statement) { return statement + "!"; };
>exclaim : (statement: 任意) => 文字
>function (statement) { return statement + "!"; } : (statement: 任意) => 文字
>statement : 任意
>类型别名 :=> 任意
>statement + "!" : 文字
>类型别名 :=> 文字
>statement : 任意
>类型别名 :=> 任意
>"!" : "!"

var welcome = _.compose(exclaim, greet);
>welcome : Function
>_.compose(exclaim, greet) : Function
>_.compose : (...funcs: Function[]) => Function
>_ : Underscore.Static
>compose : (...funcs: Function[]) => Function
>exclaim : (statement: 任意) => 文字
>greet : (name: 任意) => 文字

welcome('moe');
>welcome('moe') : 任意
>类型别名 :=> 任意
>welcome : Function
>'moe' : "moe"

///////////////////////////////////////////////////////////////////////////////////////

_.keys({ one: 1, two: 2, three: 3 });
>_.keys({ one: 1, two: 2, three: 3 }) : 文字[]
>_.keys : (object: 任意) => 文字[]
>_ : Underscore.Static
>keys : (object: 任意) => 文字[]
>{ one: 1, two: 2, three: 3 } : { one: 数字; two: 数字; three: 数字; }
>one : 数字
>类型别名 :=> 数字
>1 : 1
>two : 数字
>类型别名 :=> 数字
>2 : 2
>three : 数字
>类型别名 :=> 数字
>3 : 3

_.values({ one: 1, two: 2, three: 3 });
>_.values({ one: 1, two: 2, three: 3 }) : 任意[]
>_.values : (object: 任意) => 任意[]
>_ : Underscore.Static
>values : (object: 任意) => 任意[]
>{ one: 1, two: 2, three: 3 } : { one: 数字; two: 数字; three: 数字; }
>one : 数字
>类型别名 :=> 数字
>1 : 1
>two : 数字
>类型别名 :=> 数字
>2 : 2
>three : 数字
>类型别名 :=> 数字
>3 : 3

_.pairs({ one: 1, two: 2, three: 3 });
>_.pairs({ one: 1, two: 2, three: 3 }) : 任意[][]
>_.pairs : (object: 任意) => 任意[][]
>_ : Underscore.Static
>pairs : (object: 任意) => 任意[][]
>{ one: 1, two: 2, three: 3 } : { one: 数字; two: 数字; three: 数字; }
>one : 数字
>类型别名 :=> 数字
>1 : 1
>two : 数字
>类型别名 :=> 数字
>2 : 2
>three : 数字
>类型别名 :=> 数字
>3 : 3

_.invert({ Moe: "Moses", Larry: "Louis", Curly: "Jerome" });
>_.invert({ Moe: "Moses", Larry: "Louis", Curly: "Jerome" }) : 任意
>类型别名 :=> 任意
>_.invert : (object: 任意) => 任意
>_ : Underscore.Static
>invert : (object: 任意) => 任意
>{ Moe: "Moses", Larry: "Louis", Curly: "Jerome" } : { Moe: 文字; Larry: 文字; Curly: 文字; }
>Moe : 文字
>类型别名 :=> 文字
>"Moses" : "Moses"
>Larry : 文字
>类型别名 :=> 文字
>"Louis" : "Louis"
>Curly : 文字
>类型别名 :=> 文字
>"Jerome" : "Jerome"

_.functions(_);
>_.functions(_) : 文字[]
>_.functions : (object: 任意) => 文字[]
>_ : Underscore.Static
>functions : (object: 任意) => 文字[]
>_ : Underscore.Static

_.extend({ name: 'moe' }, { age: 50 });
>_.extend({ name: 'moe' }, { age: 50 }) : { name: 文字; }
>_.extend : <T>(destination: T, ...sources: 任意[]) => T
>_ : Underscore.Static
>extend : <T>(destination: T, ...sources: 任意[]) => T
>{ name: 'moe' } : { name: 文字; }
>name : 文字
>类型别名 :=> 文字
>'moe' : "moe"
>{ age: 50 } : { age: 数字; }
>age : 数字
>类型别名 :=> 数字
>50 : 50

_.pick({ name: 'moe', age: 50, userid: 'moe1' }, 'name', 'age');
>_.pick({ name: 'moe', age: 50, userid: 'moe1' }, 'name', 'age') : { name: 文字; age: 数字; userid: 文字; }
>_.pick : <T>(object: T, ...keys: 文字[]) => T
>_ : Underscore.Static
>pick : <T>(object: T, ...keys: 文字[]) => T
>{ name: 'moe', age: 50, userid: 'moe1' } : { name: 文字; age: 数字; userid: 文字; }
>name : 文字
>类型别名 :=> 文字
>'moe' : "moe"
>age : 数字
>类型别名 :=> 数字
>50 : 50
>userid : 文字
>类型别名 :=> 文字
>'moe1' : "moe1"
>'name' : "name"
>'age' : "age"

_.omit({ name: 'moe', age: 50, userid: 'moe1' }, 'userid');
>_.omit({ name: 'moe', age: 50, userid: 'moe1' }, 'userid') : { name: 文字; age: 数字; userid: 文字; }
>_.omit : <T>(object: T, ...keys: 文字[]) => T
>_ : Underscore.Static
>omit : <T>(object: T, ...keys: 文字[]) => T
>{ name: 'moe', age: 50, userid: 'moe1' } : { name: 文字; age: 数字; userid: 文字; }
>name : 文字
>类型别名 :=> 文字
>'moe' : "moe"
>age : 数字
>类型别名 :=> 数字
>50 : 50
>userid : 文字
>类型别名 :=> 文字
>'moe1' : "moe1"
>'userid' : "userid"

var iceCream = { flavor: "chocolate" };
>iceCream : { flavor: 文字; }
>{ flavor: "chocolate" } : { flavor: 文字; }
>flavor : 文字
>类型别名 :=> 文字
>"chocolate" : "chocolate"

_.defaults(iceCream, { flavor: "vanilla", sprinkles: "lots" });
>_.defaults(iceCream, { flavor: "vanilla", sprinkles: "lots" }) : { flavor: 文字; }
>_.defaults : <T>(object: T, ...defaults: 任意[]) => T
>_ : Underscore.Static
>defaults : <T>(object: T, ...defaults: 任意[]) => T
>iceCream : { flavor: 文字; }
>{ flavor: "vanilla", sprinkles: "lots" } : { flavor: 文字; sprinkles: 文字; }
>flavor : 文字
>类型别名 :=> 文字
>"vanilla" : "vanilla"
>sprinkles : 文字
>类型别名 :=> 文字
>"lots" : "lots"

_.clone({ name: 'moe' });
>_.clone({ name: 'moe' }) : { name: 文字; }
>_.clone : <T>(object: T) => T
>_ : Underscore.Static
>clone : <T>(object: T) => T
>{ name: 'moe' } : { name: 文字; }
>name : 文字
>类型别名 :=> 文字
>'moe' : "moe"

_.chain([1, 2, 3, 200])
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num })    .value() : 数字[]
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num })    .value : () => 数字[]
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num }) : Underscore.ChainedArray<数字>
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map : <U>(iterator: Iterator_<数字, U>, context?: 任意) => Underscore.ChainedArray<U>
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert) : Underscore.ChainedArray<数字>
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap : (interceptor: (object: 数字[]) => 无值) => Underscore.ChainedArray<数字>
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; }) : Underscore.ChainedArray<数字>
>_.chain([1, 2, 3, 200])    .filter : (iterator: Iterator_<数字, 真假>, context?: 任意) => Underscore.ChainedArray<数字>
>_.chain([1, 2, 3, 200]) : Underscore.ChainedArray<数字>
>_.chain : { <T>(list: T[]): Underscore.ChainedArray<T>; <T>(list: Dictionary<T>): Underscore.ChainedDictionary<T>; <T>(obj: T): Underscore.ChainedObject<T>; }
>_ : Underscore.Static
>chain : { <T>(list: T[]): Underscore.ChainedArray<T>; <T>(list: Dictionary<T>): Underscore.ChainedDictionary<T>; <T>(obj: T): Underscore.ChainedObject<T>; }
>[1, 2, 3, 200] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>200 : 200

    .filter(function (num) { return num % 2 == 0; })
>filter : (iterator: Iterator_<数字, 真假>, context?: 任意) => Underscore.ChainedArray<数字>
>function (num) { return num % 2 == 0; } : (num: 数字) => 真假
>num : 数字
>类型别名 :=> 数字
>num % 2 == 0 : 真假
>类型别名 :=> 真假
>num % 2 : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>2 : 2
>0 : 0

    .tap(<any>alert)
>tap : (interceptor: (object: 数字[]) => 无值) => Underscore.ChainedArray<数字>
><any>alert : 任意
>类型别名 :=> 任意
>alert : (x: 文字) => 无值

    .map(function (num) { return num * num })
>map : <U>(iterator: Iterator_<数字, U>, context?: 任意) => Underscore.ChainedArray<U>
>function (num) { return num * num } : (num: 数字) => 数字
>num : 数字
>类型别名 :=> 数字
>num * num : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字

    .value();
>value : () => 数字[]

_.has({ a: 1, b: 2, c: 3 }, "b");
>_.has({ a: 1, b: 2, c: 3 }, "b") : 真假
>类型别名 :=> 真假
>_.has : (object: 任意, key: 文字) => 真假
>_ : Underscore.Static
>has : (object: 任意, key: 文字) => 真假
>{ a: 1, b: 2, c: 3 } : { a: 数字; b: 数字; c: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 数字
>类型别名 :=> 数字
>2 : 2
>c : 数字
>类型别名 :=> 数字
>3 : 3
>"b" : "b"

var moe = { name: 'moe', luckyNumbers: [13, 27, 34] };
>moe : { name: 文字; luckyNumbers: 数字[]; }
>{ name: 'moe', luckyNumbers: [13, 27, 34] } : { name: 文字; luckyNumbers: 数字[]; }
>name : 文字
>类型别名 :=> 文字
>'moe' : "moe"
>luckyNumbers : 数字[]
>[13, 27, 34] : 数字[]
>13 : 13
>27 : 27
>34 : 34

var clone = { name: 'moe', luckyNumbers: [13, 27, 34] };
>clone : { name: 文字; luckyNumbers: 数字[]; }
>{ name: 'moe', luckyNumbers: [13, 27, 34] } : { name: 文字; luckyNumbers: 数字[]; }
>name : 文字
>类型别名 :=> 文字
>'moe' : "moe"
>luckyNumbers : 数字[]
>[13, 27, 34] : 数字[]
>13 : 13
>27 : 27
>34 : 34

moe == clone;
>moe == clone : 真假
>类型别名 :=> 真假
>moe : { name: 文字; luckyNumbers: 数字[]; }
>clone : { name: 文字; luckyNumbers: 数字[]; }

_.isEqual(moe, clone);
>_.isEqual(moe, clone) : 真假
>类型别名 :=> 真假
>_.isEqual : <T>(object: T, other: T) => 真假
>_ : Underscore.Static
>isEqual : <T>(object: T, other: T) => 真假
>moe : { name: 文字; luckyNumbers: 数字[]; }
>clone : { name: 文字; luckyNumbers: 数字[]; }

_.isEmpty([1, 2, 3]);
>_.isEmpty([1, 2, 3]) : 真假
>类型别名 :=> 真假
>_.isEmpty : (object: 任意) => 真假
>_ : Underscore.Static
>isEmpty : (object: 任意) => 真假
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

_.isEmpty({});
>_.isEmpty({}) : 真假
>类型别名 :=> 真假
>_.isEmpty : (object: 任意) => 真假
>_ : Underscore.Static
>isEmpty : (object: 任意) => 真假
>{} : {}

_.isElement($('body')[0]);
>_.isElement($('body')[0]) : 真假
>类型别名 :=> 真假
>_.isElement : (object: 任意) => 真假
>_ : Underscore.Static
>isElement : (object: 任意) => 真假
>$('body')[0] : 任意
>类型别名 :=> 任意
>$('body') : 任意
>类型别名 :=> 任意
>$ : 任意
>类型别名 :=> 任意
>'body' : "body"
>0 : 0

(function () { return _.isArray(arguments); })();
>(function () { return _.isArray(arguments); })() : 真假
>类型别名 :=> 真假
>(function () { return _.isArray(arguments); }) : () => 真假
>function () { return _.isArray(arguments); } : () => 真假
>_.isArray(arguments) : 真假
>类型别名 :=> 真假
>_.isArray : (object: 任意) => 真假
>_ : Underscore.Static
>isArray : (object: 任意) => 真假
>arguments : IArguments

_.isArray([1, 2, 3]);
>_.isArray([1, 2, 3]) : 真假
>类型别名 :=> 真假
>_.isArray : (object: 任意) => 真假
>_ : Underscore.Static
>isArray : (object: 任意) => 真假
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

_.isObject({});
>_.isObject({}) : 真假
>类型别名 :=> 真假
>_.isObject : (value: 任意) => 真假
>_ : Underscore.Static
>isObject : (value: 任意) => 真假
>{} : {}

_.isObject(1);
>_.isObject(1) : 真假
>类型别名 :=> 真假
>_.isObject : (value: 任意) => 真假
>_ : Underscore.Static
>isObject : (value: 任意) => 真假
>1 : 1


// (() => { return _.isArguments(arguments); })(1, 2, 3);
_.isArguments([1, 2, 3]);
>_.isArguments([1, 2, 3]) : 真假
>类型别名 :=> 真假
>_.isArguments : (object: 任意) => 真假
>_ : Underscore.Static
>isArguments : (object: 任意) => 真假
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

_.isFunction(alert);
>_.isFunction(alert) : 真假
>类型别名 :=> 真假
>_.isFunction : (object: 任意) => 真假
>_ : Underscore.Static
>isFunction : (object: 任意) => 真假
>alert : (x: 文字) => 无值

_.isString("moe");
>_.isString("moe") : 真假
>类型别名 :=> 真假
>_.isString : (object: 任意) => 真假
>_ : Underscore.Static
>isString : (object: 任意) => 真假
>"moe" : "moe"

_.isNumber(8.4 * 5);
>_.isNumber(8.4 * 5) : 真假
>类型别名 :=> 真假
>_.isNumber : (object: 任意) => 真假
>_ : Underscore.Static
>isNumber : (object: 任意) => 真假
>8.4 * 5 : 数字
>类型别名 :=> 数字
>8.4 : 8.4
>5 : 5

_.isFinite(-101);
>_.isFinite(-101) : 真假
>类型别名 :=> 真假
>_.isFinite : (object: 任意) => 真假
>_ : Underscore.Static
>isFinite : (object: 任意) => 真假
>-101 : -101
>101 : 101

_.isFinite(-Infinity);
>_.isFinite(-Infinity) : 真假
>类型别名 :=> 真假
>_.isFinite : (object: 任意) => 真假
>_ : Underscore.Static
>isFinite : (object: 任意) => 真假
>-Infinity : 数字
>类型别名 :=> 数字
>Infinity : 数字
>类型别名 :=> 数字

_.isBoolean(null);
>_.isBoolean(null) : 真假
>类型别名 :=> 真假
>_.isBoolean : (object: 任意) => 真假
>_ : Underscore.Static
>isBoolean : (object: 任意) => 真假
>null : 空值
>类型别名 :=> 空值

_.isDate(new Date());
>_.isDate(new Date()) : 真假
>类型别名 :=> 真假
>_.isDate : (object: 任意) => 真假
>_ : Underscore.Static
>isDate : (object: 任意) => 真假
>new Date() : Date
>Date : DateConstructor

_.isRegExp(/moe/);
>_.isRegExp(/moe/) : 真假
>类型别名 :=> 真假
>_.isRegExp : (object: 任意) => 真假
>_ : Underscore.Static
>isRegExp : (object: 任意) => 真假
>/moe/ : RegExp

_.isNaN(NaN);
>_.isNaN(NaN) : 真假
>类型别名 :=> 真假
>_.isNaN : (object: 任意) => 真假
>_ : Underscore.Static
>isNaN : (object: 任意) => 真假
>NaN : 数字
>类型别名 :=> 数字

isNaN(undefined);
>isNaN(undefined) : 真假
>类型别名 :=> 真假
>isNaN : (number: 数字) => 真假
>undefined : 未定
>类型别名 :=> 未定

_.isNaN(undefined);
>_.isNaN(undefined) : 真假
>类型别名 :=> 真假
>_.isNaN : (object: 任意) => 真假
>_ : Underscore.Static
>isNaN : (object: 任意) => 真假
>undefined : 未定
>类型别名 :=> 未定

_.isNull(null);
>_.isNull(null) : 真假
>类型别名 :=> 真假
>_.isNull : (object: 任意) => 真假
>_ : Underscore.Static
>isNull : (object: 任意) => 真假
>null : 空值
>类型别名 :=> 空值

_.isNull(undefined);
>_.isNull(undefined) : 真假
>类型别名 :=> 真假
>_.isNull : (object: 任意) => 真假
>_ : Underscore.Static
>isNull : (object: 任意) => 真假
>undefined : 未定
>类型别名 :=> 未定

_.isUndefined((<any>null).missingVariable);
>_.isUndefined((<any>null).missingVariable) : 真假
>类型别名 :=> 真假
>_.isUndefined : (value: 任意) => 真假
>_ : Underscore.Static
>isUndefined : (value: 任意) => 真假
>(<any>null).missingVariable : 任意
>类型别名 :=> 任意
>(<any>null) : 任意
>类型别名 :=> 任意
><any>null : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>missingVariable : 任意
>类型别名 :=> 任意

///////////////////////////////////////////////////////////////////////////////////////

var underscore = _.noConflict();
>underscore : Underscore.Static
>_.noConflict() : Underscore.Static
>_.noConflict : () => Underscore.Static
>_ : Underscore.Static
>noConflict : () => Underscore.Static

var moe2 = { name: 'moe' };
>moe2 : { name: 文字; }
>{ name: 'moe' } : { name: 文字; }
>name : 文字
>类型别名 :=> 文字
>'moe' : "moe"

moe2 === _.identity(moe);
>moe2 === _.identity(moe) : 真假
>类型别名 :=> 真假
>moe2 : { name: 文字; }
>_.identity(moe) : { name: 文字; luckyNumbers: 数字[]; }
>_.identity : <T>(value: T) => T
>_ : Underscore.Static
>identity : <T>(value: T) => T
>moe : { name: 文字; luckyNumbers: 数字[]; }

var genie;
>genie : 任意
>类型别名 :=> 任意

_.times(3, function (n) { genie.grantWishNumber(n); });
>_.times(3, function (n) { genie.grantWishNumber(n); }) : 无值[]
>_.times : <U>(n: 数字, iterator: Iterator_<数字, U>, context?: 任意) => U[]
>_ : Underscore.Static
>times : <U>(n: 数字, iterator: Iterator_<数字, U>, context?: 任意) => U[]
>3 : 3
>function (n) { genie.grantWishNumber(n); } : (n: 数字) => 无值
>n : 数字
>类型别名 :=> 数字
>genie.grantWishNumber(n) : 任意
>类型别名 :=> 任意
>genie.grantWishNumber : 任意
>类型别名 :=> 任意
>genie : 任意
>类型别名 :=> 任意
>grantWishNumber : 任意
>类型别名 :=> 任意
>n : 数字
>类型别名 :=> 数字

_.random(0, 100);
>_.random(0, 100) : 数字
>类型别名 :=> 数字
>_.random : { (max: 数字): 数字; (min: 数字, max: 数字): 数字; }
>_ : Underscore.Static
>random : { (max: 数字): 数字; (min: 数字, max: 数字): 数字; }
>0 : 0
>100 : 100

_.mixin({
>_.mixin({    capitalize: function (string) {        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();    }}) : 无值
>类型别名 :=> 无值
>_.mixin : (object: 任意) => 无值
>_ : Underscore.Static
>mixin : (object: 任意) => 无值
>{    capitalize: function (string) {        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();    }} : { capitalize: (string: 任意) => 任意; }

    capitalize: function (string) {
>capitalize : (string: 任意) => 任意
>function (string) {        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();    } : (string: 任意) => 任意
>string : 任意
>类型别名 :=> 任意

        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();
>string.charAt(0).toUpperCase() + string.substring(1).toLowerCase() : 任意
>类型别名 :=> 任意
>string.charAt(0).toUpperCase() : 任意
>类型别名 :=> 任意
>string.charAt(0).toUpperCase : 任意
>类型别名 :=> 任意
>string.charAt(0) : 任意
>类型别名 :=> 任意
>string.charAt : 任意
>类型别名 :=> 任意
>string : 任意
>类型别名 :=> 任意
>charAt : 任意
>类型别名 :=> 任意
>0 : 0
>toUpperCase : 任意
>类型别名 :=> 任意
>string.substring(1).toLowerCase() : 任意
>类型别名 :=> 任意
>string.substring(1).toLowerCase : 任意
>类型别名 :=> 任意
>string.substring(1) : 任意
>类型别名 :=> 任意
>string.substring : 任意
>类型别名 :=> 任意
>string : 任意
>类型别名 :=> 任意
>substring : 任意
>类型别名 :=> 任意
>1 : 1
>toLowerCase : 任意
>类型别名 :=> 任意
    }
});
(<any>_("fabio")).capitalize();
>(<any>_("fabio")).capitalize() : 任意
>类型别名 :=> 任意
>(<any>_("fabio")).capitalize : 任意
>类型别名 :=> 任意
>(<any>_("fabio")) : 任意
>类型别名 :=> 任意
><any>_("fabio") : 任意
>类型别名 :=> 任意
>_("fabio") : Underscore.WrappedObject<文字>
>_ : Underscore.Static
>"fabio" : "fabio"
>capitalize : 任意
>类型别名 :=> 任意

_.uniqueId('contact_');
>_.uniqueId('contact_') : 文字
>类型别名 :=> 文字
>_.uniqueId : { (): 数字; (prefix: 文字): 文字; }
>_ : Underscore.Static
>uniqueId : { (): 数字; (prefix: 文字): 文字; }
>'contact_' : "contact_"

_.escape('Curly, Larry & Moe');
>_.escape('Curly, Larry & Moe') : 文字
>类型别名 :=> 文字
>_.escape : (s: 文字) => 文字
>_ : Underscore.Static
>escape : (s: 文字) => 文字
>'Curly, Larry & Moe' : "Curly, Larry & Moe"

var object = { cheese: 'crumpets', stuff: function () { return 'nonsense'; } };
>object : { cheese: 文字; stuff: () => 文字; }
>{ cheese: 'crumpets', stuff: function () { return 'nonsense'; } } : { cheese: 文字; stuff: () => 文字; }
>cheese : 文字
>类型别名 :=> 文字
>'crumpets' : "crumpets"
>stuff : () => 文字
>function () { return 'nonsense'; } : () => 文字
>'nonsense' : "nonsense"

_.result(object, 'cheese');
>_.result(object, 'cheese') : 任意
>类型别名 :=> 任意
>_.result : (object: 任意, property: 文字) => 任意
>_ : Underscore.Static
>result : (object: 任意, property: 文字) => 任意
>object : { cheese: 文字; stuff: () => 文字; }
>'cheese' : "cheese"

_.result(object, 'stuff');
>_.result(object, 'stuff') : 任意
>类型别名 :=> 任意
>_.result : (object: 任意, property: 文字) => 任意
>_ : Underscore.Static
>result : (object: 任意, property: 文字) => 任意
>object : { cheese: 文字; stuff: () => 文字; }
>'stuff' : "stuff"

var compiled = _.template("hello: <%= name %>");
>compiled : (data: 任意) => 文字
>_.template("hello: <%= name %>") : (data: 任意) => 文字
>_.template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>_ : Underscore.Static
>template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>"hello: <%= name %>" : "hello: <%= name %>"

compiled({ name: 'moe' });
>compiled({ name: 'moe' }) : 文字
>类型别名 :=> 文字
>compiled : (data: 任意) => 文字
>{ name: 'moe' } : { name: 文字; }
>name : 文字
>类型别名 :=> 文字
>'moe' : "moe"

var list2 = "<% _.each(people, function(name) { %> <li><%= name %></li> <% }); %>";
>list2 : 文字
>类型别名 :=> 文字
>"<% _.each(people, function(name) { %> <li><%= name %></li> <% }); %>" : "<% _.each(people, function(name) { %> <li><%= name %></li> <% }); %>"

_.template(list2, { people: ['moe', 'curly', 'larry'] });
>_.template(list2, { people: ['moe', 'curly', 'larry'] }) : 文字
>类型别名 :=> 文字
>_.template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>_ : Underscore.Static
>template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>list2 : 文字
>类型别名 :=> 文字
>{ people: ['moe', 'curly', 'larry'] } : { people: 文字[]; }
>people : 文字[]
>['moe', 'curly', 'larry'] : 文字[]
>'moe' : "moe"
>'curly' : "curly"
>'larry' : "larry"

var template = _.template("<b><%- value %></b>");
>template : (data: 任意) => 文字
>_.template("<b><%- value %></b>") : (data: 任意) => 文字
>_.template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>_ : Underscore.Static
>template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>"<b><%- value %></b>" : "<b><%- value %></b>"

template({ value: '<script>' });
>template({ value: '<script>' }) : 文字
>类型别名 :=> 文字
>template : (data: 任意) => 文字
>{ value: '<script>' } : { value: 文字; }
>value : 文字
>类型别名 :=> 文字
>'<script>' : "<script>"

var compiled2 = _.template("<% print('Hello ' + epithet); %>");
>compiled2 : (data: 任意) => 文字
>_.template("<% print('Hello ' + epithet); %>") : (data: 任意) => 文字
>_.template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>_ : Underscore.Static
>template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>"<% print('Hello ' + epithet); %>" : "<% print('Hello ' + epithet); %>"

compiled2({ epithet: "stooge" });
>compiled2({ epithet: "stooge" }) : 文字
>类型别名 :=> 文字
>compiled2 : (data: 任意) => 文字
>{ epithet: "stooge" } : { epithet: 文字; }
>epithet : 文字
>类型别名 :=> 文字
>"stooge" : "stooge"

_.templateSettings = {
>_.templateSettings = {    interpolate: /\{\{(.+?)\}\}/g} : { interpolate: RegExp; }
>_.templateSettings : Underscore.TemplateSettings
>_ : Underscore.Static
>templateSettings : Underscore.TemplateSettings
>{    interpolate: /\{\{(.+?)\}\}/g} : { interpolate: RegExp; }

    interpolate: /\{\{(.+?)\}\}/g
>interpolate : RegExp
>/\{\{(.+?)\}\}/g : RegExp

};
var template2 = _.template("Hello {{ name }}!");
>template2 : (data: 任意) => 文字
>_.template("Hello {{ name }}!") : (data: 任意) => 文字
>_.template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>_ : Underscore.Static
>template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>"Hello {{ name }}!" : "Hello {{ name }}!"

template2({ name: "Mustache" });
>template2({ name: "Mustache" }) : 文字
>类型别名 :=> 文字
>template2 : (data: 任意) => 文字
>{ name: "Mustache" } : { name: 文字; }
>name : 文字
>类型别名 :=> 文字
>"Mustache" : "Mustache"

_.template("Using 'with': <%= data.answer %>", { answer: 'no' }, { variable: 'data' });
>_.template("Using 'with': <%= data.answer %>", { answer: 'no' }, { variable: 'data' }) : 文字
>类型别名 :=> 文字
>_.template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>_ : Underscore.Static
>template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: Underscore.TemplateSettings): 文字; }
>"Using 'with': <%= data.answer %>" : "Using 'with': <%= data.answer %>"
>{ answer: 'no' } : { answer: 文字; }
>answer : 文字
>类型别名 :=> 文字
>'no' : "no"
>{ variable: 'data' } : { variable: 文字; }
>variable : 文字
>类型别名 :=> 文字
>'data' : "data"

=== tests/cases/compiler/underscoreTest1_underscore.ts ===
interface Dictionary<T> {
>Dictionary : Dictionary<T>
>T : T

    [x: string]: T;
>x : 文字
>类型别名 :=> 文字
>T : T
}

interface Iterator_<T, U> {
>Iterator_ : Iterator_<T, U>
>T : T
>U : U

    (value: T, index: any, list: any): U;
>value : T
>T : T
>index : 任意
>类型别名 :=> 任意
>list : 任意
>类型别名 :=> 任意
>U : U
}

interface Reducer<T, U> {
>Reducer : Reducer<T, U>
>T : T
>U : U

    (accumulator: U, value: T, index: any, list: any): U;
>accumulator : U
>U : U
>value : T
>T : T
>index : 任意
>类型别名 :=> 任意
>list : 任意
>类型别名 :=> 任意
>U : U
}

interface Tuple2<T0, T1> extends Array<any> {
>Tuple2 : Tuple2<T0, T1>
>T0 : T0
>T1 : T1
>Array : T[]

    0: T0;
>T0 : T0

    1: T1;
>T1 : T1
}

interface Tuple3<T0, T1, T2> extends Array<any> {
>Tuple3 : Tuple3<T0, T1, T2>
>T0 : T0
>T1 : T1
>T2 : T2
>Array : T[]

    0: T0;
>T0 : T0

    1: T1;
>T1 : T1

    2: T2;
>T2 : T2
}

interface Tuple4<T0, T1, T2, T3> extends Array<any> {
>Tuple4 : Tuple4<T0, T1, T2, T3>
>T0 : T0
>T1 : T1
>T2 : T2
>T3 : T3
>Array : T[]

    0: T0;
>T0 : T0

    1: T1;
>T1 : T1

    2: T2;
>T2 : T2

    3: T3;
>T3 : T3
}

module Underscore {
>Underscore : 任意
>类型别名 :=> 任意

    export interface WrappedObject<T> {
>WrappedObject : WrappedObject<T>
>T : T

        keys(): string[];
>keys : () => 文字[]

        values(): any[];
>values : () => 任意[]

        pairs(): any[][];
>pairs : () => 任意[][]

        invert(): any;
>invert : () => 任意

        functions(): string[];
>functions : () => 文字[]

        methods(): string[];
>methods : () => 文字[]

        extend(...sources: any[]): T;
>extend : (...sources: 任意[]) => T
>sources : 任意[]
>T : T

        pick(...keys: string[]): T;
>pick : (...keys: 文字[]) => T
>keys : 文字[]
>T : T

        omit(...keys: string[]): T;
>omit : (...keys: 文字[]) => T
>keys : 文字[]
>T : T

        defaults(...defaults: any[]): T;
>defaults : (...defaults: 任意[]) => T
>defaults : 任意[]
>T : T

        clone(): T;
>clone : () => T
>T : T

        tap(interceptor: (object: T) => void): T;
>tap : (interceptor: (object: T) => 无值) => T
>interceptor : (object: T) => 无值
>object : T
>T : T
>T : T

        has(key: string): boolean;
>has : (key: 文字) => 真假
>key : 文字
>类型别名 :=> 文字

        isEqual(other: T): boolean;
>isEqual : (other: T) => 真假
>other : T
>T : T

        isEmpty(): boolean;
>isEmpty : () => 真假

        isElement(): boolean;
>isElement : () => 真假

        isArray(): boolean;
>isArray : () => 真假

        isObject(): boolean;
>isObject : () => 真假

        isArguments(): boolean;
>isArguments : () => 真假

        isFunction(): boolean;
>isFunction : () => 真假

        isString(): boolean;
>isString : () => 真假

        isNumber(): boolean;
>isNumber : () => 真假

        isFinite(): boolean;
>isFinite : () => 真假

        isBoolean(): boolean;
>isBoolean : () => 真假

        isDate(): boolean;
>isDate : () => 真假

        isRegExp(): boolean;
>isRegExp : () => 真假

        isNaN(): boolean;
>isNaN : () => 真假

        isNull(): boolean;
>isNull : () => 真假

        isUndefined(): boolean;
>isUndefined : () => 真假

        value(): T;
>value : () => T
>T : T
    }

    export interface WrappedFunction<T extends Function> extends WrappedObject<T> {
>WrappedFunction : WrappedFunction<T>
>T : T
>Function : Function
>WrappedObject : WrappedObject<T>
>T : T

        bind(object: any): T;
>bind : { (object: 任意): T; (object: 任意, ...args: 任意[]): Function; }
>object : 任意
>类型别名 :=> 任意
>T : T

        bind(object: any, ...args: any[]): Function;
>bind : { (object: 任意): T; (object: 任意, ...args: 任意[]): Function; }
>object : 任意
>类型别名 :=> 任意
>args : 任意[]
>Function : Function

        bindAll(...methodNames: string[]): T;
>bindAll : (...methodNames: 文字[]) => T
>methodNames : 文字[]
>T : T

        partial(...args: any[]): Function;
>partial : (...args: 任意[]) => Function
>args : 任意[]
>Function : Function

        memoize(hashFunction?: Function): T;
>memoize : (hashFunction?: Function) => T
>hashFunction : Function
>Function : Function
>T : T

        delay(wait: number, ...args: any[]): number;
>delay : (wait: 数字, ...args: 任意[]) => 数字
>wait : 数字
>类型别名 :=> 数字
>args : 任意[]

        defer(...args: any[]): number;
>defer : (...args: 任意[]) => 数字
>args : 任意[]

        throttle(wait: number): T;
>throttle : (wait: 数字) => T
>wait : 数字
>类型别名 :=> 数字
>T : T

        debounce(wait: number, immediate?: boolean): T;
>debounce : (wait: 数字, immediate?: 真假) => T
>wait : 数字
>类型别名 :=> 数字
>immediate : 真假
>类型别名 :=> 真假
>T : T

        once(): T;
>once : () => T
>T : T

        wrap(wrapper: (func: T, ...args: any[]) => any): T;
>wrap : (wrapper: (func: T, ...args: 任意[]) => 任意) => T
>wrapper : (func: T, ...args: 任意[]) => 任意
>func : T
>T : T
>args : 任意[]
>T : T

        compose(...funcs: Function[]): Function;
>compose : (...funcs: Function[]) => Function
>funcs : Function[]
>Function : Function
>Function : Function
    }

    export interface WrappedArray<T> extends WrappedObject<Array<T>> {
>WrappedArray : WrappedArray<T>
>T : T
>WrappedObject : WrappedObject<T>
>Array : T[]
>T : T

        each(iterator: Iterator_<T, void>, context?: any): void;
>each : (iterator: Iterator_<T, 无值>, context?: 任意) => 无值
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        forEach(iterator: Iterator_<T, void>, context?: any): void;
>forEach : (iterator: Iterator_<T, 无值>, context?: 任意) => 无值
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        map<U>(iterator: Iterator_<T, U>, context?: any): U[];
>map : <U>(iterator: Iterator_<T, U>, context?: 任意) => U[]
>U : U
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        collect<U>(iterator: Iterator_<T, U>, context?: any): U[];
>collect : <U>(iterator: Iterator_<T, U>, context?: 任意) => U[]
>U : U
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        find(iterator: Iterator_<T, boolean>, context?: any): T;
>find : (iterator: Iterator_<T, 真假>, context?: 任意) => T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        detect(iterator: Iterator_<T, boolean>, context?: any): T;
>detect : (iterator: Iterator_<T, 真假>, context?: 任意) => T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        filter(iterator: Iterator_<T, boolean>, context?: any): T[];
>filter : (iterator: Iterator_<T, 真假>, context?: 任意) => T[]
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        select(iterator: Iterator_<T, boolean>, context?: any): T[];
>select : (iterator: Iterator_<T, 真假>, context?: 任意) => T[]
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        where(properties: Object): T[];
>where : (properties: Object) => T[]
>properties : Object
>Object : Object
>T : T

        findWhere(properties: Object): T;
>findWhere : (properties: Object) => T
>properties : Object
>Object : Object
>T : T

        reject(iterator: Iterator_<T, boolean>, context?: any): T[];
>reject : (iterator: Iterator_<T, 真假>, context?: 任意) => T[]
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        every(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>every : (iterator?: Iterator_<T, 真假>, context?: 任意) => 真假
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        all(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>all : (iterator?: Iterator_<T, 真假>, context?: 任意) => 真假
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        some(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>some : (iterator?: Iterator_<T, 真假>, context?: 任意) => 真假
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        any(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>any : (iterator?: Iterator_<T, 真假>, context?: 任意) => 真假
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        contains(value: T): boolean;
>contains : (value: T) => 真假
>value : T
>T : T

        include(value: T): boolean;
>include : (value: T) => 真假
>value : T
>T : T

        invoke(methodName: string, ...args: any[]): any[];
>invoke : (methodName: 文字, ...args: 任意[]) => 任意[]
>methodName : 文字
>类型别名 :=> 文字
>args : 任意[]

        pluck(propertyName: string): any[];
>pluck : (propertyName: 文字) => 任意[]
>propertyName : 文字
>类型别名 :=> 文字

        max(iterator?: Iterator_<T, any>, context?: any): T;
>max : (iterator?: Iterator_<T, 任意>, context?: 任意) => T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        min(iterator?: Iterator_<T, any>, context?: any): T;
>min : (iterator?: Iterator_<T, 任意>, context?: 任意) => T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        sortBy(iterator: Iterator_<T, any>, context?: any): T[];
>sortBy : { (iterator: Iterator_<T, 任意>, context?: 任意): T[]; (propertyName: 文字): T[]; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        sortBy(propertyName: string): T[];
>sortBy : { (iterator: Iterator_<T, 任意>, context?: 任意): T[]; (propertyName: 文字): T[]; }
>propertyName : 文字
>类型别名 :=> 文字
>T : T

        groupBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
>groupBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; (propertyName: 文字): Dictionary<T[]>; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>Dictionary : Dictionary<T>
>T : T

        groupBy(propertyName: string): Dictionary<T[]>;
>groupBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; (propertyName: 文字): Dictionary<T[]>; }
>propertyName : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>
>T : T

        countBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
>countBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; (propertyName: 文字): Dictionary<数字>; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>Dictionary : Dictionary<T>

        countBy(propertyName: string): Dictionary<number>;
>countBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; (propertyName: 文字): Dictionary<数字>; }
>propertyName : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>

        shuffle(): T[];
>shuffle : () => T[]
>T : T

        toArray(): T[];
>toArray : () => T[]
>T : T

        size(): number;
>size : () => 数字

        first(): T;
>first : { (): T; (count: 数字): T[]; }
>T : T

        first(count: number): T[];
>first : { (): T; (count: 数字): T[]; }
>count : 数字
>类型别名 :=> 数字
>T : T

        head(): T;
>head : { (): T; (count: 数字): T[]; }
>T : T

        head(count: number): T[];
>head : { (): T; (count: 数字): T[]; }
>count : 数字
>类型别名 :=> 数字
>T : T

        take(): T;
>take : { (): T; (count: 数字): T[]; }
>T : T

        take(count: number): T[];
>take : { (): T; (count: 数字): T[]; }
>count : 数字
>类型别名 :=> 数字
>T : T

        initial(): T;
>initial : { (): T; (count: 数字): T[]; }
>T : T

        initial(count: number): T[];
>initial : { (): T; (count: 数字): T[]; }
>count : 数字
>类型别名 :=> 数字
>T : T

        last(): T;
>last : { (): T; (count: 数字): T[]; }
>T : T

        last(count: number): T[];
>last : { (): T; (count: 数字): T[]; }
>count : 数字
>类型别名 :=> 数字
>T : T

        rest(index?: number): T[];
>rest : (index?: 数字) => T[]
>index : 数字
>类型别名 :=> 数字
>T : T

        compact(): T[];
>compact : () => T[]
>T : T

        flatten<U>(shallow?: boolean): U[];
>flatten : <U>(shallow?: 真假) => U[]
>U : U
>shallow : 真假
>类型别名 :=> 真假
>U : U

        without(...values: T[]): T[];
>without : (...values: T[]) => T[]
>values : T[]
>T : T
>T : T

        union(...arrays: T[][]): T[];
>union : (...arrays: T[][]) => T[]
>arrays : T[][]
>T : T
>T : T

        intersection(...arrays: T[][]): T[];
>intersection : (...arrays: T[][]) => T[]
>arrays : T[][]
>T : T
>T : T

        difference(...others: T[][]): T[];
>difference : (...others: T[][]) => T[]
>others : T[][]
>T : T
>T : T

        uniq(isSorted?: boolean): T[];
>uniq : { (isSorted?: 真假): T[]; <U>(isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>isSorted : 真假
>类型别名 :=> 真假
>T : T

        uniq<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
>uniq : { (isSorted?: 真假): T[]; <U>(isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>U : U
>isSorted : 真假
>类型别名 :=> 真假
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        unique(isSorted?: boolean): T[];
>unique : { (isSorted?: 真假): T[]; <U>(isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>isSorted : 真假
>类型别名 :=> 真假
>T : T

        unique<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
>unique : { (isSorted?: 真假): T[]; <U>(isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>U : U
>isSorted : 真假
>类型别名 :=> 真假
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        zip(...arrays: any[][]): any[][];
>zip : (...arrays: 任意[][]) => 任意[][]
>arrays : 任意[][]

        object(): any;
>object : { (): 任意; (values: 任意[]): 任意; }

        object(values: any[]): any;
>object : { (): 任意; (values: 任意[]): 任意; }
>values : 任意[]

        indexOf(value: T, isSorted?: boolean): number;
>indexOf : (value: T, isSorted?: 真假) => 数字
>value : T
>T : T
>isSorted : 真假
>类型别名 :=> 真假

        lastIndexOf(value: T, fromIndex?: number): number;
>lastIndexOf : (value: T, fromIndex?: 数字) => 数字
>value : T
>T : T
>fromIndex : 数字
>类型别名 :=> 数字

        sortedIndex(obj: T, propertyName: string): number;
>sortedIndex : { (obj: T, propertyName: 文字): 数字; (obj: T, iterator?: Iterator_<T, 任意>, context?: 任意): 数字; }
>obj : T
>T : T
>propertyName : 文字
>类型别名 :=> 文字

        sortedIndex(obj: T, iterator?: Iterator_<T, any>, context?: any): number;
>sortedIndex : { (obj: T, propertyName: 文字): 数字; (obj: T, iterator?: Iterator_<T, 任意>, context?: 任意): 数字; }
>obj : T
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        // Methods from Array
        concat(...items: T[]): T[];
>concat : (...items: T[]) => T[]
>items : T[]
>T : T
>T : T

        join(separator?: string): string;
>join : (separator?: 文字) => 文字
>separator : 文字
>类型别名 :=> 文字

        pop(): T;
>pop : () => T
>T : T

        push(...items: T[]): number;
>push : (...items: T[]) => 数字
>items : T[]
>T : T

        reverse(): T[];
>reverse : () => T[]
>T : T

        shift(): T;
>shift : () => T
>T : T

        slice(start: number, end?: number): T[];
>slice : (start: 数字, end?: 数字) => T[]
>start : 数字
>类型别名 :=> 数字
>end : 数字
>类型别名 :=> 数字
>T : T

        sort(compareFn?: (a: T, b: T) => number): T[];
>sort : (compareFn?: (a: T, b: T) => 数字) => T[]
>compareFn : (a: T, b: T) => 数字
>a : T
>T : T
>b : T
>T : T
>T : T

        splice(start: number): T[];
>splice : { (start: 数字): T[]; (start: 数字, deleteCount: 数字, ...items: T[]): T[]; }
>start : 数字
>类型别名 :=> 数字
>T : T

        splice(start: number, deleteCount: number, ...items: T[]): T[];
>splice : { (start: 数字): T[]; (start: 数字, deleteCount: 数字, ...items: T[]): T[]; }
>start : 数字
>类型别名 :=> 数字
>deleteCount : 数字
>类型别名 :=> 数字
>items : T[]
>T : T
>T : T

        unshift(...items: T[]): number;
>unshift : (...items: T[]) => 数字
>items : T[]
>T : T
    }

    export interface WrappedDictionary<T> extends WrappedObject<Dictionary<T>> {
>WrappedDictionary : WrappedDictionary<T>
>T : T
>WrappedObject : WrappedObject<T>
>Dictionary : Dictionary<T>
>T : T

        each(iterator: Iterator_<T, void>, context?: any): void;
>each : (iterator: Iterator_<T, 无值>, context?: 任意) => 无值
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        forEach(iterator: Iterator_<T, void>, context?: any): void;
>forEach : (iterator: Iterator_<T, 无值>, context?: 任意) => 无值
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        map<U>(iterator: Iterator_<T, U>, context?: any): U[];
>map : <U>(iterator: Iterator_<T, U>, context?: 任意) => U[]
>U : U
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        collect<U>(iterator: Iterator_<T, U>, context?: any): U[];
>collect : <U>(iterator: Iterator_<T, U>, context?: 任意) => U[]
>U : U
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        find(iterator: Iterator_<T, boolean>, context?: any): T;
>find : (iterator: Iterator_<T, 真假>, context?: 任意) => T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        detect(iterator: Iterator_<T, boolean>, context?: any): T;
>detect : (iterator: Iterator_<T, 真假>, context?: 任意) => T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        filter(iterator: Iterator_<T, boolean>, context?: any): T[];
>filter : (iterator: Iterator_<T, 真假>, context?: 任意) => T[]
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        select(iterator: Iterator_<T, boolean>, context?: any): T[];
>select : (iterator: Iterator_<T, 真假>, context?: 任意) => T[]
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        where(properties: Object): T[];
>where : (properties: Object) => T[]
>properties : Object
>Object : Object
>T : T

        findWhere(properties: Object): T;
>findWhere : (properties: Object) => T
>properties : Object
>Object : Object
>T : T

        reject(iterator: Iterator_<T, boolean>, context?: any): T[];
>reject : (iterator: Iterator_<T, 真假>, context?: 任意) => T[]
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        every(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>every : (iterator?: Iterator_<T, 真假>, context?: 任意) => 真假
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        all(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>all : (iterator?: Iterator_<T, 真假>, context?: 任意) => 真假
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        some(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>some : (iterator?: Iterator_<T, 真假>, context?: 任意) => 真假
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        any(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>any : (iterator?: Iterator_<T, 真假>, context?: 任意) => 真假
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        contains(value: T): boolean;
>contains : (value: T) => 真假
>value : T
>T : T

        include(value: T): boolean;
>include : (value: T) => 真假
>value : T
>T : T

        invoke(methodName: string, ...args: any[]): any[];
>invoke : (methodName: 文字, ...args: 任意[]) => 任意[]
>methodName : 文字
>类型别名 :=> 文字
>args : 任意[]

        pluck(propertyName: string): any[];
>pluck : (propertyName: 文字) => 任意[]
>propertyName : 文字
>类型别名 :=> 文字

        max(iterator?: Iterator_<T, any>, context?: any): T;
>max : (iterator?: Iterator_<T, 任意>, context?: 任意) => T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        min(iterator?: Iterator_<T, any>, context?: any): T;
>min : (iterator?: Iterator_<T, 任意>, context?: 任意) => T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        sortBy(iterator: Iterator_<T, any>, context?: any): T[];
>sortBy : { (iterator: Iterator_<T, 任意>, context?: 任意): T[]; (propertyName: 文字): T[]; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        sortBy(propertyName: string): T[];
>sortBy : { (iterator: Iterator_<T, 任意>, context?: 任意): T[]; (propertyName: 文字): T[]; }
>propertyName : 文字
>类型别名 :=> 文字
>T : T

        groupBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
>groupBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; (propertyName: 文字): Dictionary<T[]>; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>Dictionary : Dictionary<T>
>T : T

        groupBy(propertyName: string): Dictionary<T[]>;
>groupBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; (propertyName: 文字): Dictionary<T[]>; }
>propertyName : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>
>T : T

        countBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
>countBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; (propertyName: 文字): Dictionary<数字>; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>Dictionary : Dictionary<T>

        countBy(propertyName: string): Dictionary<number>;
>countBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; (propertyName: 文字): Dictionary<数字>; }
>propertyName : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>

        shuffle(): T[];
>shuffle : () => T[]
>T : T

        toArray(): T[];
>toArray : () => T[]
>T : T

        size(): number;
>size : () => 数字
    }

    export interface ChainedObject<T> {
>ChainedObject : ChainedObject<T>
>T : T

        keys(): ChainedArray<string>;
>keys : () => ChainedArray<文字>
>ChainedArray : ChainedArray<T>

        values(): ChainedArray<any>;
>values : () => ChainedArray<任意>
>ChainedArray : ChainedArray<T>

        pairs(): ChainedArray<any[]>;
>pairs : () => ChainedArray<任意[]>
>ChainedArray : ChainedArray<T>

        invert(): ChainedObject<any>;
>invert : () => ChainedObject<任意>
>ChainedObject : ChainedObject<T>

        functions(): ChainedArray<string>;
>functions : () => ChainedArray<文字>
>ChainedArray : ChainedArray<T>

        methods(): ChainedArray<string>;
>methods : () => ChainedArray<文字>
>ChainedArray : ChainedArray<T>

        extend(...sources: any[]): ChainedObject<T>;
>extend : (...sources: 任意[]) => ChainedObject<T>
>sources : 任意[]
>ChainedObject : ChainedObject<T>
>T : T

        pick(...keys: string[]): ChainedObject<T>;
>pick : (...keys: 文字[]) => ChainedObject<T>
>keys : 文字[]
>ChainedObject : ChainedObject<T>
>T : T

        omit(...keys: string[]): ChainedObject<T>;
>omit : (...keys: 文字[]) => ChainedObject<T>
>keys : 文字[]
>ChainedObject : ChainedObject<T>
>T : T

        defaults(...defaults: any[]): ChainedObject<T>;
>defaults : (...defaults: 任意[]) => ChainedObject<T>
>defaults : 任意[]
>ChainedObject : ChainedObject<T>
>T : T

        clone(): ChainedObject<T>;
>clone : () => ChainedObject<T>
>ChainedObject : ChainedObject<T>
>T : T

        tap(interceptor: (object: T) => void): ChainedObject<T>;
>tap : (interceptor: (object: T) => 无值) => ChainedObject<T>
>interceptor : (object: T) => 无值
>object : T
>T : T
>ChainedObject : ChainedObject<T>
>T : T

        has(key: string): ChainedObject<boolean>;
>has : (key: 文字) => ChainedObject<真假>
>key : 文字
>类型别名 :=> 文字
>ChainedObject : ChainedObject<T>

        isEqual(other: T): ChainedObject<boolean>;
>isEqual : (other: T) => ChainedObject<真假>
>other : T
>T : T
>ChainedObject : ChainedObject<T>

        isEmpty(): ChainedObject<boolean>;
>isEmpty : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isElement(): ChainedObject<boolean>;
>isElement : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isArray(): ChainedObject<boolean>;
>isArray : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isObject(): ChainedObject<boolean>;
>isObject : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isArguments(): ChainedObject<boolean>;
>isArguments : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isFunction(): ChainedObject<boolean>;
>isFunction : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isString(): ChainedObject<boolean>;
>isString : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isNumber(): ChainedObject<boolean>;
>isNumber : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isFinite(): ChainedObject<boolean>;
>isFinite : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isBoolean(): ChainedObject<boolean>;
>isBoolean : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isDate(): ChainedObject<boolean>;
>isDate : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isRegExp(): ChainedObject<boolean>;
>isRegExp : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isNaN(): ChainedObject<boolean>;
>isNaN : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isNull(): ChainedObject<boolean>;
>isNull : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        isUndefined(): ChainedObject<boolean>;
>isUndefined : () => ChainedObject<真假>
>ChainedObject : ChainedObject<T>

        value(): T;
>value : () => T
>T : T
    }

    export interface ChainedArray<T> extends ChainedObject<Array<T>> {
>ChainedArray : ChainedArray<T>
>T : T
>ChainedObject : ChainedObject<T>
>Array : T[]
>T : T

        each(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
>each : (iterator: Iterator_<T, 无值>, context?: 任意) => ChainedObject<无值>
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        forEach(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
>forEach : (iterator: Iterator_<T, 无值>, context?: 任意) => ChainedObject<无值>
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        map<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>map : <U>(iterator: Iterator_<T, U>, context?: 任意) => ChainedArray<U>
>U : U
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>U : U

        collect<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>collect : <U>(iterator: Iterator_<T, U>, context?: 任意) => ChainedArray<U>
>U : U
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>U : U

        reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>U : U

        foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>U : U

        inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>U : U

        reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>U : U

        foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>U : U

        find(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
>find : (iterator: Iterator_<T, 真假>, context?: 任意) => ChainedObject<T>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        detect(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
>detect : (iterator: Iterator_<T, 真假>, context?: 任意) => ChainedObject<T>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        filter(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>filter : (iterator: Iterator_<T, 真假>, context?: 任意) => ChainedArray<T>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>T : T

        select(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>select : (iterator: Iterator_<T, 真假>, context?: 任意) => ChainedArray<T>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>T : T

        where(properties: Object): ChainedArray<T>;
>where : (properties: Object) => ChainedArray<T>
>properties : Object
>Object : Object
>ChainedArray : ChainedArray<T>
>T : T

        findWhere(properties: Object): ChainedObject<T>;
>findWhere : (properties: Object) => ChainedObject<T>
>properties : Object
>Object : Object
>ChainedObject : ChainedObject<T>
>T : T

        reject(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>reject : (iterator: Iterator_<T, 真假>, context?: 任意) => ChainedArray<T>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>T : T

        every(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>every : (iterator?: Iterator_<T, 真假>, context?: 任意) => ChainedObject<真假>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        all(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>all : (iterator?: Iterator_<T, 真假>, context?: 任意) => ChainedObject<真假>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        some(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>some : (iterator?: Iterator_<T, 真假>, context?: 任意) => ChainedObject<真假>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        any(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>any : (iterator?: Iterator_<T, 真假>, context?: 任意) => ChainedObject<真假>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        contains(value: T): ChainedObject<boolean>;
>contains : (value: T) => ChainedObject<真假>
>value : T
>T : T
>ChainedObject : ChainedObject<T>

        include(value: T): ChainedObject<boolean>;
>include : (value: T) => ChainedObject<真假>
>value : T
>T : T
>ChainedObject : ChainedObject<T>

        invoke(methodName: string, ...args: any[]): ChainedArray<any>;
>invoke : (methodName: 文字, ...args: 任意[]) => ChainedArray<任意>
>methodName : 文字
>类型别名 :=> 文字
>args : 任意[]
>ChainedArray : ChainedArray<T>

        pluck(propertyName: string): ChainedArray<any>;
>pluck : (propertyName: 文字) => ChainedArray<任意>
>propertyName : 文字
>类型别名 :=> 文字
>ChainedArray : ChainedArray<T>

        max(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
>max : (iterator?: Iterator_<T, 任意>, context?: 任意) => ChainedObject<T>
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        min(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
>min : (iterator?: Iterator_<T, 任意>, context?: 任意) => ChainedObject<T>
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        sortBy(iterator: Iterator_<T, any>, context?: any): ChainedArray<T>;
>sortBy : { (iterator: Iterator_<T, 任意>, context?: 任意): ChainedArray<T>; (propertyName: 文字): ChainedArray<T>; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>T : T

        sortBy(propertyName: string): ChainedArray<T>;
>sortBy : { (iterator: Iterator_<T, 任意>, context?: 任意): ChainedArray<T>; (propertyName: 文字): ChainedArray<T>; }
>propertyName : 文字
>类型别名 :=> 文字
>ChainedArray : ChainedArray<T>
>T : T

        // Should return ChainedDictionary<T[]>, but expansive recursion not allowed
        groupBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>;
>groupBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): ChainedDictionary<任意[]>; (propertyName: 文字): ChainedDictionary<任意[]>; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedDictionary : ChainedDictionary<T>

        groupBy(propertyName: string): ChainedDictionary<any[]>;
>groupBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): ChainedDictionary<任意[]>; (propertyName: 文字): ChainedDictionary<任意[]>; }
>propertyName : 文字
>类型别名 :=> 文字
>ChainedDictionary : ChainedDictionary<T>

        countBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>;
>countBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): ChainedDictionary<数字>; (propertyName: 文字): ChainedDictionary<数字>; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedDictionary : ChainedDictionary<T>

        countBy(propertyName: string): ChainedDictionary<number>;
>countBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): ChainedDictionary<数字>; (propertyName: 文字): ChainedDictionary<数字>; }
>propertyName : 文字
>类型别名 :=> 文字
>ChainedDictionary : ChainedDictionary<T>

        shuffle(): ChainedArray<T>;
>shuffle : () => ChainedArray<T>
>ChainedArray : ChainedArray<T>
>T : T

        toArray(): ChainedArray<T>;
>toArray : () => ChainedArray<T>
>ChainedArray : ChainedArray<T>
>T : T

        size(): ChainedObject<number>;
>size : () => ChainedObject<数字>
>ChainedObject : ChainedObject<T>

        first(): ChainedObject<T>;
>first : { (): ChainedObject<T>; (count: 数字): ChainedArray<T>; }
>ChainedObject : ChainedObject<T>
>T : T

        first(count: number): ChainedArray<T>;
>first : { (): ChainedObject<T>; (count: 数字): ChainedArray<T>; }
>count : 数字
>类型别名 :=> 数字
>ChainedArray : ChainedArray<T>
>T : T

        head(): ChainedObject<T>;
>head : { (): ChainedObject<T>; (count: 数字): ChainedArray<T>; }
>ChainedObject : ChainedObject<T>
>T : T

        head(count: number): ChainedArray<T>;
>head : { (): ChainedObject<T>; (count: 数字): ChainedArray<T>; }
>count : 数字
>类型别名 :=> 数字
>ChainedArray : ChainedArray<T>
>T : T

        take(): ChainedObject<T>;
>take : { (): ChainedObject<T>; (count: 数字): ChainedArray<T>; }
>ChainedObject : ChainedObject<T>
>T : T

        take(count: number): ChainedArray<T>;
>take : { (): ChainedObject<T>; (count: 数字): ChainedArray<T>; }
>count : 数字
>类型别名 :=> 数字
>ChainedArray : ChainedArray<T>
>T : T

        initial(): ChainedObject<T>;
>initial : { (): ChainedObject<T>; (count: 数字): ChainedArray<T>; }
>ChainedObject : ChainedObject<T>
>T : T

        initial(count: number): ChainedArray<T>;
>initial : { (): ChainedObject<T>; (count: 数字): ChainedArray<T>; }
>count : 数字
>类型别名 :=> 数字
>ChainedArray : ChainedArray<T>
>T : T

        last(): ChainedObject<T>;
>last : { (): ChainedObject<T>; (count: 数字): ChainedArray<T>; }
>ChainedObject : ChainedObject<T>
>T : T

        last(count: number): ChainedArray<T>;
>last : { (): ChainedObject<T>; (count: 数字): ChainedArray<T>; }
>count : 数字
>类型别名 :=> 数字
>ChainedArray : ChainedArray<T>
>T : T

        rest(index?: number): ChainedArray<T>;
>rest : (index?: 数字) => ChainedArray<T>
>index : 数字
>类型别名 :=> 数字
>ChainedArray : ChainedArray<T>
>T : T

        compact(): ChainedArray<T>;
>compact : () => ChainedArray<T>
>ChainedArray : ChainedArray<T>
>T : T

        flatten<U>(shallow?: boolean): ChainedArray<U>;
>flatten : <U>(shallow?: 真假) => ChainedArray<U>
>U : U
>shallow : 真假
>类型别名 :=> 真假
>ChainedArray : ChainedArray<T>
>U : U

        without(...values: T[]): ChainedArray<T>;
>without : (...values: T[]) => ChainedArray<T>
>values : T[]
>T : T
>ChainedArray : ChainedArray<T>
>T : T

        union(...arrays: T[][]): ChainedArray<T>;
>union : (...arrays: T[][]) => ChainedArray<T>
>arrays : T[][]
>T : T
>ChainedArray : ChainedArray<T>
>T : T

        intersection(...arrays: T[][]): ChainedArray<T>;
>intersection : (...arrays: T[][]) => ChainedArray<T>
>arrays : T[][]
>T : T
>ChainedArray : ChainedArray<T>
>T : T

        difference(...others: T[][]): ChainedArray<T>;
>difference : (...others: T[][]) => ChainedArray<T>
>others : T[][]
>T : T
>ChainedArray : ChainedArray<T>
>T : T

        uniq(isSorted?: boolean): ChainedArray<T>;
>uniq : { (isSorted?: 真假): ChainedArray<T>; <U>(isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): ChainedArray<U>; }
>isSorted : 真假
>类型别名 :=> 真假
>ChainedArray : ChainedArray<T>
>T : T

        uniq<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>uniq : { (isSorted?: 真假): ChainedArray<T>; <U>(isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): ChainedArray<U>; }
>U : U
>isSorted : 真假
>类型别名 :=> 真假
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>U : U

        unique(isSorted?: boolean): ChainedArray<T>;
>unique : { (isSorted?: 真假): ChainedArray<T>; <U>(isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): ChainedArray<U>; }
>isSorted : 真假
>类型别名 :=> 真假
>ChainedArray : ChainedArray<T>
>T : T

        unique<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>unique : { (isSorted?: 真假): ChainedArray<T>; <U>(isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): ChainedArray<U>; }
>U : U
>isSorted : 真假
>类型别名 :=> 真假
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>U : U

        zip(...arrays: any[][]): ChainedArray<any[]>;
>zip : (...arrays: 任意[][]) => ChainedArray<任意[]>
>arrays : 任意[][]
>ChainedArray : ChainedArray<T>

        object(): ChainedObject<any>;
>object : { (): ChainedObject<任意>; (values: 任意[]): ChainedObject<任意>; }
>ChainedObject : ChainedObject<T>

        object(values: any[]): ChainedObject<any>;
>object : { (): ChainedObject<任意>; (values: 任意[]): ChainedObject<任意>; }
>values : 任意[]
>ChainedObject : ChainedObject<T>

        indexOf(value: T, isSorted?: boolean): ChainedObject<number>;
>indexOf : (value: T, isSorted?: 真假) => ChainedObject<数字>
>value : T
>T : T
>isSorted : 真假
>类型别名 :=> 真假
>ChainedObject : ChainedObject<T>

        lastIndexOf(value: T, fromIndex?: number): ChainedObject<number>;
>lastIndexOf : (value: T, fromIndex?: 数字) => ChainedObject<数字>
>value : T
>T : T
>fromIndex : 数字
>类型别名 :=> 数字
>ChainedObject : ChainedObject<T>

        sortedIndex(obj: T, propertyName: string): ChainedObject<number>;
>sortedIndex : { (obj: T, propertyName: 文字): ChainedObject<数字>; (obj: T, iterator?: Iterator_<T, 任意>, context?: 任意): ChainedObject<数字>; }
>obj : T
>T : T
>propertyName : 文字
>类型别名 :=> 文字
>ChainedObject : ChainedObject<T>

        sortedIndex(obj: T, iterator?: Iterator_<T, any>, context?: any): ChainedObject<number>;
>sortedIndex : { (obj: T, propertyName: 文字): ChainedObject<数字>; (obj: T, iterator?: Iterator_<T, 任意>, context?: 任意): ChainedObject<数字>; }
>obj : T
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        // Methods from Array
        concat(...items: T[]): ChainedArray<T>;
>concat : (...items: T[]) => ChainedArray<T>
>items : T[]
>T : T
>ChainedArray : ChainedArray<T>
>T : T

        join(separator?: string): ChainedObject<string>;
>join : (separator?: 文字) => ChainedObject<文字>
>separator : 文字
>类型别名 :=> 文字
>ChainedObject : ChainedObject<T>

        pop(): ChainedObject<T>;
>pop : () => ChainedObject<T>
>ChainedObject : ChainedObject<T>
>T : T

        push(...items: T[]): ChainedObject<number>;
>push : (...items: T[]) => ChainedObject<数字>
>items : T[]
>T : T
>ChainedObject : ChainedObject<T>

        reverse(): ChainedArray<T>;
>reverse : () => ChainedArray<T>
>ChainedArray : ChainedArray<T>
>T : T

        shift(): ChainedObject<T>;
>shift : () => ChainedObject<T>
>ChainedObject : ChainedObject<T>
>T : T

        slice(start: number, end?: number): ChainedArray<T>;
>slice : (start: 数字, end?: 数字) => ChainedArray<T>
>start : 数字
>类型别名 :=> 数字
>end : 数字
>类型别名 :=> 数字
>ChainedArray : ChainedArray<T>
>T : T

        sort(compareFn?: (a: T, b: T) => number): ChainedArray<T>;
>sort : (compareFn?: (a: T, b: T) => 数字) => ChainedArray<T>
>compareFn : (a: T, b: T) => 数字
>a : T
>T : T
>b : T
>T : T
>ChainedArray : ChainedArray<T>
>T : T

        splice(start: number): ChainedArray<T>;
>splice : { (start: 数字): ChainedArray<T>; (start: 数字, deleteCount: 数字, ...items: T[]): ChainedArray<T>; }
>start : 数字
>类型别名 :=> 数字
>ChainedArray : ChainedArray<T>
>T : T

        splice(start: number, deleteCount: number, ...items: T[]): ChainedArray<T>;
>splice : { (start: 数字): ChainedArray<T>; (start: 数字, deleteCount: 数字, ...items: T[]): ChainedArray<T>; }
>start : 数字
>类型别名 :=> 数字
>deleteCount : 数字
>类型别名 :=> 数字
>items : T[]
>T : T
>ChainedArray : ChainedArray<T>
>T : T

        unshift(...items: T[]): ChainedObject<number>;
>unshift : (...items: T[]) => ChainedObject<数字>
>items : T[]
>T : T
>ChainedObject : ChainedObject<T>

        // Methods from ChainedObject with promoted return types
        extend(...sources: any[]): ChainedArray<T>;
>extend : (...sources: 任意[]) => ChainedArray<T>
>sources : 任意[]
>ChainedArray : ChainedArray<T>
>T : T

        pick(...keys: string[]): ChainedArray<T>;
>pick : (...keys: 文字[]) => ChainedArray<T>
>keys : 文字[]
>ChainedArray : ChainedArray<T>
>T : T

        omit(...keys: string[]): ChainedArray<T>;
>omit : (...keys: 文字[]) => ChainedArray<T>
>keys : 文字[]
>ChainedArray : ChainedArray<T>
>T : T

        defaults(...defaults: any[]): ChainedArray<T>;
>defaults : (...defaults: 任意[]) => ChainedArray<T>
>defaults : 任意[]
>ChainedArray : ChainedArray<T>
>T : T

        clone(): ChainedArray<T>;
>clone : () => ChainedArray<T>
>ChainedArray : ChainedArray<T>
>T : T

        tap(interceptor: (object: T[]) => void): ChainedArray<T>;
>tap : (interceptor: (object: T[]) => 无值) => ChainedArray<T>
>interceptor : (object: T[]) => 无值
>object : T[]
>T : T
>ChainedArray : ChainedArray<T>
>T : T
    }

    export interface ChainedDictionary<T> extends ChainedObject<Dictionary<T>> {
>ChainedDictionary : ChainedDictionary<T>
>T : T
>ChainedObject : ChainedObject<T>
>Dictionary : Dictionary<T>
>T : T

        each(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
>each : (iterator: Iterator_<T, 无值>, context?: 任意) => ChainedObject<无值>
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        forEach(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
>forEach : (iterator: Iterator_<T, 无值>, context?: 任意) => ChainedObject<无值>
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        map<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>map : <U>(iterator: Iterator_<T, U>, context?: 任意) => ChainedArray<U>
>U : U
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>U : U

        collect<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>collect : <U>(iterator: Iterator_<T, U>, context?: 任意) => ChainedArray<U>
>U : U
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>U : U

        reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>U : U

        foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>U : U

        inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>U : U

        reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>U : U

        foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: 任意): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: 任意): ChainedObject<U>; }
>U : U
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>U : U

        find(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
>find : (iterator: Iterator_<T, 真假>, context?: 任意) => ChainedObject<T>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        detect(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
>detect : (iterator: Iterator_<T, 真假>, context?: 任意) => ChainedObject<T>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        filter(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>filter : (iterator: Iterator_<T, 真假>, context?: 任意) => ChainedArray<T>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>T : T

        select(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>select : (iterator: Iterator_<T, 真假>, context?: 任意) => ChainedArray<T>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>T : T

        where(properties: Object): ChainedArray<T>;
>where : (properties: Object) => ChainedArray<T>
>properties : Object
>Object : Object
>ChainedArray : ChainedArray<T>
>T : T

        findWhere(properties: Object): ChainedObject<T>;
>findWhere : (properties: Object) => ChainedObject<T>
>properties : Object
>Object : Object
>ChainedObject : ChainedObject<T>
>T : T

        reject(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>reject : (iterator: Iterator_<T, 真假>, context?: 任意) => ChainedArray<T>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>T : T

        every(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>every : (iterator?: Iterator_<T, 真假>, context?: 任意) => ChainedObject<真假>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        all(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>all : (iterator?: Iterator_<T, 真假>, context?: 任意) => ChainedObject<真假>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        some(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>some : (iterator?: Iterator_<T, 真假>, context?: 任意) => ChainedObject<真假>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        any(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>any : (iterator?: Iterator_<T, 真假>, context?: 任意) => ChainedObject<真假>
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>

        contains(value: T): ChainedObject<boolean>;
>contains : (value: T) => ChainedObject<真假>
>value : T
>T : T
>ChainedObject : ChainedObject<T>

        include(value: T): ChainedObject<boolean>;
>include : (value: T) => ChainedObject<真假>
>value : T
>T : T
>ChainedObject : ChainedObject<T>

        invoke(methodName: string, ...args: any[]): ChainedArray<any>;
>invoke : (methodName: 文字, ...args: 任意[]) => ChainedArray<任意>
>methodName : 文字
>类型别名 :=> 文字
>args : 任意[]
>ChainedArray : ChainedArray<T>

        pluck(propertyName: string): ChainedArray<any>;
>pluck : (propertyName: 文字) => ChainedArray<任意>
>propertyName : 文字
>类型别名 :=> 文字
>ChainedArray : ChainedArray<T>

        max(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
>max : (iterator?: Iterator_<T, 任意>, context?: 任意) => ChainedObject<T>
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        min(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
>min : (iterator?: Iterator_<T, 任意>, context?: 任意) => ChainedObject<T>
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedObject : ChainedObject<T>
>T : T

        sortBy(iterator: Iterator_<T, any>, context?: any): ChainedArray<T>;
>sortBy : { (iterator: Iterator_<T, 任意>, context?: 任意): ChainedArray<T>; (propertyName: 文字): ChainedArray<T>; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedArray : ChainedArray<T>
>T : T

        sortBy(propertyName: string): ChainedArray<T>;
>sortBy : { (iterator: Iterator_<T, 任意>, context?: 任意): ChainedArray<T>; (propertyName: 文字): ChainedArray<T>; }
>propertyName : 文字
>类型别名 :=> 文字
>ChainedArray : ChainedArray<T>
>T : T

        // Should return ChainedDictionary<T[]>, but expansive recursion not allowed
        groupBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>;
>groupBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): ChainedDictionary<任意[]>; (propertyName: 文字): ChainedDictionary<任意[]>; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedDictionary : ChainedDictionary<T>

        groupBy(propertyName: string): ChainedDictionary<any[]>;
>groupBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): ChainedDictionary<任意[]>; (propertyName: 文字): ChainedDictionary<任意[]>; }
>propertyName : 文字
>类型别名 :=> 文字
>ChainedDictionary : ChainedDictionary<T>

        countBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>;
>countBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): ChainedDictionary<数字>; (propertyName: 文字): ChainedDictionary<数字>; }
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>ChainedDictionary : ChainedDictionary<T>

        countBy(propertyName: string): ChainedDictionary<number>;
>countBy : { (iterator?: Iterator_<T, 任意>, context?: 任意): ChainedDictionary<数字>; (propertyName: 文字): ChainedDictionary<数字>; }
>propertyName : 文字
>类型别名 :=> 文字
>ChainedDictionary : ChainedDictionary<T>

        shuffle(): ChainedArray<T>;
>shuffle : () => ChainedArray<T>
>ChainedArray : ChainedArray<T>
>T : T

        toArray(): ChainedArray<T>;
>toArray : () => ChainedArray<T>
>ChainedArray : ChainedArray<T>
>T : T

        size(): ChainedObject<number>;
>size : () => ChainedObject<数字>
>ChainedObject : ChainedObject<T>

        // Methods from ChainedObject with promoted return types
        extend(...sources: any[]): ChainedDictionary<T>;
>extend : (...sources: 任意[]) => ChainedDictionary<T>
>sources : 任意[]
>ChainedDictionary : ChainedDictionary<T>
>T : T

        pick(...keys: string[]): ChainedDictionary<T>;
>pick : (...keys: 文字[]) => ChainedDictionary<T>
>keys : 文字[]
>ChainedDictionary : ChainedDictionary<T>
>T : T

        omit(...keys: string[]): ChainedDictionary<T>;
>omit : (...keys: 文字[]) => ChainedDictionary<T>
>keys : 文字[]
>ChainedDictionary : ChainedDictionary<T>
>T : T

        defaults(...defaults: any[]): ChainedDictionary<T>;
>defaults : (...defaults: 任意[]) => ChainedDictionary<T>
>defaults : 任意[]
>ChainedDictionary : ChainedDictionary<T>
>T : T

        clone(): ChainedDictionary<T>;
>clone : () => ChainedDictionary<T>
>ChainedDictionary : ChainedDictionary<T>
>T : T

        tap(interceptor: (object: Dictionary<T>) => void): ChainedDictionary<T>;
>tap : (interceptor: (object: Dictionary<T>) => 无值) => ChainedDictionary<T>
>interceptor : (object: Dictionary<T>) => 无值
>object : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>ChainedDictionary : ChainedDictionary<T>
>T : T
    }

    export interface TemplateSettings {
>TemplateSettings : TemplateSettings

        evaluate?: RegExp;
>evaluate : RegExp
>RegExp : RegExp

        interpolate?: RegExp;
>interpolate : RegExp
>RegExp : RegExp

        escape?: RegExp;
>escape : RegExp
>RegExp : RegExp

        variable?: string;
>variable : 文字
>类型别名 :=> 文字
    }

    export interface Static {
>Static : Static

        <T>(list: T[]): WrappedArray<T>;
>T : T
>list : T[]
>T : T
>WrappedArray : WrappedArray<T>
>T : T

        <T>(list: Dictionary<T>): WrappedDictionary<T>;
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>WrappedDictionary : WrappedDictionary<T>
>T : T

        <T extends Function>(func: T): WrappedFunction<T>;
>T : T
>Function : Function
>func : T
>T : T
>WrappedFunction : WrappedFunction<T>
>T : T

        <T>(obj: T): WrappedObject<T>;
>T : T
>obj : T
>T : T
>WrappedObject : WrappedObject<T>
>T : T

        chain<T>(list: T[]): ChainedArray<T>;
>chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
>T : T
>list : T[]
>T : T
>ChainedArray : ChainedArray<T>
>T : T

        chain<T>(list: Dictionary<T>): ChainedDictionary<T>;
>chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>ChainedDictionary : ChainedDictionary<T>
>T : T

        chain<T>(obj: T): ChainedObject<T>;
>chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
>T : T
>obj : T
>T : T
>ChainedObject : ChainedObject<T>
>T : T

        each<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
>each : { <T>(list: T[], iterator: Iterator_<T, 无值>, context?: 任意): 无值; <T>(list: Dictionary<T>, iterator: Iterator_<T, 无值>, context?: 任意): 无值; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        each<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
>each : { <T>(list: T[], iterator: Iterator_<T, 无值>, context?: 任意): 无值; <T>(list: Dictionary<T>, iterator: Iterator_<T, 无值>, context?: 任意): 无值; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        forEach<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
>forEach : { <T>(list: T[], iterator: Iterator_<T, 无值>, context?: 任意): 无值; <T>(list: Dictionary<T>, iterator: Iterator_<T, 无值>, context?: 任意): 无值; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        forEach<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
>forEach : { <T>(list: T[], iterator: Iterator_<T, 无值>, context?: 任意): 无值; <T>(list: Dictionary<T>, iterator: Iterator_<T, 无值>, context?: 任意): 无值; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 无值>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        map<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: 任意): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>T : T
>U : U
>list : T[]
>T : T
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        map<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: 任意): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>T : T
>U : U
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        collect<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
>collect : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: 任意): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>T : T
>U : U
>list : T[]
>T : T
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        collect<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
>collect : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: 任意): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>T : T
>U : U
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        reduce<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>list : T[]
>T : T
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        reduce<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>U : U
>list : T[]
>T : T
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        reduce<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        reduce<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>U : U
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        foldl<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>list : T[]
>T : T
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        foldl<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>U : U
>list : T[]
>T : T
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        foldl<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        foldl<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>U : U
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        inject<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>list : T[]
>T : T
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        inject<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>U : U
>list : T[]
>T : T
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        inject<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        inject<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>U : U
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        reduceRight<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>list : T[]
>T : T
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        reduceRight<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>U : U
>list : T[]
>T : T
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        reduceRight<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        reduceRight<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>U : U
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        foldr<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>list : T[]
>T : T
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        foldr<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>U : U
>list : T[]
>T : T
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        foldr<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Reducer<T, T>
>Reducer : Reducer<T, U>
>T : T
>T : T
>initialValue : T
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        foldr<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: 任意): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: 任意): U; }
>T : T
>U : U
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Reducer<T, U>
>Reducer : Reducer<T, U>
>T : T
>U : U
>initialValue : U
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        find<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
>find : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        find<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;
>find : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        detect<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
>detect : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        detect<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;
>detect : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        filter<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
>filter : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T[]; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        filter<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
>filter : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T[]; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        select<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
>select : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T[]; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        select<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
>select : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T[]; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        where<T>(list: T[], properties: Object): T[];
>where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
>T : T
>list : T[]
>T : T
>properties : Object
>Object : Object
>T : T

        where<T>(list: Dictionary<T>, properties: Object): T[];
>where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>properties : Object
>Object : Object
>T : T

        findWhere<T>(list: T[], properties: Object): T;
>findWhere : { <T>(list: T[], properties: Object): T; <T>(list: Dictionary<T>, properties: Object): T; }
>T : T
>list : T[]
>T : T
>properties : Object
>Object : Object
>T : T

        findWhere<T>(list: Dictionary<T>, properties: Object): T;
>findWhere : { <T>(list: T[], properties: Object): T; <T>(list: Dictionary<T>, properties: Object): T; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>properties : Object
>Object : Object
>T : T

        reject<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
>reject : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T[]; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        reject<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
>reject : { <T>(list: T[], iterator: Iterator_<T, 真假>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 真假>, context?: 任意): T[]; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        every<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
>every : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        every<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
>every : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        all<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
>all : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        all<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
>all : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        some<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
>some : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        some<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
>some : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        any<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
>any : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        any<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
>any : { <T>(list: T[], iterator?: Iterator_<T, 真假>, context?: 任意): 真假; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 真假>, context?: 任意): 真假; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 真假>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        contains<T>(list: T[], value: T): boolean;
>contains : { <T>(list: T[], value: T): 真假; <T>(list: Dictionary<T>, value: T): 真假; }
>T : T
>list : T[]
>T : T
>value : T
>T : T

        contains<T>(list: Dictionary<T>, value: T): boolean;
>contains : { <T>(list: T[], value: T): 真假; <T>(list: Dictionary<T>, value: T): 真假; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>value : T
>T : T

        include<T>(list: T[], value: T): boolean;
>include : { <T>(list: T[], value: T): 真假; <T>(list: Dictionary<T>, value: T): 真假; }
>T : T
>list : T[]
>T : T
>value : T
>T : T

        include<T>(list: Dictionary<T>, value: T): boolean;
>include : { <T>(list: T[], value: T): 真假; <T>(list: Dictionary<T>, value: T): 真假; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>value : T
>T : T

        invoke(list: any[], methodName: string, ...args: any[]): any[];
>invoke : { (list: 任意[], methodName: 文字, ...args: 任意[]): 任意[]; (list: Dictionary<任意>, methodName: 文字, ...args: 任意[]): 任意[]; }
>list : 任意[]
>methodName : 文字
>类型别名 :=> 文字
>args : 任意[]

        invoke(list: Dictionary<any>, methodName: string, ...args: any[]): any[];
>invoke : { (list: 任意[], methodName: 文字, ...args: 任意[]): 任意[]; (list: Dictionary<任意>, methodName: 文字, ...args: 任意[]): 任意[]; }
>list : Dictionary<任意>
>Dictionary : Dictionary<T>
>methodName : 文字
>类型别名 :=> 文字
>args : 任意[]

        pluck(list: any[], propertyName: string): any[];
>pluck : { (list: 任意[], propertyName: 文字): 任意[]; (list: Dictionary<任意>, propertyName: 文字): 任意[]; }
>list : 任意[]
>propertyName : 文字
>类型别名 :=> 文字

        pluck(list: Dictionary<any>, propertyName: string): any[];
>pluck : { (list: 任意[], propertyName: 文字): 任意[]; (list: Dictionary<任意>, propertyName: 文字): 任意[]; }
>list : Dictionary<任意>
>Dictionary : Dictionary<T>
>propertyName : 文字
>类型别名 :=> 文字

        max<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T;
>max : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): T; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        max<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T;
>max : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): T; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        min<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T;
>min : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): T; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        min<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T;
>min : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): T; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        sortBy<T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[];
>sortBy : { <T>(list: T[], iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: T[], propertyName: 文字): T[]; <T>(list: Dictionary<T>, propertyName: 文字): T[]; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        sortBy<T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[];
>sortBy : { <T>(list: T[], iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: T[], propertyName: 文字): T[]; <T>(list: Dictionary<T>, propertyName: 文字): T[]; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>T : T

        sortBy<T>(list: T[], propertyName: string): T[];
>sortBy : { <T>(list: T[], iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: T[], propertyName: 文字): T[]; <T>(list: Dictionary<T>, propertyName: 文字): T[]; }
>T : T
>list : T[]
>T : T
>propertyName : 文字
>类型别名 :=> 文字
>T : T

        sortBy<T>(list: Dictionary<T>, propertyName: string): T[];
>sortBy : { <T>(list: T[], iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, 任意>, context?: 任意): T[]; <T>(list: T[], propertyName: 文字): T[]; <T>(list: Dictionary<T>, propertyName: 文字): T[]; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>propertyName : 文字
>类型别名 :=> 文字
>T : T

        groupBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
>groupBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: T[], propertyName: 文字): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<T[]>; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>Dictionary : Dictionary<T>
>T : T

        groupBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
>groupBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: T[], propertyName: 文字): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<T[]>; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>Dictionary : Dictionary<T>
>T : T

        groupBy<T>(list: T[], propertyName: string): Dictionary<T[]>;
>groupBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: T[], propertyName: 文字): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<T[]>; }
>T : T
>list : T[]
>T : T
>propertyName : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>
>T : T

        groupBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>;
>groupBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<T[]>; <T>(list: T[], propertyName: 文字): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<T[]>; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>propertyName : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>
>T : T

        countBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
>countBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: T[], propertyName: 文字): Dictionary<数字>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<数字>; }
>T : T
>list : T[]
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>Dictionary : Dictionary<T>

        countBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
>countBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: T[], propertyName: 文字): Dictionary<数字>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<数字>; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意
>Dictionary : Dictionary<T>

        countBy<T>(list: T[], propertyName: string): Dictionary<number>;
>countBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: T[], propertyName: 文字): Dictionary<数字>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<数字>; }
>T : T
>list : T[]
>T : T
>propertyName : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>

        countBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<number>;
>countBy : { <T>(list: T[], iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, 任意>, context?: 任意): Dictionary<数字>; <T>(list: T[], propertyName: 文字): Dictionary<数字>; <T>(list: Dictionary<T>, propertyName: 文字): Dictionary<数字>; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>propertyName : 文字
>类型别名 :=> 文字
>Dictionary : Dictionary<T>

        shuffle<T>(list: T[]): T[];
>shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
>T : T
>list : T[]
>T : T
>T : T

        shuffle<T>(list: Dictionary<T>): T[];
>shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>T : T

        toArray<T>(list: T[]): T[];
>toArray : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
>T : T
>list : T[]
>T : T
>T : T

        toArray<T>(list: Dictionary<T>): T[];
>toArray : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T
>T : T

        size<T>(list: T[]): number;
>size : { <T>(list: T[]): 数字; <T>(list: Dictionary<T>): 数字; }
>T : T
>list : T[]
>T : T

        size<T>(list: Dictionary<T>): number;
>size : { <T>(list: T[]): 数字; <T>(list: Dictionary<T>): 数字; }
>T : T
>list : Dictionary<T>
>Dictionary : Dictionary<T>
>T : T

        first<T>(list: T[]): T;
>first : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>T : T
>list : T[]
>T : T
>T : T

        first<T>(list: T[], count: number): T[];
>first : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>T : T
>list : T[]
>T : T
>count : 数字
>类型别名 :=> 数字
>T : T

        head<T>(list: T[]): T;
>head : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>T : T
>list : T[]
>T : T
>T : T

        head<T>(list: T[], count: number): T[];
>head : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>T : T
>list : T[]
>T : T
>count : 数字
>类型别名 :=> 数字
>T : T

        take<T>(list: T[]): T;
>take : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>T : T
>list : T[]
>T : T
>T : T

        take<T>(list: T[], count: number): T[];
>take : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>T : T
>list : T[]
>T : T
>count : 数字
>类型别名 :=> 数字
>T : T

        initial<T>(list: T[]): T;
>initial : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>T : T
>list : T[]
>T : T
>T : T

        initial<T>(list: T[], count: number): T[];
>initial : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>T : T
>list : T[]
>T : T
>count : 数字
>类型别名 :=> 数字
>T : T

        last<T>(list: T[]): T;
>last : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>T : T
>list : T[]
>T : T
>T : T

        last<T>(list: T[], count: number): T[];
>last : { <T>(list: T[]): T; <T>(list: T[], count: 数字): T[]; }
>T : T
>list : T[]
>T : T
>count : 数字
>类型别名 :=> 数字
>T : T

        rest<T>(list: T[], index?: number): T[];
>rest : <T>(list: T[], index?: 数字) => T[]
>T : T
>list : T[]
>T : T
>index : 数字
>类型别名 :=> 数字
>T : T

        compact<T>(list: T[]): T[];
>compact : <T>(list: T[]) => T[]
>T : T
>list : T[]
>T : T
>T : T

        flatten<T>(list: T[][]): T[];
>flatten : { <T>(list: T[][]): T[]; <T>(array: 任意[], shallow?: 真假): T[]; }
>T : T
>list : T[][]
>T : T
>T : T

        flatten<T>(array: any[], shallow?: boolean): T[];
>flatten : { <T>(list: T[][]): T[]; <T>(array: 任意[], shallow?: 真假): T[]; }
>T : T
>array : 任意[]
>shallow : 真假
>类型别名 :=> 真假
>T : T

        without<T>(list: T[], ...values: T[]): T[];
>without : <T>(list: T[], ...values: T[]) => T[]
>T : T
>list : T[]
>T : T
>values : T[]
>T : T
>T : T

        union<T>(...arrays: T[][]): T[];
>union : <T>(...arrays: T[][]) => T[]
>T : T
>arrays : T[][]
>T : T
>T : T

        intersection<T>(...arrays: T[][]): T[];
>intersection : <T>(...arrays: T[][]) => T[]
>T : T
>arrays : T[][]
>T : T
>T : T

        difference<T>(list: T[], ...others: T[][]): T[];
>difference : <T>(list: T[], ...others: T[][]) => T[]
>T : T
>list : T[]
>T : T
>others : T[][]
>T : T
>T : T

        uniq<T>(list: T[], isSorted?: boolean): T[];
>uniq : { <T>(list: T[], isSorted?: 真假): T[]; <T, U>(list: T[], isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>T : T
>list : T[]
>T : T
>isSorted : 真假
>类型别名 :=> 真假
>T : T

        uniq<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
>uniq : { <T>(list: T[], isSorted?: 真假): T[]; <T, U>(list: T[], isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>T : T
>U : U
>list : T[]
>T : T
>isSorted : 真假
>类型别名 :=> 真假
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        unique<T>(list: T[], isSorted?: boolean): T[];
>unique : { <T>(list: T[], isSorted?: 真假): T[]; <T, U>(list: T[], isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>T : T
>list : T[]
>T : T
>isSorted : 真假
>类型别名 :=> 真假
>T : T

        unique<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
>unique : { <T>(list: T[], isSorted?: 真假): T[]; <T, U>(list: T[], isSorted: 真假, iterator: Iterator_<T, U>, context?: 任意): U[]; }
>T : T
>U : U
>list : T[]
>T : T
>isSorted : 真假
>类型别名 :=> 真假
>iterator : Iterator_<T, U>
>Iterator_ : Iterator_<T, U>
>T : T
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        zip<T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[];
>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: 任意[][]): 任意[][]; }
>T0 : T0
>T1 : T1
>a0 : T0[]
>T0 : T0
>a1 : T1[]
>T1 : T1
>Tuple2 : Tuple2<T0, T1>
>T0 : T0
>T1 : T1

        zip<T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[];
>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: 任意[][]): 任意[][]; }
>T0 : T0
>T1 : T1
>T2 : T2
>a0 : T0[]
>T0 : T0
>a1 : T1[]
>T1 : T1
>a2 : T2[]
>T2 : T2
>Tuple3 : Tuple3<T0, T1, T2>
>T0 : T0
>T1 : T1
>T2 : T2

        zip<T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[];
>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: 任意[][]): 任意[][]; }
>T0 : T0
>T1 : T1
>T2 : T2
>T3 : T3
>a0 : T0[]
>T0 : T0
>a1 : T1[]
>T1 : T1
>a2 : T2[]
>T2 : T2
>a3 : T3[]
>T3 : T3
>Tuple4 : Tuple4<T0, T1, T2, T3>
>T0 : T0
>T1 : T1
>T2 : T2
>T3 : T3

        zip(...arrays: any[][]): any[][];
>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: 任意[][]): 任意[][]; }
>arrays : 任意[][]

        object(list: any[][]): any;
>object : { (list: 任意[][]): 任意; (keys: 文字[], values: 任意[]): 任意; }
>list : 任意[][]

        object(keys: string[], values: any[]): any;
>object : { (list: 任意[][]): 任意; (keys: 文字[], values: 任意[]): 任意; }
>keys : 文字[]
>values : 任意[]

        indexOf<T>(list: T[], value: T, isSorted?: boolean): number;
>indexOf : <T>(list: T[], value: T, isSorted?: 真假) => 数字
>T : T
>list : T[]
>T : T
>value : T
>T : T
>isSorted : 真假
>类型别名 :=> 真假

        lastIndexOf<T>(list: T[], value: T, fromIndex?: number): number;
>lastIndexOf : <T>(list: T[], value: T, fromIndex?: 数字) => 数字
>T : T
>list : T[]
>T : T
>value : T
>T : T
>fromIndex : 数字
>类型别名 :=> 数字

        sortedIndex<T>(list: T[], obj: T, propertyName: string): number;
>sortedIndex : { <T>(list: T[], obj: T, propertyName: 文字): 数字; <T>(list: T[], obj: T, iterator?: Iterator_<T, 任意>, context?: 任意): 数字; }
>T : T
>list : T[]
>T : T
>obj : T
>T : T
>propertyName : 文字
>类型别名 :=> 文字

        sortedIndex<T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number;
>sortedIndex : { <T>(list: T[], obj: T, propertyName: 文字): 数字; <T>(list: T[], obj: T, iterator?: Iterator_<T, 任意>, context?: 任意): 数字; }
>T : T
>list : T[]
>T : T
>obj : T
>T : T
>iterator : Iterator_<T, 任意>
>Iterator_ : Iterator_<T, U>
>T : T
>context : 任意
>类型别名 :=> 任意

        range(stop: number): number[];
>range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>stop : 数字
>类型别名 :=> 数字

        range(start: number, stop: number, step?: number): number[];
>range : { (stop: 数字): 数字[]; (start: 数字, stop: 数字, step?: 数字): 数字[]; }
>start : 数字
>类型别名 :=> 数字
>stop : 数字
>类型别名 :=> 数字
>step : 数字
>类型别名 :=> 数字

        bind<T extends Function>(func: T, object: any): T;
>bind : { <T 扩展 Function>(func: T, object: 任意): T; (func: Function, object: 任意, ...args: 任意[]): Function; }
>T : T
>Function : Function
>func : T
>T : T
>object : 任意
>类型别名 :=> 任意
>T : T

        bind(func: Function, object: any, ...args: any[]): Function;
>bind : { <T 扩展 Function>(func: T, object: 任意): T; (func: Function, object: 任意, ...args: 任意[]): Function; }
>func : Function
>Function : Function
>object : 任意
>类型别名 :=> 任意
>args : 任意[]
>Function : Function

        bindAll<T>(object: T, ...methodNames: string[]): T;
>bindAll : <T>(object: T, ...methodNames: 文字[]) => T
>T : T
>object : T
>T : T
>methodNames : 文字[]
>T : T

        partial(func: Function, ...args: any[]): Function;
>partial : (func: Function, ...args: 任意[]) => Function
>func : Function
>Function : Function
>args : 任意[]
>Function : Function

        memoize<T extends Function>(func: T, hashFunction?: Function): T;
>memoize : <T 扩展 Function>(func: T, hashFunction?: Function) => T
>T : T
>Function : Function
>func : T
>T : T
>hashFunction : Function
>Function : Function
>T : T

        delay(func: Function, wait: number, ...args: any[]): number;
>delay : (func: Function, wait: 数字, ...args: 任意[]) => 数字
>func : Function
>Function : Function
>wait : 数字
>类型别名 :=> 数字
>args : 任意[]

        defer(func: Function, ...args: any[]): number;
>defer : (func: Function, ...args: 任意[]) => 数字
>func : Function
>Function : Function
>args : 任意[]

        throttle<T extends Function>(func: T, wait: number): T;
>throttle : <T 扩展 Function>(func: T, wait: 数字) => T
>T : T
>Function : Function
>func : T
>T : T
>wait : 数字
>类型别名 :=> 数字
>T : T

        debounce<T extends Function>(func: T, wait: number, immediate?: boolean): T;
>debounce : <T 扩展 Function>(func: T, wait: 数字, immediate?: 真假) => T
>T : T
>Function : Function
>func : T
>T : T
>wait : 数字
>类型别名 :=> 数字
>immediate : 真假
>类型别名 :=> 真假
>T : T

        once<T extends Function>(func: T): T;
>once : <T 扩展 Function>(func: T) => T
>T : T
>Function : Function
>func : T
>T : T
>T : T

        after<T extends Function>(count: number, func: T): T;
>after : <T 扩展 Function>(count: 数字, func: T) => T
>T : T
>Function : Function
>count : 数字
>类型别名 :=> 数字
>func : T
>T : T
>T : T

        wrap<T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any): T;
>wrap : <T 扩展 Function>(func: T, wrapper: (func: T, ...args: 任意[]) => 任意) => T
>T : T
>Function : Function
>func : T
>T : T
>wrapper : (func: T, ...args: 任意[]) => 任意
>func : T
>T : T
>args : 任意[]
>T : T

        compose(...funcs: Function[]): Function;
>compose : (...funcs: Function[]) => Function
>funcs : Function[]
>Function : Function
>Function : Function

        keys(object: any): string[];
>keys : (object: 任意) => 文字[]
>object : 任意
>类型别名 :=> 任意

        values(object: any): any[];
>values : (object: 任意) => 任意[]
>object : 任意
>类型别名 :=> 任意

        pairs(object: any): any[][];
>pairs : (object: 任意) => 任意[][]
>object : 任意
>类型别名 :=> 任意

        invert(object: any): any;
>invert : (object: 任意) => 任意
>object : 任意
>类型别名 :=> 任意

        functions(object: any): string[];
>functions : (object: 任意) => 文字[]
>object : 任意
>类型别名 :=> 任意

        methods(object: any): string[];
>methods : (object: 任意) => 文字[]
>object : 任意
>类型别名 :=> 任意

        extend<T>(destination: T, ...sources: any[]): T;
>extend : <T>(destination: T, ...sources: 任意[]) => T
>T : T
>destination : T
>T : T
>sources : 任意[]
>T : T

        pick<T>(object: T, ...keys: string[]): T;
>pick : <T>(object: T, ...keys: 文字[]) => T
>T : T
>object : T
>T : T
>keys : 文字[]
>T : T

        omit<T>(object: T, ...keys: string[]): T;
>omit : <T>(object: T, ...keys: 文字[]) => T
>T : T
>object : T
>T : T
>keys : 文字[]
>T : T

        defaults<T>(object: T, ...defaults: any[]): T;
>defaults : <T>(object: T, ...defaults: 任意[]) => T
>T : T
>object : T
>T : T
>defaults : 任意[]
>T : T

        clone<T>(object: T): T;
>clone : <T>(object: T) => T
>T : T
>object : T
>T : T
>T : T

        tap<T>(object: T, interceptor: (object: T) => void): T;
>tap : <T>(object: T, interceptor: (object: T) => 无值) => T
>T : T
>object : T
>T : T
>interceptor : (object: T) => 无值
>object : T
>T : T
>T : T

        has(object: any, key: string): boolean;
>has : (object: 任意, key: 文字) => 真假
>object : 任意
>类型别名 :=> 任意
>key : 文字
>类型别名 :=> 文字

        isEqual<T>(object: T, other: T): boolean;
>isEqual : <T>(object: T, other: T) => 真假
>T : T
>object : T
>T : T
>other : T
>T : T

        isEmpty(object: any): boolean;
>isEmpty : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isElement(object: any): boolean;
>isElement : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isArray(object: any): boolean;
>isArray : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isObject(value: any): boolean;
>isObject : (value: 任意) => 真假
>value : 任意
>类型别名 :=> 任意

        isArguments(object: any): boolean;
>isArguments : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isFunction(object: any): boolean;
>isFunction : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isString(object: any): boolean;
>isString : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isNumber(object: any): boolean;
>isNumber : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isFinite(object: any): boolean;
>isFinite : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isBoolean(object: any): boolean;
>isBoolean : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isDate(object: any): boolean;
>isDate : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isRegExp(object: any): boolean;
>isRegExp : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isNaN(object: any): boolean;
>isNaN : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isNull(object: any): boolean;
>isNull : (object: 任意) => 真假
>object : 任意
>类型别名 :=> 任意

        isUndefined(value: any): boolean;
>isUndefined : (value: 任意) => 真假
>value : 任意
>类型别名 :=> 任意

        noConflict(): Static;
>noConflict : () => Static
>Static : Static

        identity<T>(value: T): T;
>identity : <T>(value: T) => T
>T : T
>value : T
>T : T
>T : T

        times<U>(n: number, iterator: Iterator_<number, U>, context?: any): U[];
>times : <U>(n: 数字, iterator: Iterator_<数字, U>, context?: 任意) => U[]
>U : U
>n : 数字
>类型别名 :=> 数字
>iterator : Iterator_<数字, U>
>Iterator_ : Iterator_<T, U>
>U : U
>context : 任意
>类型别名 :=> 任意
>U : U

        random(max: number): number;
>random : { (max: 数字): 数字; (min: 数字, max: 数字): 数字; }
>max : 数字
>类型别名 :=> 数字

        random(min: number, max: number): number;
>random : { (max: 数字): 数字; (min: 数字, max: 数字): 数字; }
>min : 数字
>类型别名 :=> 数字
>max : 数字
>类型别名 :=> 数字

        mixin(object: any): void;
>mixin : (object: 任意) => 无值
>object : 任意
>类型别名 :=> 任意

        uniqueId(): number;
>uniqueId : { (): 数字; (prefix: 文字): 文字; }

        uniqueId(prefix: string): string;
>uniqueId : { (): 数字; (prefix: 文字): 文字; }
>prefix : 文字
>类型别名 :=> 文字

        escape(s: string): string;
>escape : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字

        unescape(s: string): string;
>unescape : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字

        result(object: any, property: string): any;
>result : (object: 任意, property: 文字) => 任意
>object : 任意
>类型别名 :=> 任意
>property : 文字
>类型别名 :=> 文字

        templateSettings: TemplateSettings;
>templateSettings : TemplateSettings
>TemplateSettings : TemplateSettings

        template(templateString: string): (data: any) => string;
>template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: TemplateSettings): 文字; }
>templateString : 文字
>类型别名 :=> 文字
>data : 任意
>类型别名 :=> 任意

        template(templateString: string, data: any, settings?: TemplateSettings): string;
>template : { (templateString: 文字): (data: 任意) => 文字; (templateString: 文字, data: 任意, settings?: TemplateSettings): 文字; }
>templateString : 文字
>类型别名 :=> 文字
>data : 任意
>类型别名 :=> 任意
>settings : TemplateSettings
>TemplateSettings : TemplateSettings
    }
}

declare var _: Underscore.Static;
>_ : Underscore.Static
>Underscore : 任意
>类型别名 :=> 任意
>Static : Underscore.Static

