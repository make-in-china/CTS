=== tests/cases/conformance/expressions/functionCalls/functionCalls.ts ===
// Invoke function call on value of type 'any' with no type arguments
var anyVar: any;
>anyVar : any
>类型别名 :=> 任意

anyVar(0);
>anyVar(0) : any
>类型别名 :=> 任意
>anyVar : any
>类型别名 :=> 任意
>0 : 0

anyVar('');
>anyVar('') : any
>类型别名 :=> 任意
>anyVar : any
>类型别名 :=> 任意
>'' : ""

// Invoke function call on value of type 'any' with type arguments
// These should be errors
anyVar<string>('hello');
>anyVar<string>('hello') : any
>类型别名 :=> 任意
>anyVar : any
>类型别名 :=> 任意
>'hello' : "hello"

anyVar<number>();
>anyVar<number>() : any
>类型别名 :=> 任意
>anyVar : any
>类型别名 :=> 任意

anyVar<Window>(undefined);
>anyVar<Window>(undefined) : any
>类型别名 :=> 任意
>anyVar : any
>类型别名 :=> 任意
>Window : No type information available!
>undefined : undefined
>类型别名 :=> 未定


// Invoke function call on value of a subtype of Function with no call signatures with no type arguments
interface SubFunc extends Function {
>SubFunc : SubFunc
>Function : Function

    prop: number;
>prop : number
>类型别名 :=> 数字
}
var subFunc: SubFunc;
>subFunc : SubFunc
>SubFunc : SubFunc

subFunc(0);
>subFunc(0) : any
>类型别名 :=> 任意
>subFunc : SubFunc
>0 : 0

subFunc('');
>subFunc('') : any
>类型别名 :=> 任意
>subFunc : SubFunc
>'' : ""

subFunc();
>subFunc() : any
>类型别名 :=> 任意
>subFunc : SubFunc


// Invoke function call on value of a subtype of Function with no call signatures with type arguments
// These should be errors
subFunc<number>(0);
>subFunc<number>(0) : any
>类型别名 :=> 任意
>subFunc : SubFunc
>0 : 0

subFunc<string>('');
>subFunc<string>('') : any
>类型别名 :=> 任意
>subFunc : SubFunc
>'' : ""

subFunc<any>();
>subFunc<any>() : any
>类型别名 :=> 任意
>subFunc : SubFunc

// Invoke function call on value of type Function with no call signatures with type arguments
// These should be errors
var func: Function;
>func : Function
>Function : Function

func<number>(0);
>func<number>(0) : any
>类型别名 :=> 任意
>func : Function
>0 : 0

func<string>('');
>func<string>('') : any
>类型别名 :=> 任意
>func : Function
>'' : ""

func<any>();
>func<any>() : any
>类型别名 :=> 任意
>func : Function

