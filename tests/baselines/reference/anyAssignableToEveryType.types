=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/anyAssignableToEveryType.ts ===
var a: any;
>a : any
>类型别名 :=> 任意

class C {
>C : C

    foo: string;
>foo : string
>类型别名 :=> 文字
}
var ac: C;
>ac : C
>C : C

interface I {
>I : I

    foo: string;
>foo : string
>类型别名 :=> 文字
}
var ai: I;
>ai : I
>I : I

enum E { A }
>E : E
>A : E

var ae: E;
>ae : E
>E : E

var b: number = a;
>b : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意

var c: string = a;
>c : string
>类型别名 :=> 文字
>a : any
>类型别名 :=> 任意

var d: boolean = a;
>d : boolean
>类型别名 :=> 真假
>a : any
>类型别名 :=> 任意

var e: Date = a;
>e : Date
>Date : Date
>a : any
>类型别名 :=> 任意

var f: any = a;
>f : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

var g: void = a;
>g : void
>类型别名 :=> 无值
>a : any
>类型别名 :=> 任意

var h: Object = a;
>h : Object
>Object : Object
>a : any
>类型别名 :=> 任意

var i: {} = a;
>i : {}
>a : any
>类型别名 :=> 任意

var j: () => {} = a;
>j : () => {}
>a : any
>类型别名 :=> 任意

var k: Function = a;
>k : Function
>Function : Function
>a : any
>类型别名 :=> 任意

var l: (x: number) => string = a;
>l : (x: number) => string
>x : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意

ac = a;
>ac = a : any
>类型别名 :=> 任意
>ac : C
>a : any
>类型别名 :=> 任意

ai = a;
>ai = a : any
>类型别名 :=> 任意
>ai : I
>a : any
>类型别名 :=> 任意

ae = a;
>ae = a : any
>类型别名 :=> 任意
>ae : E
>a : any
>类型别名 :=> 任意

var m: number[] = a;
>m : number[]
>a : any
>类型别名 :=> 任意

var n: { foo: string } = a;
>n : { foo: string; }
>foo : string
>类型别名 :=> 文字
>a : any
>类型别名 :=> 任意

var o: <T>(x: T) => T = a;
>o : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
>a : any
>类型别名 :=> 任意

var p: Number = a;
>p : Number
>Number : Number
>a : any
>类型别名 :=> 任意

var q: String = a;
>q : String
>String : String
>a : any
>类型别名 :=> 任意

function foo<T, U /*extends T*/, V extends Date>(x: T, y: U, z: V) {
>foo : <T, U, V extends Date>(x: T, y: U, z: V) => void
>T : T
>U : U
>V : V
>Date : Date
>x : T
>T : T
>y : U
>U : U
>z : V
>V : V

    x = a;
>x = a : any
>类型别名 :=> 任意
>x : T
>a : any
>类型别名 :=> 任意

    y = a;
>y = a : any
>类型别名 :=> 任意
>y : U
>a : any
>类型别名 :=> 任意

    z = a;
>z = a : any
>类型别名 :=> 任意
>z : V
>a : any
>类型别名 :=> 任意
}

//function foo<T, U extends T, V extends Date>(x: T, y: U, z: V) {
//    x = a;
//    y = a;
//    z = a;
//}
