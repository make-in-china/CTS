=== tests/cases/conformance/statements/switchStatements/switchStatements.ts ===
module M {
>M : typeof M

    export function fn(x: number) {
>fn : (x: number) => string
>x : number
>类型别名 :=> 数字

        return '';
>'' : ""
    }
}

var x: any;
>x : any
>类型别名 :=> 任意

switch (x) {
>x : any
>类型别名 :=> 任意

    case '':
>'' : ""

    case 12:
>12 : 12

    case true:
>true : true
>类型别名 :=> 为真

    case null:
>null : null
>类型别名 :=> 空值

    case undefined:
>undefined : undefined
>类型别名 :=> 未定

    case new Date(12):
>new Date(12) : Date
>Date : DateConstructor
>12 : 12

    case new Object():
>new Object() : Object
>Object : ObjectConstructor

    case /[a-z]/:
>/[a-z]/ : RegExp

    case[]:
>[] : undefined[]

    case {}:
>{} : {}

    case { id: 12 }:
>{ id: 12 } : { id: number; }
>id : number
>类型别名 :=> 数字
>12 : 12

    case['a']:
>['a'] : string[]
>'a' : "a"

    case typeof x:
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : any
>类型别名 :=> 任意

    case typeof M:
>typeof M : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>M : typeof M

    case M.fn(1):
>M.fn(1) : string
>类型别名 :=> 文字
>M.fn : (x: number) => string
>M : typeof M
>fn : (x: number) => string
>1 : 1

    case <T>(x: number) => '':
><T>(x: number) => '' : <T>(x: number) => string
>T : T
>x : number
>类型别名 :=> 数字
>'' : ""

    case (<T>(x: number) => '')(2):
>(<T>(x: number) => '')(2) : string
>类型别名 :=> 文字
>(<T>(x: number) => '') : <T>(x: number) => string
><T>(x: number) => '' : <T>(x: number) => string
>T : T
>x : number
>类型别名 :=> 数字
>'' : ""
>2 : 2

    default:
}

// basic assignable check, rest covered in tests for 'assignement compatibility'
class C { id: number; }
>C : C
>id : number
>类型别名 :=> 数字

class D extends C { name: string }
>D : D
>C : C
>name : string
>类型别名 :=> 文字

switch (new C()) {
>new C() : C
>C : typeof C

    case new D():
>new D() : D
>D : typeof D

    case { id: 12, name: '' }:
>{ id: 12, name: '' } : { id: number; name: string; }
>id : number
>类型别名 :=> 数字
>12 : 12
>name : string
>类型别名 :=> 文字
>'' : ""

    case new C():
>new C() : C
>C : typeof C
}

switch ('') { }
>'' : ""

switch (12) { }
>12 : 12

switch (true) { }
>true : true
>类型别名 :=> 为真

switch (null) { }
>null : null
>类型别名 :=> 空值

switch (undefined) { }
>undefined : undefined
>类型别名 :=> 未定

switch (new Date(12)) { }
>new Date(12) : Date
>Date : DateConstructor
>12 : 12

switch (new Object()) { }
>new Object() : Object
>Object : ObjectConstructor

switch (/[a-z]/) { }
>/[a-z]/ : RegExp

switch ([]) { }
>[] : undefined[]

switch ({}) { }
>{} : {}

switch ({ id: 12 }) { }
>{ id: 12 } : { id: number; }
>id : number
>类型别名 :=> 数字
>12 : 12

switch (['a']) { }
>['a'] : string[]
>'a' : "a"

switch (<T>(x: number) => '') { }
><T>(x: number) => '' : <T>(x: number) => string
>T : T
>x : number
>类型别名 :=> 数字
>'' : ""

switch ((<T>(x: T) => '')(1)) { }
>(<T>(x: T) => '')(1) : string
>类型别名 :=> 文字
>(<T>(x: T) => '') : <T>(x: T) => string
><T>(x: T) => '' : <T>(x: T) => string
>T : T
>x : T
>T : T
>'' : ""
>1 : 1



