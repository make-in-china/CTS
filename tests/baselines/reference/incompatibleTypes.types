=== tests/cases/compiler/incompatibleTypes.ts ===
interface IFoo1 {
>IFoo1 : IFoo1

    p1(): number;
>p1 : () => 数字
}

class C1 implements IFoo1 { // incompatible on the return type
>C1 : C1
>IFoo1 : IFoo1

    public p1() {
>p1 : () => 文字

        return "s";
>"s" : "s"
    }
}

interface IFoo2 {
>IFoo2 : IFoo2

    p1(s:string): number;
>p1 : (s: 文字) => 数字
>s : 文字
>类型别名 :=> 文字
}

class C2 implements IFoo2 { // incompatible on the param type
>C2 : C2
>IFoo2 : IFoo2

    public p1(n:number) {
>p1 : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字

        return 0;
>0 : 0
    }
}

interface IFoo3 {
>IFoo3 : IFoo3

    p1: string;
>p1 : 文字
>类型别名 :=> 文字
}

class C3 implements IFoo3 { // incompatible on the property type
>C3 : C3
>IFoo3 : IFoo3

    public p1: number;
>p1 : 数字
>类型别名 :=> 数字
}

interface IFoo4 {
>IFoo4 : IFoo4

    p1: { a: { a: string; }; b: string; };
>p1 : { a: { a: 文字; }; b: 文字; }
>a : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字
}

class C4 implements IFoo4 { // incompatible on the property type
>C4 : C4
>IFoo4 : IFoo4

    public p1: { c: { b: string; }; d: string; };
>p1 : { c: { b: 文字; }; d: 文字; }
>c : { b: 文字; }
>b : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字
}

function if1(i: IFoo1): void;
>if1 : { (i: IFoo1): 无值; (i: IFoo2): 无值; }
>i : IFoo1
>IFoo1 : IFoo1

function if1(i: IFoo2): void;
>if1 : { (i: IFoo1): 无值; (i: IFoo2): 无值; }
>i : IFoo2
>IFoo2 : IFoo2

function if1(a: any) { }
>if1 : { (i: IFoo1): 无值; (i: IFoo2): 无值; }
>a : 任意
>类型别名 :=> 任意

var c1: C1;
>c1 : C1
>C1 : C1

var c2: C2;
>c2 : C2
>C2 : C2

if1(c1);
>if1(c1) : 任意
>类型别名 :=> 任意
>if1 : { (i: IFoo1): 无值; (i: IFoo2): 无值; }
>c1 : C1


function of1(n: { a: { a: string; }; b: string; }): number;
>of1 : { (n: { a: { a: 文字; }; b: 文字; }): 数字; (s: { c: { b: 文字; }; d: 文字; }): 文字; }
>n : { a: { a: 文字; }; b: 文字; }
>a : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字

function of1(s: { c: { b: string; }; d: string; }): string;
>of1 : { (n: { a: { a: 文字; }; b: 文字; }): 数字; (s: { c: { b: 文字; }; d: 文字; }): 文字; }
>s : { c: { b: 文字; }; d: 文字; }
>c : { b: 文字; }
>b : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字

function of1(a: any) { return null; }
>of1 : { (n: { a: { a: 文字; }; b: 文字; }): 数字; (s: { c: { b: 文字; }; d: 文字; }): 文字; }
>a : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

of1({ e: 0, f: 0 });
>of1({ e: 0, f: 0 }) : 任意
>类型别名 :=> 任意
>of1 : { (n: { a: { a: 文字; }; b: 文字; }): 数字; (s: { c: { b: 文字; }; d: 文字; }): 文字; }
>{ e: 0, f: 0 } : { e: 数字; f: 数字; }
>e : 数字
>类型别名 :=> 数字
>0 : 0
>f : 数字
>类型别名 :=> 数字
>0 : 0

interface IMap {
>IMap : IMap

 [key:string]:string;
>key : 文字
>类型别名 :=> 文字
}

function foo(fn:() => void) {
>foo : (fn: () => 无值) => 无值
>fn : () => 无值
 
}

function bar() {
>bar : () => 无值

 var map:IMap;
>map : IMap
>IMap : IMap

 foo(() => {
>foo(() => {  map = {}; }) : 无值
>类型别名 :=> 无值
>foo : (fn: () => 无值) => 无值
>() => {  map = {}; } : () => 无值

  map = {};
>map = {} : {}
>map : IMap
>{} : {}

 });
}

var o1: { a: { a: string; }; b: string; } = { e: 0, f: 0 };
>o1 : { a: { a: 文字; }; b: 文字; }
>a : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字
>{ e: 0, f: 0 } : { e: 数字; f: 数字; }
>e : 数字
>类型别名 :=> 数字
>0 : 0
>f : 数字
>类型别名 :=> 数字
>0 : 0

var a1 = [{ e: 0, f: 0 }, { e: 0, f: 0 }, { e: 0, g: 0 }];
>a1 : ({ e: 数字; f: 数字; } | { e: 数字; g: 数字; })[]
>[{ e: 0, f: 0 }, { e: 0, f: 0 }, { e: 0, g: 0 }] : ({ e: 数字; f: 数字; } | { e: 数字; g: 数字; })[]
>{ e: 0, f: 0 } : { e: 数字; f: 数字; }
>e : 数字
>类型别名 :=> 数字
>0 : 0
>f : 数字
>类型别名 :=> 数字
>0 : 0
>{ e: 0, f: 0 } : { e: 数字; f: 数字; }
>e : 数字
>类型别名 :=> 数字
>0 : 0
>f : 数字
>类型别名 :=> 数字
>0 : 0
>{ e: 0, g: 0 } : { e: 数字; g: 数字; }
>e : 数字
>类型别名 :=> 数字
>0 : 0
>g : 数字
>类型别名 :=> 数字
>0 : 0



var i1c1: { (): string; } = 5;
>i1c1 : () => 文字
>5 : 5

var fp1: () =>any = a => 0;
>fp1 : () => 任意
>a => 0 : (a: 任意) => 数字
>a : 任意
>类型别名 :=> 任意
>0 : 0

