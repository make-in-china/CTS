=== tests/cases/conformance/types/contextualTypes/jsxAttributes/file.tsx ===
import React = require('react')
>React : 类为 React

export interface ClickableProps {
>ClickableProps : ClickableProps

    children?: string;
>children : 文字
>类型别名 :=> 文字

    className?: string;
>className : 文字
>类型别名 :=> 文字
}

export interface ButtonProps extends ClickableProps {
>ButtonProps : ButtonProps
>ClickableProps : ClickableProps

    onClick: (k: "left" | "right") => void;
>onClick : (k: "left" | "right") => 无值
>k : "left" | "right"
}

export interface LinkProps extends ClickableProps {
>LinkProps : LinkProps
>ClickableProps : ClickableProps

    goTo: "home" | "contact";
>goTo : "home" | "contact"
}

export function MainButton(buttonProps: ButtonProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>buttonProps : ButtonProps
>ButtonProps : ButtonProps
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

export function MainButton(linkProps: LinkProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>linkProps : LinkProps
>LinkProps : LinkProps
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

export function MainButton(props: ButtonProps | LinkProps): JSX.Element {
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>props : ButtonProps | LinkProps
>ButtonProps : ButtonProps
>LinkProps : LinkProps
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

    const linkProps = props as LinkProps;
>linkProps : LinkProps
>props as LinkProps : LinkProps
>props : ButtonProps | LinkProps
>LinkProps : LinkProps

    if(linkProps.goTo) {
>linkProps.goTo : "home" | "contact"
>linkProps : LinkProps
>goTo : "home" | "contact"

        return this._buildMainLink(props);
>this._buildMainLink(props) : 任意
>类型别名 :=> 任意
>this._buildMainLink : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>_buildMainLink : 任意
>类型别名 :=> 任意
>props : ButtonProps | LinkProps
    }

    return this._buildMainButton(props);
>this._buildMainButton(props) : 任意
>类型别名 :=> 任意
>this._buildMainButton : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>_buildMainButton : 任意
>类型别名 :=> 任意
>props : ButtonProps | LinkProps
}

const b0 = <MainButton {...{onClick: (k) => {console.log(k)}}} extra />;  // k has type "left" | "right"
>b0 : JSX.Element
><MainButton {...{onClick: (k) => {console.log(k)}}} extra /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>{onClick: (k) => {console.log(k)}} : { onClick: (k: "left" | "right") => 无值; }
>onClick : (k: "left" | "right") => 无值
>(k) => {console.log(k)} : (k: "left" | "right") => 无值
>k : "left" | "right"
>console.log(k) : 无值
>类型别名 :=> 无值
>console.log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>console : Console
>log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>k : "left" | "right"
>extra : 为真
>类型别名 :=> 为真

const b2 = <MainButton onClick={(k)=>{console.log(k)}} extra />;  // k has type "left" | "right"
>b2 : JSX.Element
><MainButton onClick={(k)=>{console.log(k)}} extra /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>onClick : (k: "left" | "right") => 无值
>(k)=>{console.log(k)} : (k: "left" | "right") => 无值
>k : "left" | "right"
>console.log(k) : 无值
>类型别名 :=> 无值
>console.log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>console : Console
>log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>k : "left" | "right"
>extra : 为真
>类型别名 :=> 为真

const b3 = <MainButton {...{goTo:"home"}} extra />;  // goTo has type"home" | "contact"
>b3 : JSX.Element
><MainButton {...{goTo:"home"}} extra /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>{goTo:"home"} : { goTo: "home"; }
>goTo : 文字
>类型别名 :=> 文字
>"home" : "home"
>extra : 为真
>类型别名 :=> 为真

const b4 = <MainButton goTo="home" extra />;  // goTo has type "home" | "contact"
>b4 : JSX.Element
><MainButton goTo="home" extra /> : JSX.Element
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>goTo : 文字
>类型别名 :=> 文字
>extra : 为真
>类型别名 :=> 为真

export function NoOverload(buttonProps: ButtonProps): JSX.Element { return undefined }
>NoOverload : (buttonProps: ButtonProps) => JSX.Element
>buttonProps : ButtonProps
>ButtonProps : ButtonProps
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element
>undefined : 未定
>类型别名 :=> 未定

const c1 = <NoOverload  {...{onClick: (k) => {console.log(k)}}} extra />;  // k has type any
>c1 : JSX.Element
><NoOverload  {...{onClick: (k) => {console.log(k)}}} extra /> : JSX.Element
>NoOverload : (buttonProps: ButtonProps) => JSX.Element
>{onClick: (k) => {console.log(k)}} : { onClick: (k: "left" | "right") => 无值; }
>onClick : (k: "left" | "right") => 无值
>(k) => {console.log(k)} : (k: "left" | "right") => 无值
>k : "left" | "right"
>console.log(k) : 无值
>类型别名 :=> 无值
>console.log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>console : Console
>log : (message?: 任意, ...optionalParams: 任意[]) => 无值
>k : "left" | "right"
>extra : 为真
>类型别名 :=> 为真

export function NoOverload1(linkProps: LinkProps): JSX.Element { return undefined }
>NoOverload1 : (linkProps: LinkProps) => JSX.Element
>linkProps : LinkProps
>LinkProps : LinkProps
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element
>undefined : 未定
>类型别名 :=> 未定

const d1 = <NoOverload1 {...{goTo:"home"}} extra  />;  // goTo has type "home" | "contact"
>d1 : JSX.Element
><NoOverload1 {...{goTo:"home"}} extra  /> : JSX.Element
>NoOverload1 : (linkProps: LinkProps) => JSX.Element
>{goTo:"home"} : { goTo: "home"; }
>goTo : 文字
>类型别名 :=> 文字
>"home" : "home"
>extra : 为真
>类型别名 :=> 为真

