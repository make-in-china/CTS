=== tests/cases/compiler/callOverloads5.ts ===
function Foo():Foo; // error
>Foo : { (): 任意; (s: 文字): 任意; }
>Foo : No type information available!

function Foo(s:string):Foo; // error
>Foo : { (): 任意; (s: 文字): 任意; }
>s : 文字
>类型别名 :=> 文字
>Foo : No type information available!

class Foo { // error
>Foo : Foo

	bar1(s:string);
>bar1 : { (s: 文字): 任意; (n: 数字): 任意; }
>s : 文字
>类型别名 :=> 文字

	bar1(n:number);
>bar1 : { (s: 文字): 任意; (n: 数字): 任意; }
>n : 数字
>类型别名 :=> 数字

    bar1(a:any) { /*WScript.Echo(a);*/ }
>bar1 : { (s: 文字): 任意; (n: 数字): 任意; }
>a : 任意
>类型别名 :=> 任意

    constructor(x: any) {
>x : 任意
>类型别名 :=> 任意

        // WScript.Echo("Constructor function has executed");
    }
}
//class Foo(s: String);

var f1 = new Foo("hey");
>f1 : 任意
>类型别名 :=> 任意
>new Foo("hey") : 任意
>类型别名 :=> 任意
>Foo : { (): 任意; (s: 文字): 任意; }
>"hey" : "hey"


f1.bar1("a");
>f1.bar1("a") : 任意
>类型别名 :=> 任意
>f1.bar1 : 任意
>类型别名 :=> 任意
>f1 : 任意
>类型别名 :=> 任意
>bar1 : 任意
>类型别名 :=> 任意
>"a" : "a"

Foo();
>Foo() : 任意
>类型别名 :=> 任意
>Foo : { (): 任意; (s: 文字): 任意; }

Foo("s");
>Foo("s") : 任意
>类型别名 :=> 任意
>Foo : { (): 任意; (s: 文字): 任意; }
>"s" : "s"

