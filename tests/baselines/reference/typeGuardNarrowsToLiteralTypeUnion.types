=== tests/cases/conformance/expressions/typeGuards/typeGuardNarrowsToLiteralTypeUnion.ts ===
declare function isFoo(value: string) : value is ("foo" | "bar");
>isFoo : (value: 文字) => value 作为 "foo" | "bar"
>value : 文字
>类型别名 :=> 文字
>value : 任意
>类型别名 :=> 任意

declare function doThis(value: "foo" | "bar"): void;
>doThis : (value: "foo" | "bar") => 无值
>value : "foo" | "bar"

declare function doThat(value: string) : void;
>doThat : (value: 文字) => 无值
>value : 文字
>类型别名 :=> 文字

let value: string;
>value : 文字
>类型别名 :=> 文字

if (isFoo(value)) {
>isFoo(value) : 真假
>类型别名 :=> 真假
>isFoo : (value: 文字) => value 作为 "foo" | "bar"
>value : 文字
>类型别名 :=> 文字

    doThis(value);
>doThis(value) : 无值
>类型别名 :=> 无值
>doThis : (value: "foo" | "bar") => 无值
>value : "foo" | "bar"

} else {
    doThat(value);
>doThat(value) : 无值
>类型别名 :=> 无值
>doThat : (value: 文字) => 无值
>value : 文字
>类型别名 :=> 文字
}


