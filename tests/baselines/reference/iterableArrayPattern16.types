=== tests/cases/conformance/es6/destructuring/iterableArrayPattern16.ts ===
function fun(...[a, b]: [Bar, Bar][]) { }
>fun : (...[a, b]: [Bar, Bar][]) => 无值
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>Bar : Bar
>Bar : Bar

fun(...new FooIteratorIterator);
>fun(...new FooIteratorIterator) : 无值
>类型别名 :=> 无值
>fun : (...[a, b]: [Bar, Bar][]) => 无值
>...new FooIteratorIterator : 任意
>类型别名 :=> 任意
>new FooIteratorIterator : FooIteratorIterator
>FooIteratorIterator : 类为 FooIteratorIterator

class Bar { x }
>Bar : Bar
>x : 任意
>类型别名 :=> 任意

class Foo extends Bar { y }
>Foo : Foo
>Bar : Bar
>y : 任意
>类型别名 :=> 任意

class FooIterator {
>FooIterator : FooIterator

    next() {
>next : () => { value: Foo; done: 真假; }

        return {
>{            value: new Foo,            done: false        } : { value: Foo; done: 真假; }

            value: new Foo,
>value : Foo
>new Foo : Foo
>Foo : 类为 Foo

            done: false
>done : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号

        return this;
>this : 本体
    }
}

class FooIteratorIterator {
>FooIteratorIterator : FooIteratorIterator

    next() {
>next : () => { value: FooIterator; done: 真假; }

        return {
>{            value: new FooIterator,            done: false        } : { value: FooIterator; done: 真假; }

            value: new FooIterator,
>value : FooIterator
>new FooIterator : FooIterator
>FooIterator : 类为 FooIterator

            done: false
>done : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号

        return this;
>this : 本体
    }
}
