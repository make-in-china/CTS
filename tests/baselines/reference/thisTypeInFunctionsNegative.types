=== tests/cases/conformance/types/thisType/thisTypeInFunctionsNegative.ts ===
class C {
>C : C

    n: number;
>n : 数字
>类型别名 :=> 数字

    explicitThis(this: this, m: number): number {
>explicitThis : (this: 本体, m: 数字) => 数字
>this : 本体
>m : 数字
>类型别名 :=> 数字

        return this.n + m;
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : 本体
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
    }
    implicitThis(m: number): number {
>implicitThis : (m: 数字) => 数字
>m : 数字
>类型别名 :=> 数字

        return this.n + m;
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : 本体
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
    }
    explicitC(this: C, m: number): number {
>explicitC : (this: C, m: 数字) => 数字
>this : C
>C : C
>m : 数字
>类型别名 :=> 数字

        return this.n + m;
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : C
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
    }
    explicitProperty(this: {n: number}, m: number): number {
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>this : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

        return this.n + m;
>this.n + m : 数字
>类型别名 :=> 数字
>this.n : 数字
>类型别名 :=> 数字
>this : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
    }
    explicitVoid(this: void, m: number): number {
>explicitVoid : (this: 无值, m: 数字) => 数字
>this : 无值
>类型别名 :=> 无值
>m : 数字
>类型别名 :=> 数字

		return this.n + m; // 'n' doesn't exist on type 'void'.
>this.n + m : 任意
>类型别名 :=> 任意
>this.n : 任意
>类型别名 :=> 任意
>this : 无值
>类型别名 :=> 无值
>n : 任意
>类型别名 :=> 任意
>m : 数字
>类型别名 :=> 数字
    }
}
class D {
>D : D

	x: number;
>x : 数字
>类型别名 :=> 数字

	explicitThis(this: this, m: number): number {
>explicitThis : (this: 本体, m: 数字) => 数字
>this : 本体
>m : 数字
>类型别名 :=> 数字

		return this.x + m;
>this.x + m : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
	}
	explicitD(this: D, m: number): number {
>explicitD : (this: D, m: 数字) => 数字
>this : D
>D : D
>m : 数字
>类型别名 :=> 数字

		return this.x + m;
>this.x + m : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : D
>x : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字
	}
}
interface I {
>I : I

    a: number;
>a : 数字
>类型别名 :=> 数字

    explicitVoid1(this: void): number;
>explicitVoid1 : (this: 无值) => 数字
>this : 无值
>类型别名 :=> 无值

    explicitVoid2(this: void): number;
>explicitVoid2 : (this: 无值) => 数字
>this : 无值
>类型别名 :=> 无值

    explicitStructural(this: {a: number}): number;
>explicitStructural : (this: { a: 数字; }) => 数字
>this : { a: 数字; }
>a : 数字
>类型别名 :=> 数字

    explicitInterface(this: I): number;
>explicitInterface : (this: I) => 数字
>this : I
>I : I

    explicitThis(this: this): number; // TODO: Allow `this` types for interfaces
>explicitThis : (this: 本体) => 数字
>this : 本体
}
let impl: I = {
>impl : I
>I : I
>{    a: 12,    explicitVoid1() {        return this.a; // error, no 'a' in 'void'    },    explicitVoid2: () => this.a, // ok, `this:any` because it refers to an outer object    explicitStructural: () => 12,    explicitInterface: () => 12,    explicitThis() {        return this.a;    },} : { a: 数字; explicitVoid1(this: 无值): 任意; explicitVoid2: () => 任意; explicitStructural: () => 数字; explicitInterface: () => 数字; explicitThis(this: I): 数字; }

    a: 12,
>a : 数字
>类型别名 :=> 数字
>12 : 12

    explicitVoid1() {
>explicitVoid1 : (this: 无值) => 任意

        return this.a; // error, no 'a' in 'void'
>this.a : 任意
>类型别名 :=> 任意
>this : 无值
>类型别名 :=> 无值
>a : 任意
>类型别名 :=> 任意

    },
    explicitVoid2: () => this.a, // ok, `this:any` because it refers to an outer object
>explicitVoid2 : () => 任意
>() => this.a : () => 任意
>this.a : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

    explicitStructural: () => 12,
>explicitStructural : () => 数字
>() => 12 : () => 数字
>12 : 12

    explicitInterface: () => 12,
>explicitInterface : () => 数字
>() => 12 : () => 数字
>12 : 12

    explicitThis() {
>explicitThis : (this: I) => 数字

        return this.a;
>this.a : 数字
>类型别名 :=> 数字
>this : I
>a : 数字
>类型别名 :=> 数字

    },
}
let implExplicitStructural = impl.explicitStructural;
>implExplicitStructural : (this: { a: 数字; }) => 数字
>impl.explicitStructural : (this: { a: 数字; }) => 数字
>impl : I
>explicitStructural : (this: { a: 数字; }) => 数字

implExplicitStructural(); // error, no 'a' in 'void'
>implExplicitStructural() : 数字
>类型别名 :=> 数字
>implExplicitStructural : (this: { a: 数字; }) => 数字

let implExplicitInterface = impl.explicitInterface;
>implExplicitInterface : (this: I) => 数字
>impl.explicitInterface : (this: I) => 数字
>impl : I
>explicitInterface : (this: I) => 数字

implExplicitInterface(); // error, no 'a' in 'void' 
>implExplicitInterface() : 数字
>类型别名 :=> 数字
>implExplicitInterface : (this: I) => 数字

function explicitStructural(this: { y: number }, x: number): number {
>explicitStructural : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

    return x + this.y;
>x + this.y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>this.y : 数字
>类型别名 :=> 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
}
function propertyName(this: { y: number }, x: number): number {
>propertyName : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

    return x + this.notFound;
>x + this.notFound : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
>this.notFound : 任意
>类型别名 :=> 任意
>this : { y: 数字; }
>notFound : 任意
>类型别名 :=> 任意
}
function voidThisSpecified(this: void, x: number): number {
>voidThisSpecified : (this: 无值, x: 数字) => 数字
>this : 无值
>类型别名 :=> 无值
>x : 数字
>类型别名 :=> 数字

    return x + this.notSpecified;
>x + this.notSpecified : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
>this.notSpecified : 任意
>类型别名 :=> 任意
>this : 无值
>类型别名 :=> 无值
>notSpecified : 任意
>类型别名 :=> 任意
}
let ok: {y: number, f: (this: { y: number }, x: number) => number} = { y: 12, explicitStructural };
>ok : { y: 数字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>y : 数字
>类型别名 :=> 数字
>f : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>{ y: 12, explicitStructural } : { y: 数字; explicitStructural: (this: { y: 数字; }, x: 数字) => 数字; }
>y : 数字
>类型别名 :=> 数字
>12 : 12
>explicitStructural : (this: { y: 数字; }, x: 数字) => 数字

let wrongPropertyType: {y: string, f: (this: { y: number }, x: number) => number} = { y: 'foo', explicitStructural };
>wrongPropertyType : { y: 文字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>y : 文字
>类型别名 :=> 文字
>f : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>{ y: 'foo', explicitStructural } : { y: 文字; explicitStructural: (this: { y: 数字; }, x: 数字) => 数字; }
>y : 文字
>类型别名 :=> 文字
>'foo' : "foo"
>explicitStructural : (this: { y: 数字; }, x: 数字) => 数字

let wrongPropertyName: {wrongName: number, f: (this: { y: number }, x: number) => number} = { wrongName: 12, explicitStructural };
>wrongPropertyName : { wrongName: 数字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>wrongName : 数字
>类型别名 :=> 数字
>f : (this: { y: 数字; }, x: 数字) => 数字
>this : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>{ wrongName: 12, explicitStructural } : { wrongName: 数字; explicitStructural: (this: { y: 数字; }, x: 数字) => 数字; }
>wrongName : 数字
>类型别名 :=> 数字
>12 : 12
>explicitStructural : (this: { y: 数字; }, x: 数字) => 数字

ok.f(); // not enough arguments
>ok.f() : 数字
>类型别名 :=> 数字
>ok.f : (this: { y: 数字; }, x: 数字) => 数字
>ok : { y: 数字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>f : (this: { y: 数字; }, x: 数字) => 数字

ok.f('wrong type');
>ok.f('wrong type') : 数字
>类型别名 :=> 数字
>ok.f : (this: { y: 数字; }, x: 数字) => 数字
>ok : { y: 数字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>f : (this: { y: 数字; }, x: 数字) => 数字
>'wrong type' : "wrong type"

ok.f(13, 'too many arguments');
>ok.f(13, 'too many arguments') : 数字
>类型别名 :=> 数字
>ok.f : (this: { y: 数字; }, x: 数字) => 数字
>ok : { y: 数字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>f : (this: { y: 数字; }, x: 数字) => 数字
>13 : 13
>'too many arguments' : "too many arguments"

wrongPropertyType.f(13);
>wrongPropertyType.f(13) : 数字
>类型别名 :=> 数字
>wrongPropertyType.f : (this: { y: 数字; }, x: 数字) => 数字
>wrongPropertyType : { y: 文字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>f : (this: { y: 数字; }, x: 数字) => 数字
>13 : 13

wrongPropertyName.f(13);
>wrongPropertyName.f(13) : 数字
>类型别名 :=> 数字
>wrongPropertyName.f : (this: { y: 数字; }, x: 数字) => 数字
>wrongPropertyName : { wrongName: 数字; f: (this: { y: 数字; }, x: 数字) => 数字; }
>f : (this: { y: 数字; }, x: 数字) => 数字
>13 : 13

let c = new C();
>c : C
>new C() : C
>C : 类为 C

c.explicitC(); // not enough arguments
>c.explicitC() : 数字
>类型别名 :=> 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字

c.explicitC('wrong type');
>c.explicitC('wrong type') : 数字
>类型别名 :=> 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>'wrong type' : "wrong type"

c.explicitC(13, 'too many arguments');
>c.explicitC(13, 'too many arguments') : 数字
>类型别名 :=> 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>13 : 13
>'too many arguments' : "too many arguments"

c.explicitThis(); // not enough arguments
>c.explicitThis() : 数字
>类型别名 :=> 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字

c.explicitThis('wrong type 2');
>c.explicitThis('wrong type 2') : 数字
>类型别名 :=> 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>'wrong type 2' : "wrong type 2"

c.explicitThis(14, 'too many arguments 2');
>c.explicitThis(14, 'too many arguments 2') : 数字
>类型别名 :=> 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>14 : 14
>'too many arguments 2' : "too many arguments 2"

c.implicitThis(); // not enough arguments
>c.implicitThis() : 数字
>类型别名 :=> 数字
>c.implicitThis : (m: 数字) => 数字
>c : C
>implicitThis : (m: 数字) => 数字

c.implicitThis('wrong type 2');
>c.implicitThis('wrong type 2') : 数字
>类型别名 :=> 数字
>c.implicitThis : (m: 数字) => 数字
>c : C
>implicitThis : (m: 数字) => 数字
>'wrong type 2' : "wrong type 2"

c.implicitThis(14, 'too many arguments 2');
>c.implicitThis(14, 'too many arguments 2') : 数字
>类型别名 :=> 数字
>c.implicitThis : (m: 数字) => 数字
>c : C
>implicitThis : (m: 数字) => 数字
>14 : 14
>'too many arguments 2' : "too many arguments 2"

c.explicitProperty(); // not enough arguments
>c.explicitProperty() : 数字
>类型别名 :=> 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字

c.explicitProperty('wrong type 3');
>c.explicitProperty('wrong type 3') : 数字
>类型别名 :=> 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>'wrong type 3' : "wrong type 3"

c.explicitProperty(15, 'too many arguments 3');
>c.explicitProperty(15, 'too many arguments 3') : 数字
>类型别名 :=> 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>15 : 15
>'too many arguments 3' : "too many arguments 3"

// oops, this triggers contextual typing, which needs to be updated to understand that =>'s `this` is void.
let specifiedToVoid: (this: void, x: number) => number = explicitStructural;
>specifiedToVoid : (this: 无值, x: 数字) => 数字
>this : 无值
>类型别名 :=> 无值
>x : 数字
>类型别名 :=> 数字
>explicitStructural : (this: { y: 数字; }, x: 数字) => 数字

let reconstructed: { 
>reconstructed : { n: 数字; explicitThis(this: C, m: 数字): 数字; explicitC(this: C, m: 数字): 数字; explicitProperty: (this: { n: 数字; }, m: 数字) => 数字; explicitVoid(this: 无值, m: 数字): 数字; }

    n: number,
>n : 数字
>类型别名 :=> 数字

    explicitThis(this: C, m: number): number, // note: this: this is not allowed in an object literal type.
>explicitThis : (this: C, m: 数字) => 数字
>this : C
>C : C
>m : 数字
>类型别名 :=> 数字

    explicitC(this: C, m: number): number,
>explicitC : (this: C, m: 数字) => 数字
>this : C
>C : C
>m : 数字
>类型别名 :=> 数字

    explicitProperty: (this: {n : number}, m: number) => number,
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>this : { n: 数字; }
>n : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

    explicitVoid(this: void, m: number): number,
>explicitVoid : (this: 无值, m: 数字) => 数字
>this : 无值
>类型别名 :=> 无值
>m : 数字
>类型别名 :=> 数字

} = { 
>{     n: 12,    explicitThis: c.explicitThis,    explicitC: c.explicitC,    explicitProperty: c.explicitProperty,    explicitVoid: c.explicitVoid} : { n: 数字; explicitThis: (this: C, m: 数字) => 数字; explicitC: (this: C, m: 数字) => 数字; explicitProperty: (this: { n: 数字; }, m: 数字) => 数字; explicitVoid: (this: 无值, m: 数字) => 数字; }

    n: 12,
>n : 数字
>类型别名 :=> 数字
>12 : 12

    explicitThis: c.explicitThis,
>explicitThis : (this: C, m: 数字) => 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字

    explicitC: c.explicitC,
>explicitC : (this: C, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字

    explicitProperty: c.explicitProperty,
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字

    explicitVoid: c.explicitVoid
>explicitVoid : (this: 无值, m: 数字) => 数字
>c.explicitVoid : (this: 无值, m: 数字) => 数字
>c : C
>explicitVoid : (this: 无值, m: 数字) => 数字

};;

// lambdas have this: void for assignability purposes (and this unbound (free) for body checking)
let d = new D();
>d : D
>new D() : D
>D : 类为 D

let explicitXProperty: (this: { x: number }, m: number) => number;
>explicitXProperty : (this: { x: 数字; }, m: 数字) => 数字
>this : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

// from differing object types
c.explicitC = function(this: D, m: number) { return this.x + m };
>c.explicitC = function(this: D, m: number) { return this.x + m } : (this: D, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>function(this: D, m: number) { return this.x + m } : (this: D, m: 数字) => 数字
>this : D
>D : D
>m : 数字
>类型别名 :=> 数字
>this.x + m : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : D
>x : 数字
>类型别名 :=> 数字
>m : 数字
>类型别名 :=> 数字

c.explicitProperty = explicitXProperty;
>c.explicitProperty = explicitXProperty : (this: { x: 数字; }, m: 数字) => 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>explicitXProperty : (this: { x: 数字; }, m: 数字) => 数字

c.explicitC = d.explicitD;
>c.explicitC = d.explicitD : (this: D, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>d.explicitD : (this: D, m: 数字) => 数字
>d : D
>explicitD : (this: D, m: 数字) => 数字

c.explicitC = d.explicitThis;
>c.explicitC = d.explicitThis : (this: D, m: 数字) => 数字
>c.explicitC : (this: C, m: 数字) => 数字
>c : C
>explicitC : (this: C, m: 数字) => 数字
>d.explicitThis : (this: D, m: 数字) => 数字
>d : D
>explicitThis : (this: D, m: 数字) => 数字

c.explicitThis = d.explicitD;
>c.explicitThis = d.explicitD : (this: D, m: 数字) => 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>d.explicitD : (this: D, m: 数字) => 数字
>d : D
>explicitD : (this: D, m: 数字) => 数字

c.explicitThis = d.explicitThis;
>c.explicitThis = d.explicitThis : (this: D, m: 数字) => 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>d.explicitThis : (this: D, m: 数字) => 数字
>d : D
>explicitThis : (this: D, m: 数字) => 数字

c.explicitProperty = d.explicitD;
>c.explicitProperty = d.explicitD : (this: D, m: 数字) => 数字
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>d.explicitD : (this: D, m: 数字) => 数字
>d : D
>explicitD : (this: D, m: 数字) => 数字

c.explicitThis = d.explicitThis;
>c.explicitThis = d.explicitThis : (this: D, m: 数字) => 数字
>c.explicitThis : (this: C, m: 数字) => 数字
>c : C
>explicitThis : (this: C, m: 数字) => 数字
>d.explicitThis : (this: D, m: 数字) => 数字
>d : D
>explicitThis : (this: D, m: 数字) => 数字

c.explicitVoid = d.explicitD;
>c.explicitVoid = d.explicitD : (this: D, m: 数字) => 数字
>c.explicitVoid : (this: 无值, m: 数字) => 数字
>c : C
>explicitVoid : (this: 无值, m: 数字) => 数字
>d.explicitD : (this: D, m: 数字) => 数字
>d : D
>explicitD : (this: D, m: 数字) => 数字

c.explicitVoid = d.explicitThis;
>c.explicitVoid = d.explicitThis : (this: D, m: 数字) => 数字
>c.explicitVoid : (this: 无值, m: 数字) => 数字
>c : C
>explicitVoid : (this: 无值, m: 数字) => 数字
>d.explicitThis : (this: D, m: 数字) => 数字
>d : D
>explicitThis : (this: D, m: 数字) => 数字

/// class-based polymorphic assignability (with inheritance!) ///

class Base1 {
>Base1 : Base1

    x: number
>x : 数字
>类型别名 :=> 数字

    public polymorphic(this: this): number { return this.x; }
>polymorphic : (this: 本体) => 数字
>this : 本体
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字

    explicit(this: Base1): number { return this.x; }
>explicit : (this: Base1) => 数字
>this : Base1
>Base1 : Base1
>this.x : 数字
>类型别名 :=> 数字
>this : Base1
>x : 数字
>类型别名 :=> 数字

    static explicitStatic(this: typeof Base1): number { return this.x; }
>explicitStatic : (this: 类为 Base1) => 数字
>this : 类为 Base1
>Base1 : 类为 Base1
>this.x : 任意
>类型别名 :=> 任意
>this : 类为 Base1
>x : 任意
>类型别名 :=> 任意
}
class Derived1 extends Base1 {
>Derived1 : Derived1
>Base1 : Base1

    y: number
>y : 数字
>类型别名 :=> 数字
}
class Base2 {
>Base2 : Base2

    y: number
>y : 数字
>类型别名 :=> 数字

    polymorphic(this: this): number { return this.y; }
>polymorphic : (this: 本体) => 数字
>this : 本体
>this.y : 数字
>类型别名 :=> 数字
>this : 本体
>y : 数字
>类型别名 :=> 数字

    explicit(this: Base1): number { return this.x; }
>explicit : (this: Base1) => 数字
>this : Base1
>Base1 : Base1
>this.x : 数字
>类型别名 :=> 数字
>this : Base1
>x : 数字
>类型别名 :=> 数字
}
class Derived2 extends Base2 {
>Derived2 : Derived2
>Base2 : Base2

    x: number
>x : 数字
>类型别名 :=> 数字
}


let b1 = new Base1();
>b1 : Base1
>new Base1() : Base1
>Base1 : 类为 Base1

let d1 = new Derived1();
>d1 : Derived1
>new Derived1() : Derived1
>Derived1 : 类为 Derived1

let b2 = new Base2();
>b2 : Base2
>new Base2() : Base2
>Base2 : 类为 Base2

let d2 = new Derived2();
>d2 : Derived2
>new Derived2() : Derived2
>Derived2 : 类为 Derived2

b1.polymorphic = b2.polymorphic // error, 'this.y' not in Base1: { x }
>b1.polymorphic = b2.polymorphic : (this: Base2) => 数字
>b1.polymorphic : (this: Base1) => 数字
>b1 : Base1
>polymorphic : (this: Base1) => 数字
>b2.polymorphic : (this: Base2) => 数字
>b2 : Base2
>polymorphic : (this: Base2) => 数字

b1.explicit = b2.polymorphic // error, 'y' not in Base1: { x }
>b1.explicit = b2.polymorphic : (this: Base2) => 数字
>b1.explicit : (this: Base1) => 数字
>b1 : Base1
>explicit : (this: Base1) => 数字
>b2.polymorphic : (this: Base2) => 数字
>b2 : Base2
>polymorphic : (this: Base2) => 数字

d1.explicit = b2.polymorphic // error, 'y' not in Base1: { x }
>d1.explicit = b2.polymorphic : (this: Base2) => 数字
>d1.explicit : (this: Base1) => 数字
>d1 : Derived1
>explicit : (this: Base1) => 数字
>b2.polymorphic : (this: Base2) => 数字
>b2 : Base2
>polymorphic : (this: Base2) => 数字

////// use this-type for construction with new ////
function VoidThis(this: void) {
>VoidThis : (this: 无值) => 无值
>this : 无值
>类型别名 :=> 无值

}
let voidThis = new VoidThis();
>voidThis : 任意
>类型别名 :=> 任意
>new VoidThis() : 任意
>类型别名 :=> 任意
>VoidThis : (this: 无值) => 无值

///// syntax-ish errors /////
class ThisConstructor {
>ThisConstructor : ThisConstructor

    constructor(this: ThisConstructor, private n: number) {
>this : ThisConstructor
>ThisConstructor : ThisConstructor
>n : 数字
>类型别名 :=> 数字
    }
}
interface ThisConstructorInterface {
>ThisConstructorInterface : ThisConstructorInterface

    new(this: ThisConstructor, n: number);
>this : ThisConstructor
>ThisConstructor : ThisConstructor
>n : 数字
>类型别名 :=> 数字
}
var thisConstructorType: new (this: number) => number;
>thisConstructorType : 新建 (this: 数字) => 数字
>this : 数字
>类型别名 :=> 数字

function notFirst(a: number, this: C): number { return this.n; }
>notFirst : (a: 数字, this: C) => 数字
>a : 数字
>类型别名 :=> 数字
>this : C
>C : C
>this.n : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

///// parse errors /////
function modifiers(async this: C): number { return this.n; }
>modifiers : (异步 : 任意, C: 任意) => 数字
> : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>C : 任意
>类型别名 :=> 任意
>this.n : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

function restParam(...this: C): number { return this.n; }
>restParam : (...: 任意, C: 任意) => 数字
> : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>C : 任意
>类型别名 :=> 任意
>this.n : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

function optional(this?: C): number { return this.n; }
>optional : (this: 任意, ?: C) => 数字
>this : 任意
>类型别名 :=> 任意
> : C
>C : C
>this.n : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

function decorated(@deco() this: C): number { return this.n; }
>decorated : (: 任意, C: 任意) => 数字
>deco() : 任意
>类型别名 :=> 任意
>deco : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>C : 任意
>类型别名 :=> 任意
>this.n : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

function initializer(this: C = new C()): number { return this.n; }
>initializer : (this: C, ?: C) => 数字
>this : C
>C : C
> : C
>new C() : C
>C : 类为 C
>this.n : 数字
>类型别名 :=> 数字
>this : C
>n : 数字
>类型别名 :=> 数字

// can't name parameters 'this' in a lambda.
c.explicitProperty = (this, m) => m + this.n;
>c.explicitProperty = (this, m) : 任意
>类型别名 :=> 任意
>c.explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>c : C
>explicitProperty : (this: { n: 数字; }, m: 数字) => 数字
>(this, m) : 任意
>类型别名 :=> 任意
>this, m : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意
>m + this.n : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意
>this.n : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>n : 任意
>类型别名 :=> 任意

