=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndStringIndexer.ts ===
// Type inference infers from indexers in target type, no errors expected

function foo<T>(x: T) {
>foo : <T>(x: T) => T
>T : T
>x : T
>T : T

    return x;
>x : T
}

var a: { [x: string]: Date };
>a : { [x: 文字]: Date; }
>x : 文字
>类型别名 :=> 文字
>Date : Date

var r = foo(a);
>r : { [x: 文字]: Date; }
>foo(a) : { [x: 文字]: Date; }
>foo : <T>(x: T) => T
>a : { [x: 文字]: Date; }

function other<T>(arg: T) {
>other : <T>(arg: T) => 无值
>T : T
>arg : T
>T : T

    var b: { [x: string]: T };
>b : { [x: 文字]: T; }
>x : 文字
>类型别名 :=> 文字
>T : T

    var r2 = foo(b); // T
>r2 : { [x: 文字]: T; }
>foo(b) : { [x: 文字]: T; }
>foo : <T>(x: T) => T
>b : { [x: 文字]: T; }
}

function other2<T extends Date>(arg: T) {
>other2 : <T 扩展 Date>(arg: T) => 无值
>T : T
>Date : Date
>arg : T
>T : T

    var b: { [x: string]: T };
>b : { [x: 文字]: T; }
>x : 文字
>类型别名 :=> 文字
>T : T

    var r2 = foo(b);
>r2 : { [x: 文字]: T; }
>foo(b) : { [x: 文字]: T; }
>foo : <T>(x: T) => T
>b : { [x: 文字]: T; }

    var d: Date = r2['hm']; // ok
>d : Date
>Date : Date
>r2['hm'] : T
>r2 : { [x: 文字]: T; }
>'hm' : "hm"
}

function other3<T extends Date, U extends Date>(arg: T) {
>other3 : <T 扩展 Date, U 扩展 Date>(arg: T) => 无值
>T : T
>Date : Date
>U : U
>Date : Date
>arg : T
>T : T

    var b: { [x: string]: T };
>b : { [x: 文字]: T; }
>x : 文字
>类型别名 :=> 文字
>T : T

    var r2 = foo(b);
>r2 : { [x: 文字]: T; }
>foo(b) : { [x: 文字]: T; }
>foo : <T>(x: T) => T
>b : { [x: 文字]: T; }

    var d: Date = r2['hm']; // ok
>d : Date
>Date : Date
>r2['hm'] : T
>r2 : { [x: 文字]: T; }
>'hm' : "hm"

    // BUG 821629
    //var u: U = r2['hm']; // ok
}

//function other3<T extends U, U extends Date>(arg: T) {
//    var b: { [x: string]: T };
//    var r2 = foo(b);
//    var d: Date = r2['hm']; // ok
//    // BUG 821629
//    //var u: U = r2['hm']; // ok
//}
