=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : typeof React

interface PoisonedProp {
>PoisonedProp : PoisonedProp

    x: string;
>x : string
>类型别名 :=> 文字

    y: 2;
>y : 2
}

class Poisoned extends React.Component<PoisonedProp, {}> {
>Poisoned : Poisoned
>React.Component : React.Component<PoisonedProp, {}>
>React : typeof React
>Component : typeof React.Component
>PoisonedProp : PoisonedProp

    render() {
>render : () => JSX.Element

        return <div>Hello</div>;
><div>Hello</div> : JSX.Element
>div : any
>类型别名 :=> 任意
>div : any
>类型别名 :=> 任意
    }
}

let obj = {
>obj : { x: string; y: number; }
>{    x: "hello world",    y: 2} : { x: string; y: number; }

    x: "hello world",
>x : string
>类型别名 :=> 文字
>"hello world" : "hello world"

    y: 2
>y : number
>类型别名 :=> 数字
>2 : 2

};

// Error as "obj" has type { x: string; y: number }
let p = <Poisoned {...obj} />;
>p : JSX.Element
><Poisoned {...obj} /> : JSX.Element
>Poisoned : typeof Poisoned
>obj : { x: string; y: number; }

class EmptyProp extends React.Component<{}, {}> {
>EmptyProp : EmptyProp
>React.Component : React.Component<{}, {}>
>React : typeof React
>Component : typeof React.Component

    render() {
>render : () => JSX.Element

        return <div>Default hi</div>;
><div>Default hi</div> : JSX.Element
>div : any
>类型别名 :=> 任意
>div : any
>类型别名 :=> 任意
    }
    greeting: string;
>greeting : string
>类型别名 :=> 文字
}

let o = {
>o : { prop1: boolean; }
>{    prop1: false} : { prop1: boolean; }

    prop1: false
>prop1 : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
}
// Ok
let e = <EmptyProp {...o} />;
>e : JSX.Element
><EmptyProp {...o} /> : JSX.Element
>EmptyProp : typeof EmptyProp
>o : { prop1: boolean; }

