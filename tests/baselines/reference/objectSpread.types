=== tests/cases/conformance/types/spread/objectSpread.ts ===
let o = { a: 1, b: 'no' }
>o : { a: 数字; b: 文字; }
>{ a: 1, b: 'no' } : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>b : 文字
>类型别名 :=> 文字
>'no' : "no"

let o2 = { b: 'yes', c: true }
>o2 : { b: 文字; c: 真假; }
>{ b: 'yes', c: true } : { b: 文字; c: 真假; }
>b : 文字
>类型别名 :=> 文字
>'yes' : "yes"
>c : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

let swap = { a: 'yes', b: -1 };
>swap : { a: 文字; b: 数字; }
>{ a: 'yes', b: -1 } : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>'yes' : "yes"
>b : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1

let addAfter: { a: number, b: string, c: boolean } =
>addAfter : { a: 数字; b: 文字; c: 真假; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
>c : 真假
>类型别名 :=> 真假

    { ...o, c: false }
>{ ...o, c: false } : { c: 为假; a: 数字; b: 文字; }
>o : { a: 数字; b: 文字; }
>c : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

let addBefore: { a: number, b: string, c: boolean } =
>addBefore : { a: 数字; b: 文字; c: 真假; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
>c : 真假
>类型别名 :=> 真假

    { c: false, ...o }
>{ c: false, ...o } : { a: 数字; b: 文字; c: 为假; }
>c : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>o : { a: 数字; b: 文字; }

// Note: ignore still changes the order that properties are printed
let ignore: { a: number, b: string } =
>ignore : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

    { b: 'ignored', ...o }
>{ b: 'ignored', ...o } : { a: 数字; b: 文字; }
>b : 文字
>类型别名 :=> 文字
>'ignored' : "ignored"
>o : { a: 数字; b: 文字; }

let override: { a: number, b: string } =
>override : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

    { ...o, b: 'override' }
>{ ...o, b: 'override' } : { b: 文字; a: 数字; }
>o : { a: 数字; b: 文字; }
>b : 文字
>类型别名 :=> 文字
>'override' : "override"

let nested: { a: number, b: boolean, c: string } =
>nested : { a: 数字; b: 真假; c: 文字; }
>a : 数字
>类型别名 :=> 数字
>b : 真假
>类型别名 :=> 真假
>c : 文字
>类型别名 :=> 文字

    { ...{ a: 3, ...{ b: false, c: 'overriden' } }, c: 'whatever' }
>{ ...{ a: 3, ...{ b: false, c: 'overriden' } }, c: 'whatever' } : { c: 文字; b: 为假; a: 数字; }
>{ a: 3, ...{ b: false, c: 'overriden' } } : { b: 为假; c: 文字; a: 数字; }
>a : 数字
>类型别名 :=> 数字
>3 : 3
>{ b: false, c: 'overriden' } : { b: 为假; c: 文字; }
>b : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>c : 文字
>类型别名 :=> 文字
>'overriden' : "overriden"
>c : 文字
>类型别名 :=> 文字
>'whatever' : "whatever"

let combined: { a: number, b: string, c: boolean } =
>combined : { a: 数字; b: 文字; c: 真假; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
>c : 真假
>类型别名 :=> 真假

    { ...o, ...o2 }
>{ ...o, ...o2 } : { b: 文字; c: 真假; a: 数字; }
>o : { a: 数字; b: 文字; }
>o2 : { b: 文字; c: 真假; }

let combinedBefore: { a: number, b: string, c: boolean } =
>combinedBefore : { a: 数字; b: 文字; c: 真假; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
>c : 真假
>类型别名 :=> 真假

    { b: 'ok', ...o, ...o2 }
>{ b: 'ok', ...o, ...o2 } : { b: 文字; c: 真假; a: 数字; }
>b : 文字
>类型别名 :=> 文字
>'ok' : "ok"
>o : { a: 数字; b: 文字; }
>o2 : { b: 文字; c: 真假; }

let combinedMid: { a: number, b: string, c: boolean } =
>combinedMid : { a: 数字; b: 文字; c: 真假; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
>c : 真假
>类型别名 :=> 真假

    { ...o, b: 'ok', ...o2 }
>{ ...o, b: 'ok', ...o2 } : { b: 文字; c: 真假; a: 数字; }
>o : { a: 数字; b: 文字; }
>b : 文字
>类型别名 :=> 文字
>'ok' : "ok"
>o2 : { b: 文字; c: 真假; }

let combinedAfter: { a: number, b: string, c: boolean } =
>combinedAfter : { a: 数字; b: 文字; c: 真假; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
>c : 真假
>类型别名 :=> 真假

    { ...o, ...o2, b: 'ok' }
>{ ...o, ...o2, b: 'ok' } : { b: 文字; c: 真假; a: 数字; }
>o : { a: 数字; b: 文字; }
>o2 : { b: 文字; c: 真假; }
>b : 文字
>类型别名 :=> 文字
>'ok' : "ok"

let combinedNested: { a: number, b: boolean, c: string, d: string } =
>combinedNested : { a: 数字; b: 真假; c: 文字; d: 文字; }
>a : 数字
>类型别名 :=> 数字
>b : 真假
>类型别名 :=> 真假
>c : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字

    { ...{ a: 4, ...{ b: false, c: 'overriden' } }, d: 'actually new', ...{ a: 5, d: 'maybe new' } }
>{ ...{ a: 4, ...{ b: false, c: 'overriden' } }, d: 'actually new', ...{ a: 5, d: 'maybe new' } } : { a: 数字; d: 文字; b: 为假; c: 文字; }
>{ a: 4, ...{ b: false, c: 'overriden' } } : { b: 为假; c: 文字; a: 数字; }
>a : 数字
>类型别名 :=> 数字
>4 : 4
>{ b: false, c: 'overriden' } : { b: 为假; c: 文字; }
>b : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>c : 文字
>类型别名 :=> 文字
>'overriden' : "overriden"
>d : 文字
>类型别名 :=> 文字
>'actually new' : "actually new"
>{ a: 5, d: 'maybe new' } : { a: 数字; d: 文字; }
>a : 数字
>类型别名 :=> 数字
>5 : 5
>d : 文字
>类型别名 :=> 文字
>'maybe new' : "maybe new"

let combinedNestedChangeType: { a: number, b: boolean, c: number } =
>combinedNestedChangeType : { a: 数字; b: 真假; c: 数字; }
>a : 数字
>类型别名 :=> 数字
>b : 真假
>类型别名 :=> 真假
>c : 数字
>类型别名 :=> 数字

    { ...{ a: 1, ...{ b: false, c: 'overriden' } }, c: -1 }
>{ ...{ a: 1, ...{ b: false, c: 'overriden' } }, c: -1 } : { c: 数字; b: 为假; a: 数字; }
>{ a: 1, ...{ b: false, c: 'overriden' } } : { b: 为假; c: 文字; a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1
>{ b: false, c: 'overriden' } : { b: 为假; c: 文字; }
>b : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>c : 文字
>类型别名 :=> 文字
>'overriden' : "overriden"
>c : 数字
>类型别名 :=> 数字
>-1 : -1
>1 : 1

let propertyNested: { a: { a: number, b: string } } =
>propertyNested : { a: { a: 数字; b: 文字; }; }
>a : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

    { a: { ... o } }
>{ a: { ... o } } : { a: { a: 数字; b: 文字; }; }
>a : { a: 数字; b: 文字; }
>{ ... o } : { a: 数字; b: 文字; }
>o : { a: 数字; b: 文字; }

// accessors don't copy the descriptor
// (which means that readonly getters become read/write properties)
let op = { get a () { return 6 } };
>op : { 只读 a: 数字; }
>{ get a () { return 6 } } : { 只读 a: 数字; }
>a : 数字
>类型别名 :=> 数字
>6 : 6

let getter: { a: number, c: number } =
>getter : { a: 数字; c: 数字; }
>a : 数字
>类型别名 :=> 数字
>c : 数字
>类型别名 :=> 数字

    { ...op, c: 7 }
>{ ...op, c: 7 } : { c: 数字; a: 数字; }
>op : { 只读 a: 数字; }
>c : 数字
>类型别名 :=> 数字
>7 : 7

getter.a = 12;
>getter.a = 12 : 12
>getter.a : 数字
>类型别名 :=> 数字
>getter : { a: 数字; c: 数字; }
>a : 数字
>类型别名 :=> 数字
>12 : 12

// functions result in { }
let spreadFunc = { ...(function () { }) };
>spreadFunc : {}
>{ ...(function () { }) } : {}
>(function () { }) : () => 无值
>function () { } : () => 无值

type Header = { head: string, body: string, authToken: string }
>Header : Header
>head : 文字
>类型别名 :=> 文字
>body : 文字
>类型别名 :=> 文字
>authToken : 文字
>类型别名 :=> 文字

function from16326(this: { header: Header }, header: Header, authToken: string): Header {
>from16326 : (this: { header: Header; }, header: Header, authToken: 文字) => Header
>this : { header: Header; }
>header : Header
>Header : Header
>header : Header
>Header : Header
>authToken : 文字
>类型别名 :=> 文字
>Header : Header

    return {
>{        ...this.header,        ...header,        ...authToken && { authToken }    } : { head: 文字; body: 文字; authToken: 文字; } | { authToken: 文字; head: 文字; body: 文字; }

        ...this.header,
>this.header : Header
>this : { header: Header; }
>header : Header

        ...header,
>header : Header

        ...authToken && { authToken }
>authToken && { authToken } : "" | { authToken: 文字; }
>authToken : 文字
>类型别名 :=> 文字
>{ authToken } : { authToken: 文字; }
>authToken : 文字
>类型别名 :=> 文字
    }
}
// boolean && T results in Partial<T>
function conditionalSpreadBoolean(b: boolean) : { x: number, y: number } {
>conditionalSpreadBoolean : (b: 真假) => { x: 数字; y: 数字; }
>b : 真假
>类型别名 :=> 真假
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    let o = { x: 12, y: 13 }
>o : { x: 数字; y: 数字; }
>{ x: 12, y: 13 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>12 : 12
>y : 数字
>类型别名 :=> 数字
>13 : 13

    o = {
>o = {        ...o,        ...b && { x: 14 }    } : { x: 数字; y: 数字; } | { x: 数字; y: 数字; }
>o : { x: 数字; y: 数字; }
>{        ...o,        ...b && { x: 14 }    } : { x: 数字; y: 数字; } | { x: 数字; y: 数字; }

        ...o,
>o : { x: 数字; y: 数字; }

        ...b && { x: 14 }
>b && { x: 14 } : 为假 | { x: 数字; }
>b : 真假
>类型别名 :=> 真假
>{ x: 14 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>14 : 14
    }
    let o2 = { ...b && { x: 21 }}
>o2 : {} | { x: 数字; }
>{ ...b && { x: 21 }} : {} | { x: 数字; }
>b && { x: 21 } : 为假 | { x: 数字; }
>b : 真假
>类型别名 :=> 真假
>{ x: 21 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>21 : 21

    return o;
>o : { x: 数字; y: 数字; }
}
function conditionalSpreadNumber(nt: number): { x: number, y: number } {
>conditionalSpreadNumber : (nt: 数字) => { x: 数字; y: 数字; }
>nt : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字

    let o = { x: 15, y: 16 }
>o : { x: 数字; y: 数字; }
>{ x: 15, y: 16 } : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>15 : 15
>y : 数字
>类型别名 :=> 数字
>16 : 16

    o = {
>o = {        ...o,        ...nt && { x: nt }    } : { x: 数字; y: 数字; } | { x: 数字; y: 数字; }
>o : { x: 数字; y: 数字; }
>{        ...o,        ...nt && { x: nt }    } : { x: 数字; y: 数字; } | { x: 数字; y: 数字; }

        ...o,
>o : { x: 数字; y: 数字; }

        ...nt && { x: nt }
>nt && { x: nt } : 0 | { x: 数字; }
>nt : 数字
>类型别名 :=> 数字
>{ x: nt } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>nt : 数字
>类型别名 :=> 数字
    }
    let o2 = { ...nt && { x: nt }}
>o2 : {} | { x: 数字; }
>{ ...nt && { x: nt }} : {} | { x: 数字; }
>nt && { x: nt } : 0 | { x: 数字; }
>nt : 数字
>类型别名 :=> 数字
>{ x: nt } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>nt : 数字
>类型别名 :=> 数字

    return o;
>o : { x: 数字; y: 数字; }
}
function conditionalSpreadString(st: string): { x: string, y: number } {
>conditionalSpreadString : (st: 文字) => { x: 文字; y: 数字; }
>st : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字

    let o = { x: 'hi', y: 17 }
>o : { x: 文字; y: 数字; }
>{ x: 'hi', y: 17 } : { x: 文字; y: 数字; }
>x : 文字
>类型别名 :=> 文字
>'hi' : "hi"
>y : 数字
>类型别名 :=> 数字
>17 : 17

    o = {
>o = {        ...o,        ...st && { x: st }    } : { x: 文字; y: 数字; } | { x: 文字; y: 数字; }
>o : { x: 文字; y: 数字; }
>{        ...o,        ...st && { x: st }    } : { x: 文字; y: 数字; } | { x: 文字; y: 数字; }

        ...o,
>o : { x: 文字; y: 数字; }

        ...st && { x: st }
>st && { x: st } : "" | { x: 文字; }
>st : 文字
>类型别名 :=> 文字
>{ x: st } : { x: 文字; }
>x : 文字
>类型别名 :=> 文字
>st : 文字
>类型别名 :=> 文字
    }
    let o2 = { ...st && { x: st }}
>o2 : {} | { x: 文字; }
>{ ...st && { x: st }} : {} | { x: 文字; }
>st && { x: st } : "" | { x: 文字; }
>st : 文字
>类型别名 :=> 文字
>{ x: st } : { x: 文字; }
>x : 文字
>类型别名 :=> 文字
>st : 文字
>类型别名 :=> 文字

    return o;
>o : { x: 文字; y: 数字; }
}

// any results in any
let anything: any;
>anything : 任意
>类型别名 :=> 任意

let spreadAny = { ...anything };
>spreadAny : 任意
>类型别名 :=> 任意
>{ ...anything } : 任意
>类型别名 :=> 任意
>anything : 任意
>类型别名 :=> 任意

// methods are not enumerable
class C { p = 1; m() { } }
>C : C
>p : 数字
>类型别名 :=> 数字
>1 : 1
>m : () => 无值

let c: C = new C()
>c : C
>C : C
>new C() : C
>C : 类为 C

let spreadC: { p: number } = { ...c }
>spreadC : { p: 数字; }
>p : 数字
>类型别名 :=> 数字
>{ ...c } : { p: 数字; }
>c : C

// own methods are enumerable
let cplus: { p: number, plus(): void } = { ...c, plus() { return this.p + 1; } };
>cplus : { p: 数字; plus(): 无值; }
>p : 数字
>类型别名 :=> 数字
>plus : () => 无值
>{ ...c, plus() { return this.p + 1; } } : { plus(): 任意; p: 数字; }
>c : C
>plus : () => 任意
>this.p + 1 : 任意
>类型别名 :=> 任意
>this.p : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
>p : 任意
>类型别名 :=> 任意
>1 : 1

cplus.plus();
>cplus.plus() : 无值
>类型别名 :=> 无值
>cplus.plus : () => 无值
>cplus : { p: 数字; plus(): 无值; }
>plus : () => 无值

// new field's type conflicting with existing field is OK
let changeTypeAfter: { a: string, b: string } =
>changeTypeAfter : { a: 文字; b: 文字; }
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字

    { ...o, a: 'wrong type?' }
>{ ...o, a: 'wrong type?' } : { a: 文字; b: 文字; }
>o : { a: 数字; b: 文字; }
>a : 文字
>类型别名 :=> 文字
>'wrong type?' : "wrong type?"

let changeTypeBefore: { a: number, b: string } =
>changeTypeBefore : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

    { a: 'wrong type?', ...o };
>{ a: 'wrong type?', ...o } : { a: 数字; b: 文字; }
>a : 文字
>类型别名 :=> 文字
>'wrong type?' : "wrong type?"
>o : { a: 数字; b: 文字; }

let changeTypeBoth: { a: string, b: number } =
>changeTypeBoth : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字

    { ...o, ...swap };
>{ ...o, ...swap } : { a: 文字; b: 数字; }
>o : { a: 数字; b: 文字; }
>swap : { a: 文字; b: 数字; }

// optional
function container(
>container : (definiteBoolean: { sn: 真假; }, definiteString: { sn: 文字; }, optionalString: { sn?: 文字 | 未定; }, optionalNumber: { sn?: 数字 | 未定; }) => 无值

    definiteBoolean: { sn: boolean },
>definiteBoolean : { sn: 真假; }
>sn : 真假
>类型别名 :=> 真假

    definiteString: { sn: string },
>definiteString : { sn: 文字; }
>sn : 文字
>类型别名 :=> 文字

    optionalString: { sn?: string },
>optionalString : { sn?: 文字 | 未定; }
>sn : 文字 | 未定

    optionalNumber: { sn?: number }) {
>optionalNumber : { sn?: 数字 | 未定; }
>sn : 数字 | 未定

    let optionalUnionStops: { sn: string | number | boolean } = { ...definiteBoolean, ...definiteString, ...optionalNumber };
>optionalUnionStops : { sn: 文字 | 数字 | 真假; }
>sn : 文字 | 数字 | 真假
>{ ...definiteBoolean, ...definiteString, ...optionalNumber } : { sn: 文字 | 数字; }
>definiteBoolean : { sn: 真假; }
>definiteString : { sn: 文字; }
>optionalNumber : { sn?: 数字 | 未定; }

    let optionalUnionDuplicates: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber };
>optionalUnionDuplicates : { sn: 文字 | 数字; }
>sn : 文字 | 数字
>{ ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber } : { sn: 文字 | 数字; }
>definiteBoolean : { sn: 真假; }
>definiteString : { sn: 文字; }
>optionalString : { sn?: 文字 | 未定; }
>optionalNumber : { sn?: 数字 | 未定; }

    let allOptional: { sn?: string | number } = { ...optionalString, ...optionalNumber };
>allOptional : { sn?: 文字 | 数字 | 未定; }
>sn : 文字 | 数字 | 未定
>{ ...optionalString, ...optionalNumber } : { sn?: 文字 | 数字 | 未定; }
>optionalString : { sn?: 文字 | 未定; }
>optionalNumber : { sn?: 数字 | 未定; }

    // computed property
    let computedFirst: { a: number, b: string, "before everything": number } =
>computedFirst : { a: 数字; b: 文字; "before everything": 数字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

        { ['before everything']: 12, ...o, b: 'yes' }
>{ ['before everything']: 12, ...o, b: 'yes' } : { b: 文字; a: 数字; ['before everything']: 数字; }
>'before everything' : "before everything"
>12 : 12
>o : { a: 数字; b: 文字; }
>b : 文字
>类型别名 :=> 文字
>'yes' : "yes"

    let computedMiddle: { a: number, b: string, c: boolean, "in the middle": number } =
>computedMiddle : { a: 数字; b: 文字; c: 真假; "in the middle": 数字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
>c : 真假
>类型别名 :=> 真假

        { ...o, ['in the middle']: 13, b: 'maybe?', ...o2 }
>{ ...o, ['in the middle']: 13, b: 'maybe?', ...o2 } : { b: 文字; c: 真假; ['in the middle']: 数字; a: 数字; }
>o : { a: 数字; b: 文字; }
>'in the middle' : "in the middle"
>13 : 13
>b : 文字
>类型别名 :=> 文字
>'maybe?' : "maybe?"
>o2 : { b: 文字; c: 真假; }

    let computedAfter: { a: number, b: string, "at the end": number } =
>computedAfter : { a: 数字; b: 文字; "at the end": 数字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字

        { ...o, b: 'yeah', ['at the end']: 14 }
>{ ...o, b: 'yeah', ['at the end']: 14 } : { b: 文字; ['at the end']: 数字; a: 数字; }
>o : { a: 数字; b: 文字; }
>b : 文字
>类型别名 :=> 文字
>'yeah' : "yeah"
>'at the end' : "at the end"
>14 : 14
}
// shortcut syntax
let a = 12;
>a : 数字
>类型别名 :=> 数字
>12 : 12

let shortCutted: { a: number, b: string } = { ...o, a }
>shortCutted : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字
>b : 文字
>类型别名 :=> 文字
>{ ...o, a } : { a: 数字; b: 文字; }
>o : { a: 数字; b: 文字; }
>a : 数字
>类型别名 :=> 数字

// non primitive
let spreadNonPrimitive = { ...<object>{}};
>spreadNonPrimitive : 实例
>类型别名 :=> 实例
>{ ...<object>{}} : 实例
>类型别名 :=> 实例
><object>{} : 实例
>类型别名 :=> 实例
>{} : {}

