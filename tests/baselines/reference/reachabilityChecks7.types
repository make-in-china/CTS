=== tests/cases/compiler/reachabilityChecks7.ts ===
// async function without return type annotation - error
async function f1() {    
>f1 : () => Promise<void>
}

let x = async function() {
>x : () => Promise<void>
>async function() {} : () => Promise<void>
}

// async function with which promised type is void - return can be omitted
async function f2(): Promise<void> {
>f2 : () => Promise<void>
>Promise : Promise<T>
    
}

async function f3(x) {
>f3 : (x: any) => Promise<number>
>x : any
>类型别名 :=> 任意

    if (x) return 10;
>x : any
>类型别名 :=> 任意
>10 : 10
}

async function f4(): Promise<number> {
>f4 : () => Promise<number>
>Promise : Promise<T>
    
}

function voidFunc(): void {
>voidFunc : () => void
}

function calltoVoidFunc(x) {
>calltoVoidFunc : (x: any) => void
>x : any
>类型别名 :=> 任意

    if (x) return voidFunc();
>x : any
>类型别名 :=> 任意
>voidFunc() : void
>类型别名 :=> 无值
>voidFunc : () => void
}

declare function use(s: string): void;
>use : (s: string) => void
>s : string
>类型别名 :=> 文字

let x1 = () => { use("Test"); }
>x1 : () => void
>() => { use("Test"); } : () => void
>use("Test") : void
>类型别名 :=> 无值
>use : (s: string) => void
>"Test" : "Test"

