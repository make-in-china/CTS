=== tests/cases/conformance/statements/for-inStatements/for-inStatementsInvalid.ts ===
var aNumber: number;
>aNumber : 数字
>类型别名 :=> 数字

for (aNumber in {}) { }
>aNumber : 数字
>类型别名 :=> 数字
>{} : {}

var aBoolean: boolean;
>aBoolean : 真假
>类型别名 :=> 真假

for (aBoolean in {}) { }
>aBoolean : 真假
>类型别名 :=> 真假
>{} : {}

var aRegExp: RegExp;
>aRegExp : RegExp
>RegExp : RegExp

for (aRegExp in {}) { }
>aRegExp : RegExp
>{} : {}

for (var idx : number in {}) { }
>idx : 文字
>类型别名 :=> 文字
>{} : {}

function fn(): void { }
>fn : () => 无值

for (var x in fn()) { }
>x : 文字
>类型别名 :=> 文字
>fn() : 无值
>类型别名 :=> 无值
>fn : () => 无值

var c : string, d:string, e;
>c : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字
>e : 任意
>类型别名 :=> 任意

for (var x in c || d) { }
>x : 文字
>类型别名 :=> 文字
>c || d : 文字
>类型别名 :=> 文字
>c : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字

for (var x in e ? c : d) { }
>x : 文字
>类型别名 :=> 文字
>e ? c : d : 文字
>类型别名 :=> 文字
>e : 任意
>类型别名 :=> 任意
>c : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字

for (var x in 42 ? c : d) { }
>x : 文字
>类型别名 :=> 文字
>42 ? c : d : 文字
>类型别名 :=> 文字
>42 : 42
>c : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字

for (var x in '' ? c : d) { }
>x : 文字
>类型别名 :=> 文字
>'' ? c : d : 文字
>类型别名 :=> 文字
>'' : ""
>c : 文字
>类型别名 :=> 文字
>d : 文字
>类型别名 :=> 文字

for (var x in 42 ? d[x] : c[x]) { }
>x : 文字
>类型别名 :=> 文字
>42 ? d[x] : c[x] : 任意
>类型别名 :=> 任意
>42 : 42
>d[x] : 任意
>类型别名 :=> 任意
>d : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>c[x] : 任意
>类型别名 :=> 任意
>c : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字

for (var x in c[23]) { }
>x : 文字
>类型别名 :=> 文字
>c[23] : 文字
>类型别名 :=> 文字
>c : 文字
>类型别名 :=> 文字
>23 : 23

for (var x in (<T>(x: T) => x)) { }
>x : 文字
>类型别名 :=> 文字
>(<T>(x: T) => x) : <T>(x: T) => T
><T>(x: T) => x : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T

for (var x in function (x: string, y: number) { return x + y }) { }
>x : 文字
>类型别名 :=> 文字
>function (x: string, y: number) { return x + y } : (x: 文字, y: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>y : 文字
>类型别名 :=> 文字
>x + y : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>y : 文字
>类型别名 :=> 文字

class A {
>A : A

    biz() : number{
>biz : () => 数字

        for (var x in this.biz()) { }
>x : 文字
>类型别名 :=> 文字
>this.biz() : 数字
>类型别名 :=> 数字
>this.biz : () => 数字
>this : 本体
>biz : () => 数字

        for (var x in this.biz) { }
>x : 文字
>类型别名 :=> 文字
>this.biz : () => 数字
>this : 本体
>biz : () => 数字

        for (var x in this) { }
>x : 文字
>类型别名 :=> 文字
>this : 本体

        return null;
>null : 空值
>类型别名 :=> 空值
    }

    static baz() : number {
>baz : () => 数字

        for (var x in this) { }
>x : 文字
>类型别名 :=> 文字
>this : 类为 A

        for (var x in this.baz) { }
>x : 文字
>类型别名 :=> 文字
>this.baz : () => 数字
>this : 类为 A
>baz : () => 数字

        for (var x in this.baz()) { }
>x : 文字
>类型别名 :=> 文字
>this.baz() : 数字
>类型别名 :=> 数字
>this.baz : () => 数字
>this : 类为 A
>baz : () => 数字

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}

class B extends A {
>B : B
>A : A

    boz() {
>boz : () => 任意

        for (var x in this.biz()) { }
>x : 文字
>类型别名 :=> 文字
>this.biz() : 数字
>类型别名 :=> 数字
>this.biz : () => 数字
>this : 本体
>biz : () => 数字

        for (var x in this.biz) { }
>x : 文字
>类型别名 :=> 文字
>this.biz : () => 数字
>this : 本体
>biz : () => 数字

        for (var x in this) { }
>x : 文字
>类型别名 :=> 文字
>this : 本体

        for (var x in super.biz) { }
>x : 文字
>类型别名 :=> 文字
>super.biz : () => 数字
>super : A
>biz : () => 数字

        for (var x in super.biz()) { }
>x : 文字
>类型别名 :=> 文字
>super.biz() : 数字
>类型别名 :=> 数字
>super.biz : () => 数字
>super : A
>biz : () => 数字

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}

interface I {
>I : I

    id: number;
>id : 数字
>类型别名 :=> 数字

    [idx: number]: number;
>idx : 数字
>类型别名 :=> 数字
}
var i: I;
>i : I
>I : I

for (var x in i[42]) { } 
>x : 文字
>类型别名 :=> 文字
>i[42] : 数字
>类型别名 :=> 数字
>i : I
>42 : 42

