=== tests/cases/compiler/withExportDecl.ts ===
var simpleVar;
>simpleVar : 任意
>类型别名 :=> 任意

export var exportedSimpleVar;
>exportedSimpleVar : 任意
>类型别名 :=> 任意

var anotherVar: any;
>anotherVar : 任意
>类型别名 :=> 任意

var varWithSimpleType: number;
>varWithSimpleType : 数字
>类型别名 :=> 数字

var varWithArrayType: number[];
>varWithArrayType : 数字[]

var varWithInitialValue = 30;
>varWithInitialValue : 数字
>类型别名 :=> 数字
>30 : 30

export var exportedVarWithInitialValue = 70;
>exportedVarWithInitialValue : 数字
>类型别名 :=> 数字
>70 : 70

var withComplicatedValue = { x: 30, y: 70, desc: "position" };
>withComplicatedValue : { x: 数字; y: 数字; desc: 文字; }
>{ x: 30, y: 70, desc: "position" } : { x: 数字; y: 数字; desc: 文字; }
>x : 数字
>类型别名 :=> 数字
>30 : 30
>y : 数字
>类型别名 :=> 数字
>70 : 70
>desc : 文字
>类型别名 :=> 文字
>"position" : "position"

export var exportedWithComplicatedValue = { x: 30, y: 70, desc: "position" };
>exportedWithComplicatedValue : { x: 数字; y: 数字; desc: 文字; }
>{ x: 30, y: 70, desc: "position" } : { x: 数字; y: 数字; desc: 文字; }
>x : 数字
>类型别名 :=> 数字
>30 : 30
>y : 数字
>类型别名 :=> 数字
>70 : 70
>desc : 文字
>类型别名 :=> 文字
>"position" : "position"

declare var declaredVar;
>declaredVar : 任意
>类型别名 :=> 任意

declare var declareVar2
>declareVar2 : 任意
>类型别名 :=> 任意

declare var declaredVar;
>declaredVar : 任意
>类型别名 :=> 任意

declare var deckareVarWithType: number;
>deckareVarWithType : 数字
>类型别名 :=> 数字

export declare var exportedDeclaredVar: number;
>exportedDeclaredVar : 数字
>类型别名 :=> 数字

var arrayVar: string[] = ['a', 'b'];
>arrayVar : 文字[]
>['a', 'b'] : 文字[]
>'a' : "a"
>'b' : "b"

export var exportedArrayVar: { x: number; y: string; }[] ;
>exportedArrayVar : { x: 数字; y: 文字; }[]
>x : 数字
>类型别名 :=> 数字
>y : 文字
>类型别名 :=> 文字

exportedArrayVar.push({ x: 30, y : 'hello world' });
>exportedArrayVar.push({ x: 30, y : 'hello world' }) : 数字
>类型别名 :=> 数字
>exportedArrayVar.push : (...items: { x: 数字; y: 文字; }[]) => 数字
>exportedArrayVar : { x: 数字; y: 文字; }[]
>push : (...items: { x: 数字; y: 文字; }[]) => 数字
>{ x: 30, y : 'hello world' } : { x: 数字; y: 文字; }
>x : 数字
>类型别名 :=> 数字
>30 : 30
>y : 文字
>类型别名 :=> 文字
>'hello world' : "hello world"

function simpleFunction() {
>simpleFunction : () => { x: 文字; y: 文字; n: 数字; }

    return {
>{        x: "Hello",        y: "word",        n: 2    } : { x: 文字; y: 文字; n: 数字; }

        x: "Hello",
>x : 文字
>类型别名 :=> 文字
>"Hello" : "Hello"

        y: "word",
>y : 文字
>类型别名 :=> 文字
>"word" : "word"

        n: 2
>n : 数字
>类型别名 :=> 数字
>2 : 2

    };
}

export function exportedFunction() {
>exportedFunction : () => { x: 文字; y: 文字; n: 数字; }

    return simpleFunction();
>simpleFunction() : { x: 文字; y: 文字; n: 数字; }
>simpleFunction : () => { x: 文字; y: 文字; n: 数字; }
}

module m1 {
>m1 : 类为 m1

    export function foo() {
>foo : () => 文字

        return "Hello";
>"Hello" : "Hello"
    }
}
export declare module m2 {
>m2 : 类为 m2

    export var a: number;
>a : 数字
>类型别名 :=> 数字
}


export module m3 {
>m3 : 类为 m3

    export function foo() {
>foo : () => 文字

        return m1.foo();
>m1.foo() : 文字
>类型别名 :=> 文字
>m1.foo : () => 文字
>m1 : 类为 m1
>foo : () => 文字
    }
}

export var eVar1, eVar2 = 10;
>eVar1 : 任意
>类型别名 :=> 任意
>eVar2 : 数字
>类型别名 :=> 数字
>10 : 10

var eVar22;
>eVar22 : 任意
>类型别名 :=> 任意

export var eVar3 = 10, eVar4, eVar5;
>eVar3 : 数字
>类型别名 :=> 数字
>10 : 10
>eVar4 : 任意
>类型别名 :=> 任意
>eVar5 : 任意
>类型别名 :=> 任意

