=== tests/cases/conformance/es6/destructuring/iterableArrayPattern11.ts ===
class Bar { x }
>Bar : Bar
>x : any
>类型别名 :=> 任意

class Foo extends Bar { y }
>Foo : Foo
>Bar : Bar
>y : any
>类型别名 :=> 任意

class FooIterator {
>FooIterator : FooIterator

    next() {
>next : () => { value: Foo; done: boolean; }

        return {
>{            value: new Foo,            done: false        } : { value: Foo; done: boolean; }

            value: new Foo,
>value : Foo
>new Foo : Foo
>Foo : typeof Foo

            done: false
>done : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : symbol
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : symbol
>类型别名 :=> 符号

        return this;
>this : this
    }
}

function fun([a, b] = new FooIterator) { }
>fun : ([a, b]?: FooIterator) => void
>a : Foo
>b : Foo
>new FooIterator : FooIterator
>FooIterator : typeof FooIterator

fun(new FooIterator);
>fun(new FooIterator) : void
>类型别名 :=> 无值
>fun : ([a, b]?: FooIterator) => void
>new FooIterator : FooIterator
>FooIterator : typeof FooIterator

