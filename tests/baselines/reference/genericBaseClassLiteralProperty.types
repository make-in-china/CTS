=== tests/cases/compiler/genericBaseClassLiteralProperty.ts ===
class BaseClass<T> {
>BaseClass : BaseClass<T>
>T : T

    public _getValue1: { (): T; };
>_getValue1 : () => T
>T : T

    public _getValue2: () => T;
>_getValue2 : () => T
>T : T
}

class SubClass extends BaseClass<number> {
>SubClass : SubClass
>BaseClass : BaseClass<数字>

    public Error(): void {
>Error : () => 无值

        var x : number = this._getValue1();
>x : 数字
>类型别名 :=> 数字
>this._getValue1() : 数字
>类型别名 :=> 数字
>this._getValue1 : () => 数字
>this : 本体
>_getValue1 : () => 数字

        var y : number = this._getValue2();
>y : 数字
>类型别名 :=> 数字
>this._getValue2() : 数字
>类型别名 :=> 数字
>this._getValue2 : () => 数字
>this : 本体
>_getValue2 : () => 数字
    }
}
