=== tests/cases/conformance/expressions/functions/arrowFunctionExpressions.ts ===
// ArrowFormalParameters => AssignmentExpression is equivalent to ArrowFormalParameters => { return AssignmentExpression; }
var a = (p: string) => p.length;
>a : (p: string) => number
>(p: string) => p.length : (p: string) => number
>p : string
>类型别名 :=> 文字
>p.length : number
>类型别名 :=> 数字
>p : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字

var a = (p: string) => { return p.length; }
>a : (p: string) => number
>(p: string) => { return p.length; } : (p: string) => number
>p : string
>类型别名 :=> 文字
>p.length : number
>类型别名 :=> 数字
>p : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字

// Identifier => Block is equivalent to(Identifier) => Block
var b = j => { return 0; }
>b : (j: any) => number
>j => { return 0; } : (j: any) => number
>j : any
>类型别名 :=> 任意
>0 : 0

var b = (j) => { return 0; }
>b : (j: any) => number
>(j) => { return 0; } : (j: any) => number
>j : any
>类型别名 :=> 任意
>0 : 0

// Identifier => AssignmentExpression is equivalent to(Identifier) => AssignmentExpression
var c: number;
>c : number
>类型别名 :=> 数字

var d = n => c = n;
>d : (n: any) => any
>n => c = n : (n: any) => any
>n : any
>类型别名 :=> 任意
>c = n : any
>类型别名 :=> 任意
>c : number
>类型别名 :=> 数字
>n : any
>类型别名 :=> 任意

var d = (n) => c = n;
>d : (n: any) => any
>(n) => c = n : (n: any) => any
>n : any
>类型别名 :=> 任意
>c = n : any
>类型别名 :=> 任意
>c : number
>类型别名 :=> 数字
>n : any
>类型别名 :=> 任意

var d: (n: any) => any;
>d : (n: any) => any
>n : any
>类型别名 :=> 任意

// Binding patterns in arrow functions
var p1 = ([a]) => { };
>p1 : ([a]: [any]) => void
>([a]) => { } : ([a]: [any]) => void
>a : any
>类型别名 :=> 任意

var p2 = ([...a]) => { };
>p2 : ([...a]: any[]) => void
>([...a]) => { } : ([...a]: any[]) => void
>a : any[]

var p3 = ([, a]) => { };
>p3 : ([, a]: [any, any]) => void
>([, a]) => { } : ([, a]: [any, any]) => void
> : undefined
>类型别名 :=> 未定
>a : any
>类型别名 :=> 任意

var p4 = ([, ...a]) => { };
>p4 : ([, ...a]: any[]) => void
>([, ...a]) => { } : ([, ...a]: any[]) => void
> : undefined
>类型别名 :=> 未定
>a : any[]

var p5 = ([a = 1]) => { };
>p5 : ([a]: [number]) => void
>([a = 1]) => { } : ([a]: [number]) => void
>a : number
>类型别名 :=> 数字
>1 : 1

var p6 = ({ a }) => { };
>p6 : ({ a }: { a: any; }) => void
>({ a }) => { } : ({ a }: { a: any; }) => void
>a : any
>类型别名 :=> 任意

var p7 = ({ a: { b } }) => { };
>p7 : ({ a: { b } }: { a: { b: any; }; }) => void
>({ a: { b } }) => { } : ({ a: { b } }: { a: { b: any; }; }) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意

var p8 = ({ a = 1 }) => { };
>p8 : ({ a }: { a?: number; }) => void
>({ a = 1 }) => { } : ({ a }: { a?: number; }) => void
>a : number
>类型别名 :=> 数字
>1 : 1

var p9 = ({ a: { b = 1 } = { b: 1 } }) => { };
>p9 : ({ a: { b } }: { a?: { b?: number; }; }) => void
>({ a: { b = 1 } = { b: 1 } }) => { } : ({ a: { b } }: { a?: { b?: number; }; }) => void
>a : any
>类型别名 :=> 任意
>b : number
>类型别名 :=> 数字
>1 : 1
>{ b: 1 } : { b?: number; }
>b : number
>类型别名 :=> 数字
>1 : 1

var p10 = ([{ value, done }]) => { };
>p10 : ([{ value, done }]: [{ value: any; done: any; }]) => void
>([{ value, done }]) => { } : ([{ value, done }]: [{ value: any; done: any; }]) => void
>value : any
>类型别名 :=> 任意
>done : any
>类型别名 :=> 任意

// Arrow function used in class member initializer
// Arrow function used in class member function
class MyClass {
>MyClass : MyClass

    m = (n) => n + 1;
>m : (n: any) => any
>(n) => n + 1 : (n: any) => any
>n : any
>类型别名 :=> 任意
>n + 1 : any
>类型别名 :=> 任意
>n : any
>类型别名 :=> 任意
>1 : 1

    p = (n) => n && this;
>p : (n: any) => this
>(n) => n && this : (n: any) => this
>n : any
>类型别名 :=> 任意
>n && this : this
>n : any
>类型别名 :=> 任意
>this : this

    fn() {
>fn : () => void

        var m = (n) => n + 1;
>m : (n: any) => any
>(n) => n + 1 : (n: any) => any
>n : any
>类型别名 :=> 任意
>n + 1 : any
>类型别名 :=> 任意
>n : any
>类型别名 :=> 任意
>1 : 1

        var p = (n) => n && this;
>p : (n: any) => this
>(n) => n && this : (n: any) => this
>n : any
>类型别名 :=> 任意
>n && this : this
>n : any
>类型别名 :=> 任意
>this : this
    }
}

// Arrow function used in arrow function
var arrrr = () => (m: number) => () => (n: number) => m + n;
>arrrr : () => (m: number) => () => (n: number) => number
>() => (m: number) => () => (n: number) => m + n : () => (m: number) => () => (n: number) => number
>(m: number) => () => (n: number) => m + n : (m: number) => () => (n: number) => number
>m : number
>类型别名 :=> 数字
>() => (n: number) => m + n : () => (n: number) => number
>(n: number) => m + n : (n: number) => number
>n : number
>类型别名 :=> 数字
>m + n : number
>类型别名 :=> 数字
>m : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字

var e = arrrr()(3)()(4);
>e : number
>类型别名 :=> 数字
>arrrr()(3)()(4) : number
>类型别名 :=> 数字
>arrrr()(3)() : (n: number) => number
>arrrr()(3) : () => (n: number) => number
>arrrr() : (m: number) => () => (n: number) => number
>arrrr : () => (m: number) => () => (n: number) => number
>3 : 3
>4 : 4

var e: number;
>e : number
>类型别名 :=> 数字

// Arrow function used in arrow function used in function
function someFn() {
>someFn : () => void

    var arr = (n: number) => (p: number) => p * n;
>arr : (n: number) => (p: number) => number
>(n: number) => (p: number) => p * n : (n: number) => (p: number) => number
>n : number
>类型别名 :=> 数字
>(p: number) => p * n : (p: number) => number
>p : number
>类型别名 :=> 数字
>p * n : number
>类型别名 :=> 数字
>p : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字

    arr(3)(4).toExponential();
>arr(3)(4).toExponential() : string
>类型别名 :=> 文字
>arr(3)(4).toExponential : (fractionDigits?: number) => string
>arr(3)(4) : number
>类型别名 :=> 数字
>arr(3) : (p: number) => number
>arr : (n: number) => (p: number) => number
>3 : 3
>4 : 4
>toExponential : (fractionDigits?: number) => string
}

// Arrow function used in function
function someOtherFn() {
>someOtherFn : () => void

    var arr = (n: number) => '' + n;
>arr : (n: number) => string
>(n: number) => '' + n : (n: number) => string
>n : number
>类型别名 :=> 数字
>'' + n : string
>类型别名 :=> 文字
>'' : ""
>n : number
>类型别名 :=> 数字

    arr(4).charAt(0);
>arr(4).charAt(0) : string
>类型别名 :=> 文字
>arr(4).charAt : (pos: number) => string
>arr(4) : string
>类型别名 :=> 文字
>arr : (n: number) => string
>4 : 4
>charAt : (pos: number) => string
>0 : 0
}

// Arrow function used in nested function in function
function outerFn() {
>outerFn : () => void

    function innerFn() {
>innerFn : () => void

        var arrowFn = () => { };
>arrowFn : () => void
>() => { } : () => void

        var p = arrowFn();
>p : void
>类型别名 :=> 无值
>arrowFn() : void
>类型别名 :=> 无值
>arrowFn : () => void

        var p: void;
>p : void
>类型别名 :=> 无值
    }
}

// Arrow function used in nested function in arrow function
var f = (n: string) => {
>f : (n: string) => () => string
>(n: string) => {    function fn(x: number) {        return () => n + x;    }    return fn(4);} : (n: string) => () => string
>n : string
>类型别名 :=> 文字

    function fn(x: number) {
>fn : (x: number) => () => string
>x : number
>类型别名 :=> 数字

        return () => n + x;
>() => n + x : () => string
>n + x : string
>类型别名 :=> 文字
>n : string
>类型别名 :=> 文字
>x : number
>类型别名 :=> 数字
    }
    return fn(4);
>fn(4) : () => string
>fn : (x: number) => () => string
>4 : 4
}
var g = f('')();
>g : string
>类型别名 :=> 文字
>f('')() : string
>类型别名 :=> 文字
>f('') : () => string
>f : (n: string) => () => string
>'' : ""

var g: string;
>g : string
>类型别名 :=> 文字


// Arrow function used in nested function in arrow function in nested function
function someOuterFn() {
>someOuterFn : () => (n: string) => () => () => number

    var arr = (n: string) => {
>arr : (n: string) => () => () => number
>(n: string) => {        function innerFn() {            return () => n.length;        }        return innerFn;    } : (n: string) => () => () => number
>n : string
>类型别名 :=> 文字

        function innerFn() {
>innerFn : () => () => number

            return () => n.length;
>() => n.length : () => number
>n.length : number
>类型别名 :=> 数字
>n : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
        }
        return innerFn;
>innerFn : () => () => number
    }
    return arr;
>arr : (n: string) => () => () => number
}
var h = someOuterFn()('')()();
>h : number
>类型别名 :=> 数字
>someOuterFn()('')()() : number
>类型别名 :=> 数字
>someOuterFn()('')() : () => number
>someOuterFn()('') : () => () => number
>someOuterFn() : (n: string) => () => () => number
>someOuterFn : () => (n: string) => () => () => number
>'' : ""

h.toExponential();
>h.toExponential() : string
>类型别名 :=> 文字
>h.toExponential : (fractionDigits?: number) => string
>h : number
>类型别名 :=> 数字
>toExponential : (fractionDigits?: number) => string

// Arrow function used in try/catch/finally in function
function tryCatchFn() {
>tryCatchFn : () => void

    try {
        var x = () => this;
>x : () => any
>() => this : () => any
>this : any
>类型别名 :=> 任意

    } catch (e) {
>e : any
>类型别名 :=> 任意

        var t = () => e + this;
>t : () => any
>() => e + this : () => any
>e + this : any
>类型别名 :=> 任意
>e : any
>类型别名 :=> 任意
>this : any
>类型别名 :=> 任意

    } finally {
        var m = () => this + '';
>m : () => string
>() => this + '' : () => string
>this + '' : string
>类型别名 :=> 文字
>this : any
>类型别名 :=> 任意
>'' : ""
    }
}

