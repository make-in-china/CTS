=== tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithBooleanType.ts ===
// void  operator on boolean type
var BOOLEAN: boolean;
>BOOLEAN : boolean
>类型别名 :=> 真假

function foo(): boolean { return true; }
>foo : () => boolean
>true : true
>类型别名 :=> 为真

class A {
>A : A

    public a: boolean;
>a : boolean
>类型别名 :=> 真假

    static foo() { return false; }
>foo : () => boolean
>false : false
>类型别名 :=> 为假
}
module M {
>M : typeof M

    export var n: boolean;
>n : boolean
>类型别名 :=> 真假
}

var objA = new A();
>objA : A
>new A() : A
>A : typeof A

// boolean type var
var ResultIsAny1 = void BOOLEAN;
>ResultIsAny1 : any
>类型别名 :=> 任意
>void BOOLEAN : undefined
>类型别名 :=> 未定
>BOOLEAN : boolean
>类型别名 :=> 真假

// boolean type literal
var ResultIsAny2 = void true;
>ResultIsAny2 : any
>类型别名 :=> 任意
>void true : undefined
>类型别名 :=> 未定
>true : true
>类型别名 :=> 为真

var ResultIsAny3 = void { x: true, y: false };
>ResultIsAny3 : any
>类型别名 :=> 任意
>void { x: true, y: false } : undefined
>类型别名 :=> 未定
>{ x: true, y: false } : { x: boolean; y: boolean; }
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>y : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

// boolean type expressions
var ResultIsAny4 = void objA.a;
>ResultIsAny4 : any
>类型别名 :=> 任意
>void objA.a : undefined
>类型别名 :=> 未定
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假

var ResultIsAny5 = void M.n;
>ResultIsAny5 : any
>类型别名 :=> 任意
>void M.n : undefined
>类型别名 :=> 未定
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

var ResultIsAny6 = void foo();
>ResultIsAny6 : any
>类型别名 :=> 任意
>void foo() : undefined
>类型别名 :=> 未定
>foo() : boolean
>类型别名 :=> 真假
>foo : () => boolean

var ResultIsAny7 = void A.foo();
>ResultIsAny7 : any
>类型别名 :=> 任意
>void A.foo() : undefined
>类型别名 :=> 未定
>A.foo() : boolean
>类型别名 :=> 真假
>A.foo : () => boolean
>A : typeof A
>foo : () => boolean

// multiple void  operator
var ResultIsAny8 = void void BOOLEAN;
>ResultIsAny8 : any
>类型别名 :=> 任意
>void void BOOLEAN : undefined
>类型别名 :=> 未定
>void BOOLEAN : undefined
>类型别名 :=> 未定
>BOOLEAN : boolean
>类型别名 :=> 真假

// miss assignment operators
void true;
>void true : undefined
>类型别名 :=> 未定
>true : true
>类型别名 :=> 为真

void BOOLEAN;
>void BOOLEAN : undefined
>类型别名 :=> 未定
>BOOLEAN : boolean
>类型别名 :=> 真假

void foo();
>void foo() : undefined
>类型别名 :=> 未定
>foo() : boolean
>类型别名 :=> 真假
>foo : () => boolean

void true, false;
>void true, false : false
>类型别名 :=> 为假
>void true : undefined
>类型别名 :=> 未定
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

void objA.a;
>void objA.a : undefined
>类型别名 :=> 未定
>objA.a : boolean
>类型别名 :=> 真假
>objA : A
>a : boolean
>类型别名 :=> 真假

void M.n;
>void M.n : undefined
>类型别名 :=> 未定
>M.n : boolean
>类型别名 :=> 真假
>M : typeof M
>n : boolean
>类型别名 :=> 真假

