=== tests/cases/compiler/classMemberInitializerWithLamdaScoping2_0.ts ===
var field1: string;
>field1 : 文字
>类型别名 :=> 文字

=== tests/cases/compiler/classMemberInitializerWithLamdaScoping2_1.ts ===
declare var console: {
>console : { log(msg?: 任意): 无值; }

    log(msg?: any): void;
>log : (msg?: 任意) => 无值
>msg : 任意
>类型别名 :=> 任意

};
class Test1 {
>Test1 : Test1

    constructor(private field1: string) {
>field1 : 文字
>类型别名 :=> 文字
    }
    messageHandler = () => {
>messageHandler : () => 无值
>() => {        console.log(field1); // But this should be error as the field1 will resolve to var field1                              // but since this code would be generated inside constructor, in generated js                             // it would resolve to private field1 and thats not what user intended here.     } : () => 无值

        console.log(field1); // But this should be error as the field1 will resolve to var field1 
>console.log(field1) : 无值
>类型别名 :=> 无值
>console.log : (msg?: 任意) => 无值
>console : { log(msg?: 任意): 无值; }
>log : (msg?: 任意) => 无值
>field1 : 任意
>类型别名 :=> 任意

                             // but since this code would be generated inside constructor, in generated js
                             // it would resolve to private field1 and thats not what user intended here. 
    };
}
