=== tests/cases/compiler/modularizeLibrary_ErrorFromUsingES6FeaturesWithOnlyES5Lib.ts ===
// All will be error from using ES6 features but only include ES5 library
// Using Es6 array
function f(x: number, y: number, z: number) {
>f : (x: 数字, y: 数字, z: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字

    return Array.from(arguments);
>Array.from(arguments) : 任意
>类型别名 :=> 任意
>Array.from : 任意
>类型别名 :=> 任意
>Array : ArrayConstructor
>from : 任意
>类型别名 :=> 任意
>arguments : IArguments
}

f(1, 2, 3);  // no error
>f(1, 2, 3) : 任意
>类型别名 :=> 任意
>f : (x: 数字, y: 数字, z: 数字) => 任意
>1 : 1
>2 : 2
>3 : 3

// Using ES6 collection
var m = new Map<string, number>();
>m : 任意
>类型别名 :=> 任意
>new Map<string, number>() : 任意
>类型别名 :=> 任意
>Map : 任意
>类型别名 :=> 任意

m.clear();
>m.clear() : 任意
>类型别名 :=> 任意
>m.clear : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意
>clear : 任意
>类型别名 :=> 任意

// Using ES6 iterable
m.keys();
>m.keys() : 任意
>类型别名 :=> 任意
>m.keys : 任意
>类型别名 :=> 任意
>m : 任意
>类型别名 :=> 任意
>keys : 任意
>类型别名 :=> 任意

// Using ES6 function
function Baz() { }
>Baz : () => 无值

Baz.name;
>Baz.name : 任意
>类型别名 :=> 任意
>Baz : () => 无值
>name : 任意
>类型别名 :=> 任意

// Using ES6 math
Math.sign(1);
>Math.sign(1) : 任意
>类型别名 :=> 任意
>Math.sign : 任意
>类型别名 :=> 任意
>Math : Math
>sign : 任意
>类型别名 :=> 任意
>1 : 1

// Using ES6 object
var o = {
>o : { a: 数字; [Symbol.hasInstance](value: 任意): 真假; }
>{    a: 2,    [Symbol.hasInstance](value: any) {        return false;    }} : { a: 数字; [Symbol.hasInstance](value: 任意): 真假; }

    a: 2,
>a : 数字
>类型别名 :=> 数字
>2 : 2

    [Symbol.hasInstance](value: any) {
>Symbol.hasInstance : 任意
>类型别名 :=> 任意
>Symbol : 任意
>类型别名 :=> 任意
>hasInstance : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

        return false;
>false : 为假
>类型别名 :=> 为假
    }
};
o.hasOwnProperty(Symbol.hasInstance);
>o.hasOwnProperty(Symbol.hasInstance) : 真假
>类型别名 :=> 真假
>o.hasOwnProperty : (v: 文字) => 真假
>o : { a: 数字; [Symbol.hasInstance](value: 任意): 真假; }
>hasOwnProperty : (v: 文字) => 真假
>Symbol.hasInstance : 任意
>类型别名 :=> 任意
>Symbol : 任意
>类型别名 :=> 任意
>hasInstance : 任意
>类型别名 :=> 任意

// Using Es6 proxy
var t = {}
>t : {}
>{} : {}

var p = new Proxy(t, {});
>p : 任意
>类型别名 :=> 任意
>new Proxy(t, {}) : 任意
>类型别名 :=> 任意
>Proxy : 任意
>类型别名 :=> 任意
>t : {}
>{} : {}

// Using ES6 reflect
Reflect.isExtensible({});
>Reflect.isExtensible({}) : 任意
>类型别名 :=> 任意
>Reflect.isExtensible : 任意
>类型别名 :=> 任意
>Reflect : 任意
>类型别名 :=> 任意
>isExtensible : 任意
>类型别名 :=> 任意
>{} : {}

// Using Es6 regexp
var reg = new RegExp("/s");
>reg : RegExp
>new RegExp("/s") : RegExp
>RegExp : RegExpConstructor
>"/s" : "/s"

reg.flags;
>reg.flags : 任意
>类型别名 :=> 任意
>reg : RegExp
>flags : 任意
>类型别名 :=> 任意

// Using ES6 string
var str = "Hello world";
>str : 文字
>类型别名 :=> 文字
>"Hello world" : "Hello world"

str.includes("hello", 0);
>str.includes("hello", 0) : 任意
>类型别名 :=> 任意
>str.includes : 任意
>类型别名 :=> 任意
>str : 文字
>类型别名 :=> 文字
>includes : 任意
>类型别名 :=> 任意
>"hello" : "hello"
>0 : 0

// Using ES6 symbol
var s = Symbol();
>s : 任意
>类型别名 :=> 任意
>Symbol() : 任意
>类型别名 :=> 任意
>Symbol : 任意
>类型别名 :=> 任意

// Using ES6 wellknown-symbol
const o1 = {
>o1 : { [Symbol.hasInstance](value: 任意): 真假; }
>{    [Symbol.hasInstance](value: any) {        return false;    }} : { [Symbol.hasInstance](value: 任意): 真假; }

    [Symbol.hasInstance](value: any) {
>Symbol.hasInstance : 任意
>类型别名 :=> 任意
>Symbol : 任意
>类型别名 :=> 任意
>hasInstance : 任意
>类型别名 :=> 任意
>value : 任意
>类型别名 :=> 任意

        return false;
>false : 为假
>类型别名 :=> 为假
    }
}
