=== tests/cases/compiler/modularizeLibrary_ErrorFromUsingES6FeaturesWithOnlyES5Lib.ts ===
// All will be error from using ES6 features but only include ES5 library
// Using Es6 array
function f(x: number, y: number, z: number) {
>f : (x: number, y: number, z: number) => any
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>z : number
>类型别名 :=> 数字

    return Array.from(arguments);
>Array.from(arguments) : any
>类型别名 :=> 任意
>Array.from : any
>类型别名 :=> 任意
>Array : ArrayConstructor
>from : any
>类型别名 :=> 任意
>arguments : IArguments
}

f(1, 2, 3);  // no error
>f(1, 2, 3) : any
>类型别名 :=> 任意
>f : (x: number, y: number, z: number) => any
>1 : 1
>2 : 2
>3 : 3

// Using ES6 collection
var m = new Map<string, number>();
>m : any
>类型别名 :=> 任意
>new Map<string, number>() : any
>类型别名 :=> 任意
>Map : any
>类型别名 :=> 任意

m.clear();
>m.clear() : any
>类型别名 :=> 任意
>m.clear : any
>类型别名 :=> 任意
>m : any
>类型别名 :=> 任意
>clear : any
>类型别名 :=> 任意

// Using ES6 iterable
m.keys();
>m.keys() : any
>类型别名 :=> 任意
>m.keys : any
>类型别名 :=> 任意
>m : any
>类型别名 :=> 任意
>keys : any
>类型别名 :=> 任意

// Using ES6 function
function Baz() { }
>Baz : () => void

Baz.name;
>Baz.name : any
>类型别名 :=> 任意
>Baz : () => void
>name : any
>类型别名 :=> 任意

// Using ES6 math
Math.sign(1);
>Math.sign(1) : any
>类型别名 :=> 任意
>Math.sign : any
>类型别名 :=> 任意
>Math : Math
>sign : any
>类型别名 :=> 任意
>1 : 1

// Using ES6 object
var o = {
>o : { a: number; [Symbol.hasInstance](value: any): boolean; }
>{    a: 2,    [Symbol.hasInstance](value: any) {        return false;    }} : { a: number; [Symbol.hasInstance](value: any): boolean; }

    a: 2,
>a : number
>类型别名 :=> 数字
>2 : 2

    [Symbol.hasInstance](value: any) {
>Symbol.hasInstance : any
>类型别名 :=> 任意
>Symbol : any
>类型别名 :=> 任意
>hasInstance : any
>类型别名 :=> 任意
>value : any
>类型别名 :=> 任意

        return false;
>false : false
>类型别名 :=> 为假
    }
};
o.hasOwnProperty(Symbol.hasInstance);
>o.hasOwnProperty(Symbol.hasInstance) : boolean
>类型别名 :=> 真假
>o.hasOwnProperty : (v: string) => boolean
>o : { a: number; [Symbol.hasInstance](value: any): boolean; }
>hasOwnProperty : (v: string) => boolean
>Symbol.hasInstance : any
>类型别名 :=> 任意
>Symbol : any
>类型别名 :=> 任意
>hasInstance : any
>类型别名 :=> 任意

// Using Es6 proxy
var t = {}
>t : {}
>{} : {}

var p = new Proxy(t, {});
>p : any
>类型别名 :=> 任意
>new Proxy(t, {}) : any
>类型别名 :=> 任意
>Proxy : any
>类型别名 :=> 任意
>t : {}
>{} : {}

// Using ES6 reflect
Reflect.isExtensible({});
>Reflect.isExtensible({}) : any
>类型别名 :=> 任意
>Reflect.isExtensible : any
>类型别名 :=> 任意
>Reflect : any
>类型别名 :=> 任意
>isExtensible : any
>类型别名 :=> 任意
>{} : {}

// Using Es6 regexp
var reg = new RegExp("/s");
>reg : RegExp
>new RegExp("/s") : RegExp
>RegExp : RegExpConstructor
>"/s" : "/s"

reg.flags;
>reg.flags : any
>类型别名 :=> 任意
>reg : RegExp
>flags : any
>类型别名 :=> 任意

// Using ES6 string
var str = "Hello world";
>str : string
>类型别名 :=> 文字
>"Hello world" : "Hello world"

str.includes("hello", 0);
>str.includes("hello", 0) : any
>类型别名 :=> 任意
>str.includes : any
>类型别名 :=> 任意
>str : string
>类型别名 :=> 文字
>includes : any
>类型别名 :=> 任意
>"hello" : "hello"
>0 : 0

// Using ES6 symbol
var s = Symbol();
>s : any
>类型别名 :=> 任意
>Symbol() : any
>类型别名 :=> 任意
>Symbol : any
>类型别名 :=> 任意

// Using ES6 wellknown-symbol
const o1 = {
>o1 : { [Symbol.hasInstance](value: any): boolean; }
>{    [Symbol.hasInstance](value: any) {        return false;    }} : { [Symbol.hasInstance](value: any): boolean; }

    [Symbol.hasInstance](value: any) {
>Symbol.hasInstance : any
>类型别名 :=> 任意
>Symbol : any
>类型别名 :=> 任意
>hasInstance : any
>类型别名 :=> 任意
>value : any
>类型别名 :=> 任意

        return false;
>false : false
>类型别名 :=> 为假
    }
}
