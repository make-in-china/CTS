=== tests/cases/compiler/instantiateContextuallyTypedGenericThis.ts ===
interface JQuery {
>JQuery : JQuery

    each<T>(
>each : <T>(collection: T[], callback: (this: T, dit: T) => T) => T[]
>T : T

        collection: T[], callback: (this: T, dit: T) => T
>collection : T[]
>T : T
>callback : (this: T, dit: T) => T
>this : T
>T : T
>dit : T
>T : T
>T : T

    ): T[];
>T : T
}

let $: JQuery;
>$ : JQuery
>JQuery : JQuery

let lines: string[];
>lines : 文字[]

$.each(lines, function(dit) {
>$.each(lines, function(dit) {    return dit.charAt(0) + this.charAt(1);}) : 文字[]
>$.each : <T>(collection: T[], callback: (this: T, dit: T) => T) => T[]
>$ : JQuery
>each : <T>(collection: T[], callback: (this: T, dit: T) => T) => T[]
>lines : 文字[]
>function(dit) {    return dit.charAt(0) + this.charAt(1);} : (this: 文字, dit: 文字) => 文字
>dit : 文字
>类型别名 :=> 文字

    return dit.charAt(0) + this.charAt(1);
>dit.charAt(0) + this.charAt(1) : 文字
>类型别名 :=> 文字
>dit.charAt(0) : 文字
>类型别名 :=> 文字
>dit.charAt : (pos: 数字) => 文字
>dit : 文字
>类型别名 :=> 文字
>charAt : (pos: 数字) => 文字
>0 : 0
>this.charAt(1) : 文字
>类型别名 :=> 文字
>this.charAt : (pos: 数字) => 文字
>this : 文字
>类型别名 :=> 文字
>charAt : (pos: 数字) => 文字
>1 : 1

});

