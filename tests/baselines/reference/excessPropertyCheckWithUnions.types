=== tests/cases/compiler/excessPropertyCheckWithUnions.ts ===
type ADT = {
>ADT : ADT

    tag: "A",
>tag : "A"

    a1: string
>a1 : string
>类型别名 :=> 文字

} | {
    tag: "D",
>tag : "D"

    d20: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20
>d20 : 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20

} | {
    tag: "T",
>tag : "T"
}
let wrong: ADT = { tag: "T", a1: "extra" }
>wrong : ADT
>ADT : ADT
>{ tag: "T", a1: "extra" } : { tag: "T"; a1: string; }
>tag : string
>类型别名 :=> 文字
>"T" : "T"
>a1 : string
>类型别名 :=> 文字
>"extra" : "extra"

wrong = { tag: "A", d20: 12 }
>wrong = { tag: "A", d20: 12 } : { tag: "A"; d20: 12; }
>wrong : ADT
>{ tag: "A", d20: 12 } : { tag: "A"; d20: 12; }
>tag : string
>类型别名 :=> 文字
>"A" : "A"
>d20 : number
>类型别名 :=> 数字
>12 : 12

wrong = { tag: "D" }
>wrong = { tag: "D" } : { tag: "D"; }
>wrong : ADT
>{ tag: "D" } : { tag: "D"; }
>tag : string
>类型别名 :=> 文字
>"D" : "D"

type Ambiguous = {
>Ambiguous : Ambiguous

    tag: "A",
>tag : "A"

    x: string
>x : string
>类型别名 :=> 文字

} | {
    tag: "A",
>tag : "A"

    y: number
>y : number
>类型别名 :=> 数字

} | {
    tag: "B",
>tag : "B"

    z: boolean
>z : boolean
>类型别名 :=> 真假

} | {
    tag: "C"
>tag : "C"
}
let amb: Ambiguous
>amb : Ambiguous
>Ambiguous : Ambiguous

// no error for ambiguous tag, even when it could satisfy both constituents at once
amb = { tag: "A", x: "hi" }
>amb = { tag: "A", x: "hi" } : { tag: "A"; x: string; }
>amb : Ambiguous
>{ tag: "A", x: "hi" } : { tag: "A"; x: string; }
>tag : string
>类型别名 :=> 文字
>"A" : "A"
>x : string
>类型别名 :=> 文字
>"hi" : "hi"

amb = { tag: "A", y: 12 }
>amb = { tag: "A", y: 12 } : { tag: "A"; y: number; }
>amb : Ambiguous
>{ tag: "A", y: 12 } : { tag: "A"; y: number; }
>tag : string
>类型别名 :=> 文字
>"A" : "A"
>y : number
>类型别名 :=> 数字
>12 : 12

amb = { tag: "A", x: "hi", y: 12 }
>amb = { tag: "A", x: "hi", y: 12 } : { tag: "A"; x: string; y: number; }
>amb : Ambiguous
>{ tag: "A", x: "hi", y: 12 } : { tag: "A"; x: string; y: number; }
>tag : string
>类型别名 :=> 文字
>"A" : "A"
>x : string
>类型别名 :=> 文字
>"hi" : "hi"
>y : number
>类型别名 :=> 数字
>12 : 12

// correctly error on excess property 'extra', even when ambiguous
amb = { tag: "A", x: "hi", extra: 12 }
>amb = { tag: "A", x: "hi", extra: 12 } : { tag: "A"; x: string; extra: number; }
>amb : Ambiguous
>{ tag: "A", x: "hi", extra: 12 } : { tag: "A"; x: string; extra: number; }
>tag : string
>类型别名 :=> 文字
>"A" : "A"
>x : string
>类型别名 :=> 文字
>"hi" : "hi"
>extra : number
>类型别名 :=> 数字
>12 : 12

amb = { tag: "A", y: 12, extra: 12 }
>amb = { tag: "A", y: 12, extra: 12 } : { tag: "A"; y: number; extra: number; }
>amb : Ambiguous
>{ tag: "A", y: 12, extra: 12 } : { tag: "A"; y: number; extra: number; }
>tag : string
>类型别名 :=> 文字
>"A" : "A"
>y : number
>类型别名 :=> 数字
>12 : 12
>extra : number
>类型别名 :=> 数字
>12 : 12

// assignability errors still work.
// But note that the error for `z: true` is the fallback one of reporting on
// the last constituent since assignability error reporting can't find a single best discriminant either.
amb = { tag: "A" }
>amb = { tag: "A" } : { tag: "A"; }
>amb : Ambiguous
>{ tag: "A" } : { tag: "A"; }
>tag : string
>类型别名 :=> 文字
>"A" : "A"

amb = { tag: "A", z: true }
>amb = { tag: "A", z: true } : { tag: "A"; z: true; }
>amb : Ambiguous
>{ tag: "A", z: true } : { tag: "A"; z: true; }
>tag : string
>类型别名 :=> 文字
>"A" : "A"
>z : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

type Overlapping =
>Overlapping : Overlapping

    | { a: 1, b: 1, first: string }
>a : 1
>b : 1
>first : string
>类型别名 :=> 文字

    | { a: 2, second: string }
>a : 2
>second : string
>类型别名 :=> 文字

    | { b: 3, third: string }
>b : 3
>third : string
>类型别名 :=> 文字

let over: Overlapping
>over : Overlapping
>Overlapping : Overlapping

// these two are not reported because there are two discriminant properties
over = { a: 1, b: 1, first: "ok", second: "error" }
>over = { a: 1, b: 1, first: "ok", second: "error" } : { a: 1; b: 1; first: string; second: string; }
>over : Overlapping
>{ a: 1, b: 1, first: "ok", second: "error" } : { a: 1; b: 1; first: string; second: string; }
>a : number
>类型别名 :=> 数字
>1 : 1
>b : number
>类型别名 :=> 数字
>1 : 1
>first : string
>类型别名 :=> 文字
>"ok" : "ok"
>second : string
>类型别名 :=> 文字
>"error" : "error"

over = { a: 1, b: 1, first: "ok", third: "error" }
>over = { a: 1, b: 1, first: "ok", third: "error" } : { a: 1; b: 1; first: string; third: string; }
>over : Overlapping
>{ a: 1, b: 1, first: "ok", third: "error" } : { a: 1; b: 1; first: string; third: string; }
>a : number
>类型别名 :=> 数字
>1 : 1
>b : number
>类型别名 :=> 数字
>1 : 1
>first : string
>类型别名 :=> 文字
>"ok" : "ok"
>third : string
>类型别名 :=> 文字
>"error" : "error"

// Freshness disappears after spreading a union
declare let t0: { a: any, b: any } | { d: any, e: any }
>t0 : { a: any; b: any; } | { d: any; e: any; }
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>d : any
>类型别名 :=> 任意
>e : any
>类型别名 :=> 任意

declare let t1: { a: any, b: any, c: any } | { c: any, d: any, e: any }
>t1 : { a: any; b: any; c: any; } | { c: any; d: any; e: any; }
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意
>d : any
>类型别名 :=> 任意
>e : any
>类型别名 :=> 任意

let t2 = { ...t1 }
>t2 : { a: any; b: any; c: any; } | { c: any; d: any; e: any; }
>{ ...t1 } : { a: any; b: any; c: any; } | { c: any; d: any; e: any; }
>t1 : { a: any; b: any; c: any; } | { c: any; d: any; e: any; }

t0 = t2
>t0 = t2 : { a: any; b: any; c: any; } | { c: any; d: any; e: any; }
>t0 : { a: any; b: any; } | { d: any; e: any; }
>t2 : { a: any; b: any; c: any; } | { c: any; d: any; e: any; }

