=== tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassTransitivity.ts ===
// subclassing is not transitive when you can remove required parameters and add optional parameters

class C {
>C : C

    foo(x: number) { }
>foo : (x: number) => void
>x : number
>类型别名 :=> 数字
}

class D extends C {
>D : D
>C : C

    foo() { } // ok to drop parameters
>foo : () => void
}

class E extends D {
>E : E
>D : D

    foo(x?: string) { } // ok to add optional parameters
>foo : (x?: string) => void
>x : string
>类型别名 :=> 文字
}

var c: C;
>c : C
>C : C

var d: D;
>d : D
>D : D

var e: E;
>e : E
>E : E

c = e;
>c = e : E
>c : C
>e : E

var r = c.foo(1);
>r : void
>类型别名 :=> 无值
>c.foo(1) : void
>类型别名 :=> 无值
>c.foo : (x: number) => void
>c : C
>foo : (x: number) => void
>1 : 1

var r2 = e.foo('');
>r2 : void
>类型别名 :=> 无值
>e.foo('') : void
>类型别名 :=> 无值
>e.foo : (x?: string) => void
>e : E
>foo : (x?: string) => void
>'' : ""

