=== tests/cases/conformance/expressions/valuesAndReferences/assignments.ts ===
// In this file:
//  Assign to a module
//  Assign to a class
//  Assign to an enum
//  Assign to a function
//  Assign to a variable
//  Assign to a parameter
//  Assign to an interface

module M { }
>M : 任意
>类型别名 :=> 任意

M = null; // Error
>M = null : 空值
>类型别名 :=> 空值
>M : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

class C { }
>C : C

C = null; // Error
>C = null : 空值
>类型别名 :=> 空值
>C : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

enum E { A }
>E : E
>A : E

E = null; // Error
>E = null : 空值
>类型别名 :=> 空值
>E : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

E.A = null; // OK per spec, Error per implementation (509581)
>E.A = null : 空值
>类型别名 :=> 空值
>E.A : 任意
>类型别名 :=> 任意
>E : 类为 E
>A : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

function fn() { }
>fn : () => 无值

fn = null; // Should be error
>fn = null : 空值
>类型别名 :=> 空值
>fn : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

var v;
>v : 任意
>类型别名 :=> 任意

v = null; // OK
>v = null : 空值
>类型别名 :=> 空值
>v : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

function fn2(p) {
>fn2 : (p: 任意) => 无值
>p : 任意
>类型别名 :=> 任意

    p = null; // OK
>p = null : 空值
>类型别名 :=> 空值
>p : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
}

interface I { }
>I : I

I = null; // Error
>I = null : 空值
>类型别名 :=> 空值
>I : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

