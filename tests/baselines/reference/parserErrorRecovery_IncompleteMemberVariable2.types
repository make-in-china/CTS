=== tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IncompleteMemberVariables/parserErrorRecovery_IncompleteMemberVariable2.ts ===
// Interface
interface IPoint {
>IPoint : IPoint

    getDist(): number;
>getDist : () => number
}

// Module
module Shapes {
>Shapes : typeof Shapes

    // Class
    export class Point implements IPoint {
>Point : Point
>IPoint : IPoint

        public con:C "hello";
>con : any
>类型别名 :=> 任意
>C : No type information available!
>"hello" : "hello"

        // Constructor
        constructor (public x: number, public y: number) { }
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

        // Instance member
        getDist() { return Math.sqrt(this.x * this.x + this.y * this.y); }
>getDist : () => number
>Math.sqrt(this.x * this.x + this.y * this.y) : number
>类型别名 :=> 数字
>Math.sqrt : (x: number) => number
>Math : Math
>sqrt : (x: number) => number
>this.x * this.x + this.y * this.y : number
>类型别名 :=> 数字
>this.x * this.x : number
>类型别名 :=> 数字
>this.x : number
>类型别名 :=> 数字
>this : this
>x : number
>类型别名 :=> 数字
>this.x : number
>类型别名 :=> 数字
>this : this
>x : number
>类型别名 :=> 数字
>this.y * this.y : number
>类型别名 :=> 数字
>this.y : number
>类型别名 :=> 数字
>this : this
>y : number
>类型别名 :=> 数字
>this.y : number
>类型别名 :=> 数字
>this : this
>y : number
>类型别名 :=> 数字

        // Static member
        static origin = new Point(0, 0);
>origin : Point
>new Point(0, 0) : Point
>Point : typeof Point
>0 : 0
>0 : 0
    }

}

// Local variables
var p: IPoint = new Shapes.Point(3, 4);
>p : IPoint
>IPoint : IPoint
>new Shapes.Point(3, 4) : Shapes.Point
>Shapes.Point : typeof Shapes.Point
>Shapes : typeof Shapes
>Point : typeof Shapes.Point
>3 : 3
>4 : 4

var dist = p.getDist();
>dist : number
>类型别名 :=> 数字
>p.getDist() : number
>类型别名 :=> 数字
>p.getDist : () => number
>p : IPoint
>getDist : () => number

