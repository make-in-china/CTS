=== tests/cases/conformance/classes/members/accessibility/privateProtectedMembersAreNotAccessibleDestructuring.ts ===
class K {
>K : K

    private priv;
>priv : 任意
>类型别名 :=> 任意

    protected prot;
>prot : 任意
>类型别名 :=> 任意

    private privateMethod() { }
>privateMethod : () => 无值

    m() {
>m : () => 无值

        let { priv: a, prot: b } = this; // ok
>priv : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>prot : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>this : 本体

        let { priv, prot } = new K(); // ok
>priv : 任意
>类型别名 :=> 任意
>prot : 任意
>类型别名 :=> 任意
>new K() : K
>K : 类为 K
    }
}
class C extends K {
>C : C
>K : K

    m2() {
>m2 : () => 无值

        let { priv: a } = this; // error
>priv : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>this : 本体

        let { prot: b } = this; // ok
>prot : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>this : 本体
    }
}
let k = new K();
>k : K
>new K() : K
>K : 类为 K

let { priv } = k; // error 
>priv : 任意
>类型别名 :=> 任意
>k : K

let { prot } = k; // error
>prot : 任意
>类型别名 :=> 任意
>k : K

let { privateMethod } = k; // error
>privateMethod : () => 无值
>k : K

let { priv: a, prot: b, privateMethod: f } = k; // error
>priv : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>prot : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>privateMethod : 任意
>类型别名 :=> 任意
>f : () => 无值
>k : K

