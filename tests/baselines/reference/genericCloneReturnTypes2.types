=== tests/cases/compiler/genericCloneReturnTypes2.ts ===
class MyList<T> {
>MyList : MyList<T>
>T : T

    public size: number;
>size : number
>类型别名 :=> 数字

    public data: T[];
>data : T[]
>T : T

    constructor(n: number) {
>n : number
>类型别名 :=> 数字

        this.size = n;
>this.size = n : number
>类型别名 :=> 数字
>this.size : number
>类型别名 :=> 数字
>this : this
>size : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字

        this.data = new Array<T>(this.size);
>this.data = new Array<T>(this.size) : T[]
>this.data : T[]
>this : this
>data : T[]
>new Array<T>(this.size) : T[]
>Array : ArrayConstructor
>T : T
>this.size : number
>类型别名 :=> 数字
>this : this
>size : number
>类型别名 :=> 数字
    }
    public clone() {
>clone : () => MyList<T>

        return new MyList<T>(this.size);
>new MyList<T>(this.size) : MyList<T>
>MyList : typeof MyList
>T : T
>this.size : number
>类型别名 :=> 数字
>this : this
>size : number
>类型别名 :=> 数字
    }
}
var a: MyList<string>;
>a : MyList<string>
>MyList : MyList<T>

var b: MyList<any> = a.clone(); // ok
>b : MyList<any>
>MyList : MyList<T>
>a.clone() : MyList<string>
>a.clone : () => MyList<string>
>a : MyList<string>
>clone : () => MyList<string>

var c: MyList<string> = a.clone(); // bug was there was an error on this line
>c : MyList<string>
>MyList : MyList<T>
>a.clone() : MyList<string>
>a.clone : () => MyList<string>
>a : MyList<string>
>clone : () => MyList<string>

var d: MyList<number> = a.clone(); // error
>d : MyList<number>
>MyList : MyList<T>
>a.clone() : MyList<string>
>a.clone : () => MyList<string>
>a : MyList<string>
>clone : () => MyList<string>

