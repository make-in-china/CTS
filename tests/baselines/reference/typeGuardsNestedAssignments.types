=== tests/cases/conformance/controlFlow/typeGuardsNestedAssignments.ts ===
class Foo {
>Foo : Foo

    x: string;
>x : 文字
>类型别名 :=> 文字
}

declare function getFooOrNull(): Foo | null;
>getFooOrNull : () => Foo | 空值
>Foo : Foo
>null : 空值
>类型别名 :=> 空值

declare function getStringOrNumberOrNull(): string | number | null;
>getStringOrNumberOrNull : () => 文字 | 数字 | 空值
>null : 空值
>类型别名 :=> 空值

function f1() {
>f1 : () => 无值

    let foo: Foo | null;
>foo : Foo | 空值
>Foo : Foo
>null : 空值
>类型别名 :=> 空值

    if ((foo = getFooOrNull()) !== null) {
>(foo = getFooOrNull()) !== null : 真假
>类型别名 :=> 真假
>(foo = getFooOrNull()) : Foo | 空值
>foo = getFooOrNull() : Foo | 空值
>foo : Foo | 空值
>getFooOrNull() : Foo | 空值
>getFooOrNull : () => Foo | 空值
>null : 空值
>类型别名 :=> 空值

        foo;  // Foo
>foo : Foo
    }
}

function f2() {
>f2 : () => 无值

    let foo1: Foo | null;
>foo1 : Foo | 空值
>Foo : Foo
>null : 空值
>类型别名 :=> 空值

    let foo2: Foo | null;
>foo2 : Foo | 空值
>Foo : Foo
>null : 空值
>类型别名 :=> 空值

    if ((foo1 = getFooOrNull(), foo2 = foo1) !== null) {
>(foo1 = getFooOrNull(), foo2 = foo1) !== null : 真假
>类型别名 :=> 真假
>(foo1 = getFooOrNull(), foo2 = foo1) : Foo | 空值
>foo1 = getFooOrNull(), foo2 = foo1 : Foo | 空值
>foo1 = getFooOrNull() : Foo | 空值
>foo1 : Foo | 空值
>getFooOrNull() : Foo | 空值
>getFooOrNull : () => Foo | 空值
>foo2 = foo1 : Foo | 空值
>foo2 : Foo | 空值
>foo1 : Foo | 空值
>null : 空值
>类型别名 :=> 空值

        foo1;  // Foo | null
>foo1 : Foo | 空值

        foo2;  // Foo
>foo2 : Foo
    }
}

function f3() {
>f3 : () => 无值

    let obj: Object | null;
>obj : Object | 空值
>Object : Object
>null : 空值
>类型别名 :=> 空值

    if ((obj = getFooOrNull()) instanceof Foo) {
>(obj = getFooOrNull()) instanceof Foo : 真假
>类型别名 :=> 真假
>(obj = getFooOrNull()) : Foo | 空值
>obj = getFooOrNull() : Foo | 空值
>obj : Object | 空值
>getFooOrNull() : Foo | 空值
>getFooOrNull : () => Foo | 空值
>Foo : 类为 Foo

        obj;
>obj : Foo
    }
}

function f4() {
>f4 : () => 无值

    let x: string | number | null;
>x : 文字 | 数字 | 空值
>null : 空值
>类型别名 :=> 空值

    if (typeof (x = getStringOrNumberOrNull()) === "number") {
>typeof (x = getStringOrNumberOrNull()) === "number" : 真假
>类型别名 :=> 真假
>typeof (x = getStringOrNumberOrNull()) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>(x = getStringOrNumberOrNull()) : 文字 | 数字 | 空值
>x = getStringOrNumberOrNull() : 文字 | 数字 | 空值
>x : 文字 | 数字 | 空值
>getStringOrNumberOrNull() : 文字 | 数字 | 空值
>getStringOrNumberOrNull : () => 文字 | 数字 | 空值
>"number" : "number"

        x;
>x : 数字
>类型别名 :=> 数字
    }
}

// Repro from #8851

const re = /./g
>re : RegExp
>/./g : RegExp

let match: RegExpExecArray | null
>match : RegExpExecArray | 空值
>RegExpExecArray : RegExpExecArray
>null : 空值
>类型别名 :=> 空值

while ((match = re.exec("xxx")) != null) {
>(match = re.exec("xxx")) != null : 真假
>类型别名 :=> 真假
>(match = re.exec("xxx")) : RegExpExecArray | 空值
>match = re.exec("xxx") : RegExpExecArray | 空值
>match : RegExpExecArray | 空值
>re.exec("xxx") : RegExpExecArray | 空值
>re.exec : (string: 文字) => RegExpExecArray | 空值
>re : RegExp
>exec : (string: 文字) => RegExpExecArray | 空值
>"xxx" : "xxx"
>null : 空值
>类型别名 :=> 空值

    const length = match[1].length + match[2].length
>length : 数字
>类型别名 :=> 数字
>match[1].length + match[2].length : 数字
>类型别名 :=> 数字
>match[1].length : 数字
>类型别名 :=> 数字
>match[1] : 文字
>类型别名 :=> 文字
>match : RegExpExecArray
>1 : 1
>length : 数字
>类型别名 :=> 数字
>match[2].length : 数字
>类型别名 :=> 数字
>match[2] : 文字
>类型别名 :=> 文字
>match : RegExpExecArray
>2 : 2
>length : 数字
>类型别名 :=> 数字
}
