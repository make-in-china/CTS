=== tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithNumberType.ts ===
// delete  operator on number type
var NUMBER: number;
>NUMBER : 数字
>类型别名 :=> 数字

var NUMBER1: number[] = [1, 2];
>NUMBER1 : 数字[]
>[1, 2] : 数字[]
>1 : 1
>2 : 2

function foo(): number { return 1; }
>foo : () => 数字
>1 : 1

class A {
>A : A

    public a: number;
>a : 数字
>类型别名 :=> 数字

    static foo() { return 1; }
>foo : () => 数字
>1 : 1
}
module M {
>M : 类为 M

    export var n: number;
>n : 数字
>类型别名 :=> 数字
}

var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// number type var
var ResultIsBoolean1 = delete NUMBER;
>ResultIsBoolean1 : 真假
>类型别名 :=> 真假
>delete NUMBER : 真假
>类型别名 :=> 真假
>NUMBER : 数字
>类型别名 :=> 数字

var ResultIsBoolean2 = delete NUMBER1;
>ResultIsBoolean2 : 真假
>类型别名 :=> 真假
>delete NUMBER1 : 真假
>类型别名 :=> 真假
>NUMBER1 : 数字[]

// number type literal
var ResultIsBoolean3 = delete 1;
>ResultIsBoolean3 : 真假
>类型别名 :=> 真假
>delete 1 : 真假
>类型别名 :=> 真假
>1 : 1

var ResultIsBoolean4 = delete { x: 1, y: 2};
>ResultIsBoolean4 : 真假
>类型别名 :=> 真假
>delete { x: 1, y: 2} : 真假
>类型别名 :=> 真假
>{ x: 1, y: 2} : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

var ResultIsBoolean5 = delete { x: 1, y: (n: number) => { return n; } };
>ResultIsBoolean5 : 真假
>类型别名 :=> 真假
>delete { x: 1, y: (n: number) => { return n; } } : 真假
>类型别名 :=> 真假
>{ x: 1, y: (n: number) => { return n; } } : { x: 数字; y: (n: 数字) => 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : (n: 数字) => 数字
>(n: number) => { return n; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

// number type expressions
var ResultIsBoolean6 = delete objA.a;
>ResultIsBoolean6 : 真假
>类型别名 :=> 真假
>delete objA.a : 真假
>类型别名 :=> 真假
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字

var ResultIsBoolean7 = delete M.n;
>ResultIsBoolean7 : 真假
>类型别名 :=> 真假
>delete M.n : 真假
>类型别名 :=> 真假
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

var ResultIsBoolean8 = delete NUMBER1[0];
>ResultIsBoolean8 : 真假
>类型别名 :=> 真假
>delete NUMBER1[0] : 真假
>类型别名 :=> 真假
>NUMBER1[0] : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]
>0 : 0

var ResultIsBoolean9 = delete foo();
>ResultIsBoolean9 : 真假
>类型别名 :=> 真假
>delete foo() : 真假
>类型别名 :=> 真假
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字

var ResultIsBoolean10 = delete A.foo();
>ResultIsBoolean10 : 真假
>类型别名 :=> 真假
>delete A.foo() : 真假
>类型别名 :=> 真假
>A.foo() : 数字
>类型别名 :=> 数字
>A.foo : () => 数字
>A : 类为 A
>foo : () => 数字

var ResultIsBoolean11 = delete (NUMBER + NUMBER);
>ResultIsBoolean11 : 真假
>类型别名 :=> 真假
>delete (NUMBER + NUMBER) : 真假
>类型别名 :=> 真假
>(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>NUMBER + NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

// multiple delete  operator
var ResultIsBoolean12 = delete delete NUMBER;
>ResultIsBoolean12 : 真假
>类型别名 :=> 真假
>delete delete NUMBER : 真假
>类型别名 :=> 真假
>delete NUMBER : 真假
>类型别名 :=> 真假
>NUMBER : 数字
>类型别名 :=> 数字

var ResultIsBoolean13 = delete delete delete (NUMBER + NUMBER);
>ResultIsBoolean13 : 真假
>类型别名 :=> 真假
>delete delete delete (NUMBER + NUMBER) : 真假
>类型别名 :=> 真假
>delete delete (NUMBER + NUMBER) : 真假
>类型别名 :=> 真假
>delete (NUMBER + NUMBER) : 真假
>类型别名 :=> 真假
>(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>NUMBER + NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

// miss assignment operators
delete 1;
>delete 1 : 真假
>类型别名 :=> 真假
>1 : 1

delete NUMBER;
>delete NUMBER : 真假
>类型别名 :=> 真假
>NUMBER : 数字
>类型别名 :=> 数字

delete NUMBER1;
>delete NUMBER1 : 真假
>类型别名 :=> 真假
>NUMBER1 : 数字[]

delete foo();
>delete foo() : 真假
>类型别名 :=> 真假
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字

delete objA.a;
>delete objA.a : 真假
>类型别名 :=> 真假
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字

delete M.n;
>delete M.n : 真假
>类型别名 :=> 真假
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

delete objA.a, M.n;
>delete objA.a, M.n : 数字
>类型别名 :=> 数字
>delete objA.a : 真假
>类型别名 :=> 真假
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

