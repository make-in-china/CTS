=== tests/cases/conformance/types/intersection/intersectionTypeInference.ts ===
function extend<T, U>(obj1: T, obj2: U): T & U {
>extend : <T, U>(obj1: T, obj2: U) => T & U
>T : T
>U : U
>obj1 : T
>T : T
>obj2 : U
>U : U
>T : T
>U : U

    var result: T & U;
>result : T & U
>T : T
>U : U

    obj1 = result;
>obj1 = result : T & U
>obj1 : T
>result : T & U

    obj2 = result;
>obj2 = result : T & U
>obj2 : U
>result : T & U

    result = obj1;  // Error
>result = obj1 : T
>result : T & U
>obj1 : T

    result = obj2;  // Error
>result = obj2 : U
>result : T & U
>obj2 : U

    return result;
>result : T & U
}

var x = extend({ a: "hello" }, { b: 42 });
>x : { a: 文字; } & { b: 数字; }
>extend({ a: "hello" }, { b: 42 }) : { a: 文字; } & { b: 数字; }
>extend : <T, U>(obj1: T, obj2: U) => T & U
>{ a: "hello" } : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>"hello" : "hello"
>{ b: 42 } : { b: 数字; }
>b : 数字
>类型别名 :=> 数字
>42 : 42

var s = x.a;
>s : 文字
>类型别名 :=> 文字
>x.a : 文字
>类型别名 :=> 文字
>x : { a: 文字; } & { b: 数字; }
>a : 文字
>类型别名 :=> 文字

var n = x.b;
>n : 数字
>类型别名 :=> 数字
>x.b : 数字
>类型别名 :=> 数字
>x : { a: 文字; } & { b: 数字; }
>b : 数字
>类型别名 :=> 数字

interface A<T> {
>A : A<T>
>T : T

    a: T;
>a : T
>T : T
}

interface B<U> {
>B : B<U>
>U : U

    b: U;
>b : U
>U : U
}

function foo<T, U>(obj: A<T> & B<U>): T | U {
>foo : <T, U>(obj: A<T> & B<U>) => T | U
>T : T
>U : U
>obj : A<T> & B<U>
>A : A<T>
>T : T
>B : B<U>
>U : U
>T : T
>U : U

    return undefined;
>undefined : 未定
>类型别名 :=> 未定
}

var z = foo({ a: "hello", b: 42 });
>z : 文字 | 数字
>foo({ a: "hello", b: 42 }) : 文字 | 数字
>foo : <T, U>(obj: A<T> & B<U>) => T | U
>{ a: "hello", b: 42 } : { a: 文字; b: 数字; }
>a : 文字
>类型别名 :=> 文字
>"hello" : "hello"
>b : 数字
>类型别名 :=> 数字
>42 : 42

var z: string | number;
>z : 文字 | 数字

