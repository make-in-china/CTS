=== tests/cases/conformance/types/typeRelationships/widenedTypes/objectLiteralWidened.ts ===
// object literal properties are widened to any

var x1 = {
>x1 : { foo: any; bar: any; }
>{    foo: null,    bar: undefined} : { foo: null; bar: undefined; }

    foo: null,
>foo : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

    bar: undefined
>bar : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定
}

var y1 = {
>y1 : { foo: any; bar: { baz: any; boo: any; }; }
>{    foo: null,    bar: {        baz: null,        boo: undefined    }} : { foo: null; bar: { baz: null; boo: undefined; }; }

    foo: null,
>foo : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

    bar: {
>bar : { baz: null; boo: undefined; }
>{        baz: null,        boo: undefined    } : { baz: null; boo: undefined; }

        baz: null,
>baz : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

        boo: undefined
>boo : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定
    }
}

// these are not widened

var u: undefined = undefined;
>u : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定

var n: null = null;
>n : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值

var x2 = {
>x2 : { foo: null; bar: undefined; }
>{    foo: n,    bar: u} : { foo: null; bar: undefined; }

    foo: n,
>foo : null
>类型别名 :=> 空值
>n : null
>类型别名 :=> 空值

    bar: u
>bar : undefined
>类型别名 :=> 未定
>u : undefined
>类型别名 :=> 未定
}

var y2 = {
>y2 : { foo: null; bar: { baz: null; boo: undefined; }; }
>{    foo: n,    bar: {        baz: n,        boo: u    }} : { foo: null; bar: { baz: null; boo: undefined; }; }

    foo: n,
>foo : null
>类型别名 :=> 空值
>n : null
>类型别名 :=> 空值

    bar: {
>bar : { baz: null; boo: undefined; }
>{        baz: n,        boo: u    } : { baz: null; boo: undefined; }

        baz: n,
>baz : null
>类型别名 :=> 空值
>n : null
>类型别名 :=> 空值

        boo: u
>boo : undefined
>类型别名 :=> 未定
>u : undefined
>类型别名 :=> 未定
    }
}
