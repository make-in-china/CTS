=== tests/cases/compiler/recursiveNamedLambdaCall.ts ===
var promise = function( obj ) {
>promise : (obj: 任意) => 无值
>function( obj ) {			if ( top && top.doScroll ) {			(function doScrollCheck() {				if ( false ) {					try {						top.doScroll("left");					} catch(e) {						return setTimeout( doScrollCheck, 50 );					}					// detach all dom ready events					detach();				}			})();		}} : (obj: 任意) => 无值
>obj : 任意
>类型别名 :=> 任意
	
		if ( top && top.doScroll ) {
>top && top.doScroll : 任意
>类型别名 :=> 任意
>top : 任意
>类型别名 :=> 任意
>top.doScroll : 任意
>类型别名 :=> 任意
>top : 任意
>类型别名 :=> 任意
>doScroll : 任意
>类型别名 :=> 任意

			(function doScrollCheck() {
>(function doScrollCheck() {				if ( false ) {					try {						top.doScroll("left");					} catch(e) {						return setTimeout( doScrollCheck, 50 );					}					// detach all dom ready events					detach();				}			})() : 任意
>类型别名 :=> 任意
>(function doScrollCheck() {				if ( false ) {					try {						top.doScroll("left");					} catch(e) {						return setTimeout( doScrollCheck, 50 );					}					// detach all dom ready events					detach();				}			}) : () => 任意
>function doScrollCheck() {				if ( false ) {					try {						top.doScroll("left");					} catch(e) {						return setTimeout( doScrollCheck, 50 );					}					// detach all dom ready events					detach();				}			} : () => 任意
>doScrollCheck : () => 任意

				if ( false ) {
>false : 为假
>类型别名 :=> 为假

					try {
						top.doScroll("left");
>top.doScroll("left") : 任意
>类型别名 :=> 任意
>top.doScroll : 任意
>类型别名 :=> 任意
>top : 任意
>类型别名 :=> 任意
>doScroll : 任意
>类型别名 :=> 任意
>"left" : "left"

					} catch(e) {
>e : 任意
>类型别名 :=> 任意

						return setTimeout( doScrollCheck, 50 );
>setTimeout( doScrollCheck, 50 ) : 任意
>类型别名 :=> 任意
>setTimeout : 任意
>类型别名 :=> 任意
>doScrollCheck : () => 任意
>50 : 50
					}

					// detach all dom ready events
					detach();
>detach() : 任意
>类型别名 :=> 任意
>detach : 任意
>类型别名 :=> 任意

				}
			})();
		}
};
