=== tests/cases/conformance/expressions/typeGuards/typeGuardIntersectionTypes.ts ===
interface X {
>X : X

    x: string;
>x : 文字
>类型别名 :=> 文字
}

interface Y {
>Y : Y

    y: string;
>y : 文字
>类型别名 :=> 文字
}

interface Z {
>Z : Z

    z: string;
>z : 文字
>类型别名 :=> 文字
}

declare function isX(obj: any): obj is X;
>isX : (obj: 任意) => obj 作为 X
>obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意
>X : X

declare function isY(obj: any): obj is Y;
>isY : (obj: 任意) => obj 作为 Y
>obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意
>Y : Y

declare function isZ(obj: any): obj is Z;
>isZ : (obj: 任意) => obj 作为 Z
>obj : 任意
>类型别名 :=> 任意
>obj : 任意
>类型别名 :=> 任意
>Z : Z

function f1(obj: Object) {
>f1 : (obj: Object) => 无值
>obj : Object
>Object : Object

    if (isX(obj) || isY(obj) || isZ(obj)) {
>isX(obj) || isY(obj) || isZ(obj) : 真假
>类型别名 :=> 真假
>isX(obj) || isY(obj) : 真假
>类型别名 :=> 真假
>isX(obj) : 真假
>类型别名 :=> 真假
>isX : (obj: 任意) => obj 作为 X
>obj : Object
>isY(obj) : 真假
>类型别名 :=> 真假
>isY : (obj: 任意) => obj 作为 Y
>obj : Object
>isZ(obj) : 真假
>类型别名 :=> 真假
>isZ : (obj: 任意) => obj 作为 Z
>obj : Object

        obj;
>obj : X | Y | Z
    }
    if (isX(obj) && isY(obj) && isZ(obj)) {
>isX(obj) && isY(obj) && isZ(obj) : 真假
>类型别名 :=> 真假
>isX(obj) && isY(obj) : 真假
>类型别名 :=> 真假
>isX(obj) : 真假
>类型别名 :=> 真假
>isX : (obj: 任意) => obj 作为 X
>obj : Object
>isY(obj) : 真假
>类型别名 :=> 真假
>isY : (obj: 任意) => obj 作为 Y
>obj : X
>isZ(obj) : 真假
>类型别名 :=> 真假
>isZ : (obj: 任意) => obj 作为 Z
>obj : X & Y

        obj;
>obj : X & Y & Z
    }
}

// Repro from #8911

// two interfaces
interface A {
>A : A

  a: string;
>a : 文字
>类型别名 :=> 文字
}

interface B {
>B : B

  b: string;
>b : 文字
>类型别名 :=> 文字
}

// a type guard for B
function isB(toTest: any): toTest is B {
>isB : (toTest: 任意) => toTest 作为 B
>toTest : 任意
>类型别名 :=> 任意
>toTest : 任意
>类型别名 :=> 任意
>B : B

  return toTest && toTest.b;
>toTest && toTest.b : 任意
>类型别名 :=> 任意
>toTest : 任意
>类型别名 :=> 任意
>toTest.b : 任意
>类型别名 :=> 任意
>toTest : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
}

// a function that turns an A into an A & B
function union(a: A): A & B | null {
>union : (a: A) => (A & B) | 空值
>a : A
>A : A
>A : A
>B : B
>null : 空值
>类型别名 :=> 空值

  if (isB(a)) {
>isB(a) : 真假
>类型别名 :=> 真假
>isB : (toTest: 任意) => toTest 作为 B
>a : A

    return a;
>a : A & B

  } else {
    return null;
>null : 空值
>类型别名 :=> 空值
  }
}

// Repro from #9016

declare function log(s: string): void;
>log : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字

// Supported beast features
interface Beast     { wings?: boolean; legs?: number }
>Beast : Beast
>wings : 真假 | 未定
>legs : 数字 | 未定

interface Legged    { legs: number; }
>Legged : Legged
>legs : 数字
>类型别名 :=> 数字

interface Winged    { wings: boolean; }
>Winged : Winged
>wings : 真假
>类型别名 :=> 真假

// Beast feature detection via user-defined type guards
function hasLegs(x: Beast): x is Legged { return x && typeof x.legs === 'number'; }
>hasLegs : (x: Beast) => x 作为 Legged
>x : Beast
>Beast : Beast
>x : 任意
>类型别名 :=> 任意
>Legged : Legged
>x && typeof x.legs === 'number' : 真假
>类型别名 :=> 真假
>x : Beast
>typeof x.legs === 'number' : 真假
>类型别名 :=> 真假
>typeof x.legs : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x.legs : 数字 | 未定
>x : Beast
>legs : 数字 | 未定
>'number' : "number"

function hasWings(x: Beast): x is Winged { return x && !!x.wings; }
>hasWings : (x: Beast) => x 作为 Winged
>x : Beast
>Beast : Beast
>x : 任意
>类型别名 :=> 任意
>Winged : Winged
>x && !!x.wings : 真假
>类型别名 :=> 真假
>x : Beast
>!!x.wings : 真假
>类型别名 :=> 真假
>!x.wings : 真假
>类型别名 :=> 真假
>x.wings : 真假 | 未定
>x : Beast
>wings : 真假 | 未定

// Function to identify a given beast by detecting its features
function identifyBeast(beast: Beast) {
>identifyBeast : (beast: Beast) => 无值
>beast : Beast
>Beast : Beast

    // All beasts with legs
    if (hasLegs(beast)) {
>hasLegs(beast) : 真假
>类型别名 :=> 真假
>hasLegs : (x: Beast) => x 作为 Legged
>beast : Beast

        // All winged beasts with legs
        if (hasWings(beast)) {
>hasWings(beast) : 真假
>类型别名 :=> 真假
>hasWings : (x: Beast) => x 作为 Winged
>beast : Legged

            if (beast.legs === 4) {
>beast.legs === 4 : 真假
>类型别名 :=> 真假
>beast.legs : 数字
>类型别名 :=> 数字
>beast : Legged & Winged
>legs : 数字
>类型别名 :=> 数字
>4 : 4

                log(`pegasus - 4 legs, wings`);
>log(`pegasus - 4 legs, wings`) : 无值
>类型别名 :=> 无值
>log : (s: 文字) => 无值
>`pegasus - 4 legs, wings` : "pegasus - 4 legs, wings"
            }
            else if (beast.legs === 2) {
>beast.legs === 2 : 真假
>类型别名 :=> 真假
>beast.legs : 数字
>类型别名 :=> 数字
>beast : Legged & Winged
>legs : 数字
>类型别名 :=> 数字
>2 : 2

                log(`bird - 2 legs, wings`);
>log(`bird - 2 legs, wings`) : 无值
>类型别名 :=> 无值
>log : (s: 文字) => 无值
>`bird - 2 legs, wings` : "bird - 2 legs, wings"
            }
            else {
                log(`unknown - ${beast.legs} legs, wings`);
>log(`unknown - ${beast.legs} legs, wings`) : 无值
>类型别名 :=> 无值
>log : (s: 文字) => 无值
>`unknown - ${beast.legs} legs, wings` : 文字
>类型别名 :=> 文字
>beast.legs : 数字
>类型别名 :=> 数字
>beast : Legged & Winged
>legs : 数字
>类型别名 :=> 数字
            }
        }

        // All non-winged beasts with legs
        else {
            log(`manbearpig - ${beast.legs} legs, no wings`);
>log(`manbearpig - ${beast.legs} legs, no wings`) : 无值
>类型别名 :=> 无值
>log : (s: 文字) => 无值
>`manbearpig - ${beast.legs} legs, no wings` : 文字
>类型别名 :=> 文字
>beast.legs : 数字
>类型别名 :=> 数字
>beast : Legged
>legs : 数字
>类型别名 :=> 数字
        }
    }

    // All beasts without legs    
    else {
        if (hasWings(beast)) {
>hasWings(beast) : 真假
>类型别名 :=> 真假
>hasWings : (x: Beast) => x 作为 Winged
>beast : Beast

            log(`quetzalcoatl - no legs, wings`)
>log(`quetzalcoatl - no legs, wings`) : 无值
>类型别名 :=> 无值
>log : (s: 文字) => 无值
>`quetzalcoatl - no legs, wings` : "quetzalcoatl - no legs, wings"
        }
        else {
            log(`snake - no legs, no wings`)
>log(`snake - no legs, no wings`) : 无值
>类型别名 :=> 无值
>log : (s: 文字) => 无值
>`snake - no legs, no wings` : "snake - no legs, no wings"
        }
    }
}

function beastFoo(beast: Object) {
>beastFoo : (beast: Object) => 无值
>beast : Object
>Object : Object

    if (hasWings(beast) && hasLegs(beast)) {
>hasWings(beast) && hasLegs(beast) : 真假
>类型别名 :=> 真假
>hasWings(beast) : 真假
>类型别名 :=> 真假
>hasWings : (x: Beast) => x 作为 Winged
>beast : Object
>hasLegs(beast) : 真假
>类型别名 :=> 真假
>hasLegs : (x: Beast) => x 作为 Legged
>beast : Winged

        beast;  // Winged & Legged
>beast : Winged & Legged
    }
    else {
        beast;
>beast : Object
    }

    if (hasLegs(beast) && hasWings(beast)) {
>hasLegs(beast) && hasWings(beast) : 真假
>类型别名 :=> 真假
>hasLegs(beast) : 真假
>类型别名 :=> 真假
>hasLegs : (x: Beast) => x 作为 Legged
>beast : Object
>hasWings(beast) : 真假
>类型别名 :=> 真假
>hasWings : (x: Beast) => x 作为 Winged
>beast : Legged

        beast;  // Legged & Winged
>beast : Legged & Winged
    }
}
