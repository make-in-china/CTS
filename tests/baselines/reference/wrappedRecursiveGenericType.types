=== tests/cases/compiler/wrappedRecursiveGenericType.ts ===
interface X<T> { e: T; }
>X : X<T>
>T : T
>e : T
>T : T

interface A<T> {
>A : A<T>
>T : T

    a: B<T>;
>a : B<T>
>B : B<T>
>T : T

    val: T;
>val : T
>T : T
}
interface B<T> {
>B : B<T>
>T : T

    b: A<X<T>>;
>b : A<X<T>>
>A : A<T>
>X : X<T>
>T : T

    val: T;
>val : T
>T : T
}
var x: A<number>;
>x : A<数字>
>A : A<T>

x.val = 5;         // val -> number
>x.val = 5 : 5
>x.val : 数字
>类型别名 :=> 数字
>x : A<数字>
>val : 数字
>类型别名 :=> 数字
>5 : 5

x.a.val = 5;       // val -> number
>x.a.val = 5 : 5
>x.a.val : 数字
>类型别名 :=> 数字
>x.a : B<数字>
>x : A<数字>
>a : B<数字>
>val : 数字
>类型别名 :=> 数字
>5 : 5

x.a.b.val = 5;     // val -> X<number> (This should be an error)
>x.a.b.val = 5 : 5
>x.a.b.val : X<数字>
>x.a.b : A<X<数字>>
>x.a : B<数字>
>x : A<数字>
>a : B<数字>
>b : A<X<数字>>
>val : X<数字>
>5 : 5

x.a.b.a.val = 5;   // val -> X<number> (This should be an error)
>x.a.b.a.val = 5 : 5
>x.a.b.a.val : X<数字>
>x.a.b.a : B<X<数字>>
>x.a.b : A<X<数字>>
>x.a : B<数字>
>x : A<数字>
>a : B<数字>
>b : A<X<数字>>
>a : B<X<数字>>
>val : X<数字>
>5 : 5

