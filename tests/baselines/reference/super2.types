=== tests/cases/compiler/super2.ts ===
// Case 5
class Base5 {
>Base5 : Base5

    public x() {
>x : () => 文字

        return "BaseX";
>"BaseX" : "BaseX"
    }
    
    public y() {
>y : () => 文字

        return "BaseY";
>"BaseY" : "BaseY"
    }
}

class Sub5 extends Base5 {
>Sub5 : Sub5
>Base5 : Base5

    public x() {
>x : () => 文字

        return "SubX";
>"SubX" : "SubX"
    }
}

class SubSub5 extends Sub5 {
>SubSub5 : SubSub5
>Sub5 : Sub5

    public x() {
>x : () => 文字

        return super.x();
>super.x() : 文字
>类型别名 :=> 文字
>super.x : () => 文字
>super : Sub5
>x : () => 文字
    }
    public y() {
>y : () => 文字

        return super.y();
>super.y() : 文字
>类型别名 :=> 文字
>super.y : () => 文字
>super : Sub5
>y : () => 文字
    }
}

// Case 6
class Base6 {
>Base6 : Base6

    public x() {
>x : () => 文字

        return "BaseX";
>"BaseX" : "BaseX"
    }
}

class Sub6 extends Base6 {
>Sub6 : Sub6
>Base6 : Base6

    public y() {
>y : () => 文字

        return "SubY";
>"SubY" : "SubY"
    }
}

class SubSub6 extends Sub6 {
>SubSub6 : SubSub6
>Sub6 : Sub6

    public y() {
>y : () => 文字

        return super.y();
>super.y() : 文字
>类型别名 :=> 文字
>super.y : () => 文字
>super : Sub6
>y : () => 文字
    }
}


var results1 = new SubSub5();
>results1 : SubSub5
>new SubSub5() : SubSub5
>SubSub5 : 类为 SubSub5

var results2 = new SubSub6();
>results2 : SubSub6
>new SubSub6() : SubSub6
>SubSub6 : 类为 SubSub6

results1.x() + results1.y() + results2.y();
>results1.x() + results1.y() + results2.y() : 文字
>类型别名 :=> 文字
>results1.x() + results1.y() : 文字
>类型别名 :=> 文字
>results1.x() : 文字
>类型别名 :=> 文字
>results1.x : () => 文字
>results1 : SubSub5
>x : () => 文字
>results1.y() : 文字
>类型别名 :=> 文字
>results1.y : () => 文字
>results1 : SubSub5
>y : () => 文字
>results2.y() : 文字
>类型别名 :=> 文字
>results2.y : () => 文字
>results2 : SubSub6
>y : () => 文字

