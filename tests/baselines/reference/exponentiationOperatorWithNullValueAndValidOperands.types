=== tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithNullValueAndValidOperands.ts ===
// If one operand is the null or undefined value, it is treated as having the type of the
// other operand.

enum E {
>E : E

    a,
>a : E.a

    b
>b : E.b
}

var a: any;
>a : any
>类型别名 :=> 任意

var b: number;
>b : number
>类型别名 :=> 数字

// operator **
var r1 = null ** a;
>r1 : number
>类型别名 :=> 数字
>null ** a : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值
>a : any
>类型别名 :=> 任意

var r2 = null ** b;
>r2 : number
>类型别名 :=> 数字
>null ** b : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值
>b : number
>类型别名 :=> 数字

var r3 = null ** 1;
>r3 : number
>类型别名 :=> 数字
>null ** 1 : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值
>1 : 1

var r4 = null ** E.a;
>r4 : number
>类型别名 :=> 数字
>null ** E.a : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值
>E.a : E.a
>E : typeof E
>a : E.a

var r5 = a ** null;
>r5 : number
>类型别名 :=> 数字
>a ** null : number
>类型别名 :=> 数字
>a : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值

var r6 = b ** null;
>r6 : number
>类型别名 :=> 数字
>b ** null : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>null : null
>类型别名 :=> 空值

var r7 = 0 ** null;
>r7 : number
>类型别名 :=> 数字
>0 ** null : number
>类型别名 :=> 数字
>0 : 0
>null : null
>类型别名 :=> 空值

var r8 = E.b ** null;
>r8 : number
>类型别名 :=> 数字
>E.b ** null : number
>类型别名 :=> 数字
>E.b : E.b
>E : typeof E
>b : E.b
>null : null
>类型别名 :=> 空值

