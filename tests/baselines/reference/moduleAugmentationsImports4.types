=== tests/cases/compiler/main.ts ===
/// <reference path="d.d.ts"/>
/// <reference path="e.d.ts"/>
import {A} from "./a";
>A : 类为 A

import "D";
import "E";

let a: A;
>a : A
>A : A

let b = a.getB().x.toFixed();
>b : 文字
>类型别名 :=> 文字
>a.getB().x.toFixed() : 文字
>类型别名 :=> 文字
>a.getB().x.toFixed : (fractionDigits?: 数字) => 文字
>a.getB().x : 数字
>类型别名 :=> 数字
>a.getB() : B
>a.getB : () => B
>a : A
>getB : () => B
>x : 数字
>类型别名 :=> 数字
>toFixed : (fractionDigits?: 数字) => 文字

let c = a.getCls().y.toLowerCase();
>c : 文字
>类型别名 :=> 文字
>a.getCls().y.toLowerCase() : 文字
>类型别名 :=> 文字
>a.getCls().y.toLowerCase : () => 文字
>a.getCls().y : 文字
>类型别名 :=> 文字
>a.getCls() : Cls
>a.getCls : () => Cls
>a : A
>getCls : () => Cls
>y : 文字
>类型别名 :=> 文字
>toLowerCase : () => 文字

=== tests/cases/compiler/a.ts ===
export class A {}
>A : A

=== tests/cases/compiler/b.ts ===
export class B {x: number;}
>B : B
>x : 数字
>类型别名 :=> 数字

=== tests/cases/compiler/c.d.ts ===
declare module "C" {
    class Cls {y: string; }
>Cls : Cls
>y : 文字
>类型别名 :=> 文字
}

=== tests/cases/compiler/d.d.ts ===
declare module "D" {
    import {A} from "a";
>A : 类为 A

    import {B} from "b";
>B : 类为 B

    module "a" {
        interface A {
>A : A

            getB(): B;
>getB : () => B
>B : B
        }
    }
}

=== tests/cases/compiler/e.d.ts ===
/// <reference path="c.d.ts"/>
declare module "E" {
    import {A} from "a";
>A : 类为 A

    import {Cls} from "C";
>Cls : 类为 Cls

    module "a" {
        interface A {
>A : A

            getCls(): Cls;
>getCls : () => Cls
>Cls : Cls
        }
    }
}

