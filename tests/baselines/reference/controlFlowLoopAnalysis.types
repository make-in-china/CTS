=== tests/cases/compiler/controlFlowLoopAnalysis.ts ===
// Repro from #8418

let cond: boolean;
>cond : 真假
>类型别名 :=> 真假

function foo(x: number): number { return 1; }
>foo : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

function test1() {
>test1 : () => 无值

    let x: number | undefined;
>x : 数字 | 未定

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        while (cond) {
>cond : 为真
>类型别名 :=> 为真

            while (cond) {
>cond : 为真
>类型别名 :=> 为真

                x = foo(x);
>x = foo(x) : 任意
>类型别名 :=> 任意
>x : 数字 | 未定
>foo(x) : 数字
>类型别名 :=> 数字
>foo : (x: 数字) => 数字
>x : 数字 | 未定
            }
        }
        x = 1;
>x = 1 : 1
>x : 数字 | 未定
>1 : 1
    }
}

// Repro from #8418

function test2() {
>test2 : () => 无值

    let x: number | undefined;
>x : 数字 | 未定

    x = 1;
>x = 1 : 1
>x : 数字 | 未定
>1 : 1

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        while (cond) {
>cond : 为真
>类型别名 :=> 为真

            x = foo(x);
>x = foo(x) : 数字
>类型别名 :=> 数字
>x : 数字 | 未定
>foo(x) : 数字
>类型别名 :=> 数字
>foo : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
        }
    }
}

// Repro from #8511

function mapUntilCant<a, b>(
>mapUntilCant : <a, b>(values: a[], canTake: (value: a, index: 数字) => 真假, mapping: (value: a, index: 数字) => b) => b[]
>a : a
>b : b

    values: a[],
>values : a[]
>a : a

    canTake: (value: a, index: number) => boolean,
>canTake : (value: a, index: 数字) => 真假
>value : a
>a : a
>index : 数字
>类型别名 :=> 数字

    mapping: (value: a, index: number) => b
>mapping : (value: a, index: 数字) => b
>value : a
>a : a
>index : 数字
>类型别名 :=> 数字
>b : b

): b[] {
>b : b

    let result: b[] = [];
>result : b[]
>b : b
>[] : 不及[]

    for (let index = 0, length = values.length; index < length; index++) {
>index : 数字
>类型别名 :=> 数字
>0 : 0
>length : 数字
>类型别名 :=> 数字
>values.length : 数字
>类型别名 :=> 数字
>values : a[]
>length : 数字
>类型别名 :=> 数字
>index < length : 真假
>类型别名 :=> 真假
>index : 数字
>类型别名 :=> 数字
>length : 数字
>类型别名 :=> 数字
>index++ : 数字
>类型别名 :=> 数字
>index : 数字
>类型别名 :=> 数字

        let value = values[index];
>value : a
>values[index] : a
>values : a[]
>index : 数字
>类型别名 :=> 数字

        if (canTake(value, index)) {
>canTake(value, index) : 真假
>类型别名 :=> 真假
>canTake : (value: a, index: 数字) => 真假
>value : a
>index : 数字
>类型别名 :=> 数字

            result.push(mapping(value, index));
>result.push(mapping(value, index)) : 数字
>类型别名 :=> 数字
>result.push : (...items: b[]) => 数字
>result : b[]
>push : (...items: b[]) => 数字
>mapping(value, index) : b
>mapping : (value: a, index: 数字) => b
>value : a
>index : 数字
>类型别名 :=> 数字

        } else {
            return result;
>result : b[]
        }
    }
    return result;
>result : b[]
}

