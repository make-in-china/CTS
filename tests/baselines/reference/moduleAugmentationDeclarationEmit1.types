=== tests/cases/compiler/map.ts ===
import { Observable } from "./observable"
>Observable : 类为 Observable

(<any>Observable.prototype).map = function() { }
>(<any>Observable.prototype).map = function() { } : () => 无值
>(<any>Observable.prototype).map : 任意
>类型别名 :=> 任意
>(<any>Observable.prototype) : 任意
>类型别名 :=> 任意
><any>Observable.prototype : 任意
>类型别名 :=> 任意
>Observable.prototype : Observable<任意>
>Observable : 类为 Observable
>prototype : Observable<任意>
>map : 任意
>类型别名 :=> 任意
>function() { } : () => 无值

declare module "./observable" {
    interface Observable<T> {
>Observable : Observable<T>
>T : T

        map<U>(proj: (e:T) => U): Observable<U>
>map : <U>(proj: (e: T) => U) => Observable<U>
>U : U
>proj : (e: T) => U
>e : T
>T : T
>U : U
>Observable : Observable<T>
>U : U
    }
    namespace Observable {
>Observable : 类为 Observable

        let someAnotherValue: number;
>someAnotherValue : 数字
>类型别名 :=> 数字
    }
}

=== tests/cases/compiler/observable.ts ===
export declare class Observable<T> {
>Observable : Observable<T>
>T : T

    filter(pred: (e:T) => boolean): Observable<T>;
>filter : (pred: (e: T) => 真假) => Observable<T>
>pred : (e: T) => 真假
>e : T
>T : T
>Observable : Observable<T>
>T : T
}

export namespace Observable {
>Observable : 类为 Observable

    let someValue: number;
>someValue : 数字
>类型别名 :=> 数字
}


=== tests/cases/compiler/main.ts ===
import { Observable } from "./observable"
>Observable : 类为 Observable

import "./map";

let x: Observable<number>;
>x : Observable<数字>
>Observable : Observable<T>

let y = x.map(x => x + 1);
>y : Observable<数字>
>x.map(x => x + 1) : Observable<数字>
>x.map : <U>(proj: (e: 数字) => U) => Observable<U>
>x : Observable<数字>
>map : <U>(proj: (e: 数字) => U) => Observable<U>
>x => x + 1 : (x: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>x + 1 : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>1 : 1

