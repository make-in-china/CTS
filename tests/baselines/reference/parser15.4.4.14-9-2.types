=== tests/cases/conformance/parser/ecmascript5/parser15.4.4.14-9-2.ts ===
/// Copyright (c) 2012 Ecma International.  All rights reserved. 
/// Ecma International makes this code available under the terms and conditions set
/// forth on http://hg.ecmascript.org/tests/test262/raw-file/tip/LICENSE (the 
/// "Use Terms").   Any redistribution of this code must retain the above 
/// copyright and this notice and otherwise comply with the Use Terms.
/**
 * @path ch15/15.4/15.4.4/15.4.4.14/15.4.4.14-9-2.js
 * @description Array.prototype.indexOf must return correct index (Number)
 */


function testcase() {
>testcase : () => boolean

  var obj = {toString:function (){return 0}};
>obj : { toString: () => number; }
>{toString:function (){return 0}} : { toString: () => number; }
>toString : () => number
>function (){return 0} : () => number
>0 : 0

  var one = 1;
>one : number
>类型别名 :=> 数字
>1 : 1

  var _float = -(4/3);
>_float : number
>类型别名 :=> 数字
>-(4/3) : number
>类型别名 :=> 数字
>(4/3) : number
>类型别名 :=> 数字
>4/3 : number
>类型别名 :=> 数字
>4 : 4
>3 : 3

  var a = new Array(false,undefined,null,"0",obj,-1.3333333333333, "str",-0,true,+0, one, 1,0, false, _float, -(4/3));
>a : any
>类型别名 :=> 任意
>new Array(false,undefined,null,"0",obj,-1.3333333333333, "str",-0,true,+0, one, 1,0, false, _float, -(4/3)) : any
>类型别名 :=> 任意
>Array : ArrayConstructor
>false : false
>类型别名 :=> 为假
>undefined : undefined
>类型别名 :=> 未定
>null : null
>类型别名 :=> 空值
>"0" : "0"
>obj : { toString: () => number; }
>-1.3333333333333 : -1.3333333333333
>1.3333333333333 : 1.3333333333333
>"str" : "str"
>-0 : 0
>0 : 0
>true : true
>类型别名 :=> 为真
>+0 : 0
>0 : 0
>one : number
>类型别名 :=> 数字
>1 : 1
>0 : 0
>false : false
>类型别名 :=> 为假
>_float : number
>类型别名 :=> 数字
>-(4/3) : number
>类型别名 :=> 数字
>(4/3) : number
>类型别名 :=> 数字
>4/3 : number
>类型别名 :=> 数字
>4 : 4
>3 : 3

  if (a.indexOf(-(4/3)) === 14 &&      // a[14]=_float===-(4/3)
>a.indexOf(-(4/3)) === 14 &&      // a[14]=_float===-(4/3)      a.indexOf(0) === 7      &&       // a[7] = +0, 0===+0      a.indexOf(-0) === 7      &&     // a[7] = +0, -0===+0      a.indexOf(1) === 10 : boolean
>类型别名 :=> 真假
>a.indexOf(-(4/3)) === 14 &&      // a[14]=_float===-(4/3)      a.indexOf(0) === 7      &&       // a[7] = +0, 0===+0      a.indexOf(-0) === 7 : boolean
>类型别名 :=> 真假
>a.indexOf(-(4/3)) === 14 &&      // a[14]=_float===-(4/3)      a.indexOf(0) === 7 : boolean
>类型别名 :=> 真假
>a.indexOf(-(4/3)) === 14 : boolean
>类型别名 :=> 真假
>a.indexOf(-(4/3)) : any
>类型别名 :=> 任意
>a.indexOf : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>indexOf : any
>类型别名 :=> 任意
>-(4/3) : number
>类型别名 :=> 数字
>(4/3) : number
>类型别名 :=> 数字
>4/3 : number
>类型别名 :=> 数字
>4 : 4
>3 : 3
>14 : 14

      a.indexOf(0) === 7      &&       // a[7] = +0, 0===+0
>a.indexOf(0) === 7 : boolean
>类型别名 :=> 真假
>a.indexOf(0) : any
>类型别名 :=> 任意
>a.indexOf : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>indexOf : any
>类型别名 :=> 任意
>0 : 0
>7 : 7

      a.indexOf(-0) === 7      &&     // a[7] = +0, -0===+0
>a.indexOf(-0) === 7 : boolean
>类型别名 :=> 真假
>a.indexOf(-0) : any
>类型别名 :=> 任意
>a.indexOf : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>indexOf : any
>类型别名 :=> 任意
>-0 : 0
>0 : 0
>7 : 7

      a.indexOf(1) === 10 )            // a[10] =one=== 1
>a.indexOf(1) === 10 : boolean
>类型别名 :=> 真假
>a.indexOf(1) : any
>类型别名 :=> 任意
>a.indexOf : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>indexOf : any
>类型别名 :=> 任意
>1 : 1
>10 : 10
  {
    return true;
>true : true
>类型别名 :=> 为真
  }
 }
runTestCase(testcase);
>runTestCase(testcase) : any
>类型别名 :=> 任意
>runTestCase : any
>类型别名 :=> 任意
>testcase : () => boolean

