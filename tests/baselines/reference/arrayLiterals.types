=== tests/cases/conformance/expressions/arrayLiterals/arrayLiterals.ts ===
// Empty array literal with no contextual type has type Undefined[]

var arr1= [[], [1], ['']];
>arr1 : (数字[] | 文字[])[]
>[[], [1], ['']] : (数字[] | 文字[])[]
>[] : 未定[]
>[1] : 数字[]
>1 : 1
>[''] : 文字[]
>'' : ""

var arr2 = [[null], [1], ['']];
>arr2 : (数字[] | 文字[])[]
>[[null], [1], ['']] : (数字[] | 文字[])[]
>[null] : 空值[]
>null : 空值
>类型别名 :=> 空值
>[1] : 数字[]
>1 : 1
>[''] : 文字[]
>'' : ""


// Array literal with elements of only EveryType E has type E[]
var stringArrArr = [[''], [""]];
>stringArrArr : 文字[][]
>[[''], [""]] : 文字[][]
>[''] : 文字[]
>'' : ""
>[""] : 文字[]
>"" : ""

var stringArr = ['', ""];
>stringArr : 文字[]
>['', ""] : 文字[]
>'' : ""
>"" : ""

var numberArr = [0, 0.0, 0x00, 1e1];
>numberArr : 数字[]
>[0, 0.0, 0x00, 1e1] : 数字[]
>0 : 0
>0.0 : 0
>0x00 : 0
>1e1 : 10

var boolArr = [false, true, false, true];
>boolArr : 真假[]
>[false, true, false, true] : 真假[]
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真

class C { private p; }
>C : C
>p : 任意
>类型别名 :=> 任意

var classArr = [new C(), new C()];
>classArr : C[]
>[new C(), new C()] : C[]
>new C() : C
>C : 类为 C
>new C() : C
>C : 类为 C

var classTypeArray = [C, C, C];
>classTypeArray : (类为 C)[]
>[C, C, C] : (类为 C)[]
>C : 类为 C
>C : 类为 C
>C : 类为 C

var classTypeArray: Array<typeof C>; // Should OK, not be a parse error
>classTypeArray : (类为 C)[]
>Array : T[]
>C : 类为 C

// Contextual type C with numeric index signature makes array literal of EveryType E of type BCT(E,C)[]
var context1: { [n: number]: { a: string; b: number; }; } = [{ a: '', b: 0, c: '' }, { a: "", b: 3, c: 0 }];
>context1 : { [n: 数字]: { a: 文字; b: 数字; }; }
>n : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
>[{ a: '', b: 0, c: '' }, { a: "", b: 3, c: 0 }] : ({ a: 文字; b: 数字; c: 文字; } | { a: 文字; b: 数字; c: 数字; })[]
>{ a: '', b: 0, c: '' } : { a: 文字; b: 数字; c: 文字; }
>a : 文字
>类型别名 :=> 文字
>'' : ""
>b : 数字
>类型别名 :=> 数字
>0 : 0
>c : 文字
>类型别名 :=> 文字
>'' : ""
>{ a: "", b: 3, c: 0 } : { a: 文字; b: 数字; c: 数字; }
>a : 文字
>类型别名 :=> 文字
>"" : ""
>b : 数字
>类型别名 :=> 数字
>3 : 3
>c : 数字
>类型别名 :=> 数字
>0 : 0

var context2 = [{ a: '', b: 0, c: '' }, { a: "", b: 3, c: 0 }];
>context2 : ({ a: 文字; b: 数字; c: 文字; } | { a: 文字; b: 数字; c: 数字; })[]
>[{ a: '', b: 0, c: '' }, { a: "", b: 3, c: 0 }] : ({ a: 文字; b: 数字; c: 文字; } | { a: 文字; b: 数字; c: 数字; })[]
>{ a: '', b: 0, c: '' } : { a: 文字; b: 数字; c: 文字; }
>a : 文字
>类型别名 :=> 文字
>'' : ""
>b : 数字
>类型别名 :=> 数字
>0 : 0
>c : 文字
>类型别名 :=> 文字
>'' : ""
>{ a: "", b: 3, c: 0 } : { a: 文字; b: 数字; c: 数字; }
>a : 文字
>类型别名 :=> 文字
>"" : ""
>b : 数字
>类型别名 :=> 数字
>3 : 3
>c : 数字
>类型别名 :=> 数字
>0 : 0

// Contextual type C with numeric index signature of type Base makes array literal of Derived have type Base[]
class Base { private p; }
>Base : Base
>p : 任意
>类型别名 :=> 任意

class Derived1 extends Base { private m };
>Derived1 : Derived1
>Base : Base
>m : 任意
>类型别名 :=> 任意

class Derived2 extends Base { private n };
>Derived2 : Derived2
>Base : Base
>n : 任意
>类型别名 :=> 任意

var context3: Base[] = [new Derived1(), new Derived2()];
>context3 : Base[]
>Base : Base
>[new Derived1(), new Derived2()] : (Derived1 | Derived2)[]
>new Derived1() : Derived1
>Derived1 : 类为 Derived1
>new Derived2() : Derived2
>Derived2 : 类为 Derived2

// Contextual type C with numeric index signature of type Base makes array literal of Derived1 and Derived2 have type Base[]
var context4: Base[] = [new Derived1(), new Derived1()];
>context4 : Base[]
>Base : Base
>[new Derived1(), new Derived1()] : Derived1[]
>new Derived1() : Derived1
>Derived1 : 类为 Derived1
>new Derived1() : Derived1
>Derived1 : 类为 Derived1


