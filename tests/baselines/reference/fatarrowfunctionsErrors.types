=== tests/cases/compiler/fatarrowfunctionsErrors.ts ===
foo((...Far:any[])=>{return 0;})
>foo((...Far:any[])=>{return 0;}) : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>(...Far:any[])=>{return 0;} : (...Far: 任意[]) => 数字
>Far : 任意[]
>0 : 0

foo((1)=>{return 0;}); 
>foo((1)=>{return 0;}) : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>(1) : 1
>1 : 1
>{return 0;} : { return: 数字; }
>return : 数字
>类型别名 :=> 数字
>0 : 0

foo((x?)=>{return x;})
>foo((x?)=>{return x;}) : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>(x?)=>{return x;} : (x?: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

foo((x=0)=>{return x;})
>foo((x=0)=>{return x;}) : 任意
>类型别名 :=> 任意
>foo : 任意
>类型别名 :=> 任意
>(x=0)=>{return x;} : (x?: 数字) => 数字
>x : 数字
>类型别名 :=> 数字
>0 : 0
>x : 数字
>类型别名 :=> 数字

var y = x:number => x*x;
>y : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>number : 任意
>类型别名 :=> 任意
>x*x : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意

false? (() => null): null;
>false? (() => null): null : () => 任意
>false : 为假
>类型别名 :=> 为假
>(() => null) : () => 任意
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

// missing fatarrow
var x1 = () :void {};
>x1 : () => 无值
>() :void {} : () => 无值

var x2 = (a:number) :void {};
>x2 : (a: 数字) => 无值
>(a:number) :void {} : (a: 数字) => 无值
>a : 数字
>类型别名 :=> 数字

var x3 = (a:number) {};
>x3 : (a: 数字) => 无值
>(a:number) {} : (a: 数字) => 无值
>a : 数字
>类型别名 :=> 数字

var x4= (...a: any[]) { };
>x4 : (...a: 任意[]) => 无值
>(...a: any[]) { } : (...a: 任意[]) => 无值
>a : 任意[]

