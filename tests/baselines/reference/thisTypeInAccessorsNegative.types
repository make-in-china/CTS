=== tests/cases/conformance/types/thisType/thisTypeInAccessorsNegative.ts ===
interface Foo {
>Foo : Foo

    n: number;
>n : number
>类型别名 :=> 数字

    x: number;
>x : number
>类型别名 :=> 数字
}
interface Bar {
>Bar : Bar

    wrong: "place" | "time" | "method" | "technique";
>wrong : "place" | "time" | "method" | "technique"
}
const mismatch = {
>mismatch : { n: number; x: number; }
>{    n: 13,    get x(this: Foo) { return this.n; },    set x(this: Bar, n) { this.wrong = "method"; }} : { n: number; x: number; }

    n: 13,
>n : number
>类型别名 :=> 数字
>13 : 13

    get x(this: Foo) { return this.n; },
>x : number
>类型别名 :=> 数字
>this : Foo
>Foo : Foo
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字

    set x(this: Bar, n) { this.wrong = "method"; }
>x : number
>类型别名 :=> 数字
>this : Bar
>Bar : Bar
>n : number
>类型别名 :=> 数字
>this.wrong = "method" : "method"
>this.wrong : "place" | "time" | "method" | "technique"
>this : Bar
>wrong : "place" | "time" | "method" | "technique"
>"method" : "method"
}
const contextual: Foo = {
>contextual : Foo
>Foo : Foo
>{    n: 16,    get x() { return this.n; }} : { n: number; readonly x: number; }

    n: 16,
>n : number
>类型别名 :=> 数字
>16 : 16

    get x() { return this.n; }
>x : number
>类型别名 :=> 数字
>this.n : number
>类型别名 :=> 数字
>this : Foo
>n : number
>类型别名 :=> 数字
}

