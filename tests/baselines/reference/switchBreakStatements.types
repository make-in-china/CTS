=== tests/cases/conformance/statements/breakStatements/switchBreakStatements.ts ===
switch ('') {
>'' : ""

    case 'a':
>'a' : "a"

        break;
}

ONE:
>ONE : 任意
>类型别名 :=> 任意

switch ('') {
>'' : ""

    case 'a':
>'a' : "a"

        break ONE;
>ONE : 任意
>类型别名 :=> 任意
}

TWO:
>TWO : 任意
>类型别名 :=> 任意

THREE:
>THREE : 任意
>类型别名 :=> 任意

switch ('') {
>'' : ""

    case 'a':
>'a' : "a"

        break THREE;
>THREE : 任意
>类型别名 :=> 任意
}

FOUR:
>FOUR : 任意
>类型别名 :=> 任意

switch ('') {
>'' : ""

    case 'a':
>'a' : "a"

        FIVE:
>FIVE : 任意
>类型别名 :=> 任意

        switch ('') {
>'' : ""

            case 'a':
>'a' : "a"

                break FOUR;
>FOUR : 任意
>类型别名 :=> 任意
        }
}

switch ('') {
>'' : ""

    case 'a':
>'a' : "a"

        SIX:
>SIX : 任意
>类型别名 :=> 任意

        switch ('') {
>'' : ""

            case 'a':
>'a' : "a"

                break SIX;
>SIX : 任意
>类型别名 :=> 任意
        }
}

SEVEN:
>SEVEN : 任意
>类型别名 :=> 任意

switch ('') {
>'' : ""

    case 'a':
>'a' : "a"

        switch ('') {
>'' : ""

            case 'a':
>'a' : "a"

                switch ('') {
>'' : ""

                    case 'a':
>'a' : "a"

                        break SEVEN;
>SEVEN : 任意
>类型别名 :=> 任意

                        EIGHT:
>EIGHT : 任意
>类型别名 :=> 任意

                        switch ('') {
>'' : ""

                            case 'a':
>'a' : "a"

                                var fn = function () { }
>fn : () => 无值
>function () { } : () => 无值

                                break EIGHT;
>EIGHT : 任意
>类型别名 :=> 任意
                        }
                }
        }
}

