=== tests/cases/conformance/types/literal/booleanLiteralTypes1.ts ===
type A1 = true | false;
>A1 : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

type A2 = false | true;
>A2 : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>true : true
>类型别名 :=> 为真

function f1() {
>f1 : () => void

    var a: A1;
>a : boolean
>类型别名 :=> 真假
>A1 : boolean
>类型别名 :=> 真假

    var a: A2;
>a : boolean
>类型别名 :=> 真假
>A2 : boolean
>类型别名 :=> 真假

    var a: true | false;
>a : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

    var a: false | true;
>a : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假
>true : true
>类型别名 :=> 为真
}

function f2(a: true | false, b: boolean) {
>f2 : (a: boolean, b: boolean) => void
>a : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假
>b : boolean
>类型别名 :=> 真假

    a = b;
>a = b : boolean
>类型别名 :=> 真假
>a : boolean
>类型别名 :=> 真假
>b : boolean
>类型别名 :=> 真假

    b = a;
>b = a : boolean
>类型别名 :=> 真假
>b : boolean
>类型别名 :=> 真假
>a : boolean
>类型别名 :=> 真假
}

function f3(a: true | false, b: true | false) {
>f3 : (a: boolean, b: boolean) => void
>a : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假
>b : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

    var x = a || b;
>x : boolean
>类型别名 :=> 真假
>a || b : boolean
>类型别名 :=> 真假
>a : boolean
>类型别名 :=> 真假
>b : boolean
>类型别名 :=> 真假

    var x = a && b;
>x : boolean
>类型别名 :=> 真假
>a && b : boolean
>类型别名 :=> 真假
>a : boolean
>类型别名 :=> 真假
>b : boolean
>类型别名 :=> 真假

    var x = !a;
>x : boolean
>类型别名 :=> 真假
>!a : boolean
>类型别名 :=> 真假
>a : boolean
>类型别名 :=> 真假
}

function f4(t: true, f: false) {
>f4 : (t: true, f: false) => void
>t : true
>类型别名 :=> 为真
>true : true
>类型别名 :=> 为真
>f : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假

    var x1 = t && f;
>x1 : boolean
>类型别名 :=> 真假
>t && f : false
>类型别名 :=> 为假
>t : true
>类型别名 :=> 为真
>f : false
>类型别名 :=> 为假

    var x2 = f && t;
>x2 : boolean
>类型别名 :=> 真假
>f && t : false
>类型别名 :=> 为假
>f : false
>类型别名 :=> 为假
>t : true
>类型别名 :=> 为真

    var x3 = t || f;
>x3 : boolean
>类型别名 :=> 真假
>t || f : boolean
>类型别名 :=> 真假
>t : true
>类型别名 :=> 为真
>f : false
>类型别名 :=> 为假

    var x4 = f || t;
>x4 : boolean
>类型别名 :=> 真假
>f || t : true
>类型别名 :=> 为真
>f : false
>类型别名 :=> 为假
>t : true
>类型别名 :=> 为真

    var x5 = !t;
>x5 : boolean
>类型别名 :=> 真假
>!t : boolean
>类型别名 :=> 真假
>t : true
>类型别名 :=> 为真

    var x6 = !f;
>x6 : boolean
>类型别名 :=> 真假
>!f : true
>类型别名 :=> 为真
>f : false
>类型别名 :=> 为假
}

declare function g(x: true): string;
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>x : true
>类型别名 :=> 为真
>true : true
>类型别名 :=> 为真

declare function g(x: false): boolean;
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>x : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假

declare function g(x: boolean): number;
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>x : boolean
>类型别名 :=> 真假

function f5(b: boolean) {
>f5 : (b: boolean) => void
>b : boolean
>类型别名 :=> 真假

    var z1 = g(true);
>z1 : string
>类型别名 :=> 文字
>g(true) : string
>类型别名 :=> 文字
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>true : true
>类型别名 :=> 为真

    var z2 = g(false);
>z2 : boolean
>类型别名 :=> 真假
>g(false) : boolean
>类型别名 :=> 真假
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>false : false
>类型别名 :=> 为假

    var z3 = g(b);
>z3 : number
>类型别名 :=> 数字
>g(b) : number
>类型别名 :=> 数字
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>b : boolean
>类型别名 :=> 真假
}

function assertNever(x: never): never {
>assertNever : (x: never) => never
>x : never
>类型别名 :=> 不及

    throw new Error("Unexpected value");
>new Error("Unexpected value") : Error
>Error : ErrorConstructor
>"Unexpected value" : "Unexpected value"
}

function f10(x: true | false) {
>f10 : (x: boolean) => "true" | "false"
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

    switch (x) {
>x : boolean
>类型别名 :=> 真假

        case true: return "true";
>true : true
>类型别名 :=> 为真
>"true" : "true"

        case false: return "false";
>false : false
>类型别名 :=> 为假
>"false" : "false"
    }
}

function f11(x: true | false) {
>f11 : (x: boolean) => "true" | "false"
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

    switch (x) {
>x : boolean
>类型别名 :=> 真假

        case true: return "true";
>true : true
>类型别名 :=> 为真
>"true" : "true"

        case false: return "false";
>false : false
>类型别名 :=> 为假
>"false" : "false"
    }
    return assertNever(x);
>assertNever(x) : never
>类型别名 :=> 不及
>assertNever : (x: never) => never
>x : never
>类型别名 :=> 不及
}

function f12(x: true | false) {
>f12 : (x: boolean) => void
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

    if (x) {
>x : boolean
>类型别名 :=> 真假

        x;
>x : true
>类型别名 :=> 为真
    }
    else {
        x;
>x : boolean
>类型别名 :=> 真假
    }
}

function f13(x: true | false) {
>f13 : (x: boolean) => void
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真
>false : false
>类型别名 :=> 为假

    if (x === true) {
>x === true : boolean
>类型别名 :=> 真假
>x : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

        x;
>x : true
>类型别名 :=> 为真
    }
    else {
        x;
>x : false
>类型别名 :=> 为假
    }
}

type Item =
>Item : Item

    { kind: true, a: string } |
>kind : true
>类型别名 :=> 为真
>true : true
>类型别名 :=> 为真
>a : string
>类型别名 :=> 文字

    { kind: false, b: string };
>kind : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假
>b : string
>类型别名 :=> 文字

function f20(x: Item) {
>f20 : (x: Item) => string
>x : Item
>Item : Item

    switch (x.kind) {
>x.kind : boolean
>类型别名 :=> 真假
>x : Item
>kind : boolean
>类型别名 :=> 真假

        case true: return x.a;
>true : true
>类型别名 :=> 为真
>x.a : string
>类型别名 :=> 文字
>x : { kind: true; a: string; }
>a : string
>类型别名 :=> 文字

        case false: return x.b;
>false : false
>类型别名 :=> 为假
>x.b : string
>类型别名 :=> 文字
>x : { kind: false; b: string; }
>b : string
>类型别名 :=> 文字
    }
}

function f21(x: Item) {
>f21 : (x: Item) => string
>x : Item
>Item : Item

    switch (x.kind) {
>x.kind : boolean
>类型别名 :=> 真假
>x : Item
>kind : boolean
>类型别名 :=> 真假

        case true: return x.a;
>true : true
>类型别名 :=> 为真
>x.a : string
>类型别名 :=> 文字
>x : { kind: true; a: string; }
>a : string
>类型别名 :=> 文字

        case false: return x.b;
>false : false
>类型别名 :=> 为假
>x.b : string
>类型别名 :=> 文字
>x : { kind: false; b: string; }
>b : string
>类型别名 :=> 文字
    }
    return assertNever(x);
>assertNever(x) : never
>类型别名 :=> 不及
>assertNever : (x: never) => never
>x : never
>类型别名 :=> 不及
}
