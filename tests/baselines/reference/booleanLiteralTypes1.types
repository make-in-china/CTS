=== tests/cases/conformance/types/literal/booleanLiteralTypes1.ts ===
type A1 = true | false;
>A1 : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

type A2 = false | true;
>A2 : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真

function f1() {
>f1 : () => 无值

    var a: A1;
>a : 真假
>类型别名 :=> 真假
>A1 : 真假
>类型别名 :=> 真假

    var a: A2;
>a : 真假
>类型别名 :=> 真假
>A2 : 真假
>类型别名 :=> 真假

    var a: true | false;
>a : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

    var a: false | true;
>a : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
>true : 为真
>类型别名 :=> 为真
}

function f2(a: true | false, b: boolean) {
>f2 : (a: 真假, b: 真假) => 无值
>a : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>b : 真假
>类型别名 :=> 真假

    a = b;
>a = b : 真假
>类型别名 :=> 真假
>a : 真假
>类型别名 :=> 真假
>b : 真假
>类型别名 :=> 真假

    b = a;
>b = a : 真假
>类型别名 :=> 真假
>b : 真假
>类型别名 :=> 真假
>a : 真假
>类型别名 :=> 真假
}

function f3(a: true | false, b: true | false) {
>f3 : (a: 真假, b: 真假) => 无值
>a : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假
>b : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

    var x = a || b;
>x : 真假
>类型别名 :=> 真假
>a || b : 真假
>类型别名 :=> 真假
>a : 真假
>类型别名 :=> 真假
>b : 真假
>类型别名 :=> 真假

    var x = a && b;
>x : 真假
>类型别名 :=> 真假
>a && b : 真假
>类型别名 :=> 真假
>a : 真假
>类型别名 :=> 真假
>b : 真假
>类型别名 :=> 真假

    var x = !a;
>x : 真假
>类型别名 :=> 真假
>!a : 真假
>类型别名 :=> 真假
>a : 真假
>类型别名 :=> 真假
}

function f4(t: true, f: false) {
>f4 : (t: 为真, f: 为假) => 无值
>t : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真
>f : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假

    var x1 = t && f;
>x1 : 真假
>类型别名 :=> 真假
>t && f : 为假
>类型别名 :=> 为假
>t : 为真
>类型别名 :=> 为真
>f : 为假
>类型别名 :=> 为假

    var x2 = f && t;
>x2 : 真假
>类型别名 :=> 真假
>f && t : 为假
>类型别名 :=> 为假
>f : 为假
>类型别名 :=> 为假
>t : 为真
>类型别名 :=> 为真

    var x3 = t || f;
>x3 : 真假
>类型别名 :=> 真假
>t || f : 真假
>类型别名 :=> 真假
>t : 为真
>类型别名 :=> 为真
>f : 为假
>类型别名 :=> 为假

    var x4 = f || t;
>x4 : 真假
>类型别名 :=> 真假
>f || t : 为真
>类型别名 :=> 为真
>f : 为假
>类型别名 :=> 为假
>t : 为真
>类型别名 :=> 为真

    var x5 = !t;
>x5 : 真假
>类型别名 :=> 真假
>!t : 真假
>类型别名 :=> 真假
>t : 为真
>类型别名 :=> 为真

    var x6 = !f;
>x6 : 真假
>类型别名 :=> 真假
>!f : 为真
>类型别名 :=> 为真
>f : 为假
>类型别名 :=> 为假
}

declare function g(x: true): string;
>g : { (x: 为真): 文字; (x: 为假): 真假; (x: 真假): 数字; }
>x : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真

declare function g(x: false): boolean;
>g : { (x: 为真): 文字; (x: 为假): 真假; (x: 真假): 数字; }
>x : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假

declare function g(x: boolean): number;
>g : { (x: 为真): 文字; (x: 为假): 真假; (x: 真假): 数字; }
>x : 真假
>类型别名 :=> 真假

function f5(b: boolean) {
>f5 : (b: 真假) => 无值
>b : 真假
>类型别名 :=> 真假

    var z1 = g(true);
>z1 : 文字
>类型别名 :=> 文字
>g(true) : 文字
>类型别名 :=> 文字
>g : { (x: 为真): 文字; (x: 为假): 真假; (x: 真假): 数字; }
>true : 为真
>类型别名 :=> 为真

    var z2 = g(false);
>z2 : 真假
>类型别名 :=> 真假
>g(false) : 真假
>类型别名 :=> 真假
>g : { (x: 为真): 文字; (x: 为假): 真假; (x: 真假): 数字; }
>false : 为假
>类型别名 :=> 为假

    var z3 = g(b);
>z3 : 数字
>类型别名 :=> 数字
>g(b) : 数字
>类型别名 :=> 数字
>g : { (x: 为真): 文字; (x: 为假): 真假; (x: 真假): 数字; }
>b : 真假
>类型别名 :=> 真假
}

function assertNever(x: never): never {
>assertNever : (x: 不及) => 不及
>x : 不及
>类型别名 :=> 不及

    throw new Error("Unexpected value");
>new Error("Unexpected value") : Error
>Error : ErrorConstructor
>"Unexpected value" : "Unexpected value"
}

function f10(x: true | false) {
>f10 : (x: 真假) => "true" | "false"
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

    switch (x) {
>x : 真假
>类型别名 :=> 真假

        case true: return "true";
>true : 为真
>类型别名 :=> 为真
>"true" : "true"

        case false: return "false";
>false : 为假
>类型别名 :=> 为假
>"false" : "false"
    }
}

function f11(x: true | false) {
>f11 : (x: 真假) => "true" | "false"
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

    switch (x) {
>x : 真假
>类型别名 :=> 真假

        case true: return "true";
>true : 为真
>类型别名 :=> 为真
>"true" : "true"

        case false: return "false";
>false : 为假
>类型别名 :=> 为假
>"false" : "false"
    }
    return assertNever(x);
>assertNever(x) : 不及
>类型别名 :=> 不及
>assertNever : (x: 不及) => 不及
>x : 不及
>类型别名 :=> 不及
}

function f12(x: true | false) {
>f12 : (x: 真假) => 无值
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

    if (x) {
>x : 真假
>类型别名 :=> 真假

        x;
>x : 为真
>类型别名 :=> 为真
    }
    else {
        x;
>x : 真假
>类型别名 :=> 真假
    }
}

function f13(x: true | false) {
>f13 : (x: 真假) => 无值
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>false : 为假
>类型别名 :=> 为假

    if (x === true) {
>x === true : 真假
>类型别名 :=> 真假
>x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

        x;
>x : 为真
>类型别名 :=> 为真
    }
    else {
        x;
>x : 为假
>类型别名 :=> 为假
    }
}

type Item =
>Item : Item

    { kind: true, a: string } |
>kind : 为真
>类型别名 :=> 为真
>true : 为真
>类型别名 :=> 为真
>a : 文字
>类型别名 :=> 文字

    { kind: false, b: string };
>kind : 为假
>类型别名 :=> 为假
>false : 为假
>类型别名 :=> 为假
>b : 文字
>类型别名 :=> 文字

function f20(x: Item) {
>f20 : (x: Item) => 文字
>x : Item
>Item : Item

    switch (x.kind) {
>x.kind : 真假
>类型别名 :=> 真假
>x : Item
>kind : 真假
>类型别名 :=> 真假

        case true: return x.a;
>true : 为真
>类型别名 :=> 为真
>x.a : 文字
>类型别名 :=> 文字
>x : { kind: 为真; a: 文字; }
>a : 文字
>类型别名 :=> 文字

        case false: return x.b;
>false : 为假
>类型别名 :=> 为假
>x.b : 文字
>类型别名 :=> 文字
>x : { kind: 为假; b: 文字; }
>b : 文字
>类型别名 :=> 文字
    }
}

function f21(x: Item) {
>f21 : (x: Item) => 文字
>x : Item
>Item : Item

    switch (x.kind) {
>x.kind : 真假
>类型别名 :=> 真假
>x : Item
>kind : 真假
>类型别名 :=> 真假

        case true: return x.a;
>true : 为真
>类型别名 :=> 为真
>x.a : 文字
>类型别名 :=> 文字
>x : { kind: 为真; a: 文字; }
>a : 文字
>类型别名 :=> 文字

        case false: return x.b;
>false : 为假
>类型别名 :=> 为假
>x.b : 文字
>类型别名 :=> 文字
>x : { kind: 为假; b: 文字; }
>b : 文字
>类型别名 :=> 文字
    }
    return assertNever(x);
>assertNever(x) : 不及
>类型别名 :=> 不及
>assertNever : (x: 不及) => 不及
>x : 不及
>类型别名 :=> 不及
}
