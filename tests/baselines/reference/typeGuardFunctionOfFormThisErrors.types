=== tests/cases/conformance/expressions/typeGuards/typeGuardFunctionOfFormThisErrors.ts ===
class RoyalGuard {
>RoyalGuard : RoyalGuard

    isLeader(): this is LeadGuard {
>isLeader : () => this is LeadGuard
>LeadGuard : LeadGuard

        return this instanceof LeadGuard;
>this instanceof LeadGuard : boolean
>类型别名 :=> 真假
>this : this
>LeadGuard : typeof LeadGuard
    }
    isFollower(): this is FollowerGuard {
>isFollower : () => this is FollowerGuard
>FollowerGuard : FollowerGuard

        return this instanceof FollowerGuard;
>this instanceof FollowerGuard : boolean
>类型别名 :=> 真假
>this : this
>FollowerGuard : typeof FollowerGuard
    }
}

class LeadGuard extends RoyalGuard {
>LeadGuard : LeadGuard
>RoyalGuard : RoyalGuard

    lead(): void {};
>lead : () => void
}

class FollowerGuard extends RoyalGuard {
>FollowerGuard : FollowerGuard
>RoyalGuard : RoyalGuard

    follow(): void {};
>follow : () => void
}

interface GuardInterface extends RoyalGuard {}
>GuardInterface : GuardInterface
>RoyalGuard : RoyalGuard

let a: RoyalGuard = new FollowerGuard();
>a : RoyalGuard
>RoyalGuard : RoyalGuard
>new FollowerGuard() : FollowerGuard
>FollowerGuard : typeof FollowerGuard

let b: GuardInterface = new LeadGuard();
>b : GuardInterface
>GuardInterface : GuardInterface
>new LeadGuard() : LeadGuard
>LeadGuard : typeof LeadGuard

// Mismatched guards shouldn't be assignable
b.isFollower = b.isLeader;
>b.isFollower = b.isLeader : () => this is LeadGuard
>b.isFollower : () => this is FollowerGuard
>b : GuardInterface
>isFollower : () => this is FollowerGuard
>b.isLeader : () => this is LeadGuard
>b : GuardInterface
>isLeader : () => this is LeadGuard

b.isLeader = b.isFollower;
>b.isLeader = b.isFollower : () => this is FollowerGuard
>b.isLeader : () => this is LeadGuard
>b : GuardInterface
>isLeader : () => this is LeadGuard
>b.isFollower : () => this is FollowerGuard
>b : GuardInterface
>isFollower : () => this is FollowerGuard

a.isFollower = a.isLeader;
>a.isFollower = a.isLeader : () => this is LeadGuard
>a.isFollower : () => this is FollowerGuard
>a : RoyalGuard
>isFollower : () => this is FollowerGuard
>a.isLeader : () => this is LeadGuard
>a : RoyalGuard
>isLeader : () => this is LeadGuard

a.isLeader = a.isFollower;
>a.isLeader = a.isFollower : () => this is FollowerGuard
>a.isLeader : () => this is LeadGuard
>a : RoyalGuard
>isLeader : () => this is LeadGuard
>a.isFollower : () => this is FollowerGuard
>a : RoyalGuard
>isFollower : () => this is FollowerGuard

function invalidGuard(c: any): this is number {
>invalidGuard : (c: any) => this is number
>c : any
>类型别名 :=> 任意

    return false;
>false : false
>类型别名 :=> 为假
}

let c: number | number[];
>c : number | number[]

if (invalidGuard(c)) {
>invalidGuard(c) : boolean
>类型别名 :=> 真假
>invalidGuard : (c: any) => this is number
>c : number | number[]

    c;
>c : number | number[]
}
else {
    c;
>c : number | number[]
}

let holder = {invalidGuard};
>holder : { invalidGuard: (c: any) => this is number; }
>{invalidGuard} : { invalidGuard: (c: any) => this is number; }
>invalidGuard : (c: any) => this is number

if (holder.invalidGuard(c)) {
>holder.invalidGuard(c) : boolean
>类型别名 :=> 真假
>holder.invalidGuard : (c: any) => this is number
>holder : { invalidGuard: (c: any) => this is number; }
>invalidGuard : (c: any) => this is number
>c : number | number[]

    c;
>c : number | number[]

    holder;
>holder : { invalidGuard: (c: any) => this is number; } & number
}
else {
    c;
>c : number | number[]

    holder;
>holder : { invalidGuard: (c: any) => this is number; }
}

let detached = a.isFollower;
>detached : () => this is FollowerGuard
>a.isFollower : () => this is FollowerGuard
>a : RoyalGuard
>isFollower : () => this is FollowerGuard

if (detached()) {
>detached() : boolean
>类型别名 :=> 真假
>detached : () => this is FollowerGuard

    a.follow();
>a.follow() : any
>类型别名 :=> 任意
>a.follow : any
>类型别名 :=> 任意
>a : RoyalGuard
>follow : any
>类型别名 :=> 任意
}
else {
    a.lead();
>a.lead() : any
>类型别名 :=> 任意
>a.lead : any
>类型别名 :=> 任意
>a : RoyalGuard
>lead : any
>类型别名 :=> 任意
}
