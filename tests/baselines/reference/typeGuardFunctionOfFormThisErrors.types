=== tests/cases/conformance/expressions/typeGuards/typeGuardFunctionOfFormThisErrors.ts ===
class RoyalGuard {
>RoyalGuard : RoyalGuard

    isLeader(): this is LeadGuard {
>isLeader : () => 本体 作为 LeadGuard
>LeadGuard : LeadGuard

        return this instanceof LeadGuard;
>this instanceof LeadGuard : 真假
>类型别名 :=> 真假
>this : 本体
>LeadGuard : 类为 LeadGuard
    }
    isFollower(): this is FollowerGuard {
>isFollower : () => 本体 作为 FollowerGuard
>FollowerGuard : FollowerGuard

        return this instanceof FollowerGuard;
>this instanceof FollowerGuard : 真假
>类型别名 :=> 真假
>this : 本体
>FollowerGuard : 类为 FollowerGuard
    }
}

class LeadGuard extends RoyalGuard {
>LeadGuard : LeadGuard
>RoyalGuard : RoyalGuard

    lead(): void {};
>lead : () => 无值
}

class FollowerGuard extends RoyalGuard {
>FollowerGuard : FollowerGuard
>RoyalGuard : RoyalGuard

    follow(): void {};
>follow : () => 无值
}

interface GuardInterface extends RoyalGuard {}
>GuardInterface : GuardInterface
>RoyalGuard : RoyalGuard

let a: RoyalGuard = new FollowerGuard();
>a : RoyalGuard
>RoyalGuard : RoyalGuard
>new FollowerGuard() : FollowerGuard
>FollowerGuard : 类为 FollowerGuard

let b: GuardInterface = new LeadGuard();
>b : GuardInterface
>GuardInterface : GuardInterface
>new LeadGuard() : LeadGuard
>LeadGuard : 类为 LeadGuard

// Mismatched guards shouldn't be assignable
b.isFollower = b.isLeader;
>b.isFollower = b.isLeader : () => 本体 作为 LeadGuard
>b.isFollower : () => 本体 作为 FollowerGuard
>b : GuardInterface
>isFollower : () => 本体 作为 FollowerGuard
>b.isLeader : () => 本体 作为 LeadGuard
>b : GuardInterface
>isLeader : () => 本体 作为 LeadGuard

b.isLeader = b.isFollower;
>b.isLeader = b.isFollower : () => 本体 作为 FollowerGuard
>b.isLeader : () => 本体 作为 LeadGuard
>b : GuardInterface
>isLeader : () => 本体 作为 LeadGuard
>b.isFollower : () => 本体 作为 FollowerGuard
>b : GuardInterface
>isFollower : () => 本体 作为 FollowerGuard

a.isFollower = a.isLeader;
>a.isFollower = a.isLeader : () => 本体 作为 LeadGuard
>a.isFollower : () => 本体 作为 FollowerGuard
>a : RoyalGuard
>isFollower : () => 本体 作为 FollowerGuard
>a.isLeader : () => 本体 作为 LeadGuard
>a : RoyalGuard
>isLeader : () => 本体 作为 LeadGuard

a.isLeader = a.isFollower;
>a.isLeader = a.isFollower : () => 本体 作为 FollowerGuard
>a.isLeader : () => 本体 作为 LeadGuard
>a : RoyalGuard
>isLeader : () => 本体 作为 LeadGuard
>a.isFollower : () => 本体 作为 FollowerGuard
>a : RoyalGuard
>isFollower : () => 本体 作为 FollowerGuard

function invalidGuard(c: any): this is number {
>invalidGuard : (c: 任意) => 本体 作为 数字
>c : 任意
>类型别名 :=> 任意

    return false;
>false : 为假
>类型别名 :=> 为假
}

let c: number | number[];
>c : 数字 | 数字[]

if (invalidGuard(c)) {
>invalidGuard(c) : 真假
>类型别名 :=> 真假
>invalidGuard : (c: 任意) => 本体 作为 数字
>c : 数字 | 数字[]

    c;
>c : 数字 | 数字[]
}
else {
    c;
>c : 数字 | 数字[]
}

let holder = {invalidGuard};
>holder : { invalidGuard: (c: 任意) => 本体 作为 数字; }
>{invalidGuard} : { invalidGuard: (c: 任意) => 本体 作为 数字; }
>invalidGuard : (c: 任意) => 本体 作为 数字

if (holder.invalidGuard(c)) {
>holder.invalidGuard(c) : 真假
>类型别名 :=> 真假
>holder.invalidGuard : (c: 任意) => 本体 作为 数字
>holder : { invalidGuard: (c: 任意) => 本体 作为 数字; }
>invalidGuard : (c: 任意) => 本体 作为 数字
>c : 数字 | 数字[]

    c;
>c : 数字 | 数字[]

    holder;
>holder : { invalidGuard: (c: 任意) => 本体 作为 数字; } & 数字
}
else {
    c;
>c : 数字 | 数字[]

    holder;
>holder : { invalidGuard: (c: 任意) => 本体 作为 数字; }
}

let detached = a.isFollower;
>detached : () => 本体 作为 FollowerGuard
>a.isFollower : () => 本体 作为 FollowerGuard
>a : RoyalGuard
>isFollower : () => 本体 作为 FollowerGuard

if (detached()) {
>detached() : 真假
>类型别名 :=> 真假
>detached : () => 本体 作为 FollowerGuard

    a.follow();
>a.follow() : 任意
>类型别名 :=> 任意
>a.follow : 任意
>类型别名 :=> 任意
>a : RoyalGuard
>follow : 任意
>类型别名 :=> 任意
}
else {
    a.lead();
>a.lead() : 任意
>类型别名 :=> 任意
>a.lead : 任意
>类型别名 :=> 任意
>a : RoyalGuard
>lead : 任意
>类型别名 :=> 任意
}
