=== tests/cases/compiler/capturedLetConstInLoop13.ts ===
class Main {
>Main : Main

    constructor() {
        this.register("a", "b", "c");
>this.register("a", "b", "c") : 无值
>类型别名 :=> 无值
>this.register : (...names: 文字[]) => 无值
>this : 本体
>register : (...names: 文字[]) => 无值
>"a" : "a"
>"b" : "b"
>"c" : "c"
    }

    private register(...names: string[]): void {
>register : (...names: 文字[]) => 无值
>names : 文字[]

        for (let name of names) {
>name : 文字
>类型别名 :=> 文字
>names : 文字[]

            this.bar({
>this.bar({                [name + ".a"]: () => { this.foo(name); },            }) : 无值
>类型别名 :=> 无值
>this.bar : (a: 任意) => 无值
>this : 本体
>bar : (a: 任意) => 无值
>{                [name + ".a"]: () => { this.foo(name); },            } : { [x: 文字]: () => 无值; }

                [name + ".a"]: () => { this.foo(name); },
>name + ".a" : 文字
>类型别名 :=> 文字
>name : 文字
>类型别名 :=> 文字
>".a" : ".a"
>() => { this.foo(name); } : () => 无值
>this.foo(name) : 无值
>类型别名 :=> 无值
>this.foo : (name: 文字) => 无值
>this : 本体
>foo : (name: 文字) => 无值
>name : 文字
>类型别名 :=> 文字

            });
        }
    }

    private bar(a: any): void { }
>bar : (a: 任意) => 无值
>a : 任意
>类型别名 :=> 任意

    private foo(name: string): void { }
>foo : (name: 文字) => 无值
>name : 文字
>类型别名 :=> 文字

}

new Main();
>new Main() : Main
>Main : 类为 Main

