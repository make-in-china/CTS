=== tests/cases/compiler/capturedLetConstInLoop13.ts ===
class Main {
>Main : Main

    constructor() {
        this.register("a", "b", "c");
>this.register("a", "b", "c") : void
>类型别名 :=> 无值
>this.register : (...names: string[]) => void
>this : this
>register : (...names: string[]) => void
>"a" : "a"
>"b" : "b"
>"c" : "c"
    }

    private register(...names: string[]): void {
>register : (...names: string[]) => void
>names : string[]

        for (let name of names) {
>name : string
>类型别名 :=> 文字
>names : string[]

            this.bar({
>this.bar({                [name + ".a"]: () => { this.foo(name); },            }) : void
>类型别名 :=> 无值
>this.bar : (a: any) => void
>this : this
>bar : (a: any) => void
>{                [name + ".a"]: () => { this.foo(name); },            } : { [x: string]: () => void; }

                [name + ".a"]: () => { this.foo(name); },
>name + ".a" : string
>类型别名 :=> 文字
>name : string
>类型别名 :=> 文字
>".a" : ".a"
>() => { this.foo(name); } : () => void
>this.foo(name) : void
>类型别名 :=> 无值
>this.foo : (name: string) => void
>this : this
>foo : (name: string) => void
>name : string
>类型别名 :=> 文字

            });
        }
    }

    private bar(a: any): void { }
>bar : (a: any) => void
>a : any
>类型别名 :=> 任意

    private foo(name: string): void { }
>foo : (name: string) => void
>name : string
>类型别名 :=> 文字

}

new Main();
>new Main() : Main
>Main : typeof Main

