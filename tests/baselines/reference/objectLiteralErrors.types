=== tests/cases/conformance/expressions/objectLiterals/objectLiteralErrors.ts ===
// Multiple properties with the same name
var e1 = { a: 0, a: 0 };
>e1 : { a: 数字; }
>{ a: 0, a: 0 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0
>a : 数字
>类型别名 :=> 数字
>0 : 0

var e2 = { a: '', a: '' };
>e2 : { a: 文字; }
>{ a: '', a: '' } : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>'' : ""
>a : 文字
>类型别名 :=> 文字
>'' : ""

var e3 = { a: 0, a: '' };
>e3 : { a: 文字; }
>{ a: 0, a: '' } : { a: 文字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0
>a : 数字
>类型别名 :=> 数字
>'' : ""

var e4 = { a: true, a: false };
>e4 : { a: 真假; }
>{ a: true, a: false } : { a: 真假; }
>a : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>a : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

var e5 = { a: {}, a: {} };
>e5 : { a: {}; }
>{ a: {}, a: {} } : { a: {}; }
>a : {}
>{} : {}
>a : {}
>{} : {}

var e6 = { a: 0, 'a': 0 };
>e6 : { a: 数字; }
>{ a: 0, 'a': 0 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0
>0 : 0

var e7 = { 'a': 0, a: 0 };
>e7 : { 'a': 数字; }
>{ 'a': 0, a: 0 } : { 'a': 数字; }
>0 : 0
>a : 数字
>类型别名 :=> 数字
>0 : 0

var e8 = { 'a': 0, "a": 0 };
>e8 : { 'a': 数字; }
>{ 'a': 0, "a": 0 } : { 'a': 数字; }
>0 : 0
>0 : 0

var e9 = { 'a': 0, 'a': 0 };
>e9 : { 'a': 数字; }
>{ 'a': 0, 'a': 0 } : { 'a': 数字; }
>0 : 0
>0 : 0

var e10 = { "a": 0, 'a': 0 };
>e10 : { "a": 数字; }
>{ "a": 0, 'a': 0 } : { "a": 数字; }
>0 : 0
>0 : 0

var e11 = { 1.0: 0, '1': 0 };
>e11 : { 1.0: 数字; }
>{ 1.0: 0, '1': 0 } : { 1.0: 数字; }
>0 : 0
>0 : 0

var e12 = { 0: 0, 0: 0 };
>e12 : { 0: 数字; }
>{ 0: 0, 0: 0 } : { 0: 数字; }
>0 : 0
>0 : 0

var e13 = { 0: 0, 0: 0 };
>e13 : { 0: 数字; }
>{ 0: 0, 0: 0 } : { 0: 数字; }
>0 : 0
>0 : 0

var e14 = { 0: 0, 0x0: 0 };
>e14 : { 0: 数字; }
>{ 0: 0, 0x0: 0 } : { 0: 数字; }
>0 : 0
>0 : 0

var e14 = { 0: 0, 000: 0 };
>e14 : { 0: 数字; }
>{ 0: 0, 000: 0 } : { 0: 数字; }
>0 : 0
>0 : 0

var e15 = { "100": 0, 1e2: 0 };
>e15 : { "100": 数字; }
>{ "100": 0, 1e2: 0 } : { "100": 数字; }
>0 : 0
>0 : 0

var e16 = { 0x20: 0, 3.2e1: 0 };
>e16 : { 0x20: 数字; }
>{ 0x20: 0, 3.2e1: 0 } : { 0x20: 数字; }
>0 : 0
>0 : 0

var e17 = { a: 0, b: 1, a: 0 };
>e17 : { a: 数字; b: 数字; }
>{ a: 0, b: 1, a: 0 } : { a: 数字; b: 数字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0
>b : 数字
>类型别名 :=> 数字
>1 : 1
>a : 数字
>类型别名 :=> 数字
>0 : 0

// Accessor and property with the same name
var f1 = { a: 0, get a() { return 0; } };
>f1 : { 只读 a: 数字; }
>{ a: 0, get a() { return 0; } } : { 只读 a: 数字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0
>a : 数字
>类型别名 :=> 数字
>0 : 0

var f2 = { a: '', get a() { return ''; } };
>f2 : { 只读 a: 文字; }
>{ a: '', get a() { return ''; } } : { 只读 a: 文字; }
>a : 文字
>类型别名 :=> 文字
>'' : ""
>a : 文字
>类型别名 :=> 文字
>'' : ""

var f3 = { a: 0, get a() { return ''; } };
>f3 : { 只读 a: 文字; }
>{ a: 0, get a() { return ''; } } : { 只读 a: 文字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0
>a : 文字
>类型别名 :=> 文字
>'' : ""

var f4 = { a: true, get a() { return false; } };
>f4 : { 只读 a: 真假; }
>{ a: true, get a() { return false; } } : { 只读 a: 真假; }
>a : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>a : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

var f5 = { a: {}, get a() { return {}; } };
>f5 : { 只读 a: {}; }
>{ a: {}, get a() { return {}; } } : { 只读 a: {}; }
>a : {}
>{} : {}
>a : {}
>{} : {}

var f6 = { a: 0, get 'a'() { return 0; } };
>f6 : { 只读 'a': 数字; }
>{ a: 0, get 'a'() { return 0; } } : { 只读 'a': 数字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0
>0 : 0

var f7 = { 'a': 0, get a() { return 0; } };
>f7 : { 只读 a: 数字; }
>{ 'a': 0, get a() { return 0; } } : { 只读 a: 数字; }
>0 : 0
>a : 数字
>类型别名 :=> 数字
>0 : 0

var f8 = { 'a': 0, get "a"() { return 0; } };
>f8 : { 只读 "a": 数字; }
>{ 'a': 0, get "a"() { return 0; } } : { 只读 "a": 数字; }
>0 : 0
>0 : 0

var f9 = { 'a': 0, get 'a'() { return 0; } };
>f9 : { 只读 'a': 数字; }
>{ 'a': 0, get 'a'() { return 0; } } : { 只读 'a': 数字; }
>0 : 0
>0 : 0

var f10 = { "a": 0, get 'a'() { return 0; } };
>f10 : { 只读 'a': 数字; }
>{ "a": 0, get 'a'() { return 0; } } : { 只读 'a': 数字; }
>0 : 0
>0 : 0

var f11 = { 1.0: 0, get '1'() { return 0; } };
>f11 : { 只读 '1': 数字; }
>{ 1.0: 0, get '1'() { return 0; } } : { 只读 '1': 数字; }
>0 : 0
>0 : 0

var f12 = { 0: 0, get 0() { return 0; } };
>f12 : { 只读 0: 数字; }
>{ 0: 0, get 0() { return 0; } } : { 只读 0: 数字; }
>0 : 0
>0 : 0

var f13 = { 0: 0, get 0() { return 0; } };
>f13 : { 只读 0: 数字; }
>{ 0: 0, get 0() { return 0; } } : { 只读 0: 数字; }
>0 : 0
>0 : 0

var f14 = { 0: 0, get 0x0() { return 0; } };
>f14 : { 只读 0x0: 数字; }
>{ 0: 0, get 0x0() { return 0; } } : { 只读 0x0: 数字; }
>0 : 0
>0 : 0

var f14 = { 0: 0, get 000() { return 0; } };
>f14 : { 只读 0x0: 数字; }
>{ 0: 0, get 000() { return 0; } } : { 只读 000: 数字; }
>0 : 0
>0 : 0

var f15 = { "100": 0, get 1e2() { return 0; } };
>f15 : { 只读 1e2: 数字; }
>{ "100": 0, get 1e2() { return 0; } } : { 只读 1e2: 数字; }
>0 : 0
>0 : 0

var f16 = { 0x20: 0, get 3.2e1() { return 0; } };
>f16 : { 只读 3.2e1: 数字; }
>{ 0x20: 0, get 3.2e1() { return 0; } } : { 只读 3.2e1: 数字; }
>0 : 0
>0 : 0

var f17 = { a: 0, get b() { return 1; }, get a() { return 0; } };
>f17 : { 只读 a: 数字; 只读 b: 数字; }
>{ a: 0, get b() { return 1; }, get a() { return 0; } } : { 只读 a: 数字; 只读 b: 数字; }
>a : 数字
>类型别名 :=> 数字
>0 : 0
>b : 数字
>类型别名 :=> 数字
>1 : 1
>a : 数字
>类型别名 :=> 数字
>0 : 0

// Get and set accessor with mismatched type annotations
var g1 = { get a(): number { return 4; }, set a(n: string) { } };
>g1 : { a: 数字; }
>{ get a(): number { return 4; }, set a(n: string) { } } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>4 : 4
>a : 数字
>类型别名 :=> 数字
>n : 文字
>类型别名 :=> 文字

var g2 = { get a() { return 4; }, set a(n: string) { } };
>g2 : { a: 文字; }
>{ get a() { return 4; }, set a(n: string) { } } : { a: 文字; }
>a : 文字
>类型别名 :=> 文字
>4 : 4
>a : 文字
>类型别名 :=> 文字
>n : 文字
>类型别名 :=> 文字

var g3 = { get a(): number { return undefined; }, set a(n: string) { } };
>g3 : { a: 数字; }
>{ get a(): number { return undefined; }, set a(n: string) { } } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>undefined : 未定
>类型别名 :=> 未定
>a : 数字
>类型别名 :=> 数字
>n : 文字
>类型别名 :=> 文字

