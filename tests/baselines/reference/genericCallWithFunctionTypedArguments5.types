=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments5.ts ===
// Generic call with parameter of object type with member of function type of n args passed object whose associated member is call signature with n+1 args

function foo<T, U>(arg: { cb: (t: T) => U }) {
>foo : <T, U>(arg: { cb: (t: T) => U; }) => U
>T : T
>U : U
>arg : { cb: (t: T) => U; }
>cb : (t: T) => U
>t : T
>T : T
>U : U

    return arg.cb(null);
>arg.cb(null) : U
>arg.cb : (t: T) => U
>arg : { cb: (t: T) => U; }
>cb : (t: T) => U
>null : 空值
>类型别名 :=> 空值
}

var arg = { cb: <T>(x: T) => '' };
>arg : { cb: <T>(x: T) => 文字; }
>{ cb: <T>(x: T) => '' } : { cb: <T>(x: T) => 文字; }
>cb : <T>(x: T) => 文字
><T>(x: T) => '' : <T>(x: T) => 文字
>T : T
>x : T
>T : T
>'' : ""

var r = foo(arg); // {}
>r : 文字
>类型别名 :=> 文字
>foo(arg) : 文字
>类型别名 :=> 文字
>foo : <T, U>(arg: { cb: (t: T) => U; }) => U
>arg : { cb: <T>(x: T) => 文字; }

// more args not allowed
var r2 = foo({ cb: <T>(x: T, y: T) => '' }); // error
>r2 : 任意
>类型别名 :=> 任意
>foo({ cb: <T>(x: T, y: T) => '' }) : 任意
>类型别名 :=> 任意
>foo : <T, U>(arg: { cb: (t: T) => U; }) => U
>{ cb: <T>(x: T, y: T) => '' } : { cb: <T>(x: T, y: T) => 文字; }
>cb : <T>(x: T, y: T) => 文字
><T>(x: T, y: T) => '' : <T>(x: T, y: T) => 文字
>T : T
>x : T
>T : T
>y : T
>T : T
>'' : ""

var r3 = foo({ cb: (x: string, y: number) => '' }); // error
>r3 : 任意
>类型别名 :=> 任意
>foo({ cb: (x: string, y: number) => '' }) : 任意
>类型别名 :=> 任意
>foo : <T, U>(arg: { cb: (t: T) => U; }) => U
>{ cb: (x: string, y: number) => '' } : { cb: (x: 文字, y: 数字) => 文字; }
>cb : (x: 文字, y: 数字) => 文字
>(x: string, y: number) => '' : (x: 文字, y: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>'' : ""

function foo2<T, U>(arg: { cb: (t: T, t2: T) => U }) {
>foo2 : <T, U>(arg: { cb: (t: T, t2: T) => U; }) => U
>T : T
>U : U
>arg : { cb: (t: T, t2: T) => U; }
>cb : (t: T, t2: T) => U
>t : T
>T : T
>t2 : T
>T : T
>U : U

    return arg.cb(null, null);
>arg.cb(null, null) : U
>arg.cb : (t: T, t2: T) => U
>arg : { cb: (t: T, t2: T) => U; }
>cb : (t: T, t2: T) => U
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
}

// fewer args ok
var r4 = foo(arg); // {}
>r4 : 文字
>类型别名 :=> 文字
>foo(arg) : 文字
>类型别名 :=> 文字
>foo : <T, U>(arg: { cb: (t: T) => U; }) => U
>arg : { cb: <T>(x: T) => 文字; }

var r5 = foo({ cb: <T>(x: T) => '' }); // {}
>r5 : 文字
>类型别名 :=> 文字
>foo({ cb: <T>(x: T) => '' }) : 文字
>类型别名 :=> 文字
>foo : <T, U>(arg: { cb: (t: T) => U; }) => U
>{ cb: <T>(x: T) => '' } : { cb: <T>(x: T) => 文字; }
>cb : <T>(x: T) => 文字
><T>(x: T) => '' : <T>(x: T) => 文字
>T : T
>x : T
>T : T
>'' : ""

var r6 = foo({ cb: (x: string) => '' }); // string
>r6 : 文字
>类型别名 :=> 文字
>foo({ cb: (x: string) => '' }) : 文字
>类型别名 :=> 文字
>foo : <T, U>(arg: { cb: (t: T) => U; }) => U
>{ cb: (x: string) => '' } : { cb: (x: 文字) => 文字; }
>cb : (x: 文字) => 文字
>(x: string) => '' : (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字
>'' : ""

var r7 = foo({ cb: () => '' }); // string
>r7 : 文字
>类型别名 :=> 文字
>foo({ cb: () => '' }) : 文字
>类型别名 :=> 文字
>foo : <T, U>(arg: { cb: (t: T) => U; }) => U
>{ cb: () => '' } : { cb: () => 文字; }
>cb : () => 文字
>() => '' : () => 文字
>'' : ""

