=== tests/cases/compiler/controlFlowWithIncompleteTypes.ts ===
// Repro from #11000

declare var cond: boolean;
>cond : 真假
>类型别名 :=> 真假

function foo1() {
>foo1 : () => 无值

    let x: string | number | boolean = 0;
>x : 文字 | 数字 | 真假
>0 : 0

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        if (typeof x === "string") {
>typeof x === "string" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"string" : "string"

            x = x.slice();
>x = x.slice() : 文字
>类型别名 :=> 文字
>x : 文字 | 数字 | 真假
>x.slice() : 文字
>类型别名 :=> 文字
>x.slice : (start?: 数字, end?: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>slice : (start?: 数字, end?: 数字) => 文字
        }
        else {
            x = "abc";
>x = "abc" : "abc"
>x : 文字 | 数字 | 真假
>"abc" : "abc"
        }
    }
}

function foo2() {
>foo2 : () => 无值

    let x: string | number | boolean = 0;
>x : 文字 | 数字 | 真假
>0 : 0

    while (cond) {
>cond : 真假
>类型别名 :=> 真假

        if (typeof x === "number") {
>typeof x === "number" : 真假
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 文字 | 数字
>"number" : "number"

            x = "abc";
>x = "abc" : "abc"
>x : 文字 | 数字 | 真假
>"abc" : "abc"
        }
        else {
            x = x.slice();
>x = x.slice() : 文字
>类型别名 :=> 文字
>x : 文字 | 数字 | 真假
>x.slice() : 文字
>类型别名 :=> 文字
>x.slice : (start?: 数字, end?: 数字) => 文字
>x : 文字
>类型别名 :=> 文字
>slice : (start?: 数字, end?: 数字) => 文字
        }
    }
}
