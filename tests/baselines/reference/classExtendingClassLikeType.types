=== tests/cases/conformance/classes/classDeclarations/classExtendingClassLikeType.ts ===
interface Base<T, U> {
>Base : Base<T, U>
>T : T
>U : U

    x: T;
>x : T
>T : T

    y: U;
>y : U
>U : U
}

// Error, no Base constructor function
class D0 extends Base<string, string> {
>D0 : D0
>Base : any
>类型别名 :=> 任意
}

interface BaseConstructor {
>BaseConstructor : BaseConstructor

    new (x: string, y: string): Base<string, string>;
>x : string
>类型别名 :=> 文字
>y : string
>类型别名 :=> 文字
>Base : Base<T, U>

    new <T>(x: T): Base<T, T>;
>T : T
>x : T
>T : T
>Base : Base<T, U>
>T : T
>T : T

    new <T>(x: T, y: T): Base<T, T>;
>T : T
>x : T
>T : T
>y : T
>T : T
>Base : Base<T, U>
>T : T
>T : T

    new <T, U>(x: T, y: U): Base<T, U>;
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>Base : Base<T, U>
>T : T
>U : U
}

declare function getBase(): BaseConstructor;
>getBase : () => BaseConstructor
>BaseConstructor : BaseConstructor

class D1 extends getBase() {
>D1 : D1
>getBase() : Base<string, string>
>getBase : () => BaseConstructor

    constructor() {
        super("abc", "def");
>super("abc", "def") : void
>类型别名 :=> 无值
>super : BaseConstructor
>"abc" : "abc"
>"def" : "def"

        this.x = "x";
>this.x = "x" : "x"
>this.x : string
>类型别名 :=> 文字
>this : this
>x : string
>类型别名 :=> 文字
>"x" : "x"

        this.y = "y";
>this.y = "y" : "y"
>this.y : string
>类型别名 :=> 文字
>this : this
>y : string
>类型别名 :=> 文字
>"y" : "y"
    }
}

class D2 extends getBase() <number> {
>D2 : D2
>getBase() : Base<number, number>
>getBase : () => BaseConstructor

    constructor() {
        super(10);
>super(10) : void
>类型别名 :=> 无值
>super : BaseConstructor
>10 : 10

        super(10, 20);
>super(10, 20) : void
>类型别名 :=> 无值
>super : BaseConstructor
>10 : 10
>20 : 20

        this.x = 1;
>this.x = 1 : 1
>this.x : number
>类型别名 :=> 数字
>this : this
>x : number
>类型别名 :=> 数字
>1 : 1

        this.y = 2;
>this.y = 2 : 2
>this.y : number
>类型别名 :=> 数字
>this : this
>y : number
>类型别名 :=> 数字
>2 : 2
    }
}

class D3 extends getBase() <string, number> {
>D3 : D3
>getBase() : Base<string, number>
>getBase : () => BaseConstructor

    constructor() {
        super("abc", 42);
>super("abc", 42) : void
>类型别名 :=> 无值
>super : BaseConstructor
>"abc" : "abc"
>42 : 42

        this.x = "x";
>this.x = "x" : "x"
>this.x : string
>类型别名 :=> 文字
>this : this
>x : string
>类型别名 :=> 文字
>"x" : "x"

        this.y = 2;
>this.y = 2 : 2
>this.y : number
>类型别名 :=> 数字
>this : this
>y : number
>类型别名 :=> 数字
>2 : 2
    }
}

// Error, no constructors with three type arguments
class D4 extends getBase() <string, string, string> {
>D4 : D4
>getBase() : BaseConstructor
>getBase : () => BaseConstructor
}

interface BadBaseConstructor {
>BadBaseConstructor : BadBaseConstructor

    new (x: string): Base<string, string>;
>x : string
>类型别名 :=> 文字
>Base : Base<T, U>

    new (x: number): Base<number, number>;
>x : number
>类型别名 :=> 数字
>Base : Base<T, U>
}

declare function getBadBase(): BadBaseConstructor;
>getBadBase : () => BadBaseConstructor
>BadBaseConstructor : BadBaseConstructor

// Error, constructor return types differ
class D5 extends getBadBase() {
>D5 : D5
>getBadBase() : Base<string, string>
>getBadBase : () => BadBaseConstructor
}

