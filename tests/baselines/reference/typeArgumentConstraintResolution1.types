=== tests/cases/compiler/typeArgumentConstraintResolution1.ts ===
function foo1<T extends Date>(test: T);
>foo1 : { <T 扩展 Date>(test: T): 任意; <T 扩展 Number>(test: 文字): 任意; }
>T : T
>Date : Date
>test : T
>T : T

function foo1<T extends Number>(test: string);
>foo1 : { <T 扩展 Date>(test: T): 任意; <T 扩展 Number>(test: 文字): 任意; }
>T : T
>Number : Number
>test : 文字
>类型别名 :=> 文字

function foo1<T extends String>(test: any) { }
>foo1 : { <T 扩展 Date>(test: T): 任意; <T 扩展 Number>(test: 文字): 任意; }
>T : T
>String : String
>test : 任意
>类型别名 :=> 任意

foo1<Date>(""); // should error
>foo1<Date>("") : 任意
>类型别名 :=> 任意
>foo1 : { <T 扩展 Date>(test: T): 任意; <T 扩展 Number>(test: 文字): 任意; }
>Date : Date
>"" : ""



function foo2<T extends Date>(test: T): T;
>foo2 : { <T 扩展 Date>(test: T): T; <T 扩展 Number>(test: 文字): T; }
>T : T
>Date : Date
>test : T
>T : T
>T : T

function foo2<T extends Number>(test: string): T; 
>foo2 : { <T 扩展 Date>(test: T): T; <T 扩展 Number>(test: 文字): T; }
>T : T
>Number : Number
>test : 文字
>类型别名 :=> 文字
>T : T

function foo2<T extends String>(test: any): any { return null; }
>foo2 : { <T 扩展 Date>(test: T): T; <T 扩展 Number>(test: 文字): T; }
>T : T
>String : String
>test : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

foo2<Date>(""); // Type Date does not satisfy the constraint 'Number' for type parameter 'T extends Number'
>foo2<Date>("") : 任意
>类型别名 :=> 任意
>foo2 : { <T 扩展 Date>(test: T): T; <T 扩展 Number>(test: 文字): T; }
>Date : Date
>"" : ""

