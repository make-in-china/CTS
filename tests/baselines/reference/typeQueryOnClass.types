=== tests/cases/conformance/types/specifyingTypes/typeQueries/typeQueryOnClass.ts ===
class C<T> {
>C : C<T>
>T : T

    constructor(x: number);
>x : 数字
>类型别名 :=> 数字

    constructor(x: string);
>x : 文字
>类型别名 :=> 文字

    constructor(public x) { }
>x : 任意
>类型别名 :=> 任意

    static foo(x: number);
>foo : { (x: 数字): 任意; (x: {}): 任意; }
>x : 数字
>类型别名 :=> 数字

    static foo(x: {});
>foo : { (x: 数字): 任意; (x: {}): 任意; }
>x : {}

    static foo(x) { }
>foo : { (x: 数字): 任意; (x: {}): 任意; }
>x : 任意
>类型别名 :=> 任意

    static bar(x) { }
>bar : (x: 任意) => 无值
>x : 任意
>类型别名 :=> 任意

    static sa = 1;
>sa : 数字
>类型别名 :=> 数字
>1 : 1

    static sb = () => 1;
>sb : () => 数字
>() => 1 : () => 数字
>1 : 1

    static get sc() {
>sc : 数字
>类型别名 :=> 数字

        return 1;
>1 : 1
    }
    static set sc(x) {
>sc : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
    }

    static get sd() {
>sd : 数字
>类型别名 :=> 数字

        return 1;
>1 : 1
    }

    baz(x): string { return ''; }
>baz : (x: 任意) => 文字
>x : 任意
>类型别名 :=> 任意
>'' : ""

    ia = 1;
>ia : 数字
>类型别名 :=> 数字
>1 : 1

    ib = () => this.ia;
>ib : () => 数字
>() => this.ia : () => 数字
>this.ia : 数字
>类型别名 :=> 数字
>this : 本体
>ia : 数字
>类型别名 :=> 数字

    get ic() {
>ic : 数字
>类型别名 :=> 数字

        return 1;
>1 : 1
    }
    set ic(x) {
>ic : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
    }

    get id() {
>id : 数字
>类型别名 :=> 数字

        return 1;
>1 : 1
    }

}

var c: C<string>;
>c : C<文字>
>C : C<T>

// BUG 820454
var r1: typeof C;
>r1 : 类为 C
>C : 类为 C

var r2: typeof c;
>r2 : C<文字>
>c : C<文字>

class D<T> {
>D : D<T>
>T : T

    constructor(public y?) { }
>y : 任意
>类型别名 :=> 任意

    x: T;
>x : T
>T : T

    foo() { }
>foo : () => 无值
}

var d: D<string>;
>d : D<文字>
>D : D<T>

var r3: typeof D;
>r3 : 类为 D
>D : 类为 D

var r4: typeof d;
>r4 : D<文字>
>d : D<文字>

