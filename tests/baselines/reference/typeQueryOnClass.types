=== tests/cases/conformance/types/specifyingTypes/typeQueries/typeQueryOnClass.ts ===
class C<T> {
>C : C<T>
>T : T

    constructor(x: number);
>x : number
>类型别名 :=> 数字

    constructor(x: string);
>x : string
>类型别名 :=> 文字

    constructor(public x) { }
>x : any
>类型别名 :=> 任意

    static foo(x: number);
>foo : { (x: number): any; (x: {}): any; }
>x : number
>类型别名 :=> 数字

    static foo(x: {});
>foo : { (x: number): any; (x: {}): any; }
>x : {}

    static foo(x) { }
>foo : { (x: number): any; (x: {}): any; }
>x : any
>类型别名 :=> 任意

    static bar(x) { }
>bar : (x: any) => void
>x : any
>类型别名 :=> 任意

    static sa = 1;
>sa : number
>类型别名 :=> 数字
>1 : 1

    static sb = () => 1;
>sb : () => number
>() => 1 : () => number
>1 : 1

    static get sc() {
>sc : number
>类型别名 :=> 数字

        return 1;
>1 : 1
    }
    static set sc(x) {
>sc : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
    }

    static get sd() {
>sd : number
>类型别名 :=> 数字

        return 1;
>1 : 1
    }

    baz(x): string { return ''; }
>baz : (x: any) => string
>x : any
>类型别名 :=> 任意
>'' : ""

    ia = 1;
>ia : number
>类型别名 :=> 数字
>1 : 1

    ib = () => this.ia;
>ib : () => number
>() => this.ia : () => number
>this.ia : number
>类型别名 :=> 数字
>this : this
>ia : number
>类型别名 :=> 数字

    get ic() {
>ic : number
>类型别名 :=> 数字

        return 1;
>1 : 1
    }
    set ic(x) {
>ic : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
    }

    get id() {
>id : number
>类型别名 :=> 数字

        return 1;
>1 : 1
    }

}

var c: C<string>;
>c : C<string>
>C : C<T>

// BUG 820454
var r1: typeof C;
>r1 : typeof C
>C : typeof C

var r2: typeof c;
>r2 : C<string>
>c : C<string>

class D<T> {
>D : D<T>
>T : T

    constructor(public y?) { }
>y : any
>类型别名 :=> 任意

    x: T;
>x : T
>T : T

    foo() { }
>foo : () => void
}

var d: D<string>;
>d : D<string>
>D : D<T>

var r3: typeof D;
>r3 : typeof D
>D : typeof D

var r4: typeof d;
>r4 : D<string>
>d : D<string>

