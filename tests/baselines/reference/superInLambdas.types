=== tests/cases/compiler/superInLambdas.ts ===
class User {
>User : User

    name: string = "Bob";
>name : string
>类型别名 :=> 文字
>"Bob" : "Bob"

    sayHello(): void {
>sayHello : () => void

        //console.log("Hello, " + this.name);
    }
}

class RegisteredUser extends User {
>RegisteredUser : RegisteredUser
>User : User

    name: string = "Frank";
>name : string
>类型别名 :=> 文字
>"Frank" : "Frank"

    constructor() {
        super();
>super() : void
>类型别名 :=> 无值
>super : typeof User

        // super call in a constructor
        super.sayHello();
>super.sayHello() : void
>类型别名 :=> 无值
>super.sayHello : () => void
>super : User
>sayHello : () => void

        // super call in a lambda in a constructor 
        var x = () => super.sayHello();
>x : () => void
>() => super.sayHello() : () => void
>super.sayHello() : void
>类型别名 :=> 无值
>super.sayHello : () => void
>super : User
>sayHello : () => void
    }
    sayHello(): void {
>sayHello : () => void

        // super call in a method
        super.sayHello();
>super.sayHello() : void
>类型别名 :=> 无值
>super.sayHello : () => void
>super : User
>sayHello : () => void

        // super call in a lambda in a method
       var x = () => super.sayHello();
>x : () => void
>() => super.sayHello() : () => void
>super.sayHello() : void
>类型别名 :=> 无值
>super.sayHello : () => void
>super : User
>sayHello : () => void
    }
}
class RegisteredUser2 extends User {
>RegisteredUser2 : RegisteredUser2
>User : User

    name: string = "Joe";
>name : string
>类型别名 :=> 文字
>"Joe" : "Joe"

    constructor() {
        super();
>super() : void
>类型别名 :=> 无值
>super : typeof User

        // super call in a nested lambda in a constructor 
        var x = () => () => () => super.sayHello();
>x : () => () => () => void
>() => () => () => super.sayHello() : () => () => () => void
>() => () => super.sayHello() : () => () => void
>() => super.sayHello() : () => void
>super.sayHello() : void
>类型别名 :=> 无值
>super.sayHello : () => void
>super : User
>sayHello : () => void
    }
    sayHello(): void {
>sayHello : () => void

        // super call in a nested lambda in a method
        var x = () => () => () => super.sayHello();
>x : () => () => () => void
>() => () => () => super.sayHello() : () => () => () => void
>() => () => super.sayHello() : () => () => void
>() => super.sayHello() : () => void
>super.sayHello() : void
>类型别名 :=> 无值
>super.sayHello : () => void
>super : User
>sayHello : () => void
    }
}

class RegisteredUser3 extends User {
>RegisteredUser3 : RegisteredUser3
>User : User

    name: string = "Sam";
>name : string
>类型别名 :=> 文字
>"Sam" : "Sam"

    constructor() {
        super();
>super() : void
>类型别名 :=> 无值
>super : typeof User

        // super property in a nested lambda in a constructor 
        var superName = () => () => () => super.name;
>superName : () => () => () => string
>() => () => () => super.name : () => () => () => string
>() => () => super.name : () => () => string
>() => super.name : () => string
>super.name : string
>类型别名 :=> 文字
>super : User
>name : string
>类型别名 :=> 文字
    }
    sayHello(): void {
>sayHello : () => void

        // super property in a nested lambda in a method
        var superName = () => () => () => super.name;
>superName : () => () => () => string
>() => () => () => super.name : () => () => () => string
>() => () => super.name : () => () => string
>() => super.name : () => string
>super.name : string
>类型别名 :=> 文字
>super : User
>name : string
>类型别名 :=> 文字
    }
}

class RegisteredUser4 extends User {
>RegisteredUser4 : RegisteredUser4
>User : User

    name: string = "Mark";
>name : string
>类型别名 :=> 文字
>"Mark" : "Mark"

    constructor() {
        super();
>super() : void
>类型别名 :=> 无值
>super : typeof User

        // super in a nested lambda in a constructor 
        var x = () => () => super;
>x : () => () => any
>() => () => super : () => () => any
>() => super : () => any
>super : any
>类型别名 :=> 任意
>super : User
> : any
>类型别名 :=> 任意
    }
    sayHello(): void {
>sayHello : () => void

        // super in a nested lambda in a method
        var x = () => () => super;
>x : () => () => any
>() => () => super : () => () => any
>() => super : () => any
>super : any
>类型别名 :=> 任意
>super : User
> : any
>类型别名 :=> 任意
    }
}
