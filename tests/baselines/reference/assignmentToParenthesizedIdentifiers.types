=== tests/cases/conformance/expressions/valuesAndReferences/assignmentToParenthesizedIdentifiers.ts ===
var x: number;
>x : 数字
>类型别名 :=> 数字

x = 3; // OK
>x = 3 : 3
>x : 数字
>类型别名 :=> 数字
>3 : 3

(x) = 3; // OK
>(x) = 3 : 3
>(x) : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>3 : 3

x = ''; // Error
>x = '' : ""
>x : 数字
>类型别名 :=> 数字
>'' : ""

(x) = ''; // Error
>(x) = '' : ""
>(x) : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>'' : ""

module M {
>M : 类为 M

    export var y: number;
>y : 数字
>类型别名 :=> 数字
}
M.y = 3; // OK
>M.y = 3 : 3
>M.y : 数字
>类型别名 :=> 数字
>M : 类为 M
>y : 数字
>类型别名 :=> 数字
>3 : 3

(M).y = 3; // OK
>(M).y = 3 : 3
>(M).y : 数字
>类型别名 :=> 数字
>(M) : 类为 M
>M : 类为 M
>y : 数字
>类型别名 :=> 数字
>3 : 3

(M.y) = 3; // OK
>(M.y) = 3 : 3
>(M.y) : 数字
>类型别名 :=> 数字
>M.y : 数字
>类型别名 :=> 数字
>M : 类为 M
>y : 数字
>类型别名 :=> 数字
>3 : 3

M.y = ''; // Error
>M.y = '' : ""
>M.y : 数字
>类型别名 :=> 数字
>M : 类为 M
>y : 数字
>类型别名 :=> 数字
>'' : ""

(M).y = ''; // Error
>(M).y = '' : ""
>(M).y : 数字
>类型别名 :=> 数字
>(M) : 类为 M
>M : 类为 M
>y : 数字
>类型别名 :=> 数字
>'' : ""

(M.y) = ''; // Error
>(M.y) = '' : ""
>(M.y) : 数字
>类型别名 :=> 数字
>M.y : 数字
>类型别名 :=> 数字
>M : 类为 M
>y : 数字
>类型别名 :=> 数字
>'' : ""

M = { y: 3 }; // Error
>M = { y: 3 } : { y: 数字; }
>M : 任意
>类型别名 :=> 任意
>{ y: 3 } : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>3 : 3

(M) = { y: 3 }; // Error
>(M) = { y: 3 } : { y: 数字; }
>(M) : 任意
>类型别名 :=> 任意
>M : 任意
>类型别名 :=> 任意
>{ y: 3 } : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>3 : 3

module M2 {
>M2 : 类为 M2

    export module M3 {
>M3 : 类为 M3

        export var x: number;
>x : 数字
>类型别名 :=> 数字
    }

    M3 = { x: 3 }; // Error
>M3 = { x: 3 } : { x: 数字; }
>M3 : 任意
>类型别名 :=> 任意
>{ x: 3 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>3 : 3
}
M2.M3 = { x: 3 }; // OK
>M2.M3 = { x: 3 } : { x: 数字; }
>M2.M3 : 类为 M2.M3
>M2 : 类为 M2
>M3 : 类为 M2.M3
>{ x: 3 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>3 : 3

(M2).M3 = { x: 3 }; // OK
>(M2).M3 = { x: 3 } : { x: 数字; }
>(M2).M3 : 类为 M2.M3
>(M2) : 类为 M2
>M2 : 类为 M2
>M3 : 类为 M2.M3
>{ x: 3 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>3 : 3

(M2.M3) = { x: 3 }; // OK
>(M2.M3) = { x: 3 } : { x: 数字; }
>(M2.M3) : 类为 M2.M3
>M2.M3 : 类为 M2.M3
>M2 : 类为 M2
>M3 : 类为 M2.M3
>{ x: 3 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>3 : 3

M2.M3 = { x: '' }; // Error
>M2.M3 = { x: '' } : { x: 文字; }
>M2.M3 : 类为 M2.M3
>M2 : 类为 M2
>M3 : 类为 M2.M3
>{ x: '' } : { x: 文字; }
>x : 文字
>类型别名 :=> 文字
>'' : ""

(M2).M3 = { x: '' }; // Error
>(M2).M3 = { x: '' } : { x: 文字; }
>(M2).M3 : 类为 M2.M3
>(M2) : 类为 M2
>M2 : 类为 M2
>M3 : 类为 M2.M3
>{ x: '' } : { x: 文字; }
>x : 文字
>类型别名 :=> 文字
>'' : ""

(M2.M3) = { x: '' }; // Error
>(M2.M3) = { x: '' } : { x: 文字; }
>(M2.M3) : 类为 M2.M3
>M2.M3 : 类为 M2.M3
>M2 : 类为 M2
>M3 : 类为 M2.M3
>{ x: '' } : { x: 文字; }
>x : 文字
>类型别名 :=> 文字
>'' : ""


function fn() { }
>fn : () => 无值

fn = () => 3; // Bug 823548: Should be error (fn is not a reference)
>fn = () => 3 : () => 数字
>fn : 任意
>类型别名 :=> 任意
>() => 3 : () => 数字
>3 : 3

(fn) = () => 3; // Should be error
>(fn) = () => 3 : () => 数字
>(fn) : 任意
>类型别名 :=> 任意
>fn : 任意
>类型别名 :=> 任意
>() => 3 : () => 数字
>3 : 3

function fn2(x: number, y: { t: number }) {
>fn2 : (x: 数字, y: { t: 数字; }) => 无值
>x : 数字
>类型别名 :=> 数字
>y : { t: 数字; }
>t : 数字
>类型别名 :=> 数字

    x = 3;
>x = 3 : 3
>x : 数字
>类型别名 :=> 数字
>3 : 3

    (x) = 3; // OK
>(x) = 3 : 3
>(x) : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>3 : 3

    x = ''; // Error
>x = '' : ""
>x : 数字
>类型别名 :=> 数字
>'' : ""

    (x) = ''; // Error
>(x) = '' : ""
>(x) : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>'' : ""

    (y).t = 3; // OK
>(y).t = 3 : 3
>(y).t : 数字
>类型别名 :=> 数字
>(y) : { t: 数字; }
>y : { t: 数字; }
>t : 数字
>类型别名 :=> 数字
>3 : 3

    (y.t) = 3; // OK
>(y.t) = 3 : 3
>(y.t) : 数字
>类型别名 :=> 数字
>y.t : 数字
>类型别名 :=> 数字
>y : { t: 数字; }
>t : 数字
>类型别名 :=> 数字
>3 : 3

    (y).t = ''; // Error
>(y).t = '' : ""
>(y).t : 数字
>类型别名 :=> 数字
>(y) : { t: 数字; }
>y : { t: 数字; }
>t : 数字
>类型别名 :=> 数字
>'' : ""

    (y.t) = ''; // Error
>(y.t) = '' : ""
>(y.t) : 数字
>类型别名 :=> 数字
>y.t : 数字
>类型别名 :=> 数字
>y : { t: 数字; }
>t : 数字
>类型别名 :=> 数字
>'' : ""

    y['t'] = 3; // OK
>y['t'] = 3 : 3
>y['t'] : 数字
>类型别名 :=> 数字
>y : { t: 数字; }
>'t' : "t"
>3 : 3

    (y)['t'] = 3; // OK
>(y)['t'] = 3 : 3
>(y)['t'] : 数字
>类型别名 :=> 数字
>(y) : { t: 数字; }
>y : { t: 数字; }
>'t' : "t"
>3 : 3

    (y['t']) = 3; // OK
>(y['t']) = 3 : 3
>(y['t']) : 数字
>类型别名 :=> 数字
>y['t'] : 数字
>类型别名 :=> 数字
>y : { t: 数字; }
>'t' : "t"
>3 : 3

    y['t'] = ''; // Error
>y['t'] = '' : ""
>y['t'] : 数字
>类型别名 :=> 数字
>y : { t: 数字; }
>'t' : "t"
>'' : ""

    (y)['t'] = ''; // Error
>(y)['t'] = '' : ""
>(y)['t'] : 数字
>类型别名 :=> 数字
>(y) : { t: 数字; }
>y : { t: 数字; }
>'t' : "t"
>'' : ""

    (y['t']) = ''; // Error
>(y['t']) = '' : ""
>(y['t']) : 数字
>类型别名 :=> 数字
>y['t'] : 数字
>类型别名 :=> 数字
>y : { t: 数字; }
>'t' : "t"
>'' : ""
}

enum E {
>E : E

    A
>A : E
}
E = undefined; // Error
>E = undefined : 未定
>类型别名 :=> 未定
>E : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

(E) = undefined; // Error
>(E) = undefined : 未定
>类型别名 :=> 未定
>(E) : 任意
>类型别名 :=> 任意
>E : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

class C {
>C : C

}

C = undefined; // Error
>C = undefined : 未定
>类型别名 :=> 未定
>C : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

(C) = undefined; // Error
>(C) = undefined : 未定
>类型别名 :=> 未定
>(C) : 任意
>类型别名 :=> 任意
>C : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

