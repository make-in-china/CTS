=== tests/cases/conformance/expressions/functionCalls/callWithSpreadES6.ts ===
interface X {
>X : X

    foo(x: number, y: number, ...z: string[]);
>foo : (x: number, y: number, ...z: string[]) => any
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>z : string[]
}

function foo(x: number, y: number, ...z: string[]) {
>foo : (x: number, y: number, ...z: string[]) => void
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>z : string[]
}

var a: string[];
>a : string[]

var z: number[];
>z : number[]

var obj: X;
>obj : X
>X : X

var xa: X[];
>xa : X[]
>X : X

foo(1, 2, "abc");
>foo(1, 2, "abc") : void
>类型别名 :=> 无值
>foo : (x: number, y: number, ...z: string[]) => void
>1 : 1
>2 : 2
>"abc" : "abc"

foo(1, 2, ...a);
>foo(1, 2, ...a) : void
>类型别名 :=> 无值
>foo : (x: number, y: number, ...z: string[]) => void
>1 : 1
>2 : 2
>...a : string
>类型别名 :=> 文字
>a : string[]

foo(1, 2, ...a, "abc");
>foo(1, 2, ...a, "abc") : void
>类型别名 :=> 无值
>foo : (x: number, y: number, ...z: string[]) => void
>1 : 1
>2 : 2
>...a : string
>类型别名 :=> 文字
>a : string[]
>"abc" : "abc"

obj.foo(1, 2, "abc");
>obj.foo(1, 2, "abc") : any
>类型别名 :=> 任意
>obj.foo : (x: number, y: number, ...z: string[]) => any
>obj : X
>foo : (x: number, y: number, ...z: string[]) => any
>1 : 1
>2 : 2
>"abc" : "abc"

obj.foo(1, 2, ...a);
>obj.foo(1, 2, ...a) : any
>类型别名 :=> 任意
>obj.foo : (x: number, y: number, ...z: string[]) => any
>obj : X
>foo : (x: number, y: number, ...z: string[]) => any
>1 : 1
>2 : 2
>...a : string
>类型别名 :=> 文字
>a : string[]

obj.foo(1, 2, ...a, "abc");
>obj.foo(1, 2, ...a, "abc") : any
>类型别名 :=> 任意
>obj.foo : (x: number, y: number, ...z: string[]) => any
>obj : X
>foo : (x: number, y: number, ...z: string[]) => any
>1 : 1
>2 : 2
>...a : string
>类型别名 :=> 文字
>a : string[]
>"abc" : "abc"

(obj.foo)(1, 2, "abc");
>(obj.foo)(1, 2, "abc") : any
>类型别名 :=> 任意
>(obj.foo) : (x: number, y: number, ...z: string[]) => any
>obj.foo : (x: number, y: number, ...z: string[]) => any
>obj : X
>foo : (x: number, y: number, ...z: string[]) => any
>1 : 1
>2 : 2
>"abc" : "abc"

(obj.foo)(1, 2, ...a);
>(obj.foo)(1, 2, ...a) : any
>类型别名 :=> 任意
>(obj.foo) : (x: number, y: number, ...z: string[]) => any
>obj.foo : (x: number, y: number, ...z: string[]) => any
>obj : X
>foo : (x: number, y: number, ...z: string[]) => any
>1 : 1
>2 : 2
>...a : string
>类型别名 :=> 文字
>a : string[]

(obj.foo)(1, 2, ...a, "abc");
>(obj.foo)(1, 2, ...a, "abc") : any
>类型别名 :=> 任意
>(obj.foo) : (x: number, y: number, ...z: string[]) => any
>obj.foo : (x: number, y: number, ...z: string[]) => any
>obj : X
>foo : (x: number, y: number, ...z: string[]) => any
>1 : 1
>2 : 2
>...a : string
>类型别名 :=> 文字
>a : string[]
>"abc" : "abc"

xa[1].foo(1, 2, "abc");
>xa[1].foo(1, 2, "abc") : any
>类型别名 :=> 任意
>xa[1].foo : (x: number, y: number, ...z: string[]) => any
>xa[1] : X
>xa : X[]
>1 : 1
>foo : (x: number, y: number, ...z: string[]) => any
>1 : 1
>2 : 2
>"abc" : "abc"

xa[1].foo(1, 2, ...a);
>xa[1].foo(1, 2, ...a) : any
>类型别名 :=> 任意
>xa[1].foo : (x: number, y: number, ...z: string[]) => any
>xa[1] : X
>xa : X[]
>1 : 1
>foo : (x: number, y: number, ...z: string[]) => any
>1 : 1
>2 : 2
>...a : string
>类型别名 :=> 文字
>a : string[]

xa[1].foo(1, 2, ...a, "abc");
>xa[1].foo(1, 2, ...a, "abc") : any
>类型别名 :=> 任意
>xa[1].foo : (x: number, y: number, ...z: string[]) => any
>xa[1] : X
>xa : X[]
>1 : 1
>foo : (x: number, y: number, ...z: string[]) => any
>1 : 1
>2 : 2
>...a : string
>类型别名 :=> 文字
>a : string[]
>"abc" : "abc"

(<Function>xa[1].foo)(...[1, 2, "abc"]);
>(<Function>xa[1].foo)(...[1, 2, "abc"]) : any
>类型别名 :=> 任意
>(<Function>xa[1].foo) : Function
><Function>xa[1].foo : Function
>Function : Function
>xa[1].foo : (x: number, y: number, ...z: string[]) => any
>xa[1] : X
>xa : X[]
>1 : 1
>foo : (x: number, y: number, ...z: string[]) => any
>...[1, 2, "abc"] : string | number
>[1, 2, "abc"] : (string | number)[]
>1 : 1
>2 : 2
>"abc" : "abc"

class C {
>C : C

    constructor(x: number, y: number, ...z: string[]) {
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>z : string[]

        this.foo(x, y);
>this.foo(x, y) : void
>类型别名 :=> 无值
>this.foo : (x: number, y: number, ...z: string[]) => void
>this : this
>foo : (x: number, y: number, ...z: string[]) => void
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

        this.foo(x, y, ...z);
>this.foo(x, y, ...z) : void
>类型别名 :=> 无值
>this.foo : (x: number, y: number, ...z: string[]) => void
>this : this
>foo : (x: number, y: number, ...z: string[]) => void
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>...z : string
>类型别名 :=> 文字
>z : string[]
    }
    foo(x: number, y: number, ...z: string[]) {
>foo : (x: number, y: number, ...z: string[]) => void
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>z : string[]
    }
}

class D extends C {
>D : D
>C : C

    constructor() {
        super(1, 2);
>super(1, 2) : void
>类型别名 :=> 无值
>super : typeof C
>1 : 1
>2 : 2

        super(1, 2, ...a);
>super(1, 2, ...a) : void
>类型别名 :=> 无值
>super : typeof C
>1 : 1
>2 : 2
>...a : string
>类型别名 :=> 文字
>a : string[]
    }
    foo() {
>foo : () => void

        super.foo(1, 2);
>super.foo(1, 2) : void
>类型别名 :=> 无值
>super.foo : (x: number, y: number, ...z: string[]) => void
>super : C
>foo : (x: number, y: number, ...z: string[]) => void
>1 : 1
>2 : 2

        super.foo(1, 2, ...a);
>super.foo(1, 2, ...a) : void
>类型别名 :=> 无值
>super.foo : (x: number, y: number, ...z: string[]) => void
>super : C
>foo : (x: number, y: number, ...z: string[]) => void
>1 : 1
>2 : 2
>...a : string
>类型别名 :=> 文字
>a : string[]
    }
}

