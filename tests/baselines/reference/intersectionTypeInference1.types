=== tests/cases/compiler/intersectionTypeInference1.ts ===
// Repro from #8801

function alert(s: string) {}
>alert : (s: 文字) => 无值
>s : 文字
>类型别名 :=> 文字

const parameterFn = (props:{store:string}) => alert(props.store)
>parameterFn : (props: { store: 文字; }) => 无值
>(props:{store:string}) => alert(props.store) : (props: { store: 文字; }) => 无值
>props : { store: 文字; }
>store : 文字
>类型别名 :=> 文字
>alert(props.store) : 无值
>类型别名 :=> 无值
>alert : (s: 文字) => 无值
>props.store : 文字
>类型别名 :=> 文字
>props : { store: 文字; }
>store : 文字
>类型别名 :=> 文字

const brokenFunction = <OwnProps>(f: (p: {dispatch: number} & OwnProps) => void) => (o: OwnProps) => o
>brokenFunction : <OwnProps>(f: (p: { dispatch: 数字; } & OwnProps) => 无值) => (o: OwnProps) => OwnProps
><OwnProps>(f: (p: {dispatch: number} & OwnProps) => void) => (o: OwnProps) => o : <OwnProps>(f: (p: { dispatch: 数字; } & OwnProps) => 无值) => (o: OwnProps) => OwnProps
>OwnProps : OwnProps
>f : (p: { dispatch: 数字; } & OwnProps) => 无值
>p : { dispatch: 数字; } & OwnProps
>dispatch : 数字
>类型别名 :=> 数字
>OwnProps : OwnProps
>(o: OwnProps) => o : (o: OwnProps) => OwnProps
>o : OwnProps
>OwnProps : OwnProps
>o : OwnProps

export const Form3 = brokenFunction(parameterFn)({store: "hello"})
>Form3 : { store: 文字; }
>brokenFunction(parameterFn)({store: "hello"}) : { store: 文字; }
>brokenFunction(parameterFn) : (o: { store: 文字; }) => { store: 文字; }
>brokenFunction : <OwnProps>(f: (p: { dispatch: 数字; } & OwnProps) => 无值) => (o: OwnProps) => OwnProps
>parameterFn : (props: { store: 文字; }) => 无值
>{store: "hello"} : { store: 文字; }
>store : 文字
>类型别名 :=> 文字
>"hello" : "hello"

