=== tests/cases/compiler/controlFlowArrays.ts ===
declare function cond(): boolean;
>cond : () => 真假

function f1() {
>f1 : () => (文字 | 数字 | 真假)[]

    let x = [];
>x : 任意[]
>[] : 不及[]

    x[0] = 5;
>x[0] = 5 : 5
>x[0] : 任意
>类型别名 :=> 任意
>x : 任意[]
>0 : 0
>5 : 5

    x[1] = "hello";
>x[1] = "hello" : "hello"
>x[1] : 任意
>类型别名 :=> 任意
>x : 任意[]
>1 : 1
>"hello" : "hello"

    x[2] = true;
>x[2] = true : 为真
>类型别名 :=> 为真
>x[2] : 任意
>类型别名 :=> 任意
>x : 任意[]
>2 : 2
>true : 为真
>类型别名 :=> 为真

    return x;  // (string | number | boolean)[]
>x : (文字 | 数字 | 真假)[]
}

function f2() {
>f2 : () => (文字 | 数字 | 真假)[]

    let x = [];
>x : 任意[]
>[] : 不及[]

    x.push(5);
>x.push(5) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5

    x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"

    x.push(true);
>x.push(true) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>true : 为真
>类型别名 :=> 为真

    return x;  // (string | number | boolean)[]
>x : (文字 | 数字 | 真假)[]
}

function f3() {
>f3 : () => (文字 | 数字)[]

    let x;
>x : 任意
>类型别名 :=> 任意

    x = [];
>x = [] : 不及[]
>x : 任意
>类型别名 :=> 任意
>[] : 不及[]

    x.push(5, "hello");
>x.push(5, "hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5
>"hello" : "hello"

    return x;  // (string | number)[]
>x : (文字 | 数字)[]
}

function f4() {
>f4 : () => (文字 | 数字)[]

    let x = [];
>x : 任意[]
>[] : 不及[]

    if (cond()) {
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假

        x.push(5);
>x.push(5) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5
    }
    else {
        x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"
    }
    return x;  // (string | number)[]
>x : (文字 | 数字)[]
}

function f5() {
>f5 : () => (文字 | 数字)[]

    let x;
>x : 任意
>类型别名 :=> 任意

    if (cond()) {
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假

        x = [];
>x = [] : 不及[]
>x : 任意
>类型别名 :=> 任意
>[] : 不及[]

        x.push(5);
>x.push(5) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5
    }
    else {
        x = [];
>x = [] : 不及[]
>x : 任意
>类型别名 :=> 任意
>[] : 不及[]

        x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"
    }
    return x;  // (string | number)[]
>x : (文字 | 数字)[]
}

function f6() {
>f6 : () => 数字 | 文字[]

    let x;
>x : 任意
>类型别名 :=> 任意

    if (cond()) {
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假

        x = 5;
>x = 5 : 5
>x : 任意
>类型别名 :=> 任意
>5 : 5
    }
    else {
        x = [];
>x = [] : 不及[]
>x : 任意
>类型别名 :=> 任意
>[] : 不及[]

        x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"
    }
    return x;  // number | string[]
>x : 数字 | 文字[]
}

function f7() {
>f7 : () => 文字[] | 空值

    let x = null;
>x : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

    if (cond()) {
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假

        x = [];
>x = [] : 不及[]
>x : 任意
>类型别名 :=> 任意
>[] : 不及[]

        while (cond()) {
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假

            x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"
        }
    }
    return x;  // string[] | null
>x : 文字[] | 空值
}

function f8() {
>f8 : () => (文字 | 数字 | 真假)[]

    let x = [];
>x : 任意[]
>[] : 不及[]

    x.push(5);
>x.push(5) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5

    if (cond()) return x;  // number[]
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假
>x : 数字[]

    x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"

    if (cond()) return x;  // (string | number)[]
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假
>x : (文字 | 数字)[]

    x.push(true);
>x.push(true) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>true : 为真
>类型别名 :=> 为真

    return x;  // (string | number | boolean)[]
>x : (文字 | 数字 | 真假)[]
}

function f9() {
>f9 : () => 文字[] | 数字[]

    let x = [];
>x : 任意[]
>[] : 不及[]

    if (cond()) {
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假

        x.push(5);
>x.push(5) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5

        return x;  // number[]
>x : 数字[]
    }
    else {
        x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"

        return x;  // string[]
>x : 文字[]
    }
}

function f10() {
>f10 : () => (文字 | 数字 | 真假)[]

    let x = [];
>x : 任意[]
>[] : 不及[]

    if (cond()) {
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假

        x.push(true);
>x.push(true) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>true : 为真
>类型别名 :=> 为真

        x;  // boolean[]
>x : 真假[]
    }
    else {
        x.push(5);
>x.push(5) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5

        x;  // number[]
>x : 数字[]

        while (cond()) {
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假

            x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"
        }
        x;  // (string | number)[]
>x : (文字 | 数字)[]
    }
    x.push(99);
>x.push(99) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>99 : 99

    return x;  // (string | number | boolean)[]
>x : (文字 | 数字 | 真假)[]
}

function f11() {
>f11 : () => 文字[]

    let x = [];
>x : 任意[]
>[] : 不及[]

    if (x.length === 0) {  // x.length ok on implicit any[]
>x.length === 0 : 真假
>类型别名 :=> 真假
>x.length : 数字
>类型别名 :=> 数字
>x : 任意[]
>length : 数字
>类型别名 :=> 数字
>0 : 0

        x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"
    }
    return x;
>x : 文字[]
}

function f12() {
>f12 : () => 文字[]

    let x;
>x : 任意
>类型别名 :=> 任意

    x = [];
>x = [] : 不及[]
>x : 任意
>类型别名 :=> 任意
>[] : 不及[]

    if (x.length === 0) {  // x.length ok on implicit any[]
>x.length === 0 : 真假
>类型别名 :=> 真假
>x.length : 数字
>类型别名 :=> 数字
>x : 任意[]
>length : 数字
>类型别名 :=> 数字
>0 : 0

        x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"
    }
    return x;
>x : 文字[]
}

function f13() {
>f13 : () => (文字 | 数字 | 真假)[]

    var x = [];
>x : 任意[]
>[] : 不及[]

    x.push(5);
>x.push(5) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5

    x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"

    x.push(true);
>x.push(true) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>true : 为真
>类型别名 :=> 为真

    return x;  // (string | number | boolean)[]
>x : (文字 | 数字 | 真假)[]
}

function f14() {
>f14 : () => (文字 | 数字 | 真假)[]

    const x = [];
>x : 任意[]
>[] : 不及[]

    x.push(5);
>x.push(5) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5

    x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"

    x.push(true);
>x.push(true) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>true : 为真
>类型别名 :=> 为真

    return x;  // (string | number | boolean)[]
>x : (文字 | 数字 | 真假)[]
}

function f15() {
>f15 : () => 文字[]

    let x = [];
>x : 任意[]
>[] : 不及[]

    while (cond()) {
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假

        while (cond()) {}
>cond() : 真假
>类型别名 :=> 真假
>cond : () => 真假

        x.push("hello");
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"
    }
    return x;  // string[]
>x : 文字[]
}

function f16() {
>f16 : () => (文字 | 数字 | 真假 | { a: 数字; })[]

    let x;
>x : 任意
>类型别名 :=> 任意

    let y;
>y : 任意
>类型别名 :=> 任意

    (x = [], x).push(5);
>(x = [], x).push(5) : 数字
>类型别名 :=> 数字
>(x = [], x).push : (...items: 任意[]) => 数字
>(x = [], x) : 任意[]
>x = [], x : 任意[]
>x = [] : 不及[]
>x : 任意
>类型别名 :=> 任意
>[] : 不及[]
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5

    (x.push("hello"), x).push(true);
>(x.push("hello"), x).push(true) : 数字
>类型别名 :=> 数字
>(x.push("hello"), x).push : (...items: 任意[]) => 数字
>(x.push("hello"), x) : 任意[]
>x.push("hello"), x : 任意[]
>x.push("hello") : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>"hello" : "hello"
>x : 任意[]
>push : (...items: 任意[]) => 数字
>true : 为真
>类型别名 :=> 为真

    ((x))[3] = { a: 1 };
>((x))[3] = { a: 1 } : { a: 数字; }
>((x))[3] : 任意
>类型别名 :=> 任意
>((x)) : 任意[]
>(x) : 任意[]
>x : 任意[]
>3 : 3
>{ a: 1 } : { a: 数字; }
>a : 数字
>类型别名 :=> 数字
>1 : 1

    return x;  // (string | number | boolean | { a: number })[]
>x : (文字 | 数字 | 真假 | { a: 数字; })[]
}

function f17() {
>f17 : () => (文字 | 数字 | 真假)[]

    let x = [];
>x : 任意[]
>[] : 不及[]

    x.unshift(5);
>x.unshift(5) : 数字
>类型别名 :=> 数字
>x.unshift : (...items: 任意[]) => 数字
>x : 任意[]
>unshift : (...items: 任意[]) => 数字
>5 : 5

    x.unshift("hello");
>x.unshift("hello") : 数字
>类型别名 :=> 数字
>x.unshift : (...items: 任意[]) => 数字
>x : 任意[]
>unshift : (...items: 任意[]) => 数字
>"hello" : "hello"

    x.unshift(true);
>x.unshift(true) : 数字
>类型别名 :=> 数字
>x.unshift : (...items: 任意[]) => 数字
>x : 任意[]
>unshift : (...items: 任意[]) => 数字
>true : 为真
>类型别名 :=> 为真

    return x;  // (string | number | boolean)[]
>x : (文字 | 数字 | 真假)[]
}

function f18() {
>f18 : () => (文字 | 数字 | 真假)[]

    let x = [];
>x : 任意[]
>[] : 不及[]

    x.push(5);
>x.push(5) : 数字
>类型别名 :=> 数字
>x.push : (...items: 任意[]) => 数字
>x : 任意[]
>push : (...items: 任意[]) => 数字
>5 : 5

    x.unshift("hello");
>x.unshift("hello") : 数字
>类型别名 :=> 数字
>x.unshift : (...items: 任意[]) => 数字
>x : 任意[]
>unshift : (...items: 任意[]) => 数字
>"hello" : "hello"

    x[2] = true;
>x[2] = true : 为真
>类型别名 :=> 为真
>x[2] : 任意
>类型别名 :=> 任意
>x : 任意[]
>2 : 2
>true : 为真
>类型别名 :=> 为真

    return x;  // (string | number | boolean)[]
>x : (文字 | 数字 | 真假)[]
}
