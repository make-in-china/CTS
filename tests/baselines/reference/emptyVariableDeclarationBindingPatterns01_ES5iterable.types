=== tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns01_ES5iterable.ts ===
(function () {
>(function () {    var a: any;    var {} = a;    let {} = a;    const {} = a;    var [] = a;    let [] = a;    const [] = a;    var {} = a, [] = a;    let {} = a, [] = a;    const {} = a, [] = a;    var { p1: {}, p2: [] } = a;    let { p1: {}, p2: [] } = a;    const { p1: {}, p2: [] } = a;    for (var {} = {}, {} = {}; false; void 0) {    }    function f({} = a, [] = a, { p: {} = a} = a) {        return ({} = a, [] = a, { p: {} = a } = a) => a;    }})() : void
>类型别名 :=> 无值
>(function () {    var a: any;    var {} = a;    let {} = a;    const {} = a;    var [] = a;    let [] = a;    const [] = a;    var {} = a, [] = a;    let {} = a, [] = a;    const {} = a, [] = a;    var { p1: {}, p2: [] } = a;    let { p1: {}, p2: [] } = a;    const { p1: {}, p2: [] } = a;    for (var {} = {}, {} = {}; false; void 0) {    }    function f({} = a, [] = a, { p: {} = a} = a) {        return ({} = a, [] = a, { p: {} = a } = a) => a;    }}) : () => void
>function () {    var a: any;    var {} = a;    let {} = a;    const {} = a;    var [] = a;    let [] = a;    const [] = a;    var {} = a, [] = a;    let {} = a, [] = a;    const {} = a, [] = a;    var { p1: {}, p2: [] } = a;    let { p1: {}, p2: [] } = a;    const { p1: {}, p2: [] } = a;    for (var {} = {}, {} = {}; false; void 0) {    }    function f({} = a, [] = a, { p: {} = a} = a) {        return ({} = a, [] = a, { p: {} = a } = a) => a;    }} : () => void

    var a: any;
>a : any
>类型别名 :=> 任意

    var {} = a;
>a : any
>类型别名 :=> 任意

    let {} = a;
>a : any
>类型别名 :=> 任意

    const {} = a;
>a : any
>类型别名 :=> 任意

    var [] = a;
>a : any
>类型别名 :=> 任意

    let [] = a;
>a : any
>类型别名 :=> 任意

    const [] = a;
>a : any
>类型别名 :=> 任意

    var {} = a, [] = a;
>a : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

    let {} = a, [] = a;
>a : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

    const {} = a, [] = a;
>a : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

    var { p1: {}, p2: [] } = a;
>p1 : any
>类型别名 :=> 任意
>p2 : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

    let { p1: {}, p2: [] } = a;
>p1 : any
>类型别名 :=> 任意
>p2 : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

    const { p1: {}, p2: [] } = a;
>p1 : any
>类型别名 :=> 任意
>p2 : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

    for (var {} = {}, {} = {}; false; void 0) {
>{} : {}
>{} : {}
>false : false
>类型别名 :=> 为假
>void 0 : undefined
>类型别名 :=> 未定
>0 : 0
    }

    function f({} = a, [] = a, { p: {} = a} = a) {
>f : ({}?: any, []?: any, { p: {} }?: any) => ({}?: any, []?: any, { p: {} }?: any) => any
>a : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意

        return ({} = a, [] = a, { p: {} = a } = a) => a;
>({} = a, [] = a, { p: {} = a } = a) => a : ({}?: any, []?: any, { p: {} }?: any) => any
>a : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>p : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
    }
})();

(function () {
>(function () {    const ns: number[][] = [];    for (var {} of ns) {    }    for (let {} of ns) {    }    for (const {} of ns) {    }    for (var [] of ns) {    }    for (let [] of ns) {    }    for (const [] of ns) {    }})() : void
>类型别名 :=> 无值
>(function () {    const ns: number[][] = [];    for (var {} of ns) {    }    for (let {} of ns) {    }    for (const {} of ns) {    }    for (var [] of ns) {    }    for (let [] of ns) {    }    for (const [] of ns) {    }}) : () => void
>function () {    const ns: number[][] = [];    for (var {} of ns) {    }    for (let {} of ns) {    }    for (const {} of ns) {    }    for (var [] of ns) {    }    for (let [] of ns) {    }    for (const [] of ns) {    }} : () => void

    const ns: number[][] = [];
>ns : number[][]
>[] : undefined[]

    for (var {} of ns) {
>ns : number[][]
    }

    for (let {} of ns) {
>ns : number[][]
    }

    for (const {} of ns) {
>ns : number[][]
    }

    for (var [] of ns) {
>ns : number[][]
    }

    for (let [] of ns) {
>ns : number[][]
    }

    for (const [] of ns) {
>ns : number[][]
    }
})();
