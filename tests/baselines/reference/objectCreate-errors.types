=== tests/cases/compiler/objectCreate-errors.ts ===
var e1 = Object.create(1);               // Error
>e1 : 任意
>类型别名 :=> 任意
>Object.create(1) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>1 : 1

var e2 = Object.create("string");        // Error
>e2 : 任意
>类型别名 :=> 任意
>Object.create("string") : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>"string" : "string"

var e3 = Object.create(false);           // Error
>e3 : 任意
>类型别名 :=> 任意
>Object.create(false) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>false : 为假
>类型别名 :=> 为假

var e4 = Object.create(undefined);       // Error
>e4 : 任意
>类型别名 :=> 任意
>Object.create(undefined) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>undefined : 未定
>类型别名 :=> 未定

 
var e5 = Object.create(1, {});           // Error
>e5 : 任意
>类型别名 :=> 任意
>Object.create(1, {}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>1 : 1
>{} : {}

var e6 = Object.create("string", {});    // Error
>e6 : 任意
>类型别名 :=> 任意
>Object.create("string", {}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>"string" : "string"
>{} : {}

var e7 = Object.create(false, {});       // Error
>e7 : 任意
>类型别名 :=> 任意
>Object.create(false, {}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>false : 为假
>类型别名 :=> 为假
>{} : {}

var e8 = Object.create(undefined, {});   // Error
>e8 : 任意
>类型别名 :=> 任意
>Object.create(undefined, {}) : 任意
>类型别名 :=> 任意
>Object.create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>Object : ObjectConstructor
>create : { (o: 实例 | 空值): 任意; (o: 实例 | 空值, properties: PropertyDescriptorMap & ThisType<任意>): 任意; }
>undefined : 未定
>类型别名 :=> 未定
>{} : {}

