=== tests/cases/conformance/es6/spread/iteratorSpreadInCall9.ts ===
class Foo<T> {
>Foo : Foo<T>
>T : T

    constructor(...s: T[]) { }
>s : T[]
>T : T
}

class SymbolIterator {
>SymbolIterator : SymbolIterator

    next() {
>next : () => { value: 符号; done: 真假; }

        return {
>{            value: Symbol(),            done: false        } : { value: 符号; done: 真假; }

            value: Symbol(),
>value : 符号
>类型别名 :=> 符号
>Symbol() : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor

            done: false
>done : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号

        return this;
>this : 本体
    }
}

class StringIterator {
>StringIterator : StringIterator

    next() {
>next : () => { value: 文字; done: 真假; }

        return {
>{            value: "",            done: false        } : { value: 文字; done: 真假; }

            value: "",
>value : 文字
>类型别名 :=> 文字
>"" : ""

            done: false
>done : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : 符号
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : 符号
>类型别名 :=> 符号

        return this;
>this : 本体
    }
}

new Foo(...new SymbolIterator, ...[...new StringIterator]);
>new Foo(...new SymbolIterator, ...[...new StringIterator]) : Foo<任意>
>Foo : 类为 Foo
>...new SymbolIterator : 任意
>类型别名 :=> 任意
>new SymbolIterator : SymbolIterator
>SymbolIterator : 类为 SymbolIterator
>...[...new StringIterator] : 任意
>类型别名 :=> 任意
>[...new StringIterator] : 任意[]
>...new StringIterator : 任意
>类型别名 :=> 任意
>new StringIterator : StringIterator
>StringIterator : 类为 StringIterator

