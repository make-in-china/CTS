=== tests/cases/conformance/es6/spread/iteratorSpreadInCall9.ts ===
class Foo<T> {
>Foo : Foo<T>
>T : T

    constructor(...s: T[]) { }
>s : T[]
>T : T
}

class SymbolIterator {
>SymbolIterator : SymbolIterator

    next() {
>next : () => { value: symbol; done: boolean; }

        return {
>{            value: Symbol(),            done: false        } : { value: symbol; done: boolean; }

            value: Symbol(),
>value : symbol
>类型别名 :=> 符号
>Symbol() : symbol
>类型别名 :=> 符号
>Symbol : SymbolConstructor

            done: false
>done : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : symbol
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : symbol
>类型别名 :=> 符号

        return this;
>this : this
    }
}

class StringIterator {
>StringIterator : StringIterator

    next() {
>next : () => { value: string; done: boolean; }

        return {
>{            value: "",            done: false        } : { value: string; done: boolean; }

            value: "",
>value : string
>类型别名 :=> 文字
>"" : ""

            done: false
>done : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : symbol
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : symbol
>类型别名 :=> 符号

        return this;
>this : this
    }
}

new Foo(...new SymbolIterator, ...[...new StringIterator]);
>new Foo(...new SymbolIterator, ...[...new StringIterator]) : any
>类型别名 :=> 任意
>Foo : typeof Foo
>...new SymbolIterator : symbol
>类型别名 :=> 符号
>new SymbolIterator : SymbolIterator
>SymbolIterator : typeof SymbolIterator
>...[...new StringIterator] : string
>类型别名 :=> 文字
>[...new StringIterator] : string[]
>...new StringIterator : string
>类型别名 :=> 文字
>new StringIterator : StringIterator
>StringIterator : typeof StringIterator

