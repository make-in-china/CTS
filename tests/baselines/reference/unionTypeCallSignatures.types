=== tests/cases/conformance/types/union/unionTypeCallSignatures.ts ===
var numOrDate: number | Date;
>numOrDate : 数字 | Date
>Date : Date

var strOrBoolean: string | boolean;
>strOrBoolean : 文字 | 真假

var strOrNum: string | number;
>strOrNum : 文字 | 数字

// If each type in U has call signatures and the sets of call signatures are identical ignoring return types, 
// U has the same set of call signatures, but with return types that are unions of the return types of the respective call signatures from each type in U.
var unionOfDifferentReturnType: { (a: number): number; } | { (a: number): Date; };
>unionOfDifferentReturnType : ((a: 数字) => 数字) | ((a: 数字) => Date)
>a : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字
>Date : Date

numOrDate = unionOfDifferentReturnType(10);
>numOrDate = unionOfDifferentReturnType(10) : 数字 | Date
>numOrDate : 数字 | Date
>unionOfDifferentReturnType(10) : 数字 | Date
>unionOfDifferentReturnType : ((a: 数字) => 数字) | ((a: 数字) => Date)
>10 : 10

strOrBoolean = unionOfDifferentReturnType("hello"); // error 
>strOrBoolean = unionOfDifferentReturnType("hello") : 任意
>类型别名 :=> 任意
>strOrBoolean : 文字 | 真假
>unionOfDifferentReturnType("hello") : 任意
>类型别名 :=> 任意
>unionOfDifferentReturnType : ((a: 数字) => 数字) | ((a: 数字) => Date)
>"hello" : "hello"

unionOfDifferentReturnType1(true); // error in type of parameter
>unionOfDifferentReturnType1(true) : 任意
>类型别名 :=> 任意
>unionOfDifferentReturnType1 : { (a: 数字): 数字; (a: 文字): 文字; } | { (a: 数字): Date; (a: 文字): 真假; }
>true : 为真
>类型别名 :=> 为真

var unionOfDifferentReturnType1: { (a: number): number; (a: string): string; } | { (a: number): Date; (a: string): boolean; };
>unionOfDifferentReturnType1 : { (a: 数字): 数字; (a: 文字): 文字; } | { (a: 数字): Date; (a: 文字): 真假; }
>a : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字
>a : 数字
>类型别名 :=> 数字
>Date : Date
>a : 文字
>类型别名 :=> 文字

numOrDate = unionOfDifferentReturnType1(10);
>numOrDate = unionOfDifferentReturnType1(10) : 数字 | Date
>numOrDate : 数字 | Date
>unionOfDifferentReturnType1(10) : 数字 | Date
>unionOfDifferentReturnType1 : { (a: 数字): 数字; (a: 文字): 文字; } | { (a: 数字): Date; (a: 文字): 真假; }
>10 : 10

strOrBoolean = unionOfDifferentReturnType1("hello");
>strOrBoolean = unionOfDifferentReturnType1("hello") : 文字 | 真假
>strOrBoolean : 文字 | 真假
>unionOfDifferentReturnType1("hello") : 文字 | 真假
>unionOfDifferentReturnType1 : { (a: 数字): 数字; (a: 文字): 文字; } | { (a: 数字): Date; (a: 文字): 真假; }
>"hello" : "hello"

unionOfDifferentReturnType1(true); // error in type of parameter
>unionOfDifferentReturnType1(true) : 任意
>类型别名 :=> 任意
>unionOfDifferentReturnType1 : { (a: 数字): 数字; (a: 文字): 文字; } | { (a: 数字): Date; (a: 文字): 真假; }
>true : 为真
>类型别名 :=> 为真

unionOfDifferentReturnType1(); // error missing parameter
>unionOfDifferentReturnType1() : 任意
>类型别名 :=> 任意
>unionOfDifferentReturnType1 : { (a: 数字): 数字; (a: 文字): 文字; } | { (a: 数字): Date; (a: 文字): 真假; }

var unionOfDifferentParameterTypes: { (a: number): number; } | { (a: string): Date; };
>unionOfDifferentParameterTypes : ((a: 数字) => 数字) | ((a: 文字) => Date)
>a : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字
>Date : Date

unionOfDifferentParameterTypes(10);// error - no call signatures
>unionOfDifferentParameterTypes(10) : 任意
>类型别名 :=> 任意
>unionOfDifferentParameterTypes : ((a: 数字) => 数字) | ((a: 文字) => Date)
>10 : 10

unionOfDifferentParameterTypes("hello");// error - no call signatures
>unionOfDifferentParameterTypes("hello") : 任意
>类型别名 :=> 任意
>unionOfDifferentParameterTypes : ((a: 数字) => 数字) | ((a: 文字) => Date)
>"hello" : "hello"

unionOfDifferentParameterTypes();// error - no call signatures
>unionOfDifferentParameterTypes() : 任意
>类型别名 :=> 任意
>unionOfDifferentParameterTypes : ((a: 数字) => 数字) | ((a: 文字) => Date)

var unionOfDifferentNumberOfSignatures: { (a: number): number; } | { (a: number): Date; (a: string): boolean; };
>unionOfDifferentNumberOfSignatures : ((a: 数字) => 数字) | { (a: 数字): Date; (a: 文字): 真假; }
>a : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字
>Date : Date
>a : 文字
>类型别名 :=> 文字

unionOfDifferentNumberOfSignatures(); // error - no call signatures
>unionOfDifferentNumberOfSignatures() : 任意
>类型别名 :=> 任意
>unionOfDifferentNumberOfSignatures : ((a: 数字) => 数字) | { (a: 数字): Date; (a: 文字): 真假; }

unionOfDifferentNumberOfSignatures(10); // error - no call signatures
>unionOfDifferentNumberOfSignatures(10) : 数字 | Date
>unionOfDifferentNumberOfSignatures : ((a: 数字) => 数字) | { (a: 数字): Date; (a: 文字): 真假; }
>10 : 10

unionOfDifferentNumberOfSignatures("hello"); // error - no call signatures
>unionOfDifferentNumberOfSignatures("hello") : 任意
>类型别名 :=> 任意
>unionOfDifferentNumberOfSignatures : ((a: 数字) => 数字) | { (a: 数字): Date; (a: 文字): 真假; }
>"hello" : "hello"

var unionWithDifferentParameterCount: { (a: string): string; } | { (a: string, b: number): number; } ;
>unionWithDifferentParameterCount : ((a: 文字) => 文字) | ((a: 文字, b: 数字) => 数字)
>a : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字

unionWithDifferentParameterCount();// no  call signature
>unionWithDifferentParameterCount() : 任意
>类型别名 :=> 任意
>unionWithDifferentParameterCount : ((a: 文字) => 文字) | ((a: 文字, b: 数字) => 数字)

unionWithDifferentParameterCount("hello");// no  call signature
>unionWithDifferentParameterCount("hello") : 任意
>类型别名 :=> 任意
>unionWithDifferentParameterCount : ((a: 文字) => 文字) | ((a: 文字, b: 数字) => 数字)
>"hello" : "hello"

unionWithDifferentParameterCount("hello", 10);// no  call signature
>unionWithDifferentParameterCount("hello", 10) : 任意
>类型别名 :=> 任意
>unionWithDifferentParameterCount : ((a: 文字) => 文字) | ((a: 文字, b: 数字) => 数字)
>"hello" : "hello"
>10 : 10

var unionWithOptionalParameter1: { (a: string, b?: number): string; } | { (a: string, b?: number): number; };
>unionWithOptionalParameter1 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字, b?: 数字) => 数字)
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字

strOrNum = unionWithOptionalParameter1('hello');
>strOrNum = unionWithOptionalParameter1('hello') : 文字 | 数字
>strOrNum : 文字 | 数字
>unionWithOptionalParameter1('hello') : 文字 | 数字
>unionWithOptionalParameter1 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字, b?: 数字) => 数字)
>'hello' : "hello"

strOrNum = unionWithOptionalParameter1('hello', 10);
>strOrNum = unionWithOptionalParameter1('hello', 10) : 文字 | 数字
>strOrNum : 文字 | 数字
>unionWithOptionalParameter1('hello', 10) : 文字 | 数字
>unionWithOptionalParameter1 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字, b?: 数字) => 数字)
>'hello' : "hello"
>10 : 10

strOrNum = unionWithOptionalParameter1('hello', "hello"); // error in parameter type
>strOrNum = unionWithOptionalParameter1('hello', "hello") : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithOptionalParameter1('hello', "hello") : 任意
>类型别名 :=> 任意
>unionWithOptionalParameter1 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字, b?: 数字) => 数字)
>'hello' : "hello"
>"hello" : "hello"

strOrNum = unionWithOptionalParameter1(); // error
>strOrNum = unionWithOptionalParameter1() : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithOptionalParameter1() : 任意
>类型别名 :=> 任意
>unionWithOptionalParameter1 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字, b?: 数字) => 数字)

var unionWithOptionalParameter2: { (a: string, b?: number): string; } | { (a: string, b: number): number };
>unionWithOptionalParameter2 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字, b: 数字) => 数字)
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字

strOrNum = unionWithOptionalParameter2('hello'); // error no call signature
>strOrNum = unionWithOptionalParameter2('hello') : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithOptionalParameter2('hello') : 任意
>类型别名 :=> 任意
>unionWithOptionalParameter2 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字, b: 数字) => 数字)
>'hello' : "hello"

strOrNum = unionWithOptionalParameter2('hello', 10); // error no call signature
>strOrNum = unionWithOptionalParameter2('hello', 10) : 文字 | 数字
>strOrNum : 文字 | 数字
>unionWithOptionalParameter2('hello', 10) : 文字 | 数字
>unionWithOptionalParameter2 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字, b: 数字) => 数字)
>'hello' : "hello"
>10 : 10

strOrNum = unionWithOptionalParameter2('hello', "hello"); // error no call signature
>strOrNum = unionWithOptionalParameter2('hello', "hello") : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithOptionalParameter2('hello', "hello") : 任意
>类型别名 :=> 任意
>unionWithOptionalParameter2 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字, b: 数字) => 数字)
>'hello' : "hello"
>"hello" : "hello"

strOrNum = unionWithOptionalParameter2(); // error no call signature
>strOrNum = unionWithOptionalParameter2() : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithOptionalParameter2() : 任意
>类型别名 :=> 任意
>unionWithOptionalParameter2 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字, b: 数字) => 数字)

var unionWithOptionalParameter3: { (a: string, b?: number): string; } | { (a: string): number; };
>unionWithOptionalParameter3 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字) => 数字)
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字
>a : 文字
>类型别名 :=> 文字

strOrNum = unionWithOptionalParameter3('hello');
>strOrNum = unionWithOptionalParameter3('hello') : 文字 | 数字
>strOrNum : 文字 | 数字
>unionWithOptionalParameter3('hello') : 文字 | 数字
>unionWithOptionalParameter3 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字) => 数字)
>'hello' : "hello"

strOrNum = unionWithOptionalParameter3('hello', 10); // error no call signature
>strOrNum = unionWithOptionalParameter3('hello', 10) : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithOptionalParameter3('hello', 10) : 任意
>类型别名 :=> 任意
>unionWithOptionalParameter3 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字) => 数字)
>'hello' : "hello"
>10 : 10

strOrNum = unionWithOptionalParameter3('hello', "hello"); // error no call signature
>strOrNum = unionWithOptionalParameter3('hello', "hello") : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithOptionalParameter3('hello', "hello") : 任意
>类型别名 :=> 任意
>unionWithOptionalParameter3 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字) => 数字)
>'hello' : "hello"
>"hello" : "hello"

strOrNum = unionWithOptionalParameter3(); // error no call signature
>strOrNum = unionWithOptionalParameter3() : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithOptionalParameter3() : 任意
>类型别名 :=> 任意
>unionWithOptionalParameter3 : ((a: 文字, b?: 数字) => 文字) | ((a: 文字) => 数字)

var unionWithRestParameter1: { (a: string, ...b: number[]): string; } | { (a: string, ...b: number[]): number };
>unionWithRestParameter1 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, ...b: 数字[]) => 数字)
>a : 文字
>类型别名 :=> 文字
>b : 数字[]
>a : 文字
>类型别名 :=> 文字
>b : 数字[]

strOrNum = unionWithRestParameter1('hello');
>strOrNum = unionWithRestParameter1('hello') : 文字 | 数字
>strOrNum : 文字 | 数字
>unionWithRestParameter1('hello') : 文字 | 数字
>unionWithRestParameter1 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, ...b: 数字[]) => 数字)
>'hello' : "hello"

strOrNum = unionWithRestParameter1('hello', 10);
>strOrNum = unionWithRestParameter1('hello', 10) : 文字 | 数字
>strOrNum : 文字 | 数字
>unionWithRestParameter1('hello', 10) : 文字 | 数字
>unionWithRestParameter1 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, ...b: 数字[]) => 数字)
>'hello' : "hello"
>10 : 10

strOrNum = unionWithRestParameter1('hello', 10, 11);
>strOrNum = unionWithRestParameter1('hello', 10, 11) : 文字 | 数字
>strOrNum : 文字 | 数字
>unionWithRestParameter1('hello', 10, 11) : 文字 | 数字
>unionWithRestParameter1 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, ...b: 数字[]) => 数字)
>'hello' : "hello"
>10 : 10
>11 : 11

strOrNum = unionWithRestParameter1('hello', "hello"); // error in parameter type
>strOrNum = unionWithRestParameter1('hello', "hello") : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter1('hello', "hello") : 任意
>类型别名 :=> 任意
>unionWithRestParameter1 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, ...b: 数字[]) => 数字)
>'hello' : "hello"
>"hello" : "hello"

strOrNum = unionWithRestParameter1(); // error
>strOrNum = unionWithRestParameter1() : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter1() : 任意
>类型别名 :=> 任意
>unionWithRestParameter1 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, ...b: 数字[]) => 数字)

var unionWithRestParameter2: { (a: string, ...b: number[]): string; } | { (a: string, b: number): number };
>unionWithRestParameter2 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, b: 数字) => 数字)
>a : 文字
>类型别名 :=> 文字
>b : 数字[]
>a : 文字
>类型别名 :=> 文字
>b : 数字
>类型别名 :=> 数字

strOrNum = unionWithRestParameter2('hello'); // error no call signature
>strOrNum = unionWithRestParameter2('hello') : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter2('hello') : 任意
>类型别名 :=> 任意
>unionWithRestParameter2 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, b: 数字) => 数字)
>'hello' : "hello"

strOrNum = unionWithRestParameter2('hello', 10); // error no call signature
>strOrNum = unionWithRestParameter2('hello', 10) : 文字 | 数字
>strOrNum : 文字 | 数字
>unionWithRestParameter2('hello', 10) : 文字 | 数字
>unionWithRestParameter2 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, b: 数字) => 数字)
>'hello' : "hello"
>10 : 10

strOrNum = unionWithRestParameter2('hello', 10, 11); // error no call signature
>strOrNum = unionWithRestParameter2('hello', 10, 11) : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter2('hello', 10, 11) : 任意
>类型别名 :=> 任意
>unionWithRestParameter2 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, b: 数字) => 数字)
>'hello' : "hello"
>10 : 10
>11 : 11

strOrNum = unionWithRestParameter2('hello', "hello"); // error no call signature
>strOrNum = unionWithRestParameter2('hello', "hello") : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter2('hello', "hello") : 任意
>类型别名 :=> 任意
>unionWithRestParameter2 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, b: 数字) => 数字)
>'hello' : "hello"
>"hello" : "hello"

strOrNum = unionWithRestParameter2(); // error no call signature
>strOrNum = unionWithRestParameter2() : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter2() : 任意
>类型别名 :=> 任意
>unionWithRestParameter2 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字, b: 数字) => 数字)

var unionWithRestParameter3: { (a: string, ...b: number[]): string; } | { (a: string): number };
>unionWithRestParameter3 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字) => 数字)
>a : 文字
>类型别名 :=> 文字
>b : 数字[]
>a : 文字
>类型别名 :=> 文字

strOrNum = unionWithRestParameter3('hello');
>strOrNum = unionWithRestParameter3('hello') : 文字 | 数字
>strOrNum : 文字 | 数字
>unionWithRestParameter3('hello') : 文字 | 数字
>unionWithRestParameter3 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字) => 数字)
>'hello' : "hello"

strOrNum = unionWithRestParameter3('hello', 10); // error no call signature
>strOrNum = unionWithRestParameter3('hello', 10) : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter3('hello', 10) : 任意
>类型别名 :=> 任意
>unionWithRestParameter3 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字) => 数字)
>'hello' : "hello"
>10 : 10

strOrNum = unionWithRestParameter3('hello', 10, 11); // error no call signature
>strOrNum = unionWithRestParameter3('hello', 10, 11) : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter3('hello', 10, 11) : 任意
>类型别名 :=> 任意
>unionWithRestParameter3 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字) => 数字)
>'hello' : "hello"
>10 : 10
>11 : 11

strOrNum = unionWithRestParameter3('hello', "hello"); // error no call signature
>strOrNum = unionWithRestParameter3('hello', "hello") : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter3('hello', "hello") : 任意
>类型别名 :=> 任意
>unionWithRestParameter3 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字) => 数字)
>'hello' : "hello"
>"hello" : "hello"

strOrNum = unionWithRestParameter3(); // error no call signature
>strOrNum = unionWithRestParameter3() : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter3() : 任意
>类型别名 :=> 任意
>unionWithRestParameter3 : ((a: 文字, ...b: 数字[]) => 文字) | ((a: 文字) => 数字)

var unionWithRestParameter4: { (...a: string[]): string; } | { (a: string, b: string): number; };
>unionWithRestParameter4 : ((...a: 文字[]) => 文字) | ((a: 文字, b: 文字) => 数字)
>a : 文字[]
>a : 文字
>类型别名 :=> 文字
>b : 文字
>类型别名 :=> 文字

strOrNum = unionWithRestParameter4("hello"); // error supplied parameters do not match any call signature
>strOrNum = unionWithRestParameter4("hello") : 任意
>类型别名 :=> 任意
>strOrNum : 文字 | 数字
>unionWithRestParameter4("hello") : 任意
>类型别名 :=> 任意
>unionWithRestParameter4 : ((...a: 文字[]) => 文字) | ((a: 文字, b: 文字) => 数字)
>"hello" : "hello"

strOrNum = unionWithRestParameter4("hello", "world");
>strOrNum = unionWithRestParameter4("hello", "world") : 文字 | 数字
>strOrNum : 文字 | 数字
>unionWithRestParameter4("hello", "world") : 文字 | 数字
>unionWithRestParameter4 : ((...a: 文字[]) => 文字) | ((a: 文字, b: 文字) => 数字)
>"hello" : "hello"
>"world" : "world"

