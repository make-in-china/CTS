=== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures4.ts ===
// checking subtype relations for function types as it relates to contextual signature instantiation

class Base { foo: string; }
>Base : Base
>foo : 文字
>类型别名 :=> 文字

class Derived extends Base { bar: string; }
>Derived : Derived
>Base : Base
>bar : 文字
>类型别名 :=> 文字

class Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>Derived : Derived
>baz : 文字
>类型别名 :=> 文字

class OtherDerived extends Base { bing: string; }
>OtherDerived : OtherDerived
>Base : Base
>bing : 文字
>类型别名 :=> 文字

declare function foo1(a: new <T>(x: T) => T[]);
>foo1 : { (a: 新建 <T>(x: T) => T[]): 任意; (a: 任意): 任意; }
>a : 新建 <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T

declare function foo1(a: any): any;
>foo1 : { (a: 新建 <T>(x: T) => T[]): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo2(a2: new <T>(x: T) => string[]);
>foo2 : { (a2: 新建 <T>(x: T) => 文字[]): 任意; (a: 任意): 任意; }
>a2 : 新建 <T>(x: T) => 文字[]
>T : T
>x : T
>T : T

declare function foo2(a: any): any;
>foo2 : { (a2: 新建 <T>(x: T) => 文字[]): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo3(a3: new <T>(x: T) => void);
>foo3 : { (a3: 新建 <T>(x: T) => 无值): 任意; (a: 任意): 任意; }
>a3 : 新建 <T>(x: T) => 无值
>T : T
>x : T
>T : T

declare function foo3(a: any): any;
>foo3 : { (a3: 新建 <T>(x: T) => 无值): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo4(a4: new <T, U>(x: T, y: U) => string);
>foo4 : { (a4: 新建 <T, U>(x: T, y: U) => 文字): 任意; (a: 任意): 任意; }
>a4 : 新建 <T, U>(x: T, y: U) => 文字
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U

declare function foo4(a: any): any;
>foo4 : { (a4: 新建 <T, U>(x: T, y: U) => 文字): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo5(a5: new <T, U>(x: new (arg: T) => U) => T);
>foo5 : { (a5: 新建 <T, U>(x: 新建 (arg: T) => U) => T): 任意; (a: 任意): 任意; }
>a5 : 新建 <T, U>(x: 新建 (arg: T) => U) => T
>T : T
>U : U
>x : 新建 (arg: T) => U
>arg : T
>T : T
>U : U
>T : T

declare function foo5(a: any): any;
>foo5 : { (a5: 新建 <T, U>(x: 新建 (arg: T) => U) => T): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo6(a6: new <T extends Base>(x: new (arg: T) => Derived) => T);
>foo6 : { (a6: 新建 <T 扩展 Base>(x: 新建 (arg: T) => Derived) => T): 任意; (a: 任意): 任意; }
>a6 : 新建 <T 扩展 Base>(x: 新建 (arg: T) => Derived) => T
>T : T
>Base : Base
>x : 新建 (arg: T) => Derived
>arg : T
>T : T
>Derived : Derived
>T : T

declare function foo6(a: any): any;
>foo6 : { (a6: 新建 <T 扩展 Base>(x: 新建 (arg: T) => Derived) => T): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo11(a11: new <T>(x: { foo: T }, y: { foo: T; bar: T }) => Base);
>foo11 : { (a11: 新建 <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base): 任意; (a: 任意): 任意; }
>a11 : 新建 <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
>T : T
>x : { foo: T; }
>foo : T
>T : T
>y : { foo: T; bar: T; }
>foo : T
>T : T
>bar : T
>T : T
>Base : Base

declare function foo11(a: any): any;
>foo11 : { (a11: 新建 <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo15(a15: new <T>(x: { a: T; b: T }) => T[]);
>foo15 : { (a15: 新建 <T>(x: { a: T; b: T; }) => T[]): 任意; (a: 任意): 任意; }
>a15 : 新建 <T>(x: { a: T; b: T; }) => T[]
>T : T
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
>T : T

declare function foo15(a: any): any;
>foo15 : { (a15: 新建 <T>(x: { a: T; b: T; }) => T[]): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo16(a16: new <T extends Base>(x: { a: T; b: T }) => T[]);
>foo16 : { (a16: 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]): 任意; (a: 任意): 任意; }
>a16 : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]
>T : T
>Base : Base
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
>T : T

declare function foo16(a: any): any;
>foo16 : { (a16: 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo17(a17: {
>foo17 : { (a17: { 新建 <T 扩展 Derived>(x: 新建 (a: T) => T): T[]; 新建 <T 扩展 Base>(x: 新建 (a: T) => T): T[]; }): 任意; (a: 任意): 任意; }
>a17 : { 新建 <T 扩展 Derived>(x: 新建 (a: T) => T): T[]; 新建 <T 扩展 Base>(x: 新建 (a: T) => T): T[]; }

    new <T extends Derived>(x: new (a: T) => T): T[];
>T : T
>Derived : Derived
>x : 新建 (a: T) => T
>a : T
>T : T
>T : T
>T : T

    new <T extends Base>(x: new (a: T) => T): T[];        
>T : T
>Base : Base
>x : 新建 (a: T) => T
>a : T
>T : T
>T : T
>T : T

});
declare function foo17(a: any): any;
>foo17 : { (a17: { 新建 <T 扩展 Derived>(x: 新建 (a: T) => T): T[]; 新建 <T 扩展 Base>(x: 新建 (a: T) => T): T[]; }): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

declare function foo18(a18: {
>foo18 : { (a18: { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }): 任意; (a: 任意): 任意; }
>a18 : { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }

    new (x: {
>x : { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }

        new <T extends Derived>(a: T): T;
>T : T
>Derived : Derived
>a : T
>T : T
>T : T

        new <T extends Base>(a: T): T;
>T : T
>Base : Base
>a : T
>T : T
>T : T

    }): any[];
    new (x: {
>x : { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }

        new <T extends Derived2>(a: T): T;
>T : T
>Derived2 : Derived2
>a : T
>T : T
>T : T

        new <T extends Base>(a: T): T;
>T : T
>Base : Base
>a : T
>T : T
>T : T

    }): any[];
});
declare function foo18(a: any): any;
>foo18 : { (a18: { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }): 任意; (a: 任意): 任意; }
>a : 任意
>类型别名 :=> 任意

var r1arg: new <T>(x: T) => T[];
>r1arg : 新建 <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T

var r1arg2: new <T>(x: T) => T[];
>r1arg2 : 新建 <T>(x: T) => T[]
>T : T
>x : T
>T : T
>T : T

var r1 = foo1(r1arg);
>r1 : 任意
>类型别名 :=> 任意
>foo1(r1arg) : 任意
>类型别名 :=> 任意
>foo1 : { (a: 新建 <T>(x: T) => T[]): 任意; (a: 任意): 任意; }
>r1arg : 新建 <T>(x: T) => T[]

var r1a = [r1arg, r1arg2];
>r1a : (新建 <T>(x: T) => T[])[]
>[r1arg, r1arg2] : (新建 <T>(x: T) => T[])[]
>r1arg : 新建 <T>(x: T) => T[]
>r1arg2 : 新建 <T>(x: T) => T[]

var r1b = [r1arg2, r1arg];
>r1b : (新建 <T>(x: T) => T[])[]
>[r1arg2, r1arg] : (新建 <T>(x: T) => T[])[]
>r1arg2 : 新建 <T>(x: T) => T[]
>r1arg : 新建 <T>(x: T) => T[]

var r2arg: new <T>(x: T) => string[];
>r2arg : 新建 <T>(x: T) => 文字[]
>T : T
>x : T
>T : T

var r2arg2: new <T>(x: T) => string[];
>r2arg2 : 新建 <T>(x: T) => 文字[]
>T : T
>x : T
>T : T

var r2 = foo2(r2arg);
>r2 : 任意
>类型别名 :=> 任意
>foo2(r2arg) : 任意
>类型别名 :=> 任意
>foo2 : { (a2: 新建 <T>(x: T) => 文字[]): 任意; (a: 任意): 任意; }
>r2arg : 新建 <T>(x: T) => 文字[]

var r2a = [r2arg, r2arg2];
>r2a : (新建 <T>(x: T) => 文字[])[]
>[r2arg, r2arg2] : (新建 <T>(x: T) => 文字[])[]
>r2arg : 新建 <T>(x: T) => 文字[]
>r2arg2 : 新建 <T>(x: T) => 文字[]

var r2b = [r2arg2, r2arg];
>r2b : (新建 <T>(x: T) => 文字[])[]
>[r2arg2, r2arg] : (新建 <T>(x: T) => 文字[])[]
>r2arg2 : 新建 <T>(x: T) => 文字[]
>r2arg : 新建 <T>(x: T) => 文字[]

var r3arg: new <T>(x: T) => T;
>r3arg : 新建 <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

var r3arg2: new <T>(x: T) => void;
>r3arg2 : 新建 <T>(x: T) => 无值
>T : T
>x : T
>T : T

var r3 = foo3(r3arg);
>r3 : 任意
>类型别名 :=> 任意
>foo3(r3arg) : 任意
>类型别名 :=> 任意
>foo3 : { (a3: 新建 <T>(x: T) => 无值): 任意; (a: 任意): 任意; }
>r3arg : 新建 <T>(x: T) => T

var r3a = [r3arg, r3arg2];
>r3a : (新建 <T>(x: T) => 无值)[]
>[r3arg, r3arg2] : (新建 <T>(x: T) => 无值)[]
>r3arg : 新建 <T>(x: T) => T
>r3arg2 : 新建 <T>(x: T) => 无值

var r3b = [r3arg2, r3arg];
>r3b : (新建 <T>(x: T) => 无值)[]
>[r3arg2, r3arg] : (新建 <T>(x: T) => 无值)[]
>r3arg2 : 新建 <T>(x: T) => 无值
>r3arg : 新建 <T>(x: T) => T

var r4arg: new <T, U>(x: T, y: U) => string;
>r4arg : 新建 <T, U>(x: T, y: U) => 文字
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U

var r4arg2: new <T, U>(x: T, y: U) => string;
>r4arg2 : 新建 <T, U>(x: T, y: U) => 文字
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U

var r4 = foo4(r4arg);
>r4 : 任意
>类型别名 :=> 任意
>foo4(r4arg) : 任意
>类型别名 :=> 任意
>foo4 : { (a4: 新建 <T, U>(x: T, y: U) => 文字): 任意; (a: 任意): 任意; }
>r4arg : 新建 <T, U>(x: T, y: U) => 文字

var r4a = [r4arg, r4arg2];
>r4a : (新建 <T, U>(x: T, y: U) => 文字)[]
>[r4arg, r4arg2] : (新建 <T, U>(x: T, y: U) => 文字)[]
>r4arg : 新建 <T, U>(x: T, y: U) => 文字
>r4arg2 : 新建 <T, U>(x: T, y: U) => 文字

var r4b = [r4arg2, r4arg];
>r4b : (新建 <T, U>(x: T, y: U) => 文字)[]
>[r4arg2, r4arg] : (新建 <T, U>(x: T, y: U) => 文字)[]
>r4arg2 : 新建 <T, U>(x: T, y: U) => 文字
>r4arg : 新建 <T, U>(x: T, y: U) => 文字

var r5arg: new <T, U>(x: new (arg: T) => U) => T;
>r5arg : 新建 <T, U>(x: 新建 (arg: T) => U) => T
>T : T
>U : U
>x : 新建 (arg: T) => U
>arg : T
>T : T
>U : U
>T : T

var r5arg2: new <T, U>(x: new (arg: T) => U) => T;
>r5arg2 : 新建 <T, U>(x: 新建 (arg: T) => U) => T
>T : T
>U : U
>x : 新建 (arg: T) => U
>arg : T
>T : T
>U : U
>T : T

var r5 = foo5(r5arg);
>r5 : 任意
>类型别名 :=> 任意
>foo5(r5arg) : 任意
>类型别名 :=> 任意
>foo5 : { (a5: 新建 <T, U>(x: 新建 (arg: T) => U) => T): 任意; (a: 任意): 任意; }
>r5arg : 新建 <T, U>(x: 新建 (arg: T) => U) => T

var r5a = [r5arg, r5arg2];
>r5a : (新建 <T, U>(x: 新建 (arg: T) => U) => T)[]
>[r5arg, r5arg2] : (新建 <T, U>(x: 新建 (arg: T) => U) => T)[]
>r5arg : 新建 <T, U>(x: 新建 (arg: T) => U) => T
>r5arg2 : 新建 <T, U>(x: 新建 (arg: T) => U) => T

var r5b = [r5arg2, r5arg];
>r5b : (新建 <T, U>(x: 新建 (arg: T) => U) => T)[]
>[r5arg2, r5arg] : (新建 <T, U>(x: 新建 (arg: T) => U) => T)[]
>r5arg2 : 新建 <T, U>(x: 新建 (arg: T) => U) => T
>r5arg : 新建 <T, U>(x: 新建 (arg: T) => U) => T

var r6arg: new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T;
>r6arg : 新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U) => T
>T : T
>Base : Base
>U : U
>Derived : Derived
>x : 新建 (arg: T) => U
>arg : T
>T : T
>U : U
>T : T

var r6arg2: new <T extends Base>(x: new (arg: T) => Derived) => T;
>r6arg2 : 新建 <T 扩展 Base>(x: 新建 (arg: T) => Derived) => T
>T : T
>Base : Base
>x : 新建 (arg: T) => Derived
>arg : T
>T : T
>Derived : Derived
>T : T

var r6 = foo6(r6arg);
>r6 : 任意
>类型别名 :=> 任意
>foo6(r6arg) : 任意
>类型别名 :=> 任意
>foo6 : { (a6: 新建 <T 扩展 Base>(x: 新建 (arg: T) => Derived) => T): 任意; (a: 任意): 任意; }
>r6arg : 新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U) => T

var r6a = [r6arg, r6arg2];
>r6a : (新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U) => T)[]
>[r6arg, r6arg2] : (新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U) => T)[]
>r6arg : 新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U) => T
>r6arg2 : 新建 <T 扩展 Base>(x: 新建 (arg: T) => Derived) => T

var r6b = [r6arg2, r6arg];
>r6b : (新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U) => T)[]
>[r6arg2, r6arg] : (新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U) => T)[]
>r6arg2 : 新建 <T 扩展 Base>(x: 新建 (arg: T) => Derived) => T
>r6arg : 新建 <T 扩展 Base, U 扩展 Derived>(x: 新建 (arg: T) => U) => T

var r11arg: new <T, U>(x: { foo: T }, y: { foo: U; bar: U }) => Base;
>r11arg : 新建 <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
>T : T
>U : U
>x : { foo: T; }
>foo : T
>T : T
>y : { foo: U; bar: U; }
>foo : U
>U : U
>bar : U
>U : U
>Base : Base

var r11arg2: new <T>(x: { foo: T }, y: { foo: T; bar: T }) => Base;
>r11arg2 : 新建 <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
>T : T
>x : { foo: T; }
>foo : T
>T : T
>y : { foo: T; bar: T; }
>foo : T
>T : T
>bar : T
>T : T
>Base : Base

var r11 = foo11(r11arg);
>r11 : 任意
>类型别名 :=> 任意
>foo11(r11arg) : 任意
>类型别名 :=> 任意
>foo11 : { (a11: 新建 <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base): 任意; (a: 任意): 任意; }
>r11arg : 新建 <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base

var r11a = [r11arg, r11arg2];
>r11a : (新建 <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base)[]
>[r11arg, r11arg2] : (新建 <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base)[]
>r11arg : 新建 <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
>r11arg2 : 新建 <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base

var r11b = [r11arg2, r11arg];
>r11b : (新建 <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base)[]
>[r11arg2, r11arg] : (新建 <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base)[]
>r11arg2 : 新建 <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
>r11arg : 新建 <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base

var r15arg: new <U, V>(x: { a: U; b: V; }) => U[];
>r15arg : 新建 <U, V>(x: { a: U; b: V; }) => U[]
>U : U
>V : V
>x : { a: U; b: V; }
>a : U
>U : U
>b : V
>V : V
>U : U

var r15arg2: new <T>(x: { a: T; b: T }) => T[];
>r15arg2 : 新建 <T>(x: { a: T; b: T; }) => T[]
>T : T
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
>T : T

var r15 = foo15(r15arg);
>r15 : 任意
>类型别名 :=> 任意
>foo15(r15arg) : 任意
>类型别名 :=> 任意
>foo15 : { (a15: 新建 <T>(x: { a: T; b: T; }) => T[]): 任意; (a: 任意): 任意; }
>r15arg : 新建 <U, V>(x: { a: U; b: V; }) => U[]

var r15a = [r15arg, r15arg2];
>r15a : (新建 <T>(x: { a: T; b: T; }) => T[])[]
>[r15arg, r15arg2] : (新建 <T>(x: { a: T; b: T; }) => T[])[]
>r15arg : 新建 <U, V>(x: { a: U; b: V; }) => U[]
>r15arg2 : 新建 <T>(x: { a: T; b: T; }) => T[]

var r15b = [r15arg2, r15arg];
>r15b : (新建 <T>(x: { a: T; b: T; }) => T[])[]
>[r15arg2, r15arg] : (新建 <T>(x: { a: T; b: T; }) => T[])[]
>r15arg2 : 新建 <T>(x: { a: T; b: T; }) => T[]
>r15arg : 新建 <U, V>(x: { a: U; b: V; }) => U[]

var r16arg: new <T extends Base>(x: { a: T; b: T }) => T[];
>r16arg : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]
>T : T
>Base : Base
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
>T : T

var r16arg2: new <T extends Base>(x: { a: T; b: T }) => T[];
>r16arg2 : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]
>T : T
>Base : Base
>x : { a: T; b: T; }
>a : T
>T : T
>b : T
>T : T
>T : T

var r16 = foo16(r16arg);
>r16 : 任意
>类型别名 :=> 任意
>foo16(r16arg) : 任意
>类型别名 :=> 任意
>foo16 : { (a16: 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]): 任意; (a: 任意): 任意; }
>r16arg : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]

var r16a = [r16arg, r16arg2];
>r16a : (新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[])[]
>[r16arg, r16arg2] : (新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[])[]
>r16arg : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]
>r16arg2 : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]

var r16b = [r16arg2, r16arg];
>r16b : (新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[])[]
>[r16arg2, r16arg] : (新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[])[]
>r16arg2 : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]
>r16arg : 新建 <T 扩展 Base>(x: { a: T; b: T; }) => T[]

var r17arg: new <T>(x: new (a: T) => T) => T[];
>r17arg : 新建 <T>(x: 新建 (a: T) => T) => T[]
>T : T
>x : 新建 (a: T) => T
>a : T
>T : T
>T : T
>T : T

var r17 = foo17(r17arg);
>r17 : 任意
>类型别名 :=> 任意
>foo17(r17arg) : 任意
>类型别名 :=> 任意
>foo17 : { (a17: { 新建 <T 扩展 Derived>(x: 新建 (a: T) => T): T[]; 新建 <T 扩展 Base>(x: 新建 (a: T) => T): T[]; }): 任意; (a: 任意): 任意; }
>r17arg : 新建 <T>(x: 新建 (a: T) => T) => T[]

var r18arg: new (x: new <T>(a: T) => T) => any[];
>r18arg : 新建 (x: 新建 <T>(a: T) => T) => 任意[]
>x : 新建 <T>(a: T) => T
>T : T
>a : T
>T : T
>T : T

var r18 = foo18(r18arg);
>r18 : 任意
>类型别名 :=> 任意
>foo18(r18arg) : 任意
>类型别名 :=> 任意
>foo18 : { (a18: { 新建 (x: { 新建 <T 扩展 Derived>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; 新建 (x: { 新建 <T 扩展 Derived2>(a: T): T; 新建 <T 扩展 Base>(a: T): T; }): 任意[]; }): 任意; (a: 任意): 任意; }
>r18arg : 新建 (x: 新建 <T>(a: T) => T) => 任意[]

