=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments2.ts ===
// Generic functions used as arguments for function typed parameters are not used to make inferences from
// Using construct signature arguments, no errors expected

function foo<T>(x: new(a: T) => T) {
>foo : <T>(x: 新建 (a: T) => T) => T
>T : T
>x : 新建 (a: T) => T
>a : T
>T : T
>T : T

    return new x(null);
>new x(null) : T
>x : 新建 (a: T) => T
>null : 空值
>类型别名 :=> 空值
}

interface I {
>I : I

    new <T>(x: T): T;
>T : T
>x : T
>T : T
>T : T
}
interface I2<T> {
>I2 : I2<T>
>T : T

    new (x: T): T;
>x : T
>T : T
>T : T
}
var i: I;
>i : I
>I : I

var i2: I2<string>;
>i2 : I2<文字>
>I2 : I2<T>

var a: {
>a : 新建 <T>(x: T) => T

    new <T>(x: T): T;
>T : T
>x : T
>T : T
>T : T
}

var r = foo(i); // any
>r : 任意
>类型别名 :=> 任意
>foo(i) : 任意
>类型别名 :=> 任意
>foo : <T>(x: 新建 (a: T) => T) => T
>i : I

var r2 = foo<string>(i); // string 
>r2 : 文字
>类型别名 :=> 文字
>foo<string>(i) : 文字
>类型别名 :=> 文字
>foo : <T>(x: 新建 (a: T) => T) => T
>i : I

var r3 = foo(i2); // string
>r3 : 文字
>类型别名 :=> 文字
>foo(i2) : 文字
>类型别名 :=> 文字
>foo : <T>(x: 新建 (a: T) => T) => T
>i2 : I2<文字>

var r3b = foo(a); // any
>r3b : 任意
>类型别名 :=> 任意
>foo(a) : 任意
>类型别名 :=> 任意
>foo : <T>(x: 新建 (a: T) => T) => T
>a : 新建 <T>(x: T) => T

function foo2<T, U>(x: T, cb: new(a: T) => U) {
>foo2 : <T, U>(x: T, cb: 新建 (a: T) => U) => U
>T : T
>U : U
>x : T
>T : T
>cb : 新建 (a: T) => U
>a : T
>T : T
>U : U

    return new cb(x);
>new cb(x) : U
>cb : 新建 (a: T) => U
>x : T
}

var r4 = foo2(1, i2); // error
>r4 : 任意
>类型别名 :=> 任意
>foo2(1, i2) : 任意
>类型别名 :=> 任意
>foo2 : <T, U>(x: T, cb: 新建 (a: T) => U) => U
>1 : 1
>i2 : I2<文字>

var r4b = foo2(1, a); // any
>r4b : 任意
>类型别名 :=> 任意
>foo2(1, a) : 任意
>类型别名 :=> 任意
>foo2 : <T, U>(x: T, cb: 新建 (a: T) => U) => U
>1 : 1
>a : 新建 <T>(x: T) => T

var r5 = foo2(1, i); // any
>r5 : 任意
>类型别名 :=> 任意
>foo2(1, i) : 任意
>类型别名 :=> 任意
>foo2 : <T, U>(x: T, cb: 新建 (a: T) => U) => U
>1 : 1
>i : I

var r6 = foo2<string, string>('', i2); // string
>r6 : 文字
>类型别名 :=> 文字
>foo2<string, string>('', i2) : 文字
>类型别名 :=> 文字
>foo2 : <T, U>(x: T, cb: 新建 (a: T) => U) => U
>'' : ""
>i2 : I2<文字>

function foo3<T, U>(x: T, cb: new(a: T) => U, y: U) {
>foo3 : <T, U>(x: T, cb: 新建 (a: T) => U, y: U) => U
>T : T
>U : U
>x : T
>T : T
>cb : 新建 (a: T) => U
>a : T
>T : T
>U : U
>y : U
>U : U

    return new cb(x);
>new cb(x) : U
>cb : 新建 (a: T) => U
>x : T
}

var r7 = foo3(null, i, ''); // any
>r7 : 任意
>类型别名 :=> 任意
>foo3(null, i, '') : 任意
>类型别名 :=> 任意
>foo3 : <T, U>(x: T, cb: 新建 (a: T) => U, y: U) => U
>null : 空值
>类型别名 :=> 空值
>i : I
>'' : ""

var r7b = foo3(null, a, ''); // any
>r7b : 任意
>类型别名 :=> 任意
>foo3(null, a, '') : 任意
>类型别名 :=> 任意
>foo3 : <T, U>(x: T, cb: 新建 (a: T) => U, y: U) => U
>null : 空值
>类型别名 :=> 空值
>a : 新建 <T>(x: T) => T
>'' : ""

var r8 = foo3(1, i2, 1); // error
>r8 : 任意
>类型别名 :=> 任意
>foo3(1, i2, 1) : 任意
>类型别名 :=> 任意
>foo3 : <T, U>(x: T, cb: 新建 (a: T) => U, y: U) => U
>1 : 1
>i2 : I2<文字>
>1 : 1

var r9 = foo3<string, string>('', i2, ''); // string
>r9 : 文字
>类型别名 :=> 文字
>foo3<string, string>('', i2, '') : 文字
>类型别名 :=> 文字
>foo3 : <T, U>(x: T, cb: 新建 (a: T) => U, y: U) => U
>'' : ""
>i2 : I2<文字>
>'' : ""

