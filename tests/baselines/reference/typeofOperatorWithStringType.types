=== tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithStringType.ts ===
// typeof  operator on string type
var STRING: string;
>STRING : 文字
>类型别名 :=> 文字

var STRING1: string[] = ["", "abc"];
>STRING1 : 文字[]
>["", "abc"] : 文字[]
>"" : ""
>"abc" : "abc"

function foo(): string { return "abc"; }
>foo : () => 文字
>"abc" : "abc"

class A {
>A : A

    public a: string;
>a : 文字
>类型别名 :=> 文字

    static foo() { return ""; }
>foo : () => 文字
>"" : ""
}
module M {
>M : 类为 M

    export var n: string;
>n : 文字
>类型别名 :=> 文字
}

var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// string type var
var ResultIsString1 = typeof STRING;
>ResultIsString1 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof STRING : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>STRING : 文字
>类型别名 :=> 文字

var ResultIsString2 = typeof STRING1;
>ResultIsString2 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof STRING1 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>STRING1 : 文字[]

// string type literal
var ResultIsString3 = typeof "";
>ResultIsString3 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof "" : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>"" : ""

var ResultIsString4 = typeof { x: "", y: "" };
>ResultIsString4 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof { x: "", y: "" } : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>{ x: "", y: "" } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : 文字
>类型别名 :=> 文字
>"" : ""

var ResultIsString5 = typeof { x: "", y: (s: string) => { return s; } };
>ResultIsString5 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof { x: "", y: (s: string) => { return s; } } : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>{ x: "", y: (s: string) => { return s; } } : { x: 文字; y: (s: 文字) => 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : (s: 文字) => 文字
>(s: string) => { return s; } : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

// string type expressions
var ResultIsString6 = typeof objA.a;
>ResultIsString6 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof objA.a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字

var ResultIsString7 = typeof M.n;
>ResultIsString7 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof M.n : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

var ResultIsString8 = typeof STRING1[0];
>ResultIsString8 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof STRING1[0] : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>STRING1[0] : 文字
>类型别名 :=> 文字
>STRING1 : 文字[]
>0 : 0

var ResultIsString9 = typeof foo();
>ResultIsString9 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof foo() : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>foo() : 文字
>类型别名 :=> 文字
>foo : () => 文字

var ResultIsString10 = typeof A.foo();
>ResultIsString10 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof A.foo() : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>A.foo() : 文字
>类型别名 :=> 文字
>A.foo : () => 文字
>A : 类为 A
>foo : () => 文字

var ResultIsString11 = typeof (STRING + STRING);
>ResultIsString11 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof (STRING + STRING) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>(STRING + STRING) : 文字
>类型别名 :=> 文字
>STRING + STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字

var ResultIsString12 = typeof STRING.charAt(0);
>ResultIsString12 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof STRING.charAt(0) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>STRING.charAt(0) : 文字
>类型别名 :=> 文字
>STRING.charAt : (pos: 数字) => 文字
>STRING : 文字
>类型别名 :=> 文字
>charAt : (pos: 数字) => 文字
>0 : 0

// multiple typeof  operators
var ResultIsString13 = typeof typeof STRING;
>ResultIsString13 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof typeof STRING : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof STRING : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>STRING : 文字
>类型别名 :=> 文字

var ResultIsString14 = typeof typeof typeof (STRING + STRING);
>ResultIsString14 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof typeof typeof (STRING + STRING) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof typeof (STRING + STRING) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>typeof (STRING + STRING) : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>(STRING + STRING) : 文字
>类型别名 :=> 文字
>STRING + STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字

// miss assignment operators
typeof "";
>typeof "" : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>"" : ""

typeof STRING;
>typeof STRING : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>STRING : 文字
>类型别名 :=> 文字

typeof STRING1;
>typeof STRING1 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>STRING1 : 文字[]

typeof foo();
>typeof foo() : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>foo() : 文字
>类型别名 :=> 文字
>foo : () => 文字

typeof objA.a, M.n;
>typeof objA.a, M.n : 文字
>类型别名 :=> 文字
>typeof objA.a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

// use typeof in type query
var z: string;
>z : 文字
>类型别名 :=> 文字

var x: string[];
>x : 文字[]

var r: () => string;
>r : () => 文字

z: typeof STRING;
>z : 任意
>类型别名 :=> 任意
>typeof STRING : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>STRING : 文字
>类型别名 :=> 文字

x: typeof STRING1;
>x : 任意
>类型别名 :=> 任意
>typeof STRING1 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>STRING1 : 文字[]

r: typeof foo;
>r : 任意
>类型别名 :=> 任意
>typeof foo : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>foo : () => 文字

var y = { a: "", b: "" };
>y : { a: 文字; b: 文字; }
>{ a: "", b: "" } : { a: 文字; b: 文字; }
>a : 文字
>类型别名 :=> 文字
>"" : ""
>b : 文字
>类型别名 :=> 文字
>"" : ""

z: typeof y.a;
>z : 任意
>类型别名 :=> 任意
>typeof y.a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>y.a : 文字
>类型别名 :=> 文字
>y : { a: 文字; b: 文字; }
>a : 文字
>类型别名 :=> 文字

z: typeof objA.a;
>z : 任意
>类型别名 :=> 任意
>typeof objA.a : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字

z: typeof A.foo;
>z : 任意
>类型别名 :=> 任意
>typeof A.foo : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>A.foo : () => 文字
>A : 类为 A
>foo : () => 文字

z: typeof M.n;
>z : 任意
>类型别名 :=> 任意
>typeof M.n : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

