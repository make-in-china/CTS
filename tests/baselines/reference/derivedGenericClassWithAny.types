=== tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedGenericClassWithAny.ts ===
class C<T extends number> {
>C : C<T>
>T : T

    x: T;
>x : T
>T : T

    get X(): T { return null; }
>X : T
>T : T
>null : 空值
>类型别名 :=> 空值

    foo(): T {
>foo : () => T
>T : T

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}

class D extends C<number> {
>D : D
>C : C<数字>

    x: any;
>x : 任意
>类型别名 :=> 任意

    get X(): any {
>X : 任意
>类型别名 :=> 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
    foo(): any {
>foo : () => 任意

        return 1;
>1 : 1
    }

    static y: any;
>y : 任意
>类型别名 :=> 任意

    static get Y(): any {
>Y : 任意
>类型别名 :=> 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
    static bar(): any {
>bar : () => 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}

// if D is a valid class definition than E is now not safe tranisitively through C
class E<T extends string> extends D {
>E : E<T>
>T : T
>D : D

    x: T;
>x : T
>T : T

    get X(): T { return ''; } // error
>X : T
>T : T
>'' : ""

    foo(): T {
>foo : () => T
>T : T

        return ''; // error
>'' : ""
    }
}

var c: C<number>;
>c : C<数字>
>C : C<T>

var d: D;
>d : D
>D : D

var e: E<string>;
>e : E<文字>
>E : E<T>

c = d;
>c = d : D
>c : C<数字>
>d : D

c = e;
>c = e : E<文字>
>c : C<数字>
>e : E<文字>

var r = c.foo(); // e.foo would return string
>r : 数字
>类型别名 :=> 数字
>c.foo() : 数字
>类型别名 :=> 数字
>c.foo : () => 数字
>c : C<数字>
>foo : () => 数字

