=== tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment1ES6.ts ===
/* AssignmentPattern:
 *      ObjectAssignmentPattern
 *      ArrayAssignmentPattern
 * ArrayAssignmentPattern:
 *      [Elision<opt>   AssignmentRestElementopt   ]
 *      [AssignmentElementList]
 *      [AssignmentElementList, Elision<opt>   AssignmentRestElementopt   ]
 * AssignmentElementList:
 *      Elision<opt>   AssignmentElement
 *      AssignmentElementList, Elisionopt   AssignmentElement
 * AssignmentElement:
 *      LeftHandSideExpression   Initialiseropt
 *      AssignmentPattern   Initialiseropt
 * AssignmentRestElement:
 *      ...   LeftHandSideExpression
 */

// In a destructuring assignment expression, the type of the expression on the right must be assignable to the assignment target on the left.
// An expression of type S is considered assignable to an assignment target V if one of the following is true

// V is an array assignment pattern, S is the type Any or an array-like type (section 3.3.2), and, for each assignment element E in V,
//      S is the type Any, or

var [a0, a1]: any = undefined;
>a0 : 任意
>类型别名 :=> 任意
>a1 : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

var [a2 = false, a3 = 1]: any = undefined;
>a2 : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
>a3 : 任意
>类型别名 :=> 任意
>1 : 1
>undefined : 未定
>类型别名 :=> 未定

// V is an array assignment pattern, S is the type Any or an array-like type (section 3.3.2), and, for each assignment element E in V,
//      S is a tuple- like type (section 3.3.3) with a property named N of a type that is assignable to the target given in E,
//        where N is the numeric index of E in the array assignment pattern, or
var [b0, b1, b2] = [2, 3, 4];
>b0 : 数字
>类型别名 :=> 数字
>b1 : 数字
>类型别名 :=> 数字
>b2 : 数字
>类型别名 :=> 数字
>[2, 3, 4] : [数字, 数字, 数字]
>2 : 2
>3 : 3
>4 : 4

var [b3, b4, b5]: [number, number, string] = [1, 2, "string"];
>b3 : 数字
>类型别名 :=> 数字
>b4 : 数字
>类型别名 :=> 数字
>b5 : 文字
>类型别名 :=> 文字
>[1, 2, "string"] : [数字, 数字, 文字]
>1 : 1
>2 : 2
>"string" : "string"

function foo() {
>foo : () => 数字[]

    return [1, 2, 3];
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
}

var [b6, b7] = foo();
>b6 : 任意
>类型别名 :=> 任意
>b7 : 任意
>类型别名 :=> 任意
>foo() : 数字[]
>foo : () => 数字[]

var [...b8] = foo();
>b8 : 任意[]
>foo() : 数字[]
>foo : () => 数字[]

//      S is not a tuple- like type and the numeric index signature type of S is assignable to the target given in E.
var temp = [1,2,3]
>temp : 数字[]
>[1,2,3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

var [c0, c1] = [...temp];
>c0 : 任意
>类型别名 :=> 任意
>c1 : 任意
>类型别名 :=> 任意
>[...temp] : 任意[]
>...temp : 任意
>类型别名 :=> 任意
>temp : 数字[]

var [c2] = [];
>c2 : 任意
>类型别名 :=> 任意
>[] : [任意]

var [[[c3]], [[[[c4]]]]] = [[[]], [[[[]]]]]
>c3 : 任意
>类型别名 :=> 任意
>c4 : 任意
>类型别名 :=> 任意
>[[[]], [[[[]]]]] : [[[任意]], [[[[任意]]]]]
>[[]] : [[任意]]
>[] : [任意]
>[[[[]]]] : [[[[任意]]]]
>[[[]]] : [[[任意]]]
>[[]] : [[任意]]
>[] : [任意]

var [[c5], c6]: [[string|number], boolean] = [[1], true];
>c5 : 文字 | 数字
>c6 : 真假
>类型别名 :=> 真假
>[[1], true] : [[数字], 为真]
>[1] : [数字]
>1 : 1
>true : 为真
>类型别名 :=> 为真

var [, c7] = [1, 2, 3];
> : 未定
>类型别名 :=> 未定
>c7 : 数字
>类型别名 :=> 数字
>[1, 2, 3] : [数字, 数字, 数字]
>1 : 1
>2 : 2
>3 : 3

var [,,, c8] = [1, 2, 3, 4];
> : 未定
>类型别名 :=> 未定
> : 未定
>类型别名 :=> 未定
> : 未定
>类型别名 :=> 未定
>c8 : 数字
>类型别名 :=> 数字
>[1, 2, 3, 4] : [数字, 数字, 数字, 数字]
>1 : 1
>2 : 2
>3 : 3
>4 : 4

var [,,, c9] = [1, 2, 3, 4];
> : 未定
>类型别名 :=> 未定
> : 未定
>类型别名 :=> 未定
> : 未定
>类型别名 :=> 未定
>c9 : 数字
>类型别名 :=> 数字
>[1, 2, 3, 4] : [数字, 数字, 数字, 数字]
>1 : 1
>2 : 2
>3 : 3
>4 : 4

var [,,,...c10] = [1, 2, 3, 4, "hello"];
> : 未定
>类型别名 :=> 未定
> : 未定
>类型别名 :=> 未定
> : 未定
>类型别名 :=> 未定
>c10 : 任意[]
>[1, 2, 3, 4, "hello"] : (文字 | 数字)[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>"hello" : "hello"

var [c11, c12, ...c13] = [1, 2, "string"];
>c11 : 任意
>类型别名 :=> 任意
>c12 : 任意
>类型别名 :=> 任意
>c13 : 任意[]
>[1, 2, "string"] : (文字 | 数字)[]
>1 : 1
>2 : 2
>"string" : "string"

var [c14, c15, c16] = [1, 2, "string"];
>c14 : 数字
>类型别名 :=> 数字
>c15 : 数字
>类型别名 :=> 数字
>c16 : 文字
>类型别名 :=> 文字
>[1, 2, "string"] : [数字, 数字, 文字]
>1 : 1
>2 : 2
>"string" : "string"

