=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithGenericCallSignatures4.ts ===
// some complex cases of assignment compat of generic signatures.

interface I2<T> {
>I2 : I2<T>
>T : T

    p: T
>p : T
>T : T
}

var x: <T extends I2<T>>(z: T) => void
>x : <T 扩展 I2<T>>(z: T) => 无值
>T : T
>I2 : I2<T>
>T : T
>z : T
>T : T

var y: <T extends I2<I2<T>>>(z: T) => void
>y : <T 扩展 I2<I2<T>>>(z: T) => 无值
>T : T
>I2 : I2<T>
>I2 : I2<T>
>T : T
>z : T
>T : T

// These both do not make sense as we would eventually be comparing I2<T> to I2<I2<T>>, and they are self referencing anyway
x = y 
>x = y : <T 扩展 I2<I2<T>>>(z: T) => 无值
>x : <T 扩展 I2<T>>(z: T) => 无值
>y : <T 扩展 I2<I2<T>>>(z: T) => 无值

y = x 
>y = x : <T 扩展 I2<T>>(z: T) => 无值
>y : <T 扩展 I2<I2<T>>>(z: T) => 无值
>x : <T 扩展 I2<T>>(z: T) => 无值

