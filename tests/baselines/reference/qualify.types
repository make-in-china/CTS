=== tests/cases/compiler/qualify.ts ===
module M {
>M : typeof M

    export var m=0;
>m : number
>类型别名 :=> 数字
>0 : 0

    export module N {
>N : typeof N

        export var n=1;
>n : number
>类型别名 :=> 数字
>1 : 1
    }
}

module M {
>M : typeof M

    export module N {
>N : typeof N

        var y=m;
>y : number
>类型别名 :=> 数字
>m : number
>类型别名 :=> 数字

        var x=n+y;
>x : number
>类型别名 :=> 数字
>n+y : number
>类型别名 :=> 数字
>n : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
    }
}


module T {
>T : typeof T

    export interface I {
>I : I

        p;
>p : any
>类型别名 :=> 任意
    }
    export module U {
>U : typeof U

        var z:I=3;
>z : I
>I : I
>3 : 3

        export interface I2 {
>I2 : I2

            q;
>q : any
>类型别名 :=> 任意
        }
    }
}

module Peer {
>Peer : typeof Peer

    export module U2 {
>U2 : typeof U2

        var z:T.U.I2=3;
>z : T.U.I2
>T : any
>类型别名 :=> 任意
>U : any
>类型别名 :=> 任意
>I2 : T.U.I2
>3 : 3
    }
}

module Everest {
>Everest : typeof Everest

    export module K1 {
>K1 : any
>类型别名 :=> 任意

        export interface I3 {
>I3 : I3

            zeep;
>zeep : any
>类型别名 :=> 任意
        }
    }
    export module K2 {
>K2 : typeof K2

        export interface I4 {
>I4 : I4

            z;
>z : any
>类型别名 :=> 任意
        }
        var v1:I4;
>v1 : I4
>I4 : I4

        var v2:K1.I3=v1;
>v2 : K1.I3
>K1 : any
>类型别名 :=> 任意
>I3 : K1.I3
>v1 : I4

        var v3:K1.I3[]=v1;
>v3 : K1.I3[]
>K1 : any
>类型别名 :=> 任意
>I3 : K1.I3
>v1 : I4

        var v4:()=>K1.I3=v1;
>v4 : () => K1.I3
>K1 : any
>类型别名 :=> 任意
>I3 : K1.I3
>v1 : I4

        var v5:(k:K1.I3)=>void=v1;
>v5 : (k: K1.I3) => void
>k : K1.I3
>K1 : any
>类型别名 :=> 任意
>I3 : K1.I3
>v1 : I4

        var v6:{k:K1.I3;}=v1;
>v6 : { k: K1.I3; }
>k : K1.I3
>K1 : any
>类型别名 :=> 任意
>I3 : K1.I3
>v1 : I4
    }
}

interface I {
>I : I

    k;
>k : any
>类型别名 :=> 任意
}

var y:I;
>y : I
>I : I

var x:T.I=y;
>x : T.I
>T : any
>类型别名 :=> 任意
>I : T.I
>y : I


