=== tests/cases/compiler/main.js ===
function allRest() { arguments; }
>allRest : (...args: 任意[]) => 无值
>arguments : IArguments

allRest();
>allRest() : 无值
>类型别名 :=> 无值
>allRest : (...args: 任意[]) => 无值

allRest(1, 2, 3);
>allRest(1, 2, 3) : 无值
>类型别名 :=> 无值
>allRest : (...args: 任意[]) => 无值
>1 : 1
>2 : 2
>3 : 3

function someRest(x, y) { arguments; }
>someRest : (x: 任意, y: 任意, ...args: 任意[]) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>arguments : IArguments

someRest(); // x and y are still optional because they are in a JS file
>someRest() : 无值
>类型别名 :=> 无值
>someRest : (x: 任意, y: 任意, ...args: 任意[]) => 无值

someRest(1, 2, 3);
>someRest(1, 2, 3) : 无值
>类型别名 :=> 无值
>someRest : (x: 任意, y: 任意, ...args: 任意[]) => 无值
>1 : 1
>2 : 2
>3 : 3

/**
 * @param {number} x - a thing
 */
function jsdocced(x) { arguments; }
>jsdocced : (x: 数字, ...args: 任意[]) => 无值
>x : 数字
>类型别名 :=> 数字
>arguments : IArguments

jsdocced(1);
>jsdocced(1) : 无值
>类型别名 :=> 无值
>jsdocced : (x: 数字, ...args: 任意[]) => 无值
>1 : 1

function dontDoubleRest(x, ...y) { arguments; }
>dontDoubleRest : (x: 任意, ...y: 任意[]) => 无值
>x : 任意
>类型别名 :=> 任意
>y : 任意[]
>arguments : IArguments

dontDoubleRest(1, 2, 3);
>dontDoubleRest(1, 2, 3) : 无值
>类型别名 :=> 无值
>dontDoubleRest : (x: 任意, ...y: 任意[]) => 无值
>1 : 1
>2 : 2
>3 : 3


