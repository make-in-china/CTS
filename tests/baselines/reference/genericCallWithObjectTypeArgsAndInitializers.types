=== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/genericCallWithObjectTypeArgsAndInitializers.ts ===
// Generic typed parameters with initializers

function foo<T>(x: T = null) { return x; } // ok
>foo : <T>(x?: T) => T
>T : T
>x : T
>T : T
>null : 空值
>类型别名 :=> 空值
>x : T

function foo2<T>(x: T = undefined) { return x; } // ok
>foo2 : <T>(x?: T) => T
>T : T
>x : T
>T : T
>undefined : 未定
>类型别名 :=> 未定
>x : T

function foo3<T extends Number>(x: T = 1) { } // error
>foo3 : <T 扩展 Number>(x?: T) => 无值
>T : T
>Number : Number
>x : T
>T : T
>1 : 1

function foo4<T, U extends T>(x: T, y: U = x) { } // error
>foo4 : <T, U 扩展 T>(x: T, y?: U) => 无值
>T : T
>U : U
>T : T
>x : T
>T : T
>y : U
>U : U
>x : T

function foo5<T, U extends T>(x: U, y: T = x) { } // ok
>foo5 : <T, U 扩展 T>(x: U, y?: T) => 无值
>T : T
>U : U
>T : T
>x : U
>U : U
>y : T
>T : T
>x : U

function foo6<T, U extends T, V extends U>(x: T, y: U, z: V = y) { } // error
>foo6 : <T, U 扩展 T, V 扩展 U>(x: T, y: U, z?: V) => 无值
>T : T
>U : U
>T : T
>V : V
>U : U
>x : T
>T : T
>y : U
>U : U
>z : V
>V : V
>y : U

function foo7<T, U extends T, V extends U>(x: V, y: U = x) { } // should be ok
>foo7 : <T, U 扩展 T, V 扩展 U>(x: V, y?: U) => 无值
>T : T
>U : U
>T : T
>V : V
>U : U
>x : V
>V : V
>y : U
>U : U
>x : V

