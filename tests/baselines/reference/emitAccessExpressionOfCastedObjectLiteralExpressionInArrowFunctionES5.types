=== tests/cases/compiler/emitAccessExpressionOfCastedObjectLiteralExpressionInArrowFunctionES5.ts ===
(x) => ({ "1": "one", "2": "two" } as { [key: string]: string })[x];
>(x) => ({ "1": "one", "2": "two" } as { [key: string]: string })[x] : (x: any) => string
>x : any
>类型别名 :=> 任意
>({ "1": "one", "2": "two" } as { [key: string]: string })[x] : string
>类型别名 :=> 文字
>({ "1": "one", "2": "two" } as { [key: string]: string }) : { [key: string]: string; }
>{ "1": "one", "2": "two" } as { [key: string]: string } : { [key: string]: string; }
>{ "1": "one", "2": "two" } : { "1": string; "2": string; }
>"one" : "one"
>"two" : "two"
>key : string
>类型别名 :=> 文字
>x : any
>类型别名 :=> 任意

(x) => ({ "1": "one", "2": "two" } as { [key: string]: string }).x;
>(x) => ({ "1": "one", "2": "two" } as { [key: string]: string }).x : (x: any) => string
>x : any
>类型别名 :=> 任意
>({ "1": "one", "2": "two" } as { [key: string]: string }).x : string
>类型别名 :=> 文字
>({ "1": "one", "2": "two" } as { [key: string]: string }) : { [key: string]: string; }
>{ "1": "one", "2": "two" } as { [key: string]: string } : { [key: string]: string; }
>{ "1": "one", "2": "two" } : { "1": string; "2": string; }
>"one" : "one"
>"two" : "two"
>key : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

