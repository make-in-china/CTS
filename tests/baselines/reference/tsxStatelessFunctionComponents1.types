=== tests/cases/conformance/jsx/file.tsx ===
function EmptyPropSFC() {
>EmptyPropSFC : () => JSX.Element

    return <div> Default Greeting </div>;
><div> Default Greeting </div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意
}

function Greet(x: {name: string}) {
>Greet : (x: { name: 文字; }) => JSX.Element
>x : { name: 文字; }
>name : 文字
>类型别名 :=> 文字

	return <div>Hello, {x}</div>;
><div>Hello, {x}</div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>x : { name: 文字; }
>div : 任意
>类型别名 :=> 任意
}
function Meet({name = 'world'}) {
>Meet : ({ name }: { name?: 文字; }) => JSX.Element
>name : 文字
>类型别名 :=> 文字
>'world' : "world"

	return <div>Hello, {name}</div>;
><div>Hello, {name}</div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>name : 文字
>类型别名 :=> 文字
>div : 任意
>类型别名 :=> 任意
}
function MeetAndGreet(k: {"prop-name": string}) {
>MeetAndGreet : (k: { "prop-name": 文字; }) => JSX.Element
>k : { "prop-name": 文字; }

	return <div>Hi Hi</div>;
><div>Hi Hi</div> : JSX.Element
>div : 任意
>类型别名 :=> 任意
>div : 任意
>类型别名 :=> 任意
}

// OK
let a = <Greet name='world' />;
>a : JSX.Element
><Greet name='world' /> : JSX.Element
>Greet : (x: { name: 文字; }) => JSX.Element
>name : 文字
>类型别名 :=> 文字

let a1 = <Greet name='world' extra-prop />;
>a1 : JSX.Element
><Greet name='world' extra-prop /> : JSX.Element
>Greet : (x: { name: 文字; }) => JSX.Element
>name : 文字
>类型别名 :=> 文字
>extra-prop : 为真
>类型别名 :=> 为真

// Error
let b = <Greet naaame='world' />;
>b : JSX.Element
><Greet naaame='world' /> : JSX.Element
>Greet : (x: { name: 文字; }) => JSX.Element
>naaame : 文字
>类型别名 :=> 文字

// OK
let c = <Meet />;
>c : JSX.Element
><Meet /> : JSX.Element
>Meet : ({ name }: { name?: 文字; }) => JSX.Element

let c1 = <Meet extra-prop/>;
>c1 : JSX.Element
><Meet extra-prop/> : JSX.Element
>Meet : ({ name }: { name?: 文字; }) => JSX.Element
>extra-prop : 为真
>类型别名 :=> 为真

// OK
let d = <Meet name='me' />;
>d : JSX.Element
><Meet name='me' /> : JSX.Element
>Meet : ({ name }: { name?: 文字; }) => JSX.Element
>name : 文字
>类型别名 :=> 文字

// Error
let e = <Meet name={42} />;
>e : JSX.Element
><Meet name={42} /> : JSX.Element
>Meet : ({ name }: { name?: 文字; }) => JSX.Element
>name : 数字
>类型别名 :=> 数字
>42 : 42

// Error
let f = <Meet naaaaaaame='no' />;
>f : JSX.Element
><Meet naaaaaaame='no' /> : JSX.Element
>Meet : ({ name }: { name?: 文字; }) => JSX.Element
>naaaaaaame : 文字
>类型别名 :=> 文字

// OK
let g = <MeetAndGreet prop-name="Bob" />;
>g : JSX.Element
><MeetAndGreet prop-name="Bob" /> : JSX.Element
>MeetAndGreet : (k: { "prop-name": 文字; }) => JSX.Element
>prop-name : 文字
>类型别名 :=> 文字

// Error
let h = <MeetAndGreet extra-prop-name="World" />;
>h : JSX.Element
><MeetAndGreet extra-prop-name="World" /> : JSX.Element
>MeetAndGreet : (k: { "prop-name": 文字; }) => JSX.Element
>extra-prop-name : 文字
>类型别名 :=> 文字

// Error
let i = <EmptyPropSFC prop1 />
>i : JSX.Element
><EmptyPropSFC prop1 /> : JSX.Element
>EmptyPropSFC : () => JSX.Element
>prop1 : 为真
>类型别名 :=> 为真

let i1 = <EmptyPropSFC ref={x => x.greeting.substr(10)} />
>i1 : JSX.Element
><EmptyPropSFC ref={x => x.greeting.substr(10)} /> : JSX.Element
>EmptyPropSFC : () => JSX.Element
>ref : (x: 任意) => 任意
>x => x.greeting.substr(10) : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>x.greeting.substr(10) : 任意
>类型别名 :=> 任意
>x.greeting.substr : 任意
>类型别名 :=> 任意
>x.greeting : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>greeting : 任意
>类型别名 :=> 任意
>substr : 任意
>类型别名 :=> 任意
>10 : 10

let o = {
>o : { prop1: 真假; }
>{    prop1: true;} : { prop1: 真假; }

    prop1: true;
>prop1 : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
}

// OK as access properties are allow when spread
let i2 = <EmptyPropSFC {...o} />
>i2 : JSX.Element
><EmptyPropSFC {...o} /> : JSX.Element
>EmptyPropSFC : () => JSX.Element
>o : { prop1: 真假; }

let o1: any;
>o1 : 任意
>类型别名 :=> 任意

// OK
let j = <EmptyPropSFC {...o1} />
>j : JSX.Element
><EmptyPropSFC {...o1} /> : JSX.Element
>EmptyPropSFC : () => JSX.Element
>o1 : 任意
>类型别名 :=> 任意

let j1 = <EmptyPropSFC />
>j1 : JSX.Element
><EmptyPropSFC /> : JSX.Element
>EmptyPropSFC : () => JSX.Element

let j2 = <EmptyPropSFC data-prop />
>j2 : JSX.Element
><EmptyPropSFC data-prop /> : JSX.Element
>EmptyPropSFC : () => JSX.Element
>data-prop : 为真
>类型别名 :=> 为真

let j3 = <EmptyPropSFC {...{}} />
>j3 : JSX.Element
><EmptyPropSFC {...{}} /> : JSX.Element
>EmptyPropSFC : () => JSX.Element
>{} : {}

let j4 = <EmptyPropSFC {...{ "data-info": "hi"}} />
>j4 : JSX.Element
><EmptyPropSFC {...{ "data-info": "hi"}} /> : JSX.Element
>EmptyPropSFC : () => JSX.Element
>{ "data-info": "hi"} : { "data-info": 文字; }
>"hi" : "hi"


