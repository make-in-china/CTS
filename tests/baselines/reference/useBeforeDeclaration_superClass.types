=== tests/cases/compiler/useBeforeDeclaration_superClass.ts ===
class C {
>C : C

    x = 0;
>x : 数字
>类型别名 :=> 数字
>0 : 0
}
class D extends C {
>D : D
>C : C

    // Not an error -- this will access the parent's initialized value for `x`, not the one on the child.
    old_x = this.x;
>old_x : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字

    x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1
}

// Test that it works on chains of classes
class X {
>X : X

    x = 0;
>x : 数字
>类型别名 :=> 数字
>0 : 0
}
class Y extends X {}
>Y : Y
>X : X

class Z extends Y {
>Z : Z
>Y : Y

    old_x = this.x;
>old_x : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字

    x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1
}

// Interface doesn't count
interface I {
>I : I

    x: number;
>x : 数字
>类型别名 :=> 数字
}
class J implements I {
>J : J
>I : I

    old_x = this.x;
>old_x : 数字
>类型别名 :=> 数字
>this.x : 数字
>类型别名 :=> 数字
>this : 本体
>x : 数字
>类型别名 :=> 数字

    x = 1;
>x : 数字
>类型别名 :=> 数字
>1 : 1
}

