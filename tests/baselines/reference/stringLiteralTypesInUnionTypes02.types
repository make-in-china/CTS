=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes02.ts ===
type T = string | "foo" | "bar" | "baz";
>T : string
>类型别名 :=> 文字

var x: "foo" | "bar" | "baz" | string = undefined;
>x : string
>类型别名 :=> 文字
>undefined : undefined
>类型别名 :=> 未定

var y: T = undefined;
>y : string
>类型别名 :=> 文字
>T : string
>类型别名 :=> 文字
>undefined : undefined
>类型别名 :=> 未定

if (x === "foo") {
>x === "foo" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"foo" : "foo"

    let a = x;
>a : string
>类型别名 :=> 文字
>x : "foo"
}
else if (x !== "bar") {
>x !== "bar" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"bar" : "bar"

    let b = x || y;
>b : string
>类型别名 :=> 文字
>x || y : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>y : string
>类型别名 :=> 文字
}
else {
    let c = x;
>c : string
>类型别名 :=> 文字
>x : "bar"

    let d = y;
>d : string
>类型别名 :=> 文字
>y : string
>类型别名 :=> 文字

    let e: (typeof x) | (typeof y) = c || d;
>e : string
>类型别名 :=> 文字
>x : "bar"
>y : string
>类型别名 :=> 文字
>c || d : string
>类型别名 :=> 文字
>c : string
>类型别名 :=> 文字
>d : string
>类型别名 :=> 文字
}

x = y;
>x = y : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字
>y : string
>类型别名 :=> 文字

y = x;
>y = x : string
>类型别名 :=> 文字
>y : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

