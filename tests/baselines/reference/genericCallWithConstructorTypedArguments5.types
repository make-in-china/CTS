=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithConstructorTypedArguments5.ts ===
// Generic call with parameter of object type with member of function type of n args passed object whose associated member is call signature with n+1 args

function foo<T, U>(arg: { cb: new(t: T) => U }) {
>foo : <T, U>(arg: { cb: new (t: T) => U; }) => U
>T : T
>U : U
>arg : { cb: new (t: T) => U; }
>cb : new (t: T) => U
>t : T
>T : T
>U : U

    return new arg.cb(null);
>new arg.cb(null) : U
>arg.cb : new (t: T) => U
>arg : { cb: new (t: T) => U; }
>cb : new (t: T) => U
>null : null
>类型别名 :=> 空值
}

var arg: { cb: new<T>(x: T) => string };
>arg : { cb: new <T>(x: T) => string; }
>cb : new <T>(x: T) => string
>T : T
>x : T
>T : T

var r = foo(arg); // {}
>r : string
>类型别名 :=> 文字
>foo(arg) : string
>类型别名 :=> 文字
>foo : <T, U>(arg: { cb: new (t: T) => U; }) => U
>arg : { cb: new <T>(x: T) => string; }

// more args not allowed
var arg2: { cb: new <T>(x: T, y: T) => string };
>arg2 : { cb: new <T>(x: T, y: T) => string; }
>cb : new <T>(x: T, y: T) => string
>T : T
>x : T
>T : T
>y : T
>T : T

var r2 = foo(arg2); // error
>r2 : any
>类型别名 :=> 任意
>foo(arg2) : any
>类型别名 :=> 任意
>foo : <T, U>(arg: { cb: new (t: T) => U; }) => U
>arg2 : { cb: new <T>(x: T, y: T) => string; }

var arg3: { cb: new (x: string, y: number) => string };
>arg3 : { cb: new (x: string, y: number) => string; }
>cb : new (x: string, y: number) => string
>x : string
>类型别名 :=> 文字
>y : number
>类型别名 :=> 数字

var r3 = foo(arg3); // error
>r3 : any
>类型别名 :=> 任意
>foo(arg3) : any
>类型别名 :=> 任意
>foo : <T, U>(arg: { cb: new (t: T) => U; }) => U
>arg3 : { cb: new (x: string, y: number) => string; }

function foo2<T, U>(arg: { cb: new(t: T, t2: T) => U }) {
>foo2 : <T, U>(arg: { cb: new (t: T, t2: T) => U; }) => U
>T : T
>U : U
>arg : { cb: new (t: T, t2: T) => U; }
>cb : new (t: T, t2: T) => U
>t : T
>T : T
>t2 : T
>T : T
>U : U

    return new arg.cb(null, null);
>new arg.cb(null, null) : U
>arg.cb : new (t: T, t2: T) => U
>arg : { cb: new (t: T, t2: T) => U; }
>cb : new (t: T, t2: T) => U
>null : null
>类型别名 :=> 空值
>null : null
>类型别名 :=> 空值
}

// fewer args ok
var r4 = foo(arg); // {}
>r4 : string
>类型别名 :=> 文字
>foo(arg) : string
>类型别名 :=> 文字
>foo : <T, U>(arg: { cb: new (t: T) => U; }) => U
>arg : { cb: new <T>(x: T) => string; }

var arg4: { cb: new (x: string) => string };
>arg4 : { cb: new (x: string) => string; }
>cb : new (x: string) => string
>x : string
>类型别名 :=> 文字

var r6 = foo(arg4); // string
>r6 : string
>类型别名 :=> 文字
>foo(arg4) : string
>类型别名 :=> 文字
>foo : <T, U>(arg: { cb: new (t: T) => U; }) => U
>arg4 : { cb: new (x: string) => string; }

var arg5: { cb: new () => string };
>arg5 : { cb: new () => string; }
>cb : new () => string

var r7 = foo(arg5); // string
>r7 : string
>类型别名 :=> 文字
>foo(arg5) : string
>类型别名 :=> 文字
>foo : <T, U>(arg: { cb: new (t: T) => U; }) => U
>arg5 : { cb: new () => string; }

