=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/stringLiteralTypesInImplementationSignatures.ts ===
// String literal types are only valid in overload signatures

function foo(x: 'hi') { }
>foo : (x: "hi") => 无值
>x : "hi"

var f = function foo(x: 'hi') { }
>f : (x: "hi") => 无值
>function foo(x: 'hi') { } : (x: "hi") => 无值
>foo : (x: "hi") => 无值
>x : "hi"

var f2 = (x: 'hi', y: 'hi') => { }
>f2 : (x: "hi", y: "hi") => 无值
>(x: 'hi', y: 'hi') => { } : (x: "hi", y: "hi") => 无值
>x : "hi"
>y : "hi"

class C {
>C : C

    foo(x: 'hi') { }
>foo : (x: "hi") => 无值
>x : "hi"
}

interface I {
>I : I

    (x: 'hi');
>x : "hi"

    foo(x: 'hi', y: 'hi');
>foo : (x: "hi", y: "hi") => 任意
>x : "hi"
>y : "hi"
}

var a: {
>a : { (x: "hi"): 任意; foo(x: "hi"): 任意; }

    (x: 'hi');
>x : "hi"

    foo(x: 'hi');
>foo : (x: "hi") => 任意
>x : "hi"
}

var b = {
>b : { foo(x: "hi"): 无值; a: (x: "hi", y: "hi") => 无值; b: (x: "hi") => 无值; }
>{    foo(x: 'hi') { },    a: function foo(x: 'hi', y: 'hi') { },    b: (x: 'hi') => { }} : { foo(x: "hi"): 无值; a: (x: "hi", y: "hi") => 无值; b: (x: "hi") => 无值; }

    foo(x: 'hi') { },
>foo : (x: "hi") => 无值
>x : "hi"

    a: function foo(x: 'hi', y: 'hi') { },
>a : (x: "hi", y: "hi") => 无值
>function foo(x: 'hi', y: 'hi') { } : (x: "hi", y: "hi") => 无值
>foo : (x: "hi", y: "hi") => 无值
>x : "hi"
>y : "hi"

    b: (x: 'hi') => { }
>b : (x: "hi") => 无值
>(x: 'hi') => { } : (x: "hi") => 无值
>x : "hi"
}

