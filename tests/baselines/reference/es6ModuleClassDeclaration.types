=== tests/cases/compiler/es6ModuleClassDeclaration.ts ===
export class c {
>c : c

    constructor() {
    }
    private x = 10;
>x : 数字
>类型别名 :=> 数字
>10 : 10

    public y = 30;
>y : 数字
>类型别名 :=> 数字
>30 : 30

    static k = 20;
>k : 数字
>类型别名 :=> 数字
>20 : 20

    private static l = 30;
>l : 数字
>类型别名 :=> 数字
>30 : 30

    private method1() {
>method1 : () => 无值
    }
    public method2() {
>method2 : () => 无值
    }
    static method3() {
>method3 : () => 无值
    }
    private static method4() {
>method4 : () => 无值
    }
}
class c2 {
>c2 : c2

    constructor() {
    }
    private x = 10;
>x : 数字
>类型别名 :=> 数字
>10 : 10

    public y = 30;
>y : 数字
>类型别名 :=> 数字
>30 : 30

    static k = 20;
>k : 数字
>类型别名 :=> 数字
>20 : 20

    private static l = 30;
>l : 数字
>类型别名 :=> 数字
>30 : 30

    private method1() {
>method1 : () => 无值
    }
    public method2() {
>method2 : () => 无值
    }
    static method3() {
>method3 : () => 无值
    }
    private static method4() {
>method4 : () => 无值
    }
}
new c();
>new c() : c
>c : 类为 c

new c2();
>new c2() : c2
>c2 : 类为 c2

export module m1 {
>m1 : 类为 m1

    export class c3 {
>c3 : c3

        constructor() {
        }
        private x = 10;
>x : 数字
>类型别名 :=> 数字
>10 : 10

        public y = 30;
>y : 数字
>类型别名 :=> 数字
>30 : 30

        static k = 20;
>k : 数字
>类型别名 :=> 数字
>20 : 20

        private static l = 30;
>l : 数字
>类型别名 :=> 数字
>30 : 30

        private method1() {
>method1 : () => 无值
        }
        public method2() {
>method2 : () => 无值
        }
        static method3() {
>method3 : () => 无值
        }
        private static method4() {
>method4 : () => 无值
        }
    }
    class c4 {
>c4 : c4

        constructor() {
        }
        private x = 10;
>x : 数字
>类型别名 :=> 数字
>10 : 10

        public y = 30;
>y : 数字
>类型别名 :=> 数字
>30 : 30

        static k = 20;
>k : 数字
>类型别名 :=> 数字
>20 : 20

        private static l = 30;
>l : 数字
>类型别名 :=> 数字
>30 : 30

        private method1() {
>method1 : () => 无值
        }
        public method2() {
>method2 : () => 无值
        }
        static method3() {
>method3 : () => 无值
        }
        private static method4() {
>method4 : () => 无值
        }
    }
    new c();
>new c() : c
>c : 类为 c

    new c2();
>new c2() : c2
>c2 : 类为 c2

    new c3();
>new c3() : c3
>c3 : 类为 c3

    new c4();
>new c4() : c4
>c4 : 类为 c4
}
module m2 {
>m2 : 类为 m2

    export class c3 {
>c3 : c3

        constructor() {
        }
        private x = 10;
>x : 数字
>类型别名 :=> 数字
>10 : 10

        public y = 30;
>y : 数字
>类型别名 :=> 数字
>30 : 30

        static k = 20;
>k : 数字
>类型别名 :=> 数字
>20 : 20

        private static l = 30;
>l : 数字
>类型别名 :=> 数字
>30 : 30

        private method1() {
>method1 : () => 无值
        }
        public method2() {
>method2 : () => 无值
        }
        static method3() {
>method3 : () => 无值
        }
        private static method4() {
>method4 : () => 无值
        }
    }
    class c4 {
>c4 : c4

        constructor() {
        }
        private x = 10;
>x : 数字
>类型别名 :=> 数字
>10 : 10

        public y = 30;
>y : 数字
>类型别名 :=> 数字
>30 : 30

        static k = 20;
>k : 数字
>类型别名 :=> 数字
>20 : 20

        private static l = 30;
>l : 数字
>类型别名 :=> 数字
>30 : 30

        private method1() {
>method1 : () => 无值
        }
        public method2() {
>method2 : () => 无值
        }
        static method3() {
>method3 : () => 无值
        }
        private static method4() {
>method4 : () => 无值
        }
    }
    new c();
>new c() : c
>c : 类为 c

    new c2();
>new c2() : c2
>c2 : 类为 c2

    new c3();
>new c3() : c3
>c3 : 类为 c3

    new c4();
>new c4() : c4
>c4 : 类为 c4

    new m1.c3();
>new m1.c3() : m1.c3
>m1.c3 : 类为 m1.c3
>m1 : 类为 m1
>c3 : 类为 m1.c3
}
