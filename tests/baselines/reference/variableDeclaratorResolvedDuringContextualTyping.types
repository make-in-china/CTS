=== tests/cases/compiler/variableDeclaratorResolvedDuringContextualTyping.ts ===
module WinJS {
>WinJS : 类为 WinJS

    export interface ValueCallback {
>ValueCallback : ValueCallback

        (value: any): any;
>value : 任意
>类型别名 :=> 任意
    }

    export interface EventCallback {
>EventCallback : EventCallback

        (value: any): void;
>value : 任意
>类型别名 :=> 任意
    }

    export interface ErrorCallback {
>ErrorCallback : ErrorCallback

        (error: any): any;
>error : 任意
>类型别名 :=> 任意
    }

    export interface ProgressCallback {
>ProgressCallback : ProgressCallback

        (progress: any): any;
>progress : 任意
>类型别名 :=> 任意
    }

    export declare class Promise {
>Promise : Promise

        constructor(init: (complete: ValueCallback, error: ErrorCallback, progress: ProgressCallback) => void, oncancel?: any);
>init : (complete: ValueCallback, error: ErrorCallback, progress: ProgressCallback) => 无值
>complete : ValueCallback
>ValueCallback : ValueCallback
>error : ErrorCallback
>ErrorCallback : ErrorCallback
>progress : ProgressCallback
>ProgressCallback : ProgressCallback
>oncancel : 任意
>类型别名 :=> 任意

        static as(value: any): Promise;
>as : (value: 任意) => Promise
>value : 任意
>类型别名 :=> 任意
>Promise : Promise

        static join(promises: { [name: string]: Promise; }): Promise;
>join : { (promises: { [name: 文字]: Promise; }): Promise; (promises: Promise[]): Promise; }
>promises : { [name: 文字]: Promise; }
>name : 文字
>类型别名 :=> 文字
>Promise : Promise
>Promise : Promise

        static join(promises: Promise[]): Promise;
>join : { (promises: { [name: 文字]: Promise; }): Promise; (promises: Promise[]): Promise; }
>promises : Promise[]
>Promise : Promise
>Promise : Promise

        static any(promises: Promise[]): Promise;
>any : (promises: Promise[]) => Promise
>promises : Promise[]
>Promise : Promise
>Promise : Promise

        static timeout(delay: number): Promise;
>timeout : (delay: 数字) => Promise
>delay : 数字
>类型别名 :=> 数字
>Promise : Promise

        static wrapError(error: any): Promise;
>wrapError : (error: 任意) => Promise
>error : 任意
>类型别名 :=> 任意
>Promise : Promise

        static is(value: any): boolean;
>is : (value: 任意) => 真假
>value : 任意
>类型别名 :=> 任意

        static addEventListener(type: string, fn: EventCallback);
>addEventListener : (type: 文字, fn: EventCallback) => 任意
>type : 文字
>类型别名 :=> 文字
>fn : EventCallback
>EventCallback : EventCallback

        public then(success?: ValueCallback, error?: ErrorCallback, progress?: ProgressCallback): Promise;
>then : (success?: ValueCallback, error?: ErrorCallback, progress?: ProgressCallback) => Promise
>success : ValueCallback
>ValueCallback : ValueCallback
>error : ErrorCallback
>ErrorCallback : ErrorCallback
>progress : ProgressCallback
>ProgressCallback : ProgressCallback
>Promise : Promise

        public done(success?: ValueCallback, error?: ErrorCallback, progress?: ProgressCallback): void;
>done : (success?: ValueCallback, error?: ErrorCallback, progress?: ProgressCallback) => 无值
>success : ValueCallback
>ValueCallback : ValueCallback
>error : ErrorCallback
>ErrorCallback : ErrorCallback
>progress : ProgressCallback
>ProgressCallback : ProgressCallback

        public cancel(): void;
>cancel : () => 无值
    }

    export declare class TPromise<V> {
>TPromise : TPromise<V>
>V : V

        constructor(init: (complete: (value: V) => void, error: (err: any) => void, progress: ProgressCallback) => void, oncancel?: any);
>init : (complete: (value: V) => 无值, error: (err: 任意) => 无值, progress: ProgressCallback) => 无值
>complete : (value: V) => 无值
>value : V
>V : V
>error : (err: 任意) => 无值
>err : 任意
>类型别名 :=> 任意
>progress : ProgressCallback
>ProgressCallback : ProgressCallback
>oncancel : 任意
>类型别名 :=> 任意

        public then<U>(success?: (value: V) => TPromise<U>, error?: (err: any) => TPromise<U>, progress?: ProgressCallback): TPromise<U>;
>then : { <U>(success?: (value: V) => TPromise<U>, error?: (err: 任意) => TPromise<U>, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => TPromise<U>, error?: (err: 任意) => U, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => U, error?: (err: 任意) => TPromise<U>, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => U, error?: (err: 任意) => U, progress?: ProgressCallback): TPromise<U>; }
>U : U
>success : (value: V) => TPromise<U>
>value : V
>V : V
>TPromise : TPromise<V>
>U : U
>error : (err: 任意) => TPromise<U>
>err : 任意
>类型别名 :=> 任意
>TPromise : TPromise<V>
>U : U
>progress : ProgressCallback
>ProgressCallback : ProgressCallback
>TPromise : TPromise<V>
>U : U

        public then<U>(success?: (value: V) => TPromise<U>, error?: (err: any) => U, progress?: ProgressCallback): TPromise<U>;
>then : { <U>(success?: (value: V) => TPromise<U>, error?: (err: 任意) => TPromise<U>, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => TPromise<U>, error?: (err: 任意) => U, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => U, error?: (err: 任意) => TPromise<U>, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => U, error?: (err: 任意) => U, progress?: ProgressCallback): TPromise<U>; }
>U : U
>success : (value: V) => TPromise<U>
>value : V
>V : V
>TPromise : TPromise<V>
>U : U
>error : (err: 任意) => U
>err : 任意
>类型别名 :=> 任意
>U : U
>progress : ProgressCallback
>ProgressCallback : ProgressCallback
>TPromise : TPromise<V>
>U : U

        public then<U>(success?: (value: V) => U, error?: (err: any) => TPromise<U>, progress?: ProgressCallback): TPromise<U>;
>then : { <U>(success?: (value: V) => TPromise<U>, error?: (err: 任意) => TPromise<U>, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => TPromise<U>, error?: (err: 任意) => U, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => U, error?: (err: 任意) => TPromise<U>, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => U, error?: (err: 任意) => U, progress?: ProgressCallback): TPromise<U>; }
>U : U
>success : (value: V) => U
>value : V
>V : V
>U : U
>error : (err: 任意) => TPromise<U>
>err : 任意
>类型别名 :=> 任意
>TPromise : TPromise<V>
>U : U
>progress : ProgressCallback
>ProgressCallback : ProgressCallback
>TPromise : TPromise<V>
>U : U

        public then<U>(success?: (value: V) => U, error?: (err: any) => U, progress?: ProgressCallback): TPromise<U>;
>then : { <U>(success?: (value: V) => TPromise<U>, error?: (err: 任意) => TPromise<U>, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => TPromise<U>, error?: (err: 任意) => U, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => U, error?: (err: 任意) => TPromise<U>, progress?: ProgressCallback): TPromise<U>; <U>(success?: (value: V) => U, error?: (err: 任意) => U, progress?: ProgressCallback): TPromise<U>; }
>U : U
>success : (value: V) => U
>value : V
>V : V
>U : U
>error : (err: 任意) => U
>err : 任意
>类型别名 :=> 任意
>U : U
>progress : ProgressCallback
>ProgressCallback : ProgressCallback
>TPromise : TPromise<V>
>U : U

        public done(success?: (value: V) => void, error?: (err: any) => any, progress?: ProgressCallback): void;
>done : (success?: (value: V) => 无值, error?: (err: 任意) => 任意, progress?: ProgressCallback) => 无值
>success : (value: V) => 无值
>value : V
>V : V
>error : (err: 任意) => 任意
>err : 任意
>类型别名 :=> 任意
>progress : ProgressCallback
>ProgressCallback : ProgressCallback

        public cancel(): void;
>cancel : () => 无值

        public static as<ValueType>(value: ValueType): TPromise<ValueType>;
>as : <ValueType>(value: ValueType) => TPromise<ValueType>
>ValueType : ValueType
>value : ValueType
>ValueType : ValueType
>TPromise : TPromise<V>
>ValueType : ValueType

        public static timeout(delay: number): TPromise<void>;
>timeout : (delay: 数字) => TPromise<无值>
>delay : 数字
>类型别名 :=> 数字
>TPromise : TPromise<V>

        public static join<ValueType>(promises: TPromise<ValueType>[]): TPromise<ValueType[]>;
>join : <ValueType>(promises: TPromise<ValueType>[]) => TPromise<ValueType[]>
>ValueType : ValueType
>promises : TPromise<ValueType>[]
>TPromise : TPromise<V>
>ValueType : ValueType
>TPromise : TPromise<V>
>ValueType : ValueType

        public static any<ValueType>(promises: TPromise<ValueType>[]): TPromise<ValueType>;
>any : <ValueType>(promises: TPromise<ValueType>[]) => TPromise<ValueType>
>ValueType : ValueType
>promises : TPromise<ValueType>[]
>TPromise : TPromise<V>
>ValueType : ValueType
>TPromise : TPromise<V>
>ValueType : ValueType

        public static wrapError<ValueType>(error: any): TPromise<ValueType>;
>wrapError : <ValueType>(error: 任意) => TPromise<ValueType>
>ValueType : ValueType
>error : 任意
>类型别名 :=> 任意
>TPromise : TPromise<V>
>ValueType : ValueType
    }

    export interface IXHROptions {
>IXHROptions : IXHROptions

        type?: string;
>type : 文字
>类型别名 :=> 文字

        url?: string;
>url : 文字
>类型别名 :=> 文字

        user?: string;
>user : 文字
>类型别名 :=> 文字

        password?: string;
>password : 文字
>类型别名 :=> 文字

        responseType?: string;
>responseType : 文字
>类型别名 :=> 文字

        headers?: any;
>headers : 任意
>类型别名 :=> 任意

        customRequestInitializer?: (req: any) => void;
>customRequestInitializer : (req: 任意) => 无值
>req : 任意
>类型别名 :=> 任意

        data?: any;
>data : 任意
>类型别名 :=> 任意
    }
}

module Services {
>Services : 任意
>类型别名 :=> 任意

    export interface IRequestService {
>IRequestService : IRequestService

        /**
         * Returns the URL that can be used to access the provided service. The optional second argument can
         * be provided to narrow down the request URL to a specific file system resource. The third argument
         * allows to specify to return a fully absolute server URL. 
         */
        getRequestUrl(service: string, path?: string): string;
>getRequestUrl : { (service: 文字, path?: 文字): 文字; (service: 文字, path?: 文字, absolute?: 真假): 文字; }
>service : 文字
>类型别名 :=> 文字
>path : 文字
>类型别名 :=> 文字

        getRequestUrl(service: string, path?: string, absolute?: boolean): string;
>getRequestUrl : { (service: 文字, path?: 文字): 文字; (service: 文字, path?: 文字, absolute?: 真假): 文字; }
>service : 文字
>类型别名 :=> 文字
>path : 文字
>类型别名 :=> 文字
>absolute : 真假
>类型别名 :=> 真假

        /**
         * Wraps the call into WinJS.XHR to allow for mocking and telemetry. Use this instead
         * of calling WinJS.XHR directly.
         */
        makeRequest(options: WinJS.IXHROptions): WinJS.Promise;
>makeRequest : (options: WinJS.IXHROptions) => WinJS.Promise
>options : WinJS.IXHROptions
>WinJS : 任意
>类型别名 :=> 任意
>IXHROptions : WinJS.IXHROptions
>WinJS : 任意
>类型别名 :=> 任意
>Promise : WinJS.Promise
    }
}

module Errors {
>Errors : 类为 Errors

    export class ConnectionError /* extends Error */ {
>ConnectionError : ConnectionError

        constructor(request: XMLHttpRequest) {
>request : XMLHttpRequest
>XMLHttpRequest : XMLHttpRequest
        }
    }
}

module Files {
>Files : 任意
>类型别名 :=> 任意

    export interface IUploadResult {
>IUploadResult : IUploadResult

        stat: string;
>stat : 文字
>类型别名 :=> 文字

        isNew: boolean;
>isNew : 真假
>类型别名 :=> 真假
    }
}

interface XMLHttpRequest {
>XMLHttpRequest : XMLHttpRequest

    status: number;
>status : 数字
>类型别名 :=> 数字

    responseText: string;
>responseText : 文字
>类型别名 :=> 文字

    statusText: string;
>statusText : 文字
>类型别名 :=> 文字

}

class FileService {
>FileService : FileService

    private requestService: Services.IRequestService;
>requestService : Services.IRequestService
>Services : 任意
>类型别名 :=> 任意
>IRequestService : Services.IRequestService

    public uploadData(): WinJS.TPromise<Files.IUploadResult> {
>uploadData : () => WinJS.TPromise<Files.IUploadResult>
>WinJS : 任意
>类型别名 :=> 任意
>TPromise : WinJS.TPromise<V>
>Files : 任意
>类型别名 :=> 任意
>IUploadResult : Files.IUploadResult

        var path = "";
>path : 文字
>类型别名 :=> 文字
>"" : ""

        return this.requestService.makeRequest({
>this.requestService.makeRequest({            url: this.requestService.getRequestUrl('root', path),            type: 'POST',            headers: {},            data: "someData"        }).then((response: XMLHttpRequest) => {                var result: IUploadResult = { // This should be error                    stat: this.jsonToStat(newFilePath, "someString"), // _this needs to be emitted to the js file                    isNew: response.status === 201                };                return WinJS.TPromise.as<Files.IUploadResult>(result);            }, (xhr: XMLHttpRequest) => {                return WinJS.Promise.wrapError(new Errors.ConnectionError(xhr));            }) : WinJS.Promise
>this.requestService.makeRequest({            url: this.requestService.getRequestUrl('root', path),            type: 'POST',            headers: {},            data: "someData"        }).then : (success?: WinJS.ValueCallback, error?: WinJS.ErrorCallback, progress?: WinJS.ProgressCallback) => WinJS.Promise
>this.requestService.makeRequest({            url: this.requestService.getRequestUrl('root', path),            type: 'POST',            headers: {},            data: "someData"        }) : WinJS.Promise
>this.requestService.makeRequest : (options: WinJS.IXHROptions) => WinJS.Promise
>this.requestService : Services.IRequestService
>this : 本体
>requestService : Services.IRequestService
>makeRequest : (options: WinJS.IXHROptions) => WinJS.Promise
>{            url: this.requestService.getRequestUrl('root', path),            type: 'POST',            headers: {},            data: "someData"        } : { url: 文字; type: 文字; headers: {}; data: 文字; }

            url: this.requestService.getRequestUrl('root', path),
>url : 文字
>类型别名 :=> 文字
>this.requestService.getRequestUrl('root', path) : 文字
>类型别名 :=> 文字
>this.requestService.getRequestUrl : { (service: 文字, path?: 文字): 文字; (service: 文字, path?: 文字, absolute?: 真假): 文字; }
>this.requestService : Services.IRequestService
>this : 本体
>requestService : Services.IRequestService
>getRequestUrl : { (service: 文字, path?: 文字): 文字; (service: 文字, path?: 文字, absolute?: 真假): 文字; }
>'root' : "root"
>path : 文字
>类型别名 :=> 文字

            type: 'POST',
>type : 文字
>类型别名 :=> 文字
>'POST' : "POST"

            headers: {},
>headers : {}
>{} : {}

            data: "someData"
>data : 文字
>类型别名 :=> 文字
>"someData" : "someData"

        }).then((response: XMLHttpRequest) => {
>then : (success?: WinJS.ValueCallback, error?: WinJS.ErrorCallback, progress?: WinJS.ProgressCallback) => WinJS.Promise
>(response: XMLHttpRequest) => {                var result: IUploadResult = { // This should be error                    stat: this.jsonToStat(newFilePath, "someString"), // _this needs to be emitted to the js file                    isNew: response.status === 201                };                return WinJS.TPromise.as<Files.IUploadResult>(result);            } : (response: XMLHttpRequest) => WinJS.TPromise<Files.IUploadResult>
>response : XMLHttpRequest
>XMLHttpRequest : XMLHttpRequest

                var result: IUploadResult = { // This should be error
>result : 任意
>类型别名 :=> 任意
>IUploadResult : No type information available!
>{ // This should be error                    stat: this.jsonToStat(newFilePath, "someString"), // _this needs to be emitted to the js file                    isNew: response.status === 201                } : { stat: 任意; isNew: 真假; }

                    stat: this.jsonToStat(newFilePath, "someString"), // _this needs to be emitted to the js file
>stat : 任意
>类型别名 :=> 任意
>this.jsonToStat(newFilePath, "someString") : 任意
>类型别名 :=> 任意
>this.jsonToStat : 任意
>类型别名 :=> 任意
>this : 本体
>jsonToStat : 任意
>类型别名 :=> 任意
>newFilePath : 任意
>类型别名 :=> 任意
>"someString" : "someString"

                    isNew: response.status === 201
>isNew : 真假
>类型别名 :=> 真假
>response.status === 201 : 真假
>类型别名 :=> 真假
>response.status : 数字
>类型别名 :=> 数字
>response : XMLHttpRequest
>status : 数字
>类型别名 :=> 数字
>201 : 201

                };

                return WinJS.TPromise.as<Files.IUploadResult>(result);
>WinJS.TPromise.as<Files.IUploadResult>(result) : WinJS.TPromise<Files.IUploadResult>
>WinJS.TPromise.as : <ValueType>(value: ValueType) => WinJS.TPromise<ValueType>
>WinJS.TPromise : 类为 WinJS.TPromise
>WinJS : 类为 WinJS
>TPromise : 类为 WinJS.TPromise
>as : <ValueType>(value: ValueType) => WinJS.TPromise<ValueType>
>Files : 任意
>类型别名 :=> 任意
>IUploadResult : Files.IUploadResult
>result : 任意
>类型别名 :=> 任意

            }, (xhr: XMLHttpRequest) => {
>(xhr: XMLHttpRequest) => {                return WinJS.Promise.wrapError(new Errors.ConnectionError(xhr));            } : (xhr: XMLHttpRequest) => WinJS.Promise
>xhr : XMLHttpRequest
>XMLHttpRequest : XMLHttpRequest

                return WinJS.Promise.wrapError(new Errors.ConnectionError(xhr));
>WinJS.Promise.wrapError(new Errors.ConnectionError(xhr)) : WinJS.Promise
>WinJS.Promise.wrapError : (error: 任意) => WinJS.Promise
>WinJS.Promise : 类为 WinJS.Promise
>WinJS : 类为 WinJS
>Promise : 类为 WinJS.Promise
>wrapError : (error: 任意) => WinJS.Promise
>new Errors.ConnectionError(xhr) : Errors.ConnectionError
>Errors.ConnectionError : 类为 Errors.ConnectionError
>Errors : 类为 Errors
>ConnectionError : 类为 Errors.ConnectionError
>xhr : XMLHttpRequest

            });
    }
}
