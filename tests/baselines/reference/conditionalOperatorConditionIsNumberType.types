=== tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditionIsNumberType.ts ===
//Cond ? Expr1 : Expr2,  Cond is of number type, Expr1 and Expr2 have the same type
var condNumber: number;
>condNumber : 数字
>类型别名 :=> 数字

var exprAny1: any;
>exprAny1 : 任意
>类型别名 :=> 任意

var exprBoolean1: boolean;
>exprBoolean1 : 真假
>类型别名 :=> 真假

var exprNumber1: number;
>exprNumber1 : 数字
>类型别名 :=> 数字

var exprString1: string;
>exprString1 : 文字
>类型别名 :=> 文字

var exprIsObject1: Object;
>exprIsObject1 : Object
>Object : Object

var exprAny2: any;
>exprAny2 : 任意
>类型别名 :=> 任意

var exprBoolean2: boolean;
>exprBoolean2 : 真假
>类型别名 :=> 真假

var exprNumber2: number;
>exprNumber2 : 数字
>类型别名 :=> 数字

var exprString2: string;
>exprString2 : 文字
>类型别名 :=> 文字

var exprIsObject2: Object;
>exprIsObject2 : Object
>Object : Object

//Cond is a number type variable
condNumber ? exprAny1 : exprAny2;
>condNumber ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>condNumber : 数字
>类型别名 :=> 数字
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

condNumber ? exprBoolean1 : exprBoolean2;
>condNumber ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>condNumber : 数字
>类型别名 :=> 数字
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

condNumber ? exprNumber1 : exprNumber2;
>condNumber ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>condNumber : 数字
>类型别名 :=> 数字
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

condNumber ? exprString1 : exprString2;
>condNumber ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>condNumber : 数字
>类型别名 :=> 数字
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

condNumber ? exprIsObject1 : exprIsObject2;
>condNumber ? exprIsObject1 : exprIsObject2 : Object
>condNumber : 数字
>类型别名 :=> 数字
>exprIsObject1 : Object
>exprIsObject2 : Object

condNumber ? exprString1 : exprBoolean1; // Union
>condNumber ? exprString1 : exprBoolean1 : 文字 | 真假
>condNumber : 数字
>类型别名 :=> 数字
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Cond is a number type literal
1 ? exprAny1 : exprAny2;
>1 ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>1 : 1
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

0 ? exprBoolean1 : exprBoolean2;
>0 ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>0 : 0
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

0.123456789 ? exprNumber1 : exprNumber2;
>0.123456789 ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>0.123456789 : 0.123456789
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

- 10000000000000 ? exprString1 : exprString2;
>- 10000000000000 ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>- 10000000000000 : -10000000000000
>10000000000000 : 10000000000000
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

1000000000000 ? exprIsObject1 : exprIsObject2;
>1000000000000 ? exprIsObject1 : exprIsObject2 : Object
>1000000000000 : 1000000000000
>exprIsObject1 : Object
>exprIsObject2 : Object

10000 ? exprString1 : exprBoolean1; // Union
>10000 ? exprString1 : exprBoolean1 : 文字 | 真假
>10000 : 10000
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Cond is a number type expression
function foo() { return 1 };
>foo : () => 数字
>1 : 1

var array = [1, 2, 3];
>array : 数字[]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

1 * 0 ? exprAny1 : exprAny2;
>1 * 0 ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>1 * 0 : 数字
>类型别名 :=> 数字
>1 : 1
>0 : 0
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

1 + 1 ? exprBoolean1 : exprBoolean2;
>1 + 1 ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>1 + 1 : 数字
>类型别名 :=> 数字
>1 : 1
>1 : 1
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

"string".length ? exprNumber1 : exprNumber2;
>"string".length ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>"string".length : 数字
>类型别名 :=> 数字
>"string" : "string"
>length : 数字
>类型别名 :=> 数字
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

foo() ? exprString1 : exprString2;
>foo() ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

foo() / array[1] ? exprIsObject1 : exprIsObject2;
>foo() / array[1] ? exprIsObject1 : exprIsObject2 : Object
>foo() / array[1] : 数字
>类型别名 :=> 数字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字
>array[1] : 数字
>类型别名 :=> 数字
>array : 数字[]
>1 : 1
>exprIsObject1 : Object
>exprIsObject2 : Object

foo() ? exprString1 : exprBoolean1; // Union
>foo() ? exprString1 : exprBoolean1 : 文字 | 真假
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

//Results shoud be same as Expr1 and Expr2
var resultIsAny1 = condNumber ? exprAny1 : exprAny2;
>resultIsAny1 : 任意
>类型别名 :=> 任意
>condNumber ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>condNumber : 数字
>类型别名 :=> 数字
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean1 = condNumber ? exprBoolean1 : exprBoolean2;
>resultIsBoolean1 : 真假
>类型别名 :=> 真假
>condNumber ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>condNumber : 数字
>类型别名 :=> 数字
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber1 = condNumber ? exprNumber1 : exprNumber2;
>resultIsNumber1 : 数字
>类型别名 :=> 数字
>condNumber ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>condNumber : 数字
>类型别名 :=> 数字
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString1 = condNumber ? exprString1 : exprString2;
>resultIsString1 : 文字
>类型别名 :=> 文字
>condNumber ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>condNumber : 数字
>类型别名 :=> 数字
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject1 = condNumber ? exprIsObject1 : exprIsObject2;
>resultIsObject1 : Object
>condNumber ? exprIsObject1 : exprIsObject2 : Object
>condNumber : 数字
>类型别名 :=> 数字
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean1 = condNumber ? exprString1 : exprBoolean1; // Union
>resultIsStringOrBoolean1 : 文字 | 真假
>condNumber ? exprString1 : exprBoolean1 : 文字 | 真假
>condNumber : 数字
>类型别名 :=> 数字
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsAny2 = 1 ? exprAny1 : exprAny2;
>resultIsAny2 : 任意
>类型别名 :=> 任意
>1 ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>1 : 1
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean2 = 0 ? exprBoolean1 : exprBoolean2;
>resultIsBoolean2 : 真假
>类型别名 :=> 真假
>0 ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>0 : 0
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber2 = 0.123456789 ? exprNumber1 : exprNumber2;
>resultIsNumber2 : 数字
>类型别名 :=> 数字
>0.123456789 ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>0.123456789 : 0.123456789
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString2 = - 10000000000000 ? exprString1 : exprString2;
>resultIsString2 : 文字
>类型别名 :=> 文字
>- 10000000000000 ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>- 10000000000000 : -10000000000000
>10000000000000 : 10000000000000
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject2 = 1000000000000 ? exprIsObject1 : exprIsObject2;
>resultIsObject2 : Object
>1000000000000 ? exprIsObject1 : exprIsObject2 : Object
>1000000000000 : 1000000000000
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean2 = 10000 ? exprString1 : exprBoolean1; // Union
>resultIsStringOrBoolean2 : 文字 | 真假
>10000 ? exprString1 : exprBoolean1 : 文字 | 真假
>10000 : 10000
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

var resultIsAny3 = 1 * 0 ? exprAny1 : exprAny2;
>resultIsAny3 : 任意
>类型别名 :=> 任意
>1 * 0 ? exprAny1 : exprAny2 : 任意
>类型别名 :=> 任意
>1 * 0 : 数字
>类型别名 :=> 数字
>1 : 1
>0 : 0
>exprAny1 : 任意
>类型别名 :=> 任意
>exprAny2 : 任意
>类型别名 :=> 任意

var resultIsBoolean3 = 1 + 1 ? exprBoolean1 : exprBoolean2;
>resultIsBoolean3 : 真假
>类型别名 :=> 真假
>1 + 1 ? exprBoolean1 : exprBoolean2 : 真假
>类型别名 :=> 真假
>1 + 1 : 数字
>类型别名 :=> 数字
>1 : 1
>1 : 1
>exprBoolean1 : 真假
>类型别名 :=> 真假
>exprBoolean2 : 真假
>类型别名 :=> 真假

var resultIsNumber3 = "string".length ? exprNumber1 : exprNumber2;
>resultIsNumber3 : 数字
>类型别名 :=> 数字
>"string".length ? exprNumber1 : exprNumber2 : 数字
>类型别名 :=> 数字
>"string".length : 数字
>类型别名 :=> 数字
>"string" : "string"
>length : 数字
>类型别名 :=> 数字
>exprNumber1 : 数字
>类型别名 :=> 数字
>exprNumber2 : 数字
>类型别名 :=> 数字

var resultIsString3 = foo() ? exprString1 : exprString2;
>resultIsString3 : 文字
>类型别名 :=> 文字
>foo() ? exprString1 : exprString2 : 文字
>类型别名 :=> 文字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字
>exprString1 : 文字
>类型别名 :=> 文字
>exprString2 : 文字
>类型别名 :=> 文字

var resultIsObject3 = foo() / array[1] ? exprIsObject1 : exprIsObject2;
>resultIsObject3 : Object
>foo() / array[1] ? exprIsObject1 : exprIsObject2 : Object
>foo() / array[1] : 数字
>类型别名 :=> 数字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字
>array[1] : 数字
>类型别名 :=> 数字
>array : 数字[]
>1 : 1
>exprIsObject1 : Object
>exprIsObject2 : Object

var resultIsStringOrBoolean3 = foo() / array[1] ? exprString1 : exprBoolean1; // Union
>resultIsStringOrBoolean3 : 文字 | 真假
>foo() / array[1] ? exprString1 : exprBoolean1 : 文字 | 真假
>foo() / array[1] : 数字
>类型别名 :=> 数字
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字
>array[1] : 数字
>类型别名 :=> 数字
>array : 数字[]
>1 : 1
>exprString1 : 文字
>类型别名 :=> 文字
>exprBoolean1 : 真假
>类型别名 :=> 真假

