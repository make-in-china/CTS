=== tests/cases/compiler/es5-asyncFunctionWhileStatements.ts ===
declare var x, y, z, a, b, c;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

async function whileStatement0() {
>whileStatement0 : () => Promise<无值>

    while (x) { y; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function whileStatement1() {
>whileStatement1 : () => Promise<无值>

    while (await x) { y; }
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function whileStatement2() {
>whileStatement2 : () => Promise<无值>

    while (x) { await y; }
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function whileStatement3() {
>whileStatement3 : () => Promise<无值>

    while (x) { continue; }
>x : 任意
>类型别名 :=> 任意
}

async function whileStatement4() {
>whileStatement4 : () => Promise<无值>

    while (await x) { continue; }
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
}

async function whileStatement5() {
>whileStatement5 : () => Promise<无值>

    while (x) { await y; continue; }
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function whileStatement6() {
>whileStatement6 : () => Promise<无值>

    while (x) { if (1) continue; await y; }
>x : 任意
>类型别名 :=> 任意
>1 : 1
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function whileStatement7() {
>whileStatement7 : () => Promise<无值>

    A: while (x) { continue A; }
>A : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>A : 任意
>类型别名 :=> 任意
}

async function whileStatement8() {
>whileStatement8 : () => Promise<无值>

    B: while (await x) { continue B; }
>B : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>B : 任意
>类型别名 :=> 任意
}

async function whileStatement9() {
>whileStatement9 : () => Promise<无值>

    C: while (x) { await y; continue C; }
>C : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>C : 任意
>类型别名 :=> 任意
}

async function whileStatement10() {
>whileStatement10 : () => Promise<无值>

    D: while (x) { if (1) continue D; await y; }
>D : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>1 : 1
>D : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function whileStatement11() {
>whileStatement11 : () => Promise<无值>

    while (x) { break; }
>x : 任意
>类型别名 :=> 任意
}

async function whileStatement12() {
>whileStatement12 : () => Promise<无值>

    while (await x) { break; }
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
}

async function whileStatement13() {
>whileStatement13 : () => Promise<无值>

    while (x) { await y; break; }
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function whileStatement14() {
>whileStatement14 : () => Promise<无值>

    while (x) { if (1) break; await y; }
>x : 任意
>类型别名 :=> 任意
>1 : 1
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}

async function whileStatement15() {
>whileStatement15 : () => Promise<无值>

    E: while (x) { break E; }
>E : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>E : 任意
>类型别名 :=> 任意
}

async function whileStatement16() {
>whileStatement16 : () => Promise<无值>

    F: while (await x) { break F; }
>F : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>F : 任意
>类型别名 :=> 任意
}

async function whileStatement17() {
>whileStatement17 : () => Promise<无值>

    G: while (x) { await y; break G; }
>G : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>G : 任意
>类型别名 :=> 任意
}

async function whileStatement18() {
>whileStatement18 : () => Promise<无值>

    H: while (x) { if (1) break H; await y; }
>H : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>1 : 1
>H : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
}
