=== tests/cases/conformance/statements/VariableStatements/everyTypeWithAnnotationAndInvalidInitializer.ts ===
interface I {
>I : I

    id: number;
>id : number
>类型别名 :=> 数字
}

class C implements I {
>C : C
>I : I

    id: number;
>id : number
>类型别名 :=> 数字
}

class D<T>{
>D : D<T>
>T : T

    source: T;
>source : T
>T : T

    recurse: D<T>;
>recurse : D<T>
>D : D<T>
>T : T

    wrapped: D<D<T>>
>wrapped : D<D<T>>
>D : D<T>
>D : D<T>
>T : T
}

function F(x: string): number { return 42; }
>F : (x: string) => number
>x : string
>类型别名 :=> 文字
>42 : 42

function F2(x: number): boolean { return x < 42; }
>F2 : (x: number) => boolean
>x : number
>类型别名 :=> 数字
>x < 42 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>42 : 42

module M {
>M : typeof M

    export class A {
>A : A

        name: string;
>name : string
>类型别名 :=> 文字
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : (x: number) => string
>x : number
>类型别名 :=> 数字
>x.toString() : string
>类型别名 :=> 文字
>x.toString : (radix?: number) => string
>x : number
>类型别名 :=> 数字
>toString : (radix?: number) => string
}

module N {
>N : typeof N

    export class A {
>A : A

        id: number;
>id : number
>类型别名 :=> 数字
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : (x: number) => string
>x : number
>类型别名 :=> 数字
>x.toString() : string
>类型别名 :=> 文字
>x.toString : (radix?: number) => string
>x : number
>类型别名 :=> 数字
>toString : (radix?: number) => string
}

var aNumber: number = 'this is a string';
>aNumber : number
>类型别名 :=> 数字
>'this is a string' : "this is a string"

var aString: string = 9.9;
>aString : string
>类型别名 :=> 文字
>9.9 : 9.9

var aDate: Date = 9.9;
>aDate : Date
>Date : Date
>9.9 : 9.9

var aVoid: void = 9.9;
>aVoid : void
>类型别名 :=> 无值
>9.9 : 9.9

var anInterface: I = new D();
>anInterface : I
>I : I
>new D() : D<{}>
>D : typeof D

var aClass: C = new D();
>aClass : C
>C : C
>new D() : D<{}>
>D : typeof D

var aGenericClass: D<string> = new C();
>aGenericClass : D<string>
>D : D<T>
>new C() : C
>C : typeof C

var anObjectLiteral: I = { id: 'a string' };
>anObjectLiteral : I
>I : I
>{ id: 'a string' } : { id: string; }
>id : string
>类型别名 :=> 文字
>'a string' : "a string"

var anOtherObjectLiteral: { id: string } = new C();
>anOtherObjectLiteral : { id: string; }
>id : string
>类型别名 :=> 文字
>new C() : C
>C : typeof C

var aFunction: typeof F = F2;
>aFunction : (x: string) => number
>F : (x: string) => number
>F2 : (x: number) => boolean

var anOtherFunction: (x: string) => number = F2;
>anOtherFunction : (x: string) => number
>x : string
>类型别名 :=> 文字
>F2 : (x: number) => boolean

var aLambda: typeof F = (x) => 'a string';
>aLambda : (x: string) => number
>F : (x: string) => number
>(x) => 'a string' : (x: string) => string
>x : string
>类型别名 :=> 文字
>'a string' : "a string"

var aModule: typeof M = N;
>aModule : typeof M
>M : typeof M
>N : typeof N

var aClassInModule: M.A = new N.A();
>aClassInModule : M.A
>M : any
>类型别名 :=> 任意
>A : M.A
>new N.A() : N.A
>N.A : typeof N.A
>N : typeof N
>A : typeof N.A

var aFunctionInModule: typeof M.F2 = F2;
>aFunctionInModule : (x: number) => string
>M.F2 : (x: number) => string
>M : typeof M
>F2 : (x: number) => string
>F2 : (x: number) => boolean


