=== tests/cases/compiler/nestedBlockScopedBindings6.ts ===
function a0() {
>a0 : () => void

    for (let x of [1]) {
>x : number
>类型别名 :=> 数字
>[1] : number[]
>1 : 1

        x = x + 1;
>x = x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2
    }
}

function a1() {
>a1 : () => void

    for (let x of [1]) {
>x : number
>类型别名 :=> 数字
>[1] : number[]
>1 : 1

        x = x + 1;
>x = x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1

        () => x;
>() => x : () => number
>x : number
>类型别名 :=> 数字
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2
    }
}

function a2() {
>a2 : () => void

    for (let x of [1]) {
>x : number
>类型别名 :=> 数字
>[1] : number[]
>1 : 1

        x = x + 1;
>x = x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2

        () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意
    }
}

function a3() {
>a3 : () => void

    for (let x of [1]) {
>x : number
>类型别名 :=> 数字
>[1] : number[]
>1 : 1

        x = x + 1;
>x = x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1

        () => x;
>() => x : () => number
>x : number
>类型别名 :=> 数字
    }
    for (let x;;) {
>x : any
>类型别名 :=> 任意

        x = x + 2;
>x = x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>x + 2 : any
>类型别名 :=> 任意
>x : any
>类型别名 :=> 任意
>2 : 2

        () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意
    }
}

function a4() {
>a4 : () => void

    for (let x of [1]) {
>x : number
>类型别名 :=> 数字
>[1] : number[]
>1 : 1

        x = x + 1;
>x = x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1

        () => x;
>() => x : () => number
>x : number
>类型别名 :=> 数字
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : any
>类型别名 :=> 任意

            break;
    }
}


function a5() {
>a5 : () => void

    for (let x of [1]) {
>x : number
>类型别名 :=> 数字
>[1] : number[]
>1 : 1

        x = x + 1;
>x = x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : any
>类型别名 :=> 任意

            () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意

            break;
    }
}

function a6() {
>a6 : () => void

    for (let x of [1]) {
>x : number
>类型别名 :=> 数字
>[1] : number[]
>1 : 1

        x = x + 1;
>x = x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : any
>类型别名 :=> 任意

            break;
    }
}

function a7() {
>a7 : () => void

    for (let x of [1]) {
>x : number
>类型别名 :=> 数字
>[1] : number[]
>1 : 1

        x = x + 1;
>x = x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>x + 1 : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
>1 : 1

        () => x;
>() => x : () => number
>x : number
>类型别名 :=> 数字
    }
    switch (1) {
>1 : 1

        case 1:
>1 : 1

            let x;
>x : any
>类型别名 :=> 任意

            () => x;
>() => x : () => any
>x : any
>类型别名 :=> 任意

            break;
    }
}
