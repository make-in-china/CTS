=== tests/cases/compiler/es5-asyncFunctionForOfStatements.ts ===
declare var x, y, z, a, b, c;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

async function forOfStatement0() {
>forOfStatement0 : () => Promise<无值>

    for (x of y) { z; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement1() {
>forOfStatement1 : () => Promise<无值>

    for (x of await y) { z; }
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement2() {
>forOfStatement2 : () => Promise<无值>

    for (x of y) { await z; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement3() {
>forOfStatement3 : () => Promise<无值>

    for ((await x).a of y) { z; }
>(await x).a : 任意
>类型别名 :=> 任意
>(await x) : 任意
>类型别名 :=> 任意
>await x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement4() {
>forOfStatement4 : () => Promise<无值>

    for (x.a of await y) { z; }
>x.a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement5() {
>forOfStatement5 : () => Promise<无值>

    for (x.a of y) { await z; }
>x.a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement6() {
>forOfStatement6 : () => Promise<无值>

    for (var b of y) { z; }
>b : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement7() {
>forOfStatement7 : () => Promise<无值>

    for (var c of await y) { z; }
>c : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement8() {
>forOfStatement8 : () => Promise<无值>

    for (var d of y) { await z; }
>d : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement9() {
>forOfStatement9 : () => Promise<无值>

    for ([x] of await y) { z; }
>[x] : [任意]
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement10() {
>forOfStatement10 : () => Promise<无值>

    for ([x] of y) { await z; }
>[x] : [任意]
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement11() {
>forOfStatement11 : () => Promise<无值>

    for ([x = await a] of y) { z; }
>[x = await a] : [任意]
>x = await a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>await a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement12() {
>forOfStatement12 : () => Promise<无值>

    for ([x = a] of await y) { z; }
>[x = a] : [任意]
>x = a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement13() {
>forOfStatement13 : () => Promise<无值>

    for ([x = a] of y) { await z; }
>[x = a] : [任意]
>x = a : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement14() {
>forOfStatement14 : () => Promise<无值>

    for ({ x } of await y) { z; }
>{ x } : { x: 任意; }
>x : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement15() {
>forOfStatement15 : () => Promise<无值>

    for ({ x } of y) { await z; }
>{ x } : { x: 任意; }
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement16() {
>forOfStatement16 : () => Promise<无值>

    for ({ x = await a } of y) { z; }
>{ x = await a } : { x?: 任意; }
>x : 任意
>类型别名 :=> 任意
>await a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement17() {
>forOfStatement17 : () => Promise<无值>

    for ({ x = a } of await y) { z; }
>{ x = a } : { x?: 任意; }
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>await y : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}

async function forOfStatement18() {
>forOfStatement18 : () => Promise<无值>

    for ({ x = a } of y) { await z; }
>{ x = a } : { x?: 任意; }
>x : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>await z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
}
