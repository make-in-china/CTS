=== tests/cases/compiler/aliasUsageInGenericFunction_main.ts ===
import Backbone = require("./aliasUsageInGenericFunction_backbone");
>Backbone : 类为 Backbone

import moduleA = require("./aliasUsageInGenericFunction_moduleA");
>moduleA : 类为 moduleA

interface IHasVisualizationModel {
>IHasVisualizationModel : IHasVisualizationModel

    VisualizationModel: typeof Backbone.Model;
>VisualizationModel : 类为 Backbone.Model
>Backbone.Model : 类为 Backbone.Model
>Backbone : 类为 Backbone
>Model : 类为 Backbone.Model
}
function foo<T extends { a: IHasVisualizationModel }>(x: T) {
>foo : <T 扩展 { a: IHasVisualizationModel; }>(x: T) => T
>T : T
>a : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel
>x : T
>T : T

    return x;
>x : T
}
var r = foo({ a: moduleA });
>r : { a: 类为 moduleA; }
>foo({ a: moduleA }) : { a: 类为 moduleA; }
>foo : <T 扩展 { a: IHasVisualizationModel; }>(x: T) => T
>{ a: moduleA } : { a: 类为 moduleA; }
>a : 类为 moduleA
>moduleA : 类为 moduleA

var r2 = foo({ a: <IHasVisualizationModel>null });
>r2 : { a: IHasVisualizationModel; }
>foo({ a: <IHasVisualizationModel>null }) : { a: IHasVisualizationModel; }
>foo : <T 扩展 { a: IHasVisualizationModel; }>(x: T) => T
>{ a: <IHasVisualizationModel>null } : { a: IHasVisualizationModel; }
>a : IHasVisualizationModel
><IHasVisualizationModel>null : IHasVisualizationModel
>IHasVisualizationModel : IHasVisualizationModel
>null : 空值
>类型别名 :=> 空值

=== tests/cases/compiler/aliasUsageInGenericFunction_backbone.ts ===
export class Model {
>Model : Model

    public someData: string;
>someData : 文字
>类型别名 :=> 文字
}

=== tests/cases/compiler/aliasUsageInGenericFunction_moduleA.ts ===
import Backbone = require("./aliasUsageInGenericFunction_backbone");
>Backbone : 类为 Backbone

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : VisualizationModel
>Backbone.Model : Backbone.Model
>Backbone : 类为 Backbone
>Model : 类为 Backbone.Model

    // interesting stuff here
}

