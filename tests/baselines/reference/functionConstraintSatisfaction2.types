=== tests/cases/conformance/types/typeParameters/typeArgumentLists/functionConstraintSatisfaction2.ts ===
// satisfaction of a constraint to Function, all of these invocations are errors unless otherwise noted

function foo<T extends Function>(x: T): T { return x; }
>foo : <T 扩展 Function>(x: T) => T
>T : T
>Function : Function
>x : T
>T : T
>T : T
>x : T

foo(1);
>foo(1) : 任意
>类型别名 :=> 任意
>foo : <T 扩展 Function>(x: T) => T
>1 : 1

foo(() => { }, 1);
>foo(() => { }, 1) : 任意
>类型别名 :=> 任意
>foo : <T 扩展 Function>(x: T) => T
>() => { } : () => 无值
>1 : 1

foo(1, () => { });
>foo(1, () => { }) : 任意
>类型别名 :=> 任意
>foo : <T 扩展 Function>(x: T) => T
>1 : 1
>() => { } : () => 无值

function foo2<T extends (x: string) => string>(x: T): T { return x; }
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
>T : T
>x : 文字
>类型别名 :=> 文字
>x : T
>T : T
>T : T
>x : T

class C {
>C : C

    foo: string;
>foo : 文字
>类型别名 :=> 文字
}

var b: { new (x: string): string };
>b : 新建 (x: 文字) => 文字
>x : 文字
>类型别名 :=> 文字

class C2<T> {
>C2 : C2<T>
>T : T

    foo: T;
>foo : T
>T : T
}

var b2: { new <T>(x: T): T };
>b2 : 新建 <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

var r = foo2(new Function());
>r : 任意
>类型别名 :=> 任意
>foo2(new Function()) : 任意
>类型别名 :=> 任意
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
>new Function() : Function
>Function : FunctionConstructor

var r2 = foo2((x: string[]) => x);
>r2 : 任意
>类型别名 :=> 任意
>foo2((x: string[]) => x) : 任意
>类型别名 :=> 任意
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
>(x: string[]) => x : (x: 文字[]) => 文字[]
>x : 文字[]
>x : 文字[]

var r6 = foo2(C);
>r6 : 任意
>类型别名 :=> 任意
>foo2(C) : 任意
>类型别名 :=> 任意
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
>C : 类为 C

var r7 = foo2(b);
>r7 : 任意
>类型别名 :=> 任意
>foo2(b) : 任意
>类型别名 :=> 任意
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
>b : 新建 (x: 文字) => 文字

var r8 = foo2(<U>(x: U) => x); // no error expected
>r8 : (x: 文字) => 文字
>foo2(<U>(x: U) => x) : (x: 文字) => 文字
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
><U>(x: U) => x : <U>(x: U) => U
>U : U
>x : U
>U : U
>x : U

var r11 = foo2(<U, V>(x: U, y: V) => x);
>r11 : 任意
>类型别名 :=> 任意
>foo2(<U, V>(x: U, y: V) => x) : 任意
>类型别名 :=> 任意
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
><U, V>(x: U, y: V) => x : <U, V>(x: U, y: V) => U
>U : U
>V : V
>x : U
>U : U
>y : V
>V : V
>x : U

var r13 = foo2(C2);
>r13 : 任意
>类型别名 :=> 任意
>foo2(C2) : 任意
>类型别名 :=> 任意
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
>C2 : 类为 C2

var r14 = foo2(b2);
>r14 : 任意
>类型别名 :=> 任意
>foo2(b2) : 任意
>类型别名 :=> 任意
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
>b2 : 新建 <T>(x: T) => T

interface F2 extends Function { foo: string; }
>F2 : F2
>Function : Function
>foo : 文字
>类型别名 :=> 文字

var f2: F2;
>f2 : F2
>F2 : F2

var r16 = foo2(f2);
>r16 : 任意
>类型别名 :=> 任意
>foo2(f2) : 任意
>类型别名 :=> 任意
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
>f2 : F2

function fff<T extends { (): void }, U extends T>(x: T, y: U) {
>fff : <T 扩展 () => 无值, U 扩展 T>(x: T, y: U) => 无值
>T : T
>U : U
>T : T
>x : T
>T : T
>y : U
>U : U

    foo2(x);
>foo2(x) : 任意
>类型别名 :=> 任意
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
>x : T

    foo2(y);
>foo2(y) : 任意
>类型别名 :=> 任意
>foo2 : <T 扩展 (x: 文字) => 文字>(x: T) => T
>y : U
}

