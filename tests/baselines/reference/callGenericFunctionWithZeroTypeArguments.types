=== tests/cases/conformance/types/typeParameters/typeArgumentLists/callGenericFunctionWithZeroTypeArguments.ts ===
// valid invocations of generic functions with no explicit type arguments provided 

function f<T>(x: T): T { return null; }
>f : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
>null : 空值
>类型别名 :=> 空值

var r = f(1);
>r : 数字
>类型别名 :=> 数字
>f(1) : 1
>f : <T>(x: T) => T
>1 : 1

var f2 = <T>(x: T): T => { return null; }
>f2 : <T>(x: T) => T
><T>(x: T): T => { return null; } : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
>null : 空值
>类型别名 :=> 空值

var r2 = f2(1);
>r2 : 数字
>类型别名 :=> 数字
>f2(1) : 1
>f2 : <T>(x: T) => T
>1 : 1

var f3: { <T>(x: T): T; }
>f3 : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

var r3 = f3(1);
>r3 : 数字
>类型别名 :=> 数字
>f3(1) : 1
>f3 : <T>(x: T) => T
>1 : 1

class C {
>C : C

    f<T>(x: T): T {
>f : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}
var r4 = (new C()).f(1);
>r4 : 数字
>类型别名 :=> 数字
>(new C()).f(1) : 1
>(new C()).f : <T>(x: T) => T
>(new C()) : C
>new C() : C
>C : 类为 C
>f : <T>(x: T) => T
>1 : 1

interface I {
>I : I

    f<T>(x: T): T;
>f : <T>(x: T) => T
>T : T
>x : T
>T : T
>T : T
}
var i: I;
>i : I
>I : I

var r5 = i.f(1);
>r5 : 数字
>类型别名 :=> 数字
>i.f(1) : 1
>i.f : <T>(x: T) => T
>i : I
>f : <T>(x: T) => T
>1 : 1

class C2<T> {
>C2 : C2<T>
>T : T

    f(x: T): T {
>f : (x: T) => T
>x : T
>T : T
>T : T

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}
var r6 = (new C2()).f(1);
>r6 : {}
>(new C2()).f(1) : {}
>(new C2()).f : (x: {}) => {}
>(new C2()) : C2<{}>
>new C2() : C2<{}>
>C2 : 类为 C2
>f : (x: {}) => {}
>1 : 1

interface I2<T> {
>I2 : I2<T>
>T : T

    f(x: T): T;
>f : (x: T) => T
>x : T
>T : T
>T : T
}
var i2: I2<number>;
>i2 : I2<数字>
>I2 : I2<T>

var r7 = i2.f(1);
>r7 : 数字
>类型别名 :=> 数字
>i2.f(1) : 数字
>类型别名 :=> 数字
>i2.f : (x: 数字) => 数字
>i2 : I2<数字>
>f : (x: 数字) => 数字
>1 : 1

