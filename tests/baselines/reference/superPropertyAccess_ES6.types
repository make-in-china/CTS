=== tests/cases/compiler/superPropertyAccess_ES6.ts ===
class MyBase {
>MyBase : MyBase

  getValue(): number { return 1; }
>getValue : () => 数字
>1 : 1

  get value(): number { return 1; }
>value : 数字
>类型别名 :=> 数字
>1 : 1
}

class MyDerived extends MyBase {
>MyDerived : MyDerived
>MyBase : MyBase

  constructor() {
    super();
>super() : 无值
>类型别名 :=> 无值
>super : 类为 MyBase

    const f1 = super.getValue();
>f1 : 数字
>类型别名 :=> 数字
>super.getValue() : 数字
>类型别名 :=> 数字
>super.getValue : () => 数字
>super : MyBase
>getValue : () => 数字

    const f2 = super.value;
>f2 : 数字
>类型别名 :=> 数字
>super.value : 数字
>类型别名 :=> 数字
>super : MyBase
>value : 数字
>类型别名 :=> 数字
  }
}

var d = new MyDerived();
>d : MyDerived
>new MyDerived() : MyDerived
>MyDerived : 类为 MyDerived

var f3 = d.value;
>f3 : 数字
>类型别名 :=> 数字
>d.value : 数字
>类型别名 :=> 数字
>d : MyDerived
>value : 数字
>类型别名 :=> 数字

class A {
>A : A

    private _property: string;
>_property : 文字
>类型别名 :=> 文字

    get property() { return this._property; }
>property : 文字
>类型别名 :=> 文字
>this._property : 文字
>类型别名 :=> 文字
>this : 本体
>_property : 文字
>类型别名 :=> 文字

    set property(value: string) { this._property = value }
>property : 文字
>类型别名 :=> 文字
>value : 文字
>类型别名 :=> 文字
>this._property = value : 文字
>类型别名 :=> 文字
>this._property : 文字
>类型别名 :=> 文字
>this : 本体
>_property : 文字
>类型别名 :=> 文字
>value : 文字
>类型别名 :=> 文字
}

class B extends A {
>B : B
>A : A

    set property(value: string) {
>property : 文字
>类型别名 :=> 文字
>value : 文字
>类型别名 :=> 文字

        super.property = value + " addition";
>super.property = value + " addition" : 文字
>类型别名 :=> 文字
>super.property : 文字
>类型别名 :=> 文字
>super : A
>property : 文字
>类型别名 :=> 文字
>value + " addition" : 文字
>类型别名 :=> 文字
>value : 文字
>类型别名 :=> 文字
>" addition" : " addition"
    }
}
