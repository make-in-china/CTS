=== tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedAndNonExportedClassesOfTheSameName.ts ===
module A {
>A : typeof A

    export class Point {
>Point : Point

        x: number;
>x : number
>类型别名 :=> 数字

        y: number;
>y : number
>类型别名 :=> 数字
    }
}

module A {
>A : typeof A

    class Point {
>Point : Point

        fromCarthesian(p: A.Point) {
>fromCarthesian : (p: A.Point) => { x: number; y: number; }
>p : A.Point
>A : any
>类型别名 :=> 任意
>Point : A.Point

            return { x: p.x, y: p.y };
>{ x: p.x, y: p.y } : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>p.x : number
>类型别名 :=> 数字
>p : A.Point
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>p.y : number
>类型别名 :=> 数字
>p : A.Point
>y : number
>类型别名 :=> 数字
        }
    }
}

// ensure merges as expected
var p: { x: number; y: number; };
>p : { x: number; y: number; }
>x : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字

var p: A.Point;
>p : { x: number; y: number; }
>A : any
>类型别名 :=> 任意
>Point : A.Point

module X.Y.Z {
>X : typeof X
>Y : typeof Y
>Z : typeof Z

    export class Line {
>Line : Line

        length: number;
>length : number
>类型别名 :=> 数字
    }
}

module X {
>X : typeof X

    export module Y {
>Y : typeof Y

        export module Z {
>Z : typeof Z

            class Line {
>Line : Line

                name: string;
>name : string
>类型别名 :=> 文字
            }
        }
    }
}

// ensure merges as expected
var l: { length: number; }
>l : { length: number; }
>length : number
>类型别名 :=> 数字

var l: X.Y.Z.Line;
>l : { length: number; }
>X : any
>类型别名 :=> 任意
>Y : any
>类型别名 :=> 任意
>Z : any
>类型别名 :=> 任意
>Line : X.Y.Z.Line


