=== tests/cases/compiler/targetTypeArgs.ts ===
function foo(callback: (x: string) => void) {
>foo : (callback: (x: string) => void) => void
>callback : (x: string) => void
>x : string
>类型别名 :=> 文字

    callback("hello");   
>callback("hello") : void
>类型别名 :=> 无值
>callback : (x: string) => void
>"hello" : "hello"
}

foo(function(x) { x });
>foo(function(x) { x }) : void
>类型别名 :=> 无值
>foo : (callback: (x: string) => void) => void
>function(x) { x } : (x: string) => void
>x : string
>类型别名 :=> 文字
>x : string
>类型别名 :=> 文字

[1].forEach(function(v,i,a) { v });
>[1].forEach(function(v,i,a) { v }) : void
>类型别名 :=> 无值
>[1].forEach : (callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void
>[1] : number[]
>1 : 1
>forEach : (callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void
>function(v,i,a) { v } : (v: number, i: number, a: number[]) => void
>v : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>a : number[]
>v : number
>类型别名 :=> 数字

["hello"].every(function(v,i,a) {return true;});
>["hello"].every(function(v,i,a) {return true;}) : boolean
>类型别名 :=> 真假
>["hello"].every : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>["hello"] : string[]
>"hello" : "hello"
>every : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>function(v,i,a) {return true;} : (v: string, i: number, a: string[]) => true
>v : string
>类型别名 :=> 文字
>i : number
>类型别名 :=> 数字
>a : string[]
>true : true
>类型别名 :=> 为真

[1].every(function(v,i,a) {return true;});
>[1].every(function(v,i,a) {return true;}) : boolean
>类型别名 :=> 真假
>[1].every : (callbackfn: (value: number, index: number, array: number[]) => boolean, thisArg?: any) => boolean
>[1] : number[]
>1 : 1
>every : (callbackfn: (value: number, index: number, array: number[]) => boolean, thisArg?: any) => boolean
>function(v,i,a) {return true;} : (v: number, i: number, a: number[]) => true
>v : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>a : number[]
>true : true
>类型别名 :=> 为真

[1].every(function(v,i,a) {return true;});
>[1].every(function(v,i,a) {return true;}) : boolean
>类型别名 :=> 真假
>[1].every : (callbackfn: (value: number, index: number, array: number[]) => boolean, thisArg?: any) => boolean
>[1] : number[]
>1 : 1
>every : (callbackfn: (value: number, index: number, array: number[]) => boolean, thisArg?: any) => boolean
>function(v,i,a) {return true;} : (v: number, i: number, a: number[]) => true
>v : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字
>a : number[]
>true : true
>类型别名 :=> 为真

["s"].every(function(v,i,a) {return true;});
>["s"].every(function(v,i,a) {return true;}) : boolean
>类型别名 :=> 真假
>["s"].every : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>["s"] : string[]
>"s" : "s"
>every : (callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any) => boolean
>function(v,i,a) {return true;} : (v: string, i: number, a: string[]) => true
>v : string
>类型别名 :=> 文字
>i : number
>类型别名 :=> 数字
>a : string[]
>true : true
>类型别名 :=> 为真

["s"].forEach(function(v,i,a) { v });
>["s"].forEach(function(v,i,a) { v }) : void
>类型别名 :=> 无值
>["s"].forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>["s"] : string[]
>"s" : "s"
>forEach : (callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void
>function(v,i,a) { v } : (v: string, i: number, a: string[]) => void
>v : string
>类型别名 :=> 文字
>i : number
>类型别名 :=> 数字
>a : string[]
>v : string
>类型别名 :=> 文字


