=== tests/cases/conformance/types/thisType/thisTypeErrors.ts ===
var x1: this;
>x1 : 任意
>类型别名 :=> 任意

var x2: { a: this };
>x2 : { a: 任意; }
>a : 任意
>类型别名 :=> 任意

var x3: this[];
>x3 : 任意[]

function f1(x: this): this {
>f1 : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

    var y: this;
>y : 任意
>类型别名 :=> 任意

    return this;
>this : 任意
>类型别名 :=> 任意
}

interface I1 {
>I1 : I1

    a: { x: this };
>a : { x: 任意; }
>x : 任意
>类型别名 :=> 任意

    b: { (): this };
>b : () => 任意

    c: { new (): this };
>c : 新建 () => 任意

    d: { [x: string]: this };
>d : { [x: 文字]: 任意; }
>x : 文字
>类型别名 :=> 文字

    e: { f(x: this): this };
>e : { f(x: 任意): 任意; }
>f : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
}

class C1 {
>C1 : C1

    a: { x: this };
>a : { x: 任意; }
>x : 任意
>类型别名 :=> 任意

    b: { (): this };
>b : () => 任意

    c: { new (): this };
>c : 新建 () => 任意

    d: { [x: string]: this };
>d : { [x: 文字]: 任意; }
>x : 文字
>类型别名 :=> 文字

    e: { f(x: this): this };
>e : { f(x: 任意): 任意; }
>f : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
}

class C2 {
>C2 : C2

    static x: this;
>x : 任意
>类型别名 :=> 任意

    static y = <this>undefined;
>y : 任意
>类型别名 :=> 任意
><this>undefined : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

    static foo(x: this): this {
>foo : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

        return undefined;
>undefined : 未定
>类型别名 :=> 未定
    }
}

namespace N1 {
>N1 : 类为 N1

    export var x: this;
>x : 任意
>类型别名 :=> 任意

    export var y = this;
>y : 任意
>类型别名 :=> 任意
>this : 任意
>类型别名 :=> 任意
}

class C3 {
>C3 : C3

    x1 = {
>x1 : { g(x: 任意): 任意; }
>{        g(x: this): this {            return undefined;        }    } : { g(x: 任意): 任意; }

        g(x: this): this {
>g : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

            return undefined;
>undefined : 未定
>类型别名 :=> 未定
        }
    }
    f() {
>f : () => 无值

        function g(x: this): this {
>g : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

            return undefined;
>undefined : 未定
>类型别名 :=> 未定
        }
        let x2 = {
>x2 : { h(x: 任意): 任意; }
>{            h(x: this): this {                return undefined;            }        } : { h(x: 任意): 任意; }

            h(x: this): this {
>h : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意

                return undefined;
>undefined : 未定
>类型别名 :=> 未定
            }
        }
    }
}

