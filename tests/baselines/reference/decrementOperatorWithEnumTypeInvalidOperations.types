=== tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithEnumTypeInvalidOperations.ts ===
// -- operator on enum type

enum ENUM { };
>ENUM : ENUM

enum ENUM1 { A, B, "" };
>ENUM1 : ENUM1
>A : ENUM1.A
>B : ENUM1.B

// enum type var
var ResultIsNumber1 = --ENUM;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>--ENUM : 数字
>类型别名 :=> 数字
>ENUM : 任意
>类型别名 :=> 任意

var ResultIsNumber2 = --ENUM1;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>--ENUM1 : 数字
>类型别名 :=> 数字
>ENUM1 : 任意
>类型别名 :=> 任意

var ResultIsNumber3 = ENUM--;
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>ENUM-- : 数字
>类型别名 :=> 数字
>ENUM : 任意
>类型别名 :=> 任意

var ResultIsNumber4 = ENUM1--;
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>ENUM1-- : 数字
>类型别名 :=> 数字
>ENUM1 : 任意
>类型别名 :=> 任意

// enum type expressions
var ResultIsNumber5 = --(ENUM["A"] + ENUM.B);
>ResultIsNumber5 : 数字
>类型别名 :=> 数字
>--(ENUM["A"] + ENUM.B) : 数字
>类型别名 :=> 数字
>(ENUM["A"] + ENUM.B) : 任意
>类型别名 :=> 任意
>ENUM["A"] + ENUM.B : 任意
>类型别名 :=> 任意
>ENUM["A"] : 任意
>类型别名 :=> 任意
>ENUM : 类为 ENUM
>"A" : "A"
>ENUM.B : 任意
>类型别名 :=> 任意
>ENUM : 类为 ENUM
>B : 任意
>类型别名 :=> 任意

var ResultIsNumber6 = (ENUM.A + ENUM["B"])--;
>ResultIsNumber6 : 数字
>类型别名 :=> 数字
>(ENUM.A + ENUM["B"])-- : 数字
>类型别名 :=> 数字
>(ENUM.A + ENUM["B"]) : 任意
>类型别名 :=> 任意
>ENUM.A + ENUM["B"] : 任意
>类型别名 :=> 任意
>ENUM.A : 任意
>类型别名 :=> 任意
>ENUM : 类为 ENUM
>A : 任意
>类型别名 :=> 任意
>ENUM["B"] : 任意
>类型别名 :=> 任意
>ENUM : 类为 ENUM
>"B" : "B"

// miss assignment operator
--ENUM;
>--ENUM : 数字
>类型别名 :=> 数字
>ENUM : 任意
>类型别名 :=> 任意

--ENUM1;
>--ENUM1 : 数字
>类型别名 :=> 数字
>ENUM1 : 任意
>类型别名 :=> 任意

ENUM--;
>ENUM-- : 数字
>类型别名 :=> 数字
>ENUM : 任意
>类型别名 :=> 任意

ENUM1--;
>ENUM1-- : 数字
>类型别名 :=> 数字
>ENUM1 : 任意
>类型别名 :=> 任意

