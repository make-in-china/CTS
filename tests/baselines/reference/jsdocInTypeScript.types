=== tests/cases/compiler/jsdocInTypeScript.ts ===
// JSDoc typedef tags are not bound TypeScript files.
/** @typedef {function} T */
declare const x: T;
>x : T
>T : T

class T {
>T : T

    prop: number;
>prop : 数字
>类型别名 :=> 数字
}

x.prop;
>x.prop : 数字
>类型别名 :=> 数字
>x : T
>prop : 数字
>类型别名 :=> 数字

// Just to be sure that @property has no impact either.
/**
 * @typedef {Object} MyType
 * @property {string} yes
 */
declare const myType: MyType; // should error, no such type
>myType : 任意
>类型别名 :=> 任意
>MyType : No type information available!

// @param type has no effect.
/**
 * @param {number} x
 * @returns string
 */
function f(x: boolean) { return x * 2; } // Should error
>f : (x: 真假) => 数字
>x : 真假
>类型别名 :=> 真假
>x * 2 : 数字
>类型别名 :=> 数字
>x : 真假
>类型别名 :=> 真假
>2 : 2

// Should fail, because it takes a boolean and returns a number
f(1); f(true).length;
>f(1) : 数字
>类型别名 :=> 数字
>f : (x: 真假) => 数字
>1 : 1
>f(true).length : 任意
>类型别名 :=> 任意
>f(true) : 数字
>类型别名 :=> 数字
>f : (x: 真假) => 数字
>true : 为真
>类型别名 :=> 为真
>length : 任意
>类型别名 :=> 任意

// @type has no effect either.
/** @type {{ x?: number }} */
const z = {};
>z : {}
>{} : {}

z.x = 1; // Error
>z.x = 1 : 1
>z.x : 任意
>类型别名 :=> 任意
>z : {}
>x : 任意
>类型别名 :=> 任意
>1 : 1

// @template tag should not interfere with constraint or default.
/** @template T */
interface I<T extends number = 0> {}
>I : I<T>
>T : T

/** @template T */
function tem<T extends number>(t: T): I<T> { return {}; }
>tem : <T 扩展 数字>(t: T) => I<T>
>T : T
>t : T
>T : T
>I : I<T>
>T : T
>{} : {}

let i: I; // Should succeed thanks to type parameter default
>i : I<0>
>I : I<T>

/** @typedef {string} N.Str */
import M = N; // Error: @typedef does not create namespaces in TypeScript code.
>M : 任意
>类型别名 :=> 任意
>N : No type information available!

// Not legal JSDoc, but that shouldn't matter in TypeScript.
/**
 * @type {{foo: (function(string, string): string)}}
 */
const obj = { foo: (a, b) => a + b };
>obj : { foo: (a: 任意, b: 任意) => 任意; }
>{ foo: (a, b) => a + b } : { foo: (a: 任意, b: 任意) => 任意; }
>foo : (a: 任意, b: 任意) => 任意
>(a, b) => a + b : (a: 任意, b: 任意) => 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意
>a + b : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

