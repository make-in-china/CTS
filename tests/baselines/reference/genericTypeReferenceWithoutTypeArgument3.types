=== tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument3.ts ===
// it is an error to use a generic type without type arguments
// all of these are errors 

declare class C<T> {
>C : C<T>
>T : T

    foo: T;
>foo : T
>T : T
}

declare var c: C;
>c : 任意
>类型别名 :=> 任意
>C : C<T>

declare var a: { x: C };
>a : { x: 任意; }
>x : 任意
>类型别名 :=> 任意
>C : C<T>

declare var b: { (x: C): C };
>b : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>C : C<T>
>C : C<T>

declare var d: { [x: C]: C };
>d : {}
>x : 任意
>类型别名 :=> 任意
>C : C<T>
>C : C<T>

declare function f(x: C): C;
>f : (x: 任意) => 任意
>x : 任意
>类型别名 :=> 任意
>C : C<T>
>C : C<T>

declare class D extends C {}
>D : D
>C : 类为 C

declare module M {
>M : 类为 M

    export class E<T> { foo: T }
>E : E<T>
>T : T
>foo : T
>T : T
}

declare class D2 extends M.C { }
>D2 : D2
>M.C : 任意
>类型别名 :=> 任意
>M : 类为 M
>C : 任意
>类型别名 :=> 任意

declare class D3<T extends M.E> { }
>D3 : D3<T>
>T : T
>M : 任意
>类型别名 :=> 任意
>E : M.E<T>

declare function h<T extends C>(x: T);
>h : <T 扩展 任意>(x: T) => 任意
>T : T
>C : C<T>
>x : T
>T : T

declare function i<T extends M.E>(x: T);
>i : <T 扩展 任意>(x: T) => 任意
>T : T
>M : 任意
>类型别名 :=> 任意
>E : M.E<T>
>x : T
>T : T

