=== tests/cases/conformance/classes/constructorDeclarations/classConstructorAccessibility2.ts ===
class BaseA {
>BaseA : BaseA

    public constructor(public x: number) { }
>x : 数字
>类型别名 :=> 数字

    createInstance() { new BaseA(1); }
>createInstance : () => 无值
>new BaseA(1) : BaseA
>BaseA : 类为 BaseA
>1 : 1
}

class BaseB {
>BaseB : BaseB

    protected constructor(public x: number) { }
>x : 数字
>类型别名 :=> 数字

    createInstance() { new BaseB(2); }
>createInstance : () => 无值
>new BaseB(2) : BaseB
>BaseB : 类为 BaseB
>2 : 2
}

class BaseC {
>BaseC : BaseC

    private constructor(public x: number) { }
>x : 数字
>类型别名 :=> 数字

    createInstance() { new BaseC(3); }
>createInstance : () => 无值
>new BaseC(3) : BaseC
>BaseC : 类为 BaseC
>3 : 3

    static staticInstance() { new BaseC(4); }
>staticInstance : () => 无值
>new BaseC(4) : BaseC
>BaseC : 类为 BaseC
>4 : 4
}

class DerivedA extends BaseA {
>DerivedA : DerivedA
>BaseA : BaseA

    constructor(public x: number) { super(x); }
>x : 数字
>类型别名 :=> 数字
>super(x) : 无值
>类型别名 :=> 无值
>super : 类为 BaseA
>x : 数字
>类型别名 :=> 数字

    createInstance() { new DerivedA(5); }
>createInstance : () => 无值
>new DerivedA(5) : DerivedA
>DerivedA : 类为 DerivedA
>5 : 5

    createBaseInstance() { new BaseA(6); }
>createBaseInstance : () => 无值
>new BaseA(6) : BaseA
>BaseA : 类为 BaseA
>6 : 6

    static staticBaseInstance() { new BaseA(7); }
>staticBaseInstance : () => 无值
>new BaseA(7) : BaseA
>BaseA : 类为 BaseA
>7 : 7
}

class DerivedB extends BaseB {
>DerivedB : DerivedB
>BaseB : BaseB

    constructor(public x: number) { super(x); }
>x : 数字
>类型别名 :=> 数字
>super(x) : 无值
>类型别名 :=> 无值
>super : 类为 BaseB
>x : 数字
>类型别名 :=> 数字

    createInstance() { new DerivedB(7); }
>createInstance : () => 无值
>new DerivedB(7) : DerivedB
>DerivedB : 类为 DerivedB
>7 : 7

    createBaseInstance() { new BaseB(8); } // ok
>createBaseInstance : () => 无值
>new BaseB(8) : BaseB
>BaseB : 类为 BaseB
>8 : 8

    static staticBaseInstance() { new BaseB(9); } // ok
>staticBaseInstance : () => 无值
>new BaseB(9) : BaseB
>BaseB : 类为 BaseB
>9 : 9
}

class DerivedC extends BaseC { // error
>DerivedC : DerivedC
>BaseC : BaseC

    constructor(public x: number) { super(x); }
>x : 数字
>类型别名 :=> 数字
>super(x) : 无值
>类型别名 :=> 无值
>super : 类为 BaseC
>x : 数字
>类型别名 :=> 数字

    createInstance() { new DerivedC(9); }
>createInstance : () => 无值
>new DerivedC(9) : DerivedC
>DerivedC : 类为 DerivedC
>9 : 9

    createBaseInstance() { new BaseC(10); } // error
>createBaseInstance : () => 无值
>new BaseC(10) : 任意
>类型别名 :=> 任意
>BaseC : 类为 BaseC
>10 : 10

    static staticBaseInstance() { new BaseC(11); } // error
>staticBaseInstance : () => 无值
>new BaseC(11) : 任意
>类型别名 :=> 任意
>BaseC : 类为 BaseC
>11 : 11
}

var ba = new BaseA(1);
>ba : BaseA
>new BaseA(1) : BaseA
>BaseA : 类为 BaseA
>1 : 1

var bb = new BaseB(1); // error
>bb : 任意
>类型别名 :=> 任意
>new BaseB(1) : 任意
>类型别名 :=> 任意
>BaseB : 类为 BaseB
>1 : 1

var bc = new BaseC(1); // error
>bc : 任意
>类型别名 :=> 任意
>new BaseC(1) : 任意
>类型别名 :=> 任意
>BaseC : 类为 BaseC
>1 : 1

var da = new DerivedA(1);
>da : DerivedA
>new DerivedA(1) : DerivedA
>DerivedA : 类为 DerivedA
>1 : 1

var db = new DerivedB(1);
>db : DerivedB
>new DerivedB(1) : DerivedB
>DerivedB : 类为 DerivedB
>1 : 1

var dc = new DerivedC(1);
>dc : DerivedC
>new DerivedC(1) : DerivedC
>DerivedC : 类为 DerivedC
>1 : 1

