=== tests/cases/compiler/sourceMapValidationDecorators.ts ===
declare function ClassDecorator1(target: Function): void;
>ClassDecorator1 : (target: Function) => 无值
>target : Function
>Function : Function

declare function ClassDecorator2(x: number): (target: Function) => void;
>ClassDecorator2 : (x: 数字) => (target: Function) => 无值
>x : 数字
>类型别名 :=> 数字
>target : Function
>Function : Function

declare function PropertyDecorator1(target: Object, key: string | symbol, descriptor?: PropertyDescriptor): void;
>PropertyDecorator1 : (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值
>target : Object
>Object : Object
>key : 文字 | 符号
>descriptor : PropertyDescriptor
>PropertyDescriptor : PropertyDescriptor

declare function PropertyDecorator2(x: number): (target: Object, key: string | symbol, descriptor?: PropertyDescriptor) => void;
>PropertyDecorator2 : (x: 数字) => (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值
>x : 数字
>类型别名 :=> 数字
>target : Object
>Object : Object
>key : 文字 | 符号
>descriptor : PropertyDescriptor
>PropertyDescriptor : PropertyDescriptor

declare function ParameterDecorator1(target: Object, key: string | symbol, paramIndex: number): void;
>ParameterDecorator1 : (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值
>target : Object
>Object : Object
>key : 文字 | 符号
>paramIndex : 数字
>类型别名 :=> 数字

declare function ParameterDecorator2(x: number): (target: Object, key: string | symbol, paramIndex: number) => void;
>ParameterDecorator2 : (x: 数字) => (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>target : Object
>Object : Object
>key : 文字 | 符号
>paramIndex : 数字
>类型别名 :=> 数字

@ClassDecorator1
>ClassDecorator1 : (target: Function) => 无值

@ClassDecorator2(10)
>ClassDecorator2(10) : (target: Function) => 无值
>ClassDecorator2 : (x: 数字) => (target: Function) => 无值
>10 : 10

class Greeter {
>Greeter : Greeter

    constructor(
      @ParameterDecorator1 
>ParameterDecorator1 : (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值

      @ParameterDecorator2(20) 
>ParameterDecorator2(20) : (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值
>ParameterDecorator2 : (x: 数字) => (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值
>20 : 20

      public greeting: string, 
>greeting : 文字
>类型别名 :=> 文字
      
      @ParameterDecorator1 
>ParameterDecorator1 : (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值

      @ParameterDecorator2(30) 
>ParameterDecorator2(30) : (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值
>ParameterDecorator2 : (x: 数字) => (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值
>30 : 30

      ...b: string[]) {
>b : 文字[]
    }
    
    @PropertyDecorator1
>PropertyDecorator1 : (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值

    @PropertyDecorator2(40)
>PropertyDecorator2(40) : (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值
>PropertyDecorator2 : (x: 数字) => (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值
>40 : 40

    greet() {
>greet : () => 文字

        return "<h1>" + this.greeting + "</h1>";
>"<h1>" + this.greeting + "</h1>" : 文字
>类型别名 :=> 文字
>"<h1>" + this.greeting : 文字
>类型别名 :=> 文字
>"<h1>" : "<h1>"
>this.greeting : 文字
>类型别名 :=> 文字
>this : 本体
>greeting : 文字
>类型别名 :=> 文字
>"</h1>" : "</h1>"
    }

    @PropertyDecorator1
>PropertyDecorator1 : (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值

    @PropertyDecorator2(50)
>PropertyDecorator2(50) : (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值
>PropertyDecorator2 : (x: 数字) => (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值
>50 : 50

    private x: string;
>x : 文字
>类型别名 :=> 文字

    @PropertyDecorator1
>PropertyDecorator1 : (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值

    @PropertyDecorator2(60)
>PropertyDecorator2(60) : (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值
>PropertyDecorator2 : (x: 数字) => (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值
>60 : 60

    private static x1: number = 10;
>x1 : 数字
>类型别名 :=> 数字
>10 : 10
    
    private fn(
>fn : (x: 数字) => 文字

      @ParameterDecorator1 
>ParameterDecorator1 : (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值

      @ParameterDecorator2(70) 
>ParameterDecorator2(70) : (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值
>ParameterDecorator2 : (x: 数字) => (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值
>70 : 70

      x: number) {
>x : 数字
>类型别名 :=> 数字

        return this.greeting;
>this.greeting : 文字
>类型别名 :=> 文字
>this : 本体
>greeting : 文字
>类型别名 :=> 文字
    }

    @PropertyDecorator1
>PropertyDecorator1 : (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值

    @PropertyDecorator2(80)
>PropertyDecorator2(80) : (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值
>PropertyDecorator2 : (x: 数字) => (target: Object, key: 文字 | 符号, descriptor?: PropertyDescriptor) => 无值
>80 : 80

    get greetings() {
>greetings : 文字
>类型别名 :=> 文字

        return this.greeting;
>this.greeting : 文字
>类型别名 :=> 文字
>this : 本体
>greeting : 文字
>类型别名 :=> 文字
    }

    set greetings(
>greetings : 文字
>类型别名 :=> 文字

      @ParameterDecorator1 
>ParameterDecorator1 : (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值

      @ParameterDecorator2(90) 
>ParameterDecorator2(90) : (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值
>ParameterDecorator2 : (x: 数字) => (target: Object, key: 文字 | 符号, paramIndex: 数字) => 无值
>90 : 90

      greetings: string) {
>greetings : 文字
>类型别名 :=> 文字

        this.greeting = greetings;
>this.greeting = greetings : 文字
>类型别名 :=> 文字
>this.greeting : 文字
>类型别名 :=> 文字
>this : 本体
>greeting : 文字
>类型别名 :=> 文字
>greetings : 文字
>类型别名 :=> 文字
    }    
}
