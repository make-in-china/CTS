=== tests/cases/compiler/implicitAnyFromCircularInference.ts ===
// Error expected
var a: typeof a;
>a : 任意
>类型别名 :=> 任意
>a : 任意
>类型别名 :=> 任意

// Error expected on b or c
var b: typeof c;
>b : 任意
>类型别名 :=> 任意
>c : 任意
>类型别名 :=> 任意

var c: typeof b;
>c : 任意
>类型别名 :=> 任意
>b : 任意
>类型别名 :=> 任意

// Error expected
var d: Array<typeof d>;
>d : 任意
>类型别名 :=> 任意
>Array : T[]
>d : 任意
>类型别名 :=> 任意

function f() { return f; }
>f : () => 类为 f
>f : () => 类为 f

// Error expected
function g() { return g(); }
>g : () => 任意
>g() : 任意
>类型别名 :=> 任意
>g : () => 任意

// Error expected
var f1 = function () {
>f1 : () => 任意
>function () {    return f1();} : () => 任意

    return f1();
>f1() : 任意
>类型别名 :=> 任意
>f1 : () => 任意

};

// Error expected
var f2 = () => f2();
>f2 : () => 任意
>() => f2() : () => 任意
>f2() : 任意
>类型别名 :=> 任意
>f2 : () => 任意

// Error expected
function h() {
>h : () => 任意

    return foo();
>foo() : 任意
>类型别名 :=> 任意
>foo : () => 任意

    function foo() {
>foo : () => 任意

        return h() || "hello";
>h() || "hello" : 任意
>类型别名 :=> 任意
>h() : 任意
>类型别名 :=> 任意
>h : () => 任意
>"hello" : "hello"
    }
}

interface A {
>A : A

    s: string;
>s : 文字
>类型别名 :=> 文字
}

function foo(x: A): string { return "abc"; }
>foo : (x: A) => 文字
>x : A
>A : A
>"abc" : "abc"

class C {
>C : C

    // Error expected
    s = foo(this);
>s : 文字
>类型别名 :=> 文字
>foo(this) : 文字
>类型别名 :=> 文字
>foo : (x: A) => 文字
>this : 本体
}

class D {
>D : D

    // Error expected
    get x() {
>x : 任意
>类型别名 :=> 任意

        return this.x;
>this.x : 任意
>类型别名 :=> 任意
>this : 本体
>x : 任意
>类型别名 :=> 任意
    }
}

