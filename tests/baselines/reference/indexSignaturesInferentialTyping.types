=== tests/cases/compiler/indexSignaturesInferentialTyping.ts ===
function foo<T>(items: { [index: number]: T }): T { return undefined; }
>foo : <T>(items: { [index: number]: T; }) => T
>T : T
>items : { [index: number]: T; }
>index : number
>类型别名 :=> 数字
>T : T
>T : T
>undefined : undefined
>类型别名 :=> 未定

function bar<T>(items: { [index: string]: T }): T { return undefined; }
>bar : <T>(items: { [index: string]: T; }) => T
>T : T
>items : { [index: string]: T; }
>index : string
>类型别名 :=> 文字
>T : T
>T : T
>undefined : undefined
>类型别名 :=> 未定

var x1 = foo({ 0: 0, 1: 1 });       // type should be number
>x1 : number
>类型别名 :=> 数字
>foo({ 0: 0, 1: 1 }) : number
>类型别名 :=> 数字
>foo : <T>(items: { [index: number]: T; }) => T
>{ 0: 0, 1: 1 } : { 0: number; 1: number; }
>0 : 0
>1 : 1

var x2 = bar({ 0: 0, 1: 1 });
>x2 : number
>类型别名 :=> 数字
>bar({ 0: 0, 1: 1 }) : number
>类型别名 :=> 数字
>bar : <T>(items: { [index: string]: T; }) => T
>{ 0: 0, 1: 1 } : { 0: number; 1: number; }
>0 : 0
>1 : 1

var x3 = bar({ zero: 0, one: 1 });  // type should be number
>x3 : number
>类型别名 :=> 数字
>bar({ zero: 0, one: 1 }) : number
>类型别名 :=> 数字
>bar : <T>(items: { [index: string]: T; }) => T
>{ zero: 0, one: 1 } : { zero: number; one: number; }
>zero : number
>类型别名 :=> 数字
>0 : 0
>one : number
>类型别名 :=> 数字
>1 : 1

