=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignatureWithOptionalParameterAndInitializer.ts ===
// Optional parameters cannot also have initializer expressions, these are all errors

function foo(x?: number = 1) { }
>foo : (x?: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>1 : 1

var f = function foo(x?: number = 1) { }
>f : (x?: 数字) => 无值
>function foo(x?: number = 1) { } : (x?: 数字) => 无值
>foo : (x?: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>1 : 1

var f2 = (x: number, y? = 1) => { }
>f2 : (x: 数字, y?: 数字) => 无值
>(x: number, y? = 1) => { } : (x: 数字, y?: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1

foo(1);
>foo(1) : 无值
>类型别名 :=> 无值
>foo : (x?: 数字) => 无值
>1 : 1

foo();
>foo() : 无值
>类型别名 :=> 无值
>foo : (x?: 数字) => 无值

f(1);
>f(1) : 无值
>类型别名 :=> 无值
>f : (x?: 数字) => 无值
>1 : 1

f();
>f() : 无值
>类型别名 :=> 无值
>f : (x?: 数字) => 无值

f2(1);
>f2(1) : 无值
>类型别名 :=> 无值
>f2 : (x: 数字, y?: 数字) => 无值
>1 : 1

f2(1, 2);
>f2(1, 2) : 无值
>类型别名 :=> 无值
>f2 : (x: 数字, y?: 数字) => 无值
>1 : 1
>2 : 2

class C {
>C : C

    foo(x?: number = 1) { }
>foo : (x?: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>1 : 1
}

var c: C;
>c : C
>C : C

c.foo();
>c.foo() : 无值
>类型别名 :=> 无值
>c.foo : (x?: 数字) => 无值
>c : C
>foo : (x?: 数字) => 无值

c.foo(1);
>c.foo(1) : 无值
>类型别名 :=> 无值
>c.foo : (x?: 数字) => 无值
>c : C
>foo : (x?: 数字) => 无值
>1 : 1

interface I {
>I : I

    (x? = 1);
>x : 数字
>类型别名 :=> 数字
>1 : 1

    foo(x: number, y?: number = 1);
>foo : (x: 数字, y?: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>1 : 1
}

var i: I;
>i : I
>I : I

i();
>i() : 任意
>类型别名 :=> 任意
>i : I

i(1);
>i(1) : 任意
>类型别名 :=> 任意
>i : I
>1 : 1

i.foo(1);
>i.foo(1) : 任意
>类型别名 :=> 任意
>i.foo : (x: 数字, y?: 数字) => 任意
>i : I
>foo : (x: 数字, y?: 数字) => 任意
>1 : 1

i.foo(1, 2);
>i.foo(1, 2) : 任意
>类型别名 :=> 任意
>i.foo : (x: 数字, y?: 数字) => 任意
>i : I
>foo : (x: 数字, y?: 数字) => 任意
>1 : 1
>2 : 2

var a: {
>a : { (x?: 数字): 任意; foo(x?: 数字): 任意; }

    (x?: number = 1);
>x : 数字
>类型别名 :=> 数字
>1 : 1

    foo(x? = 1);
>foo : (x?: 数字) => 任意
>x : 数字
>类型别名 :=> 数字
>1 : 1
}

a();
>a() : 任意
>类型别名 :=> 任意
>a : { (x?: 数字): 任意; foo(x?: 数字): 任意; }

a(1);
>a(1) : 任意
>类型别名 :=> 任意
>a : { (x?: 数字): 任意; foo(x?: 数字): 任意; }
>1 : 1

a.foo();
>a.foo() : 任意
>类型别名 :=> 任意
>a.foo : (x?: 数字) => 任意
>a : { (x?: 数字): 任意; foo(x?: 数字): 任意; }
>foo : (x?: 数字) => 任意

a.foo(1);
>a.foo(1) : 任意
>类型别名 :=> 任意
>a.foo : (x?: 数字) => 任意
>a : { (x?: 数字): 任意; foo(x?: 数字): 任意; }
>foo : (x?: 数字) => 任意
>1 : 1

var b = {
>b : { foo(x?: 数字): 无值; a: (x: 数字, y?: 数字) => 无值; b: (x?: 任意) => 无值; }
>{    foo(x?: number = 1) { },    a: function foo(x: number, y?: number = '') { },    b: (x?: any = '') => { }} : { foo(x?: 数字): 无值; a: (x: 数字, y?: 数字) => 无值; b: (x?: 任意) => 无值; }

    foo(x?: number = 1) { },
>foo : (x?: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>1 : 1

    a: function foo(x: number, y?: number = '') { },
>a : (x: 数字, y?: 数字) => 无值
>function foo(x: number, y?: number = '') { } : (x: 数字, y?: 数字) => 无值
>foo : (x: 数字, y?: 数字) => 无值
>x : 数字
>类型别名 :=> 数字
>y : 数字
>类型别名 :=> 数字
>'' : ""

    b: (x?: any = '') => { }
>b : (x?: 任意) => 无值
>(x?: any = '') => { } : (x?: 任意) => 无值
>x : 任意
>类型别名 :=> 任意
>'' : ""
}

b.foo();
>b.foo() : 无值
>类型别名 :=> 无值
>b.foo : (x?: 数字) => 无值
>b : { foo(x?: 数字): 无值; a: (x: 数字, y?: 数字) => 无值; b: (x?: 任意) => 无值; }
>foo : (x?: 数字) => 无值

b.foo(1);
>b.foo(1) : 无值
>类型别名 :=> 无值
>b.foo : (x?: 数字) => 无值
>b : { foo(x?: 数字): 无值; a: (x: 数字, y?: 数字) => 无值; b: (x?: 任意) => 无值; }
>foo : (x?: 数字) => 无值
>1 : 1

b.a(1);
>b.a(1) : 无值
>类型别名 :=> 无值
>b.a : (x: 数字, y?: 数字) => 无值
>b : { foo(x?: 数字): 无值; a: (x: 数字, y?: 数字) => 无值; b: (x?: 任意) => 无值; }
>a : (x: 数字, y?: 数字) => 无值
>1 : 1

b.a(1, 2);
>b.a(1, 2) : 无值
>类型别名 :=> 无值
>b.a : (x: 数字, y?: 数字) => 无值
>b : { foo(x?: 数字): 无值; a: (x: 数字, y?: 数字) => 无值; b: (x?: 任意) => 无值; }
>a : (x: 数字, y?: 数字) => 无值
>1 : 1
>2 : 2

b.b();
>b.b() : 无值
>类型别名 :=> 无值
>b.b : (x?: 任意) => 无值
>b : { foo(x?: 数字): 无值; a: (x: 数字, y?: 数字) => 无值; b: (x?: 任意) => 无值; }
>b : (x?: 任意) => 无值

b.b(1);
>b.b(1) : 无值
>类型别名 :=> 无值
>b.b : (x?: 任意) => 无值
>b : { foo(x?: 数字): 无值; a: (x: 数字, y?: 数字) => 无值; b: (x?: 任意) => 无值; }
>b : (x?: 任意) => 无值
>1 : 1

