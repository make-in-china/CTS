=== tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/derivedClassWithoutExplicitConstructor3.ts ===
// automatic constructors with a class hieararchy of depth > 2

class Base {
>Base : Base

    a = 1;
>a : number
>类型别名 :=> 数字
>1 : 1

    constructor(x: number) { this.a = x; }
>x : number
>类型别名 :=> 数字
>this.a = x : number
>类型别名 :=> 数字
>this.a : number
>类型别名 :=> 数字
>this : this
>a : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
}

class Derived extends Base {
>Derived : Derived
>Base : Base

    b = '';
>b : string
>类型别名 :=> 文字
>'' : ""

    constructor(y: string, z: string) {
>y : string
>类型别名 :=> 文字
>z : string
>类型别名 :=> 文字

        super(2);
>super(2) : void
>类型别名 :=> 无值
>super : typeof Base
>2 : 2

        this.b = y;
>this.b = y : string
>类型别名 :=> 文字
>this.b : string
>类型别名 :=> 文字
>this : this
>b : string
>类型别名 :=> 文字
>y : string
>类型别名 :=> 文字
    }
}

class Derived2 extends Derived {
>Derived2 : Derived2
>Derived : Derived

    x = 1
>x : number
>类型别名 :=> 数字
>1 : 1

    y = 'hello';
>y : string
>类型别名 :=> 文字
>'hello' : "hello"
}

var r = new Derived(); // error
>r : any
>类型别名 :=> 任意
>new Derived() : any
>类型别名 :=> 任意
>Derived : typeof Derived

var r2 = new Derived2(1); // error
>r2 : any
>类型别名 :=> 任意
>new Derived2(1) : any
>类型别名 :=> 任意
>Derived2 : typeof Derived2
>1 : 1

var r3 = new Derived('', '');
>r3 : Derived
>new Derived('', '') : Derived
>Derived : typeof Derived
>'' : ""
>'' : ""

class Base2<T> {
>Base2 : Base2<T>
>T : T

    a: T;
>a : T
>T : T

    constructor(x: T) { this.a = x; }
>x : T
>T : T
>this.a = x : T
>this.a : T
>this : this
>a : T
>x : T
}

class D<T> extends Base {
>D : D<T>
>T : T
>Base : Base

    b: T = null;
>b : T
>T : T
>null : null
>类型别名 :=> 空值

    constructor(y: T, z: T) {
>y : T
>T : T
>z : T
>T : T

        super(2);
>super(2) : void
>类型别名 :=> 无值
>super : typeof Base
>2 : 2

        this.b = y;
>this.b = y : T
>this.b : T
>this : this
>b : T
>y : T
    }
}


class D2<T extends Date> extends D<T> {
>D2 : D2<T>
>T : T
>Date : Date
>D : D<T>
>T : T

    x = 2
>x : number
>类型别名 :=> 数字
>2 : 2

    y: T = null;
>y : T
>T : T
>null : null
>类型别名 :=> 空值
}

var d = new D2(); // error
>d : any
>类型别名 :=> 任意
>new D2() : any
>类型别名 :=> 任意
>D2 : typeof D2

var d2 = new D2(new Date()); // error
>d2 : any
>类型别名 :=> 任意
>new D2(new Date()) : any
>类型别名 :=> 任意
>D2 : typeof D2
>new Date() : Date
>Date : DateConstructor

var d3 = new D2(new Date(), new Date()); // ok
>d3 : D2<Date>
>new D2(new Date(), new Date()) : D2<Date>
>D2 : typeof D2
>new Date() : Date
>Date : DateConstructor
>new Date() : Date
>Date : DateConstructor

