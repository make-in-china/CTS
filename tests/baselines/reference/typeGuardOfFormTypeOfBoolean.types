=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfBoolean.ts ===
class C { private p: string };
>C : C
>p : 文字
>类型别名 :=> 文字

var str: string;
>str : 文字
>类型别名 :=> 文字

var bool: boolean;
>bool : 真假
>类型别名 :=> 真假

var num: number;
>num : 数字
>类型别名 :=> 数字

var strOrNum: string | number;
>strOrNum : 文字 | 数字

var strOrBool: string | boolean;
>strOrBool : 文字 | 真假

var numOrBool: number | boolean
>numOrBool : 数字 | 真假

var strOrNumOrBool: string | number | boolean;
>strOrNumOrBool : 文字 | 数字 | 真假

var strOrC: string | C;
>strOrC : 文字 | C
>C : C

var numOrC: number | C;
>numOrC : 数字 | C
>C : C

var boolOrC: boolean | C;
>boolOrC : 真假 | C
>C : C

var c: C;
>c : C
>C : C

//	A type guard of the form typeof x === s, 
//  where s is a string literal with the value 'string', 'number', or 'boolean',
//  - when true, narrows the type of x to the given primitive type, or
//  - when false, removes the primitive type from the type of x.
if (typeof strOrBool === "boolean") {
>typeof strOrBool === "boolean" : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>"boolean" : "boolean"

    bool = strOrBool; // boolean
>bool = strOrBool : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>strOrBool : 真假
>类型别名 :=> 真假
}
else {
    str = strOrBool; // string
>str = strOrBool : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>strOrBool : 文字
>类型别名 :=> 文字
}
if (typeof numOrBool === "boolean") {
>typeof numOrBool === "boolean" : 真假
>类型别名 :=> 真假
>typeof numOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>numOrBool : 数字 | 真假
>"boolean" : "boolean"

    bool = numOrBool; // boolean
>bool = numOrBool : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>numOrBool : 真假
>类型别名 :=> 真假
}
else {
    num = numOrBool; // number
>num = numOrBool : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>numOrBool : 数字
>类型别名 :=> 数字
}
if (typeof strOrNumOrBool === "boolean") {
>typeof strOrNumOrBool === "boolean" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : 文字 | 数字 | 真假
>"boolean" : "boolean"

    bool = strOrNumOrBool; // boolean
>bool = strOrNumOrBool : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>strOrNumOrBool : 真假
>类型别名 :=> 真假
}
else {
    strOrNum = strOrNumOrBool; // string | number
>strOrNum = strOrNumOrBool : 文字 | 数字
>strOrNum : 文字 | 数字
>strOrNumOrBool : 文字 | 数字
}
if (typeof boolOrC === "boolean") {
>typeof boolOrC === "boolean" : 真假
>类型别名 :=> 真假
>typeof boolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>boolOrC : 真假 | C
>"boolean" : "boolean"

    bool = boolOrC; // boolean
>bool = boolOrC : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>boolOrC : 真假
>类型别名 :=> 真假
}
else {
    c = boolOrC; // C
>c = boolOrC : C
>c : C
>boolOrC : C
}

if (typeof strOrNum === "boolean") {
>typeof strOrNum === "boolean" : 真假
>类型别名 :=> 真假
>typeof strOrNum : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNum : 文字 | 数字
>"boolean" : "boolean"

    let z1: {} = strOrNum; // {}
>z1 : {}
>strOrNum : 不及
>类型别名 :=> 不及
}
else {
    let z2: string | number = strOrNum; // string | number
>z2 : 文字 | 数字
>strOrNum : 文字 | 数字
}


// A type guard of the form typeof x !== s, where s is a string literal,
//  - when true, narrows the type of x by typeof x === s when false, or
//  - when false, narrows the type of x by typeof x === s when true.
if (typeof strOrBool !== "boolean") {
>typeof strOrBool !== "boolean" : 真假
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : 文字 | 真假
>"boolean" : "boolean"

    str = strOrBool; // string
>str = strOrBool : 文字
>类型别名 :=> 文字
>str : 文字
>类型别名 :=> 文字
>strOrBool : 文字
>类型别名 :=> 文字
}
else {
    bool = strOrBool; // boolean
>bool = strOrBool : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>strOrBool : 真假
>类型别名 :=> 真假
}
if (typeof numOrBool !== "boolean") {
>typeof numOrBool !== "boolean" : 真假
>类型别名 :=> 真假
>typeof numOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>numOrBool : 数字 | 真假
>"boolean" : "boolean"

    num = numOrBool; // number
>num = numOrBool : 数字
>类型别名 :=> 数字
>num : 数字
>类型别名 :=> 数字
>numOrBool : 数字
>类型别名 :=> 数字
}
else {
    bool = numOrBool; // boolean
>bool = numOrBool : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>numOrBool : 真假
>类型别名 :=> 真假
}
if (typeof strOrNumOrBool !== "boolean") {
>typeof strOrNumOrBool !== "boolean" : 真假
>类型别名 :=> 真假
>typeof strOrNumOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNumOrBool : 文字 | 数字 | 真假
>"boolean" : "boolean"

    strOrNum = strOrNumOrBool; // string | number
>strOrNum = strOrNumOrBool : 文字 | 数字
>strOrNum : 文字 | 数字
>strOrNumOrBool : 文字 | 数字
}
else {
    bool = strOrNumOrBool; // boolean
>bool = strOrNumOrBool : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>strOrNumOrBool : 真假
>类型别名 :=> 真假
}
if (typeof boolOrC !== "boolean") {
>typeof boolOrC !== "boolean" : 真假
>类型别名 :=> 真假
>typeof boolOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>boolOrC : 真假 | C
>"boolean" : "boolean"

    c = boolOrC; // C
>c = boolOrC : C
>c : C
>boolOrC : C
}
else {
    bool = boolOrC; // boolean
>bool = boolOrC : 真假
>类型别名 :=> 真假
>bool : 真假
>类型别名 :=> 真假
>boolOrC : 真假
>类型别名 :=> 真假
}

if (typeof strOrNum !== "boolean") {
>typeof strOrNum !== "boolean" : 真假
>类型别名 :=> 真假
>typeof strOrNum : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNum : 文字 | 数字
>"boolean" : "boolean"

    let z1: string | number = strOrNum; // string | number
>z1 : 文字 | 数字
>strOrNum : 文字 | 数字
}
else {
    let z2: {} = strOrNum; // {}
>z2 : {}
>strOrNum : 不及
>类型别名 :=> 不及
}

