=== tests/cases/compiler/declFileConstructors_0.ts ===
export class SimpleConstructor {
>SimpleConstructor : SimpleConstructor

    /** This comment should appear for foo*/
    constructor() {
    }
}
export class ConstructorWithParameters {
>ConstructorWithParameters : ConstructorWithParameters

    /** This is comment for function signature*/
    constructor(/** this is comment about a*/a: string,
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number) {
>b : 数字
>类型别名 :=> 数字

        var d = a;
>d : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
    }
}

export class ConstructorWithRestParamters {
>ConstructorWithRestParamters : ConstructorWithRestParamters

    constructor(a: string, ...rests: string[]) {
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

        return a + rests.join("");
>a + rests.join("") : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>rests.join("") : 文字
>类型别名 :=> 文字
>rests.join : (separator?: 文字) => 文字
>rests : 文字[]
>join : (separator?: 文字) => 文字
>"" : ""
    }
}

export class ConstructorWithOverloads {
>ConstructorWithOverloads : ConstructorWithOverloads

    constructor(a: string);
>a : 文字
>类型别名 :=> 文字

    constructor(a: number);
>a : 数字
>类型别名 :=> 数字

    constructor(a: any) {
>a : 任意
>类型别名 :=> 任意
    }
}

export class ConstructorWithPublicParameterProperty {
>ConstructorWithPublicParameterProperty : ConstructorWithPublicParameterProperty

    constructor(public x: string) {
>x : 文字
>类型别名 :=> 文字
    }
}

export class ConstructorWithPrivateParameterProperty {
>ConstructorWithPrivateParameterProperty : ConstructorWithPrivateParameterProperty

    constructor(private x: string) {
>x : 文字
>类型别名 :=> 文字
    }
}

export class ConstructorWithOptionalParameterProperty {
>ConstructorWithOptionalParameterProperty : ConstructorWithOptionalParameterProperty

    constructor(public x?: string) {
>x : 文字
>类型别名 :=> 文字
    }
}

export class ConstructorWithParameterInitializer {
>ConstructorWithParameterInitializer : ConstructorWithParameterInitializer

    constructor(public x = "hello") {
>x : 文字
>类型别名 :=> 文字
>"hello" : "hello"
    }
}

=== tests/cases/compiler/declFileConstructors_1.ts ===
class GlobalSimpleConstructor {
>GlobalSimpleConstructor : GlobalSimpleConstructor

    /** This comment should appear for foo*/
    constructor() {
    }
}
class GlobalConstructorWithParameters {
>GlobalConstructorWithParameters : GlobalConstructorWithParameters

    /** This is comment for function signature*/
    constructor(/** this is comment about a*/a: string,
>a : 文字
>类型别名 :=> 文字

        /** this is comment for b*/
        b: number) {
>b : 数字
>类型别名 :=> 数字

        var d = a;
>d : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
    }
}

class GlobalConstructorWithRestParamters {
>GlobalConstructorWithRestParamters : GlobalConstructorWithRestParamters

    constructor(a: string, ...rests: string[]) {
>a : 文字
>类型别名 :=> 文字
>rests : 文字[]

        return a + rests.join("");
>a + rests.join("") : 文字
>类型别名 :=> 文字
>a : 文字
>类型别名 :=> 文字
>rests.join("") : 文字
>类型别名 :=> 文字
>rests.join : (separator?: 文字) => 文字
>rests : 文字[]
>join : (separator?: 文字) => 文字
>"" : ""
    }
}

class GlobalConstructorWithOverloads {
>GlobalConstructorWithOverloads : GlobalConstructorWithOverloads

    constructor(a: string);
>a : 文字
>类型别名 :=> 文字

    constructor(a: number);
>a : 数字
>类型别名 :=> 数字

    constructor(a: any) {
>a : 任意
>类型别名 :=> 任意
    }
}

class GlobalConstructorWithPublicParameterProperty {
>GlobalConstructorWithPublicParameterProperty : GlobalConstructorWithPublicParameterProperty

    constructor(public x: string) {
>x : 文字
>类型别名 :=> 文字
    }
}

class GlobalConstructorWithPrivateParameterProperty {
>GlobalConstructorWithPrivateParameterProperty : GlobalConstructorWithPrivateParameterProperty

    constructor(private x: string) {
>x : 文字
>类型别名 :=> 文字
    }
}

class GlobalConstructorWithOptionalParameterProperty {
>GlobalConstructorWithOptionalParameterProperty : GlobalConstructorWithOptionalParameterProperty

    constructor(public x?: string) {
>x : 文字
>类型别名 :=> 文字
    }
}

class GlobalConstructorWithParameterInitializer {
>GlobalConstructorWithParameterInitializer : GlobalConstructorWithParameterInitializer

    constructor(public x = "hello") {
>x : 文字
>类型别名 :=> 文字
>"hello" : "hello"
    }
}
