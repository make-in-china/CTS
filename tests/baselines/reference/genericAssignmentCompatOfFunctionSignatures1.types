=== tests/cases/compiler/genericAssignmentCompatOfFunctionSignatures1.ts ===
var x1 = function foo3<T, U extends { a: T; b: string }>(x: T, z: U) { }
>x1 : <T, U 扩展 { a: T; b: 文字; }>(x: T, z: U) => 无值
>function foo3<T, U extends { a: T; b: string }>(x: T, z: U) { } : <T, U 扩展 { a: T; b: 文字; }>(x: T, z: U) => 无值
>foo3 : <T, U 扩展 { a: T; b: 文字; }>(x: T, z: U) => 无值
>T : T
>U : U
>a : T
>T : T
>b : 文字
>类型别名 :=> 文字
>x : T
>T : T
>z : U
>U : U

var x2 = function foo3<T, U extends { a: T; b: number }>(x: T, z: U) { }
>x2 : <T, U 扩展 { a: T; b: 数字; }>(x: T, z: U) => 无值
>function foo3<T, U extends { a: T; b: number }>(x: T, z: U) { } : <T, U 扩展 { a: T; b: 数字; }>(x: T, z: U) => 无值
>foo3 : <T, U 扩展 { a: T; b: 数字; }>(x: T, z: U) => 无值
>T : T
>U : U
>a : T
>T : T
>b : 数字
>类型别名 :=> 数字
>x : T
>T : T
>z : U
>U : U

x1 = x2;
>x1 = x2 : <T, U 扩展 { a: T; b: 数字; }>(x: T, z: U) => 无值
>x1 : <T, U 扩展 { a: T; b: 文字; }>(x: T, z: U) => 无值
>x2 : <T, U 扩展 { a: T; b: 数字; }>(x: T, z: U) => 无值

x2 = x1;
>x2 = x1 : <T, U 扩展 { a: T; b: 文字; }>(x: T, z: U) => 无值
>x2 : <T, U 扩展 { a: T; b: 数字; }>(x: T, z: U) => 无值
>x1 : <T, U 扩展 { a: T; b: 文字; }>(x: T, z: U) => 无值

