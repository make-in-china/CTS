=== tests/cases/compiler/functionOverloadAmbiguity1.ts ===
function callb(lam: (l: number) => void );
>callb : { (lam: (l: number) => void): any; (lam: (n: string) => void): any; }
>lam : (l: number) => void
>l : number
>类型别名 :=> 数字

function callb(lam: (n: string) => void );
>callb : { (lam: (l: number) => void): any; (lam: (n: string) => void): any; }
>lam : (n: string) => void
>n : string
>类型别名 :=> 文字

function callb(a) { }
>callb : { (lam: (l: number) => void): any; (lam: (n: string) => void): any; }
>a : any
>类型别名 :=> 任意

callb((a) => { a.length; } ); // error, chose first overload
>callb((a) => { a.length; } ) : any
>类型别名 :=> 任意
>callb : { (lam: (l: number) => void): any; (lam: (n: string) => void): any; }
>(a) => { a.length; } : (a: number) => void
>a : number
>类型别名 :=> 数字
>a.length : any
>类型别名 :=> 任意
>a : number
>类型别名 :=> 数字
>length : any
>类型别名 :=> 任意

function callb2(lam: (n: string) => void );
>callb2 : { (lam: (n: string) => void): any; (lam: (l: number) => void): any; }
>lam : (n: string) => void
>n : string
>类型别名 :=> 文字

function callb2(lam: (l: number) => void );
>callb2 : { (lam: (n: string) => void): any; (lam: (l: number) => void): any; }
>lam : (l: number) => void
>l : number
>类型别名 :=> 数字

function callb2(a) { }
>callb2 : { (lam: (n: string) => void): any; (lam: (l: number) => void): any; }
>a : any
>类型别名 :=> 任意

callb2((a) => { a.length; } ); // ok, chose first overload
>callb2((a) => { a.length; } ) : any
>类型别名 :=> 任意
>callb2 : { (lam: (n: string) => void): any; (lam: (l: number) => void): any; }
>(a) => { a.length; } : (a: string) => void
>a : string
>类型别名 :=> 文字
>a.length : number
>类型别名 :=> 数字
>a : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字

