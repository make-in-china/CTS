=== tests/cases/compiler/moduleVisibilityTest1.ts ===
module OuterMod {
>OuterMod : 类为 OuterMod

	export function someExportedOuterFunc() { return -1; }
>someExportedOuterFunc : () => 数字
>-1 : -1
>1 : 1

	export module OuterInnerMod {
>OuterInnerMod : 类为 OuterInnerMod

		export function someExportedOuterInnerFunc() { return "foo"; }
>someExportedOuterInnerFunc : () => 文字
>"foo" : "foo"
	}
}

import OuterInnerAlias = OuterMod.OuterInnerMod;
>OuterInnerAlias : 类为 OuterInnerAlias
>OuterMod : 类为 OuterMod
>OuterInnerMod : 类为 OuterInnerAlias

module M {
>M : 类为 M

	export module InnerMod {
>InnerMod : 类为 InnerMod

		export function someExportedInnerFunc() { return -2; }
>someExportedInnerFunc : () => 数字
>-2 : -2
>2 : 2
	}

	export enum E {
>E : E

		A,
>A : E.A

		B,
>B : E.B

		C,
>C : E.C
	}

	export var x = 5;
>x : 数字
>类型别名 :=> 数字
>5 : 5

	export declare var exported_var;
>exported_var : 任意
>类型别名 :=> 任意

	var y = x + x;
>y : 数字
>类型别名 :=> 数字
>x + x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字


	export interface I {
>I : I

		someMethod():number;
>someMethod : () => 数字
	}

	 class B {public b = 0;}
>B : B
>b : 数字
>类型别名 :=> 数字
>0 : 0

	 export class C implements I {
>C : C
>I : I

		public someMethodThatCallsAnOuterMethod() {return OuterInnerAlias.someExportedOuterInnerFunc();}
>someMethodThatCallsAnOuterMethod : () => 文字
>OuterInnerAlias.someExportedOuterInnerFunc() : 文字
>类型别名 :=> 文字
>OuterInnerAlias.someExportedOuterInnerFunc : () => 文字
>OuterInnerAlias : 类为 OuterInnerAlias
>someExportedOuterInnerFunc : () => 文字

		public someMethodThatCallsAnInnerMethod() {return InnerMod.someExportedInnerFunc();}
>someMethodThatCallsAnInnerMethod : () => 数字
>InnerMod.someExportedInnerFunc() : 数字
>类型别名 :=> 数字
>InnerMod.someExportedInnerFunc : () => 数字
>InnerMod : 类为 InnerMod
>someExportedInnerFunc : () => 数字

		public someMethodThatCallsAnOuterInnerMethod() {return OuterMod.someExportedOuterFunc();}
>someMethodThatCallsAnOuterInnerMethod : () => 数字
>OuterMod.someExportedOuterFunc() : 数字
>类型别名 :=> 数字
>OuterMod.someExportedOuterFunc : () => 数字
>OuterMod : 类为 OuterMod
>someExportedOuterFunc : () => 数字

		public someMethod() { return 0; }
>someMethod : () => 数字
>0 : 0

		public someProp = 1;
>someProp : 数字
>类型别名 :=> 数字
>1 : 1

		constructor() {
		    function someInnerFunc() { return 2; }
>someInnerFunc : () => 数字
>2 : 2

            var someInnerVar = 3;
>someInnerVar : 数字
>类型别名 :=> 数字
>3 : 3
		}
	}

	var someModuleVar = 4;
>someModuleVar : 数字
>类型别名 :=> 数字
>4 : 4

	function someModuleFunction() { return 5;}
>someModuleFunction : () => 数字
>5 : 5
}

module M {
>M : 类为 M

	export var c = x;
>c : 数字
>类型别名 :=> 数字
>x : 数字
>类型别名 :=> 数字

	export var meb = M.E.B;
>meb : E
>M.E.B : E.B
>M.E : 类为 E
>M : 类为 M
>E : 类为 E
>B : E.B
}

var cprime : M.I = <M.I>null;
>cprime : M.I
>M : 任意
>类型别名 :=> 任意
>I : M.I
><M.I>null : M.I
>M : 任意
>类型别名 :=> 任意
>I : M.I
>null : 空值
>类型别名 :=> 空值

var c = new M.C();
>c : M.C
>new M.C() : M.C
>M.C : 类为 M.C
>M : 类为 M
>C : 类为 M.C

var z = M.x;
>z : 数字
>类型别名 :=> 数字
>M.x : 数字
>类型别名 :=> 数字
>M : 类为 M
>x : 数字
>类型别名 :=> 数字

var alpha = M.E.A;
>alpha : M.E
>M.E.A : M.E.A
>M.E : 类为 M.E
>M : 类为 M
>E : 类为 M.E
>A : M.E.A

var omega = M.exported_var;
>omega : 任意
>类型别名 :=> 任意
>M.exported_var : 任意
>类型别名 :=> 任意
>M : 类为 M
>exported_var : 任意
>类型别名 :=> 任意

c.someMethodThatCallsAnOuterMethod();
>c.someMethodThatCallsAnOuterMethod() : 文字
>类型别名 :=> 文字
>c.someMethodThatCallsAnOuterMethod : () => 文字
>c : M.C
>someMethodThatCallsAnOuterMethod : () => 文字

