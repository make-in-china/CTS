=== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments4.ts ===
// No inference is made from function typed arguments which have multiple call signatures

class C { foo: string }
>C : C
>foo : 文字
>类型别名 :=> 文字

class D { bar: string }
>D : D
>bar : 文字
>类型别名 :=> 文字

var a: {
>a : { 新建 (x: 真假): C; 新建 (x: 文字): D; }

    new(x: boolean): C;
>x : 真假
>类型别名 :=> 真假
>C : C

    new(x: string): D;
>x : 文字
>类型别名 :=> 文字
>D : D
}

function foo4<T, U>(cb: new(x: T) => U) {
>foo4 : <T, U>(cb: 新建 (x: T) => U) => U
>T : T
>U : U
>cb : 新建 (x: T) => U
>x : T
>T : T
>U : U

    var u: U;
>u : U
>U : U

    return u;
>u : U
}

var r = foo4(a); // T is {} (candidates boolean and string), U is {} (candidates C and D)
>r : D
>foo4(a) : D
>foo4 : <T, U>(cb: 新建 (x: T) => U) => U
>a : { 新建 (x: 真假): C; 新建 (x: 文字): D; }

var b: {
>b : { 新建 <T>(x: 真假): T; 新建 <T>(x: T): 任意; }

    new<T>(x: boolean): T;
>T : T
>x : 真假
>类型别名 :=> 真假
>T : T

    new<T>(x: T): any;
>T : T
>x : T
>T : T
}

var r2 = foo4(b); // T is {} (candidates boolean and {}), U is any (candidates any and {})
>r2 : 任意
>类型别名 :=> 任意
>foo4(b) : 任意
>类型别名 :=> 任意
>foo4 : <T, U>(cb: 新建 (x: T) => U) => U
>b : { 新建 <T>(x: 真假): T; 新建 <T>(x: T): 任意; }

