=== tests/cases/compiler/weakType.ts ===
interface Settings {
>Settings : Settings

    timeout?: number;
>timeout : 数字
>类型别名 :=> 数字

    onError?(): void;
>onError : () => 无值
}

function getDefaultSettings() {
>getDefaultSettings : () => { timeout: 数字; }

    return { timeout: 1000 };
>{ timeout: 1000 } : { timeout: 数字; }
>timeout : 数字
>类型别名 :=> 数字
>1000 : 1000
}
interface CtorOnly {
>CtorOnly : CtorOnly

    new(s: string): { timeout: 1000 }
>s : 文字
>类型别名 :=> 文字
>timeout : 1000
}

function doSomething(settings: Settings) { /* ... */ }
>doSomething : (settings: Settings) => 无值
>settings : Settings
>Settings : Settings

// forgot to call `getDefaultSettings`
doSomething(getDefaultSettings);
>doSomething(getDefaultSettings) : 无值
>类型别名 :=> 无值
>doSomething : (settings: Settings) => 无值
>getDefaultSettings : () => { timeout: 数字; }

doSomething(() => ({ timeout: 1000 }));
>doSomething(() => ({ timeout: 1000 })) : 无值
>类型别名 :=> 无值
>doSomething : (settings: Settings) => 无值
>() => ({ timeout: 1000 }) : () => { timeout: 数字; }
>({ timeout: 1000 }) : { timeout: 数字; }
>{ timeout: 1000 } : { timeout: 数字; }
>timeout : 数字
>类型别名 :=> 数字
>1000 : 1000

doSomething(null as CtorOnly);
>doSomething(null as CtorOnly) : 无值
>类型别名 :=> 无值
>doSomething : (settings: Settings) => 无值
>null as CtorOnly : CtorOnly
>null : 空值
>类型别名 :=> 空值
>CtorOnly : CtorOnly

doSomething(12);
>doSomething(12) : 无值
>类型别名 :=> 无值
>doSomething : (settings: Settings) => 无值
>12 : 12

doSomething('completely wrong');
>doSomething('completely wrong') : 无值
>类型别名 :=> 无值
>doSomething : (settings: Settings) => 无值
>'completely wrong' : "completely wrong"

doSomething(false);
>doSomething(false) : 无值
>类型别名 :=> 无值
>doSomething : (settings: Settings) => 无值
>false : 为假
>类型别名 :=> 为假

// this is an oddly popular way of defining settings
// this example is from services/textChanges.ts
type ConfigurableStart = { useStart?: boolean }
>ConfigurableStart : ConfigurableStart
>useStart : 真假
>类型别名 :=> 真假

type ConfigurableEnd = { useEnd?: boolean }
>ConfigurableEnd : ConfigurableEnd
>useEnd : 真假
>类型别名 :=> 真假

type ConfigurableStartEnd = ConfigurableStart & ConfigurableEnd
>ConfigurableStartEnd : ConfigurableStartEnd
>ConfigurableStart : ConfigurableStart
>ConfigurableEnd : ConfigurableEnd

interface InsertOptions {
>InsertOptions : InsertOptions

    prefix?: string
>prefix : 文字
>类型别名 :=> 文字

    suffix?: string
>suffix : 文字
>类型别名 :=> 文字
}
type ChangeOptions = ConfigurableStartEnd & InsertOptions;
>ChangeOptions : ChangeOptions
>ConfigurableStartEnd : ConfigurableStartEnd
>InsertOptions : InsertOptions

function del(options: ConfigurableStartEnd = {},
>del : (options?: ConfigurableStartEnd, error?: { error?: 数字; }) => 无值
>options : ConfigurableStartEnd
>ConfigurableStartEnd : ConfigurableStartEnd
>{} : {}

             error: { error?: number } = {}) {
>error : { error?: 数字; }
>error : 数字
>类型别名 :=> 数字
>{} : {}

    let changes: ChangeOptions[];
>changes : ChangeOptions[]
>ChangeOptions : ChangeOptions

    changes.push(options);
>changes.push(options) : 数字
>类型别名 :=> 数字
>changes.push : (...items: ChangeOptions[]) => 数字
>changes : ChangeOptions[]
>push : (...items: ChangeOptions[]) => 数字
>options : ConfigurableStartEnd

    changes.push(error);
>changes.push(error) : 数字
>类型别名 :=> 数字
>changes.push : (...items: ChangeOptions[]) => 数字
>changes : ChangeOptions[]
>push : (...items: ChangeOptions[]) => 数字
>error : { error?: 数字; }
}

class K {
>K : K

    constructor(s: string) { }
>s : 文字
>类型别名 :=> 文字
}
// Ctor isn't a weak type because it has a construct signature
interface Ctor {
>Ctor : Ctor

    new (s: string): K
>s : 文字
>类型别名 :=> 文字
>K : K

    n?: number
>n : 数字
>类型别名 :=> 数字
}
let ctor: Ctor = K
>ctor : Ctor
>Ctor : Ctor
>K : 类为 K

type Spoiler = { nope?: string }
>Spoiler : Spoiler
>nope : 文字
>类型别名 :=> 文字

type Weak = {
>Weak : Weak

    a?: number
>a : 数字
>类型别名 :=> 数字

    properties?: {
>properties : { b?: 数字; }

        b?: number
>b : 数字
>类型别名 :=> 数字
    }
}
declare let unknown: {
>unknown : { properties: { wrong: 文字; }; }

    properties: {
>properties : { wrong: 文字; }

        wrong: string
>wrong : 文字
>类型别名 :=> 文字
    }
}
let weak: Weak & Spoiler = unknown
>weak : Weak & Spoiler
>Weak : Weak
>Spoiler : Spoiler
>unknown : { properties: { wrong: 文字; }; }


