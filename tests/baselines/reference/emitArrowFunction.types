=== tests/cases/conformance/es6/arrowFunction/emitArrowFunction.ts ===
var f1 = () => { }
>f1 : () => 无值
>() => { } : () => 无值

var f2 = (x: string, y: string) => { }
>f2 : (x: 文字, y: 文字) => 无值
>(x: string, y: string) => { } : (x: 文字, y: 文字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 文字
>类型别名 :=> 文字

var f3 = (x: string, y: number, ...rest) => { }
>f3 : (x: 文字, y: 数字, ...rest: 任意[]) => 无值
>(x: string, y: number, ...rest) => { } : (x: 文字, y: 数字, ...rest: 任意[]) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>rest : 任意[]

var f4 = (x: string, y: number, z = 10) => { }
>f4 : (x: 文字, y: 数字, z?: 数字) => 无值
>(x: string, y: number, z = 10) => { } : (x: 文字, y: 数字, z?: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
>10 : 10

function foo(func: () => boolean) { }
>foo : (func: () => 真假) => 无值
>func : () => 真假

foo(() => true);
>foo(() => true) : 无值
>类型别名 :=> 无值
>foo : (func: () => 真假) => 无值
>() => true : () => 为真
>true : 为真
>类型别名 :=> 为真

foo(() => { return false; });
>foo(() => { return false; }) : 无值
>类型别名 :=> 无值
>foo : (func: () => 真假) => 无值
>() => { return false; } : () => 为假
>false : 为假
>类型别名 :=> 为假

