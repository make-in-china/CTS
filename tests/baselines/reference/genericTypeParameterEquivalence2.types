=== tests/cases/compiler/genericTypeParameterEquivalence2.ts ===
// compose :: (b->c) -> (a->b) -> (a->c)
function compose<A, B, C>(f: (b: B) => C, g: (a:A) => B): (a:A) => C {
>compose : <A, B, C>(f: (b: B) => C, g: (a: A) => B) => (a: A) => C
>A : A
>B : B
>C : C
>f : (b: B) => C
>b : B
>B : B
>C : C
>g : (a: A) => B
>a : A
>A : A
>B : B
>a : A
>A : A
>C : C

    return function (a:A) : C {
>function (a:A) : C {        return f(g.apply(null, a));    } : (a: A) => C
>a : A
>A : A
>C : C

        return f(g.apply(null, a));
>f(g.apply(null, a)) : C
>f : (b: B) => C
>g.apply(null, a) : 任意
>类型别名 :=> 任意
>g.apply : (this: Function, thisArg: 任意, argArray?: 任意) => 任意
>g : (a: A) => B
>apply : (this: Function, thisArg: 任意, argArray?: 任意) => 任意
>null : 空值
>类型别名 :=> 空值
>a : A

    };
}

// forEach :: [a] -> (a -> ()) -> ()
function forEach<A>(list: A[], f: (a: A, n?: number) => void ): void {
>forEach : <A>(list: A[], f: (a: A, n?: 数字) => 无值) => 无值
>A : A
>list : A[]
>A : A
>f : (a: A, n?: 数字) => 无值
>a : A
>A : A
>n : 数字
>类型别名 :=> 数字

    for (var i = 0; i < list.length; ++i) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i < list.length : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>list.length : 数字
>类型别名 :=> 数字
>list : A[]
>length : 数字
>类型别名 :=> 数字
>++i : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

        f(list[i], i);
>f(list[i], i) : 无值
>类型别名 :=> 无值
>f : (a: A, n?: 数字) => 无值
>list[i] : A
>list : A[]
>i : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字
    }
}

// filter :: (a->bool) -> [a] -> [a]
function filter<A>(f: (a: A) => boolean, ar: A[]): A[] {
>filter : <A>(f: (a: A) => 真假, ar: A[]) => A[]
>A : A
>f : (a: A) => 真假
>a : A
>A : A
>ar : A[]
>A : A
>A : A

    var ret = [];
>ret : 任意[]
>[] : 未定[]

    forEach(ar, (el) => {
>forEach(ar, (el) => {        if (f(el)) {            ret.push(el);        }    } ) : 无值
>类型别名 :=> 无值
>forEach : <A>(list: A[], f: (a: A, n?: 数字) => 无值) => 无值
>ar : A[]
>(el) => {        if (f(el)) {            ret.push(el);        }    } : (el: A) => 无值
>el : A

        if (f(el)) {
>f(el) : 真假
>类型别名 :=> 真假
>f : (a: A) => 真假
>el : A

            ret.push(el);
>ret.push(el) : 数字
>类型别名 :=> 数字
>ret.push : (...items: 任意[]) => 数字
>ret : 任意[]
>push : (...items: 任意[]) => 数字
>el : A
        }
    } );

    return ret;
>ret : 任意[]
}

// length :: [a] -> Num
function length2<A>(ar: A[]): number {
>length2 : <A>(ar: A[]) => 数字
>A : A
>ar : A[]
>A : A

    return ar.length;
>ar.length : 数字
>类型别名 :=> 数字
>ar : A[]
>length : 数字
>类型别名 :=> 数字
}

// curry1 :: ((a,b)->c) -> (a->(b->c))
function curry1<A, B, C>(f: (a: A, b: B) => C): (ax: A) => (bx: B) => C {
>curry1 : <A, B, C>(f: (a: A, b: B) => C) => (ax: A) => (bx: B) => C
>A : A
>B : B
>C : C
>f : (a: A, b: B) => C
>a : A
>A : A
>b : B
>B : B
>C : C
>ax : A
>A : A
>bx : B
>B : B
>C : C

    return function (ay: A) {
>function (ay: A) {        return function (by: B) {            return f(ay, by);        };    } : (ay: A) => (by: B) => C
>ay : A
>A : A

        return function (by: B) {
>function (by: B) {            return f(ay, by);        } : (by: B) => C
>by : B
>B : B

            return f(ay, by);
>f(ay, by) : C
>f : (a: A, b: B) => C
>ay : A
>by : B

        };
    };
}

var cfilter = curry1(filter);
>cfilter : (ax: {}) => (bx: {}) => {}[]
>curry1(filter) : (ax: {}) => (bx: {}) => {}[]
>curry1 : <A, B, C>(f: (a: A, b: B) => C) => (ax: A) => (bx: B) => C
>filter : <A>(f: (a: A) => 真假, ar: A[]) => A[]

// compose :: (b->c) -> (a->b) -> (a->c)
// length :: [a] -> Num
// cfilter :: {} -> {} -> [{}]
// pred :: a -> Bool 
// cfilter(pred) :: {} -> [{}]
// length2 :: [a] -> Num
// countWhere :: (a -> Bool) -> [a] -> Num

function countWhere_1<A>(pred: (a: A) => boolean): (a: A[]) => number {
>countWhere_1 : <A>(pred: (a: A) => 真假) => (a: A[]) => 数字
>A : A
>pred : (a: A) => 真假
>a : A
>A : A
>a : A[]
>A : A

    return compose(length2, cfilter(pred));
>compose(length2, cfilter(pred)) : (a: {}) => 数字
>compose : <A, B, C>(f: (b: B) => C, g: (a: A) => B) => (a: A) => C
>length2 : <A>(ar: A[]) => 数字
>cfilter(pred) : (bx: {}) => {}[]
>cfilter : (ax: {}) => (bx: {}) => {}[]
>pred : (a: A) => 真假
}

function countWhere_2<A>(pred: (a: A) => boolean): (a: A[]) => number {
>countWhere_2 : <A>(pred: (a: A) => 真假) => (a: A[]) => 数字
>A : A
>pred : (a: A) => 真假
>a : A
>A : A
>a : A[]
>A : A

    var where = cfilter(pred);
>where : (bx: {}) => {}[]
>cfilter(pred) : (bx: {}) => {}[]
>cfilter : (ax: {}) => (bx: {}) => {}[]
>pred : (a: A) => 真假

    return compose(length2, where);
>compose(length2, where) : (a: {}) => 数字
>compose : <A, B, C>(f: (b: B) => C, g: (a: A) => B) => (a: A) => C
>length2 : <A>(ar: A[]) => 数字
>where : (bx: {}) => {}[]
}
