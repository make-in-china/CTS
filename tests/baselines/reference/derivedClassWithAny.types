=== tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassWithAny.ts ===
class C {
>C : C

    x: number;
>x : 数字
>类型别名 :=> 数字

    get X(): number { return 1; }
>X : 数字
>类型别名 :=> 数字
>1 : 1

    foo(): number {
>foo : () => 数字

        return 1;
>1 : 1
    }

    static y: number;
>y : 数字
>类型别名 :=> 数字

    static get Y(): number {
>Y : 数字
>类型别名 :=> 数字

        return 1;
>1 : 1
    }
    static bar(): number {
>bar : () => 数字

        return 1;
>1 : 1
    }
}

class D extends C {
>D : D
>C : C

    x: any;
>x : 任意
>类型别名 :=> 任意

    get X(): any {
>X : 任意
>类型别名 :=> 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
    foo(): any {
>foo : () => 任意

        return 1;
>1 : 1
    }

    static y: any;
>y : 任意
>类型别名 :=> 任意

    static get Y(): any {
>Y : 任意
>类型别名 :=> 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
    static bar(): any {
>bar : () => 任意

        return null;
>null : 空值
>类型别名 :=> 空值
    }
}

// if D is a valid class definition than E is now not safe tranisitively through C
class E extends D {
>E : E
>D : D

    x: string;
>x : 文字
>类型别名 :=> 文字

    get X(): string{ return ''; }
>X : 文字
>类型别名 :=> 文字
>'' : ""

    foo(): string {
>foo : () => 文字

        return '';
>'' : ""
    }

    static y: string;
>y : 文字
>类型别名 :=> 文字

    static get Y(): string {
>Y : 文字
>类型别名 :=> 文字

        return '';
>'' : ""
    }
    static bar(): string {
>bar : () => 文字

        return '';
>'' : ""
    }
}

var c: C;
>c : C
>C : C

var d: D;
>d : D
>D : D

var e: E;
>e : E
>E : E

c = d;
>c = d : D
>c : C
>d : D

c = e;
>c = e : E
>c : C
>e : E

var r = c.foo(); // e.foo would return string
>r : 数字
>类型别名 :=> 数字
>c.foo() : 数字
>类型别名 :=> 数字
>c.foo : () => 数字
>c : C
>foo : () => 数字

