=== tests/cases/compiler/narrowingByDiscriminantInLoop.ts ===
// Repro from #9977

type IDLMemberTypes = OperationMemberType | ConstantMemberType;
>IDLMemberTypes : IDLMemberTypes
>OperationMemberType : OperationMemberType
>ConstantMemberType : ConstantMemberType

interface IDLTypeDescription {
>IDLTypeDescription : IDLTypeDescription

    origin: string;
>origin : string
>类型别名 :=> 文字
}

interface InterfaceType {
>InterfaceType : InterfaceType

    members: IDLMemberTypes[];
>members : IDLMemberTypes[]
>IDLMemberTypes : IDLMemberTypes
}

interface OperationMemberType {
>OperationMemberType : OperationMemberType

    type: "operation";
>type : "operation"

    idlType: IDLTypeDescription;
>idlType : IDLTypeDescription
>IDLTypeDescription : IDLTypeDescription
}

interface ConstantMemberType {
>ConstantMemberType : ConstantMemberType

    type: "const";
>type : "const"

    idlType: string;
>idlType : string
>类型别名 :=> 文字
}

function insertInterface(callbackType: InterfaceType) {
>insertInterface : (callbackType: InterfaceType) => void
>callbackType : InterfaceType
>InterfaceType : InterfaceType

    for (const memberType of callbackType.members) {
>memberType : IDLMemberTypes
>callbackType.members : IDLMemberTypes[]
>callbackType : InterfaceType
>members : IDLMemberTypes[]

        if (memberType.type === "const") {
>memberType.type === "const" : boolean
>类型别名 :=> 真假
>memberType.type : "operation" | "const"
>memberType : IDLMemberTypes
>type : "operation" | "const"
>"const" : "const"

            memberType.idlType;  // string
>memberType.idlType : string
>类型别名 :=> 文字
>memberType : ConstantMemberType
>idlType : string
>类型别名 :=> 文字
        }
        else if (memberType.type === "operation") {
>memberType.type === "operation" : boolean
>类型别名 :=> 真假
>memberType.type : "operation"
>memberType : OperationMemberType
>type : "operation"
>"operation" : "operation"

            memberType.idlType.origin;  // string
>memberType.idlType.origin : string
>类型别名 :=> 文字
>memberType.idlType : IDLTypeDescription
>memberType : OperationMemberType
>idlType : IDLTypeDescription
>origin : string
>类型别名 :=> 文字

            (memberType.idlType as IDLTypeDescription);
>(memberType.idlType as IDLTypeDescription) : IDLTypeDescription
>memberType.idlType as IDLTypeDescription : IDLTypeDescription
>memberType.idlType : IDLTypeDescription
>memberType : OperationMemberType
>idlType : IDLTypeDescription
>IDLTypeDescription : IDLTypeDescription
        }
    }
}

function insertInterface2(callbackType: InterfaceType) {
>insertInterface2 : (callbackType: InterfaceType) => void
>callbackType : InterfaceType
>InterfaceType : InterfaceType

    for (const memberType of callbackType.members) {
>memberType : IDLMemberTypes
>callbackType.members : IDLMemberTypes[]
>callbackType : InterfaceType
>members : IDLMemberTypes[]

        if (memberType.type === "operation") {
>memberType.type === "operation" : boolean
>类型别名 :=> 真假
>memberType.type : "operation" | "const"
>memberType : IDLMemberTypes
>type : "operation" | "const"
>"operation" : "operation"

            memberType.idlType.origin;  // string
>memberType.idlType.origin : string
>类型别名 :=> 文字
>memberType.idlType : IDLTypeDescription
>memberType : OperationMemberType
>idlType : IDLTypeDescription
>origin : string
>类型别名 :=> 文字
        }
    }
}

function foo(memberType: IDLMemberTypes) {
>foo : (memberType: IDLMemberTypes) => void
>memberType : IDLMemberTypes
>IDLMemberTypes : IDLMemberTypes

    if (memberType.type === "const") {
>memberType.type === "const" : boolean
>类型别名 :=> 真假
>memberType.type : "operation" | "const"
>memberType : IDLMemberTypes
>type : "operation" | "const"
>"const" : "const"

        memberType.idlType;  // string
>memberType.idlType : string
>类型别名 :=> 文字
>memberType : ConstantMemberType
>idlType : string
>类型别名 :=> 文字
    }
    else if (memberType.type === "operation") {
>memberType.type === "operation" : boolean
>类型别名 :=> 真假
>memberType.type : "operation"
>memberType : OperationMemberType
>type : "operation"
>"operation" : "operation"

        memberType.idlType.origin;  // string
>memberType.idlType.origin : string
>类型别名 :=> 文字
>memberType.idlType : IDLTypeDescription
>memberType : OperationMemberType
>idlType : IDLTypeDescription
>origin : string
>类型别名 :=> 文字
    }
}

// Repro for issue similar to #8383

interface A {
>A : A

    kind: true;
>kind : true
>类型别名 :=> 为真
>true : true
>类型别名 :=> 为真

    prop: { a: string; };
>prop : { a: string; }
>a : string
>类型别名 :=> 文字
}

interface B {
>B : B

    kind: false;
>kind : false
>类型别名 :=> 为假
>false : false
>类型别名 :=> 为假

    prop: { b: string; }
>prop : { b: string; }
>b : string
>类型别名 :=> 文字
}

function f1(x: A | B) {
>f1 : (x: A | B) => void
>x : A | B
>A : A
>B : B

    while (true) {
>true : true
>类型别名 :=> 为真

        x.prop;
>x.prop : { a: string; } | { b: string; }
>x : A | B
>prop : { a: string; } | { b: string; }

        if (x.kind === true) {
>x.kind === true : boolean
>类型别名 :=> 真假
>x.kind : boolean
>类型别名 :=> 真假
>x : A | B
>kind : boolean
>类型别名 :=> 真假
>true : true
>类型别名 :=> 为真

            x.prop.a;
>x.prop.a : string
>类型别名 :=> 文字
>x.prop : { a: string; }
>x : A
>prop : { a: string; }
>a : string
>类型别名 :=> 文字
        }
        if (x.kind === false) {
>x.kind === false : boolean
>类型别名 :=> 真假
>x.kind : boolean
>类型别名 :=> 真假
>x : A | B
>kind : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

            x.prop.b;
>x.prop.b : string
>类型别名 :=> 文字
>x.prop : { b: string; }
>x : B
>prop : { b: string; }
>b : string
>类型别名 :=> 文字
        }
    }
}

function f2(x: A | B) {
>f2 : (x: A | B) => void
>x : A | B
>A : A
>B : B

    while (true) {
>true : true
>类型别名 :=> 为真

        if (x.kind) {
>x.kind : boolean
>类型别名 :=> 真假
>x : A | B
>kind : boolean
>类型别名 :=> 真假

            x.prop.a;
>x.prop.a : string
>类型别名 :=> 文字
>x.prop : { a: string; }
>x : A
>prop : { a: string; }
>a : string
>类型别名 :=> 文字
        }
        if (!x.kind) {
>!x.kind : boolean
>类型别名 :=> 真假
>x.kind : boolean
>类型别名 :=> 真假
>x : A | B
>kind : boolean
>类型别名 :=> 真假

            x.prop.b;
>x.prop.b : string
>类型别名 :=> 文字
>x.prop : { b: string; }
>x : B
>prop : { b: string; }
>b : string
>类型别名 :=> 文字
        }
    }
}
