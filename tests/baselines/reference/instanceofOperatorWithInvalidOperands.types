=== tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithInvalidOperands.ts ===
class C {
>C : C

    foo() { }
>foo : () => 无值
}

var x: any;
>x : 任意
>类型别名 :=> 任意

// invalid left operand
// the left operand is required to be of type Any, an object type, or a type parameter type
var a1: number;
>a1 : 数字
>类型别名 :=> 数字

var a2: boolean;
>a2 : 真假
>类型别名 :=> 真假

var a3: string;
>a3 : 文字
>类型别名 :=> 文字

var a4: void;
>a4 : 无值
>类型别名 :=> 无值

var ra1 = a1 instanceof x;
>ra1 : 真假
>类型别名 :=> 真假
>a1 instanceof x : 真假
>类型别名 :=> 真假
>a1 : 数字
>类型别名 :=> 数字
>x : 任意
>类型别名 :=> 任意

var ra2 = a2 instanceof x;
>ra2 : 真假
>类型别名 :=> 真假
>a2 instanceof x : 真假
>类型别名 :=> 真假
>a2 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意

var ra3 = a3 instanceof x;
>ra3 : 真假
>类型别名 :=> 真假
>a3 instanceof x : 真假
>类型别名 :=> 真假
>a3 : 文字
>类型别名 :=> 文字
>x : 任意
>类型别名 :=> 任意

var ra4 = a4 instanceof x;
>ra4 : 真假
>类型别名 :=> 真假
>a4 instanceof x : 真假
>类型别名 :=> 真假
>a4 : 无值
>类型别名 :=> 无值
>x : 任意
>类型别名 :=> 任意

var ra5 = 0 instanceof x;
>ra5 : 真假
>类型别名 :=> 真假
>0 instanceof x : 真假
>类型别名 :=> 真假
>0 : 0
>x : 任意
>类型别名 :=> 任意

var ra6 = true instanceof x;
>ra6 : 真假
>类型别名 :=> 真假
>true instanceof x : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
>x : 任意
>类型别名 :=> 任意

var ra7 = '' instanceof x;
>ra7 : 真假
>类型别名 :=> 真假
>'' instanceof x : 真假
>类型别名 :=> 真假
>'' : ""
>x : 任意
>类型别名 :=> 任意

var ra8 = null instanceof x;
>ra8 : 真假
>类型别名 :=> 真假
>null instanceof x : 真假
>类型别名 :=> 真假
>null : 空值
>类型别名 :=> 空值
>x : 任意
>类型别名 :=> 任意

var ra9 = undefined instanceof x;
>ra9 : 真假
>类型别名 :=> 真假
>undefined instanceof x : 真假
>类型别名 :=> 真假
>undefined : 未定
>类型别名 :=> 未定
>x : 任意
>类型别名 :=> 任意

// invalid right operand
// the right operand to be of type Any or a subtype of the 'Function' interface type
var b1: number;
>b1 : 数字
>类型别名 :=> 数字

var b2: boolean;
>b2 : 真假
>类型别名 :=> 真假

var b3: string;
>b3 : 文字
>类型别名 :=> 文字

var b4: void;
>b4 : 无值
>类型别名 :=> 无值

var o1: {};
>o1 : {}

var o2: Object;
>o2 : Object
>Object : Object

var o3: C;
>o3 : C
>C : C

var rb1 = x instanceof b1;
>rb1 : 真假
>类型别名 :=> 真假
>x instanceof b1 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>b1 : 数字
>类型别名 :=> 数字

var rb2 = x instanceof b2;
>rb2 : 真假
>类型别名 :=> 真假
>x instanceof b2 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>b2 : 真假
>类型别名 :=> 真假

var rb3 = x instanceof b3;
>rb3 : 真假
>类型别名 :=> 真假
>x instanceof b3 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>b3 : 文字
>类型别名 :=> 文字

var rb4 = x instanceof b4;
>rb4 : 真假
>类型别名 :=> 真假
>x instanceof b4 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>b4 : 无值
>类型别名 :=> 无值

var rb5 = x instanceof 0;
>rb5 : 真假
>类型别名 :=> 真假
>x instanceof 0 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>0 : 0

var rb6 = x instanceof true;
>rb6 : 真假
>类型别名 :=> 真假
>x instanceof true : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真

var rb7 = x instanceof '';
>rb7 : 真假
>类型别名 :=> 真假
>x instanceof '' : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>'' : ""

var rb8 = x instanceof o1;
>rb8 : 真假
>类型别名 :=> 真假
>x instanceof o1 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>o1 : {}

var rb9 = x instanceof o2;
>rb9 : 真假
>类型别名 :=> 真假
>x instanceof o2 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>o2 : Object

var rb10 = x instanceof o3;
>rb10 : 真假
>类型别名 :=> 真假
>x instanceof o3 : 真假
>类型别名 :=> 真假
>x : 任意
>类型别名 :=> 任意
>o3 : C

// both operands are invalid
var rc1 = '' instanceof {};
>rc1 : 真假
>类型别名 :=> 真假
>'' instanceof {} : 真假
>类型别名 :=> 真假
>'' : ""
>{} : {}

