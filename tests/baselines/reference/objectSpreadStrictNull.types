=== tests/cases/conformance/types/spread/objectSpreadStrictNull.ts ===
function f(
>f : (definiteBoolean: { sn: 真假; }, definiteString: { sn: 文字; }, optionalString: { sn?: 文字 | 未定; }, optionalNumber: { sn?: 数字 | 未定; }, undefinedString: { sn: 文字 | 未定; }, undefinedNumber: { sn: 数字 | 未定; }) => 无值

    definiteBoolean: { sn: boolean },
>definiteBoolean : { sn: 真假; }
>sn : 真假
>类型别名 :=> 真假

    definiteString: { sn: string },
>definiteString : { sn: 文字; }
>sn : 文字
>类型别名 :=> 文字

    optionalString: { sn?: string },
>optionalString : { sn?: 文字 | 未定; }
>sn : 文字 | 未定

    optionalNumber: { sn?: number },
>optionalNumber : { sn?: 数字 | 未定; }
>sn : 数字 | 未定

    undefinedString: { sn: string | undefined },
>undefinedString : { sn: 文字 | 未定; }
>sn : 文字 | 未定

    undefinedNumber: { sn: number | undefined }) {
>undefinedNumber : { sn: 数字 | 未定; }
>sn : 数字 | 未定

    // optional
    let optionalUnionStops: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...optionalNumber };
>optionalUnionStops : { sn: 文字 | 数字; }
>sn : 文字 | 数字
>{ ...definiteBoolean, ...definiteString, ...optionalNumber } : { sn: 文字 | 数字; }
>definiteBoolean : { sn: 真假; }
>definiteString : { sn: 文字; }
>optionalNumber : { sn?: 数字 | 未定; }

    let optionalUnionDuplicates: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber };
>optionalUnionDuplicates : { sn: 文字 | 数字; }
>sn : 文字 | 数字
>{ ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber } : { sn: 文字 | 数字; }
>definiteBoolean : { sn: 真假; }
>definiteString : { sn: 文字; }
>optionalString : { sn?: 文字 | 未定; }
>optionalNumber : { sn?: 数字 | 未定; }

    let allOptional: { sn?: string | number } = { ...optionalString, ...optionalNumber };
>allOptional : { sn?: 文字 | 数字 | 未定; }
>sn : 文字 | 数字 | 未定
>{ ...optionalString, ...optionalNumber } : { sn?: 文字 | 数字 | 未定; }
>optionalString : { sn?: 文字 | 未定; }
>optionalNumber : { sn?: 数字 | 未定; }

    // undefined
    let undefinedUnionStops: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...undefinedNumber };
>undefinedUnionStops : { sn: 文字 | 数字; }
>sn : 文字 | 数字
>{ ...definiteBoolean, ...definiteString, ...undefinedNumber } : { sn: 数字 | 未定; }
>definiteBoolean : { sn: 真假; }
>definiteString : { sn: 文字; }
>undefinedNumber : { sn: 数字 | 未定; }

    let undefinedUnionDuplicates: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...undefinedString, ...undefinedNumber };
>undefinedUnionDuplicates : { sn: 文字 | 数字; }
>sn : 文字 | 数字
>{ ...definiteBoolean, ...definiteString, ...undefinedString, ...undefinedNumber } : { sn: 数字 | 未定; }
>definiteBoolean : { sn: 真假; }
>definiteString : { sn: 文字; }
>undefinedString : { sn: 文字 | 未定; }
>undefinedNumber : { sn: 数字 | 未定; }

    let allUndefined: { sn: string | number | undefined } = { ...undefinedString, ...undefinedNumber };
>allUndefined : { sn: 文字 | 数字 | 未定; }
>sn : 文字 | 数字 | 未定
>{ ...undefinedString, ...undefinedNumber } : { sn: 数字 | 未定; }
>undefinedString : { sn: 文字 | 未定; }
>undefinedNumber : { sn: 数字 | 未定; }

    let undefinedWithOptionalContinues: { sn: string | number | boolean } = { ...definiteBoolean, ...undefinedString, ...optionalNumber };
>undefinedWithOptionalContinues : { sn: 文字 | 数字 | 真假; }
>sn : 文字 | 数字 | 真假
>{ ...definiteBoolean, ...undefinedString, ...optionalNumber } : { sn: 文字 | 数字 | 未定; }
>definiteBoolean : { sn: 真假; }
>undefinedString : { sn: 文字 | 未定; }
>optionalNumber : { sn?: 数字 | 未定; }
}

type Movie = {
>Movie : Movie

    title: string;
>title : 文字
>类型别名 :=> 文字

    yearReleased: number;
>yearReleased : 数字
>类型别名 :=> 数字
}

const m = { title: "The Matrix", yearReleased: 1999 };
>m : { title: 文字; yearReleased: 数字; }
>{ title: "The Matrix", yearReleased: 1999 } : { title: 文字; yearReleased: 数字; }
>title : 文字
>类型别名 :=> 文字
>"The Matrix" : "The Matrix"
>yearReleased : 数字
>类型别名 :=> 数字
>1999 : 1999

// should error here because title: undefined is not assignable to string
const x: Movie = { ...m, title: undefined };
>x : Movie
>Movie : Movie
>{ ...m, title: undefined } : { title: 未定; yearReleased: 数字; }
>m : { title: 文字; yearReleased: 数字; }
>title : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

interface Fields {
>Fields : Fields

    foo: number;
>foo : 数字
>类型别名 :=> 数字

    bar: string;
>bar : 文字
>类型别名 :=> 文字
}
interface NearlyPartialFields {
>NearlyPartialFields : NearlyPartialFields

    foo: number | undefined;
>foo : 数字 | 未定

    bar: string | undefined;
>bar : 文字 | 未定
}
function g(fields: Fields, partialFields: Partial<Fields>, nearlyPartialFields: NearlyPartialFields) {
>g : (fields: Fields, partialFields: Partial<Fields>, nearlyPartialFields: NearlyPartialFields) => 无值
>fields : Fields
>Fields : Fields
>partialFields : Partial<Fields>
>Partial : Partial<T>
>Fields : Fields
>nearlyPartialFields : NearlyPartialFields
>NearlyPartialFields : NearlyPartialFields

    // ok, undefined is stripped from optional properties when spread
    fields = { ...fields, ...partialFields };
>fields = { ...fields, ...partialFields } : { foo: 数字; bar: 文字; }
>fields : Fields
>{ ...fields, ...partialFields } : { foo: 数字; bar: 文字; }
>fields : Fields
>partialFields : Partial<Fields>

    // error: not optional, undefined remains
    fields = { ...fields, ...nearlyPartialFields };
>fields = { ...fields, ...nearlyPartialFields } : { foo: 数字 | 未定; bar: 文字 | 未定; }
>fields : Fields
>{ ...fields, ...nearlyPartialFields } : { foo: 数字 | 未定; bar: 文字 | 未定; }
>fields : Fields
>nearlyPartialFields : NearlyPartialFields
}

