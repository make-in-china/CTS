=== tests/cases/conformance/expressions/typeGuards/typeGuardsInIfStatement.ts ===
// In the true branch statement of an 'if' statement, 
// the type of a variable or parameter is narrowed by any type guard in the 'if' condition when true.
// In the false branch statement of an 'if' statement, 
// the type of a variable or parameter is narrowed by any type guard in the 'if' condition when false.
function foo(x: number | string) {
>foo : (x: string | number) => number
>x : string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        return x.length; // string
>x.length : number
>类型别名 :=> 数字
>x : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字
    }
    else {
        return x++; // number
>x++ : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字
    }
}
function foo2(x: number | string) {
>foo2 : (x: string | number) => number
>x : string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        x = 10;
>x = 10 : 10
>x : string | number
>10 : 10

        return x; // number
>x : number
>类型别名 :=> 数字
    }
    else {
        return x; // number
>x : number
>类型别名 :=> 数字
    }
}
function foo3(x: number | string) {
>foo3 : (x: string | number) => string | number
>x : string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        x = "Hello";
>x = "Hello" : "Hello"
>x : string | number
>"Hello" : "Hello"

        return x; // string
>x : string
>类型别名 :=> 文字
    }
    else {
        return x; // number
>x : number
>类型别名 :=> 数字
    }
}
function foo4(x: number | string) {
>foo4 : (x: string | number) => string | number
>x : string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        return x; // string
>x : string
>类型别名 :=> 文字
    }
    else {
        x = 10;
>x = 10 : 10
>x : string | number
>10 : 10

        return x; // number
>x : number
>类型别名 :=> 数字
    }
}
function foo5(x: number | string) {
>foo5 : (x: string | number) => string
>x : string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        return x; // string
>x : string
>类型别名 :=> 文字
    }
    else {
        x = "hello";
>x = "hello" : "hello"
>x : string | number
>"hello" : "hello"

        return x; // string
>x : string
>类型别名 :=> 文字
    }
}
function foo6(x: number | string) {
>foo6 : (x: string | number) => string | number
>x : string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        x = 10;
>x = 10 : 10
>x : string | number
>10 : 10

        return x; // number
>x : number
>类型别名 :=> 数字
    }
    else {
        x = "hello";
>x = "hello" : "hello"
>x : string | number
>"hello" : "hello"

        return x; // string
>x : string
>类型别名 :=> 文字
    }
}
function foo7(x: number | string | boolean) {
>foo7 : (x: string | number | boolean) => boolean
>x : string | number | boolean

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number | boolean
>"string" : "string"

        return x === "hello"; // string
>x === "hello" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"hello" : "hello"
    }
    else if (typeof x === "boolean") {
>typeof x === "boolean" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : number | boolean
>"boolean" : "boolean"

        return x; // boolean
>x : boolean
>类型别名 :=> 真假
    }
    else {
        return x == 10; // number
>x == 10 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>10 : 10
    }
}
function foo8(x: number | string | boolean) {
>foo8 : (x: string | number | boolean) => boolean
>x : string | number | boolean

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number | boolean
>"string" : "string"

        return x === "hello"; // string
>x === "hello" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"hello" : "hello"
    }
    else {
        var b: number | boolean = x; //  number | boolean
>b : number | boolean
>x : number | boolean

        if (typeof x === "boolean") {
>typeof x === "boolean" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : number | boolean
>"boolean" : "boolean"

            return x; // boolean
>x : boolean
>类型别名 :=> 真假
        }
        else {
            return x == 10; // number
>x == 10 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>10 : 10
        }
    }
}
function foo9(x: number | string) {
>foo9 : (x: string | number) => boolean
>x : string | number

    var y = 10;
>y : number
>类型别名 :=> 数字
>10 : 10

    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number
>"string" : "string"

        // usage of x or assignment to separate variable shouldn't cause narrowing of type to stop
        y = x.length; 
>y = x.length : number
>类型别名 :=> 数字
>y : number
>类型别名 :=> 数字
>x.length : number
>类型别名 :=> 数字
>x : string
>类型别名 :=> 文字
>length : number
>类型别名 :=> 数字

        return x === "hello"; // string
>x === "hello" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"hello" : "hello"
    }
    else {
        return x == 10; // number
>x == 10 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>10 : 10
    }
}
function foo10(x: number | string | boolean) {
>foo10 : (x: string | number | boolean) => boolean
>x : string | number | boolean

    // Mixing typeguard narrowing in if statement with conditional expression typeguard
    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number | boolean
>"string" : "string"

        return x === "hello"; // string
>x === "hello" : boolean
>类型别名 :=> 真假
>x : string
>类型别名 :=> 文字
>"hello" : "hello"
    }
    else {
        var y: boolean | string;
>y : string | boolean

        var b = x; // number | boolean
>b : number | boolean
>x : number | boolean

        return typeof x === "number"
>typeof x === "number"            ? x === 10 // number            : x : boolean
>类型别名 :=> 真假
>typeof x === "number" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : number | boolean
>"number" : "number"

            ? x === 10 // number
>x === 10 : boolean
>类型别名 :=> 真假
>x : number
>类型别名 :=> 数字
>10 : 10

            : x; // x should be boolean
>x : boolean
>类型别名 :=> 真假
    }
}
function foo11(x: number | string | boolean) {
>foo11 : (x: string | number | boolean) => string
>x : string | number | boolean

    // Mixing typeguard narrowing in if statement with conditional expression typeguard
    // Assigning value to x deep inside another guard stops narrowing of type too
    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number | boolean
>"string" : "string"

        return x; // string | number | boolean - x changed in else branch
>x : string
>类型别名 :=> 文字
    }
    else {
        var y: number| boolean | string;
>y : string | number | boolean

        var b = x; // number | boolean | string - because below we are changing value of x in if statement
>b : number | boolean
>x : number | boolean

        return typeof x === "number"
>typeof x === "number"            ? (            // change value of x            x = 10 && x.toString() // number | boolean | string            )            : (            // do not change value            y = x && x.toString() // number | boolean | string            ) : string
>类型别名 :=> 文字
>typeof x === "number" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : number | boolean
>"number" : "number"

            ? (
>(            // change value of x            x = 10 && x.toString() // number | boolean | string            ) : string
>类型别名 :=> 文字

            // change value of x
            x = 10 && x.toString() // number | boolean | string
>x = 10 && x.toString() : string
>类型别名 :=> 文字
>x : string | number | boolean
>10 && x.toString() : string
>类型别名 :=> 文字
>10 : 10
>x.toString() : string
>类型别名 :=> 文字
>x.toString : (radix?: number) => string
>x : number
>类型别名 :=> 数字
>toString : (radix?: number) => string

            )
            : (
>(            // do not change value            y = x && x.toString() // number | boolean | string            ) : string
>类型别名 :=> 文字

            // do not change value
            y = x && x.toString() // number | boolean | string
>y = x && x.toString() : string
>类型别名 :=> 文字
>y : string | number | boolean
>x && x.toString() : string
>类型别名 :=> 文字
>x : boolean
>类型别名 :=> 真假
>x.toString() : string
>类型别名 :=> 文字
>x.toString : () => string
>x : true
>类型别名 :=> 为真
>toString : () => string

            );
    }
}
function foo12(x: number | string | boolean) {
>foo12 : (x: string | number | boolean) => any
>x : string | number | boolean

    // Mixing typeguard narrowing in if statement with conditional expression typeguard
    // Assigning value to x in outer guard shouldn't stop narrowing in the inner expression
    if (typeof x === "string") {
>typeof x === "string" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : string | number | boolean
>"string" : "string"

        return x.toString(); // string | number | boolean - x changed in else branch
>x.toString() : string
>类型别名 :=> 文字
>x.toString : () => string
>x : string
>类型别名 :=> 文字
>toString : () => string
    }
    else {
        x = 10;
>x = 10 : 10
>x : string | number | boolean
>10 : 10

        var b = x; // number | boolean | string
>b : number
>类型别名 :=> 数字
>x : number
>类型别名 :=> 数字

        return typeof x === "number"
>typeof x === "number"            ? x.toString() // number            : x.toString() : any
>类型别名 :=> 任意
>typeof x === "number" : boolean
>类型别名 :=> 真假
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : number
>类型别名 :=> 数字
>"number" : "number"

            ? x.toString() // number
>x.toString() : string
>类型别名 :=> 文字
>x.toString : (radix?: number) => string
>x : number
>类型别名 :=> 数字
>toString : (radix?: number) => string

            : x.toString(); // boolean | string
>x.toString() : any
>类型别名 :=> 任意
>x.toString : any
>类型别名 :=> 任意
>x : never
>类型别名 :=> 不及
>toString : any
>类型别名 :=> 任意
    }
}
