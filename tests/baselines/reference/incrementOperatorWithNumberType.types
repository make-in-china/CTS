=== tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithNumberType.ts ===
// ++ operator on number type
var NUMBER: number;
>NUMBER : 数字
>类型别名 :=> 数字

var NUMBER1: number[] = [1, 2];
>NUMBER1 : 数字[]
>[1, 2] : 数字[]
>1 : 1
>2 : 2

class A {
>A : A

    public a: number;
>a : 数字
>类型别名 :=> 数字
}
module M {
>M : 类为 M

    export var n: number;
>n : 数字
>类型别名 :=> 数字
}

var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// number type var
var ResultIsNumber1 = ++NUMBER;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>++NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

var ResultIsNumber2 = NUMBER++;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>NUMBER++ : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

// expressions
var ResultIsNumber3 = ++objA.a;
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字

var ResultIsNumber4 = ++M.n;
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>++M.n : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

var ResultIsNumber5 = objA.a++;
>ResultIsNumber5 : 数字
>类型别名 :=> 数字
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字

var ResultIsNumber6 = M.n++;
>ResultIsNumber6 : 数字
>类型别名 :=> 数字
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

var ResultIsNumber7 = NUMBER1[0]++;
>ResultIsNumber7 : 数字
>类型别名 :=> 数字
>NUMBER1[0]++ : 数字
>类型别名 :=> 数字
>NUMBER1[0] : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]
>0 : 0

// miss assignment operators
++NUMBER;
>++NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

++NUMBER1[0];
>++NUMBER1[0] : 数字
>类型别名 :=> 数字
>NUMBER1[0] : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]
>0 : 0

++objA.a;
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字

++M.n;
>++M.n : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

++objA.a, M.n;
>++objA.a, M.n : 数字
>类型别名 :=> 数字
>++objA.a : 数字
>类型别名 :=> 数字
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

NUMBER++;
>NUMBER++ : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

NUMBER1[0]++;
>NUMBER1[0]++ : 数字
>类型别名 :=> 数字
>NUMBER1[0] : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]
>0 : 0

objA.a++;
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字

M.n++;
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

objA.a++, M.n++;
>objA.a++, M.n++ : 数字
>类型别名 :=> 数字
>objA.a++ : 数字
>类型别名 :=> 数字
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字
>M.n++ : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

