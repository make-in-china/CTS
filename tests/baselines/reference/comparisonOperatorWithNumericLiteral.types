=== tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNumericLiteral.ts ===
type BrandedNum = number & { __numberBrand: any };
>BrandedNum : BrandedNum
>__numberBrand : 任意
>类型别名 :=> 任意

var x : BrandedNum;
>x : BrandedNum
>BrandedNum : BrandedNum

// operator >
x > 0;
>x > 0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
>0 : 0

x > <number>0;
>x > <number>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><number>0 : 数字
>类型别名 :=> 数字
>0 : 0

x > <BrandedNum>0;
>x > <BrandedNum>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><BrandedNum>0 : BrandedNum
>BrandedNum : BrandedNum
>0 : 0

// operator <
x < 0;
>x < 0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
>0 : 0

x < <number>0;
>x < <number>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><number>0 : 数字
>类型别名 :=> 数字
>0 : 0

x < <BrandedNum>0;
>x < <BrandedNum>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><BrandedNum>0 : BrandedNum
>BrandedNum : BrandedNum
>0 : 0

// operator >=
x >= 0;
>x >= 0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
>0 : 0

x >= <number>0;
>x >= <number>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><number>0 : 数字
>类型别名 :=> 数字
>0 : 0

x >= <BrandedNum>0;
>x >= <BrandedNum>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><BrandedNum>0 : BrandedNum
>BrandedNum : BrandedNum
>0 : 0

// operator <=
x <= 0;
>x <= 0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
>0 : 0

x <= <number>0;
>x <= <number>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><number>0 : 数字
>类型别名 :=> 数字
>0 : 0

x <= <BrandedNum>0;
>x <= <BrandedNum>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><BrandedNum>0 : BrandedNum
>BrandedNum : BrandedNum
>0 : 0

// operator ==
x == 0;
>x == 0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
>0 : 0

x == <number>0;
>x == <number>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><number>0 : 数字
>类型别名 :=> 数字
>0 : 0

x == <BrandedNum>0;
>x == <BrandedNum>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><BrandedNum>0 : BrandedNum
>BrandedNum : BrandedNum
>0 : 0

// operator !=
x != 0;
>x != 0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
>0 : 0

x != <number>0;
>x != <number>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><number>0 : 数字
>类型别名 :=> 数字
>0 : 0

x != <BrandedNum>0;
>x != <BrandedNum>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><BrandedNum>0 : BrandedNum
>BrandedNum : BrandedNum
>0 : 0

// operator ===
x === 0;
>x === 0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
>0 : 0

x === <number>0;
>x === <number>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><number>0 : 数字
>类型别名 :=> 数字
>0 : 0

x === <BrandedNum>0;
>x === <BrandedNum>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><BrandedNum>0 : BrandedNum
>BrandedNum : BrandedNum
>0 : 0

// operator !==
x !== 0;
>x !== 0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
>0 : 0

x !== <number>0;
>x !== <number>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><number>0 : 数字
>类型别名 :=> 数字
>0 : 0

x !== <BrandedNum>0;
>x !== <BrandedNum>0 : 真假
>类型别名 :=> 真假
>x : BrandedNum
><BrandedNum>0 : BrandedNum
>BrandedNum : BrandedNum
>0 : 0

