=== tests/cases/compiler/promiseType.ts ===
declare var p: Promise<boolean>;
>p : Promise<真假>
>Promise : Promise<T>

declare var x: any;
>x : 任意
>类型别名 :=> 任意

async function A() {
>A : () => Promise<真假>

    const a = await p;
>a : 真假
>类型别名 :=> 真假
>await p : 真假
>类型别名 :=> 真假
>p : Promise<真假>

    return a;
>a : 真假
>类型别名 :=> 真假
}

async function B() {
>B : () => Promise<数字>

    const a = await p;
>a : 真假
>类型别名 :=> 真假
>await p : 真假
>类型别名 :=> 真假
>p : Promise<真假>

    return 1;
>1 : 1
}

async function C() {
>C : () => Promise<1 | "error">

    try {
        const a = await p;
>a : 真假
>类型别名 :=> 真假
>await p : 真假
>类型别名 :=> 真假
>p : Promise<真假>

        return 1;
>1 : 1
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        return 'error';
>'error' : "error"
    }
}

async function D() {
>D : () => Promise<数字>

    try {
        const a = await p;
>a : 真假
>类型别名 :=> 真假
>await p : 真假
>类型别名 :=> 真假
>p : Promise<真假>

        return 1;
>1 : 1
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意
    }
}

async function E() {
>E : () => Promise<数字>

    try {
        const a = await p;
>a : 真假
>类型别名 :=> 真假
>await p : 真假
>类型别名 :=> 真假
>p : Promise<真假>

        return 1;
>1 : 1
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        throw Error();
>Error() : Error
>Error : ErrorConstructor
    }
}

async function F() {
>F : () => Promise<数字>

    try {
        const a = await p;
>a : 真假
>类型别名 :=> 真假
>await p : 真假
>类型别名 :=> 真假
>p : Promise<真假>

        return 1;
>1 : 1
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        return Promise.reject(Error());
>Promise.reject(Error()) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Error() : Error
>Error : ErrorConstructor
    }
}

async function G() {
>G : () => Promise<真假>

    try {
        const a = await p;
>a : 真假
>类型别名 :=> 真假
>await p : 真假
>类型别名 :=> 真假
>p : Promise<真假>

        return a;
>a : 真假
>类型别名 :=> 真假
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        return;
    }
}

async function H() {
>H : () => Promise<真假>

    try {
        const a = await p;
>a : 真假
>类型别名 :=> 真假
>await p : 真假
>类型别名 :=> 真假
>p : Promise<真假>

        return a;
>a : 真假
>类型别名 :=> 真假
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        throw Error();
>Error() : Error
>Error : ErrorConstructor
    }
}

async function I() {
>I : () => Promise<真假>

    try {
        const a = await p;
>a : 真假
>类型别名 :=> 真假
>await p : 真假
>类型别名 :=> 真假
>p : Promise<真假>

        return a;
>a : 真假
>类型别名 :=> 真假
    }
    catch (e) {
>e : 任意
>类型别名 :=> 任意

        return Promise.reject(Error());
>Promise.reject(Error()) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Error() : Error
>Error : ErrorConstructor
    }
}

// addresses github issue #4903:

const p00 = p.catch();
>p00 : Promise<真假>
>p.catch() : Promise<真假>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>

const p01 = p.then();
>p01 : Promise<真假>
>p.then() : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>

const p10 = p.catch(undefined);
>p10 : Promise<真假>
>p.catch(undefined) : Promise<真假>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>undefined : 未定
>类型别名 :=> 未定

const p11 = p.catch(null);
>p11 : Promise<真假>
>p.catch(null) : Promise<真假>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>null : 空值
>类型别名 :=> 空值

const p12 = p.catch(() => 1);
>p12 : Promise<数字 | 真假>
>p.catch(() => 1) : Promise<数字 | 真假>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>() => 1 : () => 数字
>1 : 1

const p13 = p.catch(() => x);
>p13 : Promise<任意>
>p.catch(() => x) : Promise<任意>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const p14 = p.catch(() => undefined);
>p14 : Promise<任意>
>p.catch(() => undefined) : Promise<任意>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const p15 = p.catch(() => null);
>p15 : Promise<任意>
>p.catch(() => null) : Promise<任意>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const p16 = p.catch(() => {});
>p16 : Promise<真假 | 无值>
>p.catch(() => {}) : Promise<真假 | 无值>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>() => {} : () => 无值

const p17 = p.catch(() => {throw 1});
>p17 : Promise<真假>
>p.catch(() => {throw 1}) : Promise<真假>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>() => {throw 1} : () => 不及
>1 : 1

const p18 = p.catch(() => Promise.reject(1));
>p18 : Promise<真假>
>p.catch(() => Promise.reject(1)) : Promise<真假>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const p19 = p.catch(() => Promise.resolve(1));
>p19 : Promise<数字 | 真假>
>p.catch(() => Promise.resolve(1)) : Promise<数字 | 真假>
>p.catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>p : Promise<真假>
>catch : <TResult = 不及>(onrejected?: (reason: 任意) => TResult | PromiseLike<TResult>) => Promise<真假 | TResult>
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const p20 = p.then(undefined);
>p20 : Promise<真假>
>p.then(undefined) : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定

const p21 = p.then(null);
>p21 : Promise<真假>
>p.then(null) : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值

const p22 = p.then(() => 1);
>p22 : Promise<数字>
>p.then(() => 1) : Promise<数字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => 1 : () => 数字
>1 : 1

const p23 = p.then(() => x);
>p23 : Promise<任意>
>p.then(() => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const p24 = p.then(() => undefined);
>p24 : Promise<任意>
>p.then(() => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const p25 = p.then(() => null);
>p25 : Promise<任意>
>p.then(() => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const p26 = p.then(() => {});
>p26 : Promise<无值>
>p.then(() => {}) : Promise<无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值

const p27 = p.then(() => {throw 1});
>p27 : Promise<不及>
>p.then(() => {throw 1}) : Promise<不及>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1

const p28 = p.then(() => Promise.resolve(1));
>p28 : Promise<数字>
>p.then(() => Promise.resolve(1)) : Promise<数字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const p29 = p.then(() => Promise.reject(1));
>p29 : Promise<不及>
>p.then(() => Promise.reject(1)) : Promise<不及>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const p30 = p.then(undefined, undefined);
>p30 : Promise<真假>
>p.then(undefined, undefined) : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

const p31 = p.then(undefined, null);
>p31 : Promise<真假>
>p.then(undefined, null) : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定
>null : 空值
>类型别名 :=> 空值

const p32 = p.then(undefined, () => 1);
>p32 : Promise<数字 | 真假>
>p.then(undefined, () => 1) : Promise<数字 | 真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定
>() => 1 : () => 数字
>1 : 1

const p33 = p.then(undefined, () => x);
>p33 : Promise<任意>
>p.then(undefined, () => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const p34 = p.then(undefined, () => undefined);
>p34 : Promise<任意>
>p.then(undefined, () => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const p35 = p.then(undefined, () => null);
>p35 : Promise<任意>
>p.then(undefined, () => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const p36 = p.then(undefined, () => {});
>p36 : Promise<真假 | 无值>
>p.then(undefined, () => {}) : Promise<真假 | 无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定
>() => {} : () => 无值

const p37 = p.then(undefined, () => {throw 1});
>p37 : Promise<真假>
>p.then(undefined, () => {throw 1}) : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定
>() => {throw 1} : () => 不及
>1 : 1

const p38 = p.then(undefined, () => Promise.resolve(1));
>p38 : Promise<数字 | 真假>
>p.then(undefined, () => Promise.resolve(1)) : Promise<数字 | 真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const p39 = p.then(undefined, () => Promise.reject(1));
>p39 : Promise<真假>
>p.then(undefined, () => Promise.reject(1)) : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>undefined : 未定
>类型别名 :=> 未定
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const p40 = p.then(null, undefined);
>p40 : Promise<真假>
>p.then(null, undefined) : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

const p41 = p.then(null, null);
>p41 : Promise<真假>
>p.then(null, null) : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

const p42 = p.then(null, () => 1);
>p42 : Promise<数字 | 真假>
>p.then(null, () => 1) : Promise<数字 | 真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值
>() => 1 : () => 数字
>1 : 1

const p43 = p.then(null, () => x);
>p43 : Promise<任意>
>p.then(null, () => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const p44 = p.then(null, () => undefined);
>p44 : Promise<任意>
>p.then(null, () => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const p45 = p.then(null, () => null);
>p45 : Promise<任意>
>p.then(null, () => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const p46 = p.then(null, () => {});
>p46 : Promise<真假 | 无值>
>p.then(null, () => {}) : Promise<真假 | 无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值
>() => {} : () => 无值

const p47 = p.then(null, () => {throw 1});
>p47 : Promise<真假>
>p.then(null, () => {throw 1}) : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值
>() => {throw 1} : () => 不及
>1 : 1

const p48 = p.then(null, () => Promise.resolve(1));
>p48 : Promise<数字 | 真假>
>p.then(null, () => Promise.resolve(1)) : Promise<数字 | 真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const p49 = p.then(null, () => Promise.reject(1));
>p49 : Promise<真假>
>p.then(null, () => Promise.reject(1)) : Promise<真假>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>null : 空值
>类型别名 :=> 空值
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const p50 = p.then(() => "1", undefined);
>p50 : Promise<文字>
>p.then(() => "1", undefined) : Promise<文字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => "1" : () => 文字
>"1" : "1"
>undefined : 未定
>类型别名 :=> 未定

const p51 = p.then(() => "1", null);
>p51 : Promise<文字>
>p.then(() => "1", null) : Promise<文字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => "1" : () => 文字
>"1" : "1"
>null : 空值
>类型别名 :=> 空值

const p52 = p.then(() => "1", () => 1);
>p52 : Promise<文字 | 数字>
>p.then(() => "1", () => 1) : Promise<文字 | 数字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => "1" : () => 文字
>"1" : "1"
>() => 1 : () => 数字
>1 : 1

const p53 = p.then(() => "1", () => x);
>p53 : Promise<任意>
>p.then(() => "1", () => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => "1" : () => 文字
>"1" : "1"
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const p54 = p.then(() => "1", () => undefined);
>p54 : Promise<任意>
>p.then(() => "1", () => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => "1" : () => 文字
>"1" : "1"
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const p55 = p.then(() => "1", () => null);
>p55 : Promise<任意>
>p.then(() => "1", () => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => "1" : () => 文字
>"1" : "1"
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const p56 = p.then(() => "1", () => {});
>p56 : Promise<文字 | 无值>
>p.then(() => "1", () => {}) : Promise<文字 | 无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => "1" : () => 文字
>"1" : "1"
>() => {} : () => 无值

const p57 = p.then(() => "1", () => {throw 1});
>p57 : Promise<文字>
>p.then(() => "1", () => {throw 1}) : Promise<文字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => "1" : () => 文字
>"1" : "1"
>() => {throw 1} : () => 不及
>1 : 1

const p58 = p.then(() => "1", () => Promise.resolve(1));
>p58 : Promise<文字 | 数字>
>p.then(() => "1", () => Promise.resolve(1)) : Promise<文字 | 数字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => "1" : () => 文字
>"1" : "1"
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const p59 = p.then(() => "1", () => Promise.reject(1));
>p59 : Promise<文字>
>p.then(() => "1", () => Promise.reject(1)) : Promise<文字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => "1" : () => 文字
>"1" : "1"
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const p60 = p.then(() => x, undefined);
>p60 : Promise<任意>
>p.then(() => x, undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定

const p61 = p.then(() => x, null);
>p61 : Promise<任意>
>p.then(() => x, null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

const p62 = p.then(() => x, () => 1);
>p62 : Promise<任意>
>p.then(() => x, () => 1) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
>() => 1 : () => 数字
>1 : 1

const p63 = p.then(() => x, () => x);
>p63 : Promise<任意>
>p.then(() => x, () => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const p64 = p.then(() => x, () => undefined);
>p64 : Promise<任意>
>p.then(() => x, () => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const p65 = p.then(() => x, () => null);
>p65 : Promise<任意>
>p.then(() => x, () => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const p66 = p.then(() => x, () => {});
>p66 : Promise<任意>
>p.then(() => x, () => {}) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
>() => {} : () => 无值

const p67 = p.then(() => x, () => {throw 1});
>p67 : Promise<任意>
>p.then(() => x, () => {throw 1}) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
>() => {throw 1} : () => 不及
>1 : 1

const p68 = p.then(() => x, () => Promise.resolve(1));
>p68 : Promise<任意>
>p.then(() => x, () => Promise.resolve(1)) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const p69 = p.then(() => x, () => Promise.reject(1));
>p69 : Promise<任意>
>p.then(() => x, () => Promise.reject(1)) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const p70 = p.then(() => undefined, undefined);
>p70 : Promise<任意>
>p.then(() => undefined, undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定
>undefined : 未定
>类型别名 :=> 未定

const p71 = p.then(() => undefined, null);
>p71 : Promise<任意>
>p.then(() => undefined, null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定
>null : 空值
>类型别名 :=> 空值

const p72 = p.then(() => undefined, () => 1);
>p72 : Promise<任意>
>p.then(() => undefined, () => 1) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定
>() => 1 : () => 数字
>1 : 1

const p73 = p.then(() => undefined, () => x);
>p73 : Promise<任意>
>p.then(() => undefined, () => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const p74 = p.then(() => undefined, () => undefined);
>p74 : Promise<任意>
>p.then(() => undefined, () => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const p75 = p.then(() => undefined, () => null);
>p75 : Promise<任意>
>p.then(() => undefined, () => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const p76 = p.then(() => undefined, () => {});
>p76 : Promise<任意>
>p.then(() => undefined, () => {}) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定
>() => {} : () => 无值

const p77 = p.then(() => undefined, () => {throw 1});
>p77 : Promise<任意>
>p.then(() => undefined, () => {throw 1}) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定
>() => {throw 1} : () => 不及
>1 : 1

const p78 = p.then(() => undefined, () => Promise.resolve(1));
>p78 : Promise<任意>
>p.then(() => undefined, () => Promise.resolve(1)) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const p79 = p.then(() => undefined, () => Promise.reject(1));
>p79 : Promise<任意>
>p.then(() => undefined, () => Promise.reject(1)) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const p80 = p.then(() => null, undefined);
>p80 : Promise<任意>
>p.then(() => null, undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

const p81 = p.then(() => null, null);
>p81 : Promise<任意>
>p.then(() => null, null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值

const p82 = p.then(() => null, () => 1);
>p82 : Promise<任意>
>p.then(() => null, () => 1) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>() => 1 : () => 数字
>1 : 1

const p83 = p.then(() => null, () => x);
>p83 : Promise<任意>
>p.then(() => null, () => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const p84 = p.then(() => null, () => undefined);
>p84 : Promise<任意>
>p.then(() => null, () => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const p85 = p.then(() => null, () => null);
>p85 : Promise<任意>
>p.then(() => null, () => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const p86 = p.then(() => null, () => {});
>p86 : Promise<任意>
>p.then(() => null, () => {}) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>() => {} : () => 无值

const p87 = p.then(() => null, () => {throw 1});
>p87 : Promise<任意>
>p.then(() => null, () => {throw 1}) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>() => {throw 1} : () => 不及
>1 : 1

const p88 = p.then(() => null, () => Promise.resolve(1));
>p88 : Promise<任意>
>p.then(() => null, () => Promise.resolve(1)) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const p89 = p.then(() => null, () => Promise.reject(1));
>p89 : Promise<任意>
>p.then(() => null, () => Promise.reject(1)) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const p90 = p.then(() => {}, undefined);
>p90 : Promise<无值>
>p.then(() => {}, undefined) : Promise<无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值
>undefined : 未定
>类型别名 :=> 未定

const p91 = p.then(() => {}, null);
>p91 : Promise<无值>
>p.then(() => {}, null) : Promise<无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值
>null : 空值
>类型别名 :=> 空值

const p92 = p.then(() => {}, () => 1);
>p92 : Promise<数字 | 无值>
>p.then(() => {}, () => 1) : Promise<数字 | 无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值
>() => 1 : () => 数字
>1 : 1

const p93 = p.then(() => {}, () => x);
>p93 : Promise<任意>
>p.then(() => {}, () => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const p94 = p.then(() => {}, () => undefined);
>p94 : Promise<任意>
>p.then(() => {}, () => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const p95 = p.then(() => {}, () => null);
>p95 : Promise<任意>
>p.then(() => {}, () => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const p96 = p.then(() => {}, () => {});
>p96 : Promise<无值>
>p.then(() => {}, () => {}) : Promise<无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值
>() => {} : () => 无值

const p97 = p.then(() => {}, () => {throw 1});
>p97 : Promise<无值>
>p.then(() => {}, () => {throw 1}) : Promise<无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值
>() => {throw 1} : () => 不及
>1 : 1

const p98 = p.then(() => {}, () => Promise.resolve(1));
>p98 : Promise<数字 | 无值>
>p.then(() => {}, () => Promise.resolve(1)) : Promise<数字 | 无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const p99 = p.then(() => {}, () => Promise.reject(1));
>p99 : Promise<无值>
>p.then(() => {}, () => Promise.reject(1)) : Promise<无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {} : () => 无值
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const pa0 = p.then(() => {throw 1}, undefined);
>pa0 : Promise<不及>
>p.then(() => {throw 1}, undefined) : Promise<不及>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1
>undefined : 未定
>类型别名 :=> 未定

const pa1 = p.then(() => {throw 1}, null);
>pa1 : Promise<不及>
>p.then(() => {throw 1}, null) : Promise<不及>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1
>null : 空值
>类型别名 :=> 空值

const pa2 = p.then(() => {throw 1}, () => 1);
>pa2 : Promise<数字>
>p.then(() => {throw 1}, () => 1) : Promise<数字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1
>() => 1 : () => 数字
>1 : 1

const pa3 = p.then(() => {throw 1}, () => x);
>pa3 : Promise<任意>
>p.then(() => {throw 1}, () => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const pa4 = p.then(() => {throw 1}, () => undefined);
>pa4 : Promise<任意>
>p.then(() => {throw 1}, () => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const pa5 = p.then(() => {throw 1}, () => null);
>pa5 : Promise<任意>
>p.then(() => {throw 1}, () => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const pa6 = p.then(() => {throw 1}, () => {});
>pa6 : Promise<无值>
>p.then(() => {throw 1}, () => {}) : Promise<无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1
>() => {} : () => 无值

const pa7 = p.then(() => {throw 1}, () => {throw 1});
>pa7 : Promise<不及>
>p.then(() => {throw 1}, () => {throw 1}) : Promise<不及>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1
>() => {throw 1} : () => 不及
>1 : 1

const pa8 = p.then(() => {throw 1}, () => Promise.resolve(1));
>pa8 : Promise<数字>
>p.then(() => {throw 1}, () => Promise.resolve(1)) : Promise<数字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const pa9 = p.then(() => {throw 1}, () => Promise.reject(1));
>pa9 : Promise<不及>
>p.then(() => {throw 1}, () => Promise.reject(1)) : Promise<不及>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {throw 1} : () => 不及
>1 : 1
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const pb0 = p.then(() => Promise.resolve("1"), undefined);
>pb0 : Promise<文字>
>p.then(() => Promise.resolve("1"), undefined) : Promise<文字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve("1") : () => Promise<文字>
>Promise.resolve("1") : Promise<文字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>"1" : "1"
>undefined : 未定
>类型别名 :=> 未定

const pb1 = p.then(() => Promise.resolve("1"), null);
>pb1 : Promise<文字>
>p.then(() => Promise.resolve("1"), null) : Promise<文字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve("1") : () => Promise<文字>
>Promise.resolve("1") : Promise<文字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>"1" : "1"
>null : 空值
>类型别名 :=> 空值

const pb2 = p.then(() => Promise.resolve("1"), () => 1);
>pb2 : Promise<文字 | 数字>
>p.then(() => Promise.resolve("1"), () => 1) : Promise<文字 | 数字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve("1") : () => Promise<文字>
>Promise.resolve("1") : Promise<文字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>"1" : "1"
>() => 1 : () => 数字
>1 : 1

const pb3 = p.then(() => Promise.resolve("1"), () => x);
>pb3 : Promise<任意>
>p.then(() => Promise.resolve("1"), () => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve("1") : () => Promise<文字>
>Promise.resolve("1") : Promise<文字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>"1" : "1"
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const pb4 = p.then(() => Promise.resolve("1"), () => undefined);
>pb4 : Promise<任意>
>p.then(() => Promise.resolve("1"), () => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve("1") : () => Promise<文字>
>Promise.resolve("1") : Promise<文字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>"1" : "1"
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const pb5 = p.then(() => Promise.resolve("1"), () => null);
>pb5 : Promise<任意>
>p.then(() => Promise.resolve("1"), () => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve("1") : () => Promise<文字>
>Promise.resolve("1") : Promise<文字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>"1" : "1"
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const pb6 = p.then(() => Promise.resolve("1"), () => {});
>pb6 : Promise<文字 | 无值>
>p.then(() => Promise.resolve("1"), () => {}) : Promise<文字 | 无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve("1") : () => Promise<文字>
>Promise.resolve("1") : Promise<文字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>"1" : "1"
>() => {} : () => 无值

const pb7 = p.then(() => Promise.resolve("1"), () => {throw 1});
>pb7 : Promise<文字>
>p.then(() => Promise.resolve("1"), () => {throw 1}) : Promise<文字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve("1") : () => Promise<文字>
>Promise.resolve("1") : Promise<文字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>"1" : "1"
>() => {throw 1} : () => 不及
>1 : 1

const pb8 = p.then(() => Promise.resolve("1"), () => Promise.resolve(1));
>pb8 : Promise<文字 | 数字>
>p.then(() => Promise.resolve("1"), () => Promise.resolve(1)) : Promise<文字 | 数字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve("1") : () => Promise<文字>
>Promise.resolve("1") : Promise<文字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>"1" : "1"
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const pb9 = p.then(() => Promise.resolve("1"), () => Promise.reject(1));
>pb9 : Promise<文字>
>p.then(() => Promise.resolve("1"), () => Promise.reject(1)) : Promise<文字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.resolve("1") : () => Promise<文字>
>Promise.resolve("1") : Promise<文字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>"1" : "1"
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

const pc0 = p.then(() => Promise.reject("1"), undefined);
>pc0 : Promise<不及>
>p.then(() => Promise.reject("1"), undefined) : Promise<不及>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject("1") : () => Promise<不及>
>Promise.reject("1") : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>"1" : "1"
>undefined : 未定
>类型别名 :=> 未定

const pc1 = p.then(() => Promise.reject("1"), null);
>pc1 : Promise<不及>
>p.then(() => Promise.reject("1"), null) : Promise<不及>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject("1") : () => Promise<不及>
>Promise.reject("1") : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>"1" : "1"
>null : 空值
>类型别名 :=> 空值

const pc2 = p.then(() => Promise.reject("1"), () => 1);
>pc2 : Promise<数字>
>p.then(() => Promise.reject("1"), () => 1) : Promise<数字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject("1") : () => Promise<不及>
>Promise.reject("1") : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>"1" : "1"
>() => 1 : () => 数字
>1 : 1

const pc3 = p.then(() => Promise.reject("1"), () => x);
>pc3 : Promise<任意>
>p.then(() => Promise.reject("1"), () => x) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject("1") : () => Promise<不及>
>Promise.reject("1") : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>"1" : "1"
>() => x : () => 任意
>x : 任意
>类型别名 :=> 任意

const pc4 = p.then(() => Promise.reject("1"), () => undefined);
>pc4 : Promise<任意>
>p.then(() => Promise.reject("1"), () => undefined) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject("1") : () => Promise<不及>
>Promise.reject("1") : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>"1" : "1"
>() => undefined : () => 任意
>undefined : 未定
>类型别名 :=> 未定

const pc5 = p.then(() => Promise.reject("1"), () => null);
>pc5 : Promise<任意>
>p.then(() => Promise.reject("1"), () => null) : Promise<任意>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject("1") : () => Promise<不及>
>Promise.reject("1") : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>"1" : "1"
>() => null : () => 任意
>null : 空值
>类型别名 :=> 空值

const pc6 = p.then(() => Promise.reject("1"), () => {});
>pc6 : Promise<无值>
>p.then(() => Promise.reject("1"), () => {}) : Promise<无值>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject("1") : () => Promise<不及>
>Promise.reject("1") : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>"1" : "1"
>() => {} : () => 无值

const pc7 = p.then(() => Promise.reject("1"), () => {throw 1});
>pc7 : Promise<不及>
>p.then(() => Promise.reject("1"), () => {throw 1}) : Promise<不及>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject("1") : () => Promise<不及>
>Promise.reject("1") : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>"1" : "1"
>() => {throw 1} : () => 不及
>1 : 1

const pc8 = p.then(() => Promise.reject("1"), () => Promise.resolve(1));
>pc8 : Promise<数字>
>p.then(() => Promise.reject("1"), () => Promise.resolve(1)) : Promise<数字>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject("1") : () => Promise<不及>
>Promise.reject("1") : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>"1" : "1"
>() => Promise.resolve(1) : () => Promise<数字>
>Promise.resolve(1) : Promise<数字>
>Promise.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>Promise : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<无值>; }
>1 : 1

const pc9 = p.then(() => Promise.reject("1"), () => Promise.reject(1));
>pc9 : Promise<不及>
>p.then(() => Promise.reject("1"), () => Promise.reject(1)) : Promise<不及>
>p.then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>p : Promise<真假>
>then : <TResult1 = 真假, TResult2 = 不及>(onfulfilled?: (value: 真假) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => Promise.reject("1") : () => Promise<不及>
>Promise.reject("1") : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>"1" : "1"
>() => Promise.reject(1) : () => Promise<不及>
>Promise.reject(1) : Promise<不及>
>Promise.reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>Promise : PromiseConstructor
>reject : { (reason: 任意): Promise<不及>; <T>(reason: 任意): Promise<T>; }
>1 : 1

