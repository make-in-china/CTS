=== tests/cases/compiler/exportedInterfaceInaccessibleInCallbackInModule.ts ===
export interface ProgressCallback {
>ProgressCallback : ProgressCallback

	(progress:any):any;
>progress : 任意
>类型别名 :=> 任意
}	

// --- Generic promise
export declare class TPromise<V> {
>TPromise : TPromise<V>
>V : V
	
	constructor(init:(complete: (value:V)=>void, error:(err:any)=>void, progress:ProgressCallback)=>void, oncancel?: any);
>init : (complete: (value: V) => 无值, error: (err: 任意) => 无值, progress: ProgressCallback) => 无值
>complete : (value: V) => 无值
>value : V
>V : V
>error : (err: 任意) => 无值
>err : 任意
>类型别名 :=> 任意
>progress : ProgressCallback
>ProgressCallback : ProgressCallback
>oncancel : 任意
>类型别名 :=> 任意
	
    // removing this method fixes the error squiggle.....
	public then<U>(success?: (value:V)=>TPromise<U>, error?: (err:any)=>TPromise<U>, progress?:ProgressCallback): TPromise<U>;
>then : <U>(success?: (value: V) => TPromise<U>, error?: (err: 任意) => TPromise<U>, progress?: ProgressCallback) => TPromise<U>
>U : U
>success : (value: V) => TPromise<U>
>value : V
>V : V
>TPromise : TPromise<V>
>U : U
>error : (err: 任意) => TPromise<U>
>err : 任意
>类型别名 :=> 任意
>TPromise : TPromise<V>
>U : U
>progress : ProgressCallback
>ProgressCallback : ProgressCallback
>TPromise : TPromise<V>
>U : U
}
