=== tests/cases/conformance/expressions/arrayLiterals/arrayLiterals2ES6.ts ===
// ElementList:  ( Modified )
//      Elisionopt   AssignmentExpression
//      Elisionopt   SpreadElement
//      ElementList, Elisionopt   AssignmentExpression
//      ElementList, Elisionopt   SpreadElement

// SpreadElement:
//      ...   AssignmentExpression

var a0 = [, , 2, 3, 4]
>a0 : 数字[]
>[, , 2, 3, 4] : 数字[]
> : 未定
>类型别名 :=> 未定
> : 未定
>类型别名 :=> 未定
>2 : 2
>3 : 3
>4 : 4

var a1 = ["hello", "world"]
>a1 : 文字[]
>["hello", "world"] : 文字[]
>"hello" : "hello"
>"world" : "world"

var a2 = [, , , ...a0, "hello"];
>a2 : 任意[]
>[, , , ...a0, "hello"] : 任意[]
> : 未定
>类型别名 :=> 未定
> : 未定
>类型别名 :=> 未定
> : 未定
>类型别名 :=> 未定
>...a0 : 任意
>类型别名 :=> 任意
>a0 : 数字[]
>"hello" : "hello"

var a3 = [, , ...a0]
>a3 : 任意[]
>[, , ...a0] : 任意[]
> : 未定
>类型别名 :=> 未定
> : 未定
>类型别名 :=> 未定
>...a0 : 任意
>类型别名 :=> 任意
>a0 : 数字[]

var a4 = [() => 1, ];
>a4 : (() => 数字)[]
>[() => 1, ] : (() => 数字)[]
>() => 1 : () => 数字
>1 : 1

var a5 = [...a0, , ]
>a5 : 任意[]
>[...a0, , ] : 任意[]
>...a0 : 任意
>类型别名 :=> 任意
>a0 : 数字[]
> : 未定
>类型别名 :=> 未定

// Each element expression in a non-empty array literal is processed as follows:
//    - If the array literal contains no spread elements, and if the array literal is contextually typed (section 4.19)
//      by a type T and T has a property with the numeric name N, where N is the index of the element expression in the array literal,
//      the element expression is contextually typed by the type of that property.

// The resulting type an array literal expression is determined as follows:
//     - If the array literal contains no spread elements and is contextually typed by a tuple-like type,
//       the resulting type is a tuple type constructed from the types of the element expressions.

var b0: [any, any, any] = [undefined, null, undefined];
>b0 : [任意, 任意, 任意]
>[undefined, null, undefined] : [未定, 空值, 未定]
>undefined : 未定
>类型别名 :=> 未定
>null : 空值
>类型别名 :=> 空值
>undefined : 未定
>类型别名 :=> 未定

var b1: [number[], string[]] = [[1, 2, 3], ["hello", "string"]];
>b1 : [数字[], 文字[]]
>[[1, 2, 3], ["hello", "string"]] : [数字[], 文字[]]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>["hello", "string"] : 文字[]
>"hello" : "hello"
>"string" : "string"

// The resulting type an array literal expression is determined as follows:
//     - If the array literal contains no spread elements and is an array assignment pattern in a destructuring assignment (section 4.17.1),
//       the resulting type is a tuple type constructed from the types of the element expressions.

var [c0, c1] = [1, 2];        // tuple type [number, number]
>c0 : 数字
>类型别名 :=> 数字
>c1 : 数字
>类型别名 :=> 数字
>[1, 2] : [数字, 数字]
>1 : 1
>2 : 2

var [c2, c3] = [1, 2, true];  // tuple type [number, number, boolean]
>c2 : 数字
>类型别名 :=> 数字
>c3 : 数字
>类型别名 :=> 数字
>[1, 2, true] : [数字, 数字, 真假]
>1 : 1
>2 : 2
>true : 为真
>类型别名 :=> 为真

// The resulting type an array literal expression is determined as follows:
//      - the resulting type is an array type with an element type that is the union of the types of the
//        non - spread element expressions and the numeric index signature types of the spread element expressions
var temp = ["s", "t", "r"];
>temp : 文字[]
>["s", "t", "r"] : 文字[]
>"s" : "s"
>"t" : "t"
>"r" : "r"

var temp1 = [1, 2, 3];
>temp1 : 数字[]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3

var temp2: [number[], string[]] = [[1, 2, 3], ["hello", "string"]];
>temp2 : [数字[], 文字[]]
>[[1, 2, 3], ["hello", "string"]] : [数字[], 文字[]]
>[1, 2, 3] : 数字[]
>1 : 1
>2 : 2
>3 : 3
>["hello", "string"] : 文字[]
>"hello" : "hello"
>"string" : "string"

interface myArray extends Array<Number> { }
>myArray : myArray
>Array : T[]
>Number : Number

interface myArray2 extends Array<Number|String> { }
>myArray2 : myArray2
>Array : T[]
>Number : Number
>String : String

var d0 = [1, true, ...temp, ];  // has type (string|number|boolean)[]
>d0 : 任意[]
>[1, true, ...temp, ] : 任意[]
>1 : 1
>true : 为真
>类型别名 :=> 为真
>...temp : 任意
>类型别名 :=> 任意
>temp : 文字[]

var d1 = [...temp];            // has type string[]
>d1 : 任意[]
>[...temp] : 任意[]
>...temp : 任意
>类型别名 :=> 任意
>temp : 文字[]

var d2: number[] = [...temp1];
>d2 : 数字[]
>[...temp1] : 任意[]
>...temp1 : 任意
>类型别名 :=> 任意
>temp1 : 数字[]

var d3: myArray = [...temp1];
>d3 : myArray
>myArray : myArray
>[...temp1] : 任意[]
>...temp1 : 任意
>类型别名 :=> 任意
>temp1 : 数字[]

var d4: myArray2 = [...temp, ...temp1];
>d4 : myArray2
>myArray2 : myArray2
>[...temp, ...temp1] : 任意[]
>...temp : 任意
>类型别名 :=> 任意
>temp : 文字[]
>...temp1 : 任意
>类型别名 :=> 任意
>temp1 : 数字[]

var d5 = [...a2];
>d5 : 任意[]
>[...a2] : 任意[]
>...a2 : 任意
>类型别名 :=> 任意
>a2 : 任意[]

var d6 = [...a3];
>d6 : 任意[]
>[...a3] : 任意[]
>...a3 : 任意
>类型别名 :=> 任意
>a3 : 任意[]

var d7 = [...a4];
>d7 : 任意[]
>[...a4] : 任意[]
>...a4 : 任意
>类型别名 :=> 任意
>a4 : (() => 数字)[]

var d8: number[][] = [[...temp1]]
>d8 : 数字[][]
>[[...temp1]] : 任意[][]
>[...temp1] : 任意[]
>...temp1 : 任意
>类型别名 :=> 任意
>temp1 : 数字[]

var d9 = [[...temp1], ...["hello"]];
>d9 : 任意[]
>[[...temp1], ...["hello"]] : 任意[]
>[...temp1] : 任意[]
>...temp1 : 任意
>类型别名 :=> 任意
>temp1 : 数字[]
>...["hello"] : 任意
>类型别名 :=> 任意
>["hello"] : 文字[]
>"hello" : "hello"

