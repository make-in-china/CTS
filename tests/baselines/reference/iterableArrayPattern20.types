=== tests/cases/conformance/es6/destructuring/iterableArrayPattern20.ts ===
class Bar { x }
>Bar : Bar
>x : any
>类型别名 :=> 任意

class Foo extends Bar { y }
>Foo : Foo
>Bar : Bar
>y : any
>类型别名 :=> 任意

class FooArrayIterator {
>FooArrayIterator : FooArrayIterator

    next() {
>next : () => { value: Foo[]; done: boolean; }

        return {
>{            value: [new Foo],            done: false        } : { value: Foo[]; done: boolean; }

            value: [new Foo],
>value : Foo[]
>[new Foo] : Foo[]
>new Foo : Foo
>Foo : typeof Foo

            done: false
>done : boolean
>类型别名 :=> 真假
>false : false
>类型别名 :=> 为假

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : symbol
>类型别名 :=> 符号
>Symbol : SymbolConstructor
>iterator : symbol
>类型别名 :=> 符号

        return this;
>this : this
    }
}

function fun(...[[a = new Foo], b = [new Foo]]: Bar[][]) { }
>fun : (...[[a], b]: Bar[][]) => void
>a : Bar
>new Foo : Foo
>Foo : typeof Foo
>b : Bar[]
>[new Foo] : Foo[]
>new Foo : Foo
>Foo : typeof Foo
>Bar : Bar

fun(...new FooArrayIterator);
>fun(...new FooArrayIterator) : void
>类型别名 :=> 无值
>fun : (...[[a], b]: Bar[][]) => void
>...new FooArrayIterator : Foo[]
>new FooArrayIterator : FooArrayIterator
>FooArrayIterator : typeof FooArrayIterator

