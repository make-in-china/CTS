=== tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithNumberType.ts ===
// void  operator on number type
var NUMBER: number;
>NUMBER : 数字
>类型别名 :=> 数字

var NUMBER1: number[] = [1, 2];
>NUMBER1 : 数字[]
>[1, 2] : 数字[]
>1 : 1
>2 : 2

function foo(): number { return 1; }
>foo : () => 数字
>1 : 1

class A {
>A : A

    public a: number;
>a : 数字
>类型别名 :=> 数字

    static foo() { return 1; }
>foo : () => 数字
>1 : 1
}
module M {
>M : 类为 M

    export var n: number;
>n : 数字
>类型别名 :=> 数字
}

var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// number type var
var ResultIsAny1 = void NUMBER;
>ResultIsAny1 : 任意
>类型别名 :=> 任意
>void NUMBER : 未定
>类型别名 :=> 未定
>NUMBER : 数字
>类型别名 :=> 数字

var ResultIsAny2 = void NUMBER1;
>ResultIsAny2 : 任意
>类型别名 :=> 任意
>void NUMBER1 : 未定
>类型别名 :=> 未定
>NUMBER1 : 数字[]

// number type literal
var ResultIsAny3 = void 1;
>ResultIsAny3 : 任意
>类型别名 :=> 任意
>void 1 : 未定
>类型别名 :=> 未定
>1 : 1

var ResultIsAny4 = void { x: 1, y: 2};
>ResultIsAny4 : 任意
>类型别名 :=> 任意
>void { x: 1, y: 2} : 未定
>类型别名 :=> 未定
>{ x: 1, y: 2} : { x: 数字; y: 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : 数字
>类型别名 :=> 数字
>2 : 2

var ResultIsAny5 = void { x: 1, y: (n: number) => { return n; } };
>ResultIsAny5 : 任意
>类型别名 :=> 任意
>void { x: 1, y: (n: number) => { return n; } } : 未定
>类型别名 :=> 未定
>{ x: 1, y: (n: number) => { return n; } } : { x: 数字; y: (n: 数字) => 数字; }
>x : 数字
>类型别名 :=> 数字
>1 : 1
>y : (n: 数字) => 数字
>(n: number) => { return n; } : (n: 数字) => 数字
>n : 数字
>类型别名 :=> 数字
>n : 数字
>类型别名 :=> 数字

// number type expressions
var ResultIsAny6 = void objA.a;
>ResultIsAny6 : 任意
>类型别名 :=> 任意
>void objA.a : 未定
>类型别名 :=> 未定
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字

var ResultIsAny7 = void M.n;
>ResultIsAny7 : 任意
>类型别名 :=> 任意
>void M.n : 未定
>类型别名 :=> 未定
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

var ResultIsAny8 = void NUMBER1[0];
>ResultIsAny8 : 任意
>类型别名 :=> 任意
>void NUMBER1[0] : 未定
>类型别名 :=> 未定
>NUMBER1[0] : 数字
>类型别名 :=> 数字
>NUMBER1 : 数字[]
>0 : 0

var ResultIsAny9 = void foo();
>ResultIsAny9 : 任意
>类型别名 :=> 任意
>void foo() : 未定
>类型别名 :=> 未定
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字

var ResultIsAny10 = void A.foo();
>ResultIsAny10 : 任意
>类型别名 :=> 任意
>void A.foo() : 未定
>类型别名 :=> 未定
>A.foo() : 数字
>类型别名 :=> 数字
>A.foo : () => 数字
>A : 类为 A
>foo : () => 数字

var ResultIsAny11 = void (NUMBER + NUMBER);
>ResultIsAny11 : 任意
>类型别名 :=> 任意
>void (NUMBER + NUMBER) : 未定
>类型别名 :=> 未定
>(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>NUMBER + NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

// multiple void  operators
var ResultIsAny12 = void void NUMBER;
>ResultIsAny12 : 任意
>类型别名 :=> 任意
>void void NUMBER : 未定
>类型别名 :=> 未定
>void NUMBER : 未定
>类型别名 :=> 未定
>NUMBER : 数字
>类型别名 :=> 数字

var ResultIsAny13 = void void void (NUMBER + NUMBER);
>ResultIsAny13 : 任意
>类型别名 :=> 任意
>void void void (NUMBER + NUMBER) : 未定
>类型别名 :=> 未定
>void void (NUMBER + NUMBER) : 未定
>类型别名 :=> 未定
>void (NUMBER + NUMBER) : 未定
>类型别名 :=> 未定
>(NUMBER + NUMBER) : 数字
>类型别名 :=> 数字
>NUMBER + NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字

// miss assignment operators
void 1;
>void 1 : 未定
>类型别名 :=> 未定
>1 : 1

void NUMBER;
>void NUMBER : 未定
>类型别名 :=> 未定
>NUMBER : 数字
>类型别名 :=> 数字

void NUMBER1;
>void NUMBER1 : 未定
>类型别名 :=> 未定
>NUMBER1 : 数字[]

void foo();
>void foo() : 未定
>类型别名 :=> 未定
>foo() : 数字
>类型别名 :=> 数字
>foo : () => 数字

void objA.a;
>void objA.a : 未定
>类型别名 :=> 未定
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字

void M.n;
>void M.n : 未定
>类型别名 :=> 未定
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

void objA.a, M.n;
>void objA.a, M.n : 数字
>类型别名 :=> 数字
>void objA.a : 未定
>类型别名 :=> 未定
>objA.a : 数字
>类型别名 :=> 数字
>objA : A
>a : 数字
>类型别名 :=> 数字
>M.n : 数字
>类型别名 :=> 数字
>M : 类为 M
>n : 数字
>类型别名 :=> 数字

