=== tests/cases/conformance/expressions/commaOperator/commaOperatorsMultipleOperators.ts ===
var ANY: any;
>ANY : 任意
>类型别名 :=> 任意

var BOOLEAN: boolean;
>BOOLEAN : 真假
>类型别名 :=> 真假

var NUMBER: number;
>NUMBER : 数字
>类型别名 :=> 数字

var STRING: string;
>STRING : 文字
>类型别名 :=> 文字

var OBJECT: Object;
>OBJECT : Object
>Object : Object

//Expected: work well
ANY, BOOLEAN, NUMBER;
>ANY, BOOLEAN, NUMBER : 数字
>类型别名 :=> 数字
>ANY, BOOLEAN : 真假
>类型别名 :=> 真假
>ANY : 任意
>类型别名 :=> 任意
>BOOLEAN : 真假
>类型别名 :=> 真假
>NUMBER : 数字
>类型别名 :=> 数字

BOOLEAN, NUMBER, STRING;
>BOOLEAN, NUMBER, STRING : 文字
>类型别名 :=> 文字
>BOOLEAN, NUMBER : 数字
>类型别名 :=> 数字
>BOOLEAN : 真假
>类型别名 :=> 真假
>NUMBER : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字

NUMBER, STRING, OBJECT;
>NUMBER, STRING, OBJECT : Object
>NUMBER, STRING : 文字
>类型别名 :=> 文字
>NUMBER : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字
>OBJECT : Object

STRING, OBJECT, ANY;
>STRING, OBJECT, ANY : 任意
>类型别名 :=> 任意
>STRING, OBJECT : Object
>STRING : 文字
>类型别名 :=> 文字
>OBJECT : Object
>ANY : 任意
>类型别名 :=> 任意

OBJECT, ANY, BOOLEAN;
>OBJECT, ANY, BOOLEAN : 真假
>类型别名 :=> 真假
>OBJECT, ANY : 任意
>类型别名 :=> 任意
>OBJECT : Object
>ANY : 任意
>类型别名 :=> 任意
>BOOLEAN : 真假
>类型别名 :=> 真假

//Results should have the same type as the third operand
var resultIsAny1 = (STRING, OBJECT, ANY);
>resultIsAny1 : 任意
>类型别名 :=> 任意
>(STRING, OBJECT, ANY) : 任意
>类型别名 :=> 任意
>STRING, OBJECT, ANY : 任意
>类型别名 :=> 任意
>STRING, OBJECT : Object
>STRING : 文字
>类型别名 :=> 文字
>OBJECT : Object
>ANY : 任意
>类型别名 :=> 任意

var resultIsBoolean1 = (OBJECT, ANY, BOOLEAN);
>resultIsBoolean1 : 真假
>类型别名 :=> 真假
>(OBJECT, ANY, BOOLEAN) : 真假
>类型别名 :=> 真假
>OBJECT, ANY, BOOLEAN : 真假
>类型别名 :=> 真假
>OBJECT, ANY : 任意
>类型别名 :=> 任意
>OBJECT : Object
>ANY : 任意
>类型别名 :=> 任意
>BOOLEAN : 真假
>类型别名 :=> 真假

var resultIsNumber1 = (ANY, BOOLEAN, NUMBER);
>resultIsNumber1 : 数字
>类型别名 :=> 数字
>(ANY, BOOLEAN, NUMBER) : 数字
>类型别名 :=> 数字
>ANY, BOOLEAN, NUMBER : 数字
>类型别名 :=> 数字
>ANY, BOOLEAN : 真假
>类型别名 :=> 真假
>ANY : 任意
>类型别名 :=> 任意
>BOOLEAN : 真假
>类型别名 :=> 真假
>NUMBER : 数字
>类型别名 :=> 数字

var resultIsString1 = (BOOLEAN, NUMBER, STRING);
>resultIsString1 : 文字
>类型别名 :=> 文字
>(BOOLEAN, NUMBER, STRING) : 文字
>类型别名 :=> 文字
>BOOLEAN, NUMBER, STRING : 文字
>类型别名 :=> 文字
>BOOLEAN, NUMBER : 数字
>类型别名 :=> 数字
>BOOLEAN : 真假
>类型别名 :=> 真假
>NUMBER : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字

var resultIsObject1 = (NUMBER, STRING, OBJECT);
>resultIsObject1 : Object
>(NUMBER, STRING, OBJECT) : Object
>NUMBER, STRING, OBJECT : Object
>NUMBER, STRING : 文字
>类型别名 :=> 文字
>NUMBER : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字
>OBJECT : Object

//Literal and expression
null, true, 1;
>null, true, 1 : 1
>null, true : 为真
>类型别名 :=> 为真
>null : 空值
>类型别名 :=> 空值
>true : 为真
>类型别名 :=> 为真
>1 : 1

++NUMBER, STRING.charAt(0), new Object();
>++NUMBER, STRING.charAt(0), new Object() : Object
>++NUMBER, STRING.charAt(0) : 文字
>类型别名 :=> 文字
>++NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>STRING.charAt(0) : 文字
>类型别名 :=> 文字
>STRING.charAt : (pos: 数字) => 文字
>STRING : 文字
>类型别名 :=> 文字
>charAt : (pos: 数字) => 文字
>0 : 0
>new Object() : Object
>Object : ObjectConstructor

var resultIsNumber2 = (null, true, 1);
>resultIsNumber2 : 数字
>类型别名 :=> 数字
>(null, true, 1) : 1
>null, true, 1 : 1
>null, true : 为真
>类型别名 :=> 为真
>null : 空值
>类型别名 :=> 空值
>true : 为真
>类型别名 :=> 为真
>1 : 1

var resultIsObject2 = (++NUMBER, STRING.charAt(0), new Object());
>resultIsObject2 : Object
>(++NUMBER, STRING.charAt(0), new Object()) : Object
>++NUMBER, STRING.charAt(0), new Object() : Object
>++NUMBER, STRING.charAt(0) : 文字
>类型别名 :=> 文字
>++NUMBER : 数字
>类型别名 :=> 数字
>NUMBER : 数字
>类型别名 :=> 数字
>STRING.charAt(0) : 文字
>类型别名 :=> 文字
>STRING.charAt : (pos: 数字) => 文字
>STRING : 文字
>类型别名 :=> 文字
>charAt : (pos: 数字) => 文字
>0 : 0
>new Object() : Object
>Object : ObjectConstructor

