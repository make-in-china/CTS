=== tests/cases/conformance/parser/ecmascript5/parserRealSource6.ts ===
// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
// See LICENSE.txt in the project root for complete license information.

///<reference path='typescript.ts' />

module TypeScript {
>TypeScript : 类为 TypeScript

    export class TypeCollectionContext {
>TypeCollectionContext : TypeCollectionContext

        public script: Script = null;
>script : 任意
>类型别名 :=> 任意
>Script : No type information available!
>null : 空值
>类型别名 :=> 空值

        constructor (public scopeChain: ScopeChain, public checker: TypeChecker) {
>scopeChain : 任意
>类型别名 :=> 任意
>ScopeChain : No type information available!
>checker : 任意
>类型别名 :=> 任意
>TypeChecker : No type information available!
        }
    }

    export class MemberScopeContext {
>MemberScopeContext : MemberScopeContext

        public type: Type = null;
>type : 任意
>类型别名 :=> 任意
>Type : No type information available!
>null : 空值
>类型别名 :=> 空值

        public ast: AST = null;
>ast : 任意
>类型别名 :=> 任意
>AST : No type information available!
>null : 空值
>类型别名 :=> 空值

        public scope: SymbolScope;
>scope : 任意
>类型别名 :=> 任意
>SymbolScope : No type information available!

        public options = new AstWalkOptions();
>options : 任意
>类型别名 :=> 任意
>new AstWalkOptions() : 任意
>类型别名 :=> 任意
>AstWalkOptions : 任意
>类型别名 :=> 任意

        constructor (public flow: TypeFlow, public pos: number, public matchFlag: ASTFlags) {
>flow : 任意
>类型别名 :=> 任意
>TypeFlow : No type information available!
>pos : 数字
>类型别名 :=> 数字
>matchFlag : 任意
>类型别名 :=> 任意
>ASTFlags : No type information available!
        }
    }

    export class EnclosingScopeContext {
>EnclosingScopeContext : EnclosingScopeContext

        public scopeGetter: () => SymbolScope = null;
>scopeGetter : () => 任意
>SymbolScope : No type information available!
>null : 空值
>类型别名 :=> 空值

        public objectLiteralScopeGetter: () => SymbolScope = null;
>objectLiteralScopeGetter : () => 任意
>SymbolScope : No type information available!
>null : 空值
>类型别名 :=> 空值

        public scopeStartAST: AST = null;
>scopeStartAST : 任意
>类型别名 :=> 任意
>AST : No type information available!
>null : 空值
>类型别名 :=> 空值

        public skipNextFuncDeclForClass = false;
>skipNextFuncDeclForClass : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        public deepestModuleDecl: ModuleDeclaration = null;
>deepestModuleDecl : 任意
>类型别名 :=> 任意
>ModuleDeclaration : No type information available!
>null : 空值
>类型别名 :=> 空值

        public enclosingClassDecl: TypeDeclaration = null;
>enclosingClassDecl : 任意
>类型别名 :=> 任意
>TypeDeclaration : No type information available!
>null : 空值
>类型别名 :=> 空值

        public enclosingObjectLit: UnaryExpression = null;
>enclosingObjectLit : 任意
>类型别名 :=> 任意
>UnaryExpression : No type information available!
>null : 空值
>类型别名 :=> 空值

        public publicsOnly = true;
>publicsOnly : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真

        public useFullAst = false;
>useFullAst : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假

        private scriptFragment: Script;
>scriptFragment : 任意
>类型别名 :=> 任意
>Script : No type information available!

        constructor (public logger: ILogger,
>logger : 任意
>类型别名 :=> 任意
>ILogger : No type information available!

                    public script: Script,
>script : 任意
>类型别名 :=> 任意
>Script : No type information available!

                    public text: ISourceText,
>text : 任意
>类型别名 :=> 任意
>ISourceText : No type information available!

                    public pos: number,
>pos : 数字
>类型别名 :=> 数字

                    public isMemberCompletion: boolean) {
>isMemberCompletion : 真假
>类型别名 :=> 真假
        }

        public getScope(): SymbolScope {
>getScope : () => 任意
>SymbolScope : No type information available!

            return this.scopeGetter();
>this.scopeGetter() : 任意
>类型别名 :=> 任意
>this.scopeGetter : () => 任意
>this : 本体
>scopeGetter : () => 任意
        }

        public getObjectLiteralScope(): SymbolScope {
>getObjectLiteralScope : () => 任意
>SymbolScope : No type information available!

            return this.objectLiteralScopeGetter();
>this.objectLiteralScopeGetter() : 任意
>类型别名 :=> 任意
>this.objectLiteralScopeGetter : () => 任意
>this : 本体
>objectLiteralScopeGetter : () => 任意
        }

        public getScopeAST() {
>getScopeAST : () => 任意

            return this.scopeStartAST;
>this.scopeStartAST : 任意
>类型别名 :=> 任意
>this : 本体
>scopeStartAST : 任意
>类型别名 :=> 任意
        }

        public getScopePosition() {
>getScopePosition : () => 任意

            return this.scopeStartAST.minChar;
>this.scopeStartAST.minChar : 任意
>类型别名 :=> 任意
>this.scopeStartAST : 任意
>类型别名 :=> 任意
>this : 本体
>scopeStartAST : 任意
>类型别名 :=> 任意
>minChar : 任意
>类型别名 :=> 任意
        }

        public getScriptFragmentStartAST(): AST {
>getScriptFragmentStartAST : () => 任意
>AST : No type information available!

            return this.scopeStartAST;
>this.scopeStartAST : 任意
>类型别名 :=> 任意
>this : 本体
>scopeStartAST : 任意
>类型别名 :=> 任意
        }

        public getScriptFragmentPosition(): number {
>getScriptFragmentPosition : () => 数字

            return this.getScriptFragmentStartAST().minChar;
>this.getScriptFragmentStartAST().minChar : 任意
>类型别名 :=> 任意
>this.getScriptFragmentStartAST() : 任意
>类型别名 :=> 任意
>this.getScriptFragmentStartAST : () => 任意
>this : 本体
>getScriptFragmentStartAST : () => 任意
>minChar : 任意
>类型别名 :=> 任意
        }

        public getScriptFragment(): Script {
>getScriptFragment : () => 任意
>Script : No type information available!

            if (this.scriptFragment == null) {
>this.scriptFragment == null : 真假
>类型别名 :=> 真假
>this.scriptFragment : 任意
>类型别名 :=> 任意
>this : 本体
>scriptFragment : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

                var ast = this.getScriptFragmentStartAST();
>ast : 任意
>类型别名 :=> 任意
>this.getScriptFragmentStartAST() : 任意
>类型别名 :=> 任意
>this.getScriptFragmentStartAST : () => 任意
>this : 本体
>getScriptFragmentStartAST : () => 任意

                var minChar = ast.minChar;
>minChar : 任意
>类型别名 :=> 任意
>ast.minChar : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>minChar : 任意
>类型别名 :=> 任意

                var limChar = (this.isMemberCompletion ? this.pos : this.pos + 1);
>limChar : 数字
>类型别名 :=> 数字
>(this.isMemberCompletion ? this.pos : this.pos + 1) : 数字
>类型别名 :=> 数字
>this.isMemberCompletion ? this.pos : this.pos + 1 : 数字
>类型别名 :=> 数字
>this.isMemberCompletion : 真假
>类型别名 :=> 真假
>this : 本体
>isMemberCompletion : 真假
>类型别名 :=> 真假
>this.pos : 数字
>类型别名 :=> 数字
>this : 本体
>pos : 数字
>类型别名 :=> 数字
>this.pos + 1 : 数字
>类型别名 :=> 数字
>this.pos : 数字
>类型别名 :=> 数字
>this : 本体
>pos : 数字
>类型别名 :=> 数字
>1 : 1

                this.scriptFragment = TypeScript.quickParse(this.logger, ast, this.text, minChar, limChar, null/*errorCapture*/).Script;
>this.scriptFragment = TypeScript.quickParse(this.logger, ast, this.text, minChar, limChar, null/*errorCapture*/).Script : 任意
>类型别名 :=> 任意
>this.scriptFragment : 任意
>类型别名 :=> 任意
>this : 本体
>scriptFragment : 任意
>类型别名 :=> 任意
>TypeScript.quickParse(this.logger, ast, this.text, minChar, limChar, null/*errorCapture*/).Script : 任意
>类型别名 :=> 任意
>TypeScript.quickParse(this.logger, ast, this.text, minChar, limChar, null/*errorCapture*/) : 任意
>类型别名 :=> 任意
>TypeScript.quickParse : 任意
>类型别名 :=> 任意
>TypeScript : 类为 TypeScript
>quickParse : 任意
>类型别名 :=> 任意
>this.logger : 任意
>类型别名 :=> 任意
>this : 本体
>logger : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>this.text : 任意
>类型别名 :=> 任意
>this : 本体
>text : 任意
>类型别名 :=> 任意
>minChar : 任意
>类型别名 :=> 任意
>limChar : 数字
>类型别名 :=> 数字
>null : 空值
>类型别名 :=> 空值
>Script : 任意
>类型别名 :=> 任意
            }
            return this.scriptFragment;
>this.scriptFragment : 任意
>类型别名 :=> 任意
>this : 本体
>scriptFragment : 任意
>类型别名 :=> 任意
        }
    }

    export function preFindMemberScope(ast: AST, parent: AST, walker: IAstWalker) {
>preFindMemberScope : (ast: 任意, parent: 任意, walker: 任意) => 任意
>ast : 任意
>类型别名 :=> 任意
>AST : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : 任意
>类型别名 :=> 任意
>IAstWalker : No type information available!

        var memScope: MemberScopeContext = walker.state;
>memScope : MemberScopeContext
>MemberScopeContext : MemberScopeContext
>walker.state : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>state : 任意
>类型别名 :=> 任意

        if (hasFlag(ast.flags, memScope.matchFlag) && ((memScope.pos < 0) || (memScope.pos == ast.limChar))) {
>hasFlag(ast.flags, memScope.matchFlag) && ((memScope.pos < 0) || (memScope.pos == ast.limChar)) : 真假
>类型别名 :=> 真假
>hasFlag(ast.flags, memScope.matchFlag) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>ast.flags : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>flags : 任意
>类型别名 :=> 任意
>memScope.matchFlag : 任意
>类型别名 :=> 任意
>memScope : MemberScopeContext
>matchFlag : 任意
>类型别名 :=> 任意
>((memScope.pos < 0) || (memScope.pos == ast.limChar)) : 真假
>类型别名 :=> 真假
>(memScope.pos < 0) || (memScope.pos == ast.limChar) : 真假
>类型别名 :=> 真假
>(memScope.pos < 0) : 真假
>类型别名 :=> 真假
>memScope.pos < 0 : 真假
>类型别名 :=> 真假
>memScope.pos : 数字
>类型别名 :=> 数字
>memScope : MemberScopeContext
>pos : 数字
>类型别名 :=> 数字
>0 : 0
>(memScope.pos == ast.limChar) : 真假
>类型别名 :=> 真假
>memScope.pos == ast.limChar : 真假
>类型别名 :=> 真假
>memScope.pos : 数字
>类型别名 :=> 数字
>memScope : MemberScopeContext
>pos : 数字
>类型别名 :=> 数字
>ast.limChar : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>limChar : 任意
>类型别名 :=> 任意

            memScope.ast = ast;
>memScope.ast = ast : 任意
>类型别名 :=> 任意
>memScope.ast : 任意
>类型别名 :=> 任意
>memScope : MemberScopeContext
>ast : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意

            if ((ast.type == null) && (memScope.pos >= 0)) {
>(ast.type == null) && (memScope.pos >= 0) : 真假
>类型别名 :=> 真假
>(ast.type == null) : 真假
>类型别名 :=> 真假
>ast.type == null : 真假
>类型别名 :=> 真假
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>(memScope.pos >= 0) : 真假
>类型别名 :=> 真假
>memScope.pos >= 0 : 真假
>类型别名 :=> 真假
>memScope.pos : 数字
>类型别名 :=> 数字
>memScope : MemberScopeContext
>pos : 数字
>类型别名 :=> 数字
>0 : 0

                memScope.flow.inScopeTypeCheck(ast, memScope.scope);
>memScope.flow.inScopeTypeCheck(ast, memScope.scope) : 任意
>类型别名 :=> 任意
>memScope.flow.inScopeTypeCheck : 任意
>类型别名 :=> 任意
>memScope.flow : 任意
>类型别名 :=> 任意
>memScope : MemberScopeContext
>flow : 任意
>类型别名 :=> 任意
>inScopeTypeCheck : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>memScope.scope : 任意
>类型别名 :=> 任意
>memScope : MemberScopeContext
>scope : 任意
>类型别名 :=> 任意
            }
            memScope.type = ast.type;
>memScope.type = ast.type : 任意
>类型别名 :=> 任意
>memScope.type : 任意
>类型别名 :=> 任意
>memScope : MemberScopeContext
>type : 任意
>类型别名 :=> 任意
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意

            memScope.options.stopWalk();
>memScope.options.stopWalk() : 任意
>类型别名 :=> 任意
>memScope.options.stopWalk : 任意
>类型别名 :=> 任意
>memScope.options : 任意
>类型别名 :=> 任意
>memScope : MemberScopeContext
>options : 任意
>类型别名 :=> 任意
>stopWalk : 任意
>类型别名 :=> 任意
        }
        return ast;
>ast : 任意
>类型别名 :=> 任意
    }

    export function pushTypeCollectionScope(container: Symbol,
>pushTypeCollectionScope : (container: 任意, valueMembers: 任意, ambientValueMembers: 任意, enclosedTypes: 任意, ambientEnclosedTypes: 任意, context: TypeCollectionContext, thisType: 任意, classType: 任意, moduleDecl: 任意) => 无值
>container : 任意
>类型别名 :=> 任意
>Symbol : No type information available!

        valueMembers: ScopedMembers,
>valueMembers : 任意
>类型别名 :=> 任意
>ScopedMembers : No type information available!

        ambientValueMembers: ScopedMembers,
>ambientValueMembers : 任意
>类型别名 :=> 任意
>ScopedMembers : No type information available!

        enclosedTypes: ScopedMembers,
>enclosedTypes : 任意
>类型别名 :=> 任意
>ScopedMembers : No type information available!

        ambientEnclosedTypes: ScopedMembers,
>ambientEnclosedTypes : 任意
>类型别名 :=> 任意
>ScopedMembers : No type information available!

        context: TypeCollectionContext,
>context : TypeCollectionContext
>TypeCollectionContext : TypeCollectionContext

        thisType: Type,
>thisType : 任意
>类型别名 :=> 任意
>Type : No type information available!

        classType: Type,
>classType : 任意
>类型别名 :=> 任意
>Type : No type information available!

        moduleDecl: ModuleDeclaration) {
>moduleDecl : 任意
>类型别名 :=> 任意
>ModuleDeclaration : No type information available!

        var builder = new SymbolScopeBuilder(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container);
>builder : 任意
>类型别名 :=> 任意
>new SymbolScopeBuilder(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container) : 任意
>类型别名 :=> 任意
>SymbolScopeBuilder : 任意
>类型别名 :=> 任意
>valueMembers : 任意
>类型别名 :=> 任意
>ambientValueMembers : 任意
>类型别名 :=> 任意
>enclosedTypes : 任意
>类型别名 :=> 任意
>ambientEnclosedTypes : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>container : 任意
>类型别名 :=> 任意

        var chain: ScopeChain = new ScopeChain(container, context.scopeChain, builder);
>chain : 任意
>类型别名 :=> 任意
>ScopeChain : No type information available!
>new ScopeChain(container, context.scopeChain, builder) : 任意
>类型别名 :=> 任意
>ScopeChain : 任意
>类型别名 :=> 任意
>container : 任意
>类型别名 :=> 任意
>context.scopeChain : 任意
>类型别名 :=> 任意
>context : TypeCollectionContext
>scopeChain : 任意
>类型别名 :=> 任意
>builder : 任意
>类型别名 :=> 任意

        chain.thisType = thisType;
>chain.thisType = thisType : 任意
>类型别名 :=> 任意
>chain.thisType : 任意
>类型别名 :=> 任意
>chain : 任意
>类型别名 :=> 任意
>thisType : 任意
>类型别名 :=> 任意
>thisType : 任意
>类型别名 :=> 任意

        chain.classType = classType;
>chain.classType = classType : 任意
>类型别名 :=> 任意
>chain.classType : 任意
>类型别名 :=> 任意
>chain : 任意
>类型别名 :=> 任意
>classType : 任意
>类型别名 :=> 任意
>classType : 任意
>类型别名 :=> 任意

        chain.moduleDecl = moduleDecl;
>chain.moduleDecl = moduleDecl : 任意
>类型别名 :=> 任意
>chain.moduleDecl : 任意
>类型别名 :=> 任意
>chain : 任意
>类型别名 :=> 任意
>moduleDecl : 任意
>类型别名 :=> 任意
>moduleDecl : 任意
>类型别名 :=> 任意

        context.scopeChain = chain;
>context.scopeChain = chain : 任意
>类型别名 :=> 任意
>context.scopeChain : 任意
>类型别名 :=> 任意
>context : TypeCollectionContext
>scopeChain : 任意
>类型别名 :=> 任意
>chain : 任意
>类型别名 :=> 任意
    }

    export function popTypeCollectionScope(context: TypeCollectionContext) {
>popTypeCollectionScope : (context: TypeCollectionContext) => 无值
>context : TypeCollectionContext
>TypeCollectionContext : TypeCollectionContext

        context.scopeChain = context.scopeChain.previous;
>context.scopeChain = context.scopeChain.previous : 任意
>类型别名 :=> 任意
>context.scopeChain : 任意
>类型别名 :=> 任意
>context : TypeCollectionContext
>scopeChain : 任意
>类型别名 :=> 任意
>context.scopeChain.previous : 任意
>类型别名 :=> 任意
>context.scopeChain : 任意
>类型别名 :=> 任意
>context : TypeCollectionContext
>scopeChain : 任意
>类型别名 :=> 任意
>previous : 任意
>类型别名 :=> 任意
    }

    export function preFindEnclosingScope(ast: AST, parent: AST, walker: IAstWalker) {
>preFindEnclosingScope : (ast: 任意, parent: 任意, walker: 任意) => 任意
>ast : 任意
>类型别名 :=> 任意
>AST : No type information available!
>parent : 任意
>类型别名 :=> 任意
>AST : No type information available!
>walker : 任意
>类型别名 :=> 任意
>IAstWalker : No type information available!

        var context: EnclosingScopeContext = walker.state;
>context : EnclosingScopeContext
>EnclosingScopeContext : EnclosingScopeContext
>walker.state : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>state : 任意
>类型别名 :=> 任意

        var minChar = ast.minChar;
>minChar : 任意
>类型别名 :=> 任意
>ast.minChar : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>minChar : 任意
>类型别名 :=> 任意

        var limChar = ast.limChar;
>limChar : 任意
>类型别名 :=> 任意
>ast.limChar : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>limChar : 任意
>类型别名 :=> 任意

        // Account for the fact completion list may be called at the end of a file which
        // is has not been fully re-parsed yet.
        if (ast.nodeType == NodeType.Script && context.pos > limChar)
>ast.nodeType == NodeType.Script && context.pos > limChar : 真假
>类型别名 :=> 真假
>ast.nodeType == NodeType.Script : 真假
>类型别名 :=> 真假
>ast.nodeType : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>nodeType : 任意
>类型别名 :=> 任意
>NodeType.Script : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Script : 任意
>类型别名 :=> 任意
>context.pos > limChar : 真假
>类型别名 :=> 真假
>context.pos : 数字
>类型别名 :=> 数字
>context : EnclosingScopeContext
>pos : 数字
>类型别名 :=> 数字
>limChar : 任意
>类型别名 :=> 任意

            limChar = context.pos;
>limChar = context.pos : 数字
>类型别名 :=> 数字
>limChar : 任意
>类型别名 :=> 任意
>context.pos : 数字
>类型别名 :=> 数字
>context : EnclosingScopeContext
>pos : 数字
>类型别名 :=> 数字

        if ((minChar <= context.pos) &&
>(minChar <= context.pos) &&            (limChar >= context.pos) : 真假
>类型别名 :=> 真假
>(minChar <= context.pos) : 真假
>类型别名 :=> 真假
>minChar <= context.pos : 真假
>类型别名 :=> 真假
>minChar : 任意
>类型别名 :=> 任意
>context.pos : 数字
>类型别名 :=> 数字
>context : EnclosingScopeContext
>pos : 数字
>类型别名 :=> 数字

            (limChar >= context.pos)) {
>(limChar >= context.pos) : 真假
>类型别名 :=> 真假
>limChar >= context.pos : 真假
>类型别名 :=> 真假
>limChar : 任意
>类型别名 :=> 任意
>context.pos : 数字
>类型别名 :=> 数字
>context : EnclosingScopeContext
>pos : 数字
>类型别名 :=> 数字

            switch (ast.nodeType) {
>ast.nodeType : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>nodeType : 任意
>类型别名 :=> 任意

                case NodeType.Script:
>NodeType.Script : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>Script : 任意
>类型别名 :=> 任意

                    var script = <Script>ast;
>script : 任意
>类型别名 :=> 任意
><Script>ast : 任意
>类型别名 :=> 任意
>Script : No type information available!
>ast : 任意
>类型别名 :=> 任意

                    context.scopeGetter = function () {
>context.scopeGetter = function () {                        return script.bod === null ? null : script.bod.enclosingScope;                    } : () => 任意
>context.scopeGetter : () => 任意
>context : EnclosingScopeContext
>scopeGetter : () => 任意
>function () {                        return script.bod === null ? null : script.bod.enclosingScope;                    } : () => 任意

                        return script.bod === null ? null : script.bod.enclosingScope;
>script.bod === null ? null : script.bod.enclosingScope : 任意
>类型别名 :=> 任意
>script.bod === null : 真假
>类型别名 :=> 真假
>script.bod : 任意
>类型别名 :=> 任意
>script : 任意
>类型别名 :=> 任意
>bod : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
>script.bod.enclosingScope : 任意
>类型别名 :=> 任意
>script.bod : 任意
>类型别名 :=> 任意
>script : 任意
>类型别名 :=> 任意
>bod : 任意
>类型别名 :=> 任意
>enclosingScope : 任意
>类型别名 :=> 任意

                    };
                    context.scopeStartAST = script;
>context.scopeStartAST = script : 任意
>类型别名 :=> 任意
>context.scopeStartAST : 任意
>类型别名 :=> 任意
>context : EnclosingScopeContext
>scopeStartAST : 任意
>类型别名 :=> 任意
>script : 任意
>类型别名 :=> 任意

                    break;

                case NodeType.ClassDeclaration:
>NodeType.ClassDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ClassDeclaration : 任意
>类型别名 :=> 任意

                    context.scopeGetter = function () {
>context.scopeGetter = function () {                        return (ast.type === null || ast.type.instanceType.containedScope === null) ? null : ast.type.instanceType.containedScope;                    } : () => 任意
>context.scopeGetter : () => 任意
>context : EnclosingScopeContext
>scopeGetter : () => 任意
>function () {                        return (ast.type === null || ast.type.instanceType.containedScope === null) ? null : ast.type.instanceType.containedScope;                    } : () => 任意

                        return (ast.type === null || ast.type.instanceType.containedScope === null) ? null : ast.type.instanceType.containedScope;
>(ast.type === null || ast.type.instanceType.containedScope === null) ? null : ast.type.instanceType.containedScope : 任意
>类型别名 :=> 任意
>(ast.type === null || ast.type.instanceType.containedScope === null) : 真假
>类型别名 :=> 真假
>ast.type === null || ast.type.instanceType.containedScope === null : 真假
>类型别名 :=> 真假
>ast.type === null : 真假
>类型别名 :=> 真假
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>ast.type.instanceType.containedScope === null : 真假
>类型别名 :=> 真假
>ast.type.instanceType.containedScope : 任意
>类型别名 :=> 任意
>ast.type.instanceType : 任意
>类型别名 :=> 任意
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>instanceType : 任意
>类型别名 :=> 任意
>containedScope : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
>ast.type.instanceType.containedScope : 任意
>类型别名 :=> 任意
>ast.type.instanceType : 任意
>类型别名 :=> 任意
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>instanceType : 任意
>类型别名 :=> 任意
>containedScope : 任意
>类型别名 :=> 任意

                    };
                    context.scopeStartAST = ast;
>context.scopeStartAST = ast : 任意
>类型别名 :=> 任意
>context.scopeStartAST : 任意
>类型别名 :=> 任意
>context : EnclosingScopeContext
>scopeStartAST : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意

                    context.enclosingClassDecl = <TypeDeclaration>ast;
>context.enclosingClassDecl = <TypeDeclaration>ast : 任意
>类型别名 :=> 任意
>context.enclosingClassDecl : 任意
>类型别名 :=> 任意
>context : EnclosingScopeContext
>enclosingClassDecl : 任意
>类型别名 :=> 任意
><TypeDeclaration>ast : 任意
>类型别名 :=> 任意
>TypeDeclaration : No type information available!
>ast : 任意
>类型别名 :=> 任意

                    break;

                case NodeType.ObjectLit:
>NodeType.ObjectLit : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ObjectLit : 任意
>类型别名 :=> 任意

                    var objectLit = <UnaryExpression>ast;
>objectLit : 任意
>类型别名 :=> 任意
><UnaryExpression>ast : 任意
>类型别名 :=> 任意
>UnaryExpression : No type information available!
>ast : 任意
>类型别名 :=> 任意

                    // Only consider target-typed object literals
                    if (objectLit.targetType) {
>objectLit.targetType : 任意
>类型别名 :=> 任意
>objectLit : 任意
>类型别名 :=> 任意
>targetType : 任意
>类型别名 :=> 任意

                        context.scopeGetter = function () {
>context.scopeGetter = function () {                            return objectLit.targetType.containedScope;                        } : () => 任意
>context.scopeGetter : () => 任意
>context : EnclosingScopeContext
>scopeGetter : () => 任意
>function () {                            return objectLit.targetType.containedScope;                        } : () => 任意

                            return objectLit.targetType.containedScope;
>objectLit.targetType.containedScope : 任意
>类型别名 :=> 任意
>objectLit.targetType : 任意
>类型别名 :=> 任意
>objectLit : 任意
>类型别名 :=> 任意
>targetType : 任意
>类型别名 :=> 任意
>containedScope : 任意
>类型别名 :=> 任意

                        };
                        context.objectLiteralScopeGetter = function () {
>context.objectLiteralScopeGetter = function () {                            return objectLit.targetType.memberScope;                        } : () => 任意
>context.objectLiteralScopeGetter : () => 任意
>context : EnclosingScopeContext
>objectLiteralScopeGetter : () => 任意
>function () {                            return objectLit.targetType.memberScope;                        } : () => 任意

                            return objectLit.targetType.memberScope;
>objectLit.targetType.memberScope : 任意
>类型别名 :=> 任意
>objectLit.targetType : 任意
>类型别名 :=> 任意
>objectLit : 任意
>类型别名 :=> 任意
>targetType : 任意
>类型别名 :=> 任意
>memberScope : 任意
>类型别名 :=> 任意
                        }
                        context.enclosingObjectLit = objectLit;
>context.enclosingObjectLit = objectLit : 任意
>类型别名 :=> 任意
>context.enclosingObjectLit : 任意
>类型别名 :=> 任意
>context : EnclosingScopeContext
>enclosingObjectLit : 任意
>类型别名 :=> 任意
>objectLit : 任意
>类型别名 :=> 任意
                    }
                    break;

                case NodeType.ModuleDeclaration:
>NodeType.ModuleDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>ModuleDeclaration : 任意
>类型别名 :=> 任意

                    context.deepestModuleDecl = <ModuleDeclaration>ast;
>context.deepestModuleDecl = <ModuleDeclaration>ast : 任意
>类型别名 :=> 任意
>context.deepestModuleDecl : 任意
>类型别名 :=> 任意
>context : EnclosingScopeContext
>deepestModuleDecl : 任意
>类型别名 :=> 任意
><ModuleDeclaration>ast : 任意
>类型别名 :=> 任意
>ModuleDeclaration : No type information available!
>ast : 任意
>类型别名 :=> 任意

                    context.scopeGetter = function () {
>context.scopeGetter = function () {                        return ast.type === null ? null : ast.type.containedScope;                    } : () => 任意
>context.scopeGetter : () => 任意
>context : EnclosingScopeContext
>scopeGetter : () => 任意
>function () {                        return ast.type === null ? null : ast.type.containedScope;                    } : () => 任意

                        return ast.type === null ? null : ast.type.containedScope;
>ast.type === null ? null : ast.type.containedScope : 任意
>类型别名 :=> 任意
>ast.type === null : 真假
>类型别名 :=> 真假
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
>ast.type.containedScope : 任意
>类型别名 :=> 任意
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>containedScope : 任意
>类型别名 :=> 任意

                    };
                    context.scopeStartAST = ast;
>context.scopeStartAST = ast : 任意
>类型别名 :=> 任意
>context.scopeStartAST : 任意
>类型别名 :=> 任意
>context : EnclosingScopeContext
>scopeStartAST : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意

                    break;

                case NodeType.InterfaceDeclaration:
>NodeType.InterfaceDeclaration : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>InterfaceDeclaration : 任意
>类型别名 :=> 任意

                    context.scopeGetter = function () {
>context.scopeGetter = function () {                        return (ast.type === null) ? null : ast.type.containedScope;                    } : () => 任意
>context.scopeGetter : () => 任意
>context : EnclosingScopeContext
>scopeGetter : () => 任意
>function () {                        return (ast.type === null) ? null : ast.type.containedScope;                    } : () => 任意

                        return (ast.type === null) ? null : ast.type.containedScope;
>(ast.type === null) ? null : ast.type.containedScope : 任意
>类型别名 :=> 任意
>(ast.type === null) : 真假
>类型别名 :=> 真假
>ast.type === null : 真假
>类型别名 :=> 真假
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
>ast.type.containedScope : 任意
>类型别名 :=> 任意
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>containedScope : 任意
>类型别名 :=> 任意

                    };
                    context.scopeStartAST = ast;
>context.scopeStartAST = ast : 任意
>类型别名 :=> 任意
>context.scopeStartAST : 任意
>类型别名 :=> 任意
>context : EnclosingScopeContext
>scopeStartAST : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意

                    break;

                case NodeType.FuncDecl: {
>NodeType.FuncDecl : 任意
>类型别名 :=> 任意
>NodeType : 任意
>类型别名 :=> 任意
>FuncDecl : 任意
>类型别名 :=> 任意

                    var funcDecl = <FuncDecl>ast;
>funcDecl : 任意
>类型别名 :=> 任意
><FuncDecl>ast : 任意
>类型别名 :=> 任意
>FuncDecl : No type information available!
>ast : 任意
>类型别名 :=> 任意

                    if (context.skipNextFuncDeclForClass) {
>context.skipNextFuncDeclForClass : 真假
>类型别名 :=> 真假
>context : EnclosingScopeContext
>skipNextFuncDeclForClass : 真假
>类型别名 :=> 真假

                        context.skipNextFuncDeclForClass = false;
>context.skipNextFuncDeclForClass = false : 为假
>类型别名 :=> 为假
>context.skipNextFuncDeclForClass : 真假
>类型别名 :=> 真假
>context : EnclosingScopeContext
>skipNextFuncDeclForClass : 真假
>类型别名 :=> 真假
>false : 为假
>类型别名 :=> 为假
                    }
                    else {
                        context.scopeGetter = function () {
>context.scopeGetter = function () {                            // The scope of a class constructor is hidden somewhere we don't expect :-S                            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {                                if (ast.type && ast.type.enclosingType) {                                    return ast.type.enclosingType.constructorScope;                                }                            }                            if (funcDecl.scopeType) {                                return funcDecl.scopeType.containedScope;                            }                            if (funcDecl.type) {                                return funcDecl.type.containedScope;                            }                            return null;                        } : () => 任意
>context.scopeGetter : () => 任意
>context : EnclosingScopeContext
>scopeGetter : () => 任意
>function () {                            // The scope of a class constructor is hidden somewhere we don't expect :-S                            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {                                if (ast.type && ast.type.enclosingType) {                                    return ast.type.enclosingType.constructorScope;                                }                            }                            if (funcDecl.scopeType) {                                return funcDecl.scopeType.containedScope;                            }                            if (funcDecl.type) {                                return funcDecl.type.containedScope;                            }                            return null;                        } : () => 任意

                            // The scope of a class constructor is hidden somewhere we don't expect :-S
                            if (funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {
>funcDecl.isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod) : 任意
>类型别名 :=> 任意
>funcDecl.isConstructor : 任意
>类型别名 :=> 任意
>funcDecl : 任意
>类型别名 :=> 任意
>isConstructor : 任意
>类型别名 :=> 任意
>hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod) : 任意
>类型别名 :=> 任意
>hasFlag : 任意
>类型别名 :=> 任意
>funcDecl.fncFlags : 任意
>类型别名 :=> 任意
>funcDecl : 任意
>类型别名 :=> 任意
>fncFlags : 任意
>类型别名 :=> 任意
>FncFlags.ClassMethod : 任意
>类型别名 :=> 任意
>FncFlags : 任意
>类型别名 :=> 任意
>ClassMethod : 任意
>类型别名 :=> 任意

                                if (ast.type && ast.type.enclosingType) {
>ast.type && ast.type.enclosingType : 任意
>类型别名 :=> 任意
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>ast.type.enclosingType : 任意
>类型别名 :=> 任意
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>enclosingType : 任意
>类型别名 :=> 任意

                                    return ast.type.enclosingType.constructorScope;
>ast.type.enclosingType.constructorScope : 任意
>类型别名 :=> 任意
>ast.type.enclosingType : 任意
>类型别名 :=> 任意
>ast.type : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>enclosingType : 任意
>类型别名 :=> 任意
>constructorScope : 任意
>类型别名 :=> 任意
                                }
                            }

                            if (funcDecl.scopeType) {
>funcDecl.scopeType : 任意
>类型别名 :=> 任意
>funcDecl : 任意
>类型别名 :=> 任意
>scopeType : 任意
>类型别名 :=> 任意

                                return funcDecl.scopeType.containedScope;
>funcDecl.scopeType.containedScope : 任意
>类型别名 :=> 任意
>funcDecl.scopeType : 任意
>类型别名 :=> 任意
>funcDecl : 任意
>类型别名 :=> 任意
>scopeType : 任意
>类型别名 :=> 任意
>containedScope : 任意
>类型别名 :=> 任意
                            }

                            if (funcDecl.type) {
>funcDecl.type : 任意
>类型别名 :=> 任意
>funcDecl : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意

                                return funcDecl.type.containedScope;
>funcDecl.type.containedScope : 任意
>类型别名 :=> 任意
>funcDecl.type : 任意
>类型别名 :=> 任意
>funcDecl : 任意
>类型别名 :=> 任意
>type : 任意
>类型别名 :=> 任意
>containedScope : 任意
>类型别名 :=> 任意
                            }
                            return null;
>null : 空值
>类型别名 :=> 空值

                        };
                        context.scopeStartAST = ast;
>context.scopeStartAST = ast : 任意
>类型别名 :=> 任意
>context.scopeStartAST : 任意
>类型别名 :=> 任意
>context : EnclosingScopeContext
>scopeStartAST : 任意
>类型别名 :=> 任意
>ast : 任意
>类型别名 :=> 任意
                    }
                }
                    break;
            }
            walker.options.goChildren = true;
>walker.options.goChildren = true : 为真
>类型别名 :=> 为真
>walker.options.goChildren : 任意
>类型别名 :=> 任意
>walker.options : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>true : 为真
>类型别名 :=> 为真
        }
        else {
            walker.options.goChildren = false;
>walker.options.goChildren = false : 为假
>类型别名 :=> 为假
>walker.options.goChildren : 任意
>类型别名 :=> 任意
>walker.options : 任意
>类型别名 :=> 任意
>walker : 任意
>类型别名 :=> 任意
>options : 任意
>类型别名 :=> 任意
>goChildren : 任意
>类型别名 :=> 任意
>false : 为假
>类型别名 :=> 为假
        }
        return ast;
>ast : 任意
>类型别名 :=> 任意
    }

    //
    // Find the enclosing scope context from a position inside a script AST.
    // The "scopeStartAST" of the returned scope is always valid.
    // Return "null" if the enclosing scope can't be found.
    //
    export function findEnclosingScopeAt(logger: ILogger, script: Script, text: ISourceText, pos: number, isMemberCompletion: boolean): EnclosingScopeContext {
>findEnclosingScopeAt : (logger: 任意, script: 任意, text: 任意, pos: 数字, isMemberCompletion: 真假) => EnclosingScopeContext
>logger : 任意
>类型别名 :=> 任意
>ILogger : No type information available!
>script : 任意
>类型别名 :=> 任意
>Script : No type information available!
>text : 任意
>类型别名 :=> 任意
>ISourceText : No type information available!
>pos : 数字
>类型别名 :=> 数字
>isMemberCompletion : 真假
>类型别名 :=> 真假
>EnclosingScopeContext : EnclosingScopeContext

        var context = new EnclosingScopeContext(logger, script, text, pos, isMemberCompletion);
>context : EnclosingScopeContext
>new EnclosingScopeContext(logger, script, text, pos, isMemberCompletion) : EnclosingScopeContext
>EnclosingScopeContext : 类为 EnclosingScopeContext
>logger : 任意
>类型别名 :=> 任意
>script : 任意
>类型别名 :=> 任意
>text : 任意
>类型别名 :=> 任意
>pos : 数字
>类型别名 :=> 数字
>isMemberCompletion : 真假
>类型别名 :=> 真假

        TypeScript.getAstWalkerFactory().walk(script, preFindEnclosingScope, null, null, context);
>TypeScript.getAstWalkerFactory().walk(script, preFindEnclosingScope, null, null, context) : 任意
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory().walk : 任意
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory() : 任意
>类型别名 :=> 任意
>TypeScript.getAstWalkerFactory : 任意
>类型别名 :=> 任意
>TypeScript : 类为 TypeScript
>getAstWalkerFactory : 任意
>类型别名 :=> 任意
>walk : 任意
>类型别名 :=> 任意
>script : 任意
>类型别名 :=> 任意
>preFindEnclosingScope : (ast: 任意, parent: 任意, walker: 任意) => 任意
>null : 空值
>类型别名 :=> 空值
>null : 空值
>类型别名 :=> 空值
>context : EnclosingScopeContext

        if (context.scopeStartAST === null)
>context.scopeStartAST === null : 真假
>类型别名 :=> 真假
>context.scopeStartAST : 任意
>类型别名 :=> 任意
>context : EnclosingScopeContext
>scopeStartAST : 任意
>类型别名 :=> 任意
>null : 空值
>类型别名 :=> 空值

            return null;
>null : 空值
>类型别名 :=> 空值

        return context;
>context : EnclosingScopeContext
    }
}
