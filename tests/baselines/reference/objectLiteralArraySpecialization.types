=== tests/cases/compiler/objectLiteralArraySpecialization.ts ===
declare function create<T>(initialValues?: T[]): MyArrayWrapper<T>;
>create : <T>(initialValues?: T[]) => MyArrayWrapper<T>
>T : T
>initialValues : T[]
>T : T
>MyArrayWrapper : MyArrayWrapper<T>
>T : T

interface MyArrayWrapper<T> {
>MyArrayWrapper : MyArrayWrapper<T>
>T : T

	constructor(initialItems?: T[]);
>constructor : (initialItems?: T[]) => 任意
>initialItems : T[]
>T : T

	doSomething(predicate: (x: T, y: T) => boolean): void;
>doSomething : (predicate: (x: T, y: T) => 真假) => 无值
>predicate : (x: T, y: T) => 真假
>x : T
>T : T
>y : T
>T : T
}
var thing = create([ { name: "bob", id: 24 }, { name: "doug", id: 32 } ]); // should not error
>thing : MyArrayWrapper<{ name: 文字; id: 数字; }>
>create([ { name: "bob", id: 24 }, { name: "doug", id: 32 } ]) : MyArrayWrapper<{ name: 文字; id: 数字; }>
>create : <T>(initialValues?: T[]) => MyArrayWrapper<T>
>[ { name: "bob", id: 24 }, { name: "doug", id: 32 } ] : { name: 文字; id: 数字; }[]
>{ name: "bob", id: 24 } : { name: 文字; id: 数字; }
>name : 文字
>类型别名 :=> 文字
>"bob" : "bob"
>id : 数字
>类型别名 :=> 数字
>24 : 24
>{ name: "doug", id: 32 } : { name: 文字; id: 数字; }
>name : 文字
>类型别名 :=> 文字
>"doug" : "doug"
>id : 数字
>类型别名 :=> 数字
>32 : 32

thing.doSomething((x, y) => x.name === "bob"); // should not error
>thing.doSomething((x, y) => x.name === "bob") : 无值
>类型别名 :=> 无值
>thing.doSomething : (predicate: (x: { name: 文字; id: 数字; }, y: { name: 文字; id: 数字; }) => 真假) => 无值
>thing : MyArrayWrapper<{ name: 文字; id: 数字; }>
>doSomething : (predicate: (x: { name: 文字; id: 数字; }, y: { name: 文字; id: 数字; }) => 真假) => 无值
>(x, y) => x.name === "bob" : (x: { name: 文字; id: 数字; }, y: { name: 文字; id: 数字; }) => 真假
>x : { name: 文字; id: 数字; }
>y : { name: 文字; id: 数字; }
>x.name === "bob" : 真假
>类型别名 :=> 真假
>x.name : 文字
>类型别名 :=> 文字
>x : { name: 文字; id: 数字; }
>name : 文字
>类型别名 :=> 文字
>"bob" : "bob"

