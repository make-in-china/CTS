=== tests/cases/compiler/vararg.ts ===
module M {
>M : 类为 M

    export class C {
>C : C

        public f(x:string,...rest:number[]) {
>f : (x: 文字, ...rest: 数字[]) => 文字
>x : 文字
>类型别名 :=> 文字
>rest : 数字[]

            var sum=0;
>sum : 数字
>类型别名 :=> 数字
>0 : 0

            for (var i=0;i<rest.length;i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i<rest.length : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>rest.length : 数字
>类型别名 :=> 数字
>rest : 数字[]
>length : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                sum+=rest[i];
>sum+=rest[i] : 数字
>类型别名 :=> 数字
>sum : 数字
>类型别名 :=> 数字
>rest[i] : 数字
>类型别名 :=> 数字
>rest : 数字[]
>i : 数字
>类型别名 :=> 数字
            }
            result+=(x+": "+sum);
>result+=(x+": "+sum) : 文字
>类型别名 :=> 文字
>result : 文字
>类型别名 :=> 文字
>(x+": "+sum) : 文字
>类型别名 :=> 文字
>x+": "+sum : 文字
>类型别名 :=> 文字
>x+": " : 文字
>类型别名 :=> 文字
>x : 文字
>类型别名 :=> 文字
>": " : ": "
>sum : 数字
>类型别名 :=> 数字

            return result;
>result : 文字
>类型别名 :=> 文字
        }

        public fnope(x:string,...rest:number) {
>fnope : (x: 文字, ...rest: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>rest : 数字
>类型别名 :=> 数字
    
        }

        public fonly(...rest:string[]) {
>fonly : (...rest: 文字[]) => 任意
>rest : 文字[]

            builder="";
>builder="" : ""
>builder : 任意
>类型别名 :=> 任意
>"" : ""

            for (var i=0;i<rest.length;i++) {
>i : 数字
>类型别名 :=> 数字
>0 : 0
>i<rest.length : 真假
>类型别名 :=> 真假
>i : 数字
>类型别名 :=> 数字
>rest.length : 数字
>类型别名 :=> 数字
>rest : 文字[]
>length : 数字
>类型别名 :=> 数字
>i++ : 数字
>类型别名 :=> 数字
>i : 数字
>类型别名 :=> 数字

                builder+=rest[i];
>builder+=rest[i] : 文字
>类型别名 :=> 文字
>builder : 任意
>类型别名 :=> 任意
>rest[i] : 文字
>类型别名 :=> 文字
>rest : 文字[]
>i : 数字
>类型别名 :=> 数字
            }
            return builder;
>builder : 任意
>类型别名 :=> 任意
        }
    }
}

var x=new M.C();
>x : M.C
>new M.C() : M.C
>M.C : 类为 M.C
>M : 类为 M
>C : 类为 M.C

var result="";
>result : 文字
>类型别名 :=> 文字
>"" : ""

result+=x.f(x,3,3); // bad first param
>result+=x.f(x,3,3) : 文字
>类型别名 :=> 文字
>result : 文字
>类型别名 :=> 文字
>x.f(x,3,3) : 文字
>类型别名 :=> 文字
>x.f : (x: 文字, ...rest: 数字[]) => 文字
>x : M.C
>f : (x: 文字, ...rest: 数字[]) => 文字
>x : M.C
>3 : 3
>3 : 3

result+=x.f(3,"hello",3); // bad second param
>result+=x.f(3,"hello",3) : 文字
>类型别名 :=> 文字
>result : 文字
>类型别名 :=> 文字
>x.f(3,"hello",3) : 文字
>类型别名 :=> 文字
>x.f : (x: 文字, ...rest: 数字[]) => 文字
>x : M.C
>f : (x: 文字, ...rest: 数字[]) => 文字
>3 : 3
>"hello" : "hello"
>3 : 3

result+=x.f("hello",3,3,3,3,3); // ok
>result+=x.f("hello",3,3,3,3,3) : 文字
>类型别名 :=> 文字
>result : 文字
>类型别名 :=> 文字
>x.f("hello",3,3,3,3,3) : 文字
>类型别名 :=> 文字
>x.f : (x: 文字, ...rest: 数字[]) => 文字
>x : M.C
>f : (x: 文字, ...rest: 数字[]) => 文字
>"hello" : "hello"
>3 : 3
>3 : 3
>3 : 3
>3 : 3
>3 : 3

result+=x.f("hello"); // ok varargs length 0
>result+=x.f("hello") : 文字
>类型别名 :=> 文字
>result : 文字
>类型别名 :=> 文字
>x.f("hello") : 文字
>类型别名 :=> 文字
>x.f : (x: 文字, ...rest: 数字[]) => 文字
>x : M.C
>f : (x: 文字, ...rest: 数字[]) => 文字
>"hello" : "hello"

result+=x.fonly(3); // ok conversion
>result+=x.fonly(3) : 文字
>类型别名 :=> 文字
>result : 文字
>类型别名 :=> 文字
>x.fonly(3) : 任意
>类型别名 :=> 任意
>x.fonly : (...rest: 文字[]) => 任意
>x : M.C
>fonly : (...rest: 文字[]) => 任意
>3 : 3

result+=x.fonly(x); // bad param
>result+=x.fonly(x) : 文字
>类型别名 :=> 文字
>result : 文字
>类型别名 :=> 文字
>x.fonly(x) : 任意
>类型别名 :=> 任意
>x.fonly : (...rest: 文字[]) => 任意
>x : M.C
>fonly : (...rest: 文字[]) => 任意
>x : M.C

result+=x.fonly("a"); // ok 
>result+=x.fonly("a") : 文字
>类型别名 :=> 文字
>result : 文字
>类型别名 :=> 文字
>x.fonly("a") : 任意
>类型别名 :=> 任意
>x.fonly : (...rest: 文字[]) => 任意
>x : M.C
>fonly : (...rest: 文字[]) => 任意
>"a" : "a"

result+=x.fonly("a","b","c","d"); //ok 
>result+=x.fonly("a","b","c","d") : 文字
>类型别名 :=> 文字
>result : 文字
>类型别名 :=> 文字
>x.fonly("a","b","c","d") : 任意
>类型别名 :=> 任意
>x.fonly : (...rest: 文字[]) => 任意
>x : M.C
>fonly : (...rest: 文字[]) => 任意
>"a" : "a"
>"b" : "b"
>"c" : "c"
>"d" : "d"



