=== tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithNullValueAndInvalidOperator.ts ===
// If one operand is the null or undefined value, it is treated as having the type of the other operand.

function foo(): void { return undefined }
>foo : () => void
>undefined : undefined
>类型别名 :=> 未定

var a: boolean;
>a : boolean
>类型别名 :=> 真假

var b: Object;
>b : Object
>Object : Object

var c: void;
>c : void
>类型别名 :=> 无值

var d: Number;
>d : Number
>Number : Number

// null + boolean/Object
var r1 = null + a;
>r1 : any
>类型别名 :=> 任意
>null + a : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>a : boolean
>类型别名 :=> 真假

var r2 = null + b;
>r2 : any
>类型别名 :=> 任意
>null + b : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>b : Object

var r3 = null + c;
>r3 : any
>类型别名 :=> 任意
>null + c : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>c : void
>类型别名 :=> 无值

var r4 = a + null;
>r4 : any
>类型别名 :=> 任意
>a + null : any
>类型别名 :=> 任意
>a : boolean
>类型别名 :=> 真假
>null : null
>类型别名 :=> 空值

var r5 = b + null;
>r5 : any
>类型别名 :=> 任意
>b + null : any
>类型别名 :=> 任意
>b : Object
>null : null
>类型别名 :=> 空值

var r6 = null + c;
>r6 : any
>类型别名 :=> 任意
>null + c : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>c : void
>类型别名 :=> 无值

// other cases
var r7 = null + d;
>r7 : any
>类型别名 :=> 任意
>null + d : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>d : Number

var r8 = null + true;
>r8 : any
>类型别名 :=> 任意
>null + true : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>true : true
>类型别名 :=> 为真

var r9 = null + { a: '' };
>r9 : any
>类型别名 :=> 任意
>null + { a: '' } : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>{ a: '' } : { a: string; }
>a : string
>类型别名 :=> 文字
>'' : ""

var r10 = null + foo();
>r10 : any
>类型别名 :=> 任意
>null + foo() : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>foo() : void
>类型别名 :=> 无值
>foo : () => void

var r11 = null + (() => { });
>r11 : any
>类型别名 :=> 任意
>null + (() => { }) : any
>类型别名 :=> 任意
>null : null
>类型别名 :=> 空值
>(() => { }) : () => void
>() => { } : () => void

