=== tests/cases/conformance/async/es2017/asyncAwait_es2017.ts ===
type MyPromise<T> = Promise<T>;
>MyPromise : Promise<T>
>T : T
>Promise : Promise<T>
>T : T

declare var MyPromise: typeof Promise;
>MyPromise : PromiseConstructor
>Promise : PromiseConstructor

declare var p: Promise<number>;
>p : Promise<数字>
>Promise : Promise<T>

declare var mp: MyPromise<number>;
>mp : Promise<数字>
>MyPromise : Promise<T>

async function f0() { }
>f0 : () => Promise<无值>

async function f1(): Promise<void> { }
>f1 : () => Promise<无值>
>Promise : Promise<T>

async function f3(): MyPromise<void> { }
>f3 : () => Promise<无值>
>MyPromise : Promise<T>

let f4 = async function() { }
>f4 : () => Promise<无值>
>async function() { } : () => Promise<无值>

let f5 = async function(): Promise<void> { }
>f5 : () => Promise<无值>
>async function(): Promise<void> { } : () => Promise<无值>
>Promise : Promise<T>

let f6 = async function(): MyPromise<void> { }
>f6 : () => Promise<无值>
>async function(): MyPromise<void> { } : () => Promise<无值>
>MyPromise : Promise<T>

let f7 = async () => { };
>f7 : () => Promise<无值>
>async () => { } : () => Promise<无值>

let f8 = async (): Promise<void> => { };
>f8 : () => Promise<无值>
>async (): Promise<void> => { } : () => Promise<无值>
>Promise : Promise<T>

let f9 = async (): MyPromise<void> => { }; 
>f9 : () => Promise<无值>
>async (): MyPromise<void> => { } : () => Promise<无值>
>MyPromise : Promise<T>

let f10 = async () => p;
>f10 : () => Promise<数字>
>async () => p : () => Promise<数字>
>p : Promise<数字>

let f11 = async () => mp;
>f11 : () => Promise<数字>
>async () => mp : () => Promise<数字>
>mp : Promise<数字>

let f12 = async (): Promise<number> => mp;
>f12 : () => Promise<数字>
>async (): Promise<number> => mp : () => Promise<数字>
>Promise : Promise<T>
>mp : Promise<数字>

let f13 = async (): MyPromise<number> => p;
>f13 : () => Promise<数字>
>async (): MyPromise<number> => p : () => Promise<数字>
>MyPromise : Promise<T>
>p : Promise<数字>

let o = {
>o : { m1(): Promise<无值>; m2(): Promise<无值>; m3(): Promise<无值>; }
>{	async m1() { },	async m2(): Promise<void> { },	async m3(): MyPromise<void> { }} : { m1(): Promise<无值>; m2(): Promise<无值>; m3(): Promise<无值>; }

	async m1() { },
>m1 : () => Promise<无值>

	async m2(): Promise<void> { },
>m2 : () => Promise<无值>
>Promise : Promise<T>

	async m3(): MyPromise<void> { }
>m3 : () => Promise<无值>
>MyPromise : Promise<T>

};

class C {
>C : C

	async m1() { }
>m1 : () => Promise<无值>

	async m2(): Promise<void> { }
>m2 : () => Promise<无值>
>Promise : Promise<T>

	async m3(): MyPromise<void> { }
>m3 : () => Promise<无值>
>MyPromise : Promise<T>

	static async m4() { }
>m4 : () => Promise<无值>

	static async m5(): Promise<void> { }
>m5 : () => Promise<无值>
>Promise : Promise<T>

	static async m6(): MyPromise<void> { }
>m6 : () => Promise<无值>
>MyPromise : Promise<T>
}

module M {
>M : 类为 M

	export async function f1() { }
>f1 : () => Promise<无值>
}
