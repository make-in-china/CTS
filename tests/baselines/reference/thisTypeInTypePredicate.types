=== tests/cases/conformance/types/thisType/thisTypeInTypePredicate.ts ===
declare function filter<S>(f: (this: void, x: any) => x is S): S[];
>filter : <S>(f: (this: 无值, x: 任意) => x 作为 S) => S[]
>S : S
>f : (this: 无值, x: 任意) => x 作为 S
>this : 无值
>类型别名 :=> 无值
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>S : S
>S : S

const numbers = filter<number>((x): x is number => 'number' == typeof x)
>numbers : 数字[]
>filter<number>((x): x is number => 'number' == typeof x) : 数字[]
>filter : <S>(f: (this: 无值, x: 任意) => x 作为 S) => S[]
>(x): x is number => 'number' == typeof x : (this: 无值, x: 任意) => x 作为 数字
>x : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>'number' == typeof x : 真假
>类型别名 :=> 真假
>'number' : "number"
>typeof x : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>x : 任意
>类型别名 :=> 任意

