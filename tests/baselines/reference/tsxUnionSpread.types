=== tests/cases/compiler/index.tsx ===
namespace JSX {
>JSX : 任意
>类型别名 :=> 任意

    export interface Element {}
>Element : Element
}

export type CatInfo = { type: 'Cat'; subType: string; };
>CatInfo : CatInfo
>type : "Cat"
>subType : 文字
>类型别名 :=> 文字

export type DogInfo = { type: 'Dog'; };
>DogInfo : DogInfo
>type : "Dog"

export type AnimalInfo = CatInfo | DogInfo;
>AnimalInfo : AnimalInfo
>CatInfo : CatInfo
>DogInfo : DogInfo

function AnimalComponent(info: AnimalInfo): JSX.Element {
>AnimalComponent : (info: AnimalInfo) => JSX.Element
>info : AnimalInfo
>AnimalInfo : AnimalInfo
>JSX : 任意
>类型别名 :=> 任意
>Element : JSX.Element

    return undefined as any;
>undefined as any : 任意
>类型别名 :=> 任意
>undefined : 未定
>类型别名 :=> 未定
}

function getProps(): AnimalInfo {
>getProps : () => AnimalInfo
>AnimalInfo : AnimalInfo

    // this may be from server or whatever ...
    return { type: 'Cat', subType: 'Large' };
>{ type: 'Cat', subType: 'Large' } : { type: "Cat"; subType: 文字; }
>type : 文字
>类型别名 :=> 文字
>'Cat' : "Cat"
>subType : 文字
>类型别名 :=> 文字
>'Large' : "Large"
}

var props:AnimalInfo = getProps();
>props : AnimalInfo
>AnimalInfo : AnimalInfo
>getProps() : AnimalInfo
>getProps : () => AnimalInfo

var component = <AnimalComponent {...props} />
>component : 任意
>类型别名 :=> 任意
><AnimalComponent {...props} /> : 任意
>类型别名 :=> 任意
>AnimalComponent : (info: AnimalInfo) => JSX.Element
>props : AnimalInfo

var props2:AnimalInfo = { type: 'Cat', subType: 'Large' };
>props2 : AnimalInfo
>AnimalInfo : AnimalInfo
>{ type: 'Cat', subType: 'Large' } : { type: "Cat"; subType: 文字; }
>type : 文字
>类型别名 :=> 文字
>'Cat' : "Cat"
>subType : 文字
>类型别名 :=> 文字
>'Large' : "Large"

var component2 = <AnimalComponent {...props2} />
>component2 : 任意
>类型别名 :=> 任意
><AnimalComponent {...props2} /> : 任意
>类型别名 :=> 任意
>AnimalComponent : (info: AnimalInfo) => JSX.Element
>props2 : CatInfo

