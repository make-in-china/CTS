=== tests/cases/conformance/expressions/typeGuards/typeGuardsOnClassProperty.ts ===
// Note that type guards affect types of variables and parameters only and 
// have no effect on members of objects such as properties. 

// Note that the class's property must be copied to a local variable for
// the type guard to have an effect
class D {
>D : D

    data: string | string[];
>data : 文字 | 文字[]

    getData() {
>getData : () => 文字

        var data = this.data;
>data : 文字 | 文字[]
>this.data : 文字 | 文字[]
>this : 本体
>data : 文字 | 文字[]

        return typeof data === "string" ? data : data.join(" ");
>typeof data === "string" ? data : data.join(" ") : 文字
>类型别名 :=> 文字
>typeof data === "string" : 真假
>类型别名 :=> 真假
>typeof data : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>data : 文字 | 文字[]
>"string" : "string"
>data : 文字
>类型别名 :=> 文字
>data.join(" ") : 文字
>类型别名 :=> 文字
>data.join : (separator?: 文字) => 文字
>data : 文字[]
>join : (separator?: 文字) => 文字
>" " : " "
    }

    getData1() {
>getData1 : () => 文字

        return typeof this.data === "string" ? this.data : this.data.join(" ");
>typeof this.data === "string" ? this.data : this.data.join(" ") : 文字
>类型别名 :=> 文字
>typeof this.data === "string" : 真假
>类型别名 :=> 真假
>typeof this.data : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>this.data : 文字 | 文字[]
>this : 本体
>data : 文字 | 文字[]
>"string" : "string"
>this.data : 文字
>类型别名 :=> 文字
>this : 本体
>data : 文字
>类型别名 :=> 文字
>this.data.join(" ") : 文字
>类型别名 :=> 文字
>this.data.join : (separator?: 文字) => 文字
>this.data : 文字[]
>this : 本体
>data : 文字[]
>join : (separator?: 文字) => 文字
>" " : " "
    }
}

var o: {
>o : { prop1: 文字 | 数字; prop2: 文字 | 真假; }

    prop1: number|string;
>prop1 : 文字 | 数字

    prop2: boolean|string;
>prop2 : 文字 | 真假

} = {
>{        prop1: "string" ,        prop2: true    } : { prop1: 文字; prop2: 为真; }

        prop1: "string" ,
>prop1 : 文字
>类型别名 :=> 文字
>"string" : "string"

        prop2: true
>prop2 : 真假
>类型别名 :=> 真假
>true : 为真
>类型别名 :=> 为真
    }

if (typeof o.prop1 === "string" && o.prop1.toLowerCase()) {}
>typeof o.prop1 === "string" && o.prop1.toLowerCase() : 文字
>类型别名 :=> 文字
>typeof o.prop1 === "string" : 真假
>类型别名 :=> 真假
>typeof o.prop1 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>o.prop1 : 文字 | 数字
>o : { prop1: 文字 | 数字; prop2: 文字 | 真假; }
>prop1 : 文字 | 数字
>"string" : "string"
>o.prop1.toLowerCase() : 文字
>类型别名 :=> 文字
>o.prop1.toLowerCase : () => 文字
>o.prop1 : 文字
>类型别名 :=> 文字
>o : { prop1: 文字 | 数字; prop2: 文字 | 真假; }
>prop1 : 文字
>类型别名 :=> 文字
>toLowerCase : () => 文字

var prop1 = o.prop1;
>prop1 : 文字 | 数字
>o.prop1 : 文字 | 数字
>o : { prop1: 文字 | 数字; prop2: 文字 | 真假; }
>prop1 : 文字 | 数字

if (typeof prop1 === "string" && prop1.toLocaleLowerCase()) { }
>typeof prop1 === "string" && prop1.toLocaleLowerCase() : 文字
>类型别名 :=> 文字
>typeof prop1 === "string" : 真假
>类型别名 :=> 真假
>typeof prop1 : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>prop1 : 文字 | 数字
>"string" : "string"
>prop1.toLocaleLowerCase() : 文字
>类型别名 :=> 文字
>prop1.toLocaleLowerCase : () => 文字
>prop1 : 文字
>类型别名 :=> 文字
>toLocaleLowerCase : () => 文字

