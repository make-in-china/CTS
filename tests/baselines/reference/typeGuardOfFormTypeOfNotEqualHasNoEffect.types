=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfNotEqualHasNoEffect.ts ===
class C { private p: string };
>C : C
>p : string
>类型别名 :=> 文字

var strOrNum: string | number;
>strOrNum : string | number

var strOrBool: string | boolean;
>strOrBool : string | boolean

var numOrBool: number | boolean
>numOrBool : number | boolean

var strOrC: string | C;
>strOrC : string | C
>C : C

// typeof x != s has not effect on typeguard
if (typeof strOrNum != "string") {
>typeof strOrNum != "string" : boolean
>类型别名 :=> 真假
>typeof strOrNum : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrNum : string | number
>"string" : "string"

    var r1 = strOrNum; // string | number
>r1 : number
>类型别名 :=> 数字
>strOrNum : number
>类型别名 :=> 数字
}
else {
    var r1 = strOrNum; // string | number
>r1 : number
>类型别名 :=> 数字
>strOrNum : string
>类型别名 :=> 文字
}

if (typeof strOrBool != "boolean") {
>typeof strOrBool != "boolean" : boolean
>类型别名 :=> 真假
>typeof strOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrBool : string | boolean
>"boolean" : "boolean"

    var r2 = strOrBool; // string | boolean
>r2 : string
>类型别名 :=> 文字
>strOrBool : string
>类型别名 :=> 文字
}
else {
    var r2 = strOrBool; // string | boolean
>r2 : string
>类型别名 :=> 文字
>strOrBool : boolean
>类型别名 :=> 真假
}

if (typeof numOrBool != "number") {
>typeof numOrBool != "number" : boolean
>类型别名 :=> 真假
>typeof numOrBool : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>numOrBool : number | boolean
>"number" : "number"

    var r3 = numOrBool; // number | boolean
>r3 : boolean
>类型别名 :=> 真假
>numOrBool : boolean
>类型别名 :=> 真假
}
else {
    var r3 = numOrBool; // number | boolean
>r3 : boolean
>类型别名 :=> 真假
>numOrBool : number
>类型别名 :=> 数字
}

if (typeof strOrC != "Object") {
>typeof strOrC != "Object" : boolean
>类型别名 :=> 真假
>typeof strOrC : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function" | "文字" | "数字" | "真假" | "符号" | "未定" | "对象" | "函数"
>strOrC : string | C
>"Object" : "Object"

    var r4 = strOrC; // string | C
>r4 : string
>类型别名 :=> 文字
>strOrC : string
>类型别名 :=> 文字
}
else {
    var r4 = strOrC; // string | C
>r4 : string
>类型别名 :=> 文字
>strOrC : C
}
