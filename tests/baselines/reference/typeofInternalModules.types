=== tests/cases/compiler/typeofInternalModules.ts ===
module Outer {
>Outer : 类为 Outer

    export module instantiated {
>instantiated : 类为 instantiated

        export class C { }
>C : C
    }
    export module uninstantiated {
>uninstantiated : 任意
>类型别名 :=> 任意

        export interface P { }
>P : P
    }
}

import importInst = Outer.instantiated;
>importInst : 类为 importInst
>Outer : 类为 Outer
>instantiated : 类为 importInst

import importUninst = Outer.uninstantiated;
>importUninst : 任意
>类型别名 :=> 任意
>Outer : 类为 Outer
>uninstantiated : 任意
>类型别名 :=> 任意

var x1: typeof importInst.C = importInst.C;
>x1 : 类为 importInst.C
>importInst.C : 类为 importInst.C
>importInst : 类为 importInst
>C : 类为 importInst.C
>importInst.C : 类为 importInst.C
>importInst : 类为 importInst
>C : 类为 importInst.C

var x2: importInst.C = new x1();
>x2 : importInst.C
>importInst : 任意
>类型别名 :=> 任意
>C : importInst.C
>new x1() : importInst.C
>x1 : 类为 importInst.C

var x3: typeof importUninst.P; // Error again
>x3 : 任意
>类型别名 :=> 任意
>importUninst.P : 任意
>类型别名 :=> 任意
>importUninst : 任意
>类型别名 :=> 任意
>P : 任意
>类型别名 :=> 任意

var x4: Outer = Outer;
>x4 : 任意
>类型别名 :=> 任意
>Outer : No type information available!
>Outer : 类为 Outer

var x5: typeof importInst;
>x5 : 类为 importInst
>importInst : 类为 importInst

x5 = Outer;
>x5 = Outer : 类为 Outer
>x5 : 类为 importInst
>Outer : 类为 Outer

x5 = Outer.instantiated;
>x5 = Outer.instantiated : 类为 importInst
>x5 : 类为 importInst
>Outer.instantiated : 类为 importInst
>Outer : 类为 Outer
>instantiated : 类为 importInst

var x6: typeof importUninst;
>x6 : 任意
>类型别名 :=> 任意
>importUninst : 任意
>类型别名 :=> 任意

var x7: typeof Outer = Outer;
>x7 : 类为 Outer
>Outer : 类为 Outer
>Outer : 类为 Outer

x7 = importInst;
>x7 = importInst : 类为 importInst
>x7 : 类为 Outer
>importInst : 类为 importInst

