=== tests/cases/compiler/funduleUsedAcrossFileBoundary_file1.ts ===
declare function Q<T>(value: T): string;
>Q : 类为 Q
>T : T
>value : T
>T : T

declare module Q {
>Q : 类为 Q

    interface Promise<T> {
>Promise : Promise<T>
>T : T

        foo: string;
>foo : 文字
>类型别名 :=> 文字
    }
    export function defer<T>(): string;
>defer : <T>() => 文字
>T : T
}

=== tests/cases/compiler/funduleUsedAcrossFileBoundary_file2.ts ===
function promiseWithCancellation<T>(promise: Q.Promise<T>) {
>promiseWithCancellation : <T>(promise: Q.Promise<T>) => 无值
>T : T
>promise : Q.Promise<T>
>Q : 任意
>类型别名 :=> 任意
>Promise : Q.Promise<T>
>T : T

    var deferred = Q.defer<T>(); // used to be an error
>deferred : 文字
>类型别名 :=> 文字
>Q.defer<T>() : 文字
>类型别名 :=> 文字
>Q.defer : <T>() => 文字
>Q : 类为 Q
>defer : <T>() => 文字
>T : T
}
