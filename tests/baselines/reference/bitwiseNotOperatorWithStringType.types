=== tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithStringType.ts ===
// ~ operator on string type
var STRING: string;
>STRING : 文字
>类型别名 :=> 文字

var STRING1: string[] = ["", "abc"];
>STRING1 : 文字[]
>["", "abc"] : 文字[]
>"" : ""
>"abc" : "abc"

function foo(): string { return "abc"; }
>foo : () => 文字
>"abc" : "abc"

class A {
>A : A

    public a: string;
>a : 文字
>类型别名 :=> 文字

    static foo() { return ""; }
>foo : () => 文字
>"" : ""
}
module M {
>M : 类为 M

    export var n: string;
>n : 文字
>类型别名 :=> 文字
}

var objA = new A();
>objA : A
>new A() : A
>A : 类为 A

// string type var
var ResultIsNumber1 = ~STRING;
>ResultIsNumber1 : 数字
>类型别名 :=> 数字
>~STRING : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字

var ResultIsNumber2 = ~STRING1;
>ResultIsNumber2 : 数字
>类型别名 :=> 数字
>~STRING1 : 数字
>类型别名 :=> 数字
>STRING1 : 文字[]

// string type literal
var ResultIsNumber3 = ~"";
>ResultIsNumber3 : 数字
>类型别名 :=> 数字
>~"" : 数字
>类型别名 :=> 数字
>"" : ""

var ResultIsNumber4 = ~{ x: "", y: "" };
>ResultIsNumber4 : 数字
>类型别名 :=> 数字
>~{ x: "", y: "" } : 数字
>类型别名 :=> 数字
>{ x: "", y: "" } : { x: 文字; y: 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : 文字
>类型别名 :=> 文字
>"" : ""

var ResultIsNumber5 = ~{ x: "", y: (s: string) => { return s; } };
>ResultIsNumber5 : 数字
>类型别名 :=> 数字
>~{ x: "", y: (s: string) => { return s; } } : 数字
>类型别名 :=> 数字
>{ x: "", y: (s: string) => { return s; } } : { x: 文字; y: (s: 文字) => 文字; }
>x : 文字
>类型别名 :=> 文字
>"" : ""
>y : (s: 文字) => 文字
>(s: string) => { return s; } : (s: 文字) => 文字
>s : 文字
>类型别名 :=> 文字
>s : 文字
>类型别名 :=> 文字

// string type expressions
var ResultIsNumber6 = ~objA.a;
>ResultIsNumber6 : 数字
>类型别名 :=> 数字
>~objA.a : 数字
>类型别名 :=> 数字
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字

var ResultIsNumber7 = ~M.n;
>ResultIsNumber7 : 数字
>类型别名 :=> 数字
>~M.n : 数字
>类型别名 :=> 数字
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

var ResultIsNumber8 = ~STRING1[0];
>ResultIsNumber8 : 数字
>类型别名 :=> 数字
>~STRING1[0] : 数字
>类型别名 :=> 数字
>STRING1[0] : 文字
>类型别名 :=> 文字
>STRING1 : 文字[]
>0 : 0

var ResultIsNumber9 = ~foo();
>ResultIsNumber9 : 数字
>类型别名 :=> 数字
>~foo() : 数字
>类型别名 :=> 数字
>foo() : 文字
>类型别名 :=> 文字
>foo : () => 文字

var ResultIsNumber10 = ~A.foo();
>ResultIsNumber10 : 数字
>类型别名 :=> 数字
>~A.foo() : 数字
>类型别名 :=> 数字
>A.foo() : 文字
>类型别名 :=> 文字
>A.foo : () => 文字
>A : 类为 A
>foo : () => 文字

var ResultIsNumber11 = ~(STRING + STRING);
>ResultIsNumber11 : 数字
>类型别名 :=> 数字
>~(STRING + STRING) : 数字
>类型别名 :=> 数字
>(STRING + STRING) : 文字
>类型别名 :=> 文字
>STRING + STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字

var ResultIsNumber12 = ~STRING.charAt(0);
>ResultIsNumber12 : 数字
>类型别名 :=> 数字
>~STRING.charAt(0) : 数字
>类型别名 :=> 数字
>STRING.charAt(0) : 文字
>类型别名 :=> 文字
>STRING.charAt : (pos: 数字) => 文字
>STRING : 文字
>类型别名 :=> 文字
>charAt : (pos: 数字) => 文字
>0 : 0

// multiple ~ operators
var ResultIsNumber13 = ~~STRING;
>ResultIsNumber13 : 数字
>类型别名 :=> 数字
>~~STRING : 数字
>类型别名 :=> 数字
>~STRING : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字

var ResultIsNumber14 = ~~~(STRING + STRING);
>ResultIsNumber14 : 数字
>类型别名 :=> 数字
>~~~(STRING + STRING) : 数字
>类型别名 :=> 数字
>~~(STRING + STRING) : 数字
>类型别名 :=> 数字
>~(STRING + STRING) : 数字
>类型别名 :=> 数字
>(STRING + STRING) : 文字
>类型别名 :=> 文字
>STRING + STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字
>STRING : 文字
>类型别名 :=> 文字

//miss assignment operators
~STRING;
>~STRING : 数字
>类型别名 :=> 数字
>STRING : 文字
>类型别名 :=> 文字

~STRING1;
>~STRING1 : 数字
>类型别名 :=> 数字
>STRING1 : 文字[]

~foo();
>~foo() : 数字
>类型别名 :=> 数字
>foo() : 文字
>类型别名 :=> 文字
>foo : () => 文字

~objA.a,M.n;
>~objA.a,M.n : 文字
>类型别名 :=> 文字
>~objA.a : 数字
>类型别名 :=> 数字
>objA.a : 文字
>类型别名 :=> 文字
>objA : A
>a : 文字
>类型别名 :=> 文字
>M.n : 文字
>类型别名 :=> 文字
>M : 类为 M
>n : 文字
>类型别名 :=> 文字

