=== tests/cases/compiler/recursiveLetConst.ts ===
'use strict'
>'use strict' : "use strict"

let x = x + 1;
>x : 任意
>类型别名 :=> 任意
>x + 1 : 任意
>类型别名 :=> 任意
>x : 任意
>类型别名 :=> 任意
>1 : 1

let [x1] = x1 + 1;
>x1 : 任意
>类型别名 :=> 任意
>x1 + 1 : 任意
>类型别名 :=> 任意
>x1 : 任意
>类型别名 :=> 任意
>1 : 1

const y = y + 2;
>y : 任意
>类型别名 :=> 任意
>y + 2 : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>2 : 2

const [y1] = y1 + 1;
>y1 : 任意
>类型别名 :=> 任意
>y1 + 1 : 任意
>类型别名 :=> 任意
>y1 : 任意
>类型别名 :=> 任意
>1 : 1

for (let v = v; ; ) { }
>v : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

for (let [v] = v; ;) { }
>v : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

for (let v in v) { }
>v : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

for (let v of v) { }
>v : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

for (let [v] of v) { }
>v : 任意
>类型别名 :=> 任意
>v : 任意
>类型别名 :=> 任意

let [x2 = x2] = []
>x2 : 任意
>类型别名 :=> 任意
>x2 : 任意
>类型别名 :=> 任意
>[] : [任意]

let z0 = () => z0;
>z0 : () => 任意
>() => z0 : () => 任意
>z0 : () => 任意

let z1 = function () { return z1; }
>z1 : () => 任意
>function () { return z1; } : () => 任意
>z1 : () => 任意

let z2 = { f() { return z2;}}
>z2 : { f(): 任意; }
>{ f() { return z2;}} : { f(): 任意; }
>f : () => { f(): 任意; }
>z2 : { f(): 任意; }

