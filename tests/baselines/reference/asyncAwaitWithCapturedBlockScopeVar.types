=== tests/cases/compiler/asyncAwaitWithCapturedBlockScopeVar.ts ===
async function fn1() {
>fn1 : () => Promise<void>

    let ar = [];
>ar : any[]
>[] : undefined[]

    for (let i = 0; i < 1; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

        await 1;
>await 1 : 1
>1 : 1

        ar.push(() => i);
>ar.push(() => i) : number
>类型别名 :=> 数字
>ar.push : (...items: any[]) => number
>ar : any[]
>push : (...items: any[]) => number
>() => i : () => number
>i : number
>类型别名 :=> 数字
    }
}

async function fn2() {
>fn2 : () => Promise<void>

    let ar = [];
>ar : any[]
>[] : undefined[]

    for (let i = 0; i < 1; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

        await 1;
>await 1 : 1
>1 : 1

        ar.push(() => i);
>ar.push(() => i) : number
>类型别名 :=> 数字
>ar.push : (...items: any[]) => number
>ar : any[]
>push : (...items: any[]) => number
>() => i : () => number
>i : number
>类型别名 :=> 数字

        break;
    }
}

async function fn3() {
>fn3 : () => Promise<void>

    let ar = [];
>ar : any[]
>[] : undefined[]

    for (let i = 0; i < 1; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

        await 1;
>await 1 : 1
>1 : 1

        ar.push(() => i);
>ar.push(() => i) : number
>类型别名 :=> 数字
>ar.push : (...items: any[]) => number
>ar : any[]
>push : (...items: any[]) => number
>() => i : () => number
>i : number
>类型别名 :=> 数字

        continue;
    }
}

async function fn4(): Promise<number> {
>fn4 : () => Promise<number>
>Promise : Promise<T>

    let ar = [];
>ar : any[]
>[] : undefined[]

    for (let i = 0; i < 1; i++) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < 1 : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>1 : 1
>i++ : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

        await 1;
>await 1 : 1
>1 : 1

        ar.push(() => i);
>ar.push(() => i) : number
>类型别名 :=> 数字
>ar.push : (...items: any[]) => number
>ar : any[]
>push : (...items: any[]) => number
>() => i : () => number
>i : number
>类型别名 :=> 数字

        return 1;
>1 : 1
    }
}

