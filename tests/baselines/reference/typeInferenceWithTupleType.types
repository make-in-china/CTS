=== tests/cases/conformance/types/tuple/typeInferenceWithTupleType.ts ===
function combine<T, U>(x: T, y: U): [T, U] {
>combine : <T, U>(x: T, y: U) => [T, U]
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T
>U : U

    return [x, y];
>[x, y] : [T, U]
>x : T
>y : U
}

var combineResult = combine("string", 10);
>combineResult : [string, number]
>combine("string", 10) : [string, number]
>combine : <T, U>(x: T, y: U) => [T, U]
>"string" : "string"
>10 : 10

var combineEle1 = combineResult[0]; // string
>combineEle1 : string
>类型别名 :=> 文字
>combineResult[0] : string
>类型别名 :=> 文字
>combineResult : [string, number]
>0 : 0

var combineEle2 = combineResult[1]; // number
>combineEle2 : number
>类型别名 :=> 数字
>combineResult[1] : number
>类型别名 :=> 数字
>combineResult : [string, number]
>1 : 1

function zip<T, U>(array1: T[], array2: U[]): [[T, U]] {
>zip : <T, U>(array1: T[], array2: U[]) => [[T, U]]
>T : T
>U : U
>array1 : T[]
>T : T
>array2 : U[]
>U : U
>T : T
>U : U

    if (array1.length != array2.length) {
>array1.length != array2.length : boolean
>类型别名 :=> 真假
>array1.length : number
>类型别名 :=> 数字
>array1 : T[]
>length : number
>类型别名 :=> 数字
>array2.length : number
>类型别名 :=> 数字
>array2 : U[]
>length : number
>类型别名 :=> 数字

        return [[undefined, undefined]];
>[[undefined, undefined]] : [[undefined, undefined]]
>[undefined, undefined] : [undefined, undefined]
>undefined : undefined
>类型别名 :=> 未定
>undefined : undefined
>类型别名 :=> 未定
    }
    var length = array1.length;
>length : number
>类型别名 :=> 数字
>array1.length : number
>类型别名 :=> 数字
>array1 : T[]
>length : number
>类型别名 :=> 数字

    var zipResult: [[T, U]];
>zipResult : [[T, U]]
>T : T
>U : U

    for (var i = 0; i < length; ++i) {
>i : number
>类型别名 :=> 数字
>0 : 0
>i < length : boolean
>类型别名 :=> 真假
>i : number
>类型别名 :=> 数字
>length : number
>类型别名 :=> 数字
>++i : number
>类型别名 :=> 数字
>i : number
>类型别名 :=> 数字

        zipResult.push([array1[i], array2[i]]);
>zipResult.push([array1[i], array2[i]]) : number
>类型别名 :=> 数字
>zipResult.push : (...items: [T, U][]) => number
>zipResult : [[T, U]]
>push : (...items: [T, U][]) => number
>[array1[i], array2[i]] : [T, U]
>array1[i] : T
>array1 : T[]
>i : number
>类型别名 :=> 数字
>array2[i] : U
>array2 : U[]
>i : number
>类型别名 :=> 数字
    }
    return zipResult;
>zipResult : [[T, U]]
}

var zipResult = zip(["foo", "bar"], [5, 6]);
>zipResult : [[string, number]]
>zip(["foo", "bar"], [5, 6]) : [[string, number]]
>zip : <T, U>(array1: T[], array2: U[]) => [[T, U]]
>["foo", "bar"] : string[]
>"foo" : "foo"
>"bar" : "bar"
>[5, 6] : number[]
>5 : 5
>6 : 6

var zipResultEle = zipResult[0]; // [string, number]
>zipResultEle : [string, number]
>zipResult[0] : [string, number]
>zipResult : [[string, number]]
>0 : 0

var zipResultEleEle = zipResult[0][0]; // string
>zipResultEleEle : string
>类型别名 :=> 文字
>zipResult[0][0] : string
>类型别名 :=> 文字
>zipResult[0] : [string, number]
>zipResult : [[string, number]]
>0 : 0
>0 : 0


