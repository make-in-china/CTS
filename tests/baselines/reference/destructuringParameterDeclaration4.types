=== tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration4.ts ===
// If the parameter is a rest parameter, the parameter type is any[]
// A type annotation for a rest parameter must denote an array type.

// RestParameter:
//     ...   Identifier   TypeAnnotation(opt)

type arrayString = Array<String>
>arrayString : String[]
>Array : T[]
>String : String

type someArray = Array<String> | number[];
>someArray : someArray
>Array : T[]
>String : String

type stringOrNumArray = Array<String|Number>;
>stringOrNumArray : (String | Number)[]
>Array : T[]
>String : String
>Number : Number

function a0(...x: [number, number, string]) { }  // Error, rest parameter must be array type
>a0 : (...x: [number, number, string]) => void
>x : [number, number, string]

function a1(...x: (number|string)[]) { }
>a1 : (...x: (string | number)[]) => void
>x : (string | number)[]

function a2(...a: someArray) { }  // Error, rest parameter must be array type
>a2 : (...a: someArray) => void
>a : someArray
>someArray : someArray

function a3(...b?) { }            // Error, can't be optional
>a3 : (...b?: any[]) => void
>b : any[]

function a4(...b = [1,2,3]) { }   // Error, can't have initializer
>a4 : (...b?: number[]) => void
>b : number[]
>[1,2,3] : number[]
>1 : 1
>2 : 2
>3 : 3

function a5([a, b, [[c]]]) { }
>a5 : ([a, b, [[c]]]: [any, any, [[any]]]) => void
>a : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意
>c : any
>类型别名 :=> 任意

function a6([a, b, c, ...x]: number[]) { }
>a6 : ([a, b, c, ...x]: number[]) => void
>a : number
>类型别名 :=> 数字
>b : number
>类型别名 :=> 数字
>c : number
>类型别名 :=> 数字
>x : number[]


a1(1, 2, "hello", true);  // Error, parameter type is (number|string)[]
>a1(1, 2, "hello", true) : void
>类型别名 :=> 无值
>a1 : (...x: (string | number)[]) => void
>1 : 1
>2 : 2
>"hello" : "hello"
>true : true
>类型别名 :=> 为真

a1(...array2);            // Error parameter type is (number|string)[]
>a1(...array2) : void
>类型别名 :=> 无值
>a1 : (...x: (string | number)[]) => void
>...array2 : any
>类型别名 :=> 任意
>array2 : any
>类型别名 :=> 任意

a5([1, 2, "string", false, true]);       // Error, parameter type is [any, any, [[any]]]
>a5([1, 2, "string", false, true]) : void
>类型别名 :=> 无值
>a5 : ([a, b, [[c]]]: [any, any, [[any]]]) => void
>[1, 2, "string", false, true] : (string | number | boolean)[]
>1 : 1
>2 : 2
>"string" : "string"
>false : false
>类型别名 :=> 为假
>true : true
>类型别名 :=> 为真

a5([1, 2]);                              // Error, parameter type is [any, any, [[any]]]
>a5([1, 2]) : void
>类型别名 :=> 无值
>a5 : ([a, b, [[c]]]: [any, any, [[any]]]) => void
>[1, 2] : number[]
>1 : 1
>2 : 2

a6([1, 2, "string"]);                   // Error, parameter type is number[]
>a6([1, 2, "string"]) : void
>类型别名 :=> 无值
>a6 : ([a, b, c, ...x]: number[]) => void
>[1, 2, "string"] : (string | number)[]
>1 : 1
>2 : 2
>"string" : "string"


var temp = [1, 2, 3];
>temp : number[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

class C {
>C : C

    constructor(public ...temp) { }  // Error, rest parameter can't have properties
>temp : any[]
}

// Rest parameter with generic
function foo1<T extends Number>(...a: T[]) { }
>foo1 : <T extends Number>(...a: T[]) => void
>T : T
>Number : Number
>a : T[]
>T : T

foo1(1, 2, "string", E1.a, E.b);  // Error
>foo1(1, 2, "string", E1.a, E.b) : void
>类型别名 :=> 无值
>foo1 : <T extends Number>(...a: T[]) => void
>1 : 1
>2 : 2
>"string" : "string"
>E1.a : any
>类型别名 :=> 任意
>E1 : any
>类型别名 :=> 任意
>a : any
>类型别名 :=> 任意
>E.b : any
>类型别名 :=> 任意
>E : any
>类型别名 :=> 任意
>b : any
>类型别名 :=> 任意



