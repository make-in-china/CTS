=== tests/cases/conformance/types/spread/spreadMethods.ts ===
class K { p = 12; m() { } }
>K : K
>p : 数字
>类型别名 :=> 数字
>12 : 12
>m : () => 无值

interface I { p: number, m(): void }
>I : I
>p : 数字
>类型别名 :=> 数字
>m : () => 无值

let k = new K()
>k : K
>new K() : K
>K : 类为 K

let sk = { ...k };
>sk : { p: 数字; }
>{ ...k } : { p: 数字; }
>k : K

let ssk = { ...k, ...k };
>ssk : { p: 数字; }
>{ ...k, ...k } : { p: 数字; }
>k : K
>k : K

sk.p;
>sk.p : 数字
>类型别名 :=> 数字
>sk : { p: 数字; }
>p : 数字
>类型别名 :=> 数字

sk.m(); // error
>sk.m() : 任意
>类型别名 :=> 任意
>sk.m : 任意
>类型别名 :=> 任意
>sk : { p: 数字; }
>m : 任意
>类型别名 :=> 任意

ssk.p;
>ssk.p : 数字
>类型别名 :=> 数字
>ssk : { p: 数字; }
>p : 数字
>类型别名 :=> 数字

ssk.m(); // error
>ssk.m() : 任意
>类型别名 :=> 任意
>ssk.m : 任意
>类型别名 :=> 任意
>ssk : { p: 数字; }
>m : 任意
>类型别名 :=> 任意

let i: I = { p: 12, m() { } };
>i : I
>I : I
>{ p: 12, m() { } } : { p: 数字; m(): 无值; }
>p : 数字
>类型别名 :=> 数字
>12 : 12
>m : () => 无值

let si = { ...i };
>si : { p: 数字; m(): 无值; }
>{ ...i } : { p: 数字; m(): 无值; }
>i : I

let ssi = { ...i, ...i };
>ssi : { p: 数字; m(): 无值; }
>{ ...i, ...i } : { p: 数字; m(): 无值; }
>i : I
>i : I

si.p;
>si.p : 数字
>类型别名 :=> 数字
>si : { p: 数字; m(): 无值; }
>p : 数字
>类型别名 :=> 数字

si.m(); // ok
>si.m() : 无值
>类型别名 :=> 无值
>si.m : () => 无值
>si : { p: 数字; m(): 无值; }
>m : () => 无值

ssi.p;
>ssi.p : 数字
>类型别名 :=> 数字
>ssi : { p: 数字; m(): 无值; }
>p : 数字
>类型别名 :=> 数字

ssi.m(); // ok
>ssi.m() : 无值
>类型别名 :=> 无值
>ssi.m : () => 无值
>ssi : { p: 数字; m(): 无值; }
>m : () => 无值

let o = { p: 12, m() { } };
>o : { p: 数字; m(): 无值; }
>{ p: 12, m() { } } : { p: 数字; m(): 无值; }
>p : 数字
>类型别名 :=> 数字
>12 : 12
>m : () => 无值

let so = { ...o };
>so : { p: 数字; m(): 无值; }
>{ ...o } : { p: 数字; m(): 无值; }
>o : { p: 数字; m(): 无值; }

let sso = { ...o, ...o };
>sso : { p: 数字; m(): 无值; }
>{ ...o, ...o } : { p: 数字; m(): 无值; }
>o : { p: 数字; m(): 无值; }
>o : { p: 数字; m(): 无值; }

so.p;
>so.p : 数字
>类型别名 :=> 数字
>so : { p: 数字; m(): 无值; }
>p : 数字
>类型别名 :=> 数字

so.m(); // ok
>so.m() : 无值
>类型别名 :=> 无值
>so.m : () => 无值
>so : { p: 数字; m(): 无值; }
>m : () => 无值

sso.p;
>sso.p : 数字
>类型别名 :=> 数字
>sso : { p: 数字; m(): 无值; }
>p : 数字
>类型别名 :=> 数字

sso.m(); // ok
>sso.m() : 无值
>类型别名 :=> 无值
>sso.m : () => 无值
>sso : { p: 数字; m(): 无值; }
>m : () => 无值

