=== tests/cases/compiler/contextualTypeAppliedToVarArgs.ts ===
function delegate(instance: any, method: (...args: any[]) => any, data?: any): (...args: any[]) => any {
>delegate : (instance: any, method: (...args: any[]) => any, data?: any) => (...args: any[]) => any
>instance : any
>类型别名 :=> 任意
>method : (...args: any[]) => any
>args : any[]
>data : any
>类型别名 :=> 任意
>args : any[]

    return function () { };
>function () { } : () => void
}

class Foo{
>Foo : Foo


    Bar() {
>Bar : () => void

        delegate(this, function (source, args2)
>delegate(this, function (source, args2)        {            var a = source.node;            var b = args2.node;        } ) : (...args: any[]) => any
>delegate : (instance: any, method: (...args: any[]) => any, data?: any) => (...args: any[]) => any
>this : this
>function (source, args2)        {            var a = source.node;            var b = args2.node;        } : (source: any, args2: any) => void
>source : any
>类型别名 :=> 任意
>args2 : any
>类型别名 :=> 任意
        {
            var a = source.node;
>a : any
>类型别名 :=> 任意
>source.node : any
>类型别名 :=> 任意
>source : any
>类型别名 :=> 任意
>node : any
>类型别名 :=> 任意

            var b = args2.node;
>b : any
>类型别名 :=> 任意
>args2.node : any
>类型别名 :=> 任意
>args2 : any
>类型别名 :=> 任意
>node : any
>类型别名 :=> 任意

        } );
    }
}

