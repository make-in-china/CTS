=== tests/cases/compiler/contextualTypeAppliedToVarArgs.ts ===
function delegate(instance: any, method: (...args: any[]) => any, data?: any): (...args: any[]) => any {
>delegate : (instance: 任意, method: (...args: 任意[]) => 任意, data?: 任意) => (...args: 任意[]) => 任意
>instance : 任意
>类型别名 :=> 任意
>method : (...args: 任意[]) => 任意
>args : 任意[]
>data : 任意
>类型别名 :=> 任意
>args : 任意[]

    return function () { };
>function () { } : () => 无值
}

class Foo{
>Foo : Foo


    Bar() {
>Bar : () => 无值

        delegate(this, function (source, args2)
>delegate(this, function (source, args2)        {            var a = source.node;            var b = args2.node;        } ) : (...args: 任意[]) => 任意
>delegate : (instance: 任意, method: (...args: 任意[]) => 任意, data?: 任意) => (...args: 任意[]) => 任意
>this : 本体
>function (source, args2)        {            var a = source.node;            var b = args2.node;        } : (source: 任意, args2: 任意) => 无值
>source : 任意
>类型别名 :=> 任意
>args2 : 任意
>类型别名 :=> 任意
        {
            var a = source.node;
>a : 任意
>类型别名 :=> 任意
>source.node : 任意
>类型别名 :=> 任意
>source : 任意
>类型别名 :=> 任意
>node : 任意
>类型别名 :=> 任意

            var b = args2.node;
>b : 任意
>类型别名 :=> 任意
>args2.node : 任意
>类型别名 :=> 任意
>args2 : 任意
>类型别名 :=> 任意
>node : 任意
>类型别名 :=> 任意

        } );
    }
}

