=== tests/cases/compiler/initializePropertiesWithRenamedLet.ts ===
var x0;
>x0 : 任意
>类型别名 :=> 任意

if (true) {
>true : 为真
>类型别名 :=> 为真

    let x0;
>x0 : 任意
>类型别名 :=> 任意

    var obj1 = { x0: x0 };
>obj1 : { x0: 任意; }
>{ x0: x0 } : { x0: 任意; }
>x0 : 任意
>类型别名 :=> 任意
>x0 : 任意
>类型别名 :=> 任意

    var obj2 = { x0 };
>obj2 : { x0: 任意; }
>{ x0 } : { x0: 任意; }
>x0 : 任意
>类型别名 :=> 任意
}

var x, y, z;
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意

if (true) {
>true : 为真
>类型别名 :=> 为真

    let { x: x } = { x: 0 };
>x : 任意
>类型别名 :=> 任意
>x : 数字
>类型别名 :=> 数字
>{ x: 0 } : { x: 数字; }
>x : 数字
>类型别名 :=> 数字
>0 : 0

    let { y } = { y: 0 };
>y : 数字
>类型别名 :=> 数字
>{ y: 0 } : { y: 数字; }
>y : 数字
>类型别名 :=> 数字
>0 : 0

    let z;
>z : 任意
>类型别名 :=> 任意

    ({ z: z } = { z: 0 });
>({ z: z } = { z: 0 }) : { z: 数字; }
>{ z: z } = { z: 0 } : { z: 数字; }
>{ z: z } : { z: 任意; }
>z : 任意
>类型别名 :=> 任意
>z : 任意
>类型别名 :=> 任意
>{ z: 0 } : { z: 数字; }
>z : 数字
>类型别名 :=> 数字
>0 : 0

    ({ z } = { z: 0 });
>({ z } = { z: 0 }) : { z: 数字; }
>{ z } = { z: 0 } : { z: 数字; }
>{ z } : { z: 任意; }
>z : 任意
>类型别名 :=> 任意
>{ z: 0 } : { z: 数字; }
>z : 数字
>类型别名 :=> 数字
>0 : 0
}
