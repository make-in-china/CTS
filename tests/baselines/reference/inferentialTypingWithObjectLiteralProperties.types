=== tests/cases/compiler/inferentialTypingWithObjectLiteralProperties.ts ===
function f<T>(x: T, y: T): T {
>f : <T>(x: T, y: T) => T
>T : T
>x : T
>T : T
>y : T
>T : T
>T : T

return x;
>x : T
}
f({ x: [null] }, { x: [1] }).x[0] = "" // ok
>f({ x: [null] }, { x: [1] }).x[0] = "" : ""
>f({ x: [null] }, { x: [1] }).x[0] : 数字
>类型别名 :=> 数字
>f({ x: [null] }, { x: [1] }).x : 数字[]
>f({ x: [null] }, { x: [1] }) : { x: 数字[]; }
>f : <T>(x: T, y: T) => T
>{ x: [null] } : { x: 空值[]; }
>x : 空值[]
>[null] : 空值[]
>null : 空值
>类型别名 :=> 空值
>{ x: [1] } : { x: 数字[]; }
>x : 数字[]
>[1] : 数字[]
>1 : 1
>x : 数字[]
>0 : 0
>"" : ""

f({ x: [1] }, { x: [null] }).x[0] = "" // was error TS2011: Cannot convert 'string' to 'number'.
>f({ x: [1] }, { x: [null] }).x[0] = "" : ""
>f({ x: [1] }, { x: [null] }).x[0] : 数字
>类型别名 :=> 数字
>f({ x: [1] }, { x: [null] }).x : 数字[]
>f({ x: [1] }, { x: [null] }) : { x: 数字[]; }
>f : <T>(x: T, y: T) => T
>{ x: [1] } : { x: 数字[]; }
>x : 数字[]
>[1] : 数字[]
>1 : 1
>{ x: [null] } : { x: 空值[]; }
>x : 空值[]
>[null] : 空值[]
>null : 空值
>类型别名 :=> 空值
>x : 数字[]
>0 : 0
>"" : ""

