=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/functionExpressionIsOk.ts ===
const f1 = async function * f() {
>f1 : () => AsyncIterableIterator<任意>
>async function * f() {} : () => AsyncIterableIterator<任意>
>f : () => AsyncIterableIterator<任意>

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitNameIsError.ts ===
const f2 = async function * await() {
>f2 : () => 任意
>async function * : () => 任意
>await : () => 无值
>() {} : () => 无值

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldNameIsError.ts ===
const f3 = async function * yield() {
>f3 : () => 任意
>async function * : () => 任意
>yield : () => 无值
>() {} : () => 无值

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitParameterIsError.ts ===
const f4 = async function * (await) {
>f4 : () => 任意
>async function * ( : () => 任意
>await : 任意
>类型别名 :=> 任意

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldParameterIsError.ts ===
const f5 = async function * (yield) {
>f5 : () => 任意
>async function * ( : () => 任意
>yield : 任意
>类型别名 :=> 任意

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitInParameterInitializerIsError.ts ===
const f6 = async function * (a = await 1) {
>f6 : (a?: 数字) => AsyncIterableIterator<任意>
>async function * (a = await 1) {} : (a?: 数字) => AsyncIterableIterator<任意>
>a : 数字
>类型别名 :=> 数字
>await 1 : 1
>1 : 1

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldInParameterInitializerIsError.ts ===
const f7 = async function * (a = yield) {
>f7 : (a?: 任意) => AsyncIterableIterator<任意>
>async function * (a = yield) {} : (a?: 任意) => AsyncIterableIterator<任意>
>a : 任意
>类型别名 :=> 任意
>yield : 任意
>类型别名 :=> 任意

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedAsyncGeneratorIsOk.ts ===
const f8 = async function * () {
>f8 : () => AsyncIterableIterator<任意>
>async function * () {    async function * g() {    }} : () => AsyncIterableIterator<任意>

    async function * g() {
>g : () => AsyncIterableIterator<任意>
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionDeclarationNamedYieldIsError.ts ===
const f9 = async function * () {
>f9 : () => AsyncIterableIterator<() => 无值>
>async function * () {    function yield() {    }} : () => AsyncIterableIterator<() => 无值>

    function yield() {
> : () => 任意
>yield() {    } : 任意
>类型别名 :=> 任意
>() {    } : () => 无值
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionExpressionNamedYieldIsError.ts ===
const f10 = async function * () {
>f10 : () => AsyncIterableIterator<() => 无值>
>async function * () {    const x = function yield() {    };} : () => AsyncIterableIterator<() => 无值>

    const x = function yield() {
>x : () => 任意
>function : () => 任意
>yield() {    } : 任意
>类型别名 :=> 任意
>() {    } : () => 无值

    };
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionDeclarationNamedAwaitIsError.ts ===
const f11 = async function * () {
>f11 : () => AsyncIterableIterator<任意>
>async function * () {    function await() {    }} : () => AsyncIterableIterator<任意>

    function await() {
> : () => 任意
>await() : 任意
>类型别名 :=> 任意
>() : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意
    }
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/nestedFunctionExpressionNamedAwaitIsError.ts ===
const f12 = async function * () {
>f12 : () => AsyncIterableIterator<任意>
>async function * () {    const x = function await() {    };} : () => AsyncIterableIterator<任意>

    const x = function await() {
>x : () => 任意
>function : () => 任意
>await() : 任意
>类型别名 :=> 任意
>() : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

    };
};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldIsOk.ts ===
const f13 = async function * () {
>f13 : () => AsyncIterableIterator<任意>
>async function * () {    yield;} : () => AsyncIterableIterator<任意>

    yield;
>yield : 任意
>类型别名 :=> 任意

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldWithValueIsOk.ts ===
const f14 = async function * () {
>f14 : () => AsyncIterableIterator<1>
>async function * () {    yield 1;} : () => AsyncIterableIterator<1>

    yield 1;
>yield 1 : 任意
>类型别名 :=> 任意
>1 : 1

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldStarMissingValueIsError.ts ===
const f15 = async function * () {
>f15 : () => AsyncIterableIterator<任意>
>async function * () {    yield *;} : () => AsyncIterableIterator<任意>

    yield *;
>yield * : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldStarWithValueIsOk.ts ===
const f16 = async function * () {
>f16 : () => AsyncIterableIterator<任意>
>async function * () {    yield * [];} : () => AsyncIterableIterator<任意>

    yield * [];
>yield * [] : 任意
>类型别名 :=> 任意
>[] : 未定[]

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitWithValueIsOk.ts ===
const f17 = async function * () {
>f17 : () => AsyncIterableIterator<任意>
>async function * () {    await 1;} : () => AsyncIterableIterator<任意>

    await 1;
>await 1 : 1
>1 : 1

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitMissingValueIsError.ts ===
const f18 = async function * () {
>f18 : () => AsyncIterableIterator<任意>
>async function * () {    await;} : () => AsyncIterableIterator<任意>

    await;
>await : 任意
>类型别名 :=> 任意
> : 任意
>类型别名 :=> 任意

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/awaitAsTypeIsOk.ts ===
interface await {}
>await : await

const f19 = async function * () {
>f19 : () => AsyncIterableIterator<任意>
>async function * () {    let x: await;} : () => AsyncIterableIterator<任意>

    let x: await;
>x : await
>await : await

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldAsTypeIsOk.ts ===
interface yield {}
>yield : yield

const f20 = async function * () {
>f20 : () => AsyncIterableIterator<任意>
>async function * () {    let x: yield;} : () => AsyncIterableIterator<任意>

    let x: yield;
>x : yield
>yield : yield

};
=== tests/cases/conformance/parser/ecmascriptnext/asyncGenerators/yieldInNestedComputedPropertyIsOk.ts ===
const f21 = async function *() {
>f21 : () => AsyncIterableIterator<任意>
>async function *() {    const x = { [yield]: 1 };} : () => AsyncIterableIterator<任意>

    const x = { [yield]: 1 };
>x : { [x: 数字]: 数字; }
>{ [yield]: 1 } : { [x: 数字]: 数字; }
>yield : 任意
>类型别名 :=> 任意
>1 : 1

};

