=== tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts ===
var f1 = ()
>f1 : () => 无值
>()    => { } : () => 无值

    => { }
var f2 = (x: string, y: string) /*
>f2 : (x: 文字, y: 文字) => 无值
>(x: string, y: string) /*  */  => { } : (x: 文字, y: 文字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 文字
>类型别名 :=> 文字

  */  => { }
var f3 = (x: string, y: number, ...rest)
>f3 : (x: 文字, y: 数字, ...rest: 任意[]) => 无值
>(x: string, y: number, ...rest)    => { } : (x: 文字, y: 数字, ...rest: 任意[]) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>rest : 任意[]

    => { }
var f4 = (x: string, y: number, ...rest) /*
>f4 : (x: 文字, y: 数字, ...rest: 任意[]) => 无值
>(x: string, y: number, ...rest) /*  */  => { } : (x: 文字, y: 数字, ...rest: 任意[]) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>rest : 任意[]

  */  => { }
var f5 = (...rest)
>f5 : (...rest: 任意[]) => 无值
>(...rest)    => { } : (...rest: 任意[]) => 无值
>rest : 任意[]

    => { }
var f6 = (...rest) /*
>f6 : (...rest: 任意[]) => 无值
>(...rest) /*  */  => { } : (...rest: 任意[]) => 无值
>rest : 任意[]

  */  => { }
var f7 = (x: string, y: number, z = 10)
>f7 : (x: 文字, y: 数字, z?: 数字) => 无值
>(x: string, y: number, z = 10)    => { } : (x: 文字, y: 数字, z?: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
>10 : 10

    => { }
var f8 = (x: string, y: number, z = 10) /*
>f8 : (x: 文字, y: 数字, z?: 数字) => 无值
>(x: string, y: number, z = 10) /*  */  => { } : (x: 文字, y: 数字, z?: 数字) => 无值
>x : 文字
>类型别名 :=> 文字
>y : 数字
>类型别名 :=> 数字
>z : 数字
>类型别名 :=> 数字
>10 : 10

  */  => { }
var f9 = (a: number): number
>f9 : (a: 数字) => 数字
>(a: number): number    => a : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字

    => a;
>a : 数字
>类型别名 :=> 数字

var f10 = (a: number) :
>f10 : (a: 数字) => 数字
>(a: number) :  number    => a : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字

  number
    => a
>a : 数字
>类型别名 :=> 数字

var f11 = (a: number): number /*
>f11 : (a: 数字) => 数字
>(a: number): number /*    */ => a : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字

    */ => a;
>a : 数字
>类型别名 :=> 数字

var f12 = (a: number) :
>f12 : (a: 数字) => 数字
>(a: number) :  number /*    */ => a : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字

  number /*
    */ => a
>a : 数字
>类型别名 :=> 数字

// Should be valid.
var f11 = (a: number
>f11 : (a: 数字) => 数字
>(a: number    ) => a : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字

    ) => a;
>a : 数字
>类型别名 :=> 数字

// Should be valid.
var f12 = (a: number)
>f12 : (a: 数字) => 数字
>(a: number)    : number => a : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字

    : number => a;
>a : 数字
>类型别名 :=> 数字

// Should be valid.
var f13 = (a: number):
>f13 : (a: 数字) => 数字
>(a: number):    number => a : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字

    number => a;
>a : 数字
>类型别名 :=> 数字

// Should be valid.
var f14 = () /* */ => {}
>f14 : () => 无值
>() /* */ => {} : () => 无值

// Should be valid.
var f15 = (a: number): number /* */ => a
>f15 : (a: 数字) => 数字
>(a: number): number /* */ => a : (a: 数字) => 数字
>a : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字

// Should be valid.
var f16 = (a: number, b = 10):
>f16 : (a: 数字, b?: 数字) => 数字
>(a: number, b = 10):  number /* */ => a + b : (a: 数字, b?: 数字) => 数字
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字
>10 : 10

  number /* */ => a + b;
>a + b : 数字
>类型别名 :=> 数字
>a : 数字
>类型别名 :=> 数字
>b : 数字
>类型别名 :=> 数字

function foo(func: () => boolean) { }
>foo : (func: () => 真假) => 无值
>func : () => 真假

foo(()
>foo(()    => true) : 无值
>类型别名 :=> 无值
>foo : (func: () => 真假) => 无值
>()    => true : () => 为真

    => true);
>true : 为真
>类型别名 :=> 为真

foo(()
>foo(()    => { return false; }) : 无值
>类型别名 :=> 无值
>foo : (func: () => 真假) => 无值
>()    => { return false; } : () => 为假

    => { return false; });
>false : 为假
>类型别名 :=> 为假

module m {
>m : 类为 m

    class City {
>City : City

        constructor(x: number, thing = ()
>x : 数字
>类型别名 :=> 数字
>thing : () => 数字
>()            => 100 : () => 数字

            => 100) {
>100 : 100
        }

        public m = ()
>m : () => 数字
>()            => 2 * 2 * 2 : () => 数字

            => 2 * 2 * 2
>2 * 2 * 2 : 数字
>类型别名 :=> 数字
>2 * 2 : 数字
>类型别名 :=> 数字
>2 : 2
>2 : 2
>2 : 2
    }

    export enum Enum {
>Enum : Enum

        claw = (()
>claw : Enum
>(()            => 10)() : 数字
>类型别名 :=> 数字
>(()            => 10) : () => 数字
>()            => 10 : () => 数字

            => 10)()
>10 : 10
    }

    export var v = x
>v : (x: 任意) => City
>x        => new City(Enum.claw) : (x: 任意) => City
>x : 任意
>类型别名 :=> 任意

        => new City(Enum.claw);
>new City(Enum.claw) : City
>City : 类为 City
>Enum.claw : Enum
>Enum : 类为 Enum
>claw : Enum
}

