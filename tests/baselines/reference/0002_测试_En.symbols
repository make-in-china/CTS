=== /a/node_modules/@types/testEn/index.d.ts ===
export declare type foo = {
>foo : Symbol(foo, Decl(index.d.ts, 0, 0))

  bar: number | null;
>bar : Symbol(bar, Decl(index.d.ts, 0, 27))

  baz: string;
>baz : Symbol(baz, Decl(index.d.ts, 1, 21))

  nested: {
>nested : Symbol(nested, Decl(index.d.ts, 2, 14))

    a: number;
>a : Symbol(a, Decl(index.d.ts, 3, 11))

    b: string | null;
>b : Symbol(b, Decl(index.d.ts, 4, 14))
  }
};

export declare type bar = {
>bar : Symbol(bar, Decl(index.d.ts, 7, 2))

  elem1: number | null;
>elem1 : Symbol(elem1, Decl(index.d.ts, 9, 27))

  elem2: foo | null;
>elem2 : Symbol(elem2, Decl(index.d.ts, 10, 23))
>foo : Symbol(foo, Decl(index.d.ts, 0, 0))

};

=== /a/测试_2_en.ts ===
import { foo ,bar } from "testEn"
>foo : Symbol(foo, Decl(测试_2_en.ts, 0, 8))
>bar : Symbol(bar, Decl(测试_2_en.ts, 0, 14))

const aFoo: foo = { bar: 3, baz: "b", nested: { a: 1, b: "y" } };
>aFoo : Symbol(aFoo, Decl(测试_2_en.ts, 2, 5))
>foo : Symbol(foo, Decl(测试_2_en.ts, 0, 8))
>bar : Symbol(bar, Decl(测试_2_en.ts, 2, 19))
>baz : Symbol(baz, Decl(测试_2_en.ts, 2, 27))
>nested : Symbol(nested, Decl(测试_2_en.ts, 2, 37))
>a : Symbol(a, Decl(测试_2_en.ts, 2, 47))
>b : Symbol(b, Decl(测试_2_en.ts, 2, 53))

if (aFoo.bar && aFoo.nested.b) {
>aFoo.bar : Symbol(bar, Decl(index.d.ts, 0, 27))
>aFoo : Symbol(aFoo, Decl(测试_2_en.ts, 2, 5))
>bar : Symbol(bar, Decl(index.d.ts, 0, 27))
>aFoo.nested.b : Symbol(b, Decl(index.d.ts, 4, 14))
>aFoo.nested : Symbol(nested, Decl(index.d.ts, 2, 14))
>aFoo : Symbol(aFoo, Decl(测试_2_en.ts, 2, 5))
>nested : Symbol(nested, Decl(index.d.ts, 2, 14))
>b : Symbol(b, Decl(index.d.ts, 4, 14))

  const { bar, baz, nested: { a, b: text } } = aFoo;
>bar : Symbol(bar, Decl(测试_2_en.ts, 5, 9))
>baz : Symbol(baz, Decl(测试_2_en.ts, 5, 14))
>nested : Symbol(nested, Decl(index.d.ts, 2, 14))
>a : Symbol(a, Decl(测试_2_en.ts, 5, 29))
>b : Symbol(b, Decl(index.d.ts, 4, 14))
>text : Symbol(text, Decl(测试_2_en.ts, 5, 32))
>aFoo : Symbol(aFoo, Decl(测试_2_en.ts, 2, 5))

  const right: number = aFoo.bar;
>right : Symbol(right, Decl(测试_2_en.ts, 6, 7))
>aFoo.bar : Symbol(bar, Decl(index.d.ts, 0, 27))
>aFoo : Symbol(aFoo, Decl(测试_2_en.ts, 2, 5))
>bar : Symbol(bar, Decl(index.d.ts, 0, 27))

  const wrong: number = bar;
>wrong : Symbol(wrong, Decl(测试_2_en.ts, 7, 7))
>bar : Symbol(bar, Decl(测试_2_en.ts, 5, 9))

  const another: string = baz;
>another : Symbol(another, Decl(测试_2_en.ts, 8, 7))
>baz : Symbol(baz, Decl(测试_2_en.ts, 5, 14))

  const aAgain: number = a;
>aAgain : Symbol(aAgain, Decl(测试_2_en.ts, 9, 7))
>a : Symbol(a, Decl(测试_2_en.ts, 5, 29))

  const bAgain: string = text;
>bAgain : Symbol(bAgain, Decl(测试_2_en.ts, 10, 7))
>text : Symbol(text, Decl(测试_2_en.ts, 5, 32))
}


const bBar = { elem1: 7, elem2: aFoo };
>bBar : Symbol(bBar, Decl(测试_2_en.ts, 14, 5))
>elem1 : Symbol(elem1, Decl(测试_2_en.ts, 14, 14))
>elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))
>aFoo : Symbol(aFoo, Decl(测试_2_en.ts, 2, 5))

if (bBar.elem2 && bBar.elem2.bar && bBar.elem2.nested.b) {
>bBar.elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))
>bBar : Symbol(bBar, Decl(测试_2_en.ts, 14, 5))
>elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))
>bBar.elem2.bar : Symbol(bar, Decl(index.d.ts, 0, 27))
>bBar.elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))
>bBar : Symbol(bBar, Decl(测试_2_en.ts, 14, 5))
>elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))
>bar : Symbol(bar, Decl(index.d.ts, 0, 27))
>bBar.elem2.nested.b : Symbol(b, Decl(index.d.ts, 4, 14))
>bBar.elem2.nested : Symbol(nested, Decl(index.d.ts, 2, 14))
>bBar.elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))
>bBar : Symbol(bBar, Decl(测试_2_en.ts, 14, 5))
>elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))
>nested : Symbol(nested, Decl(index.d.ts, 2, 14))
>b : Symbol(b, Decl(index.d.ts, 4, 14))

  const { bar, baz, nested: { a, b: text } } = bBar.elem2;
>bar : Symbol(bar, Decl(测试_2_en.ts, 17, 9))
>baz : Symbol(baz, Decl(测试_2_en.ts, 17, 14))
>nested : Symbol(nested, Decl(index.d.ts, 2, 14))
>a : Symbol(a, Decl(测试_2_en.ts, 17, 29))
>b : Symbol(b, Decl(index.d.ts, 4, 14))
>text : Symbol(text, Decl(测试_2_en.ts, 17, 32))
>bBar.elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))
>bBar : Symbol(bBar, Decl(测试_2_en.ts, 14, 5))
>elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))

  const right: number = bBar.elem2.bar;
>right : Symbol(right, Decl(测试_2_en.ts, 18, 7))
>bBar.elem2.bar : Symbol(bar, Decl(index.d.ts, 0, 27))
>bBar.elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))
>bBar : Symbol(bBar, Decl(测试_2_en.ts, 14, 5))
>elem2 : Symbol(elem2, Decl(测试_2_en.ts, 14, 24))
>bar : Symbol(bar, Decl(index.d.ts, 0, 27))

  const wrong: number = bar;
>wrong : Symbol(wrong, Decl(测试_2_en.ts, 19, 7))
>bar : Symbol(bar, Decl(测试_2_en.ts, 17, 9))

  const another: string = baz;
>another : Symbol(another, Decl(测试_2_en.ts, 20, 7))
>baz : Symbol(baz, Decl(测试_2_en.ts, 17, 14))

  const aAgain: number = a;
>aAgain : Symbol(aAgain, Decl(测试_2_en.ts, 21, 7))
>a : Symbol(a, Decl(测试_2_en.ts, 17, 29))

  const bAgain: string = text;
>bAgain : Symbol(bAgain, Decl(测试_2_en.ts, 22, 7))
>text : Symbol(text, Decl(测试_2_en.ts, 17, 32))
}

