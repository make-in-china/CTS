=== tests/cases/compiler/promisesWithConstraints.ts ===
interface Promise<T> {
>Promise : Promise<T>
>T : T

    then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : { <TResult1 = T, TResult2 = 不及>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: 任意) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(cb: (x: T) => Promise<U>): Promise<U>; }
>U : U
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U
}

interface CPromise<T extends { x: any; }> {
>CPromise : CPromise<T>
>T : T
>x : 任意
>类型别名 :=> 任意

    then<U extends { x: any; }>(cb: (x: T) => Promise<U>): Promise<U>;
>then : <U 扩展 { x: 任意; }>(cb: (x: T) => Promise<U>) => Promise<U>
>U : U
>x : 任意
>类型别名 :=> 任意
>cb : (x: T) => Promise<U>
>x : T
>T : T
>Promise : Promise<T>
>U : U
>Promise : Promise<T>
>U : U
}

interface Foo { x; }
>Foo : Foo
>x : 任意
>类型别名 :=> 任意

interface Bar { x; y; }
>Bar : Bar
>x : 任意
>类型别名 :=> 任意
>y : 任意
>类型别名 :=> 任意

var a: Promise<Foo>;
>a : Promise<Foo>
>Promise : Promise<T>
>Foo : Foo

var b: Promise<Bar>;
>b : Promise<Bar>
>Promise : Promise<T>
>Bar : Bar

a = b; // ok
>a = b : Promise<Bar>
>a : Promise<Foo>
>b : Promise<Bar>

b = a; // ok
>b = a : Promise<Foo>
>b : Promise<Bar>
>a : Promise<Foo>

var a2: CPromise<Foo>;
>a2 : CPromise<Foo>
>CPromise : CPromise<T>
>Foo : Foo

var b2: CPromise<Bar>;
>b2 : CPromise<Bar>
>CPromise : CPromise<T>
>Bar : Bar

a2 = b2; // ok
>a2 = b2 : CPromise<Bar>
>a2 : CPromise<Foo>
>b2 : CPromise<Bar>

b2 = a2; // was error
>b2 = a2 : CPromise<Foo>
>b2 : CPromise<Bar>
>a2 : CPromise<Foo>

